<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  font.s7i      Defines the font interface                        *)</span>
<span class="comment">(*  Copyright (C) 2010  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Interface type for fonts.
 *  The font interface is implemented with ''emptyFont'',
 *  ''fontProperties'', [[bitmapfont|bitmapFont]] and [[vectorfont|vectorFont]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: font <span class="keywd">is</span> sub object interface;


<span class="comment">(**
 *  Get the height of the letter 'x' for a given font.
 *  The height measured in pixels.
 *  @return the pixel height of 'x' for ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: xHeight (<span class="op">in</span> <span class="type">font</span>: aFont)                 <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the height of capital letters for a given font.
 *  The height measured in pixels.
 *  @return the capital letter height of ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: capHeight (<span class="op">in</span> <span class="type">font</span>: aFont)               <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the height of a font.
 *  This is the height necessary to display a line with all chars
 *  of a font. The line height is measured in pixels.
 *  @return the line height of ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: lineHeight (<span class="op">in</span> <span class="type">font</span>: aFont)              <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the ascent of a font.
 *  The ascent is the distance between xHeight and the height of the
 *  tallest lower-case letter. The ascent is measured in pixels.
 *  @return the ascent pixels of ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ascent (<span class="op">in</span> <span class="type">font</span>: aFont)                  <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the descent of a font.
 *  The descent is the maximum distance that a letter extends below
 *  the baseline of a font. The descent is measured in pixels.
 *  @return the descent pixels of ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: descent (<span class="op">in</span> <span class="type">font</span>: aFont)                 <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: baseLineDelta (<span class="op">in</span> <span class="type">font</span>: aFont)           <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the maximal column width of a font.
 *  The width of all chars in a font is checked to get the maximal
 *  column width. The maximal column width is measured in pixels.
 *  @return the maximal column width of ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: columnWidth (<span class="op">in</span> <span class="type">font</span>: aFont)             <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the spacing between the chars of a font.
 *  The character spacing is measured in pixels.
 *  @return the spacing between the chars of ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: characterSpacing (<span class="op">in</span> <span class="type">font</span>: aFont)        <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the pixel width of a string displayed with a font.
 *  @return the pixel width of ''stri'' displayed with ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">font</span>: aFont, <span class="op">in</span> <span class="type">string</span>: stri)  <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  If a string is displayed with a font, how many chars fit in a width.
 *  The width is specified in pixels. The expression:
 *   numOfCharsInWidth(aFont, stri, width(aFont, stri))
 *  will always be equivalent to
 *   length(stri);
 *  @return the number of chars from ''stri'' that fit into ''allowedWidth''
 *          if ''stri'' is displayed with ''aFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: numOfCharsInWidth (<span class="op">in</span> <span class="type">font</span>: aFont,
    <span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">integer</span>: allowedWidth)               <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Compare two font values.
 *  This function does neither compare font contents nor font names.
 *  The order of two fonts is determined by comparing the memory
 *  positions of their internal data representation. Therefore the
 *  result of ''compare'' is arbitrary and may change if the
 *  program is executed again. Inside a program the result of
 *  ''compare'' is consistent and can be used to maintain hash
 *  tables.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">font</span>: font1, <span class="op">in</span> <span class="type">font</span>: font2) <span class="keywd">is</span> action <span class="stri">"ITF_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a font.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">font</span>: aFont)                <span class="keywd">is</span> action <span class="stri">"ITF_HASHCODE"</span>;


<span class="comment">(**
 *  Font implementation type to represent an empty font.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: emptyFont <span class="keywd">is</span> new <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(emptyFont, font);

<span class="keywd">const</span> <span class="type">font</span>: (attr font) . value                              <span class="keywd">is</span> emptyFont.value;


<span class="comment">(**
 *  Font implementation type to manage font properties.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: fontProperties <span class="keywd">is</span> sub emptyFont <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: xHeight          <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: capHeight        <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lineHeight       <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: ascent           <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: descent          <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: baseLineDelta    <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: columnWidth      <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: characterSpacing <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(fontProperties, font);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: xHeight (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.xHeight;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: capHeight (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.capHeight;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: lineHeight (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.lineHeight;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ascent (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.ascent;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: descent (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.descent;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: baseLineDelta (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.baseLineDelta;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: columnWidth (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.columnWidth;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: characterSpacing (<span class="op">in</span> <span class="type">fontProperties</span>: bmpFont) <span class="keywd">is</span>
  <span class="keywd">return</span> bmpFont.characterSpacing;
</pre>
</body>
</html>
