<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  enable_io.s7i Templates to enable file I/O for a given type     *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2018  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/file.htm">file.s7i</a>"</span>;


<span class="keywd">var</span> <span class="type">file</span>: IN <span class="keywd">is</span> <span class="keywd">forward</span>;
<span class="keywd">var</span> <span class="type">file</span>: OUT <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Template function to define input functions for ''aType''.
 *  It defines the functions [[#read(inout_aType)|read]] and
 *  [[#readln(inout_aType)|readln]]. The functions read a
 *  whitespace terminated word respectively a line as
 *  [[string]]. Afterwards the ''parse'' operator is used to
 *  convert the ''string'' to an ''aType'' value. The functions
 *  [[#read(inout_file,inout_aType)|read]] and
 *  [[#readln(inout_file,inout_aType)|readln]] are defined with
 *  [[file]] argument and without [[file]] argument. The
 *  functions without [[file]] argument use the standard
 *  input file [[stdio#IN|IN]].
 *   const type: myType is ...
 *   const func myType is (attr myType) parse (in string: stri) is ...
 *   enable_input(myType);
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: enable_input (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>

    <span class="comment">(**
     *  Read ''aVar'' from a word read from ''inFile''.
     *  Before reading the word it skips spaces and tabs. The function
     *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left inFile.bufferChar contains the
     *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the word to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">aType</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
         aVar := aType <span class="op">parse</span> getwd(inFile);
      <span class="keywd">end</span> <span class="keywd">func</span>;

   <span class="comment">(**
     *  Read ''aVar'' from a word read from ''inFile'' or use ''defaultValue''.
     *  Before reading the word it skips spaces and tabs. The function
     *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
     *  If the word is empty ''defaultValue'' is assigned to ''aVar''.
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left inFile.bufferChar contains the
     *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the word to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">aType</span>: aVar,
        <span class="op">in</span> <span class="type">aType</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := getwd(inFile);
        <span class="keywd">if</span> stri = <span class="stri">""</span> <span class="keywd">then</span>
          aVar := defaultValue;
        <span class="keywd">else</span>
          aVar := aType <span class="op">parse</span> stri;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Read ''aVar'' from a line read from ''inFile''.
     *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left inFile.bufferChar contains the
     *  line ending character ('\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the line to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">aType</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        aVar := aType <span class="op">parse</span> trimValue(aType, getln(inFile));
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Read ''aVar'' from a line read from ''inFile'' or use ''defaultValue''.
     *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
     *  If the line is empty ''defaultValue'' is assigned to ''aVar''.
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left inFile.bufferChar contains the
     *  line ending character ('\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the line to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">aType</span>: aVar,
        <span class="op">in</span> <span class="type">aType</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        stri := getln(inFile);
        <span class="keywd">if</span> stri = <span class="stri">""</span> <span class="keywd">then</span>
          aVar := defaultValue;
        <span class="keywd">else</span>
          aVar := aType <span class="op">parse</span> trimValue(aType, stri);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Read ''aVar'' from a word read from the standard input file [[stdio#IN|IN]].
     *  Before reading the word it skips spaces and tabs. The function
     *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left [[stdio#IN|IN]].bufferChar contains the
     *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the word to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">aType</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        read(IN, aVar);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Read ''aVar'' from a word read from standard input ([[stdio#IN|IN]]) or use ''defaultValue''.
     *  Before reading the word it skips spaces and tabs. The function
     *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
     *  If the word is empty ''defaultValue'' is assigned to ''aVar''.
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left [[stdio#IN|IN]].bufferChar contains the
     *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the word to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">aType</span>: aVar, <span class="op">in</span> <span class="type">aType</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        read(IN, aVar, defaultValue);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Read ''aVar'' from a line read from the standard input file [[stdio#IN|IN]].
     *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left [[stdio#IN|IN]].bufferChar contains the
     *  line ending character ('\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the line to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">aType</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        readln(IN, aVar);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Read ''aVar'' from a line read from standard input ([[stdio#IN|IN]]) or use ''defaultValue''.
     *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
     *  If the line is empty ''defaultValue'' is assigned to ''aVar''.
     *  The conversion to the type ''aType'' is done with the ''parse''
     *  operator. When the function is left [[stdio#IN|IN]].bufferChar contains the
     *  line ending character ('\n' or [[char#EOF|EOF]]).
     *  @exception RANGE_ERROR If the ''parse'' operator cannot convert
     *             the line to the type ''aType''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">aType</span>: aVar, <span class="op">in</span> <span class="type">aType</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        readln(IN, aVar, defaultValue);
      <span class="keywd">end</span> <span class="keywd">func</span>;

  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Template function to define output functions for ''aType''.
 *  It defines the functions [[#write(in_aType)|write]]
 *  and [[#writeln(in_aType)|writeln]] and the operators
 *  [[#(in_aType)lpad(in_integer)|lpad]], [[#(in_aType)rpad(in_integer)|rpad]]
 *  and [[#(in_string)&lt;&amp;(in_aType)|&lt;&amp;]]. The functions and operators use
 *  the ''str'' function to convert the ''aType'' value to a [[string]].
 *  Afterwards they call the corresponding function respectively operator
 *  for [[string]] values. The functions [[#write(inout_file,in_aType)|write]]
 *  and [[#writeln(inout_file,in_aType)|writeln]] are defined with [[file]]
 *  argument and without [[file]] argument. The functions without [[file]]
 *  argument write to the standard output file [[stdio#OUT|OUT]].
 *   const type: myType is ...
 *   const func string: (in myType: myTypeValue) is ...
 *   enable_output(myType);
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: enable_output (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>

    <span class="comment">(**
     *  Write ''aValue'' to the [[file]] ''outFile''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        write(outFile, str(aValue));
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Write ''aValue'' followed by end-of-line to the [[file]] ''outFile''.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        writeln(outFile, str(aValue));
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Write ''aValue'' to the standard output file [[stdio#OUT|OUT]].
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        write(OUT, aValue);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Write ''aValue'' followed by end-of-line to the standard output file [[stdio#OUT|OUT]].
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="op">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        writeln(OUT, aValue);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Convert ''aValue'' to [[string]] and pad it with spaces at the left side.
     *  The [[string]] is padded up to a given length.
     *  @return ''aValue'' converted to string and left padded with spaces.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">aType</span>: aValue) <span class="op">lpad</span> (<span class="op">in</span> <span class="type">integer</span>: leng) <span class="keywd">is</span>
      <span class="keywd">return</span> str(aValue) <span class="op">lpad</span> leng;

    <span class="comment">(**
     *  Convert ''aValue'' to [[string]] and pad it with spaces at the right side.
     *  The [[string]] is padded up to a given length.
     *  @return ''aValue'' converted to string and right padded with spaces.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">aType</span>: aValue) <span class="op">rpad</span> (<span class="op">in</span> <span class="type">integer</span>: leng) <span class="keywd">is</span>
      <span class="keywd">return</span> str(aValue) <span class="op">rpad</span> leng;

    <span class="comment">(**
     *  Convert ''aValue'' to [[string]] and append it to ''stri''.
     *  This operator is intended for write statements.
     *  @return the result of the concatenation.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">string</span>: stri) &lt;&amp; (<span class="op">in</span> <span class="type">aType</span>: aValue) <span class="keywd">is</span>
      <span class="keywd">return</span> stri &amp; str(aValue);

    <span class="comment">(**
     *  Convert ''aValue'' to [[string]] and append ''stri'' to it.
     *  This operator is intended for write statements.
     *  @return the result of the concatenation.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">aType</span>: aValue) &lt;&amp; (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
      <span class="keywd">return</span> str(aValue) &amp; stri;

  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Template function to define I/O functions for ''aType''.
 *  It defines the functions [[#read(inout_aType)|read]],
 *  [[#readln(inout_aType)|readln]], [[#write(in_aType)|write]]
 *  and [[#writeln(in_aType)|writeln]] and the
 *  operators [[#(in_aType)lpad(in_integer)|lpad]],
 *  [[#(in_aType)rpad(in_integer)|rpad]]
 *  and [[#(in_string)&lt;&amp;(in_aType)|&lt;&amp;]]. To do this it
 *  calls the templates [[#enable_input(in_type)|enable_input]] and
 *  [[#enable_output(in_type)|enable_output]].
 *   const type: myType is ...
 *   const func myType is (attr myType) parse (in string: stri) is ...
 *   const func string: (in myType: myTypeValue) is ...
 *   enable_io(myType);
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: enable_io (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    enable_input(aType);
    enable_output(aType);
  <span class="keywd">end</span> <span class="keywd">func</span>;


enable_io(char);
enable_io(integer);
enable_io(boolean);
enable_io(bitset);
enable_output(void);
<span class="comment"># enable_output(type);</span>
<span class="comment"># enable_output(ACTION);</span>
</pre>
</body>
</html>
