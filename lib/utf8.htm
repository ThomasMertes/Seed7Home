<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  utf8.s7i      File implementation type for UTF-8 files          *)</span>
<span class="comment">(*  Copyright (C) 2005  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/external_file.htm">external_file.s7i</a>"</span>;


<span class="comment">(**
 *  [[file|File]] implementation type for UTF-8 files.
 *  This type supports UTF-8 encoded sequential files of the
 *  operating system. UTF-8 files are seekable, therefore they
 *  support the functions [[external_file#length(in_external_file)|length]],
 *  [[#seek(in_utf8File,in_integer)|seek]] and
 *  [[external_file#tell(in_external_file)|tell]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: utf8File <span class="keywd">is</span> <span class="keywd">sub</span> external_file <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: utf8_getc (<span class="keywd">ref</span> <span class="type">clib_file</span>: inFile)                    <span class="keywd">is</span> action <span class="stri">"UT8_GETC"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: utf8_gets (<span class="op">in</span> <span class="type">clib_file</span>: inFile,
                              <span class="op">in</span> <span class="type">integer</span>: maxLength)                  <span class="keywd">is</span> action <span class="stri">"UT8_GETS"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: utf8_word_read (<span class="keywd">ref</span> <span class="type">clib_file</span>: inFile,
                                   <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)       <span class="keywd">is</span> action <span class="stri">"UT8_WORD_READ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: utf8_line_read (<span class="keywd">ref</span> <span class="type">clib_file</span>: inFile,
                                   <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)       <span class="keywd">is</span> action <span class="stri">"UT8_LINE_READ"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: utf8_write (<span class="keywd">ref</span> <span class="type">clib_file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri)      <span class="keywd">is</span> action <span class="stri">"UT8_WRITE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: utf8_seek (<span class="keywd">ref</span> <span class="type">clib_file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: position)    <span class="keywd">is</span> action <span class="stri">"UT8_SEEK"</span>;


<span class="comment">(**
 *  Opens an Unicode file which uses the UTF-8 encoding.
 *  The file is opened with the specified ''path'' and ''mode''.
 *  There are text modes and binary modes:
 *  *Binary modes:
 *  ** "r"   Open file for reading.
 *  ** "w"   Truncate to zero length or create file for writing.
 *  ** "a"   Append; open or create file for writing at end-of-file.
 *  ** "r+"  Open file for update (reading and writing).
 *  ** "w+"  Truncate to zero length or create file for update.
 *  ** "a+"  Append; open or create file for update, writing at end-of-file.
 *  *Text modes:
 *  ** "rt"  Open file for reading.
 *  ** "wt"  Truncate to zero length or create file for writing.
 *  ** "at"  Append; open or create file for writing at end-of-file.
 *  ** "rt+" Open file for update (reading and writing).
 *  ** "wt+" Truncate to zero length or create file for update.
 *  ** "at+" Append; open or create file for update, writing at end-of-file.
 *  Note that this modes differ from the ones used by the C function
 *  fopen().
 *  @param path Path of the file to be opened. The path must
 *         use the standard path representation.
 *  @param mode Mode of the file to be opened.
 *  @return the file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened or if ''path'' refers to
 *          a directory.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system path type.
 *  @exception RANGE_ERROR The ''mode'' is not one of the allowed
 *             values or ''path'' does not use the standard path
 *             representation or ''path'' cannot be converted
 *             to the system path type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openUtf8 (<span class="op">in</span> <span class="type">string</span>: path, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: open_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">utf8File</span>: new_file <span class="keywd">is</span> utf8File.value;
  <span class="keywd">begin</span>
    open_file := openClibFile(path, mode);
    <span class="keywd">if</span> open_file &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_file.ext_file := open_file;
      new_file.name := path;
      newFile := toInterface(new_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string to an UTF-8 file.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">utf8File</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    utf8_write(outFile.ext_file, stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a character from an UTF-8 file.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *  @exception RANGE_ERROR The file contains an invalid encoding.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="op">in</span> <span class="type">utf8File</span>: inFile) <span class="keywd">is</span>
  <span class="keywd">return</span> utf8_getc(inFile.ext_file);


<span class="comment">(**
 *  Return a string read with a maximum length from an UTF-8 file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative, or
 *             the file contains an invalid encoding.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">utf8File</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span>
  <span class="keywd">return</span> utf8_gets(inFile.ext_file, maxLength);


<span class="comment">(**
 *  Read a word from an UTF-8 file.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with ' ', '\t', '\n', "\r\n" or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  That means that the '\r' of a "\r\n" sequence is silently removed.
 *  When the function is left inFile.bufferChar contains ' ',
 *  '\t', '\n' or [[char#EOF|EOF]].
 *  @return the word read.
 *  @exception RANGE_ERROR The file contains an invalid encoding.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">utf8File</span>: inFile) <span class="keywd">is</span>
  <span class="keywd">return</span> utf8_word_read(inFile.ext_file, inFile.bufferChar);


<span class="comment">(**
 *  Read a line from an UTF-8 file.
 *  The function accepts lines ending with '\n', "\r\n" or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  That means that the '\r' of a "\r\n" sequence is silently removed.
 *  When the function is left inFile.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the line read.
 *  @exception RANGE_ERROR The file contains an invalid encoding.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">utf8File</span>: inFile) <span class="keywd">is</span>
  <span class="keywd">return</span> utf8_line_read(inFile.ext_file, inFile.bufferChar);


<span class="comment">(**
 *  Set the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  If the file position would be in the middle of an UTF-8 encoded
 *  character the position is advanced to the beginning of the next
 *  UTF-8 character.
 *  @exception RANGE_ERROR The file position is negative or zero or
 *             the file position is not representable in the system
 *             file position type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="op">in</span> <span class="type">utf8File</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: position) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    utf8_seek(aFile.ext_file, position);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(* System STD_UTF8_IN, STD_UTF8_OUT and STD_UTF8_ERR files *)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">utf8File</span>: INIT_STD_UTF8_FILE (<span class="keywd">ref</span> <span class="type">clib_file</span>: primitive_file,
    <span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">utf8File</span>: aFile <span class="keywd">is</span> utf8File.value;
  <span class="keywd">begin</span>
    aFile.ext_file := primitive_file;
    aFile.name := path;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  UTF-8 version of the standard input file of the operating system.
 *  Reading from ''STD_UTF8_IN'' can be done with e.g.:
 *   read(STD_UTF8_IN, aVariable);
 *  It is also possible to redirect ''STD_UTF8_IN'' to the default
 *  input of ''read'' with:
 *   IN := STD_UTF8_IN;
 *  Afterwards
 *   read(aVariable);
 *  reads from ''STD_UTF8_IN''.
 *)</span>
<span class="keywd">var</span> <span class="type">utf8File</span>: STD_UTF8_IN <span class="keywd">is</span>  INIT_STD_UTF8_FILE(CLIB_INPUT,  <span class="stri">"STD_UTF8_IN"</span>);


<span class="comment">(**
 *  UTF-8 version of the standard output file of the operating system.
 *  Writing to ''STD_UTF8_OUT'' can be done with e.g.:
 *   write(STD_UTF8_OUT, something);
 *  It is also possible to redirect the default output of ''write''
 *  to ''STD_UTF8_OUT'' with:
 *   OUT := STD_UTF8_OUT;
 *  Afterwards
 *   write(something);
 *  writes to ''STD_UTF8_OUT''.
 *)</span>
<span class="keywd">var</span> <span class="type">utf8File</span>: STD_UTF8_OUT <span class="keywd">is</span> INIT_STD_UTF8_FILE(CLIB_OUTPUT, <span class="stri">"STD_UTF8_OUT"</span>);


<span class="comment">(**
 *  UTF-8 version of the standard error file of the operating system.
 *  Writing to ''STD_UTF8_ERR'' can be done with e.g.:
 *   write(STD_UTF8_ERR, something);
 *)</span>
<span class="keywd">var</span> <span class="type">utf8File</span>: STD_UTF8_ERR <span class="keywd">is</span> INIT_STD_UTF8_FILE(CLIB_ERROR,  <span class="stri">"STD_UTF8_ERR"</span>);
</pre>
</body>
</html>
