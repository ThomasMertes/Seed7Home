<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  graph_file.s7i  Implementation type to display graphic text     *)</span>
<span class="comment">(*  Copyright (C) 2001, 2005, 2007, 2011  Thomas Mertes             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/text.htm">text.s7i</a>"</span>;


<span class="comment">(**
 *  Implementation type to display graphic [[text]].
 *  This type allows writing text to graphic windows.
 *  This is done with the standard font of the graphic library.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: graph_file <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: win <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">integer</span>: line_delta <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column_delta <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: min_x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: min_y <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lineStartX <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: curr_x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: curr_y <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">color</span>: foreground <span class="keywd">is</span> white;
    <span class="keywd">var</span> <span class="type">color</span>: background <span class="keywd">is</span> black;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(graph_file, text);


<span class="comment">(**
 *  Creates a ''graph_file'' at the upper left corner of ''graphWin''.
 *  The ''graph_file'' extends over the whole ''graphWin''.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">graph_file</span>: open (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: graphWin) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">graph_file</span>: aGraphFile <span class="keywd">is</span> graph_file.value;
  <span class="keywd">begin</span>
    aGraphFile.win := graphWin;
    aGraphFile.line_delta := 13;
    aGraphFile.column_delta := 6;
    aGraphFile.height := height(graphWin) <span class="op">div</span> aGraphFile.line_delta;
    aGraphFile.width := width(graphWin) <span class="op">div</span> aGraphFile.column_delta;
    aGraphFile.line := 1;
    aGraphFile.column := 1;
    aGraphFile.min_x := 0;
    aGraphFile.min_y := 0;
    aGraphFile.lineStartX := 0;
    aGraphFile.curr_x := 0;
    aGraphFile.curr_y := 11;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Creates a ''graph_file'' at (minX, minY) in ''graphWin''.
 *  The ''graph_file'' extends to the lower right edge of ''graphWin''.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">graph_file</span>: open (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: graphWin,
    <span class="op">in</span> <span class="type">integer</span>: minX, <span class="op">in</span> <span class="type">integer</span>: minY) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">graph_file</span>: aGraphFile <span class="keywd">is</span> graph_file.value;
  <span class="keywd">begin</span>
    aGraphFile.win := graphWin;
    aGraphFile.line_delta := 13;
    aGraphFile.column_delta := 6;
    aGraphFile.height := (height(graphWin) - minY) <span class="op">div</span> aGraphFile.line_delta;
    aGraphFile.width := (width(graphWin) - minX) <span class="op">div</span> aGraphFile.column_delta;
    aGraphFile.line := 1;
    aGraphFile.column := 1;
    aGraphFile.min_x := minX;
    aGraphFile.min_y := minY;
    aGraphFile.lineStartX := minX;
    aGraphFile.curr_x := minX;
    aGraphFile.curr_y := minY + 11;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Creates a ''graph_file'' at (minX, minY) in ''graphWin''.
 *  The ''graph_file'' is created with the given ''width'' and ''height'.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">graph_file</span>: open (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: graphWin,
    <span class="op">in</span> <span class="type">integer</span>: minX, <span class="op">in</span> <span class="type">integer</span>: minY, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">graph_file</span>: aGraphFile <span class="keywd">is</span> graph_file.value;
  <span class="keywd">begin</span>
    aGraphFile.win := graphWin;
    aGraphFile.line_delta := 13;
    aGraphFile.column_delta := 6;
    aGraphFile.height := height <span class="op">div</span> aGraphFile.line_delta;
    aGraphFile.width := width <span class="op">div</span> aGraphFile.column_delta;
    aGraphFile.line := 1;
    aGraphFile.column := 1;
    aGraphFile.min_x := minX;
    aGraphFile.min_y := minY;
    aGraphFile.lineStartX := minX;
    aGraphFile.curr_x := minX;
    aGraphFile.curr_y := minY + 11;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">graph_file</span>: open (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: graphWin, <span class="op">in</span> <span class="type">integer</span>: lin_delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">graph_file</span>: aGraphFile <span class="keywd">is</span> graph_file.value;
  <span class="keywd">begin</span>
    aGraphFile.win := graphWin;
    aGraphFile.line_delta := lin_delta;
    aGraphFile.column_delta := 6;
    aGraphFile.height := height(graphWin) <span class="op">div</span> aGraphFile.line_delta;
    aGraphFile.width := width(graphWin) <span class="op">div</span> aGraphFile.column_delta;
    aGraphFile.line := 1;
    aGraphFile.column := 1;
    aGraphFile.min_x := 0;
    aGraphFile.min_y := 0;
    aGraphFile.lineStartX := 0;
    aGraphFile.curr_x := 0;
    aGraphFile.curr_y := 11;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Close an graph_file.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.win := PRIMITIVE_WINDOW.value;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Forces that all buffered data of ''aFile'' is sent to its destination.
 *  This causes data to be sent to the graphic system of the OS.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="op">in</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    flushGraphic;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the foreground color of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.foreground := col;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the foreground and background color of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">color</span>: col1, <span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.foreground := col1;
    aGraphFile.background := col2;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the height of ''aGraphFile''.
 *  @return the height of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: height (<span class="op">in</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aGraphFile.height;


<span class="comment">(**
 *  Get the width of ''aGraphFile''.
 *  @return the width of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aGraphFile.width;


<span class="comment">(**
 *  Get the current line of ''aGraphFile''.
 *  @return the current line of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: line (<span class="op">in</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aGraphFile.line;


<span class="comment">(**
 *  Get the current column of ''aGraphFile''.
 *  @return the current column of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: column (<span class="op">in</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aGraphFile.column;


<span class="comment">(**
 *  Clear an area of ''aGraphFile'' with the background color.
 *  The area is specified in (line, column) coordinates and is
 *  between the (''upper'', ''left'') and (''lower'', ''right'').
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    rectTo(aGraphFile.win,
        aGraphFile.min_x + aGraphFile.column_delta * pred(left),
        aGraphFile.min_y + aGraphFile.line_delta * pred(upper),
        aGraphFile.min_x + pred(aGraphFile.column_delta * right),
        aGraphFile.min_y + pred(aGraphFile.line_delta * lower),
        aGraphFile.background);
    aGraphFile.line := upper;
    aGraphFile.column := left;
    aGraphFile.lineStartX := aGraphFile.min_x;
    aGraphFile.curr_x := aGraphFile.min_x + aGraphFile.column_delta * left - 6;
    aGraphFile.curr_y := aGraphFile.min_y + aGraphFile.line_delta * upper - 2;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Clear the area of ''aGraphFile'' with the background color.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    clear(aGraphFile, 1, 1, height(aGraphFile), width(aGraphFile));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cursor (<span class="keywd">ref</span> <span class="type">graph_file</span>: aGraphFile, <span class="keywd">ref</span> <span class="type">boolean</span>: active) <span class="keywd">is</span> noop;


<span class="keywd">const</span> <span class="type">proc</span>: v_scroll (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right,
    <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> count > 0 <span class="keywd">then</span>
      copyArea(aGraphFile.win, aGraphFile.win,
          aGraphFile.min_x + aGraphFile.column_delta * pred(left),
          aGraphFile.min_y + aGraphFile.line_delta * pred(upper + count),
          aGraphFile.column_delta * succ(right - left),
          aGraphFile.line_delta * succ(lower - upper - count),
          aGraphFile.min_x + aGraphFile.column_delta * pred(left),
          aGraphFile.min_y + aGraphFile.line_delta * pred(upper));
      rect(aGraphFile.win,
          aGraphFile.min_x + aGraphFile.column_delta * pred(left),
          aGraphFile.min_y + aGraphFile.line_delta * (lower - count),
          aGraphFile.column_delta * succ(right - left),
          aGraphFile.line_delta * count,
          black);
    <span class="keywd">elsif</span> count &lt; 0 <span class="keywd">then</span>
      copyArea(aGraphFile.win, aGraphFile.win,
          aGraphFile.min_x + aGraphFile.column_delta * pred(left),
          aGraphFile.min_y + aGraphFile.line_delta * pred(upper),
          aGraphFile.column_delta * succ(right - left),
          aGraphFile.line_delta * succ(lower - upper + count),
          aGraphFile.min_x + aGraphFile.column_delta * pred(left),
          aGraphFile.min_y + aGraphFile.line_delta * pred(upper - count));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: h_scroll (<span class="keywd">ref</span> <span class="type">graph_file</span>: aGraphFile,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right,
    <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    noop;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the current position of ''aGraphFile'' to ''line'' and ''column''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPos (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.line := line;
    aGraphFile.column := column;
    aGraphFile.lineStartX := aGraphFile.min_x;
    aGraphFile.curr_x := aGraphFile.min_x + aGraphFile.column_delta * column - 6;
    aGraphFile.curr_y := aGraphFile.min_y + aGraphFile.line_delta * line - 2;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the current position of ''aGraphFile'' to the coordinates (xPos, yPos).
 *  The coordinates are from the graphic window which belongs to ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPosXY (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.lineStartX := aGraphFile.min_x + xPos;
    aGraphFile.curr_x := aGraphFile.min_x + xPos;
    aGraphFile.curr_y := aGraphFile.min_y + yPos;
    aGraphFile.line := (aGraphFile.curr_y + 2) <span class="op">div</span> aGraphFile.line_delta;
    aGraphFile.column := (aGraphFile.curr_x + 6) <span class="op">div</span> aGraphFile.column_delta;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the ''line'' of the current position of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setLine (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">integer</span>: line) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.line := line;
    aGraphFile.curr_y := aGraphFile.min_y + aGraphFile.line_delta * line - 2;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the ''column'' of the current position of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setColumn (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.column := column;
    aGraphFile.curr_x := aGraphFile.min_x + aGraphFile.column_delta * column - 6;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string to the current position of ''aGraphFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_TEXT(aGraphFile.win, aGraphFile.curr_x, aGraphFile.curr_y, stri,
        colorPixel(aGraphFile.foreground), colorPixel(aGraphFile.background));
    aGraphFile.column +:= length(stri);
    aGraphFile.curr_x +:= aGraphFile.column_delta * length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write end-of-line to ''aGraphFile''.
 *  Set the current position to the beginning of the next line.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    incr(aGraphFile.line);
    aGraphFile.column := 1;
    aGraphFile.curr_x := aGraphFile.lineStartX;
    <span class="comment"># aGraphFile.curr_x := aGraphFile.min_x + aGraphFile.column_delta - 6;</span>
    aGraphFile.curr_y +:= aGraphFile.line_delta;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveLeft (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aGraphFile.column -:= length(stri);
    aGraphFile.curr_x -:= aGraphFile.column_delta * length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: erase (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_TEXT(aGraphFile.win, aGraphFile.curr_x, aGraphFile.curr_y, <span class="stri">""</span> <span class="op">lpad</span> length(stri),
        colorPixel(aGraphFile.foreground), colorPixel(aGraphFile.background));
    aGraphFile.column +:= length(stri);
    aGraphFile.curr_x +:= aGraphFile.column_delta * length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cursorOn (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">char</span>: cursorChar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_TEXT(aGraphFile.win, aGraphFile.curr_x, aGraphFile.curr_y, str(cursorChar),
        colorPixel(aGraphFile.background), colorPixel(aGraphFile.foreground));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cursorOff (<span class="keywd">inout</span> <span class="type">graph_file</span>: aGraphFile, <span class="op">in</span> <span class="type">char</span>: cursorChar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_TEXT(aGraphFile.win, aGraphFile.curr_x, aGraphFile.curr_y, str(cursorChar),
        colorPixel(aGraphFile.foreground), colorPixel(aGraphFile.background));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: box (<span class="keywd">ref</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: clear_box (<span class="keywd">ref</span> <span class="type">graph_file</span>: aGraphFile) <span class="keywd">is</span> noop;
</pre>
</body>
</html>
