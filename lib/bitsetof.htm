<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bitsetof.s7i  Support for bitsets of a base type                *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Abstract data type, describing sets of ''baseType'' values.
 *  This abstract data type assumes that ''baseType'' values can be
 *  mapped to [[integer]] with the ''ord'' function.
 *  Sets of [[integer]] numbers are described with [[bitset]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: bitset (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: setType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: tupleType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: array_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    setType := get_type(getfunc(bitset(attr baseType)));
    <span class="keywd">if</span> setType = void <span class="keywd">then</span>
      global
      setType := newtype;
      IN_PARAM_IS_REFERENCE(setType);
      <span class="keywd">const</span> <span class="type">type</span>: bitset (attr baseType)                                 <span class="keywd">is</span> setType;
      <span class="keywd">const</span> <span class="type">type</span>: base_type (attr setType)                               <span class="keywd">is</span> baseType;
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">setType</span>: dest) ::= (<span class="op">in</span> <span class="type">setType</span>: source)           <span class="keywd">is</span> action <span class="stri">"SET_CREATE"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">setType</span>: aValue)                          <span class="keywd">is</span> action <span class="stri">"SET_DESTR"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) := (<span class="op">in</span> <span class="type">setType</span>: source)          <span class="keywd">is</span> action <span class="stri">"SET_CPY"</span>;

      <span class="keywd">const</span> <span class="type">boolean</span>: isBitset (attr setType)                             <span class="keywd">is</span> TRUE;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: bitset (<span class="op">in</span> <span class="type">setType</span>: aSet)                       <span class="keywd">is</span> action <span class="stri">"SET_CONV1"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (attr bitset) <span class="op">conv</span> (<span class="op">in</span> <span class="type">setType</span>: aSet)           <span class="keywd">is</span> action <span class="stri">"SET_CONV3"</span>;
      <span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">bitset</span>: (attr bitset) <span class="op">varConv</span> (<span class="keywd">inout</span> <span class="type">setType</span>: aSet)  <span class="keywd">is</span> action <span class="stri">"TYP_VARCONV"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (attr setType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet)          <span class="keywd">is</span> action <span class="stri">"SET_CONV3"</span>;
      <span class="keywd">const</span> <span class="type">setType</span>: (attr setType) . EMPTY_SET                          <span class="keywd">is</span> setType <span class="op">conv</span> EMPTY_SET;

      <span class="comment">(**
       *  Default value of ''setType'' ({}).
       *)</span>
      <span class="keywd">const</span> <span class="type">setType</span>: (attr setType) . value                              <span class="keywd">is</span> setType <span class="op">conv</span> EMPTY_SET;

      <span class="comment">(**
       *  Union of two sets.
       *   {'a', 'b'} | {'a', 'c'}  returns  {'a', 'b', 'c'}
       *  @return the union of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) | (<span class="op">in</span> <span class="type">setType</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_UNION"</span>;

      <span class="comment">(**
       *  Intersection of two sets.
       *   {'a', 'b'} &amp; {'a', 'c'}  returns  {'a'}
       *  @return the intersection of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &amp; (<span class="op">in</span> <span class="type">setType</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_INTERSECT"</span>;

      <span class="comment">(**
       *  Symmetric difference of two sets.
       *   {'a', 'b'} >&lt; {'a', 'c'}  returns  {'b', 'c'}
       *  @return the symmetric difference of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) >&lt; (<span class="op">in</span> <span class="type">setType</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_SYMDIFF"</span>;

      <span class="comment">(**
       *  Difference of two sets.
       *   {'a', 'b'} - {'a', 'c'}  returns  {'b'}
       *  @return the difference of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) - (<span class="op">in</span> <span class="type">setType</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_DIFF"</span>;

      <span class="comment">(**
       *  Assign the union of ''dest'' and ''set2'' to ''dest''.
       *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) |:= (<span class="op">in</span> <span class="type">setType</span>: set2)           <span class="keywd">is</span> action <span class="stri">"SET_UNION_ASSIGN"</span>;

      <span class="comment">(**
       *  Assign the intersection of ''dest'' and ''set2'' to ''dest''.
       *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) &amp;:= (<span class="op">in</span> <span class="type">setType</span>: set2)           <span class="keywd">is</span> action <span class="stri">"SET_INTERSECT_ASSIGN"</span>;

      <span class="comment">(**
       *  Assign the difference of ''dest'' and ''set2'' to ''dest''.
       *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) -:= (<span class="op">in</span> <span class="type">setType</span>: set2)           <span class="keywd">is</span> action <span class="stri">"SET_DIFF_ASSIGN"</span>;

      <span class="comment">(**
       *  Check if two sets are equal.
       *  @return TRUE if the two sets are equal,
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) = (<span class="op">in</span> <span class="type">setType</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_EQ"</span>;

      <span class="comment">(**
       *  Check if two sets are not equal.
       *  @return FALSE if the two sets are equal,
       *          TRUE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &lt;> (<span class="op">in</span> <span class="type">setType</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_NE"</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a proper subset of ''set2''.
       *  ''set1'' is a proper subset of ''set2'' if
       *   set1 &lt;= set2 and set1 &lt;> set2
       *  holds.
       *  @return TRUE if ''set1'' is a proper subset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &lt; (<span class="op">in</span> <span class="type">setType</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_LT"</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a proper superset of ''set2''.
       *  ''set1'' is a proper superset of ''set2'' if
       *   set1 >= set2 and set1 &lt;> set2
       *  holds.
       *  @return TRUE if ''set1'' is a proper superset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) > (<span class="op">in</span> <span class="type">setType</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_GT"</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a subset of ''set2''.
       *  ''set1'' is a subset of ''set2'' if no element X exists for which
       *   X in set1 and X not in set2
       *  holds.
       *  @return TRUE if ''set1'' is a subset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &lt;= (<span class="op">in</span> <span class="type">setType</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_LE"</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a superset of ''set2''.
       *  ''set1'' is a superset of ''set2'' if no element X exists for which
       *   X in set2 and X not in set1
       *  holds.
       *  @return TRUE if ''set1'' is a superset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) >= (<span class="op">in</span> <span class="type">setType</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_GE"</span>;

      <span class="comment">(**
       *  Compares two sets to make them useable as key in a hash table.
       *  The sets are compared by determining the biggest element that is
       *  not present or absent in both sets. The set in which this element
       *  is not present is the smaller one. Note that the set comparison
       *  is not related to the concepts of subset or superset. With the
       *  comparison function ''compare'' it is possible to sort an array of
       *  sets or to use sets as key in a hash table.
       *  @return -1, 0 or 1 if the first argument is considered to be
       *          respectively less than, equal to, or greater than the
       *          second.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">setType</span>: set1, <span class="op">in</span> <span class="type">setType</span>: set2)   <span class="keywd">is</span> action <span class="stri">"SET_CMP"</span>;

      <span class="comment">(**
       *  Compute the hash value of a bitset.
       *  @return the hash value.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">setType</span>: aSet)                    <span class="keywd">is</span> action <span class="stri">"SET_HASHCODE"</span>;

      <span class="comment">(**
       *  Set membership test.
       *  Determine if ''aValue'' is a member of the set ''aSet''.
       *   'a' in {'a', 'c', 'd'}  returns  TRUE
       *   'b' in {'a', 'c', 'd'}  returns  FALSE
       *  @return TRUE If ''aValue'' is a member of  ''aSet'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="op">in</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> ord(aValue) <span class="op">in</span> bitset(aSet);

      <span class="comment">(**
       *  Negated set membership test.
       *  Determine if ''aValue'' is not a member of the set ''aSet''.
       *   'a' not in {'a', 'c', 'd'}  returns  FALSE
       *   'b' not in {'a', 'c', 'd'}  returns  TRUE
       *  @return FALSE If ''aValue'' is a member of  ''aSet'',
       *          TRUE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="op">not</span> <span class="op">in</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> ord(aValue) <span class="op">not</span> <span class="op">in</span> bitset(aSet);

      <span class="comment">(**
       *  Add ''aValue'' to the set ''aSet''.
       *  If ''aValue'' is already in ''aSet'' then ''aSet'' stays unchanged.
       *  @exception MEMORY_ERROR If there is not enough memory.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: incl (<span class="keywd">inout</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          incl(bitset <span class="op">varConv</span> aSet, ord(aValue));
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Remove ''aValue'' from the set ''aSet''.
       *  If ''aValue'' is not element of ''aSet'' then ''aSet'' stays unchanged.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: excl (<span class="keywd">inout</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          excl(bitset <span class="op">varConv</span> aSet, ord(aValue));
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Add or remove ''aValue'' to respectively from ''sSet''.
       *  Adding an existing value or remove a non-existing value
       *  leaves ''aSet'' unchanged.
       *  @exception MEMORY_ERROR If there is not enough memory.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: aSet) @:= [ (<span class="op">in</span> <span class="type">baseType</span>: aValue) ] (<span class="op">in</span> <span class="type">boolean</span>: isElement) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">if</span> isElement <span class="keywd">then</span>
            incl(bitset <span class="op">varConv</span> aSet, ord(aValue));
          <span class="keywd">else</span>
            excl(bitset <span class="op">varConv</span> aSet, ord(aValue));
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Compute the cardinality of a set.
       *   card({'a', 'b', 'c'})  returns  3
       *  @return the number of elements in ''aSet''.
       *  @exception RANGE_ERROR Result does not fit into an integer.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: card (<span class="op">in</span> <span class="type">setType</span>: aSet)                        <span class="keywd">is</span> action <span class="stri">"SET_CARD"</span>;

      <span class="comment">(**
       *  Compute pseudo-random element from ''aSet''.
       *  The random values are uniform distributed.
       *  @return a random element such that rand(aSet) in aSet holds.
       *  @exception RANGE_ERROR If ''aSet'' is empty.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: rand (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> baseType <span class="op">conv</span> rand(bitset(aSet));

      <span class="comment">(**
       *  Minimal element of a set.
       *  Delivers the element from ''aSet'' for which the following condition holds:
       *   element &lt;= X
       *  for all X which are in the set.
       *   min({'a', 'b', 'c'})  returns  'a'
       *  @return the minimum element of ''aSet''.
       *  @exception RANGE_ERROR If ''aSet'' is the empty set.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: min (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> baseType <span class="op">conv</span> min(bitset(aSet));

      <span class="comment">(**
       *  Maximal element of a set.
       *  Delivers the element from ''aSet'' for which the following condition holds:
       *   element >= X
       *  for all X which are in the set.
       *   max({'a', 'b', 'c'})  returns  'c'
       *  @return the maximal element of ''aSet''.
       *  @exception RANGE_ERROR If ''aSet'' is the empty set.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: max (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> baseType <span class="op">conv</span> max(bitset(aSet));

      <span class="comment">(**
       *  Minimal element of ''aSet'' that is larger than ''number''.
       *  @return the minimum element of ''aSet'' that is larger than ''number''.
       *  @exception RANGE_ERROR If ''aSet'' has no element larger than ''number''.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: next (<span class="op">in</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: number) <span class="keywd">is</span>
        <span class="keywd">return</span> baseType <span class="op">conv</span> next(bitset(aSet), ord(number));

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: { (<span class="op">in</span> <span class="type">baseType</span>: value) } <span class="keywd">is</span>
        <span class="keywd">return</span> setType <span class="op">conv</span> ( { ord(value) } );

      tupleType := tuple baseType;
      array_type := <span class="type">array</span> <span class="type">baseType</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: { (<span class="op">in</span> <span class="type">tupleType</span>: value) } <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: aSet <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length([] value) <span class="keywd">do</span>
            incl(aSet, ([] value)[number]);
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: { (<span class="op">in</span> <span class="type">baseType</span>: lowValue) .. (<span class="op">in</span> <span class="type">baseType</span>: highValue) } <span class="keywd">is</span>
        <span class="keywd">return</span> setType <span class="op">conv</span> ( { ord(lowValue) .. ord(highValue) } );

      <span class="comment">(**
       *  For-loop where ''variable'' loops over the elements of the set ''aSet''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: upperBound <span class="keywd">is</span> baseType.value;
          <span class="keywd">var</span> <span class="type">boolean</span>: leave <span class="keywd">is</span> FALSE;
        <span class="keywd">begin</span>
          <span class="keywd">if</span> aSet &lt;> setType.EMPTY_SET <span class="keywd">then</span>
            variable := min(aSet);
            upperBound := max(aSet);
            <span class="keywd">repeat</span>
              statements;
              <span class="keywd">if</span> variable = upperBound <span class="keywd">then</span>
                leave := TRUE;
              <span class="keywd">else</span>
                variable := next(aSet, variable);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">until</span> leave;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: upperBound <span class="keywd">is</span> baseType.value;
          <span class="keywd">var</span> <span class="type">boolean</span>: leave <span class="keywd">is</span> FALSE;
        <span class="keywd">begin</span>
          <span class="keywd">if</span> aSet &lt;> setType.EMPTY_SET <span class="keywd">then</span>
            forVar := min(aSet);
            upperBound := max(aSet);
            leave := condition;
            <span class="keywd">while</span> <span class="op">not</span> leave <span class="keywd">do</span>
              statements;
              <span class="keywd">if</span> forVar = upperBound <span class="keywd">then</span>
                leave := TRUE;
              <span class="keywd">else</span>
                forVar := next(aSet, forVar);
                leave := condition;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> forVar <span class="keywd">range</span> aSet <span class="keywd">until</span> condition = TRUE <span class="keywd">do</span>
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Obtain an array containing all the values in ''aSet''.
       *   toArray({'a', 'b', 'c'})  returns  []('a', 'b', 'c')
       *  @return all the values from ''aSet''.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">baseType</span>: toArray (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">array</span> <span class="type">baseType</span>: values <span class="keywd">is</span> 0 <span class="op">times</span> baseType.value;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: aValue <span class="keywd">is</span> baseType.value;
          <span class="keywd">var</span> <span class="type">baseType</span>: upperBound <span class="keywd">is</span> baseType.value;
          <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
          <span class="keywd">var</span> <span class="type">boolean</span>: leave <span class="keywd">is</span> FALSE;
        <span class="keywd">begin</span>
          <span class="keywd">if</span> aSet &lt;> setType.EMPTY_SET <span class="keywd">then</span>
            values := card(aSet) <span class="op">times</span> baseType.value;
            aValue := min(aSet);
            upperBound := max(aSet);
            <span class="keywd">repeat</span>
              values[index] := aValue;
              <span class="keywd">if</span> aValue = upperBound <span class="keywd">then</span>
                leave := TRUE;
              <span class="keywd">else</span>
                aValue := next(aSet, aValue);
                incr(index);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">until</span> leave;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">if</span> getobj(str(<span class="keywd">ref</span> <span class="type">baseType</span>: setElement)) &lt;> NIL <span class="keywd">then</span>
        <span class="comment">(**
         *  Convert a set to a [[string]].
         *  @return the string result of the conversion.
         *  @exception MEMORY_ERROR Not enough memory to represent the result.
         *)</span>
        <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span> <span class="keywd">func</span>
          <span class="keywd">result</span>
            <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">"{"</span>;
          <span class="keywd">local</span>
            <span class="keywd">var</span> <span class="type">baseType</span>: setElement <span class="keywd">is</span> baseType.value;
          <span class="keywd">begin</span>
            <span class="keywd">for</span> setElement <span class="keywd">range</span> aSet <span class="keywd">do</span>
              <span class="keywd">if</span> stri &lt;> <span class="stri">"{"</span> <span class="keywd">then</span>
                stri &amp;:= <span class="stri">", "</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              stri &amp;:= str(setElement);
            <span class="keywd">end</span> <span class="keywd">for</span>;
            stri &amp;:= <span class="stri">"}"</span>;
          <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> global;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
