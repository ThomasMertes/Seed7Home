<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  keybd.s7i     Read from keyboard without buffering and echo     *)</span>
<span class="comment">(*  Copyright (C) 1993, 1994, 2005  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/file.htm">file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/null_file.htm">null_file.s7i</a>"</span>;


<span class="comment">(**
 *  Interface type describing keyboard [[file|files]].
 *  This interface is implemented with ''console_keybd_file'' and
 *  ''graph_keybd_file''.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: keyboard_file <span class="keywd">is</span> subtype file;


<span class="comment">(* Procedures granted for every keyboard_file *)</span>


<span class="comment"># The function keypressed() is deprecated. Use inputReady() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: keypressed (<span class="op">in</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Determine if a given ''button'' is currently pressed.
 *  This function can determine if the last key read by ''getc''
 *  from the graphic keyboard is still pressed:
 *   buttonPressed(KEYBOARD, KEY_MOUSE1)
 *  The function can determine if num-lock, shift-lock or scroll-lock is
 *  currently active:
 *   buttonPressed(KEYBOARD, KEY_SHIFT_LOCK_ON)
 *  If a button is pressed together with a modifier key (SHIFT, CTRL, ALT)
 *  ''getc'' returns a character like KEY_CTL_MOUSE1. But no character
 *  constants are defined for combinations with two modifier keys (there
 *  is no KEY_SFT_CTL_MOUSE1). With ''buttonPressed'' it is possible to
 *  recogize if two modifier key are combined with a key. E.g.:
 *   aKey := getc(KEYBOARD);
 *   if (aKey = KEY_CTL_MOUSE1 and buttonPressed(KEYBOARD, KEY_SHIFT)) or
 *      (akey = KEY_SFT_MOUSE1 and buttonPressed(KEYBOARD, KEY_CONTROL)) then
 *     ...
 *  Note that ''buttonPressed'' does not actually read something so using
 *  ''buttonPressed'' alone will not work. Instead ''buttonPressed'' must be
 *  combined with ''getc'', which does the reading.
 *   command := getc(KEYBOARD);
 *   if command = KEY_MOUSE1 then
 *     while buttonPressed(KEYBOARD, KEY_MOUSE1) do
 *       ... do something as long as KEY_MOUSE1 is pressed ...
 *     end while;
 *     # KEY_MOUSE1 has been released.
 *   end if;
 *  @return TRUE if ''button'' is currently pressed,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: buttonPressed (<span class="op">in</span> <span class="type">keyboard_file</span>: keybd, <span class="op">in</span> <span class="type">char</span>: button) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  X position of the mouse cursor when a button was pressed.
 *  The functions ''clickedXPos'' and ''clickedYPos'' can be used to
 *  determine which position was "clicked".
 *  @return the X position of the mouse cursor at the time when
 *          the last button was pressed.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: clickedXPos (<span class="op">in</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span> DYNAMIC;


<span class="comment"># The function getxpos() is deprecated. Use clickedXPos() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getxpos (<span class="op">in</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Y position of the mouse cursor when a button was pressed.
 *  The functions ''clickedXPos'' and ''clickedYPos'' can be used to
 *  determine which position was "clicked".
 *  @return the Y position of the mouse cursor at the time when
 *          the last button was pressed.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: clickedYPos (<span class="op">in</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span> DYNAMIC;


<span class="comment"># The function getypos() is deprecated. Use clickedYPos() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getypos (<span class="op">in</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">type</span>: console_keybd_file <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(console_keybd_file, keyboard_file);


<span class="comment">(**
 *  Read a character from the console keyboard file.
 *  The function works synchronous. This means that it might wait (block)
 *  until a key has been pressed. The function returns a normal Unicode
 *  character or a special code (which may be or may not be a Unicode
 *  character) for cursor- and function-keys. Character constants are
 *  defined for various keys such as KEY_CTL_J for newline and KEY_ESC
 *  for the ESCAPE key. If a button is pressed together with a modifier
 *  key (SHIFT, CTRL, ALT) ''getc'' returns a character like KEY_CTL_A
 *  or KEY_ALT_A. No character constants are defined for combinations
 *  with two modifier keys (there is no KEY_SFT_CTL_A).
 *  @return the character read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd)                           <span class="keywd">is</span> action <span class="stri">"KBD_GETC"</span>;


<span class="comment">(**
 *  Read a string with maximum length from the console keyboard file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd, <span class="op">in</span> <span class="type">integer</span>: maxLength)  <span class="keywd">is</span> action <span class="stri">"KBD_GETS"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: raw_getc (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd)                       <span class="keywd">is</span> action <span class="stri">"KBD_RAW_GETC"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: line_read (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)                     <span class="keywd">is</span> action <span class="stri">"KBD_LINE_READ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: word_read (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)                     <span class="keywd">is</span> action <span class="stri">"KBD_WORD_READ"</span>;


<span class="comment">(**
 *  Determine if at least one character can be read without blocking.
 *  Blocking means that ''getc'' would wait until a key has been pressed.
 *  @return TRUE if a character is available at the console keyboard file
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: inputReady (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd)                  <span class="keywd">is</span> action <span class="stri">"KBD_INPUT_READY"</span>;


<span class="comment"># The function keypressed() is deprecated. Use inputReady() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: keypressed (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd)                  <span class="keywd">is</span> action <span class="stri">"KBD_INPUT_READY"</span>;


<span class="comment">(**
 *  Keyboard file describing the console keyboard.
 *  The console keyboard belongs to a text/console window.
 *  Characters typed at the keyboard are queued (first in first out)
 *  and can be read directly, without the need to press ENTER or
 *  RETURN. There is also no possibility to correct a key, once it
 *  is pressed. Additionally KEYBOARD does not echo the characters.
 *)</span>
<span class="keywd">var</span> <span class="type">console_keybd_file</span>: CONSOLE_KEYBOARD <span class="keywd">is</span> console_keybd_file.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getk (<span class="op">in</span> <span class="type">console_keybd_file</span>: keybd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: rawKey <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    rawKey := str(raw_getc(keybd));
    <span class="keywd">while</span> inputReady(keybd) <span class="keywd">do</span>
      rawKey &amp;:= str(raw_getc(keybd));
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from the console keyboard file.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", "\n", "\r\n" or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  That means that the "\r" of a "\r\n" sequence is silently removed.
 *  When the function is left keybd.bufferChar contains ' ',
 *  '\t', '\n' or [[char#EOF|EOF]].
 *  @return the word read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">console_keybd_file</span>: keybd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := word_read(keybd, keybd.bufferChar);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from the console keyboard file.
 *  The function accepts lines ending with "\n", "\r\n" or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  That means that the "\r" of a "\r\n" sequence is silently removed.
 *  When the function is left keybd.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">console_keybd_file</span>: keybd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := line_read(keybd, keybd.bufferChar);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">type</span>: graph_keybd_file <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(graph_keybd_file, keyboard_file);


<span class="comment">(**
 *  Read a character from the graphic keyboard or mouse.
 *  The function works synchronous. This means that it might wait (block)
 *  until a key has been pressed. The function returns a normal Unicode
 *  character or a special code (which may be or may not be a Unicode
 *  character) for cursor-, function- and mouse-keys. Character constants
 *  are defined for various keys such as KEY_CTL_J for newline and
 *  KEY_MOUSE1 for the first mouse key. If a button is pressed together
 *  with a modifier key (SHIFT, CTRL, ALT) ''getc'' returns a character
 *  like KEY_CTL_MOUSE1. No character constants are defined for
 *  combinations with two modifier keys (there is no KEY_SFT_CTL_MOUSE1).
 *  The function ''buttonPressed'' can be used to read such combinations.
 *  @return the character read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                             <span class="keywd">is</span> action <span class="stri">"GKB_GETC"</span>;


<span class="comment">(**
 *  Read a string with maximum length from the graphic keyboard file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd, <span class="op">in</span> <span class="type">integer</span>: maxLength)    <span class="keywd">is</span> action <span class="stri">"GKB_GETS"</span>;


<span class="comment">(**
 *  Determine if a given ''button'' is currently pressed.
 *  This function can determine if the last key read by ''getc''
 *  from the graphic keyboard is still pressed:
 *   buttonPressed(KEYBOARD, KEY_MOUSE1)
 *  The function can determine if num-lock, shift-lock or scroll-lock is
 *  currently active:
 *   buttonPressed(KEYBOARD, KEY_SHIFT_LOCK_ON)
 *  If a button is pressed together with a modifier key (SHIFT, CTRL, ALT)
 *  ''getc'' returns a character like KEY_CTL_MOUSE1. But no character
 *  constants are defined for combinations with two modifier keys (there
 *  is no KEY_SFT_CTL_MOUSE1). With ''buttonPressed'' it is possible to
 *  recogize if two modifier key are combined with a key. E.g.:
 *   aKey := getc(KEYBOARD);
 *   if (aKey = KEY_CTL_MOUSE1 and buttonPressed(KEYBOARD, KEY_SHIFT)) or
 *      (akey = KEY_SFT_MOUSE1 and buttonPressed(KEYBOARD, KEY_CONTROL)) then
 *     ...
 *  Note that ''buttonPressed'' does not actually read something so using
 *  ''buttonPressed'' alone will not work. Instead ''buttonPressed'' must be
 *  combined with ''getc'', which does the reading.
 *   command := getc(KEYBOARD);
 *   if command = KEY_MOUSE1 then
 *     while buttonPressed(KEYBOARD, KEY_MOUSE1) do
 *       ... do something as long as KEY_MOUSE1 is pressed ...
 *     end while;
 *     # KEY_MOUSE1 has been released.
 *   end if;
 *  @return TRUE if ''button'' is currently pressed,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: buttonPressed (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd, <span class="op">in</span> <span class="type">char</span>: button)  <span class="keywd">is</span> action <span class="stri">"GKB_BUTTON_PRESSED"</span>;


<span class="comment">(**
 *  X position of the mouse cursor when a button was pressed.
 *  The functions ''clickedXPos'' and ''clickedYPos'' can be used to
 *  determine which position was "clicked".
 *  @return the X position of the mouse cursor at the time when
 *          the last button was pressed.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: clickedXPos (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                   <span class="keywd">is</span> action <span class="stri">"GKB_BUTTON_XPOS"</span>;


<span class="comment"># The function getxpos() is deprecated. Use clickedXPos() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getxpos (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                       <span class="keywd">is</span> action <span class="stri">"GKB_BUTTON_XPOS"</span>;


<span class="comment">(**
 *  Y position of the mouse cursor when a button was pressed.
 *  The functions ''clickedXPos'' and ''clickedYPos'' can be used to
 *  determine which position was "clicked".
 *  @return the Y position of the mouse cursor at the time when
 *          the last button was pressed.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: clickedYPos (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                   <span class="keywd">is</span> action <span class="stri">"GKB_BUTTON_YPOS"</span>;


<span class="comment"># The function getypos() is deprecated. Use clickedYPos() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getypos (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                       <span class="keywd">is</span> action <span class="stri">"GKB_BUTTON_YPOS"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: raw_getc (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                         <span class="keywd">is</span> action <span class="stri">"GKB_RAW_GETC"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: line_read (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)                     <span class="keywd">is</span> action <span class="stri">"GKB_LINE_READ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: word_read (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)                     <span class="keywd">is</span> action <span class="stri">"GKB_WORD_READ"</span>;


<span class="comment">(**
 *  Determine if at least one character can be read without blocking.
 *  Blocking means that ''getc'' would wait until a key has been pressed.
 *  @return TRUE if a character is available at the graphic keyboard file
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: inputReady (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                    <span class="keywd">is</span> action <span class="stri">"GKB_INPUT_READY"</span>;


<span class="comment"># The function keypressed() is deprecated. Use inputReady() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: keypressed (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd)                    <span class="keywd">is</span> action <span class="stri">"GKB_INPUT_READY"</span>;


<span class="comment">(**
 *  Keyboard file describing the graphic keyboard.
 *  The graphic keyboard belongs to a graphic window.
 *  Characters typed at the keyboard are queued (first in first out)
 *  and can be read directly, without the need to press ENTER or
 *  RETURN. There is also no possibility to correct a key, once it
 *  is pressed. Additionally KEYBOARD does not echo the characters.
 *)</span>
<span class="keywd">var</span> <span class="type">graph_keybd_file</span>: GRAPH_KEYBOARD <span class="keywd">is</span> graph_keybd_file.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getk (<span class="op">in</span> <span class="type">graph_keybd_file</span>: keybd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: rawKey <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    rawKey := str(raw_getc(keybd));
    <span class="keywd">while</span> inputReady(keybd) <span class="keywd">do</span>
      rawKey &amp;:= str(raw_getc(keybd));
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from the graphic keyboard file.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", "\n", "\r\n" or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  That means that the "\r" of a "\r\n" sequence is silently removed.
 *  When the function is left keybd.bufferChar contains ' ',
 *  '\t', '\n' or [[char#EOF|EOF]].
 *  @return the word read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">graph_keybd_file</span>: keybd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := word_read(keybd, keybd.bufferChar);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from the graphic keyboard file.
 *  The function accepts lines ending with "\n", "\r\n" or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  That means that the "\r" of a "\r\n" sequence is silently removed.
 *  When the function is left keybd.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">graph_keybd_file</span>: keybd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := line_read(keybd, keybd.bufferChar);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Variable describing the keyboard.
 *  Characters typed at the keyboard are queued (first in first out)
 *  and can be read directly, without the need to press ENTER or
 *  RETURN. There is also no possibility to correct a key, once it
 *  is pressed. Additionally KEYBOARD does not echo the characters.
 *  KEYBOARD delivers cursor keys and function keys as single
 *  characters (e.g. KEY_LEFT or KEY_F1).
 *  This variable is initialized with CONSOLE_KEYBOARD.
 *  If a program wants to work with the graphic keyboard,
 *  the following assignment is necessary:
 *   KEYBOARD := GRAPH_KEYBOARD;
 *)</span>
<span class="keywd">var</span> <span class="type">keyboard_file</span>: KEYBOARD <span class="keywd">is</span> CONSOLE_KEYBOARD;


<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_A <span class="keywd">is</span>        <span class="stri">'\1;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_B <span class="keywd">is</span>        <span class="stri">'\2;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_C <span class="keywd">is</span>        <span class="stri">'\3;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_D <span class="keywd">is</span>        <span class="stri">'\4;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_E <span class="keywd">is</span>        <span class="stri">'\5;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F <span class="keywd">is</span>        <span class="stri">'\6;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_G <span class="keywd">is</span>        <span class="stri">'\7;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_H <span class="keywd">is</span>        <span class="stri">'\8;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_BS <span class="keywd">is</span>           <span class="stri">'\8;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_I <span class="keywd">is</span>        <span class="stri">'\9;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_TAB <span class="keywd">is</span>          <span class="stri">'\9;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_J <span class="keywd">is</span>       <span class="stri">'\10;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_NL <span class="keywd">is</span>          <span class="stri">'\10;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_K <span class="keywd">is</span>       <span class="stri">'\11;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_L <span class="keywd">is</span>       <span class="stri">'\12;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_M <span class="keywd">is</span>       <span class="stri">'\13;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CR <span class="keywd">is</span>          <span class="stri">'\13;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_N <span class="keywd">is</span>       <span class="stri">'\14;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_O <span class="keywd">is</span>       <span class="stri">'\15;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_P <span class="keywd">is</span>       <span class="stri">'\16;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_Q <span class="keywd">is</span>       <span class="stri">'\17;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_R <span class="keywd">is</span>       <span class="stri">'\18;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_S <span class="keywd">is</span>       <span class="stri">'\19;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_T <span class="keywd">is</span>       <span class="stri">'\20;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_U <span class="keywd">is</span>       <span class="stri">'\21;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_V <span class="keywd">is</span>       <span class="stri">'\22;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_W <span class="keywd">is</span>       <span class="stri">'\23;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_X <span class="keywd">is</span>       <span class="stri">'\24;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_Y <span class="keywd">is</span>       <span class="stri">'\25;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_Z <span class="keywd">is</span>       <span class="stri">'\26;'</span>;
<span class="keywd">const</span> <span class="type">char</span>: KEY_ESC <span class="keywd">is</span>         <span class="stri">'\27;'</span>;

<span class="comment">(* KEYCODE_BASE is beyond the range of Unicode characters *)</span>
<span class="keywd">const</span> <span class="type">integer</span>: KEYCODE_BASE <span class="keywd">is</span> 16#110000;

<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_A      <span class="keywd">is</span> chr(KEYCODE_BASE +   1);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_B      <span class="keywd">is</span> chr(KEYCODE_BASE +   2);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_C      <span class="keywd">is</span> chr(KEYCODE_BASE +   3);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_D      <span class="keywd">is</span> chr(KEYCODE_BASE +   4);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_E      <span class="keywd">is</span> chr(KEYCODE_BASE +   5);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F      <span class="keywd">is</span> chr(KEYCODE_BASE +   6);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_G      <span class="keywd">is</span> chr(KEYCODE_BASE +   7);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_H      <span class="keywd">is</span> chr(KEYCODE_BASE +   8);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_I      <span class="keywd">is</span> chr(KEYCODE_BASE +   9);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_J      <span class="keywd">is</span> chr(KEYCODE_BASE +  10);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_K      <span class="keywd">is</span> chr(KEYCODE_BASE +  11);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_L      <span class="keywd">is</span> chr(KEYCODE_BASE +  12);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_M      <span class="keywd">is</span> chr(KEYCODE_BASE +  13);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_N      <span class="keywd">is</span> chr(KEYCODE_BASE +  14);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_O      <span class="keywd">is</span> chr(KEYCODE_BASE +  15);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_P      <span class="keywd">is</span> chr(KEYCODE_BASE +  16);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_Q      <span class="keywd">is</span> chr(KEYCODE_BASE +  17);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_R      <span class="keywd">is</span> chr(KEYCODE_BASE +  18);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_S      <span class="keywd">is</span> chr(KEYCODE_BASE +  19);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_T      <span class="keywd">is</span> chr(KEYCODE_BASE +  20);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_U      <span class="keywd">is</span> chr(KEYCODE_BASE +  21);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_V      <span class="keywd">is</span> chr(KEYCODE_BASE +  22);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_W      <span class="keywd">is</span> chr(KEYCODE_BASE +  23);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_X      <span class="keywd">is</span> chr(KEYCODE_BASE +  24);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_Y      <span class="keywd">is</span> chr(KEYCODE_BASE +  25);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_Z      <span class="keywd">is</span> chr(KEYCODE_BASE +  26);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_0      <span class="keywd">is</span> chr(KEYCODE_BASE +  38);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_1      <span class="keywd">is</span> chr(KEYCODE_BASE +  39);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_2      <span class="keywd">is</span> chr(KEYCODE_BASE +  40);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_3      <span class="keywd">is</span> chr(KEYCODE_BASE +  41);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_4      <span class="keywd">is</span> chr(KEYCODE_BASE +  42);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_5      <span class="keywd">is</span> chr(KEYCODE_BASE +  43);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_6      <span class="keywd">is</span> chr(KEYCODE_BASE +  44);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_7      <span class="keywd">is</span> chr(KEYCODE_BASE +  45);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_8      <span class="keywd">is</span> chr(KEYCODE_BASE +  46);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_9      <span class="keywd">is</span> chr(KEYCODE_BASE +  47);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_0      <span class="keywd">is</span> chr(KEYCODE_BASE +  48);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_1      <span class="keywd">is</span> chr(KEYCODE_BASE +  49);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_2      <span class="keywd">is</span> chr(KEYCODE_BASE +  50);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_3      <span class="keywd">is</span> chr(KEYCODE_BASE +  51);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_4      <span class="keywd">is</span> chr(KEYCODE_BASE +  52);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_5      <span class="keywd">is</span> chr(KEYCODE_BASE +  53);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_6      <span class="keywd">is</span> chr(KEYCODE_BASE +  54);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_7      <span class="keywd">is</span> chr(KEYCODE_BASE +  55);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_8      <span class="keywd">is</span> chr(KEYCODE_BASE +  56);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_9      <span class="keywd">is</span> chr(KEYCODE_BASE +  57);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F1         <span class="keywd">is</span> chr(KEYCODE_BASE +  64);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F2         <span class="keywd">is</span> chr(KEYCODE_BASE +  65);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F3         <span class="keywd">is</span> chr(KEYCODE_BASE +  66);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F4         <span class="keywd">is</span> chr(KEYCODE_BASE +  67);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F5         <span class="keywd">is</span> chr(KEYCODE_BASE +  68);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F6         <span class="keywd">is</span> chr(KEYCODE_BASE +  69);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F7         <span class="keywd">is</span> chr(KEYCODE_BASE +  70);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F8         <span class="keywd">is</span> chr(KEYCODE_BASE +  71);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F9         <span class="keywd">is</span> chr(KEYCODE_BASE +  72);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F10        <span class="keywd">is</span> chr(KEYCODE_BASE +  73);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F11        <span class="keywd">is</span> chr(KEYCODE_BASE +  74);
<span class="keywd">const</span> <span class="type">char</span>: KEY_F12        <span class="keywd">is</span> chr(KEYCODE_BASE +  75);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F1     <span class="keywd">is</span> chr(KEYCODE_BASE +  80);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F2     <span class="keywd">is</span> chr(KEYCODE_BASE +  81);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F3     <span class="keywd">is</span> chr(KEYCODE_BASE +  82);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F4     <span class="keywd">is</span> chr(KEYCODE_BASE +  83);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F5     <span class="keywd">is</span> chr(KEYCODE_BASE +  84);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F6     <span class="keywd">is</span> chr(KEYCODE_BASE +  85);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F7     <span class="keywd">is</span> chr(KEYCODE_BASE +  86);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F8     <span class="keywd">is</span> chr(KEYCODE_BASE +  87);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F9     <span class="keywd">is</span> chr(KEYCODE_BASE +  88);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F10    <span class="keywd">is</span> chr(KEYCODE_BASE +  89);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F11    <span class="keywd">is</span> chr(KEYCODE_BASE +  90);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_F12    <span class="keywd">is</span> chr(KEYCODE_BASE +  91);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F1     <span class="keywd">is</span> chr(KEYCODE_BASE +  96);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F2     <span class="keywd">is</span> chr(KEYCODE_BASE +  97);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F3     <span class="keywd">is</span> chr(KEYCODE_BASE +  98);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F4     <span class="keywd">is</span> chr(KEYCODE_BASE +  99);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F5     <span class="keywd">is</span> chr(KEYCODE_BASE + 100);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F6     <span class="keywd">is</span> chr(KEYCODE_BASE + 101);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F7     <span class="keywd">is</span> chr(KEYCODE_BASE + 102);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F8     <span class="keywd">is</span> chr(KEYCODE_BASE + 103);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F9     <span class="keywd">is</span> chr(KEYCODE_BASE + 104);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F10    <span class="keywd">is</span> chr(KEYCODE_BASE + 105);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F11    <span class="keywd">is</span> chr(KEYCODE_BASE + 106);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_F12    <span class="keywd">is</span> chr(KEYCODE_BASE + 107);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F1     <span class="keywd">is</span> chr(KEYCODE_BASE + 112);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F2     <span class="keywd">is</span> chr(KEYCODE_BASE + 113);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F3     <span class="keywd">is</span> chr(KEYCODE_BASE + 114);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F4     <span class="keywd">is</span> chr(KEYCODE_BASE + 115);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F5     <span class="keywd">is</span> chr(KEYCODE_BASE + 116);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F6     <span class="keywd">is</span> chr(KEYCODE_BASE + 117);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F7     <span class="keywd">is</span> chr(KEYCODE_BASE + 118);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F8     <span class="keywd">is</span> chr(KEYCODE_BASE + 119);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F9     <span class="keywd">is</span> chr(KEYCODE_BASE + 120);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F10    <span class="keywd">is</span> chr(KEYCODE_BASE + 121);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F11    <span class="keywd">is</span> chr(KEYCODE_BASE + 122);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_F12    <span class="keywd">is</span> chr(KEYCODE_BASE + 123);
<span class="keywd">const</span> <span class="type">char</span>: KEY_LEFT           <span class="keywd">is</span> chr(KEYCODE_BASE + 160);
<span class="keywd">const</span> <span class="type">char</span>: KEY_RIGHT          <span class="keywd">is</span> chr(KEYCODE_BASE + 161);
<span class="keywd">const</span> <span class="type">char</span>: KEY_UP             <span class="keywd">is</span> chr(KEYCODE_BASE + 162);
<span class="keywd">const</span> <span class="type">char</span>: KEY_DOWN           <span class="keywd">is</span> chr(KEYCODE_BASE + 163);
<span class="keywd">const</span> <span class="type">char</span>: KEY_HOME           <span class="keywd">is</span> chr(KEYCODE_BASE + 164);
<span class="keywd">const</span> <span class="type">char</span>: KEY_END            <span class="keywd">is</span> chr(KEYCODE_BASE + 165);
<span class="keywd">const</span> <span class="type">char</span>: KEY_PGUP           <span class="keywd">is</span> chr(KEYCODE_BASE + 166);
<span class="keywd">const</span> <span class="type">char</span>: KEY_PGDN           <span class="keywd">is</span> chr(KEYCODE_BASE + 167);
<span class="keywd">const</span> <span class="type">char</span>: KEY_INS            <span class="keywd">is</span> chr(KEYCODE_BASE + 168);
<span class="keywd">const</span> <span class="type">char</span>: KEY_DEL            <span class="keywd">is</span> chr(KEYCODE_BASE + 169);
<span class="keywd">const</span> <span class="type">char</span>: KEY_PAD_CENTER     <span class="keywd">is</span> chr(KEYCODE_BASE + 170);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_LEFT       <span class="keywd">is</span> chr(KEYCODE_BASE + 176);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_RIGHT      <span class="keywd">is</span> chr(KEYCODE_BASE + 177);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_UP         <span class="keywd">is</span> chr(KEYCODE_BASE + 178);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_DOWN       <span class="keywd">is</span> chr(KEYCODE_BASE + 179);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_HOME       <span class="keywd">is</span> chr(KEYCODE_BASE + 180);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_END        <span class="keywd">is</span> chr(KEYCODE_BASE + 181);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_PGUP       <span class="keywd">is</span> chr(KEYCODE_BASE + 182);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_PGDN       <span class="keywd">is</span> chr(KEYCODE_BASE + 183);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_INS        <span class="keywd">is</span> chr(KEYCODE_BASE + 184);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_DEL        <span class="keywd">is</span> chr(KEYCODE_BASE + 185);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_PAD_CENTER <span class="keywd">is</span> chr(KEYCODE_BASE + 186);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_LEFT       <span class="keywd">is</span> chr(KEYCODE_BASE + 192);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_RIGHT      <span class="keywd">is</span> chr(KEYCODE_BASE + 193);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_UP         <span class="keywd">is</span> chr(KEYCODE_BASE + 194);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_DOWN       <span class="keywd">is</span> chr(KEYCODE_BASE + 195);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_HOME       <span class="keywd">is</span> chr(KEYCODE_BASE + 196);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_END        <span class="keywd">is</span> chr(KEYCODE_BASE + 197);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_PGUP       <span class="keywd">is</span> chr(KEYCODE_BASE + 198);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_PGDN       <span class="keywd">is</span> chr(KEYCODE_BASE + 199);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_INS        <span class="keywd">is</span> chr(KEYCODE_BASE + 200);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_DEL        <span class="keywd">is</span> chr(KEYCODE_BASE + 201);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_PAD_CENTER <span class="keywd">is</span> chr(KEYCODE_BASE + 202);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_LEFT       <span class="keywd">is</span> chr(KEYCODE_BASE + 208);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_RIGHT      <span class="keywd">is</span> chr(KEYCODE_BASE + 209);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_UP         <span class="keywd">is</span> chr(KEYCODE_BASE + 210);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_DOWN       <span class="keywd">is</span> chr(KEYCODE_BASE + 211);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_HOME       <span class="keywd">is</span> chr(KEYCODE_BASE + 212);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_END        <span class="keywd">is</span> chr(KEYCODE_BASE + 213);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_PGUP       <span class="keywd">is</span> chr(KEYCODE_BASE + 214);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_PGDN       <span class="keywd">is</span> chr(KEYCODE_BASE + 215);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_INS        <span class="keywd">is</span> chr(KEYCODE_BASE + 216);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_DEL        <span class="keywd">is</span> chr(KEYCODE_BASE + 217);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_PAD_CENTER <span class="keywd">is</span> chr(KEYCODE_BASE + 218);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MENU           <span class="keywd">is</span> chr(KEYCODE_BASE + 228);
<span class="keywd">const</span> <span class="type">char</span>: KEY_PRINT          <span class="keywd">is</span> chr(KEYCODE_BASE + 229);
<span class="keywd">const</span> <span class="type">char</span>: KEY_PAUSE          <span class="keywd">is</span> chr(KEYCODE_BASE + 230);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_NL         <span class="keywd">is</span> chr(KEYCODE_BASE + 240);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_BS         <span class="keywd">is</span> chr(KEYCODE_BASE + 241);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_TAB        <span class="keywd">is</span> chr(KEYCODE_BASE + 242);
<span class="keywd">const</span> <span class="type">char</span>: KEY_BACKTAB        <span class="keywd">is</span> KEY_SFT_TAB;
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_ESC        <span class="keywd">is</span> chr(KEYCODE_BASE + 243);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MENU       <span class="keywd">is</span> chr(KEYCODE_BASE + 244);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_PRINT      <span class="keywd">is</span> chr(KEYCODE_BASE + 245);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_PAUSE      <span class="keywd">is</span> chr(KEYCODE_BASE + 246);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_NL         <span class="keywd">is</span> chr(KEYCODE_BASE + 256);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_BS         <span class="keywd">is</span> chr(KEYCODE_BASE + 257);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_TAB        <span class="keywd">is</span> chr(KEYCODE_BASE + 258);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_ESC        <span class="keywd">is</span> chr(KEYCODE_BASE + 259);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MENU       <span class="keywd">is</span> chr(KEYCODE_BASE + 260);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_PRINT      <span class="keywd">is</span> chr(KEYCODE_BASE + 261);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_PAUSE      <span class="keywd">is</span> chr(KEYCODE_BASE + 262);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_NL         <span class="keywd">is</span> chr(KEYCODE_BASE + 272);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_BS         <span class="keywd">is</span> chr(KEYCODE_BASE + 273);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_TAB        <span class="keywd">is</span> chr(KEYCODE_BASE + 274);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_ESC        <span class="keywd">is</span> chr(KEYCODE_BASE + 275);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MENU       <span class="keywd">is</span> chr(KEYCODE_BASE + 276);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_PRINT      <span class="keywd">is</span> chr(KEYCODE_BASE + 277);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_PAUSE      <span class="keywd">is</span> chr(KEYCODE_BASE + 278);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SCRLUP         <span class="keywd">is</span> chr(KEYCODE_BASE + 288);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SCRLDN         <span class="keywd">is</span> chr(KEYCODE_BASE + 289);
<span class="keywd">const</span> <span class="type">char</span>: KEY_INSLN          <span class="keywd">is</span> chr(KEYCODE_BASE + 290);
<span class="keywd">const</span> <span class="type">char</span>: KEY_DELLN          <span class="keywd">is</span> chr(KEYCODE_BASE + 291);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ERASE          <span class="keywd">is</span> chr(KEYCODE_BASE + 292);
<span class="keywd">const</span> <span class="type">char</span>: KEY_NULCHAR        <span class="keywd">is</span> chr(KEYCODE_BASE + 293);
<span class="keywd">const</span> <span class="type">char</span>: KEY_NULLCMD        <span class="keywd">is</span> chr(KEYCODE_BASE + 294);
<span class="keywd">const</span> <span class="type">char</span>: KEY_REDRAW         <span class="keywd">is</span> chr(KEYCODE_BASE + 295);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE1         <span class="keywd">is</span> chr(KEYCODE_BASE + 304);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE2         <span class="keywd">is</span> chr(KEYCODE_BASE + 305);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE3         <span class="keywd">is</span> chr(KEYCODE_BASE + 306);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE4         <span class="keywd">is</span> chr(KEYCODE_BASE + 307);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE5         <span class="keywd">is</span> chr(KEYCODE_BASE + 308);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE_FWD      <span class="keywd">is</span> chr(KEYCODE_BASE + 309);
<span class="keywd">const</span> <span class="type">char</span>: KEY_MOUSE_BACK     <span class="keywd">is</span> chr(KEYCODE_BASE + 310);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE1     <span class="keywd">is</span> chr(KEYCODE_BASE + 320);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE2     <span class="keywd">is</span> chr(KEYCODE_BASE + 321);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE3     <span class="keywd">is</span> chr(KEYCODE_BASE + 322);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE4     <span class="keywd">is</span> chr(KEYCODE_BASE + 323);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE5     <span class="keywd">is</span> chr(KEYCODE_BASE + 324);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE_FWD  <span class="keywd">is</span> chr(KEYCODE_BASE + 325);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SFT_MOUSE_BACK <span class="keywd">is</span> chr(KEYCODE_BASE + 326);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE1     <span class="keywd">is</span> chr(KEYCODE_BASE + 336);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE2     <span class="keywd">is</span> chr(KEYCODE_BASE + 337);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE3     <span class="keywd">is</span> chr(KEYCODE_BASE + 338);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE4     <span class="keywd">is</span> chr(KEYCODE_BASE + 339);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE5     <span class="keywd">is</span> chr(KEYCODE_BASE + 340);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE_FWD  <span class="keywd">is</span> chr(KEYCODE_BASE + 341);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CTL_MOUSE_BACK <span class="keywd">is</span> chr(KEYCODE_BASE + 342);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE1     <span class="keywd">is</span> chr(KEYCODE_BASE + 352);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE2     <span class="keywd">is</span> chr(KEYCODE_BASE + 353);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE3     <span class="keywd">is</span> chr(KEYCODE_BASE + 354);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE4     <span class="keywd">is</span> chr(KEYCODE_BASE + 355);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE5     <span class="keywd">is</span> chr(KEYCODE_BASE + 356);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE_FWD  <span class="keywd">is</span> chr(KEYCODE_BASE + 357);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT_MOUSE_BACK <span class="keywd">is</span> chr(KEYCODE_BASE + 358);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SHIFT          <span class="keywd">is</span> chr(KEYCODE_BASE + 368);
<span class="keywd">const</span> <span class="type">char</span>: KEY_LEFT_SHIFT     <span class="keywd">is</span> chr(KEYCODE_BASE + 369);
<span class="keywd">const</span> <span class="type">char</span>: KEY_RIGHT_SHIFT    <span class="keywd">is</span> chr(KEYCODE_BASE + 370);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CONTROL        <span class="keywd">is</span> chr(KEYCODE_BASE + 371);
<span class="keywd">const</span> <span class="type">char</span>: KEY_LEFT_CONTROL   <span class="keywd">is</span> chr(KEYCODE_BASE + 372);
<span class="keywd">const</span> <span class="type">char</span>: KEY_RIGHT_CONTROL  <span class="keywd">is</span> chr(KEYCODE_BASE + 373);
<span class="keywd">const</span> <span class="type">char</span>: KEY_ALT            <span class="keywd">is</span> chr(KEYCODE_BASE + 374);
<span class="keywd">const</span> <span class="type">char</span>: KEY_LEFT_ALT       <span class="keywd">is</span> chr(KEYCODE_BASE + 375);
<span class="keywd">const</span> <span class="type">char</span>: KEY_RIGHT_ALT      <span class="keywd">is</span> chr(KEYCODE_BASE + 376);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SUPER          <span class="keywd">is</span> chr(KEYCODE_BASE + 377);
<span class="keywd">const</span> <span class="type">char</span>: KEY_LEFT_SUPER     <span class="keywd">is</span> chr(KEYCODE_BASE + 378);
<span class="keywd">const</span> <span class="type">char</span>: KEY_RIGHT_SUPER    <span class="keywd">is</span> chr(KEYCODE_BASE + 379);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SHIFT_LOCK     <span class="keywd">is</span> chr(KEYCODE_BASE + 383);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SHIFT_LOCK_ON  <span class="keywd">is</span> chr(KEYCODE_BASE + 384);
<span class="keywd">const</span> <span class="type">char</span>: KEY_NUM_LOCK       <span class="keywd">is</span> chr(KEYCODE_BASE + 385);
<span class="keywd">const</span> <span class="type">char</span>: KEY_NUM_LOCK_ON    <span class="keywd">is</span> chr(KEYCODE_BASE + 386);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SCROLL_LOCK    <span class="keywd">is</span> chr(KEYCODE_BASE + 387);
<span class="keywd">const</span> <span class="type">char</span>: KEY_SCROLL_LOCK_ON <span class="keywd">is</span> chr(KEYCODE_BASE + 388);
<span class="keywd">const</span> <span class="type">char</span>: KEY_CLOSE          <span class="keywd">is</span> chr(KEYCODE_BASE + 391);
<span class="keywd">const</span> <span class="type">char</span>: KEY_RESIZE         <span class="keywd">is</span> chr(KEYCODE_BASE + 392);
<span class="keywd">const</span> <span class="type">char</span>: KEY_UNDEF          <span class="keywd">is</span> chr(KEYCODE_BASE + 398);
<span class="keywd">const</span> <span class="type">char</span>: KEY_NONE           <span class="keywd">is</span> chr(KEYCODE_BASE + 399);


<span class="comment">(**
 *  Read a char from ''inFile'' or return KEY_NONE if reading would wait (block).
 *  This function never waits until a character is received (it does not block).
 *  @return the char read from ''inFile'', or
 *          KEY_NONE IF no char is available.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">file</span>: inFile, NO_WAIT) <span class="keywd">is</span>
  <span class="keywd">return</span> inputReady(inFile) ? getc(inFile) : KEY_NONE;


<span class="comment"># The function busy_getc(aFile) is deprecated. Use getc(aFile, NO_WAIT) instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: busy_getc (<span class="keywd">inout</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span>
  <span class="keywd">return</span> inputReady(keybd) ? getc(keybd) : KEY_NONE;
</pre>
</body>
</html>
