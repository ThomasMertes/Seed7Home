<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  null_file.s7i  Base implementation type for all files           *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2013, 2021, 2022  Thomas Mertes            *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/file.htm">file.s7i</a>"</span>;


<span class="comment">(**
 *  Base implementation type for the [[file]] interface.
 *  A ''null_file'' discards all data written to it. Reads from a
 *  ''null_file'' always yield [[char#EOF|EOF]] immediately. A ''null_file''
 *  is not seekable. The functions [[#length(in_null_file)|length]],
 *  [[#seek(in_null_file,in_integer)|seek]] and [[#tell(in_null_file)|tell]]
 *  raise FILE_ERROR. The functions [[#getc(inout_null_file)|getc]],
 *  [[#getwd(inout_null_file)|getwd]] and [[#getln(inout_null_file)|getln]]
 *  are written such that a derived type can use them. Derived
 *  types of ''null_file'' need to override the functions
 *  [[#write(in_null_file,in_string)|write]], [[#gets(in_null_file,in_integer)|gets]],
 *  [[#eof(in_null_file)|eof]] and [[#hasNext(in_null_file)|hasNext]].
 *  A derived type, which represents a seekable file, needs to
 *  override the functions [[#length(in_null_file)|length]],
 *  [[#seek(in_null_file,in_integer)|seek]] and [[#tell(in_null_file)|tell]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: null_file <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">char</span>: bufferChar <span class="keywd">is</span> <span class="stri">'\n'</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(null_file, file);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">null_file</span>: aFile1) = (<span class="op">in</span> <span class="type">null_file</span>: aFile2)   <span class="keywd">is</span> action <span class="stri">"ENU_EQ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">null_file</span>: aFile1) &lt;> (<span class="op">in</span> <span class="type">null_file</span>: aFile2)  <span class="keywd">is</span> action <span class="stri">"ENU_NE"</span>;


<span class="comment">(**
 *  Standard null file.
 *  Anything written to STD_NULL is ignored. Reading from STD_NULL does not
 *  deliver data.
 *   eof(STD_NULL)      returns TRUE
 *   getc(STD_NULL)     returns EOF
 *   gets(STD_NULL, 1)  returns ""
 *  The file STD_NULL is used to initialize [[file]] variables
 *  and as result of [[external_file#open(in_string,in_string)|open]],
 *  if a ''file'' cannot be opened.
 *)</span>
<span class="keywd">var</span> <span class="type">null_file</span>: STD_NULL <span class="keywd">is</span> null_file.value;


<span class="comment">(**
 *  Default value of ''file'' (STD_NULL).
 *)</span>
<span class="keywd">const</span> <span class="type">file</span>: (attr file) . value <span class="keywd">is</span> STD_NULL;


<span class="comment">(**
 *  Write a [[string]] to a ''null_file''.
 *  The parameter ''stri'' is just ignored. Derived types of
 *  ''null_file'' need to override this function.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">null_file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> noop;


<span class="comment">(**
 *  Write end-of-line to ''outFile''.
 *  This function writes the end-of-line marker '\n'. Derived types
 *  can use this function. If a derived type does not use '\n'
 *  as end-of-line marker it needs to override this function.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">null_file</span>: outFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(outFile, <span class="stri">"\n"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a [[string]] followed by end-of-line to ''outFile''.
 *  This function is based on write and writeln. Derived types
 *  can use this function. This function must be overridden, if
 *  it is necessary to write ''stri'' and '\n' together.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">null_file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(outFile, stri);
    writeln(outFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a string with a maximum length from a ''null_file''.
 *  Derived types of ''null_file'' need to override this function.
 *  @return the empty string ("").
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">null_file</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> maxLength &lt; 0 <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a character from a ''null_file''.
 *  This function is based on the gets function. Therefore it is
 *  useable for derived types of ''null_file''. For the ''null_file''
 *  itself it always returns [[char#EOF|EOF]].
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">null_file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: charRead <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    buffer := gets(inFile, 1);
    <span class="keywd">if</span> buffer = <span class="stri">""</span> <span class="keywd">then</span>
      charRead := EOF;
    <span class="keywd">else</span>
      charRead := buffer[1];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from a ''null_file''.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with ' ', '\t', '\n' or [[char#EOF|EOF]]. The
 *  word ending characters are not copied into the string. When the
 *  function is left inFile.bufferChar contains ' ', '\t', '\n' or
 *  [[char#EOF|EOF]]. This function is based on the gets function.
 *  Therefore it is useable for derived types of ''null_file''.
 *  For the ''null_file'' itself it always returns "" and assigns
 *  [[char#EOF|EOF]] to inFile.bufferChar.
 *  @return the word read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">null_file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: word <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      buffer := gets(inFile, 1);
    <span class="keywd">until</span> buffer &lt;> <span class="stri">" "</span> <span class="op">and</span> buffer &lt;> <span class="stri">"\t"</span>;
    <span class="keywd">while</span> buffer &lt;> <span class="stri">" "</span> <span class="op">and</span> buffer &lt;> <span class="stri">"\t"</span> <span class="op">and</span>
        buffer &lt;> <span class="stri">"\n"</span> <span class="op">and</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      word &amp;:= buffer;
      buffer := gets(inFile, 1);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> buffer = <span class="stri">""</span> <span class="keywd">then</span>
      inFile.bufferChar := EOF;
    <span class="keywd">else</span>
      inFile.bufferChar := buffer[1];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from a ''null_file''.
 *  The function accepts lines ending with '\n' or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string. When
 *  the function is left inFile.bufferChar contains '\n' or
 *  [[char#EOF|EOF]]. This function is based on the gets function.
 *  Therefore it is useable for derived types of ''null_file''.
 *  For the ''null_file'' itself it always returns "" and assigns
 *  [[char#EOF|EOF]] to inFile.bufferChar.
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">null_file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: line <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    buffer := gets(inFile, 1);
    <span class="keywd">while</span> buffer &lt;> <span class="stri">"\n"</span> <span class="op">and</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      line &amp;:= buffer;
      buffer := gets(inFile, 1);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> buffer = <span class="stri">""</span> <span class="keywd">then</span>
      inFile.bufferChar := EOF;
    <span class="keywd">else</span>
      inFile.bufferChar := buffer[1];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  Derived types of ''null_file'' need to override this function.
 *  @return TRUE, since a ''null_file'' is always at end-of-file.
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">null_file</span>: inFile) <span class="keywd">is</span> TRUE;


<span class="comment">(**
 *  Determine if at least one character can be read successfully.
 *  Derived types of ''null_file'' need to override this function.
 *  @return FALSE, since the next ''getc'' will always return
 *          [[char#EOF|EOF]].
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">null_file</span>: inFile) <span class="keywd">is</span> FALSE;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eoln (<span class="op">in</span> <span class="type">null_file</span>: inFile) <span class="keywd">is</span>
  <span class="keywd">return</span> inFile.bufferChar = <span class="stri">'\n'</span>;


<span class="comment">(**
 *  Obtain the length of a file.
 *  A ''null_file'' is not seekable, therefore FILE_ERROR is raised.
 *  Derived types of ''null_file'' need to override this function.
 *  @return nothing, because FILE_ERROR is always raised.
 *  @exception FILE_ERROR Is always raised, because a ''null_file'' is
 *             not seekable.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">null_file</span>: aFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    raise FILE_ERROR;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine if the file ''aFile'' is seekable.
 *  If a file is seekable the functions ''seek'' and ''tell''
 *  can be used to set and and obtain the current file position.
 *  @return FALSE, since a ''null_file'' is not seekable.
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: seekable (<span class="op">in</span> <span class="type">null_file</span>: aFile) <span class="keywd">is</span> FALSE;


<span class="comment">(**
 *  Set the current file position.
 *  A ''null_file'' is not seekable, therefore FILE_ERROR is raised.
 *  If a derived type is seekable it needs to override this function.
 *  @exception FILE_ERROR Is always raised, because a ''null_file'' is
 *             not seekable.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="op">in</span> <span class="type">null_file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: position) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    raise FILE_ERROR;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Obtain the current file position.
 *  A ''null_file'' is not seekable, therefore FILE_ERROR is raised.
 *  If a derived type is seekable it needs to override this function.
 *  @return nothing, because FILE_ERROR is always raised.
 *  @exception FILE_ERROR Is always raised, because a ''null_file'' is
 *             not seekable.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: tell (<span class="op">in</span> <span class="type">null_file</span>: aFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: position <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    raise FILE_ERROR;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveLeft (<span class="op">in</span> <span class="type">null_file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    raise FILE_ERROR;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: erase (<span class="op">in</span> <span class="type">null_file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    raise FILE_ERROR;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Close a ''null_file''.
 *  Closing a ''null_file'' has no effect.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="op">in</span> <span class="type">null_file</span>: aFile) <span class="keywd">is</span> noop;


<span class="comment">(**
 *  Forces that all buffered data is sent to its destination.
 *  Flushing a ''null_file'' has no effect.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="op">in</span> <span class="type">null_file</span>: aFile) <span class="keywd">is</span> noop;
</pre>
</body>
</html>
