<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  idxarray.s7i  Support for arrays with non-integer index         *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Abstract data type, describing resizable arrays with ''indexType'' index.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: <span class="type">array</span> <span class="type">[</span> (<span class="op">in</span> <span class="type">type</span>: indexType) ] (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: stdArrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: tupleType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    arrayType := get_type(getfunc(<span class="type">array</span> <span class="type">[</span> (attr indexType) ] (attr baseType)));
    <span class="keywd">if</span> arrayType = void <span class="keywd">then</span>
      global
      arrayType := newtype;
      IN_PARAM_IS_REFERENCE(arrayType);
      stdArrayType := <span class="type">array</span> <span class="type">baseType</span>;
      tupleType := tuple(baseType);
      <span class="keywd">const</span> <span class="type">type</span>: <span class="type">array</span> <span class="type">[</span> (attr indexType) ] (attr baseType)                  <span class="keywd">is</span> arrayType;
      <span class="keywd">const</span> <span class="type">type</span>: base_type (attr arrayType)                                  <span class="keywd">is</span> baseType;

      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">arrayType</span>: dest) ::= (<span class="op">in</span> <span class="type">arrayType</span>: source)            <span class="keywd">is</span> action <span class="stri">"ARR_CREATE"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">arrayType</span>: aValue)                             <span class="keywd">is</span> action <span class="stri">"ARR_DESTR"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: dest) := (<span class="op">in</span> <span class="type">arrayType</span>: source)           <span class="keywd">is</span> action <span class="stri">"ARR_CPY"</span>;

      <span class="comment">(**
       *  Append the array ''extension'' to the array ''arr''.
       *  @exception MEMORY_ERROR Not enough memory for the concatenated
       *             array.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) &amp;:= (<span class="op">in</span> <span class="type">arrayType</span>: extension)        <span class="keywd">is</span> action <span class="stri">"ARR_APPEND"</span>;

      <span class="comment">(**
       *  Append the given ''element'' to the array ''arr''.
       *  @exception MEMORY_ERROR Not enough memory for the concatenated
       *             array.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) &amp;:= (<span class="op">in</span> <span class="type">baseType</span>: element)           <span class="keywd">is</span> action <span class="stri">"ARR_PUSH"</span>;

      <span class="comment">(**
       *  Concatenate two arrays.
       *  @return the result of the concatenation.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr1) &amp; (<span class="op">in</span> <span class="type">arrayType</span>: arr2)       <span class="keywd">is</span> action <span class="stri">"ARR_CAT"</span>;

      <span class="comment">(**
       *  Determine the length of the array ''arr''.
       *   length(['a'] (1, 2, 3))  returns  3
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">arrayType</span>: arr)                          <span class="keywd">is</span> action <span class="stri">"ARR_LNG"</span>;

      <span class="comment">(**
       *  Minimal index of array ''arr'' converted to [[integer]].
       *   minIntIdx(['a'] (1, 2, 3))  returns  97
       *  @return the minimal index of the array converted to [[integer]].
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: minIntIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr)                       <span class="keywd">is</span> action <span class="stri">"ARR_MINIDX"</span>;

      <span class="comment">(**
       *  Maximal index of array ''arr'' converted to [[integer]].
       *   maxIntIdx(['a'] (1, 2, 3))  returns  99
       *  @return the maximal index of the array converted to [[integer]].
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: maxIntIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr)                       <span class="keywd">is</span> action <span class="stri">"ARR_MAXIDX"</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">stdArrayType</span>: (attr stdArrayType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)   <span class="keywd">is</span> action <span class="stri">"ARR_CONV"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (attr arrayType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">stdArrayType</span>: arr)      <span class="keywd">is</span> action <span class="stri">"ARR_CONV"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">tupleType</span>: (attr tupleType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)         <span class="keywd">is</span> action <span class="stri">"ARR_CONV"</span>;
      <span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">stdArrayType</span>: (attr stdArrayType) <span class="op">conv</span> (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span> action <span class="stri">"TYP_VARCONV"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (attr arrayType) . _GENERATE_EMPTY_ARRAY          <span class="keywd">is</span> action <span class="stri">"ARR_EMPTY"</span>;
      <span class="keywd">const</span> <span class="type">arrayType</span>: (attr arrayType) . value                               <span class="keywd">is</span> arrayType._GENERATE_EMPTY_ARRAY;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: [ (attr indexType) ] (<span class="op">in</span> <span class="type">tupleType</span>: arr_tuple) <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> ([ord(indexType.value)] arr_tuple);

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: [ (attr indexType) ] (<span class="op">in</span> <span class="type">baseType</span>: base_elem) <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> ([ord(indexType.value)] base_elem);

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: [ (<span class="op">in</span> <span class="type">indexType</span>: startIndex) ] (<span class="op">in</span> <span class="type">tupleType</span>: arr_tuple) <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> ([ord(startIndex)] arr_tuple);

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: [ (<span class="op">in</span> <span class="type">indexType</span>: startIndex) ] (<span class="op">in</span> <span class="type">baseType</span>: base_elem) <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> ([ord(startIndex)] base_elem);

      <span class="comment">(**
       *  Access one element from the array ''an_array''.
       *  @return the element with the specified ''index'' from ''an_array''.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(in_arrayType)|minIdx]](an_array) or
       *                         greater than [[#minIdx(in_arrayType)|maxIdx]](an_array)
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: an_array) [ (<span class="op">in</span> <span class="type">indexType</span>: index) ] <span class="keywd">is</span>
        baseType <span class="keywd">return</span> stdArrayType <span class="op">conv</span> an_array[ord(index)];

      <span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">baseType</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: an_array) [ (<span class="op">in</span> <span class="type">indexType</span>: index) ] <span class="keywd">is</span>
        baseType <span class="keywd">return</span> <span class="keywd">var</span> stdArrayType <span class="op">conv</span> an_array[ord(index)];

      <span class="comment">(**
       *  Get a sub array beginning at the position ''start''.
       *  @return the sub array beginning at the start position.
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: an_array) [ (<span class="op">in</span> <span class="type">indexType</span>: start) .. ] <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> (stdArrayType <span class="op">conv</span> an_array[ord(start) .. ]);

      <span class="comment">(**
       *  Get a sub array ending at the position ''stop''.
       *  @return the sub array ending at the stop position.
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: an_array) [ .. (<span class="op">in</span> <span class="type">indexType</span>: stop) ] <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> (stdArrayType <span class="op">conv</span> an_array[ .. ord(stop)]);

      <span class="comment">(**
       *  Get a sub array from the position ''start'' to the position ''stop''.
       *  @return the sub array from position ''start'' to ''stop''.
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: an_array) [ (<span class="op">in</span> <span class="type">indexType</span>: start) .. (<span class="op">in</span> <span class="type">indexType</span>: stop) ] <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> (stdArrayType <span class="op">conv</span> an_array[ord(start) .. ord(stop)]);

      <span class="comment">(**
       *  Get a sub array from the position ''start'' with maximum length ''len''.
       *  @return the sub array from position ''start'' with maximum length ''len''.
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: an_array) [ (<span class="op">in</span> <span class="type">indexType</span>: start) len (<span class="op">in</span> <span class="type">indexType</span>: stop) ] <span class="keywd">is</span>
        <span class="keywd">return</span> arrayType <span class="op">conv</span> (stdArrayType <span class="op">conv</span> an_array[ord(start) len ord(stop)]);

      <span class="comment">(**
       *  Minimal index of array ''arr''.
       *   minIdx(['a'] (1, 2, 3))  returns  'a'
       *  @return the minimal index of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">indexType</span>: minIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span>
        <span class="keywd">return</span> indexType <span class="op">conv</span> minIntIdx(arr);

      <span class="comment">(**
       *  Maximal index of array ''arr''.
       *   maxIdx(['a'] (1, 2, 3))  returns  'c'
       *  @return the maximal index of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">indexType</span>: maxIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span>
        <span class="keywd">return</span> indexType <span class="op">conv</span> maxIntIdx(arr);

      <span class="comment">(**
       *  For-loop where ''forVar'' loops over the elements of the array ''arr''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> number <span class="keywd">range</span> minIntIdx(arr) <span class="keywd">to</span> maxIntIdx(arr) <span class="keywd">do</span>
            forVar := stdArrayType <span class="op">conv</span> arr[number];
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''keyVar'' loops over the indices of the array ''arr''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">indexType</span>: keyVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> keyVar <span class="keywd">range</span> minIdx(arr) <span class="keywd">to</span> maxIdx(arr) <span class="keywd">do</span>
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''forVar'' and ''keyVar' loop over the array ''arr''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar) <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">indexType</span>: keyVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> keyVar <span class="keywd">range</span> minIdx(arr) <span class="keywd">to</span> maxIdx(arr) <span class="keywd">do</span>
            forVar := stdArrayType <span class="op">conv</span> arr[ord(keyVar)];
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">if</span> getobj((attr indexType) . first) &lt;> NIL <span class="op">and</span>
          getobj((attr indexType) . last) &lt;> NIL <span class="keywd">then</span>

        <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (attr indexType) <span class="op">times</span> (<span class="op">in</span> <span class="type">baseType</span>: base_value) <span class="keywd">is</span> <span class="keywd">func</span>
          <span class="keywd">result</span>
            <span class="keywd">var</span> <span class="type">arrayType</span>: anArray <span class="keywd">is</span> arrayType.value;
          <span class="keywd">begin</span>
            anArray := arrayType <span class="op">conv</span> (succ(ord(indexType.last) - ord(indexType.first)) <span class="op">times</span> base_value);
            anArray := arrayType <span class="op">conv</span> ([ord(indexType.first)] (tupleType <span class="op">conv</span> anArray));
          <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> global;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
