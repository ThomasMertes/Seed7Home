<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  strifile.s7i  Implementation type for files stored in a string  *)</span>
<span class="comment">(*  Copyright (C) 2008, 2010 - 2013, 2020 - 2024  Thomas Mertes     *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  [[file|File]] implementation type for files stored in a [[string]].
 *  String files are seekable, therefore they
 *  support the functions [[#length(in_striFile)|length]],
 *  [[#seek(inout_striFile,in_integer)|seek]] and
 *  [[#tell(in_striFile)|tell]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: striFile <span class="keywd">is</span> <span class="keywd">sub</span> null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: content <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: position <span class="keywd">is</span> 1;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(striFile, file);


<span class="comment">(**
 *  Open a ''striFile'' with the given string content.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openStriFile (<span class="op">in</span> <span class="type">string</span>: content) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">striFile</span>: new_striFile <span class="keywd">is</span> striFile.value;
  <span class="keywd">begin</span>
    new_striFile.content := content;
    newFile := toInterface(new_striFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a ''striFile'' with an empty string content.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openStriFile <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">striFile</span>: new_striFile <span class="keywd">is</span> striFile.value;
  <span class="keywd">begin</span>
    newFile := toInterface(new_striFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write the [[string]] ''stri'' to ''outStriFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">striFile</span>: outStriFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> outStriFile.position = succ(length(outStriFile.content)) <span class="keywd">then</span>
      outStriFile.content &amp;:= stri;
    <span class="keywd">elsif</span> outStriFile.position &lt;= length(outStriFile.content) <span class="keywd">then</span>
      <span class="keywd">if</span> pred(outStriFile.position) &lt;= length(outStriFile.content) - length(stri) <span class="keywd">then</span>
        outStriFile.content @:= [outStriFile.position] stri;
      <span class="keywd">else</span>
        outStriFile.content := outStriFile.content[.. pred(outStriFile.position)];
        outStriFile.content &amp;:= stri;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> outStriFile.position > length(outStriFile.content) <span class="keywd">then</span>
      outStriFile.content &amp;:=
          <span class="stri">"\0;"</span> <span class="op">mult</span> pred(outStriFile.position - length(outStriFile.content)) &amp;
          stri;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    outStriFile.position +:= length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveLeft (<span class="keywd">inout</span> <span class="type">striFile</span>: outStriFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> outStriFile.position > length(stri) <span class="keywd">then</span>
      outStriFile.position -:= length(stri);
    <span class="keywd">else</span>
      outStriFile.position := 1;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a character from ''inStriFile''.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">striFile</span>: inStriFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: charRead <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inStriFile.position &lt;= length(inStriFile.content) <span class="keywd">then</span>
      charRead := inStriFile.content[inStriFile.position];
      incr(inStriFile.position);
    <span class="keywd">else</span>
      charRead := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a [[string]] with maximum length from ''inStriFile''.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="keywd">inout</span> <span class="type">striFile</span>: inStriFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> maxLength &lt;= 0 <span class="keywd">then</span>
      <span class="keywd">if</span> maxLength &lt;> 0 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> maxLength &lt;= succ(length(inStriFile.content) - inStriFile.position) <span class="keywd">then</span>
      striRead := inStriFile.content[inStriFile.position fixLen maxLength];
      inStriFile.position +:= maxLength;
    <span class="keywd">else</span>
      striRead := inStriFile.content[inStriFile.position ..];
      inStriFile.position := succ(length(inStriFile.content));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a [[string]] from ''inStriFile'' until the ''terminator'' character is found.
 *  If a ''terminator'' is found the string before the ''terminator'' is
 *  returned and the ''terminator'' character is assigned to inStriFile.bufferChar.
 *  The file position is advanced after the ''terminator'' character.
 *  If no ''terminator'' is found the rest of ''inStriFile'' is returned and
 *  [[char#EOF|EOF]] is assigned to the inStriFile.bufferChar. When the function
 *  is left inFile.bufferChar contains either ''terminator'' or [[char#EOF|EOF]].
 *  @param inFile File from which the string is read.
 *  @param terminator Character which terminates the string.
 *  @return the string read without the ''terminator'' or the rest of the
 *          file if no ''terminator'' is found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getTerminatedString (<span class="keywd">inout</span> <span class="type">striFile</span>: inStriFile,
                                        <span class="op">in</span> <span class="type">char</span>: terminator) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: terminatorPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    terminatorPos := pos(inStriFile.content, terminator, inStriFile.position);
    <span class="keywd">if</span> terminatorPos &lt;> 0 <span class="keywd">then</span>
      stri := inStriFile.content[inStriFile.position .. pred(terminatorPos)];
      inStriFile.position := succ(terminatorPos);
      inStriFile.bufferChar := terminator;
    <span class="keywd">else</span>
      stri := inStriFile.content[inStriFile.position ..];
      inStriFile.position := succ(length(inStriFile.content));
      inStriFile.bufferChar := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from ''inStriFile''.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with ' ', '\t', '\n', "\r\n" or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  The '\r' of a "\r\n" sequence is silently removed.
 *  When the function is left inStriFile.bufferChar contains ' ',
 *  '\t', '\n' or [[char#EOF|EOF]].
 *  @return the word read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">striFile</span>: inStriFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: space_or_tab <span class="keywd">is</span> {<span class="stri">' '</span>, <span class="stri">'\t'</span>};
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: space_tab_or_nl <span class="keywd">is</span> {<span class="stri">' '</span>, <span class="stri">'\t'</span>, <span class="stri">'\n'</span>};
    <span class="keywd">var</span> <span class="type">integer</span>: wordStartPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: wordEndPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    wordStartPos := inStriFile.position;
    <span class="keywd">while</span> wordStartPos &lt;= length(inStriFile.content) <span class="op">and</span>
        inStriFile.content[wordStartPos] <span class="op">in</span> space_or_tab <span class="keywd">do</span>
      incr(wordStartPos);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> wordStartPos > length(inStriFile.content) <span class="keywd">then</span>
      inStriFile.position := wordStartPos;
      inStriFile.bufferChar := EOF;
    <span class="keywd">else</span>
      wordEndPos := succ(wordStartPos);
      <span class="keywd">while</span> wordEndPos &lt;= length(inStriFile.content) <span class="op">and</span>
          inStriFile.content[wordEndPos] <span class="op">not</span> <span class="op">in</span> space_tab_or_nl <span class="keywd">do</span>
        incr(wordEndPos);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">if</span> wordEndPos &lt;= length(inStriFile.content) <span class="keywd">then</span>
        <span class="keywd">if</span> inStriFile.content[wordEndPos] = <span class="stri">'\n'</span> <span class="op">and</span>
            inStriFile.content[pred(wordEndPos)] = <span class="stri">'\r'</span> <span class="keywd">then</span>
          stri := inStriFile.content[wordStartPos .. wordEndPos - 2];
        <span class="keywd">else</span>
          stri := inStriFile.content[wordStartPos .. pred(wordEndPos)];
        <span class="keywd">end</span> <span class="keywd">if</span>;
        inStriFile.position := succ(wordEndPos);
        inStriFile.bufferChar := inStriFile.content[wordEndPos];
      <span class="keywd">else</span>
        stri := inStriFile.content[wordStartPos ..];
        inStriFile.position := succ(length(inStriFile.content));
        inStriFile.bufferChar := EOF;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from ''inStriFile''.
 *  The function accepts lines ending with '\n', "\r\n" or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  The '\r' of a "\r\n" sequence is silently removed.
 *  When the function is left inStriFile.bufferChar contains '\n'
 *  or [[char#EOF|EOF]].
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">striFile</span>: inStriFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: newlinePos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    newlinePos := pos(inStriFile.content, <span class="stri">'\n'</span>, inStriFile.position);
    <span class="keywd">if</span> newlinePos &lt;> 0 <span class="keywd">then</span>
      <span class="keywd">if</span> newlinePos >= 2 <span class="op">and</span>
          inStriFile.content[pred(newlinePos)] = <span class="stri">'\r'</span> <span class="keywd">then</span>
        stri := inStriFile.content[inStriFile.position .. newlinePos - 2];
      <span class="keywd">else</span>
        stri := inStriFile.content[inStriFile.position .. pred(newlinePos)];
      <span class="keywd">end</span> <span class="keywd">if</span>;
      inStriFile.position := succ(newlinePos);
      inStriFile.bufferChar := <span class="stri">'\n'</span>;
    <span class="keywd">else</span>
      stri := inStriFile.content[inStriFile.position ..];
      inStriFile.position := succ(length(inStriFile.content));
      inStriFile.bufferChar := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  The end-of-file indicator is set if at least one request to read
 *  from the file failed.
 *  @return TRUE if the end-of-file indicator is set, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">striFile</span>: inStriFile) <span class="keywd">is</span>
  <span class="keywd">return</span> inStriFile.position > length(inStriFile.content);


<span class="comment">(**
 *  Determine if at least one character can be read successfully.
 *  This function allows a file to be handled like an iterator.
 *  @return FALSE if ''getc'' would return [[char#EOF|EOF]],
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">striFile</span>: inStriFile) <span class="keywd">is</span>
  <span class="keywd">return</span> inStriFile.position &lt;= length(inStriFile.content);


<span class="comment">(**
 *  Obtain the length of a ''aStriFile''.
 *  The file length is measured in characters.
 *  @return the length of a file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">striFile</span>: aStriFile) <span class="keywd">is</span>
  <span class="keywd">return</span> length(aStriFile.content);


<span class="comment">(**
 *  Truncate ''aStriFile'' to the given ''length''.
 *  If the file previously was larger than ''length'', the extra data is lost.
 *  If the file previously was shorter, it is extended, and the extended
 *  part is filled with null bytes ('\0;').
 *  The file length is measured in characters.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: truncate (<span class="keywd">inout</span> <span class="type">striFile</span>: aStriFile, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt; 0 <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">elsif</span> length(aStriFile.content) > length <span class="keywd">then</span>
      aStriFile.content := aStriFile.content[.. length];
    <span class="keywd">elsif</span> length(aStriFile.content) &lt; length <span class="keywd">then</span>
      aStriFile.content := aStriFile.content &amp;
          <span class="stri">"\0;"</span> <span class="op">mult</span> (length - length(aStriFile.content));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine if the file ''aFile'' is seekable.
 *  If a file is seekable the functions ''seek'' and ''tell''
 *  can be used to set and and obtain the current file position.
 *  @return TRUE, since a ''striFile'' is seekable.
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: seekable (<span class="op">in</span> <span class="type">striFile</span>: aFile) <span class="keywd">is</span> TRUE;


<span class="comment">(**
 *  Set the current file position.
 *  The file position is measured in characters from the start of the file.
 *  The first character in the file has the position 1.
 *  @exception RANGE_ERROR The file position is negative or zero.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="keywd">inout</span> <span class="type">striFile</span>: aStriFile, <span class="op">in</span> <span class="type">integer</span>: position) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> position &lt;= 0 <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">else</span>
      aStriFile.position := position;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Obtain the current file position of ''aStriFile''.
 *  The file position is measured in characters from the start of the file.
 *  The first character in the file has the position 1.
 *  @return the current file position.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: tell (<span class="op">in</span> <span class="type">striFile</span>: aStriFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aStriFile.position;
</pre>
</body>
</html>
