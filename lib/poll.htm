<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  poll.s7i      Support for pollData and the poll function        *)</span>
<span class="comment">(*  Copyright (C) 2011  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/sockbase.htm">sockbase.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/socket.htm">socket.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">integer</span>: POLLNOTHING <span class="keywd">is</span> 0;
<span class="keywd">const</span> <span class="type">integer</span>: POLLIN      <span class="keywd">is</span> 1;
<span class="keywd">const</span> <span class="type">integer</span>: POLLOUT     <span class="keywd">is</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: POLLINOUT   <span class="keywd">is</span> 3;


<span class="comment">(**
 *  Type to manage sockets and corresponding event checks and findings.
 *  ''PollData'' maintains input (checkedEvents) and output (eventFindings)
 *  of the function [[#poll(inout_pollData)|poll]]. ''PollData'' contains
 *  a set of sockets. For every [[socket]] the checkedEvents and the
 *  eventFindings are maintained. The checkedEvents determine, which
 *  events (POLLIN, POLLOUT, or POLLINOUT) should be checked by
 *  [[#poll(inout_pollData)|poll]]. ''Poll'' determines the events found
 *  and stores them as eventFindings. ''PollData'' provides also an
 *  iterator, which can be used to iterate over checkedEvents and
 *  eventFindings.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: pollData <span class="keywd">is</span> newtype;


IN_PARAM_IS_REFERENCE(pollData);

<span class="keywd">const</span> <span class="type">creator</span>: (<span class="keywd">ref</span> <span class="type">pollData</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">pollData</span>: source)             <span class="keywd">is</span> action <span class="stri">"POL_CREATE"</span>;
<span class="keywd">const</span> <span class="type">destroyer</span>: destroy (<span class="keywd">ref</span> <span class="type">pollData</span>: aValue)                            <span class="keywd">is</span> action <span class="stri">"POL_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">pollData</span>: dest) := (<span class="keywd">ref</span> <span class="type">pollData</span>: source)               <span class="keywd">is</span> action <span class="stri">"POL_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">pollData</span>: _GENERATE_EMPTY_POLL_DATA (<span class="op">in</span> <span class="type">file</span>: aFile)            <span class="keywd">is</span> action <span class="stri">"POL_EMPTY"</span>;


<span class="comment">(**
 *  Default value of ''pollData'' (empty pollData).
 *)</span>
<span class="keywd">const</span> <span class="type">pollData</span>: (attr pollData) . value                                    <span class="keywd">is</span> _GENERATE_EMPTY_POLL_DATA(STD_NULL);


<span class="comment">(**
 *  Clears ''pData''.
 *  All [[socket|sockets]] and all events are removed from ''pData'' and
 *  the iterator is reset, such that ''hasNext'' returns FALSE.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">pollData</span>: pData)                                  <span class="keywd">is</span> action <span class="stri">"POL_CLEAR"</span>;


<span class="comment">(**
 *  Add ''eventsToCheck'' for ''aSocket'' to ''pData''.
 *  ''EventsToCheck'' can have one of the following values:
 *  * POLLIN check if data can be read from the corresponding socket.
 *  * POLLOUT check if data can be written to the corresponding socket.
 *  * POLLINOUT check if data can be read or written (POLLIN or POLLOUT).
 *  @param pollData Poll data to which the event checks are added.
 *  @param aSocket Socket for which the events should be checked.
 *  @param eventsToCheck Events to be added to the checkedEvents
 *         field of ''pData''.
 *  @param fileObj File to be returned, if the iterator returns
 *         files in ''pData''.
 *  @exception RANGE_ERROR Illegal value for ''eventsToCheck''.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *  @exception FILE_ERROR A limit of the operating system was reached.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: addCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket,
                      <span class="op">in</span> <span class="type">integer</span>: eventsToCheck, <span class="op">in</span> <span class="type">file</span>: aFile)           <span class="keywd">is</span> action <span class="stri">"POL_ADD_CHECK"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: addCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">socket</span>: aSocket,
                      <span class="op">in</span> <span class="type">integer</span>: eventsToCheck) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    addCheck(pData, aSocket.sock, eventsToCheck, aSocket);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Add ''eventsToCheck'' for ''aFile'' to ''pData''.
 *  ''EventsToCheck'' can have one of the following values:
 *  * POLLIN check if data can be read from the corresponding [[socket]].
 *  * POLLOUT check if data can be written to the corresponding socket.
 *  * POLLINOUT check if data can be read or written (POLLIN or POLLOUT).
 *  @param pollData Poll data to which the event checks are added.
 *  @param aFile File for which the events should be checked.
 *  @param eventsToCheck Events to be added to the checkedEvents
 *         field of ''pData''.
 *  @exception RANGE_ERROR Illegal value for ''eventsToCheck''.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *  @exception FILE_ERROR A limit of the operating system was reached.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: addCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">file</span>: aFile,
                      <span class="op">in</span> <span class="type">integer</span>: eventsToCheck) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Remove ''eventsToCheck'' for ''aSocket'' from ''pData''.
 *  ''EventsToCheck'' can have one of the following values:
 *  * POLLIN check if data can be read from the corresponding [[socket]].
 *  * POLLOUT check if data can be written to the corresponding socket.
 *  * POLLINOUT check if data can be read or written (POLLIN or POLLOUT).
 *  @param pollData Poll data from which the event checks are removed.
 *  @param aSocket Socket for which the events should not be checked.
 *  @param eventsToCheck Events to be removed from the checkedEvents
 *         field of ''pData''.
 *  @exception RANGE_ERROR Illegal value for ''eventsToCheck''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: removeCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket,
                      <span class="op">in</span> <span class="type">integer</span>: eventsToCheck)                           <span class="keywd">is</span> action <span class="stri">"POL_REMOVE_CHECK"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: removeCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">socket</span>: aSocket,
                         <span class="op">in</span> <span class="type">integer</span>: eventsToCheck) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    removeCheck(pData, aSocket.sock, eventsToCheck);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Remove ''eventsToCheck'' for ''aFile'' from ''pData''.
 *  ''EventsToCheck'' can have one of the following values:
 *  * POLLIN check if data can be read from the corresponding [[socket]].
 *  * POLLOUT check if data can be written to the corresponding socket.
 *  * POLLINOUT check if data can be read or written (POLLIN or POLLOUT).
 *  @param pollData Poll data from which the event checks are removed.
 *  @param aFile File for which the events should not be checked.
 *  @param eventsToCheck Events to be removed from the checkedEvents
 *         field of ''pData''.
 *  @exception RANGE_ERROR Illegal value for ''eventsToCheck''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: removeCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">file</span>: aFile,
                         <span class="op">in</span> <span class="type">integer</span>: eventsToCheck) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Return the checkedEvents field from ''pData'' for ''aSocket''.
 *  The [[#poll(inout_pollData)|poll]] function uses the checkedEvents
 *  as input. The following checkedEvents can be returned:
 *  * POLLNOTHING no data can be read or written.
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read and written (POLLIN and POLLOUT).
 *  @return POLLNOTHING, POLLIN, POLLOUT or POLLINOUT, depending on
 *          the events added and removed for ''aSocket' with
 *          ''addCheck'' and ''removeCheck''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData,
                               <span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket)               <span class="keywd">is</span> action <span class="stri">"POL_GET_CHECK"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">socket</span>: aSocket) <span class="keywd">is</span>
  <span class="keywd">return</span> getCheck(pData, aSocket.sock);


<span class="comment">(**
 *  Return the checkedEvents field from ''pData'' for ''aFile''.
 *  The [[#poll(inout_pollData)|poll]] function uses the checkedEvents
 *  as input. The following checkedEvents can be returned:
 *  * POLLNOTHING no data can be read or written.
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read and written (POLLIN and POLLOUT).
 *  @return POLLNOTHING, POLLIN, POLLOUT or POLLINOUT, depending on
 *          the events added and removed for ''aFile' with
 *          ''addCheck'' and ''removeCheck''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getCheck (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">file</span>: aFile) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Waits for one or more of the checkedEvents from ''pData''.
 *  ''Poll'' waits until one of the checkedEvents for a
 *  corresponding socket occurs. If a checkedEvents occurs
 *  the eventFindings field is assigned a value. The following
 *  eventFindings values are assigned:
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read and written (POLLIN and POLLOUT).
 *  @exception FILE_ERROR The system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: poll (<span class="keywd">inout</span> <span class="type">pollData</span>: pData)                                   <span class="keywd">is</span> action <span class="stri">"POL_POLL"</span>;


<span class="comment">(**
 *  Return the eventFindings field from ''pData'' for ''aSocket''.
 *  The [[#poll(inout_pollData)|poll]] function assigns the
 *  eventFindings for ''aSocket'' to ''pData''. The following
 *  eventFindings can be returned:
 *  * POLLNOTHING no data can be read or written.
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read and written (POLLIN and POLLOUT).
 *  @return POLLNOTHING, POLLIN, POLLOUT or POLLINOUT, depending on
 *          the findings of [[#poll(inout_pollData)|poll]]
 *          concerning ''aSocket''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getFinding (<span class="keywd">inout</span> <span class="type">pollData</span>: pData,
                                <span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket)              <span class="keywd">is</span> action <span class="stri">"POL_GET_FINDING"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getFinding (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">socket</span>: aSocket) <span class="keywd">is</span>
  <span class="keywd">return</span> getFinding(pData, aSocket.sock);


<span class="comment">(**
 *  Return the eventFindings field from ''pData'' for ''aFile''.
 *  The [[#poll(inout_pollData)|poll]] function assigns the
 *  eventFindings for ''aFile'' to ''pData''. The following
 *  eventFindings can be returned:
 *  * POLLNOTHING no data can be read or written.
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read and written (POLLIN and POLLOUT).
 *  @return POLLNOTHING, POLLIN, POLLOUT or POLLINOUT, depending on
 *          the findings of [[#poll(inout_pollData)|poll]]
 *          concerning ''aFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getFinding (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">file</span>: aFile) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Reset the ''pollData'' iterator to process checkedEvents.
 *  The following calls of ''hasNext'' and ''nextFile'' refer to
 *  the checkedEvents of the given ''pollMode''. ''PollMode''
 *  can have one of the following values:
 *  * POLLNOTHING don't iterate (''hasNext'' returns FALSE).
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read or written (POLLIN and POLLOUT).
 *  @exception RANGE_ERROR Illegal value for ''pollMode''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: iterChecks (<span class="op">in</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">integer</span>: pollMode)           <span class="keywd">is</span> action <span class="stri">"POL_ITER_CHECKS"</span>;


<span class="comment">(**
 *  Reset the ''pollData'' iterator to process eventFindings.
 *  The following calls of ''hasNext'' and ''nextFile'' refer to
 *  the eventFindings of the given ''pollMode''. ''PollMode''
 *  can have one of the following values:
 *  * POLLNOTHING don't iterate (''hasNext'' returns FALSE).
 *  * POLLIN data can be read from the corresponding [[socket]].
 *  * POLLOUT data can be written to the corresponding socket.
 *  * POLLINOUT data can be read or written (POLLIN and POLLOUT).
 *  @exception RANGE_ERROR Illegal value for ''pollMode''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: iterFindings (<span class="op">in</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">integer</span>: pollMode)        <span class="keywd">is</span> action <span class="stri">"POL_ITER_FINDINGS"</span>;


<span class="comment">(**
 *  Determine if the ''pData'' iterator can deliver another [[file]].
 *  @return TRUE if ''nextFile'' would return another file from the
 *          ''pData'' iterator, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="keywd">inout</span> <span class="type">pollData</span>: pData)                        <span class="keywd">is</span> action <span class="stri">"POL_HAS_NEXT"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: nextFile (<span class="keywd">inout</span> <span class="type">pollData</span>: pData, <span class="op">in</span> <span class="type">file</span>: nullFile) <span class="keywd">is</span> action <span class="stri">"POL_NEXT_FILE"</span>;


<span class="comment">(**
 *  Get the next [[file]] from the ''pData'' iterator.
 *  Successive calls of ''nextFile'' return all files from the ''pData''
 *  iterator. The file returned by ''nextFile'' is determined with the
 *  function ''addCheck''. The files covered by the ''pData'' iterator
 *  are determined with ''iterChecks'' or ''iterFindings''.
 *  @return the next file from the ''pData'' iterator, or STD_NULL,
 *          if no file from the ''pData'' iterator is available.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: nextFile (<span class="keywd">inout</span> <span class="type">pollData</span>: pData) <span class="keywd">is</span>
    <span class="keywd">return</span> nextFile(pData, STD_NULL);


<span class="comment">(**
 *  For-loop to loop over the values of the ''pData'' iterator.
 *  The for-loop loops over the values determined by the ''pollMode''.
 *  With ''iterCheck'' or ''iterFindings'' the ''pollMode'' of the
 *  iterator is determined.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">file</span>: forVar) <span class="keywd">range</span> (<span class="keywd">inout</span> <span class="type">pollData</span>: pData) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">while</span> hasNext(pData) <span class="keywd">do</span>
      forVar := nextFile(pData);
      statements;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
