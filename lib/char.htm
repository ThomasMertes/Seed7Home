<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  char.s7i      Char support library                              *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2011  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  The type ''char'' describes Unicode characters encoded with UTF-32.
 *  A ''char'' can also contain values, which are not Unicode, like EOF.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: char           <span class="keywd">is</span> subtype DISCRETE;


$ <span class="keywd">system</span> <span class="stri">"char"</span> <span class="keywd">is</span> char;
IN_PARAM_IS_VALUE(char);

<span class="keywd">const</span> <span class="type">creator</span>: (<span class="keywd">ref</span> <span class="type">char</span>: dest) ::= (<span class="op">in</span> <span class="type">char</span>: source)         <span class="keywd">is</span> action <span class="stri">"CHR_CREATE"</span>;
<span class="keywd">const</span> <span class="type">destroyer</span>: destroy (<span class="keywd">ref</span> <span class="type">char</span>: aValue)                   <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">char</span>: dest) := (<span class="op">in</span> <span class="type">char</span>: source)           <span class="keywd">is</span> action <span class="stri">"CHR_CPY"</span>;


<span class="comment">(**
 *  Default value of ''char'' (' ').
 *)</span>
<span class="keywd">const</span> <span class="type">char</span>: (attr char) . value <span class="keywd">is</span> <span class="stri">' '</span>;


<span class="comment">(**
 *  Minimum value of ''char''.
 *)</span>
<span class="keywd">const</span> <span class="type">char</span>: (attr char) . first <span class="keywd">is</span> <span class="stri">'\0;'</span>;


<span class="comment">(**
 *  Maximum value of an Unicode character.
 *)</span>
<span class="keywd">const</span> <span class="type">char</span>: (attr char) . last  <span class="keywd">is</span> <span class="stri">'\16#10ffff;'</span>;


<span class="comment">(**
 *  Check if two characters are equal.
 *  @return TRUE if both characters are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">char</span>: ch1) = (<span class="op">in</span> <span class="type">char</span>: ch2)           <span class="keywd">is</span> action <span class="stri">"CHR_EQ"</span>;


<span class="comment">(**
 *  Check if two characters are not equal.
 *  @return FALSE if both characters are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">char</span>: ch1) &lt;> (<span class="op">in</span> <span class="type">char</span>: ch2)          <span class="keywd">is</span> action <span class="stri">"CHR_NE"</span>;


<span class="comment">(**
 *  Check if ch1 is less than ch2.
 *  @return TRUE if ch1 is less than than ch2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">char</span>: ch1) &lt; (<span class="op">in</span> <span class="type">char</span>: ch2)           <span class="keywd">is</span> action <span class="stri">"CHR_LT"</span>;


<span class="comment">(**
 *  Check if ch1 is greater than ch2.
 *  @return TRUE if ch1 is greater than ch2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">char</span>: ch1) > (<span class="op">in</span> <span class="type">char</span>: ch2)           <span class="keywd">is</span> action <span class="stri">"CHR_GT"</span>;


<span class="comment">(**
 *  Check if ch1 is less than or equal to ch2.
 *  @return TRUE if ch1 is less than or equal to ch2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">char</span>: ch1) &lt;= (<span class="op">in</span> <span class="type">char</span>: ch2)          <span class="keywd">is</span> action <span class="stri">"CHR_LE"</span>;


<span class="comment">(**
 *  Check if ch1 is greater than or equal to ch2.
 *  @return TRUE if ch1 is greater than or equal to ch2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">char</span>: ch1) >= (<span class="op">in</span> <span class="type">char</span>: ch2)          <span class="keywd">is</span> action <span class="stri">"CHR_GE"</span>;


<span class="comment">(**
 *  Compare two characters.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">char</span>: ch1, <span class="op">in</span> <span class="type">char</span>: ch2)      <span class="keywd">is</span> action <span class="stri">"CHR_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a character.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">char</span>: ch)                    <span class="keywd">is</span> action <span class="stri">"CHR_HASHCODE"</span>;


<span class="comment">(**
 *  Get the ordinal number of a character.
 *  For Unicode characters a value between 0 and 1114111 is returned.
 *  For cursor and function keys a value between 1114112 and 1114500
 *  is returned. For EOF the value -1 is returned.
 *  @return the ordinal number of a character.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">char</span>: ch)                         <span class="keywd">is</span> action <span class="stri">"CHR_ORD"</span>;


<span class="comment">(**
 *  Get the ordinal number of a character.
 *  For Unicode characters a value between 0 and 1114111 is returned.
 *  For cursor and function keys a value between 1114112 and 1114500
 *  is returned. For EOF the value -1 is returned.
 *  @return the ordinal number of a character.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">char</span>: ch)                     <span class="keywd">is</span> action <span class="stri">"CHR_ORD"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to a character.
 *  For values between 0 and 1114111 a Unicode character is returned.
 *  For values between 1114112 and 1114500  a cursor or function key
 *  is returned. For -1 the value EOF is returned.
 *  @return a character which corresponds to the given [[integer]].
 *  @exception RANGE_ERROR If the number does not fit into a 32-bit ''char''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: chr (<span class="op">in</span> <span class="type">integer</span>: number)                     <span class="keywd">is</span> action <span class="stri">"CHR_ICONV1"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to a character.
 *  For values between 0 and 1114111 a Unicode character is returned.
 *  For values between 1114112 and 1114500 a cursor or function key
 *  is returned. For -1 the value EOF is returned.
 *  @return a character which corresponds to the given [[integer]].
 *  @exception RANGE_ERROR If the number does not fit into a 32-bit ''char''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: char (<span class="op">in</span> <span class="type">integer</span>: number)                    <span class="keywd">is</span> action <span class="stri">"CHR_ICONV1"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to a character.
 *  For values between 0 and 1114111 a Unicode character is returned.
 *  For values between 1114112 and 1114500 a cursor or function key
 *  is returned. For -1 the value EOF is returned.
 *  @return a character which corresponds to the given [[integer]].
 *  @exception RANGE_ERROR If the number does not fit into a 32-bit ''char''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: (attr char) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number)        <span class="keywd">is</span> action <span class="stri">"CHR_ICONV3"</span>;


<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">char</span>: (attr char) <span class="op">varConv</span> (<span class="keywd">inout</span> <span class="type">integer</span>: number) <span class="keywd">is</span> action <span class="stri">"TYP_VARCONV"</span>;


<span class="comment">(**
 *  Successor of a character.
 *  @return char(ord(ch) + 1)
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: succ (<span class="op">in</span> <span class="type">char</span>: ch)                           <span class="keywd">is</span> action <span class="stri">"CHR_SUCC"</span>;


<span class="comment">(**
 *  Predecessor of a character.
 *  @return char(ord(ch) - 1)
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: pred (<span class="op">in</span> <span class="type">char</span>: ch)                           <span class="keywd">is</span> action <span class="stri">"CHR_PRED"</span>;


<span class="comment">(**
 *  Create a string with one character.
 *  @return a string with the character ''ch''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">char</span>: ch)                          <span class="keywd">is</span> action <span class="stri">"CHR_STR"</span>;


<span class="comment">(**
 *  Convert a character to upper case.
 *  The conversion uses the default Unicode case mapping,
 *  where each character is considered in isolation.
 *  Characters without case mapping are left unchanged.
 *  The mapping is independent from the locale. Individual
 *  character case mappings cannot be reversed, because some
 *  characters have multiple characters that map to them.
 *  @return the character converted to upper case.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: upper (<span class="op">in</span> <span class="type">char</span>: ch)                          <span class="keywd">is</span> action <span class="stri">"CHR_UP"</span>;


<span class="comment">(**
 *  Convert a character to lower case.
 *  The conversion uses the default Unicode case mapping,
 *  where each character is considered in isolation.
 *  Characters without case mapping are left unchanged.
 *  The mapping is independent from the locale. Individual
 *  character case mappings cannot be reversed, because some
 *  characters have multiple characters that map to them.
 *  @return the character converted to lower case.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: lower (<span class="op">in</span> <span class="type">char</span>: ch)                          <span class="keywd">is</span> action <span class="stri">"CHR_LOW"</span>;


<span class="comment">(**
 *  Determines if the specified character ''ch'' is a letter.
 *  A character is considered to be a letter if the category
 *  from the Unicode specification is any of the following:
 *  * UPPERCASE_LETTER (Lu)
 *  * LOWERCASE_LETTER (Ll)
 *  * TITLECASE_LETTER (Lt)
 *  * MODIFIER_LETTER  (Lm)
 *  * OTHER_LETTER     (Lo)
 *  Examples:
 *   isLetter('A')          returns TRUE
 *   isLetter('\16#4e2d;')  returns TRUE
 *   isLetter('4')          returns FALSE
 *   isLetter('+')          returns FALSE
 *   isLetter('\t')         returns FALSE
 *   isLetter(KEY_LEFT)     returns FALSE
 *   isLetter(EOF)          returns FALSE
 *  @return TRUE if ''ch'' is a letter,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isLetter (<span class="op">in</span> <span class="type">char</span>: ch)                    <span class="keywd">is</span> action <span class="stri">"CHR_IS_LETTER"</span>;


<span class="comment">(**
 *  Number of screen columns occupied by the Unicode character ''ch''.
 *  Non-spacing characters and control characters have width of 0.
 *   width('\n')         returns 0
 *   width('\t')         returns 0
 *   width(KEY_LEFT)     returns 0
 *   width(EOF)          returns 0
 *   width('A')          returns 1
 *   width('\16#4e2d;')  returns 2
 *  @return 0,1 or 2 depending on the width occupied on a terminal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">char</span>: ch)                       <span class="keywd">is</span> action <span class="stri">"CHR_WIDTH"</span>;


<span class="comment">(**
 *  Increment a character.
 *  This is equivalent to:
 *   ch := succ(ch);
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: incr (<span class="keywd">inout</span> <span class="type">char</span>: ch)                             <span class="keywd">is</span> action <span class="stri">"CHR_INCR"</span>;


<span class="comment">(**
 *  Decrement a character.
 *  This is equivalent to:
 *   ch := pred(ch);
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: decr (<span class="keywd">inout</span> <span class="type">char</span>: ch)                             <span class="keywd">is</span> action <span class="stri">"CHR_DECR"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: c_literal (<span class="op">in</span> <span class="type">char</span>: ch)                    <span class="keywd">is</span> action <span class="stri">"CHR_CLIT"</span>;


<span class="comment">(**
 *  Compute pseudo-random character in the range [low, high].
 *  The random values are uniform distributed.
 *  @return a random character such that low &lt;= rand(low, high) and
 *          rand(low, high) &lt;= high holds.
 *  @exception RANGE_ERROR The range is empty (low > high holds).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: rand (<span class="op">in</span> <span class="type">char</span>: low, <span class="op">in</span> <span class="type">char</span>: high) <span class="keywd">is</span>
  <span class="keywd">return</span> char(rand(ord(low), ord(high)));


<span class="comment">(**
 *  Character representing end-of-file.
 *  EOF is not an Unicode character.
 *)</span>
<span class="keywd">const</span> <span class="type">char</span>: EOF <span class="keywd">is</span> char(-1);


<span class="comment">(**
 *  Convert a [[string]] with a length of 1 to a character.
 *   char parse "a"   returns 'a'
 *   char parse " "   returns ' '
 *   char parse "aa"  raises RANGE_ERROR
 *   char parse "  "  raises RANGE_ERROR
 *   char parse ""    raises RANGE_ERROR
 *  @return the first character of the [[string]].
 *  @exception RANGE_ERROR If the length of the string is not 1.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: (attr char) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Convert a [[string]] with a length of 1 to a character.
 *   char("a")   returns 'a'
 *   char(" ")   returns ' '
 *   char("aa")  raises RANGE_ERROR
 *   char("  ")  raises RANGE_ERROR
 *   char("")    raises RANGE_ERROR
 *  @return the first character of the [[string]].
 *  @exception RANGE_ERROR If the length of the string is not 1.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: char (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> char <span class="op">parse</span> stri;


<span class="comment">(**
 *  Trim a string such that it can be converted to ''char''.
 *   trimValue(char, " 1 ")             returns "1"
 *   trimValue(char, "   ")             returns " "
 *   trimValue(char, "\t ")             returns "\t"
 *   trimValue(char, "")                returns ""
 *   char parse trimValue(char, " 1 ")  returns '1'
 *   char parse trimValue(char, "   ")  returns ' '
 *   char parse trimValue(char, "\t ")  returns '\t'
 *   char parse trimValue(char, "")     raises RANGE_ERROR
 *  @return the trimmed string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: trimValue (attr char, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Conversion to a ''char'' literal.
 *  @return the character literal of ''ch''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span> <span class="keywd">forward</span>;


DECLARE_TERNARY(char);
</pre>
</body>
</html>
