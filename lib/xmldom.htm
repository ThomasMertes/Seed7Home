<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  xmldom.s7i    XML dom parser                                    *)</span>
<span class="comment">(*  Copyright (C) 2009, 2010, 2012, 2015, 2021  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/scanfile.htm">scanfile.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/xml_ent.htm">xml_ent.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/strifile.htm">strifile.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/html_ent.htm">html_ent.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/html.htm">html.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">type</span>: attrHashType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">string</span>;


<span class="comment">(**
 *  Interface type to represent XML nodes.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: xmlNode <span class="keywd">is</span> sub object interface;


<span class="comment">(**
 *  Get the value of a specified attribute.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getAttrValue (<span class="op">in</span> <span class="type">xmlNode</span>: aNode, <span class="op">in</span> <span class="type">string</span>: attrName) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the attributes of a node as hash table.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">attrHashType</span>: getAttributes (<span class="op">in</span> <span class="type">xmlNode</span>: aNode)               <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the sub-nodes of a given node.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">xmlNode</span>: getSubNodes (<span class="op">in</span> <span class="type">xmlNode</span>: aNode)                <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Get the content of a given node.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getContent (<span class="op">in</span> <span class="type">xmlNode</span>: aNode)                        <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">proc</span>: writeXml (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">xmlNode</span>: aNode)            <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">string</span>:        (<span class="op">in</span> <span class="type">xmlNode</span>: aNode) . name                  <span class="keywd">is</span> DYNAMIC;
<span class="comment"># const varfunc attrHashType: (in xmlNode: aNode) . attributes           is DYNAMIC;</span>


<span class="keywd">const</span> <span class="type">proc</span>: writeXml (<span class="op">in</span> <span class="type">xmlNode</span>: aNode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeXml(OUT, aNode);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Base implementation type for xmlNode.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: xmlBaseNode <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: dummy <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(xmlBaseNode, xmlNode);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">xmlNode</span>: getSubNodes (<span class="op">in</span> <span class="type">xmlBaseNode</span>: aBaseNode) <span class="keywd">is</span>
  <span class="keywd">return</span> (<span class="type">array</span> <span class="type">xmlNode</span>).value;

<span class="keywd">const</span> <span class="type">proc</span>: writeXml (<span class="keywd">inout</span> <span class="type">external_file</span>: outFile, <span class="op">in</span> <span class="type">xmlBaseNode</span>: aBaseNode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(outFile, <span class="stri">"xmlBaseNode"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">xmlBaseNode</span>: NULL_XML_NODE <span class="keywd">is</span> xmlBaseNode.value;
<span class="keywd">const</span> <span class="type">xmlNode</span>: (attr xmlNode) . value <span class="keywd">is</span> NULL_XML_NODE;


<span class="comment">(**
 *  xmlNode implementation type representing text content.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: xmlText <span class="keywd">is</span> sub xmlBaseNode <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: content <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(xmlText, xmlNode);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getContent (<span class="op">in</span> <span class="type">xmlText</span>: aText) <span class="keywd">is</span>
  <span class="keywd">return</span> aText.content;

<span class="keywd">const</span> <span class="type">proc</span>: writeXml (<span class="keywd">inout</span> <span class="type">external_file</span>: outFile, <span class="op">in</span> <span class="type">xmlText</span>: aText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> aText.content <span class="keywd">do</span>
      <span class="keywd">if</span> ch = <span class="stri">'&lt;'</span> <span class="keywd">then</span>
        write(<span class="stri">"&amp;lt;"</span>);
      <span class="keywd">elsif</span> ch = <span class="stri">'&amp;'</span> <span class="keywd">then</span>
        write(<span class="stri">"&amp;amp;"</span>);
      <span class="keywd">else</span>
        write(ch);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    writeln(outFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  xmlNode implementation type representing an XML element.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: xmlElement <span class="keywd">is</span> sub xmlBaseNode <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">attrHashType</span>: attributes <span class="keywd">is</span> attrHashType.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(xmlElement, xmlNode);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getAttrValue (<span class="op">in</span> <span class="type">xmlElement</span>: anElement, <span class="op">in</span> <span class="type">string</span>: attrName) <span class="keywd">is</span>
  <span class="keywd">return</span> anElement.attributes[attrName];

<span class="keywd">const</span> <span class="type">func</span> <span class="type">attrHashType</span>: getAttributes (<span class="op">in</span> <span class="type">xmlElement</span>: anElement) <span class="keywd">is</span>
  <span class="keywd">return</span> anElement.attributes;

<span class="keywd">const</span> <span class="type">proc</span>: writeXml (<span class="keywd">inout</span> <span class="type">external_file</span>: outFile, <span class="op">in</span> <span class="type">xmlElement</span>: anElement) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: attributeName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: attributeValue <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    write(outFile, <span class="stri">"&lt;"</span> &lt;&amp; anElement.name);
    <span class="keywd">for</span> attributeName <span class="keywd">range</span> sort(keys(anElement.attributes)) <span class="keywd">do</span>
      attributeValue := anElement.attributes[attributeName];
      write(outFile, <span class="stri">" "</span> &lt;&amp; attributeName &lt;&amp; <span class="stri">"="</span> &lt;&amp; literal(attributeValue));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    writeln(outFile, <span class="stri">" />"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  xmlNode implementation type representing an XML element with subnodes.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: xmlContainer <span class="keywd">is</span> sub xmlElement <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">xmlNode</span>: subNodes <span class="keywd">is</span> 0 <span class="op">times</span> xmlNode.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(xmlContainer, xmlNode);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">xmlNode</span>: getSubNodes (<span class="op">in</span> <span class="type">xmlContainer</span>: aContainer) <span class="keywd">is</span>
  <span class="keywd">return</span> aContainer.subNodes;

<span class="keywd">const</span> <span class="type">proc</span>: writeXml (<span class="keywd">inout</span> <span class="type">external_file</span>: outFile, <span class="op">in</span> <span class="type">xmlContainer</span>: aContainer) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: attributeName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: attributeValue <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">xmlNode</span>: subNode <span class="keywd">is</span> xmlNode.value;
  <span class="keywd">begin</span>
    write(outFile, <span class="stri">"&lt;"</span> &lt;&amp; aContainer.name);
    <span class="keywd">for</span> attributeName <span class="keywd">range</span> sort(keys(aContainer.attributes)) <span class="keywd">do</span>
      attributeValue := aContainer.attributes[attributeName];
      write(outFile, <span class="stri">" "</span> &lt;&amp; attributeName &lt;&amp; <span class="stri">"="</span> &lt;&amp; literal(attributeValue));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    writeln(outFile, <span class="stri">">"</span>);
    <span class="keywd">for</span> subNode <span class="keywd">range</span> aContainer.subNodes <span class="keywd">do</span>
      <span class="comment"># TRACE_OBJ(subNode);</span>
      writeXml(outFile, subNode);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    writeln(outFile, <span class="stri">"&lt;/"</span> &lt;&amp; aContainer.name &lt;&amp; <span class="stri">">"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">#</span>
<span class="comment"># Read functions for XML</span>
<span class="comment">#</span>

<span class="keywd">const</span> <span class="type">func</span> <span class="type">xmlNode</span>: readXmlNode (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">string</span>: symbol) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">xmlNode</span>: node <span class="keywd">is</span> xmlNode.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">xmlContainer</span>: containerElement <span class="keywd">is</span> xmlContainer.value;
    <span class="keywd">var</span> <span class="type">xmlElement</span>: emptyElement <span class="keywd">is</span> xmlElement.value;
    <span class="keywd">var</span> <span class="type">xmlText</span>: currentText <span class="keywd">is</span> xmlText.value;
    <span class="keywd">var</span> <span class="type">string</span>: attributeName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: attributeValue <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: endTagHead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="comment"># write(symbol);</span>
    <span class="keywd">if</span> startsWith(symbol, <span class="stri">"&lt;"</span>) <span class="keywd">then</span>
      containerElement.name := symbol[2 ..];
      getNextXmlAttribute(inFile, attributeName, attributeValue);
      <span class="keywd">while</span> attributeName &lt;> <span class="stri">""</span> <span class="keywd">do</span>
        <span class="comment"># write(" " &lt;&amp; attributeName &lt;&amp; "=" &lt;&amp; literal(attributeValue));</span>
        containerElement.attributes @:= [attributeName]
            decodeXmlEntities(attributeValue, predeclaredXmlEntities);
        getNextXmlAttribute(inFile, attributeName, attributeValue);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">if</span> attributeValue = <span class="stri">"/>"</span> <span class="keywd">then</span>
        <span class="comment"># The XML tag ends with /></span>
        <span class="comment"># writeln("/>");</span>
        emptyElement.name := containerElement.name;
        emptyElement.attributes := containerElement.attributes;
        node := toInterface(emptyElement);
      <span class="keywd">elsif</span> attributeValue = <span class="stri">">"</span> <span class="keywd">then</span>
        <span class="comment"># The XML tag ends with ></span>
        <span class="comment"># writeln(">");</span>
        endTagHead := <span class="stri">"&lt;/"</span> &amp; containerElement.name;
        symbol := getXmlTagHeadOrContent(inFile);
        <span class="keywd">while</span> symbol &lt;> <span class="stri">""</span> <span class="op">and</span> symbol &lt;> endTagHead <span class="keywd">do</span>
          containerElement.subNodes &amp;:= [] (readXmlNode(inFile, symbol));
          symbol := getXmlTagHeadOrContent(inFile);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">if</span> symbol = endTagHead <span class="keywd">then</span>
          skipXmlTag(inFile);
          <span class="comment"># writeln(symbol &lt;&amp; ">");</span>
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> length(containerElement.subNodes) = 0 <span class="keywd">then</span>
          <span class="comment"># There are no subnodes: Create empty element</span>
          emptyElement.name := containerElement.name;
          emptyElement.attributes := containerElement.attributes;
          node := toInterface(emptyElement);
        <span class="keywd">else</span>
          node := toInterface(containerElement);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="comment"># writeln("content=" &lt;&amp; literal(symbol));</span>
      currentText.content := decodeXmlEntities(symbol, predeclaredXmlEntities);
      node := toInterface(currentText);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="comment"># TRACE_OBJ(node); writeln;</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read an XML file.
 *  @return an xmlNode containing the contents of the XML file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">xmlNode</span>: readXml (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">xmlNode</span>: node <span class="keywd">is</span> xmlNode.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: symbol <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    symbol := getXmlTagHeadOrContent(inFile);
    <span class="keywd">while</span> startsWith(symbol, <span class="stri">"&lt;?"</span>) <span class="keywd">do</span>
      skipXmlTag(inFile);
      symbol := getXmlTagHeadOrContent(inFile);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    node := readXmlNode(inFile, symbol);
    <span class="comment"># TRACE_OBJ(node); writeln;</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read XML data from a string.
 *  @return an xmlNode containing the contents of the XML string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">xmlNode</span>: readXml (<span class="op">in</span> <span class="type">string</span>: xmlStri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">xmlNode</span>: node <span class="keywd">is</span> xmlNode.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: xmlFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    xmlFile := openStriFile(xmlStri);
    node := readXml(xmlFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">xmlNode</span>: nodeVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">xmlNode</span>: parent) <span class="keywd">do</span>
              (<span class="keywd">ref</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span>                               <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">for</span> nodeVar <span class="keywd">range</span> getSubNodes(parent) <span class="keywd">do</span>
      statements;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
