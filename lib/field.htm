<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  field.s7i     Filter file which reads the input fieldwise       *)</span>
<span class="comment">(*  Copyright (C) 1992, 1993, 1994, 2005  Thomas Mertes             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/text.htm">text.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/keybd.htm">keybd.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">type</span>: field_file <span class="keywd">is</span> <span class="keywd">sub</span> null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">file</span>: in_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">text</span>: out_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: linePos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: columnPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: defaultValue <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: field <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(field_file, file);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openField (<span class="op">in</span> <span class="type">file</span>: in_fil, <span class="keywd">inout</span> <span class="type">text</span>: out_fil,
    <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">string</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">field_file</span>: field_fil <span class="keywd">is</span> field_file.value;
  <span class="keywd">begin</span>
    field_fil := field_file.value;
    field_fil.in_file := in_fil;
    field_fil.out_file := out_fil;
    field_fil.linePos := line;
    field_fil.columnPos := column;
    field_fil.width := width;
    field_fil.field := (defaultValue &amp; <span class="stri">" "</span> <span class="op">mult</span> width)[ .. width];
    setPos(out_fil, line, column);
    write(out_fil, defaultValue[.. width]);
    newFile := toInterface(field_fil);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">field_file</span>: field_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: input_done <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    field_fil.column := 1;
    <span class="keywd">repeat</span>
      setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos + field_fil.column - 1);
      ch := getc(field_fil.in_file);
      <span class="keywd">case</span> ch <span class="keywd">of</span>
        <span class="keywd">when</span> {KEY_LEFT}:
          <span class="keywd">if</span> field_fil.column > 1 <span class="keywd">then</span>
            decr(field_fil.column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_RIGHT}:
          <span class="keywd">if</span> field_fil.column &lt; field_fil.width <span class="keywd">then</span>
            incr(field_fil.column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_BS}:
          <span class="keywd">if</span> field_fil.column = field_fil.width <span class="op">and</span> field_fil.field[field_fil.width] &lt;> <span class="stri">' '</span> <span class="keywd">then</span>
            field_fil.field @:= [field_fil.column] <span class="stri">' '</span>;
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos + field_fil.column - 1);
            write(field_fil.out_file, <span class="stri">' '</span>);
          <span class="keywd">elsif</span> field_fil.column > 1 <span class="keywd">then</span>
            decr(field_fil.column);
            field_fil.field @:= [field_fil.column] <span class="stri">' '</span>;
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos + field_fil.column - 1);
            write(field_fil.out_file, <span class="stri">' '</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_DEL}:
          field_fil.field @:= [field_fil.column] <span class="stri">' '</span>;
          write(field_fil.out_file, <span class="stri">' '</span>);
        <span class="keywd">when</span> {<span class="stri">' '</span> .. <span class="stri">'~'</span>}:
          <span class="keywd">if</span> <span class="op">not</span> input_done <span class="op">and</span> field_fil.column = 1 <span class="keywd">then</span>
            field_fil.field := <span class="stri">" "</span> <span class="op">mult</span> field_fil.width;
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos);
            write(field_fil.out_file, <span class="stri">" "</span> <span class="op">mult</span> field_fil.width);
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos);
            input_done := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          field_fil.field @:= [field_fil.column] ch;
          write(field_fil.out_file, ch);
          <span class="keywd">if</span> field_fil.column &lt; field_fil.width <span class="keywd">then</span>
            incr(field_fil.column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">until</span> ch <span class="op">in</span> {KEY_NL, KEY_TAB, KEY_BACKTAB, KEY_UP, KEY_DOWN, KEY_ESC};
    stri := field_fil.field;
    <span class="keywd">while</span> length(stri) >= 1 <span class="op">and</span> stri[1] = <span class="stri">' '</span> <span class="keywd">do</span>
      stri := stri[2 ..];
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">while</span> length(stri) >= 1 <span class="op">and</span> stri[length(stri)] = <span class="stri">' '</span> <span class="keywd">do</span>
      stri := stri[.. pred(length(stri))];
    <span class="keywd">end</span> <span class="keywd">while</span>;
    field_fil.bufferChar := ch;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">field_file</span>: field_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: input_done <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    field_fil.column := 1;
    <span class="keywd">repeat</span>
      setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos + field_fil.column - 1);
      ch := getc(field_fil.in_file);
      <span class="keywd">case</span> ch <span class="keywd">of</span>
        <span class="keywd">when</span> {KEY_LEFT}:
          <span class="keywd">if</span> field_fil.column > 1 <span class="keywd">then</span>
            decr(field_fil.column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_RIGHT}:
          <span class="keywd">if</span> field_fil.column &lt; field_fil.width <span class="keywd">then</span>
            incr(field_fil.column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_BS}:
          <span class="keywd">if</span> field_fil.column = field_fil.width <span class="op">and</span> field_fil.field[field_fil.width] &lt;> <span class="stri">' '</span> <span class="keywd">then</span>
            field_fil.field @:= [field_fil.column] <span class="stri">' '</span>;
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos + field_fil.column - 1);
            write(field_fil.out_file, <span class="stri">' '</span>);
          <span class="keywd">elsif</span> field_fil.column > 1 <span class="keywd">then</span>
            decr(field_fil.column);
            field_fil.field @:= [field_fil.column] <span class="stri">' '</span>;
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos + field_fil.column - 1);
            write(field_fil.out_file, <span class="stri">' '</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_DEL}:
          field_fil.field @:= [field_fil.column] <span class="stri">' '</span>;
          write(field_fil.out_file, <span class="stri">' '</span>);
        <span class="keywd">when</span> {<span class="stri">' '</span> .. <span class="stri">'~'</span>}:
          <span class="keywd">if</span> <span class="op">not</span> input_done <span class="op">and</span> field_fil.column = 1 <span class="keywd">then</span>
            field_fil.field := <span class="stri">" "</span> <span class="op">mult</span> field_fil.width;
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos);
            write(field_fil.out_file, <span class="stri">" "</span> <span class="op">mult</span> field_fil.width);
            setPos(field_fil.out_file, field_fil.linePos, field_fil.columnPos);
            input_done := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          field_fil.field @:= [field_fil.column] ch;
          write(field_fil.out_file, ch);
          <span class="keywd">if</span> field_fil.column &lt; field_fil.width <span class="keywd">then</span>
            incr(field_fil.column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">until</span> ch <span class="op">in</span> {KEY_NL, KEY_TAB, KEY_BACKTAB, KEY_UP, KEY_DOWN, KEY_ESC};
    stri := field_fil.field;
    field_fil.bufferChar := ch;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">field_file</span>: field_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field_fil.field = <span class="stri">""</span> <span class="keywd">then</span>
      field_fil.field := getln(field_fil) &amp; <span class="stri">"\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    ch := field_fil.field[1];
    field_fil.field := field_fil.field[2 .. ];
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="keywd">inout</span> <span class="type">field_file</span>: field_fil, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> length(field_fil.field) &lt; length <span class="keywd">do</span>
      field_fil.field &amp;:= getln(field_fil) &amp; <span class="stri">"\n"</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    stri := field_fil.field[ .. length];
    field_fil.field := field_fil.field[succ(length) .. ];
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
