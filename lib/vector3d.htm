<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  vector3d.s7i  3D vector support library                         *)</span>
<span class="comment">(*  Copyright (C) 2008  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  3D vectors represented with [[float]] values for the three dimensions.
 *  3D vector literals do not exist.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: vector3d <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">float</span>: x <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: y <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: z <span class="keywd">is</span> 0.0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Create a 3D vector from its x, y and z values.
 *  @return the created 3D vector.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: vector3d (<span class="op">in</span> <span class="type">float</span>: x, <span class="op">in</span> <span class="type">float</span>: y, <span class="op">in</span> <span class="type">float</span>: z) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: vect <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    vect.x := x;
    vect.y := y;
    vect.z := z;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Check if two 3D vectors are equal.
 *  @return TRUE if both 3D vectors are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">vector3d</span>: a) = (<span class="op">in</span> <span class="type">vector3d</span>: b) <span class="keywd">is</span>
  <span class="keywd">return</span> a.x = b.x <span class="op">and</span> a.y = b.y <span class="op">and</span> a.z = b.z;


<span class="comment">(**
 *  Check if two 3D vectors are not equal.
 *  @return FALSE if both 3D vectors are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">vector3d</span>: a) &lt;> (<span class="op">in</span> <span class="type">vector3d</span>: b) <span class="keywd">is</span>
  <span class="keywd">return</span> a.x &lt;> b.x <span class="op">or</span> a.y &lt;> b.y <span class="op">or</span> a.z &lt;> b.z;


<span class="comment">(**
 *  Minus sign, negate a 3D vector.
 *  @return the negated value of the 3D vector.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: - (<span class="op">in</span> <span class="type">vector3d</span>: a) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: negated <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    negated.x := -a.x;
    negated.y := -a.y;
    negated.z := -a.z;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Add two 3D vectors.
 *  @return the sum of the two 3D vectors.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: (<span class="op">in</span> <span class="type">vector3d</span>: a) + (<span class="op">in</span> <span class="type">vector3d</span>: b) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: sum <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    sum.x := a.x + b.x;
    sum.y := a.y + b.y;
    sum.z := a.z + b.z;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Subtract two 3D vectors.
 *  @return the difference of the two 3D vectors.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: (<span class="op">in</span> <span class="type">vector3d</span>: a) - (<span class="op">in</span> <span class="type">vector3d</span>: b) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: difference <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    difference.x := a.x - b.x;
    difference.y := a.y - b.y;
    difference.z := a.z - b.z;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Multiply a 3D vector with a [[float]] number.
 *  @return the product of the multiplication.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: (<span class="op">in</span> <span class="type">vector3d</span>: v) * (<span class="op">in</span> <span class="type">float</span>: num) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: product <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    product.x := v.x * num;
    product.y := v.y * num;
    product.z := v.z * num;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Divide a 3D vector by a [[float]] number.
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: (<span class="op">in</span> <span class="type">vector3d</span>: v) / (<span class="op">in</span> <span class="type">float</span>: num) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: quotient <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    quotient.x := v.x / num;
    quotient.y := v.y / num;
    quotient.z := v.z / num;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Increment a 3D vector by a [[float]] delta.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">vector3d</span>: vect) +:= (<span class="op">in</span> <span class="type">float</span>: delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    vect.x +:= delta;
    vect.y +:= delta;
    vect.z +:= delta;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decrement a 3D vector by a [[float]] delta.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">vector3d</span>: vect) -:= (<span class="op">in</span> <span class="type">float</span>: delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    vect.x -:= delta;
    vect.y -:= delta;
    vect.z -:= delta;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Multiply a 3D vector by a [[float]] factor and assign the result back.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">vector3d</span>: vect) *:= (<span class="op">in</span> <span class="type">float</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    vect.x *:= number;
    vect.y *:= number;
    vect.z *:= number;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Divide a 3D vector by a [[float]] factor and assign the result back.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">vector3d</span>: vect) /:= (<span class="op">in</span> <span class="type">float</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    vect.x /:= number;
    vect.y /:= number;
    vect.z /:= number;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the absolute value of a 3D vector.
 *  @return the absolute value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: abs (<span class="op">in</span> <span class="type">vector3d</span>: v) <span class="keywd">is</span>
  <span class="keywd">return</span> sqrt(v.x ** 2 + v.y ** 2 + v.z ** 2);


<span class="comment">(**
 *  Compute the square of the absolute value of a 3D vector.
 *  @return the square of the absolute value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: sqrAbs (<span class="op">in</span> <span class="type">vector3d</span>: v) <span class="keywd">is</span>
  <span class="keywd">return</span> v.x ** 2 + v.y ** 2 + v.z ** 2;


<span class="comment">(**
 *  Inner product of two 3D vectors.
 *  @return the inner product of the two 3D vectors.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: dot (<span class="op">in</span> <span class="type">vector3d</span>: a, <span class="op">in</span> <span class="type">vector3d</span>: b) <span class="keywd">is</span>
  <span class="keywd">return</span> a.x * b.x + a.y * b.y + a.z * b.z;


<span class="comment">(**
 *  Cross product of two 3D vectors.
 *  @return the cross product of the two 3D vectors.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: cross (<span class="op">in</span> <span class="type">vector3d</span>: a, <span class="op">in</span> <span class="type">vector3d</span>: b) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: product <span class="keywd">is</span> vector3d.value;
  <span class="keywd">begin</span>
    product.x := a.y * b.z - a.z * b.y;
    product.y := a.z * b.x - a.x * b.z;
    product.z := a.x * b.y - a.y * b.x;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reflect the vector ''vect'' at a surface defined by ''normal''.
 *  The surface is representing by its normal at the intersection point.
 *  @return the reflected vector.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: reflect (<span class="op">in</span> <span class="type">vector3d</span>: vect, <span class="op">in</span> <span class="type">vector3d</span>: normal) <span class="keywd">is</span>
  <span class="keywd">return</span> vect - normal * dot(normal, vect) * 2.0;


<span class="comment">(**
 *  Unit vector of a given 3D vector.
 *  @return the unit vector of the given 3D vector.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">vector3d</span>: unitVector (<span class="op">in</span> <span class="type">vector3d</span>: v) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">vector3d</span>: unitVector <span class="keywd">is</span> vector3d.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">float</span>: length <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    length := abs(v);
    unitVector.x := v.x / length;
    unitVector.y := v.y / length;
    unitVector.z := v.z / length;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compare two 3D vectors in lexicographic order.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">vector3d</span>: vect1, <span class="op">in</span> <span class="type">vector3d</span>: vect2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: signumValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    signumValue := compare(vect1.x, vect2.x);
    <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
      signumValue := compare(vect1.y, vect2.y);
      <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
        signumValue := compare(vect1.z, vect2.z);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the hash value of a 3D vector.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">vector3d</span>: vect) <span class="keywd">is</span>
  <span class="keywd">return</span> hashCode(vect.x) <span class="op">mod</span> 16#40000000 +
         hashCode(vect.y) <span class="op">mod</span> 16#40000000 +
         hashCode(vect.z) <span class="op">mod</span> 16#40000000;


<span class="comment">(**
 *  Convert a 3D vector to a [[string]].
 *  @return the string result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">vector3d</span>: a) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="stri">"("</span> &lt;&amp; a.x <span class="op">digits</span> 2 &lt;&amp; <span class="stri">", "</span> &lt;&amp; a.y <span class="op">digits</span> 2 &lt;&amp; <span class="stri">", "</span> &lt;&amp; a.z <span class="op">digits</span> 2 &lt;&amp; <span class="stri">")"</span>;


enable_output(vector3d);
</pre>
</body>
</html>
