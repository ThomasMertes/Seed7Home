<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  struct_elem.s7i  Type to describe an element of a struct.       *)</span>
<span class="comment">(*  Copyright (C) 2025  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Type to describe an element of a struct.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: structElement <span class="keywd">is</span> newtype;

IN_PARAM_IS_REFERENCE(structElement);

<span class="keywd">const</span> <span class="type">creator</span>: (<span class="keywd">ref</span> <span class="type">structElement</span>: dest) ::= (<span class="op">in</span> <span class="type">structElement</span>: source)        <span class="keywd">is</span> action <span class="stri">"SEL_CREATE"</span>;
<span class="keywd">const</span> <span class="type">destroyer</span>: destroy (<span class="keywd">ref</span> <span class="type">structElement</span>: anElement)                        <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structElement</span>: dest) := (<span class="op">in</span> <span class="type">structElement</span>: source)          <span class="keywd">is</span> action <span class="stri">"SEL_CPY"</span>;


<span class="comment">(**
 *  Convert a [[reference]] to a ''structElement''.
 *  @return the result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">structElement</span>: structElement (<span class="op">in</span> <span class="type">reference</span>: aReference)             <span class="keywd">is</span> action <span class="stri">"SEL_CONV1"</span>;


<span class="comment">(**
 *  Default value of ''structElement'' (NIL).
 *)</span>
<span class="keywd">const</span> <span class="type">structElement</span>: (attr structElement) . value                              <span class="keywd">is</span> structElement(NIL);


<span class="comment">(**
 *  Check if two ''structElement'' values are equal.
 *  @return TRUE if both values are equal, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">structElement</span>: elem1) = (<span class="op">in</span> <span class="type">structElement</span>: elem2)      <span class="keywd">is</span> action <span class="stri">"SEL_EQ"</span>;


<span class="comment">(**
 *  Check if two ''structElement'' values are not equal.
 *  @return FALSE if both values are equal, TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">structElement</span>: elem1) &lt;> (<span class="op">in</span> <span class="type">structElement</span>: elem2)     <span class="keywd">is</span> action <span class="stri">"SEL_NE"</span>;


<span class="comment">(**
 *  Compare two ''structElement'' values.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">structElement</span>: elem1, <span class="op">in</span> <span class="type">structElement</span>: elem2) <span class="keywd">is</span> action <span class="stri">"SEL_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a ''structElement''.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">structElement</span>: anElement)                     <span class="keywd">is</span> action <span class="stri">"SEL_HASHCODE"</span>;


<span class="comment">(**
 *  Get the name of a ''structElement''.
 *   getName(elements(rational)[1])   returns "numerator"
 *   getName(elements(rational)[2])   returns "denominator"
 *   getName(elements(null_file)[1])  returns "bufferChar"
 *  @return the the name of the given ''structElement''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getName (<span class="op">in</span> <span class="type">structElement</span>: anElement)                       <span class="keywd">is</span> action <span class="stri">"SEL_NAME"</span>;


<span class="comment">(**
 *  Get the type of a ''structElement''.
 *   getType(elements(rational)[1])   returns integer
 *   getType(elements(null_file)[1])  returns char
 *   getType(structElement.value)     raises RANGE_ERROR
 *  @return the type of the given ''structElement''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: getType (<span class="op">in</span> <span class="type">structElement</span>: anElement)                         <span class="keywd">is</span> action <span class="stri">"SEL_TYPE"</span>;


<span class="comment">(**
 *  Convert a ''structElement'' into a symbol parameter.
 *  This can be used to declare a function for a specific struct element:
 *   const func string: toJson (in dataType: dataStruct, symb anElement) is
 *     return toJson(dataStruct.element);
 *  @return a symbol parameter which corresponds to ''anElement''.
 *  @exception RANGE_ERROR If the parameter is structElement.value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">f_param</span>: symb (<span class="op">in</span> <span class="type">structElement</span>: anElement)                         <span class="keywd">is</span> action <span class="stri">"SEL_SYMB"</span>;


<span class="comment">(**
 *  Array of ''structElement''.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: structElementArray     <span class="keywd">is</span> <span class="type">array</span> <span class="type">[</span>1 ..] structElement;


<span class="comment">(**
 *  Get all struct elements from the given struct type ''aType''.
 *   elements(rational)  returns an array with two struct elements
 *   elements(boolean)   raises ILLEGAL_ACTION
 *  @return an array ''structElement'' describing all elements of the struct.
 *  @exception ILLEGAL_ACTION The type ''aType'' is not a struct type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">structElementArray</span>: elements (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> DYNAMIC;
</pre>
</body>
</html>
