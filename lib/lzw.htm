<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  lzw.s7i       Lempel-Ziv-Welch compression support library      *)</span>
<span class="comment">(*  Copyright (C) 2015, 2021, 2022  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bitdata.htm">bitdata.s7i</a>"</span>;


<span class="comment">(**
 *  Compress a string with the Lempel-Ziv-Welch (LZW) compression method.
 *  The packing order of bits in bytes is LSB-First (Least Significant
 *  Bit First). This compression method is used for [[gif|GIF]] files. Compressing
 *  starts with succ(''codeSize'') bits per coding point and goes up to
 *  12 bits per coding point. The code points 0 to pred(2 ** ''codeSize'')
 *  correspond to unchanged data. Code 2 ** ''codeSize'' starts a new
 *  block with a new table and succ(''codeSize'') bits per code point.
 *  Code succ(2 ** ''codeSize'') marks the end of the compressed data.
 *  @param uncompressed Data to be compressed
 *  @param codeSize Number of bits used by the uncompressed data.
 *  @return Compressed byte string of the ''uncompressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwCompressLsb (<span class="op">in</span> <span class="type">string</span>: uncompressed, <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: compressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">lsbOutBitStream</span>: compressedStream <span class="keywd">is</span> lsbOutBitStream.value;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>: mydict <span class="keywd">is</span> (<span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>).value;
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: xstr <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToWrite <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToWrite := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    endOfInformationCode := succ(clearCode);
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      mydict @:= [str(char(code))] code;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    putBits(compressedStream, clearCode, bitsToWrite);
    bitsToWrite := succ(codeSize);
    moreBitsNeeded := 1 &lt;&lt; bitsToWrite;
    <span class="keywd">for</span> ch <span class="keywd">range</span> uncompressed <span class="keywd">do</span>
      xstr := buffer &amp; str(ch);
      <span class="keywd">if</span> xstr <span class="op">in</span> mydict <span class="keywd">then</span>
        buffer &amp;:= str(ch)
      <span class="keywd">else</span>
        putBits(compressedStream, mydict[buffer], bitsToWrite);
        code := length(mydict) + 2;
        mydict @:= [xstr] code;
        <span class="keywd">if</span> code = moreBitsNeeded <span class="keywd">then</span>
          <span class="keywd">if</span> bitsToWrite = 12 <span class="keywd">then</span>
            mydict := (<span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>).value;
            <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
              mydict @:= [str(char(code))] code;
            <span class="keywd">end</span> <span class="keywd">for</span>;
            putBits(compressedStream, clearCode, bitsToWrite);
            bitsToWrite := succ(codeSize);
          <span class="keywd">else</span>
            incr(bitsToWrite);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          moreBitsNeeded := 1 &lt;&lt; bitsToWrite;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        buffer := str(ch);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      putBits(compressedStream, mydict[buffer], bitsToWrite);
      <span class="keywd">if</span> length(mydict) + 2 = moreBitsNeeded <span class="keywd">then</span>
        <span class="keywd">if</span> bitsToWrite = 12 <span class="keywd">then</span>
          putBits(compressedStream, clearCode, bitsToWrite);
          bitsToWrite := succ(codeSize);
        <span class="keywd">else</span>
          incr(bitsToWrite);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    putBits(compressedStream, endOfInformationCode, bitsToWrite);
    flush(compressedStream);
    compressed := getBytes(compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed [[bitdata#lsbInBitStream|lsbInBitStream]].
 *  The packing order of bits in bytes is LSB-First (Least Significant
 *  Bit First). This compression method is used for [[gif|GIF]] files. Decompressing
 *  starts with succ(''codeSize'') bits per coding point and goes up to
 *  12 bits per coding point. The code points 0 to pred(2 ** ''codeSize'')
 *  correspond to unchanged data. Code 2 ** ''codeSize'' starts a new
 *  block with a new table and succ(''codeSize'') bits per code point.
 *  Code succ(2 ** ''codeSize'') marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompress (<span class="keywd">inout</span> <span class="type">lsbInBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: maxTableIndex <span class="keywd">is</span> 4095;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToRead <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: previousCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: table <span class="keywd">is</span> [0 .. maxTableIndex] <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: nextTableIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToRead := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      table[code] := str(char(code));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    endOfInformationCode := succ(clearCode);
    nextTableIndex := succ(endOfInformationCode);
    moreBitsNeeded := 1 &lt;&lt; bitsToRead;
    previousCode := clearCode;
    code := getBits(compressedStream, bitsToRead);
    <span class="keywd">while</span> code &lt;> endOfInformationCode <span class="keywd">do</span>
      <span class="keywd">if</span> code = clearCode <span class="keywd">then</span>
        bitsToRead := succ(codeSize);
        nextTableIndex := succ(endOfInformationCode);
        moreBitsNeeded := 1 &lt;&lt; bitsToRead;
      <span class="keywd">elsif</span> previousCode = clearCode <span class="keywd">then</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          decompressed &amp;:= table[code];
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[code][1]);
            incr(nextTableIndex);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          decompressed &amp;:= table[code];
        <span class="keywd">elsif</span> code = nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[previousCode][1]);
            incr(nextTableIndex);
            decompressed &amp;:= table[code];
          <span class="keywd">else</span>
            decompressed &amp;:= table[previousCode] &amp; str(table[previousCode][1]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> nextTableIndex = moreBitsNeeded <span class="keywd">then</span>
          incr(bitsToRead);
          <span class="keywd">if</span> bitsToRead &lt; 12 <span class="keywd">then</span>
            moreBitsNeeded := 1 &lt;&lt; bitsToRead;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      previousCode := code;
      code := getBits(compressedStream, bitsToRead);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed string.
 *  The packing order of bits in bytes is LSB-First (Least Significant
 *  Bit First). This compression method is used for [[gif|GIF]] files. Decompressing
 *  starts with succ(''codeSize'') bits per coding point and goes up to
 *  12 bits per coding point. The code points 0 to pred(2 ** ''codeSize'')
 *  correspond to unchanged data. Code 2 ** ''codeSize'' starts a new
 *  block with a new table and succ(''codeSize'') bits per code point.
 *  Code succ(2 ** ''codeSize'') marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompressLsb (<span class="op">in</span> <span class="type">string</span>: compressed, <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">lsbInBitStream</span>: compressedStream <span class="keywd">is</span> lsbInBitStream.value;
  <span class="keywd">begin</span>
    compressedStream := openLsbInBitStream(compressed);
    decompressed := lzwDecompress(compressedStream, codeSize);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compress a string with the Lempel-Ziv-Welch (LZW) compression method.
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression method is used in PDF files.
 *  Compressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param uncompressed Data to be compressed
 *  @param codeSize Number of bits used by the uncompressed data.
 *  @return Compressed byte string of the ''uncompressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwCompressMsb (<span class="op">in</span> <span class="type">string</span>: uncompressed, <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: compressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">msbOutBitStream</span>: compressedStream <span class="keywd">is</span> msbOutBitStream.value;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>: mydict <span class="keywd">is</span> (<span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>).value;
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: xstr <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToWrite <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToWrite := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    endOfInformationCode := succ(clearCode);
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      mydict @:= [str(char(code))] code;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    putBits(compressedStream, clearCode, bitsToWrite);
    bitsToWrite := succ(codeSize);
    moreBitsNeeded := 1 &lt;&lt; bitsToWrite;
    <span class="keywd">for</span> ch <span class="keywd">range</span> uncompressed <span class="keywd">do</span>
      xstr := buffer &amp; str(ch);
      <span class="keywd">if</span> xstr <span class="op">in</span> mydict <span class="keywd">then</span>
        buffer &amp;:= str(ch)
      <span class="keywd">else</span>
        putBits(compressedStream, mydict[buffer], bitsToWrite);
        code := length(mydict) + 2;
        mydict @:= [xstr] code;
        <span class="keywd">if</span> code = moreBitsNeeded <span class="keywd">then</span>
          <span class="keywd">if</span> bitsToWrite = 12 <span class="keywd">then</span>
            mydict := (<span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>).value;
            <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
              mydict @:= [str(char(code))] code;
            <span class="keywd">end</span> <span class="keywd">for</span>;
            putBits(compressedStream, clearCode, bitsToWrite);
            bitsToWrite := succ(codeSize);
          <span class="keywd">else</span>
            incr(bitsToWrite);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          moreBitsNeeded := 1 &lt;&lt; bitsToWrite;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        buffer := str(ch);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      putBits(compressedStream, mydict[buffer], bitsToWrite);
      <span class="keywd">if</span> length(mydict) + 2 = moreBitsNeeded <span class="keywd">then</span>
        <span class="keywd">if</span> bitsToWrite = 12 <span class="keywd">then</span>
          putBits(compressedStream, clearCode, bitsToWrite);
          bitsToWrite := succ(codeSize);
        <span class="keywd">else</span>
          incr(bitsToWrite);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    putBits(compressedStream, endOfInformationCode, bitsToWrite);
    flush(compressedStream);
    compressed := getBytes(compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed [[bitdata#msbInBitStream|msbInBitStream]].
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression  method is used in PDF files.
 *  Decompressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompress (<span class="keywd">inout</span> <span class="type">msbInBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: maxTableIndex <span class="keywd">is</span> 4095;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToRead <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: previousCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: table <span class="keywd">is</span> [0 .. maxTableIndex] <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: nextTableIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToRead := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      table[code] := str(char(code));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    endOfInformationCode := succ(clearCode);
    nextTableIndex := succ(endOfInformationCode);
    moreBitsNeeded := 1 &lt;&lt; bitsToRead;
    previousCode := clearCode;
    code := getBits(compressedStream, bitsToRead);
    <span class="keywd">while</span> code &lt;> endOfInformationCode <span class="keywd">do</span>
      <span class="keywd">if</span> code = clearCode <span class="keywd">then</span>
        bitsToRead := succ(codeSize);
        nextTableIndex := succ(endOfInformationCode);
        moreBitsNeeded := 1 &lt;&lt; bitsToRead;
      <span class="keywd">elsif</span> previousCode = clearCode <span class="keywd">then</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          decompressed &amp;:= table[code];
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[code][1]);
            incr(nextTableIndex);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          decompressed &amp;:= table[code];
        <span class="keywd">elsif</span> code = nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[previousCode][1]);
            incr(nextTableIndex);
            decompressed &amp;:= table[code];
          <span class="keywd">else</span>
            decompressed &amp;:= table[previousCode] &amp; str(table[previousCode][1]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> nextTableIndex = moreBitsNeeded <span class="keywd">then</span>
          incr(bitsToRead);
          <span class="keywd">if</span> bitsToRead &lt; 12 <span class="keywd">then</span>
            moreBitsNeeded := 1 &lt;&lt; bitsToRead;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      previousCode := code;
      code := getBits(compressedStream, bitsToRead);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed string.
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression  method is used in PDF files.
 *  Decompressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompressMsb (<span class="op">in</span> <span class="type">string</span>: compressed, <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">msbInBitStream</span>: compressedStream <span class="keywd">is</span> msbInBitStream.value;
  <span class="keywd">begin</span>
    compressedStream := openMsbInBitStream(compressed);
    decompressed := lzwDecompress(compressedStream, codeSize);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compress a string with the Lempel-Ziv-Welch (LZW) compression method.
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression method is used in [[tiff|TIFF]] and PDF files.
 *  EarlyChange means that the encoding width changes one code too early.
 *  Compressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param uncompressed Data to be compressed
 *  @param codeSize Number of bits used by the uncompressed data.
 *  @return Compressed byte string of the ''uncompressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwCompressMsbEarlyChange (<span class="op">in</span> <span class="type">string</span>: uncompressed, <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: compressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">msbOutBitStream</span>: compressedStream <span class="keywd">is</span> msbOutBitStream.value;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>: mydict <span class="keywd">is</span> (<span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>).value;
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: xstr <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToWrite <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToWrite := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    endOfInformationCode := succ(clearCode);
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      mydict @:= [str(char(code))] code;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    putBits(compressedStream, clearCode, bitsToWrite);
    bitsToWrite := succ(codeSize);
    moreBitsNeeded := pred(1 &lt;&lt; bitsToWrite);
    <span class="keywd">for</span> ch <span class="keywd">range</span> uncompressed <span class="keywd">do</span>
      xstr := buffer &amp; str(ch);
      <span class="keywd">if</span> xstr <span class="op">in</span> mydict <span class="keywd">then</span>
        buffer &amp;:= str(ch)
      <span class="keywd">else</span>
        putBits(compressedStream, mydict[buffer], bitsToWrite);
        code := length(mydict) + 2;
        mydict @:= [xstr] code;
        <span class="keywd">if</span> code = moreBitsNeeded <span class="keywd">then</span>
          <span class="keywd">if</span> bitsToWrite = 12 <span class="keywd">then</span>
            mydict := (<span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>).value;
            <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
              mydict @:= [str(char(code))] code;
            <span class="keywd">end</span> <span class="keywd">for</span>;
            putBits(compressedStream, clearCode, bitsToWrite);
            bitsToWrite := succ(codeSize);
          <span class="keywd">else</span>
            incr(bitsToWrite);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          moreBitsNeeded := pred(1 &lt;&lt; bitsToWrite);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        buffer := str(ch);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      putBits(compressedStream, mydict[buffer], bitsToWrite);
      <span class="keywd">if</span> length(mydict) + 2 = moreBitsNeeded <span class="keywd">then</span>
        <span class="keywd">if</span> bitsToWrite = 12 <span class="keywd">then</span>
          putBits(compressedStream, clearCode, bitsToWrite);
          bitsToWrite := succ(codeSize);
        <span class="keywd">else</span>
          incr(bitsToWrite);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    putBits(compressedStream, endOfInformationCode, bitsToWrite);
    flush(compressedStream);
    compressed := getBytes(compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed [[bitdata#msbInBitStream|msbInBitStream]].
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression  method is used in [[tiff|TIFF]] and PDF files.
 *  EarlyChange means that the encoding width changes one code too early.
 *  Decompressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompressEarlyChange (<span class="keywd">inout</span> <span class="type">msbInBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: maxTableIndex <span class="keywd">is</span> 4095;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToRead <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: previousCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: table <span class="keywd">is</span> [0 .. maxTableIndex] <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: nextTableIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToRead := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      table[code] := str(char(code));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    endOfInformationCode := succ(clearCode);
    nextTableIndex := succ(endOfInformationCode);
    moreBitsNeeded := pred(1 &lt;&lt; bitsToRead);
    previousCode := clearCode;
    code := getBits(compressedStream, bitsToRead);
    <span class="keywd">while</span> code &lt;> endOfInformationCode <span class="keywd">do</span>
      <span class="keywd">if</span> code = clearCode <span class="keywd">then</span>
        bitsToRead := succ(codeSize);
        nextTableIndex := succ(endOfInformationCode);
        moreBitsNeeded := pred(1 &lt;&lt; bitsToRead);
      <span class="keywd">elsif</span> previousCode = clearCode <span class="keywd">then</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          decompressed &amp;:= table[code];
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[code][1]);
            incr(nextTableIndex);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          decompressed &amp;:= table[code];
        <span class="keywd">elsif</span> code = nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[previousCode][1]);
            incr(nextTableIndex);
            decompressed &amp;:= table[code];
          <span class="keywd">else</span>
            decompressed &amp;:= table[previousCode] &amp; str(table[previousCode][1]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> nextTableIndex = moreBitsNeeded <span class="keywd">then</span>
          incr(bitsToRead);
          <span class="keywd">if</span> bitsToRead &lt; 12 <span class="keywd">then</span>
            moreBitsNeeded := pred(1 &lt;&lt; bitsToRead);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      previousCode := code;
      code := getBits(compressedStream, bitsToRead);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed string.
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression  method is used in [[tiff|TIFF]] and PDF files.
 *  EarlyChange means that the encoding width changes one code too early.
 *  Decompressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompressMsbEarlyChange (<span class="op">in</span> <span class="type">string</span>: compressed, <span class="op">in</span> <span class="type">integer</span>: codeSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">msbInBitStream</span>: compressedStream <span class="keywd">is</span> msbInBitStream.value;
  <span class="keywd">begin</span>
    compressedStream := openMsbInBitStream(compressed);
    decompressed := lzwDecompressEarlyChange(compressedStream, codeSize);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed [[bitdata#msbInBitStream|msbInBitStream]].
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression  method is used in [[tiff|TIFF]] and PDF files.
 *  EarlyChange means that the encoding width changes one code too early.
 *  Decompressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @param requestedLength Number of decompressed bytes to be read.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompressEarlyChange (<span class="keywd">inout</span> <span class="type">msbInBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: codeSize, <span class="op">in</span> <span class="type">integer</span>: requestedLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: maxTableIndex <span class="keywd">is</span> 4095;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsToRead <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: clearCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: endOfInformationCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: code <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: previousCode <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: table <span class="keywd">is</span> [0 .. maxTableIndex] <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: nextTableIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: moreBitsNeeded <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bitsToRead := succ(codeSize);
    clearCode := 1 &lt;&lt; codeSize;
    <span class="keywd">for</span> code <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(clearCode) <span class="keywd">do</span>
      table[code] := str(char(code));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    endOfInformationCode := succ(clearCode);
    nextTableIndex := succ(endOfInformationCode);
    moreBitsNeeded := pred(1 &lt;&lt; bitsToRead);
    previousCode := clearCode;
    code := getBits(compressedStream, bitsToRead);
    <span class="keywd">while</span> code &lt;> endOfInformationCode <span class="op">and</span> length(decompressed) &lt; requestedLength <span class="keywd">do</span>
      <span class="keywd">if</span> code = clearCode <span class="keywd">then</span>
        bitsToRead := succ(codeSize);
        nextTableIndex := succ(endOfInformationCode);
        moreBitsNeeded := pred(1 &lt;&lt; bitsToRead);
      <span class="keywd">elsif</span> previousCode = clearCode <span class="keywd">then</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          decompressed &amp;:= table[code];
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> code &lt; nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[code][1]);
            incr(nextTableIndex);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          decompressed &amp;:= table[code];
        <span class="keywd">elsif</span> code = nextTableIndex <span class="keywd">then</span>
          <span class="keywd">if</span> nextTableIndex &lt;= maxTableIndex <span class="keywd">then</span>
            table[nextTableIndex] := table[previousCode] &amp; str(table[previousCode][1]);
            incr(nextTableIndex);
            decompressed &amp;:= table[code];
          <span class="keywd">else</span>
            decompressed &amp;:= table[previousCode] &amp; str(table[previousCode][1]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> nextTableIndex = moreBitsNeeded <span class="keywd">then</span>
          incr(bitsToRead);
          <span class="keywd">if</span> bitsToRead &lt; 12 <span class="keywd">then</span>
            moreBitsNeeded := pred(1 &lt;&lt; bitsToRead);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      previousCode := code;
      code := getBits(compressedStream, bitsToRead);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress an Lempel-Ziv-Welch (LZW) compressed string.
 *  The packing order of bits in bytes is MSB-First (Most Significant
 *  Bit First). This compression  method is used in [[tiff|TIFF]] and PDF files.
 *  EarlyChange means that the encoding width changes one code too early.
 *  Decompressing starts with succ(''codeSize'') bits per coding point and
 *  goes up to 12 bits per coding point. The code points 0 to
 *  pred(2 ** ''codeSize'') correspond to unchanged data. Code
 *  2 ** ''codeSize'' starts a new block with a new table and
 *  succ(''codeSize'') bits per code point. Code succ(2 ** ''codeSize'')
 *  marks the end of the compressed data.
 *  @param compressed Byte string to be decompressed.
 *  @param codeSize Number of bits used by the decompressed data.
 *  @param requestedLength Number of decompressed bytes to be read.
 *  @return Decompressed version of the ''compressed'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: lzwDecompressMsbEarlyChange (<span class="op">in</span> <span class="type">string</span>: compressed, <span class="op">in</span> <span class="type">integer</span>: codeSize,
    <span class="op">in</span> <span class="type">integer</span>: requestedLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">msbInBitStream</span>: compressedStream <span class="keywd">is</span> msbInBitStream.value;
  <span class="keywd">begin</span>
    compressedStream := openMsbInBitStream(compressed);
    decompressed := lzwDecompressEarlyChange(compressedStream, codeSize, requestedLength);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
