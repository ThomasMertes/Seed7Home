<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  graph.s7i     Basic graphic library                             *)</span>
<span class="comment">(*  Copyright (C) 1994, 1995, 2004, 2005, 2007  Thomas Mertes       *)</span>
<span class="comment">(*                2009 - 2013, 2017, 2018, 2020, 2021 Thomas Mertes *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bstring.htm">bstring.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">type</span>: PRIMITIVE_WINDOW <span class="keywd">is</span> newtype;

IN_PARAM_IS_REFERENCE(PRIMITIVE_WINDOW);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">PRIMITIVE_WINDOW</span>: dest) ::= (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: source)     <span class="keywd">is</span> action <span class="stri">"DRW_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">PRIMITIVE_WINDOW</span>: aValue)                             <span class="keywd">is</span> action <span class="stri">"DRW_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: dest) := (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: source)    <span class="keywd">is</span> action <span class="stri">"DRW_CPY"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: win1) = (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: win2)  <span class="keywd">is</span> action <span class="stri">"DRW_EQ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: win1) &lt;> (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: win2) <span class="keywd">is</span> action <span class="stri">"DRW_NE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: _GENERATE_EMPTY_WINDOW                            <span class="keywd">is</span> action <span class="stri">"DRW_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">PRIMITIVE_WINDOW</span>: (attr PRIMITIVE_WINDOW) . value                        <span class="keywd">is</span> _GENERATE_EMPTY_WINDOW;

<span class="keywd">const</span> <span class="type">type</span>: pixel <span class="keywd">is</span> newtype;

IN_PARAM_IS_VALUE(pixel);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">pixel</span>: dest) ::= (<span class="op">in</span> <span class="type">pixel</span>: source)       <span class="keywd">is</span> action <span class="stri">"INT_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">pixel</span>: aValue)                    <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">pixel</span>: dest) := (<span class="op">in</span> <span class="type">pixel</span>: source)      <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">pixel</span>: pix1) = (<span class="op">in</span> <span class="type">pixel</span>: pix2)    <span class="keywd">is</span> action <span class="stri">"INT_EQ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">pixel</span>: pix1) &lt;> (<span class="op">in</span> <span class="type">pixel</span>: pix2)   <span class="keywd">is</span> action <span class="stri">"INT_NE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixel</span>: (attr pixel) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: num)      <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixel</span>: pixel (<span class="op">in</span> <span class="type">integer</span>: num)                  <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">conv</span> (<span class="op">in</span> <span class="type">pixel</span>: aPixel) <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">pixel</span>: aPixel)                 <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;
<span class="keywd">const</span> <span class="type">pixel</span>: (attr pixel) . value                          <span class="keywd">is</span> pixel <span class="op">conv</span> 0;


<span class="keywd">const</span> <span class="type">proc</span>: DRAW_POINT (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y)                   <span class="keywd">is</span> action <span class="stri">"DRW_POINT"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_PPOINT (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PPOINT"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_LINE (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2)                 <span class="keywd">is</span> action <span class="stri">"DRW_LINE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_PLINE (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PLINE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_RECT (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height)          <span class="keywd">is</span> action <span class="stri">"DRW_RECT"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_PRECT (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PRECT"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_CIRCLE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: radius)                             <span class="keywd">is</span> action <span class="stri">"DRW_CIRCLE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_CIRCLE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: radius, <span class="op">in</span> <span class="type">pixel</span>: col)              <span class="keywd">is</span> action <span class="stri">"DRW_PCIRCLE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_CLEAR(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_CLEAR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_CIRCLE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: radius)                             <span class="keywd">is</span> action <span class="stri">"DRW_FCIRCLE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_CIRCLE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: radius, <span class="op">in</span> <span class="type">pixel</span>: col)              <span class="keywd">is</span> action <span class="stri">"DRW_PFCIRCLE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_ARC(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle)     <span class="keywd">is</span> action <span class="stri">"DRW_ARC"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_ARC(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PARC"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_ARCCHORD(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle)     <span class="keywd">is</span> action <span class="stri">"DRW_FARCCHORD"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_ARC(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">pixel</span>: col)               <span class="keywd">is</span> action <span class="stri">"DRW_PFARC"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_ARCCHORD(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PFARCCHORD"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_ARCPIESLICE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle)     <span class="keywd">is</span> action <span class="stri">"DRW_FARCPIESLICE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_ARCPIESLICE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PFARCPIESLICE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_ARC2(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1, <span class="op">in</span> <span class="type">integer</span>: x2,
    <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">integer</span>: radius)             <span class="keywd">is</span> action <span class="stri">"DRW_ARC2"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_ELLIPSE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height)          <span class="keywd">is</span> action <span class="stri">"DRW_FELLIPSE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_ELLIPSE(<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height,
    <span class="op">in</span> <span class="type">pixel</span>: col)                                  <span class="keywd">is</span> action <span class="stri">"DRW_PFELLIPSE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: PRIMITIVE_GRAPHIC_OPEN (
    <span class="keywd">ref</span> <span class="type">integer</span>: xPos, <span class="keywd">ref</span> <span class="type">integer</span>: yPos,
    <span class="keywd">ref</span> <span class="type">integer</span>: width, <span class="keywd">ref</span> <span class="type">integer</span>: height,
    <span class="keywd">ref</span> <span class="type">string</span>: window_name)                        <span class="keywd">is</span> action <span class="stri">"DRW_OPEN"</span>;


<span class="comment">(**
 *  Flush graphic commands such that the contents of all windows is up to date.
 *  An animation can be created by using ''flushGrapic'' every time before
 *  the program waits for a fraction of a second.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flushGraphic                            <span class="keywd">is</span> action <span class="stri">"DRW_FLUSH"</span>;


<span class="comment"># The function DRAW_FLUSH is deprecated. Use flushGraphic instead.</span>
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_FLUSH                              <span class="keywd">is</span> action <span class="stri">"DRW_FLUSH"</span>;


<span class="comment">(**
 *  Create a sub window inside of ''parent_window''.
 *  The new sub window has no window decorations and is not managed by
 *  the window manager. If the empty window is used as ''parent_window''
 *  an unmanaged top level window without window decorations is generated.
 *  The coordinates ''xPos'' and ''yPos'' are measured relative to the top
 *  left corner of the ''parent_window'' drawing area (inside of the window
 *  decorations). If the empty window is used as ''parent_window'' the
 *  coordinates ''xPos'' and ''yPos'' are measured relative to the top left
 *  corner of the screen.
 *  @param parent-window Parent window (can be the empty window).
 *  @param xPos X-position of the left corner of the new window.
 *  @param yPos Y-position of the left corner of the new window.
 *  @param width Width of the new window.
 *  @param height Height of the new window.
 *  @return the new generated window.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: openSubWindow (
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="keywd">ref</span> <span class="type">integer</span>: xPos, <span class="keywd">ref</span> <span class="type">integer</span>: yPos,
    <span class="keywd">ref</span> <span class="type">integer</span>: width, <span class="keywd">ref</span> <span class="type">integer</span>: height)        <span class="keywd">is</span> action <span class="stri">"DRW_OPEN_SUB_WINDOW"</span>;

<span class="comment">(**
 *  Set the window name (title) of ''aWindow''.
 *  @param aWindow Window for which the name should be set.
 *  @param windowName New name (title) of the window.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setWindowName (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
                           <span class="op">in</span> <span class="type">string</span>: windowName)   <span class="keywd">is</span> action <span class="stri">"DRW_SET_WINDOW_NAME"</span>;

<span class="comment">(**
 *  Set the visibility of the mouse cursor in ''aWindow''.
 *  @param aWindow Window for which the mouse cursor visibility is set.
 *  @param visible TRUE, if the mouse cursor should be visible in ''aWindow'', or
 *                 FALSE, if the mouse curser should be invisible in ''aWindow''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setCursorVisible (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
                              <span class="op">in</span> <span class="type">boolean</span>: visible)  <span class="keywd">is</span> action <span class="stri">"DRW_SET_CURSOR_VISIBLE"</span>;

<span class="comment">(**
 *  Capture a rectangular area from the screen.
 *  The function takes a screenshot of the rectangular area.
 *  The ''left'' and ''upper'' coordinates are measured relative to
 *  the top left corner of the screen.
 *  @param left X-position of the upper left corner of the capture area.
 *  @param upper Y-position of the upper left corner of the capture area.
 *  @param width Width of the capture area.
 *  @param height Height of the capture area.
 *  @return the content of the rectangular screen area as pixmap.
 *  @exception RANGE_ERROR If ''height'' or ''width'' are negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: capturePixmap (
    <span class="keywd">ref</span> <span class="type">integer</span>: left, <span class="keywd">ref</span> <span class="type">integer</span>: upper,
    <span class="keywd">ref</span> <span class="type">integer</span>: width, <span class="keywd">ref</span> <span class="type">integer</span>: height)        <span class="keywd">is</span> action <span class="stri">"DRW_CAPTURE"</span>;

<span class="keywd">const</span> <span class="type">type</span>: pixelArray2d <span class="keywd">is</span> <span class="type">array</span> <span class="type">array</span> pixel;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: getPixelData (
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow)                   <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_DATA"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: getPixelData (
    <span class="keywd">ref</span> <span class="type">array</span> <span class="type">array</span> <span class="type">pixel</span>: image)                   <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_DATA_FROM_ARRAY"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixel</span>: getPixel (
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="keywd">ref</span> <span class="type">integer</span>: x, <span class="keywd">ref</span> <span class="type">integer</span>: y)                 <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixel</span>: getPixel (
    <span class="op">in</span> <span class="type">bstring</span>: bImage, <span class="op">in</span> <span class="type">integer</span>: width,
    <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">integer</span>: x,
    <span class="op">in</span> <span class="type">integer</span>: y)                                  <span class="keywd">is</span> action <span class="stri">"DRW_GET_IMAGE_PIXEL"</span>;

<span class="comment">(**
 *  Copy a rectangular area from ''sourceWindow'' to ''destWindow''.
 *  Coordinates are measured relative to the top left corner of the
 *  corresponding window drawing area (inside of the window decorations).
 *  @param sourceWindow Source window.
 *  @param destWindow Destination window.
 *  @param src_x X-position of the top left corner of the source area.
 *  @param src_y Y-position of the top left corner of the source area.
 *  @param width Width of the rectangular area.
 *  @param height Height of the rectangular area.
 *  @param dest_x X-position of the top left corner of the destination area.
 *  @param dest_y Y-position of the top left corner of the destination area.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: copyArea (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceWindow,
    <span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: destWindow,
    <span class="keywd">ref</span> <span class="type">integer</span>: src_x, <span class="keywd">ref</span> <span class="type">integer</span>: src_y,
    <span class="keywd">ref</span> <span class="type">integer</span>: width, <span class="keywd">ref</span> <span class="type">integer</span>: height,
    <span class="keywd">ref</span> <span class="type">integer</span>: dest_x, <span class="keywd">ref</span> <span class="type">integer</span>: dest_y)       <span class="keywd">is</span> action <span class="stri">"DRW_COPYAREA"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: SET_TRANSPARENTCOLOR (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap,
    <span class="keywd">ref</span> <span class="type">pixel</span>: col)                                 <span class="keywd">is</span> action <span class="stri">"DRW_SET_TRANSPARENT_COLOR"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: window1,
                             <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: window2)  <span class="keywd">is</span> action <span class="stri">"DRW_CMP"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: setContent (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap)                            <span class="keywd">is</span> action <span class="stri">"DRW_SET_CONTENT"</span>;


<span class="comment">(**
 *  Create a pixel from the ''red'', ''green'' and ''blue'' colors of light.
 *  The range for ''red'', ''green'' and ''blue'' is from 0 to 65535.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixel</span>: rgbPixel (<span class="keywd">ref</span> <span class="type">integer</span>: red,
    <span class="keywd">ref</span> <span class="type">integer</span>: green, <span class="keywd">ref</span> <span class="type">integer</span>: blue)          <span class="keywd">is</span> action <span class="stri">"DRW_RGBCOL"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: DRAW_PIXEL_TO_RGB (
    <span class="op">in</span> <span class="type">pixel</span>: col, <span class="keywd">inout</span> <span class="type">integer</span>: red,
    <span class="keywd">inout</span> <span class="type">integer</span>: green, <span class="keywd">inout</span> <span class="type">integer</span>: blue)      <span class="keywd">is</span> action <span class="stri">"DRW_PIXEL_TO_RGB"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: SET_COLOR (<span class="keywd">ref</span> <span class="type">pixel</span>: aWindow)          <span class="keywd">is</span> action <span class="stri">"DRW_COLOR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: SET_BACKGROUND (<span class="keywd">ref</span> <span class="type">pixel</span>: aWindow)     <span class="keywd">is</span> action <span class="stri">"DRW_BACKGROUND"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: DRAW_TEXT (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="keywd">ref</span> <span class="type">integer</span>: x, <span class="keywd">ref</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">string</span>: stri,
    <span class="keywd">ref</span> <span class="type">pixel</span>: col, <span class="keywd">ref</span> <span class="type">pixel</span>: bkcol)               <span class="keywd">is</span> action <span class="stri">"DRW_TEXT"</span>;

<span class="comment">(**
 *  Determine the height of the screen in pixels.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: screenHeight                    <span class="keywd">is</span> action <span class="stri">"DRW_SCREEN_HEIGHT"</span>;

<span class="comment">(**
 *  Determine the width of the screen in pixels.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: screenWidth                     <span class="keywd">is</span> action <span class="stri">"DRW_SCREEN_WIDTH"</span>;

<span class="comment">(**
 *  Determine the height of the window drawing area in pixels.
 *  This excludes window decorations at top and bottom. Add top and bottom
 *  border widths to get the height inclusive window decorations.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: height (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow)   <span class="keywd">is</span> action <span class="stri">"DRW_HEIGHT"</span>;

<span class="comment">(**
 *  Determine the width of the window drawing area in pixels.
 *  This excludes window declarations left and right. Add left and right
 *  border widths to get the width inclusive window decorations.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow)    <span class="keywd">is</span> action <span class="stri">"DRW_WIDTH"</span>;

<span class="comment">(**
 *  Determine the X position of the top left corner of a window in pixels.
 *  If window decorations are present this uses the top left corner of
 *  the window decorations. For a sub window the X position is relative
 *  to the top left corner of the parent window drawing area (inside of
 *  the window decorations). For top level windows the X position is
 *  relative to the top left corner of the screen.
 *  @exception RANGE_ERROR If ''actual_window'' is a pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: xPos (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow)     <span class="keywd">is</span> action <span class="stri">"DRW_XPOS"</span>;

<span class="comment">(**
 *  Determine the Y position of the top left corner of a window in pixels.
 *  If window decorations are present this uses the top left corner of
 *  the window decorations. For a sub window the Y position is relative
 *  to the top left corner of the parent window drawing area (inside of
 *  the window decorations). For top level windows the Y position is
 *  relative to the top left corner of the screen.
 *  @exception RANGE_ERROR If ''actual_window'' is a pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: yPos (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow)     <span class="keywd">is</span> action <span class="stri">"DRW_YPOS"</span>;

<span class="comment">(**
 *  Move the top left corner of a window to the coordinates x/y.
 *  If window decorations are present the top left corner of the
 *  window decorations will be at the position x/y. For a sub window
 *  the position is relative to the top left corner of the parent window
 *  drawing area (inside of the window decorations). For top level windows
 *  the position is relative to the top left corner of the screen.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPos (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos)                     <span class="keywd">is</span> action <span class="stri">"DRW_SET_POS"</span>;

<span class="comment">(**
 *  Lower a window to the bottom so that it does not obscure any other window.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: toBottom (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_TO_BOTTOM"</span>;

<span class="comment">(**
 *  Raise a window to the top so that no other window obscures it.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: toTop (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow)    <span class="keywd">is</span> action <span class="stri">"DRW_TO_TOP"</span>;

<span class="comment">(**
 *  Determine the border widths of a window in pixels.
 *  These are the widths of the window decorations in the succession
 *  top, right, bottom, left.
 *  @return an array with border widths (top, right, bottom, left).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">integer</span>: getBorder (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_BORDER"</span>;

<span class="comment">(**
 *  Return the X position of the pointer relative to the specified window.
 *  The point of origin is the top left corner of the drawing area
 *  of the given 'aWindow' (inside of the window decorations).
 *  If 'aWindow' is the empty window the pointer X position is
 *  relative to the top left corner of the screen.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: pointerXPos (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_POINTER_XPOS"</span>;

<span class="comment">(**
 *  Return the Y position of the pointer relative to the specified window.
 *  The point of origin is the top left corner of the drawing area
 *  of the given 'aWindow' (inside of the window decorations).
 *  If 'aWindow' is the empty window the pointer Y position is
 *  relative to the top left corner of the screen.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: pointerYPos (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_POINTER_YPOS"</span>;

<span class="comment">(**
 *  Set the pointer x and y position relative to ''aWindow''.
 *  The point of origin is the top left corner of the drawing area
 *  of the given ''aWindow'' (inside of the window decorations).
 *  If ''aWindow'' is the empty window the pointer x and y position
 *  is relative to the top left corner of the screen.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPointerPos (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
                           <span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> action <span class="stri">"DRW_SET_POINTER_POS"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: SET_CLOSE_ACTION (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow, <span class="op">in</span> <span class="type">integer</span>: closeAction) <span class="keywd">is</span> action <span class="stri">"DRW_SET_CLOSE_ACTION"</span>;

<span class="keywd">const</span> <span class="type">type</span>: windowCloseAction <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    CLOSE_PROGRAM, RETURN_KEY, RAISE_EXCEPTION
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="comment"># The function setCloseAction() is deprecated. Use selectInput() instead.</span>
<span class="comment"># Replace setCloseAction(aWindow, RETURN_KEY) with selectInput(aWindow, KEY_CLOSE, TRUE).</span>
<span class="comment"># The possibility to raise an exception is not supported by selectInput().</span>
<span class="keywd">const</span> <span class="type">proc</span>: setCloseAction (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow, <span class="op">in</span> <span class="type">windowCloseAction</span>: closeAction) <span class="keywd">is</span>
  <span class="keywd">return</span> SET_CLOSE_ACTION(aWindow, ord(closeAction));


<span class="comment">(**
 *  Select if ''aKey'' is returned as key, or if it triggers a default action.
 *  A program might be notified when a window is resized.
 *  By default, this notification is switched off. It can be switched on with:
 *   selectInput(curr_win, KEY_RESIZE, TRUE);
 *  By default, closing a window terminates the program.
 *  To get a notification for a window close (instead of a program termination) do:
 *   selectInput(curr_win, KEY_CLOSE, TRUE);
 *  If the notification is turned on the function getc(GRAPH_KEYBOARD)
 *  might return the corresponding notification character (KEY_RESIZE or KEY_CLOSE).
 *  @param aWindow Window for which the key behavior is specified.
 *  @param aKey KEY_CLOSE or KEY_RESIZE.
 *  @param active TRUE if reading from the KEYBOARD returns ''aKey'', or
 *                FALSE if ''aKey'' triggers a default action.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: selectInput (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow, <span class="op">in</span> <span class="type">char</span>: aKey,
                         <span class="op">in</span> <span class="type">boolean</span>: active)                      <span class="keywd">is</span> action <span class="stri">"GKB_SELECT_INPUT"</span>;


<span class="keywd">const</span> <span class="type">type</span>: pointList <span class="keywd">is</span> newtype;

IN_PARAM_IS_REFERENCE(pointList);

<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">pointList</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"PLT_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">pointList</span>: dest) ::= (<span class="op">in</span> <span class="type">pointList</span>: source)      <span class="keywd">is</span> action <span class="stri">"PLT_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">pointList</span>: dest) := (<span class="op">in</span> <span class="type">pointList</span>: source)     <span class="keywd">is</span> action <span class="stri">"PLT_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">pointList</span>: _GENERATE_EMPTY_POINT_LIST                  <span class="keywd">is</span> action <span class="stri">"PLT_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">pointList</span>: (attr pointList) . value                         <span class="keywd">is</span> _GENERATE_EMPTY_POINT_LIST;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: bstring (<span class="op">in</span> <span class="type">pointList</span>: aPointList)            <span class="keywd">is</span> action <span class="stri">"PLT_BSTRING"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pointList</span>: pointList (<span class="op">in</span> <span class="type">bstring</span>: bstri)               <span class="keywd">is</span> action <span class="stri">"PLT_POINT_LIST"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">pointList</span>: pointList1) = (<span class="op">in</span> <span class="type">pointList</span>: pointList2)   <span class="keywd">is</span> action <span class="stri">"PLT_EQ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">pointList</span>: pointList1) &lt;> (<span class="op">in</span> <span class="type">pointList</span>: pointList2)  <span class="keywd">is</span> action <span class="stri">"PLT_NE"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">pointList</span>: aPointList)           <span class="keywd">is</span> action <span class="stri">"PLT_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">pointList</span>: pointList1,
                             <span class="op">in</span> <span class="type">pointList</span>: pointList2)            <span class="keywd">is</span> action <span class="stri">"PLT_CMP"</span>;

<span class="comment">(**
 *  The function 'genPointList' creates a 'pointList'.
 *  It converts an array of alternate x and y values to a 'pointList'.
 *  @return a pointList with the points from the array.
 *  @exception RANGE_ERROR If the length of the array is odd.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pointList</span>: genPointList (<span class="keywd">ref</span> <span class="type">array</span> <span class="type">integer</span>: coordinates) <span class="keywd">is</span> action <span class="stri">"DRW_GEN_POINT_LIST"</span>;

<span class="comment">(**
 *  Converts a 'pointList' to an array of (X,Y) coordinates.
 *  @return an array of alternate x and y values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">integer</span>: xyArray (<span class="keywd">ref</span> <span class="type">pointList</span>: aPointList)     <span class="keywd">is</span> action <span class="stri">"DRW_CONV_POINT_LIST"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">pointList</span>: scale (<span class="op">in</span> <span class="type">pointList</span>: basePoints, <span class="op">in</span> <span class="type">integer</span>: scale) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pointList</span>: scaledPoints <span class="keywd">is</span> pointList.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: coordinates <span class="keywd">is</span> 0 <span class="op">times</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    coordinates := xyArray(basePoints);
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> coordinates <span class="keywd">do</span>
      coordinates[index] *:= scale;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    scaledPoints := genPointList(coordinates);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">proc</span>: DRAW_POLYLINE (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">pointList</span>: point_list,
    <span class="keywd">ref</span> <span class="type">pixel</span>: col)                                               <span class="keywd">is</span> action <span class="stri">"DRW_POLY_LINE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: FILL_POLYLINE (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">pointList</span>: point_list,
    <span class="keywd">ref</span> <span class="type">pixel</span>: col)                                               <span class="keywd">is</span> action <span class="stri">"DRW_FPOLY_LINE"</span>;
</pre>
</body>
</html>
