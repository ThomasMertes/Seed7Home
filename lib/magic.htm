<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  magic.s7i     Get magic numbers from strings and files.         *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bytedata.htm">bytedata.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">string</span>: MAGIC_AR               <span class="keywd">is</span> <span class="stri">"!&lt;arch>\n"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_BMP              <span class="keywd">is</span> <span class="stri">"BM"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_CPIO_BINARY_BE   <span class="keywd">is</span> <span class="stri">"\16#71;\16#c7;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_CPIO_BINARY_LE   <span class="keywd">is</span> <span class="stri">"\16#c7;\16#71;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_CPIO_ASCII_OLD   <span class="keywd">is</span> <span class="stri">"070707"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_CPIO_ASCII       <span class="keywd">is</span> <span class="stri">"070701"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_CPIO_ASCII_CRC   <span class="keywd">is</span> <span class="stri">"070702"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ELF_32_BIT_LE    <span class="keywd">is</span> <span class="stri">"\127;ELF\1;\1;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ELF_64_BIT_LE    <span class="keywd">is</span> <span class="stri">"\127;ELF\2;\1;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ELF_32_BIT_BE    <span class="keywd">is</span> <span class="stri">"\127;ELF\1;\2;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ELF_64_BIT_BE    <span class="keywd">is</span> <span class="stri">"\127;ELF\2;\2;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_GIF_87           <span class="keywd">is</span> <span class="stri">"GIF87a"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_GIF_89           <span class="keywd">is</span> <span class="stri">"GIF89a"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_GZIP             <span class="keywd">is</span> <span class="stri">"\31;\139;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ICO              <span class="keywd">is</span> <span class="stri">"\0;\0;\1;\0;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_JPEG             <span class="keywd">is</span> <span class="stri">"\16#ff;\16#d8;\16#ff;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_MACH_O_32_BIT_LE <span class="keywd">is</span> <span class="stri">"\16#fe;\16#ed;\16#fa;\16#ce;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_MACH_O_64_BIT_LE <span class="keywd">is</span> <span class="stri">"\16#fe;\16#ed;\16#fa;\16#cf;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_MACH_O_32_BIT_BE <span class="keywd">is</span> <span class="stri">"\16#ce;\16#fa;\16#ed;\16#fe;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_MACH_O_64_BIT_BE <span class="keywd">is</span> <span class="stri">"\16#cf;\16#fa;\16#ed;\16#fe;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_MZ               <span class="keywd">is</span> <span class="stri">"MZ"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PDF              <span class="keywd">is</span> <span class="stri">"%PDF-"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PE               <span class="keywd">is</span> <span class="stri">"PE\0;\0;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PNG              <span class="keywd">is</span> <span class="stri">"\137;PNG\r\n\26;\n"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PBM_ASCII        <span class="keywd">is</span> <span class="stri">"P1"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PGM_ASCII        <span class="keywd">is</span> <span class="stri">"P2"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PPM_ASCII        <span class="keywd">is</span> <span class="stri">"P3"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PBM_BINARY       <span class="keywd">is</span> <span class="stri">"P4"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PGM_BINARY       <span class="keywd">is</span> <span class="stri">"P5"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_PPM_BINARY       <span class="keywd">is</span> <span class="stri">"P6"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_RAR              <span class="keywd">is</span> <span class="stri">"Rar!\26;\7;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_RIFF             <span class="keywd">is</span> <span class="stri">"RIFF"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_RPM              <span class="keywd">is</span> <span class="stri">"\16#ed;\16#ab;\16#ee;\16#db;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_SEVEN_ZIP        <span class="keywd">is</span> <span class="stri">"7z\188;\175;'\28;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_SHEBANG          <span class="keywd">is</span> <span class="stri">"#!"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_SQLITE3          <span class="keywd">is</span> <span class="stri">"SQLite format 3\0;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_TAR              <span class="keywd">is</span> <span class="stri">"ustar"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_TIFF_LE          <span class="keywd">is</span> <span class="stri">"II\42;\0;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_TIFF_BE          <span class="keywd">is</span> <span class="stri">"MM\0;\42;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_UTF8             <span class="keywd">is</span> <span class="stri">"\16#ef;\16#bb;\16#bf;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_UTF16LE          <span class="keywd">is</span> <span class="stri">"\16#ff;\16#fe;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_UTF16BE          <span class="keywd">is</span> <span class="stri">"\16#fe;\16#ff;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_WASM             <span class="keywd">is</span> <span class="stri">"\0;asm"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_WEBP             <span class="keywd">is</span> <span class="stri">"WEBPVP8"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ZIP              <span class="keywd">is</span> <span class="stri">"PK\3;\4;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ZIP_EMPTY        <span class="keywd">is</span> <span class="stri">"PK\5;\6;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_XZ               <span class="keywd">is</span> <span class="stri">"\16#FD;7zXZ\0;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: MAGIC_ZSTD             <span class="keywd">is</span> <span class="stri">"(\16#B5;/\16#FD;"</span>;


<span class="comment">(**
 *  Determine the magic number (signature) of the given [[string]] ''data''.
 *  @return the magic number (signature), or
 *          "" if no magic number was found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getMagic (<span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: magic <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: magicBytes <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: offset <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(data) >= 2 <span class="keywd">then</span>
      magicBytes := data[.. 2];
      <span class="keywd">if</span>  magicBytes = MAGIC_BMP            <span class="op">or</span>
          magicBytes = MAGIC_CPIO_BINARY_BE <span class="op">or</span>
          magicBytes = MAGIC_CPIO_BINARY_LE <span class="op">or</span>
          magicBytes = MAGIC_GZIP           <span class="op">or</span>
          magicBytes = MAGIC_PBM_ASCII      <span class="op">or</span>
          magicBytes = MAGIC_PGM_ASCII      <span class="op">or</span>
          magicBytes = MAGIC_PPM_ASCII      <span class="op">or</span>
          magicBytes = MAGIC_PBM_BINARY     <span class="op">or</span>
          magicBytes = MAGIC_PGM_BINARY     <span class="op">or</span>
          magicBytes = MAGIC_PPM_BINARY     <span class="op">or</span>
          magicBytes = MAGIC_SHEBANG        <span class="op">or</span>
          magicBytes = MAGIC_UTF16LE        <span class="op">or</span>
          magicBytes = MAGIC_UTF16BE        <span class="keywd">then</span>
        magic := magicBytes;
      <span class="keywd">elsif</span> magicBytes = <span class="stri">"MZ"</span> <span class="keywd">then</span>
        <span class="keywd">if</span> length(data) >= 64 <span class="keywd">then</span>
          offset := bytes2Int(data[61 fixLen 4], UNSIGNED, LE);
          <span class="keywd">if</span> length(data) >= offset + 4 <span class="op">and</span>
              data[succ(offset) fixLen 4] = MAGIC_PE <span class="keywd">then</span>
            magic := MAGIC_PE;
          <span class="keywd">else</span>
            magic := MAGIC_MZ;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          magic := MAGIC_MZ;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> length(data) >= 3 <span class="keywd">then</span>
        magicBytes := data[.. 3];
        <span class="keywd">if</span>  magicBytes = MAGIC_JPEG           <span class="op">or</span>
            magicBytes = MAGIC_UTF8           <span class="keywd">then</span>
          magic := magicBytes;
        <span class="keywd">elsif</span> length(data) >= 4 <span class="keywd">then</span>
          magicBytes := data[.. 4];
          <span class="keywd">if</span>  magicBytes = MAGIC_ICO              <span class="op">or</span>
              magicBytes = MAGIC_MACH_O_32_BIT_LE <span class="op">or</span>
              magicBytes = MAGIC_MACH_O_64_BIT_LE <span class="op">or</span>
              magicBytes = MAGIC_MACH_O_32_BIT_BE <span class="op">or</span>
              magicBytes = MAGIC_MACH_O_64_BIT_BE <span class="op">or</span>
              magicBytes = MAGIC_RPM              <span class="op">or</span>
              magicBytes = MAGIC_TIFF_LE          <span class="op">or</span>
              magicBytes = MAGIC_TIFF_BE          <span class="op">or</span>
              magicBytes = MAGIC_WASM             <span class="op">or</span>
              magicBytes = MAGIC_ZIP              <span class="op">or</span>
              magicBytes = MAGIC_ZIP_EMPTY        <span class="op">or</span>
              magicBytes = MAGIC_ZSTD             <span class="keywd">then</span>
              magic := magicBytes;
          <span class="keywd">elsif</span> magicBytes = MAGIC_RIFF <span class="keywd">then</span>
            <span class="keywd">if</span> length(data) >= 15 <span class="op">and</span>
                data[9 fixLen 7] = MAGIC_WEBP <span class="keywd">then</span>
              magic := MAGIC_WEBP;
            <span class="keywd">else</span>
              magic := MAGIC_RIFF;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> length(data) >= 5 <span class="keywd">then</span>
            magicBytes := data[.. 5];
            <span class="keywd">if</span>  magicBytes = MAGIC_PDF <span class="keywd">then</span>
              magic := magicBytes;
            <span class="keywd">elsif</span> length(data) >= 6 <span class="keywd">then</span>
              magicBytes := data[.. 6];
              <span class="keywd">if</span>  magicBytes = MAGIC_CPIO_ASCII_OLD <span class="op">or</span>
                  magicBytes = MAGIC_CPIO_ASCII     <span class="op">or</span>
                  magicBytes = MAGIC_CPIO_ASCII_CRC <span class="op">or</span>
                  magicBytes = MAGIC_ELF_32_BIT_LE  <span class="op">or</span>
                  magicBytes = MAGIC_ELF_64_BIT_LE  <span class="op">or</span>
                  magicBytes = MAGIC_ELF_32_BIT_BE  <span class="op">or</span>
                  magicBytes = MAGIC_ELF_64_BIT_BE  <span class="op">or</span>
                  magicBytes = MAGIC_GIF_87         <span class="op">or</span>
                  magicBytes = MAGIC_GIF_89         <span class="op">or</span>
                  magicBytes = MAGIC_RAR            <span class="op">or</span>
                  magicBytes = MAGIC_SEVEN_ZIP      <span class="op">or</span>
                  magicBytes = MAGIC_XZ             <span class="keywd">then</span>
                magic := magicBytes;
              <span class="keywd">elsif</span> length(data) >= 8 <span class="keywd">then</span>
                magicBytes := data[.. 8];
                <span class="keywd">if</span>  magicBytes = MAGIC_AR  <span class="op">or</span>
                    magicBytes = MAGIC_PNG <span class="keywd">then</span>
                  magic := magicBytes;
                <span class="keywd">elsif</span> length(data) >= 16 <span class="keywd">then</span>
                  magicBytes := data[.. 16];
                  <span class="keywd">if</span>  magicBytes = MAGIC_SQLITE3 <span class="keywd">then</span>
                    magic := magicBytes;
                  <span class="keywd">elsif</span> length(data) >= 262 <span class="keywd">then</span>
                    magicBytes := data[258 fixLen 5];
                    <span class="keywd">if</span> magicBytes = MAGIC_TAR <span class="keywd">then</span>
                      magic := magicBytes;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the magic number (signature) of the given [[file]] ''inFile''.
 *  @return the magic number (signature), or
 *          "" if no magic number was found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getMagic (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: magic <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: magicBytes <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: offset <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    magicBytes := gets(inFile, 2);
    <span class="keywd">if</span> length(magicBytes) = 2 <span class="keywd">then</span>
      <span class="keywd">if</span>  magicBytes = MAGIC_BMP            <span class="op">or</span>
          magicBytes = MAGIC_CPIO_BINARY_BE <span class="op">or</span>
          magicBytes = MAGIC_CPIO_BINARY_LE <span class="op">or</span>
          magicBytes = MAGIC_GZIP           <span class="op">or</span>
          magicBytes = MAGIC_PBM_ASCII      <span class="op">or</span>
          magicBytes = MAGIC_PGM_ASCII      <span class="op">or</span>
          magicBytes = MAGIC_PPM_ASCII      <span class="op">or</span>
          magicBytes = MAGIC_PBM_BINARY     <span class="op">or</span>
          magicBytes = MAGIC_PGM_BINARY     <span class="op">or</span>
          magicBytes = MAGIC_PPM_BINARY     <span class="op">or</span>
          magicBytes = MAGIC_SHEBANG        <span class="op">or</span>
          magicBytes = MAGIC_UTF16LE        <span class="op">or</span>
          magicBytes = MAGIC_UTF16BE        <span class="keywd">then</span>
        magic := magicBytes;
      <span class="keywd">elsif</span> magicBytes = <span class="stri">"MZ"</span> <span class="keywd">then</span>
        magicBytes &amp;:= gets(inFile, 62);
        <span class="keywd">if</span> length(magicBytes) = 64 <span class="keywd">then</span>
          offset := bytes2Int(magicBytes[61 fixLen 4], UNSIGNED, LE);
          magicBytes &amp;:= gets(inFile, offset - 60);
          <span class="keywd">if</span> length(magicBytes) = offset + 4 <span class="op">and</span>
              magicBytes[succ(offset) fixLen 4] = MAGIC_PE <span class="keywd">then</span>
            magic := MAGIC_PE;
          <span class="keywd">else</span>
            magic := MAGIC_MZ;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          magic := MAGIC_MZ;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        magicBytes &amp;:= gets(inFile, 1);
        <span class="keywd">if</span> length(magicBytes) = 3 <span class="keywd">then</span>
          <span class="keywd">if</span>  magicBytes = MAGIC_JPEG           <span class="op">or</span>
              magicBytes = MAGIC_UTF8           <span class="keywd">then</span>
            magic := magicBytes;
          <span class="keywd">else</span>
            magicBytes &amp;:= gets(inFile, 1);
            <span class="keywd">if</span> length(magicBytes) = 4 <span class="keywd">then</span>
              <span class="keywd">if</span>  magicBytes = MAGIC_ICO              <span class="op">or</span>
                  magicBytes = MAGIC_MACH_O_32_BIT_LE <span class="op">or</span>
                  magicBytes = MAGIC_MACH_O_64_BIT_LE <span class="op">or</span>
                  magicBytes = MAGIC_MACH_O_32_BIT_BE <span class="op">or</span>
                  magicBytes = MAGIC_MACH_O_64_BIT_BE <span class="op">or</span>
                  magicBytes = MAGIC_RPM              <span class="op">or</span>
                  magicBytes = MAGIC_TIFF_LE          <span class="op">or</span>
                  magicBytes = MAGIC_TIFF_BE          <span class="op">or</span>
                  magicBytes = MAGIC_WASM             <span class="op">or</span>
                  magicBytes = MAGIC_ZIP              <span class="op">or</span>
                  magicBytes = MAGIC_ZIP_EMPTY        <span class="op">or</span>
                  magicBytes = MAGIC_ZSTD             <span class="keywd">then</span>
                magic := magicBytes;
              <span class="keywd">elsif</span> magicBytes = MAGIC_RIFF <span class="keywd">then</span>
                magicBytes &amp;:= gets(inFile, 11);
                <span class="keywd">if</span> length(magicBytes) = 15 <span class="op">and</span>
                    magicBytes[9 fixLen 7] = MAGIC_WEBP <span class="keywd">then</span>
                  magic := MAGIC_WEBP;
                <span class="keywd">else</span>
                  magic := MAGIC_RIFF;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">else</span>
                magicBytes &amp;:= gets(inFile, 1);
                <span class="keywd">if</span> length(magicBytes) = 5 <span class="keywd">then</span>
                  <span class="keywd">if</span>  magicBytes = MAGIC_PDF <span class="keywd">then</span>
                    magic := magicBytes;
                  <span class="keywd">else</span>
                    magicBytes &amp;:= gets(inFile, 1);
                    <span class="keywd">if</span> length(magicBytes) = 6 <span class="keywd">then</span>
                      <span class="keywd">if</span>  magicBytes = MAGIC_CPIO_ASCII_OLD <span class="op">or</span>
                          magicBytes = MAGIC_CPIO_ASCII     <span class="op">or</span>
                          magicBytes = MAGIC_CPIO_ASCII_CRC <span class="op">or</span>
                          magicBytes = MAGIC_ELF_32_BIT_LE  <span class="op">or</span>
                          magicBytes = MAGIC_ELF_64_BIT_LE  <span class="op">or</span>
                          magicBytes = MAGIC_ELF_32_BIT_BE  <span class="op">or</span>
                          magicBytes = MAGIC_ELF_64_BIT_BE  <span class="op">or</span>
                          magicBytes = MAGIC_GIF_87         <span class="op">or</span>
                          magicBytes = MAGIC_GIF_89         <span class="op">or</span>
                          magicBytes = MAGIC_RAR            <span class="op">or</span>
                          magicBytes = MAGIC_SEVEN_ZIP      <span class="op">or</span>
                          magicBytes = MAGIC_XZ             <span class="keywd">then</span>
                        magic := magicBytes;
                      <span class="keywd">else</span>
                        magicBytes &amp;:= gets(inFile, 2);
                        <span class="keywd">if</span> length(magicBytes) = 8 <span class="keywd">then</span>
                          <span class="keywd">if</span>  magicBytes = MAGIC_AR  <span class="op">or</span>
                              magicBytes = MAGIC_PNG <span class="keywd">then</span>
                            magic := magicBytes;
                          <span class="keywd">else</span>
                            magicBytes &amp;:= gets(inFile, 8);
                            <span class="keywd">if</span> length(magicBytes) = 16 <span class="keywd">then</span>
                              <span class="keywd">if</span>  magicBytes = MAGIC_SQLITE3 <span class="keywd">then</span>
                                magic := magicBytes;
                              <span class="keywd">else</span>
                                magicBytes &amp;:= gets(inFile, 246);
                                <span class="keywd">if</span> length(magicBytes) = 262 <span class="keywd">then</span>
                                  <span class="keywd">if</span> endsWith(magicBytes, MAGIC_TAR) <span class="keywd">then</span>
                                    magic := MAGIC_TAR;
                                  <span class="keywd">end</span> <span class="keywd">if</span>;
                                <span class="keywd">end</span> <span class="keywd">if</span>;
                              <span class="keywd">end</span> <span class="keywd">if</span>;
                            <span class="keywd">end</span> <span class="keywd">if</span>;
                          <span class="keywd">end</span> <span class="keywd">if</span>;
                        <span class="keywd">end</span> <span class="keywd">if</span>;
                      <span class="keywd">end</span> <span class="keywd">if</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine a description corresponding to a magic number (signature).
 *  @return the description of a magic number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: magicDescription (<span class="op">in</span> <span class="type">string</span>: magic) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: description <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">case</span> magic <span class="keywd">of</span>
      <span class="keywd">when</span> {MAGIC_AR}:               description := <span class="stri">"current ar archive"</span>;
      <span class="keywd">when</span> {MAGIC_BMP}:              description := <span class="stri">"PC bitmap"</span>;
      <span class="keywd">when</span> {MAGIC_CPIO_BINARY_BE,
            MAGIC_CPIO_BINARY_LE,
            MAGIC_CPIO_ASCII_OLD,
            MAGIC_CPIO_ASCII,
            MAGIC_CPIO_ASCII_CRC}:   description := <span class="stri">"cpio archive"</span>;
      <span class="keywd">when</span> {MAGIC_ELF_32_BIT_LE}:    description := <span class="stri">"ELF 32-bit LSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_ELF_64_BIT_LE}:    description := <span class="stri">"ELF 64-bit LSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_ELF_32_BIT_BE}:    description := <span class="stri">"ELF 32-bit MSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_ELF_64_BIT_BE}:    description := <span class="stri">"ELF 64-bit MSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_GIF_87,
            MAGIC_GIF_89}:           description := <span class="stri">"GIF image data"</span>;
      <span class="keywd">when</span> {MAGIC_GZIP}:             description := <span class="stri">"gzip compressed data"</span>;
      <span class="keywd">when</span> {MAGIC_ICO}:              description := <span class="stri">"MS Windows icon resource"</span>;
      <span class="keywd">when</span> {MAGIC_JPEG}:             description := <span class="stri">"JPEG image data"</span>;
      <span class="keywd">when</span> {MAGIC_MACH_O_32_BIT_LE}: description := <span class="stri">"Mach-O 32-bit LSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_MACH_O_64_BIT_LE}: description := <span class="stri">"Mach-O 64-bit LSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_MACH_O_32_BIT_BE}: description := <span class="stri">"Mach-O 32-bit MSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_MACH_O_64_BIT_BE}: description := <span class="stri">"Mach-O 64-bit MSB executable"</span>;
      <span class="keywd">when</span> {MAGIC_PDF}:              description := <span class="stri">"PDF document"</span>;
      <span class="keywd">when</span> {MAGIC_PE}:               description := <span class="stri">"PE executable"</span>;
      <span class="keywd">when</span> {MAGIC_PNG}:              description := <span class="stri">"PNG image data"</span>;
      <span class="keywd">when</span> {MAGIC_PBM_ASCII}:        description := <span class="stri">"Netpbm ASCII bitmap image data"</span>;
      <span class="keywd">when</span> {MAGIC_PGM_ASCII}:        description := <span class="stri">"Netpbm ASCII graymap image data"</span>;
      <span class="keywd">when</span> {MAGIC_PPM_ASCII}:        description := <span class="stri">"Netpbm ASCII pixmap image data"</span>;
      <span class="keywd">when</span> {MAGIC_PBM_BINARY}:       description := <span class="stri">"Netpbm rawbits bitmap image data"</span>;
      <span class="keywd">when</span> {MAGIC_PGM_BINARY}:       description := <span class="stri">"Netpbm rawbits graymap image data"</span>;
      <span class="keywd">when</span> {MAGIC_PPM_BINARY}:       description := <span class="stri">"Netpbm rawbits pixmap image data"</span>;
      <span class="keywd">when</span> {MAGIC_RAR}:              description := <span class="stri">"RAR archive data"</span>;
      <span class="keywd">when</span> {MAGIC_RIFF}:             description := <span class="stri">"RIFF data"</span>;
      <span class="keywd">when</span> {MAGIC_RPM}:              description := <span class="stri">"RPM v3.0"</span>;
      <span class="keywd">when</span> {MAGIC_SEVEN_ZIP}:        description := <span class="stri">"7-zip archive data"</span>;
      <span class="keywd">when</span> {MAGIC_SHEBANG}:          description := <span class="stri">"a script"</span>;
      <span class="keywd">when</span> {MAGIC_SQLITE3}:          description := <span class="stri">"SQLite 3.x database"</span>;
      <span class="keywd">when</span> {MAGIC_TAR}:              description := <span class="stri">"POSIX tar archive"</span>;
      <span class="keywd">when</span> {MAGIC_TIFF_LE,
            MAGIC_TIFF_BE}:          description := <span class="stri">"TIFF image data"</span>;
      <span class="keywd">when</span> {MAGIC_UTF8,
            MAGIC_UTF16LE,
            MAGIC_UTF16BE}:          description := <span class="stri">"Unicode text"</span>;
      <span class="keywd">when</span> {MAGIC_WASM}:             description := <span class="stri">"WebAssembly (wasm) binary module"</span>;
      <span class="keywd">when</span> {MAGIC_WEBP}:             description := <span class="stri">"Web/P image data"</span>;
      <span class="keywd">when</span> {MAGIC_ZIP,
            MAGIC_ZIP_EMPTY}:        description := <span class="stri">"Zip archive data"</span>;
      <span class="keywd">when</span> {MAGIC_XZ}:               description := <span class="stri">"XZ compressed data"</span>;
      <span class="keywd">when</span> {MAGIC_ZSTD}:             description := <span class="stri">"Zstandard compressed data"</span>;
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
