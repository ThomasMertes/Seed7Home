<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  compress.s7i  Compression and decompression functions           *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Compress a string with the run length encoding PackBits.
 *  The PackBits compression is used in TIFF files.
 *  @return the run length encoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toPackBits (<span class="op">in</span> <span class="type">string</span>: uncompressed) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: compressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: pos2 <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: count <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> pos &lt;= length(uncompressed) <span class="keywd">do</span>
      ch := uncompressed[pos];
      pos2 := succ(pos);
      <span class="keywd">while</span> pos2 &lt;= length(uncompressed) <span class="op">and</span> ch = uncompressed[pos2] <span class="keywd">do</span>
        incr(pos2);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">if</span> pos2 - pos >= 2 <span class="keywd">then</span>
        count := pos2 - pos;
        <span class="keywd">while</span> count > 128 <span class="keywd">do</span>
          compressed &amp;:= char(129);
          compressed &amp;:= ch;
          count -:= 128;
        <span class="keywd">end</span> <span class="keywd">while</span>;
        compressed &amp;:= char(257 - count);
        compressed &amp;:= ch;
        pos := pos2;
      <span class="keywd">else</span>
        <span class="keywd">while</span> pos2 &lt; length(uncompressed) <span class="op">and</span>
            (ch &lt;> uncompressed[pos2] <span class="op">or</span> ch &lt;> uncompressed[succ(pos2)]) <span class="keywd">do</span>
          ch := uncompressed[pos2];
          incr(pos2);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">if</span> pos2 &lt; length(uncompressed) <span class="keywd">then</span>
          decr(pos2);
        <span class="keywd">elsif</span> pos2 = length(uncompressed) <span class="keywd">then</span>
          incr(pos2);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        count := pos2 - pos;
        <span class="keywd">while</span> count > 128 <span class="keywd">do</span>
          compressed &amp;:= char(127);
          compressed &amp;:= uncompressed[pos len 128];
          count -:= 128;
        <span class="keywd">end</span> <span class="keywd">while</span>;
        compressed &amp;:= char(pred(count));
        compressed &amp;:= uncompressed[pos len count];
        pos := pos2;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decompress a PackBits run length encoded string.
 *  The PackBits compression is used in TIFF files.
 *  @return the compressed string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: fromPackBits (<span class="op">in</span> <span class="type">string</span>: compressed) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: uncompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> index &lt;= length(compressed) <span class="keywd">do</span>
      number := ord(compressed[index]);
      <span class="keywd">if</span> number &lt;= 127 <span class="keywd">then</span>
        <span class="comment"># Copy a sequence of bytes.</span>
        uncompressed &amp;:= compressed[succ(index) fixLen succ(number)];
        index +:= number + 2;
      <span class="keywd">elsif</span> number = 128 <span class="keywd">then</span>
        <span class="comment"># No operation.</span>
        incr(index);
      <span class="keywd">else</span>
        <span class="comment"># Make copies of the next byte.</span>
        uncompressed &amp;:= str(compressed[succ(index)]) <span class="op">mult</span> 257 - number;
        index +:= 2;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compress a string with the run length encoding PackBits of PDF.
 *  In the PackBits encoding of PDF '\128';' encodes the end of data.
 *  @return the run length encoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toPackBitsPdf (<span class="op">in</span> <span class="type">string</span>: uncompressed) <span class="keywd">is</span>
  <span class="keywd">return</span> toPackBits(uncompressed) &amp; <span class="stri">"\128;"</span>;


<span class="comment">(**
 *  Decompress a PDF PackBits run length encoded string.
 *  In the PackBits encoding of PDF '\128';' encodes the end of data.
 *  @return the compressed string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: fromPackBitsPdf (<span class="op">in</span> <span class="type">string</span>: compressed) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: uncompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">char</span>: endOfData <span class="keywd">is</span> <span class="stri">'\128;'</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> index &lt;= length(compressed) <span class="op">and</span> compressed[index] &lt;> endOfData <span class="keywd">do</span>
      number := ord(compressed[index]);
      <span class="keywd">if</span> number &lt;= 127 <span class="keywd">then</span>
        <span class="comment"># Copy a sequence of bytes.</span>
        uncompressed &amp;:= compressed[succ(index) fixLen succ(number)];
        index +:= number + 2;
      <span class="keywd">else</span>
        <span class="comment"># Make copies of the next byte.</span>
        uncompressed &amp;:= str(compressed[succ(index)]) <span class="op">mult</span> 257 - number;
        index +:= 2;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
