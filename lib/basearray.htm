<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  basearray.s7i  Support for arrays with a fixed minimum index.   *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Abstract data type, describing arrays with a fixed minimum [[integer]] index.
 *  A base array type defines the minimum allowed index.
 *  All arrays declared with this type have the same minimum index.
 *  All abstract base array types are incompatible to each other.
 *  A type declaration is needed to use the same fixed size array type
 *  at several places. E.g.:
 *    const type: nameList is array [1 .. ] string;
 *  afterwards ''nameList'' can be used in declarations. E.g.:
 *    var nameList: aNameList is nameList.value;
 *  @param minIdx Minimum index of the array type.
 *  @param baseType Type of the array elements.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: <span class="type">array</span> <span class="type">[</span> (<span class="op">in</span> <span class="type">integer</span>: minIdx) .. ] (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: tupleType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: maxIndexType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    global
      arrayType := newtype;
      IN_PARAM_IS_REFERENCE(arrayType);
      tupleType := tuple(baseType);
      maxIndexType := newtype;
      IN_PARAM_IS_VALUE(maxIndexType);

      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">arrayType</span>: dest) ::= (<span class="op">in</span> <span class="type">arrayType</span>: source)            <span class="keywd">is</span> action <span class="stri">"ARR_CREATE"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">arrayType</span>: aValue)                             <span class="keywd">is</span> action <span class="stri">"ARR_DESTR"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: dest) := (<span class="op">in</span> <span class="type">arrayType</span>: source)           <span class="keywd">is</span> action <span class="stri">"ARR_CPY"</span>;

      <span class="comment">(**
       *  Append the array ''extension'' to the array ''arr''.
       *  @exception MEMORY_ERROR Not enough memory for the concatenated
       *             array.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) &amp;:= (<span class="op">in</span> <span class="type">arrayType</span>: extension)        <span class="keywd">is</span> action <span class="stri">"ARR_APPEND"</span>;

      <span class="comment">(**
       *  Append the given ''element'' to the array ''arr''.
       *  @exception MEMORY_ERROR Not enough memory for the concatenated
       *             array.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) &amp;:= (<span class="op">in</span> <span class="type">baseType</span>: element)           <span class="keywd">is</span> action <span class="stri">"ARR_PUSH"</span>;

      <span class="comment">(**
       *  Concatenate two arrays.
       *  @return the result of the concatenation.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr1) &amp; (<span class="op">in</span> <span class="type">arrayType</span>: arr2)       <span class="keywd">is</span> action <span class="stri">"ARR_CAT"</span>;

      <span class="comment">(**
       *  Access one element from the array ''arr''.
       *  @return the element with the specified ''index'' from ''arr''.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(in_arrayType)|minIdx]](arr) or
       *                         greater than [[#maxIdx(in_arrayType)|maxIdx]](arr)
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: index) ]        <span class="keywd">is</span> action <span class="stri">"ARR_IDX"</span>;

      <span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">baseType</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: index) ]  <span class="keywd">is</span> action <span class="stri">"ARR_IDX"</span>;

      <span class="comment">(**
       *  Get a sub array beginning at the position ''start''.
       *  @return the sub array beginning at the start position.
       *  @exception INDEX_ERROR The start position is less than [[#minIdx(in_arrayType)|minIdx]](arr).
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: start) .. ]    <span class="keywd">is</span> action <span class="stri">"ARR_TAIL"</span>;

      <span class="comment">(**
       *  Get a sub array ending at the position ''stop''.
       *  @return the sub array ending at the stop position.
       *  @exception INDEX_ERROR The stop position is less than pred([[#minIdx(in_arrayType)|minIdx]](arr)).
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr) [ .. (<span class="op">in</span> <span class="type">integer</span>: stop) ]     <span class="keywd">is</span> action <span class="stri">"ARR_HEAD"</span>;

      <span class="comment">(**
       *  Get a sub array from the position ''start'' to the position ''stop''.
       *  @return the sub array from position ''start'' to ''stop''.
       *  @exception INDEX_ERROR The start position is less than [[#minIdx(in_arrayType)|minIdx]](arr1), or
       *                         the stop position is less than pred(start).
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: start) ..
                                                  (<span class="op">in</span> <span class="type">integer</span>: stop) ]        <span class="keywd">is</span> action <span class="stri">"ARR_RANGE"</span>;

      <span class="comment">(**
       *  Get a sub array from the position ''start'' with maximum length ''len''.
       *  @return the sub array from position ''start'' with maximum length ''len''.
       *  @exception INDEX_ERROR The start position is less than [[#minIdx(in_arrayType)|minIdx]](arr), or
       *                         the length is negative.
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: start) len
                                                  (<span class="op">in</span> <span class="type">integer</span>: length) ]      <span class="keywd">is</span> action <span class="stri">"ARR_SUBARR"</span>;

      <span class="comment">(**
       *  Insert ''element'' at ''index'' into ''arr''.
       *  Elements are moved backward to create space for the element to be
       *  inserted. This function is tuned for performance and the movement
       *  works without copying elements.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(in_arrayType)|minIdx]](arr) or
       *                         greater than succ([[#maxIdx(in_arrayType)|maxIdx]](arr))
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: insert (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr, <span class="op">in</span> <span class="type">integer</span>: index,
                          <span class="op">in</span> <span class="type">baseType</span>: element)                               <span class="keywd">is</span> action <span class="stri">"ARR_INSERT"</span>;

      <span class="comment">(**
       *  Insert ''elements'' at ''index'' into ''arr''.
       *  Elements are moved backward to create space for the elements to be
       *  inserted. This function is tuned for performance and the movement
       *  works without copying elements.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(in_arrayType)|minIdx]](arr) or
       *                         greater than succ([[#maxIdx(in_arrayType)|maxIdx]](arr))
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: insert (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr, <span class="op">in</span> <span class="type">integer</span>: index,
                          <span class="op">in</span> <span class="type">arrayType</span>: elements)                             <span class="keywd">is</span> action <span class="stri">"ARR_INSERT_ARRAY"</span>;

      <span class="comment">(**
       *  Remove the element with ''index'' from ''arr''.
       *  The elements after the removed element are moved forward.
       *  This function is tuned for performance and the movement works
       *  without copying elements.
       *  @return the removed element.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(in_arrayType)|minIdx]](arr) or
       *                         greater than [[#maxIdx(in_arrayType)|maxIdx]](arr)
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: remove (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr, <span class="op">in</span> <span class="type">integer</span>: index)   <span class="keywd">is</span> action <span class="stri">"ARR_REMOVE"</span>;

      <span class="comment">(**
       *  Remove the sub-array with ''index'' and ''length'' from ''arr''.
       *  The elements after the removed sub-array are moved forward.
       *  This function is tuned for performance and the movement works
       *  without copying elements.
       *  @return the removed sub-array.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(in_arrayType)|minIdx]](arr) or
       *                         greater than [[#maxIdx(in_arrayType)|maxIdx]](arr)
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: remove (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr, <span class="op">in</span> <span class="type">integer</span>: index,
                                    <span class="op">in</span> <span class="type">integer</span>: length)                       <span class="keywd">is</span> action <span class="stri">"ARR_REMOVE_ARRAY"</span>;

      <span class="comment">(**
       *  Determine the length of the array ''arr''.
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">arrayType</span>: arr)                          <span class="keywd">is</span> action <span class="stri">"ARR_LNG"</span>;

      <span class="comment">(**
       *  Minimum index of all arrays declared with ''arrayType''.
       *  All arrays declared with ''arrayType'' have this minimum index.
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: minIdx (attr arrayType) <span class="keywd">is</span> minIdx;

      <span class="comment">(**
       *  Minimum index of array ''arr''.
       *  The minimum index of a fixed size array does not depend on the value.
       *  @return the minimum index of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: minIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span> minIdx;

      <span class="comment">(**
       *  Maximum index of array ''arr''.
       *  @return the maximum index of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: maxIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr)                          <span class="keywd">is</span> action <span class="stri">"ARR_MAXIDX"</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: SET_MIN_IDX (paren1, <span class="op">in</span> <span class="type">integer</span>: start, paren2,
                                         <span class="op">in</span> <span class="type">tupleType</span>: aTuple, attr arrayType)   <span class="keywd">is</span> action <span class="stri">"ARR_ARRLIT2"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: SET_MIN_IDX (paren1, <span class="op">in</span> <span class="type">integer</span>: start, paren2,
                                         <span class="op">in</span> <span class="type">baseType</span>: anElement, attr arrayType) <span class="keywd">is</span> action <span class="stri">"ARR_BASELIT2"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: SET_MIN_IDX (paren1, <span class="op">in</span> <span class="type">integer</span>: start, paren2,
                                         <span class="op">in</span> <span class="type">arrayType</span>: arr)                      <span class="keywd">is</span> action <span class="stri">"ARR_ARRLIT2"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: TIMES (<span class="op">in</span> <span class="type">integer</span>: factor, <span class="op">times</span>,
                                   <span class="op">in</span> <span class="type">baseType</span>: element, attr arrayType)         <span class="keywd">is</span> action <span class="stri">"ARR_TIMES"</span>;

      <span class="keywd">const</span> <span class="type">arrayType</span>: (attr arrayType) . value <span class="keywd">is</span>
          SET_MIN_IDX(paren1, minIdx, paren2,
                      TIMES(0, <span class="op">times</span>, baseType.value, arrayType));

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (attr arrayType) [] (<span class="op">in</span> <span class="type">tupleType</span>: aTuple) <span class="keywd">is</span>
          <span class="keywd">return</span> SET_MIN_IDX(paren1, minIdx, paren2, aTuple, arrayType);

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (attr arrayType) [] (<span class="op">in</span> <span class="type">baseType</span>: anElement) <span class="keywd">is</span>
          <span class="keywd">return</span> SET_MIN_IDX(paren1, minIdx, paren2, anElement, arrayType);

      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">maxIndexType</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">maxIndexType</span>: source)        <span class="keywd">is</span> action <span class="stri">"INT_CREATE"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">maxIndexType</span>: dest) := (<span class="op">in</span> <span class="type">maxIndexType</span>: source)        <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">maxIndexType</span>: aValue)                             <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">maxIndexType</span>: maxIndex)                        <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">maxIndexType</span>: (attr maxIndexType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number)     <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">maxIndexType</span>: (attr arrayType) [ .. (<span class="op">in</span> <span class="type">integer</span>: maxIdx) ] <span class="keywd">is</span>
          <span class="keywd">return</span> maxIndexType <span class="op">conv</span> maxIdx;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (<span class="op">in</span> <span class="type">maxIndexType</span>: maxIndex) <span class="op">times</span> (<span class="op">in</span> <span class="type">baseType</span>: element) <span class="keywd">is</span>
          <span class="keywd">return</span> SET_MIN_IDX(paren1, minIdx, paren2,
                             TIMES(succ(ord(maxIndex) - minIdx), <span class="op">times</span>, element, arrayType));

      <span class="comment">(**
       *  For-loop where ''forVar'' loops over the elements of the array ''arr''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> number <span class="keywd">range</span> minIdx <span class="keywd">to</span> maxIdx(arr) <span class="keywd">do</span>
            forVar := arr[number];
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''keyVar'' loops over the indices of the array ''arr''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> keyVar <span class="keywd">range</span> minIdx <span class="keywd">to</span> maxIdx(arr) <span class="keywd">do</span>
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''forVar'' and ''keyVar'' loop over the array ''arr''.
       *  The variable ''forVar'' loops over the elements of ''arr''
       *  and ''keyVar'' loops over the indices of ''arr''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar) <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> keyVar <span class="keywd">range</span> minIdx <span class="keywd">to</span> maxIdx(arr) <span class="keywd">do</span>
            forVar := arr[keyVar];
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''forVar'' loops over the elements of the array ''arr''.
       *  Additionally a ''condition'' is checked before the statements in
       *  the loop body are executed.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar)
                  <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)
                  <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
          <span class="keywd">var</span> <span class="type">integer</span>: maxIdx <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          index := minIdx;
          maxIdx := maxIdx(arr);
          <span class="keywd">if</span> index &lt;= maxIdx <span class="keywd">then</span>
            forVar := arr[index];
            <span class="keywd">while</span> index &lt;= maxIdx <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
              statements;
              incr(index);
              <span class="keywd">if</span> index &lt;= maxIdx <span class="keywd">then</span>
                forVar := arr[index];
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar)
                  <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)
                  <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
          <span class="keywd">var</span> <span class="type">integer</span>: maxIdx <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          index := minIdx;
          maxIdx := maxIdx(arr);
          <span class="keywd">if</span> index &lt;= maxIdx <span class="keywd">then</span>
            forVar := arr[index];
            <span class="keywd">while</span> index &lt;= maxIdx <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
              statements;
              incr(index);
              <span class="keywd">if</span> index &lt;= maxIdx <span class="keywd">then</span>
                forVar := arr[index];
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''keyVar'' loops over the indices of the array ''arr''.
       *  Additionally a ''condition'' is checked before the statements in
       *  the loop body are executed.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar)
                  <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)
                  <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> keyVar <span class="keywd">range</span> minIdx <span class="keywd">to</span> maxIdx(arr) <span class="keywd">until</span> condition <span class="keywd">do</span>
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar)
                  <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)
                  <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">for</span> keyVar <span class="keywd">range</span> minIdx <span class="keywd">to</span> maxIdx(arr) <span class="keywd">until</span> condition <span class="keywd">do</span>
            statements;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''forVar'' and ''keyVar'' loop over the array ''arr''.
       *  The variable ''forVar'' loops over the elements of ''arr''
       *  and ''keyVar'' loops over the indices of ''arr''.
       *  Additionally a ''condition'' is checked before the statements in
       *  the loop body are executed.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar)
                  <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar)
                  <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)
                  <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: maxIdx <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          keyVar := minIdx;
          maxIdx := maxIdx(arr);
          <span class="keywd">if</span> keyVar &lt;= maxIdx <span class="keywd">then</span>
            forVar := arr[keyVar];
            <span class="keywd">while</span> keyVar &lt;= maxIdx <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
              statements;
              incr(keyVar);
              <span class="keywd">if</span> keyVar &lt;= maxIdx <span class="keywd">then</span>
                forVar := arr[keyVar];
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: forVar)
                  <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar)
                  <span class="keywd">range</span> (<span class="op">in</span> <span class="type">arrayType</span>: arr)
                  <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: maxIdx <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          keyVar := minIdx;
          maxIdx := maxIdx(arr);
          <span class="keywd">if</span> keyVar &lt;= maxIdx <span class="keywd">then</span>
            forVar := arr[keyVar];
            <span class="keywd">while</span> keyVar &lt;= maxIdx <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
              statements;
              incr(keyVar);
              <span class="keywd">if</span> keyVar &lt;= maxIdx <span class="keywd">then</span>
                forVar := arr[keyVar];
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Select a random element from ''arr''.
       *  The pseudo-random indices of the elements are uniform distributed.
       *  @return a random element from ''arr''.
       *  @exception RANGE_ERROR If ''arr'' is empty.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: rand (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span>
        <span class="keywd">return</span> arr[rand(minIdx, maxIdx(arr))];

      <span class="keywd">if</span> getobj((<span class="op">in</span> <span class="type">baseType</span>: element1) = (<span class="op">in</span> <span class="type">baseType</span>: element2)) &lt;> NIL <span class="op">and</span>
          getobj((<span class="op">in</span> <span class="type">baseType</span>: element1) &lt;> (<span class="op">in</span> <span class="type">baseType</span>: element2)) &lt;> NIL <span class="keywd">then</span>

        <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr1) = (<span class="op">in</span> <span class="type">arrayType</span>: arr2) <span class="keywd">is</span> <span class="keywd">func</span>
          <span class="keywd">result</span>
            <span class="keywd">var</span> <span class="type">boolean</span>: isEqual <span class="keywd">is</span> FALSE;
          <span class="keywd">local</span>
            <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 1;
          <span class="keywd">begin</span>
            <span class="keywd">if</span> maxIdx(arr1) = maxIdx(arr2) <span class="keywd">then</span>
              isEqual := TRUE;
              <span class="keywd">while</span> number &lt;= maxIdx(arr1) <span class="op">and</span> isEqual <span class="keywd">do</span>
                isEqual := arr1[number] = arr2[number];
                incr(number);
              <span class="keywd">end</span> <span class="keywd">while</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">func</span>;

        <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr1) &lt;> (<span class="op">in</span> <span class="type">arrayType</span>: arr2) <span class="keywd">is</span> <span class="keywd">func</span>
          <span class="keywd">result</span>
            <span class="keywd">var</span> <span class="type">boolean</span>: isNotEqual <span class="keywd">is</span> TRUE;
          <span class="keywd">local</span>
            <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 1;
          <span class="keywd">begin</span>
            <span class="keywd">if</span> maxIdx(arr1) = maxIdx(arr2) <span class="keywd">then</span>
              isNotEqual := FALSE;
              <span class="keywd">while</span> number &lt;= maxIdx(arr1) <span class="op">and</span> <span class="op">not</span> isNotEqual <span class="keywd">do</span>
                isNotEqual := arr1[number] &lt;> arr2[number];
                incr(number);
              <span class="keywd">end</span> <span class="keywd">while</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">end</span> <span class="keywd">if</span>;

    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
