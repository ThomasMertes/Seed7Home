<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  cc_conf.s7i   Configuration values for C compiler and runtime.  *)</span>
<span class="comment">(*  Copyright (C) 2013 - 2021  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/shell.htm">shell.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/propertyfile.htm">propertyfile.s7i</a>"</span>;


<span class="comment">(**
 *  Structure to describe C compiler and runtime library.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: ccConfigType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>

    <span class="comment">(**
     *  TRUE if the Seed7 runtime library uses strings with capacity.
     *  The capacity of a string can be larger than its size.
     *  Strings with capacity can be enlarged without calling realloc().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: WITH_STRI_CAPACITY           <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the actual characters of a string can be stored elsewhere.
     *  This allows string slices without the need to copy characters.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: ALLOW_STRITYPE_SLICES        <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the actual characters of a bstring can be stored elsewhere.
     *  This allows bstring slices without the need to copy characters.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: ALLOW_BSTRITYPE_SLICES       <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if right shifts preserve the sign of negative signed integers.
     *  The C standard specifies that the right shift of signed integers is
     *  implementation defined, if the shifted values are negative.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: RSHIFT_DOES_SIGN_EXTEND      <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if signed integers are represented as twos complement numbers.
     *  This allows some simplified range checks in compiled programs.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: TWOS_COMPLEMENT_INTTYPE      <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the byte ordering of integers is little endian.
     *  With little endian byte ordering it is possible to get the elements
     *  of a union by casting the union to the desired element type.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LITTLE_ENDIAN_INTTYPE        <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if float comparisons with NaN and negative zero work okay.
     *  A comparison between NaN and any other value should return FALSE.
     *  Negative zero should be considered as identical to positive zero.
     *  Comparison refers to comparisons with  ==  &lt;  >  &lt;=  or  >= .
     *  If FLOAT_COMPARISON_OKAY is FALSE fltEq(), fltLt(), fltGt(), fltLe()
     *  and fltGe() should be used to do comparisons of float values.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: FLOAT_COMPARISON_OKAY        <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if pow() works okay for a base of zero, one and NaN.
     *  If it is FALSE fltPow() should be used instead of pow().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: POW_FUNCTION_OKAY            <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if fmod() works okay for Infinity, NaN and zero.
     *  If it is FALSE fltRem() should be used instead of fmod().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: FMOD_FUNCTION_OKAY           <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if sqrt() works okay for a negative argument and NaN.
     *  If it is FALSE fltSqrt() should be used instead of sqrt().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: SQRT_FUNCTION_OKAY           <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if exp() works okay for NaN.
     *  If it is FALSE fltExp() should be used instead of exp().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: EXP_FUNCTION_OKAY            <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if log() works okay for zero, negative values and NaN.
     *  If it is FALSE fltLog() should be used instead of log().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LOG_FUNCTION_OKAY            <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if log10() works okay for zero, negative values and NaN.
     *  If it is FALSE fltLog10() should be used instead of log10().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LOG10_FUNCTION_OKAY          <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if log1p() works okay for -1.0, values &lt; -1.0 and NaN.
     *  If it is FALSE fltLog1p() should be used instead of log1p().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LOG1P_FUNCTION_OKAY          <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if log2() works okay for zero, negative values and NaN.
     *  If it is FALSE fltLog2() should be used instead of log2().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LOG2_FUNCTION_OKAY           <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if ldexp() works okay for NaN.
     *  If it is FALSE fltLdexp() should be used instead of lsexp().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LDEXP_FUNCTION_OKAY          <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if frexp() works okay for Infinity, NaN and subnormal numbers.
     *  If it is FALSE fltDecompose() should be used instead of frexp().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: FREXP_FUNCTION_OKAY          <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the functions sigsetjmp() and siglongjmp() are available.
     *  If it is FALSE the functions setjmp() and longjmp() must
     *  be used instead.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: HAS_SIGSETJMP                <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if integer divisions must be checked for a division by zero.
     *  This applies to the division operations div and mdiv.
     *  The generated C code should, if a division by zero occurs,
     *  raise the exception NUMERIC_ERROR instead of doing the
     *  illegal divide operation. If CHECK_INT_DIV_BY_ZERO is FALSE
     *  a division by zero always triggers SIGFPE. SIGFPE is caught
     *  by the Seed7 run-time library and triggers a NUMERIC_ERROR.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CHECK_INT_DIV_BY_ZERO        <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C expression 0/0 might not trigger SIGFPE.
     *  C compilers assume that so called "undefined behavior" will
     *  not happen. According to the C standard a division by 0
     *  triggers undefined behavior. This way a C compiler is allowed
     *  to optimize the expressions 0/0 and 0/variable to 0. Likewise
     *  the expression variable/variable can be optimized to 1.
     *  In Seed7 a division by zero is defined behavior, since it
     *  raises the exception NUMERIC_ERROR. This configuration
     *  setting applies to the division operations div and mdiv.
     *  The generated C code should, if a division by zero occurs,
     *  raise the exception NUMERIC_ERROR instead of allowing the
     *  C compiler to do its optimization.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CHECK_INT_DIV_ZERO_BY_ZERO   <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if integer remainder must be checked for a division by zero.
     *  This applies to the division operations rem and mod.
     *  The generated C code should, if a remainder by zero occurs,
     *  raise the exception NUMERIC_ERROR instead of doing the
     *  illegal divide operation. If CHECK_INT_REM_BY_ZERO is FALSE
     *  a remainder by zero always triggers SIGFPE. SIGFPE is caught
     *  by the Seed7 run-time library and triggers a NUMERIC_ERROR.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CHECK_INT_REM_BY_ZERO        <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C expression 0%0 might not trigger SIGFPE.
     *  C compilers assume that so called "undefined behavior" will
     *  not happen. According to the C standard a division by 0
     *  triggers undefined behavior. This way a C compiler is allowed
     *  to optimize the expressions 0%0 and 0%variable to 0. Likewise
     *  the expression variable%variable can be optimized to 0.
     *  In Seed7 a division by zero is defined behavior, since it
     *  raises the exception NUMERIC_ERROR. This configuration
     *  setting applies to the division operations rem and mod.
     *  The generated C code should, if a division by zero occurs,
     *  raise the exception NUMERIC_ERROR instead of allowing the
     *  C compiler to do its optimization.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CHECK_INT_REM_ZERO_BY_ZERO   <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if floating point divisions by zero cause compilation errors.
     *  Some C compilers check if the dividend is 0.0 and classify a
     *  floating point division by zero as fatal compilation error.
     *  Some C compilers even trigger wrong behavior if the dividend
     *  is 0.0. In this case FLOAT_ZERO_DIV_ERROR is also TRUE.
     *  If FLOAT_ZERO_DIV_ERROR is TRUE the generated C code should
     *  avoid divisions by zero and generate code to return Infinity,
     *  -Infinity or NaN instead.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: FLOAT_ZERO_DIV_ERROR         <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if floating point divisions by zero don't conform to IEEE 754.
     *  According to IEEE 754 a floating point division by zero should
     *  return Infinity, -Infinity or NaN. In this case the compiler
     *  generates C code, which checks all float divisions ( / and /:= )
     *  for division by zero. The generated C code should return
     *  Infinity, -Infinity or NaN instead of doing the divide operation.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CHECK_FLOAT_DIV_BY_ZERO      <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C function exp2() is present.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: HAS_EXP2                     <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C function exp10() is present.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: HAS_EXP10                    <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C function expm1() is present.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: HAS_EXPM1                    <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C function cbrt() is present.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: HAS_CBRT                     <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the C compiler limits the length of string literals.
     *  Some C compilers limit the maximum string literal length.
     *  There are limits of 2,048 bytes and 16,384 (16K) bytes.
     *  The actual limit is not interesting, but the fact that a
     *  limit exists or does not exist.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LIMITED_CSTRI_LITERAL_LEN    <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if switch statements work with 64-bit values.
     *  If it is FALSE a switch statement with a 64-bit value
     *  triggers a compile error.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: SWITCH_WORKS_FOR_INT64TYPE   <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if a compound statement is allowed in a parentesized expression.
     *  If it is FALSE a compound statement block in a parentesized expression
     *  triggers a compile error.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: STMT_BLOCK_IN_PARENTHESES_OK <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if #line directives can use UTF-8 encoded file names.
     *  The file names from #line directives are used by the debugger to
     *  allow source code debugging.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CC_SOURCE_UTF8               <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the main function is named wmain.
     *  This is a way to support Unicode command line arguments under Windows.
     *  An alternate way to support Unicode command line arguments under
     *  Windows uses the functions getUtf16Argv() and freeUtf16Argv() (both
     *  defined in "cmd_win.c").
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: USE_WMAIN                    <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the main function is named WinMain.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: USE_WINMAIN                  <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the main function must be terminated with doExit().
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: USE_DO_EXIT               <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  TRUE if the type ''floatType'' is ''double''.
     *  If it is FALSE ''floatType'' is ''float''.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: FLOATTYPE_DOUBLE             <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  Size of the type ''intType'' in bits (either 32 or 64).
     *  A typedef can define ''intType'' as ''int32Type'' respectively
     *  ''int64Type''.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INTTYPE_SIZE                 <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Size of the type ''floatType'' in bits.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: FLOATTYPE_SIZE               <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Size of a pointer in bits.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: POINTER_SIZE                 <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  The maximum of INTTYPE_SIZE, FLOATTYPE_SIZE and POINTER_SIZE.
     *  This is also the size in bits of the types ''rtlValueUnion'',
     *  ''rtlObjectType'' and ''genericType'' (defined in data_rtl.h).
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: GENERIC_SIZE                 <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Size of the type ''int'' in bits.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INT_SIZE                     <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Minimum value of the type ''int''.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INT_MIN                      <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Maximum value of the type ''int''.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INT_MAX                      <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Size of the type ''long'' in bits.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: LONG_SIZE                    <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Number of mantissa bits in the binary ''floatType'' representation.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: FLOATTYPE_MANTISSA_BITS      <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Exponent offset in the binary ''floatType'' representation.
     *  To get the actual exponent the offset must be subtracted.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: FLOATTYPE_EXPONENT_OFFSET    <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Maximum from the continuous range of integers that map to floats.
     *  All integers from -INT_RANGE_IN_FLOATTYPE_MAX to
     *  INT_RANGE_IN_FLOATTYPE_MAX can be converted to ''floatType''
     *  and back to ''intType'' without loss.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INT_RANGE_IN_FLOATTYPE_MAX   <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Minimum value that trunc() or round() can convert.
     *  Values below MINIMUM_TRUNC_ARGUMENT raise RANGE_ERROR,
     *  if trunc() or round() is applied to them.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: MINIMUM_TRUNC_ARGUMENT       <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Maximum value that trunc() or round() can convert.
     *  Values above MAXIMUM_TRUNC_ARGUMENT raise RANGE_ERROR,
     *  if trunc() or round() is applied to them.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: MAXIMUM_TRUNC_ARGUMENT       <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Mask for the red color in a pixel.
     *  0 if there is no mapping and drwRgbColor() should be used.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: PIXEL_RED_MASK               <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Mask for the green color in a pixel.
     *  0 if there is no mapping and drwRgbColor() should be used.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: PIXEL_GREEN_MASK             <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Mask for the blue color in a pixel.
     *  0 if there is no mapping and drwRgbColor() should be used.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: PIXEL_BLUE_MASK              <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Name of the variable deciding between macro and drwRgbColor().
     *  "" if no variable needs to be checked.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: RGB_TO_PIXEL_FLAG_NAME        <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Multiplier for the linear congruential generator.
     *  A well known pseudorandom number generator algorithm.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: RAND_MULTIPLIER              <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Increment for the linear congruential generator.
     *  A well known pseudorandom number generator algorithm.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: RAND_INCREMENT               <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Name of a type for the boolean values 0 and 1.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''boolType'' with BOOLTYPE.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: BOOLTYPE                      <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of a signed integer type that is 32 bits wide.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''int32Type'' with INT32TYPE.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: INT32TYPE                     <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of an unsigned integer type that is 32 bits wide.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''uint32Type'' with UINT32TYPE.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: UINT32TYPE                    <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of a signed integer type that is 64 bits wide.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''int64Type'' with INT64TYPE.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: INT64TYPE                     <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of an unsigned integer type that is 64 bits wide.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''uint64Type'' with UINT64TYPE.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: UINT64TYPE                    <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of a signed integer type that is 128 bits wide.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''int128Type'' with INT128TYPE. Empty string if
     *  there is no 128-bit signed integer type.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: INT128TYPE                    <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of an unsigned integer type that is 128 bits wide.
     *  The runtime library and the compiler use a typedef to define
     *  the type ''uint128Type'' with UINT128TYPE. Empty string if
     *  there is no 128-bit unsigned integer type.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: UINT128TYPE                   <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The suffix used by the literals of the 32 bits wide integer type.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: INT32TYPE_LITERAL_SUFFIX      <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The suffix used by the literals of the 64 bits wide integer type.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: INT64TYPE_LITERAL_SUFFIX      <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Definition of several macros (likely, unlikely, noreturn).
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: MACRO_DEFS                    <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the signal that is raised if a signed integer overflow
     *  occurs. OVERFLOW_SIGNAL is an empty string, if a signed integer
     *  overflow does not raise a signal. The C compiler option
     *  CC_OPT_TRAP_OVERFLOW is used to generate traps for signed
     *  integer overflow.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: OVERFLOW_SIGNAL               <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of a C compiler builtin function to add with overflow check.
     *  Empty string if there is no such builtin function.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: BUILTIN_ADD_OVERFLOW          <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of a C compiler builtin function to subtract with overflow check.
     *  Empty string if there is no such builtin function.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: BUILTIN_SUB_OVERFLOW          <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of a C compiler builtin function to multiply with overflow check.
     *  Empty string if there is no such builtin function.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: BUILTIN_MULT_OVERFLOW         <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Defines what happens in case of an integer division overflow.
     *  An integer division can overflow with ''integer.first div -1''.
     *  In this case the following things can happen:
     *  * 0 it triggers an endless loop.
     *  * 1 it triggers a popup window.
     *  * 2 it returns integer.first.
     *  * 3 it returns some other value.
     *  * 4 it raises SIGFPE.
     *  * 5 it raises SIGILL.
     *  * 6 it raises SIGABRT.
     *  * 7 it raises SIGTRAP.
     *  In case of 0 (endless loop) the compiler
     *  must always check for an integer division overflow.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INT_DIV_OVERFLOW             <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Defines what happens in case of an integer remainder overflow.
     *  An integer remainder can overflow with ''integer.first rem -1''.
     *  In this case the following things can happen:
     *  * 0 it triggers an endless loop.
     *  * 1 it triggers a popup window.
     *  * 2 it returns 0.
     *  * 3 it returns some other value.
     *  * 4 it raises SIGFPE.
     *  * 5 it raises SIGILL.
     *  * 6 it raises SIGABRT.
     *  * 7 it raises SIGTRAP.
     *  In case of 0 (endless loop) the compiler
     *  must always check for an integer remainder overflow.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: INT_REM_OVERFLOW             <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  The extension used by the C compiler for object files.
     *  Several object files and libraries are linked together to
     *  an executable. Under Linux/Unix/BSD this is usually ".o".
     *  Under Windows this is ".o" for MinGW and Cygwin,
     *  but ".obj" for other compilers.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: OBJECT_FILE_EXTENSION         <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The extension used by the linker for static libraries.
     *  Several object files can be grouped to a library. Under
     *  Linux/Unix/BSD this is usually ".a". Under Windows this is
     *  ".a" for MinGW and Cygwin, but ".lib" for other linkers.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LIBRARY_FILE_EXTENSION        <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The extension used by the operating system for executables.
     *  Since executable extensions are not used under
     *  Linux/Unix/BSD it is "" for them. Under Windows
     *  the value ".exe" is used.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: EXECUTABLE_FILE_EXTENSION     <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The extension of the file produced by linking a program.
     *  Normally this is identical to the EXECUTABLE_FILE_EXTENSION,
     *  but in case of Emscripten this is independent from the
     *  EXECUTABLE_FILE_EXTENSION.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LINKED_PROGRAM_EXTENSION      <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Path to an INI file with the environment for the C compiler.
     *  If it is "" the C compiler does not need environment settings.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: CC_ENVIRONMENT_INI            <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Command to call the stand-alone C compiler and linker.
     *  Most IDEs provide also a stand-alone compiler/linker.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: C_COMPILER                    <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="keywd">var</span> <span class="type">string</span>: CPLUSPLUS_COMPILER            <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  TRUE if C compiler and linker must be called via the shell.
     *  If it is FALSE C compiler and linker processes are started
     *  direct.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: CALL_C_COMPILER_FROM_SHELL   <span class="keywd">is</span> FALSE;

    <span class="keywd">var</span> <span class="type">string</span>: C_COMPILER_VERSION            <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to add source level debugging information.
     *  With this option source level debugging information is
     *  added to the object file.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: CC_OPT_DEBUG_INFO       <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to do link time optimization.
     *  If it is "" the C compiler does not support link time optimization.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: CC_OPT_LINK_TIME_OPTIMIZATION <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to suppress all warnings.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: CC_OPT_NO_WARNINGS            <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to optimize with a level of -O1.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: CC_OPT_OPTIMIZE_1       <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to optimize with a level of -O2.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: CC_OPT_OPTIMIZE_2       <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to optimize with a level of -O3.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: CC_OPT_OPTIMIZE_3       <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to generate traps for signed integer overflow.
     *  An integer overflow in the compiled program will trigger the
     *  signal defined with OVERFLOW_SIGNAL. CC_OPT_TRAP_OVERFLOW is
     *  an empty string, if the C compiler does not support such an
     *  option or if traps would not lead to a performance advantage.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: CC_OPT_TRAP_OVERFLOW          <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler option to write the C compiler version information.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: CC_OPT_VERSION_INFO           <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  C compiler flags to be used if C programs are compiled.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: CC_FLAGS                <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  File descriptor to which the C compiler writes errors.
     *  The MSVC stand-alone C compiler (CL) writes the error
     *  messages to standard output (file descriptor 1).
     *  The C compilers of Linux/Unix/BSD and the compilers from
     *  MinGW and Cygwin write the error messages to the error
     *  output (file descriptor 2).
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: CC_ERROR_FILEDES             <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  File descriptor to which the C compiler writes its version info.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: CC_VERSION_INFO_FILEDES      <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Linker option to add source level debugging information.
     *  With this option source level debugging information is
     *  added to the executable file. (e.g.: "-Z7" or "-v").
     *  Many compiler/linker combinations don't need this option
     *  to do source level debugging (use "").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LINKER_OPT_DEBUG_INFO         <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  TRUE if linking always requires the option
     *  CC_OPT_LINK_TIME_OPTIMIZATION.
     *)</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: LINKER_OPT_LTO_MANDATORY     <span class="keywd">is</span> FALSE;

    <span class="comment">(**
     *  Linker option to be used without source level debugging.
     *  This option can strip debug information (e.g.: "-Wl,--strip-debug").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LINKER_OPT_NO_DEBUG_INFO      <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Linker option to provide the output filename (e.g.: "-o ").
     *  If no such option exists the value of LINKER_OPT_OUTPUT_FILE
     *  should be "". In this case it is assumed that the linker
     *  replaces the OBJECT_FILE_EXTENSION of the file with the
     *  LINKED_PROGRAM_EXTENSION.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LINKER_OPT_OUTPUT_FILE        <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Linker option that needs to precede the special library.
     *  If no special library exists LINKER_OPT_SPECIAL_LIB is "".
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LINKER_OPT_SPECIAL_LIB        <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Linker option to specify the stack size of the executable.
     *  The argument for LINKER_OPT_STACK_SIZE is the stack size in
     *  bytes as decimal number. It must follow LINKER_OPT_STACK_SIZE
     *  immediately. The Seed7 compiler uses an argument of either
     *  DEFAULT_STACK_SIZE or the value specified with the -S Seed7
     *  compiler option. If no linker option for the stack size exists
     *  LINKER_OPT_STACK_SIZE is "".
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: LINKER_OPT_STACK_SIZE         <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Standard linker options to link a compiled program.
     *  This contains options, that the linker always uses, and which
     *  are not covered by other LINKER_OPT_... settings.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: LINKER_FLAGS            <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Default stack size for a compiled executable.
     *  This value is used, if the Seed7 compiler is invoked without -S.
     *  If LINKER_OPT_STACK_SIZE exists DEFAULT_STACK_SIZE is used
     *  as argument for the stack size. Additionally DEFAULT_STACK_SIZE
     *  is used as argument for setupStack().
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: DEFAULT_STACK_SIZE           <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Options to link system libraries to a compiled program.
     *  This is intended for options to link libraries required by the
     *  Seed7 runtime library. E.g. libraries for socket.
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: SYSTEM_LIBS             <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Options to link system bigint libraries to a compiled program.
     *  This is intended for options to link libraries required by the
     *  Seed7 bigint.s7i runtime library (e.g.: "-lgmp").
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: SYSTEM_BIGINT_LIBS      <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Options to link system console libraries to a compiled program.
     *  This is intended for options to link libraries required by the
     *  Seed7 console runtime library (e.g.: "-lncurses").
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: SYSTEM_CONSOLE_LIBS     <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Options to link system database ibraries to a compiled program.
     *  This is intended for options to link libraries required by the
     *  Seed7 database runtime libraries (e.g.: "-lmysqlclient").
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: SYSTEM_DATABASE_LIBS    <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Options to link system graphic libraries to a compiled program.
     *  This is intended for options to link libraries required by the
     *  Seed7 graphic runtime library (e.g.: "-lX11").
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: SYSTEM_DRAW_LIBS        <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Options to link system mathematic libraries to a compiled program.
     *  This is intended for options to link libraries required by the
     *  Seed7 math.s7i runtime library. (e.g.: "-lm").
     *)</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: SYSTEM_MATH_LIBS        <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the Seed7 runtime library (e.g.: "seed7_05.a").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: SEED7_LIB                     <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the Seed7 graphic runtime library (e.g.: "s7_draw.a").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: DRAW_LIB                      <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the Seed7 text console runtime library (e.g.: "s7_con.a").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: CONSOLE_LIB                   <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the Seed7 database runtime library (e.g.: "s7_db.a").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: DATABASE_LIB                  <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the Seed7 compiler data runtime library (e.g.: "s7_data.a").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: COMP_DATA_LIB                 <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the Seed7 compiler runtime library (e.g.: "s7_comp.a").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: COMPILER_LIB                  <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the special library (e.g.: "pre_js.js").
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: SPECIAL_LIB                   <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Directory containing the Seed7 runtime libraries.
     *  This path uses the standard path representation (a slash is used
     *  as path separator and instead of a drive letter like "C:" the
     *  path "/c" is used).
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: S7_LIB_DIR                    <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The current version revision level of interpreter and compiler.
     *  The versioning of Seed7 interpreter and compiler use the
     *  pattern major.minor.revision (e.g.: 5.1.4). The revision
     *  level is incremented automatically with every compilation
     *  of the Seed7 interpreter. This configuration value allows
     *  that interpreter and compiler share the same revision.
     *)</span>
    <span class="keywd">var</span> <span class="type">integer</span>: VERSION_REVISION_LEVEL       <span class="keywd">is</span> 0;

    <span class="comment">(**
     *  Shell parameter to redirect to the file descriptor 1.
     *  Under Linux/Unix/BSD and Windows this is ">".
     *  The file to which the standard output should be
     *  redirected must be appended. E.g.: >myFile.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: REDIRECT_FILEDES_1            <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Shell parameter to redirect to the file descriptor 2.
     *  Under Linux/Unix/BSD and Windows this is "2>".
     *  The file to which the error output should be
     *  redirected must be appended. E.g.: 2>myFile.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: REDIRECT_FILEDES_2            <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  Name of the NULL device to be used in shell command redirections.
     *  Under Linux/Unix/BSD this is "/dev/null".
     *  Under Windows this is "NUL:".
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: NULL_DEVICE                   <span class="keywd">is</span> <span class="stri">""</span>;

    <span class="comment">(**
     *  The suffix used by the literals of the type ''intType''.
     *)</span>
    <span class="keywd">var</span> <span class="type">string</span>: INTTYPE_LITERAL_SUFFIX        <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: configValue (<span class="op">in</span> <span class="type">string</span>: name)    <span class="keywd">is</span> action <span class="stri">"CMD_CONFIG_VALUE"</span>;


<span class="comment">(**
 *  Determine the built-in (hard-coded) C compiler configuration values.
 *  @return a structure with the built-in configuration values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ccConfigType</span>: getBuiltInConfig <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">ccConfigType</span>: conf <span class="keywd">is</span> ccConfigType.value;
  <span class="keywd">begin</span>
    conf.WITH_STRI_CAPACITY            := boolean(configValue(<span class="stri">"WITH_STRI_CAPACITY"</span>));
    conf.ALLOW_STRITYPE_SLICES         := boolean(configValue(<span class="stri">"ALLOW_STRITYPE_SLICES"</span>));
    conf.ALLOW_BSTRITYPE_SLICES        := boolean(configValue(<span class="stri">"ALLOW_BSTRITYPE_SLICES"</span>));
    conf.RSHIFT_DOES_SIGN_EXTEND       := boolean(configValue(<span class="stri">"RSHIFT_DOES_SIGN_EXTEND"</span>));
    conf.TWOS_COMPLEMENT_INTTYPE       := boolean(configValue(<span class="stri">"TWOS_COMPLEMENT_INTTYPE"</span>));
    conf.LITTLE_ENDIAN_INTTYPE         := boolean(configValue(<span class="stri">"LITTLE_ENDIAN_INTTYPE"</span>));
    conf.FLOAT_COMPARISON_OKAY         := boolean(configValue(<span class="stri">"FLOAT_COMPARISON_OKAY"</span>));
    conf.POW_FUNCTION_OKAY             := boolean(configValue(<span class="stri">"POW_FUNCTION_OKAY"</span>));
    conf.FMOD_FUNCTION_OKAY            := boolean(configValue(<span class="stri">"FMOD_FUNCTION_OKAY"</span>));
    conf.SQRT_FUNCTION_OKAY            := boolean(configValue(<span class="stri">"SQRT_FUNCTION_OKAY"</span>));
    conf.EXP_FUNCTION_OKAY             := boolean(configValue(<span class="stri">"EXP_FUNCTION_OKAY"</span>));
    conf.LOG_FUNCTION_OKAY             := boolean(configValue(<span class="stri">"LOG_FUNCTION_OKAY"</span>));
    conf.LOG10_FUNCTION_OKAY           := boolean(configValue(<span class="stri">"LOG10_FUNCTION_OKAY"</span>));
    conf.LOG1P_FUNCTION_OKAY           := boolean(configValue(<span class="stri">"LOG1P_FUNCTION_OKAY"</span>));
    conf.LOG2_FUNCTION_OKAY            := boolean(configValue(<span class="stri">"LOG2_FUNCTION_OKAY"</span>));
    conf.LDEXP_FUNCTION_OKAY           := boolean(configValue(<span class="stri">"LDEXP_FUNCTION_OKAY"</span>));
    conf.FREXP_FUNCTION_OKAY           := boolean(configValue(<span class="stri">"FREXP_FUNCTION_OKAY"</span>));
    conf.HAS_SIGSETJMP                 := boolean(configValue(<span class="stri">"HAS_SIGSETJMP"</span>));
    conf.CHECK_INT_DIV_BY_ZERO         := boolean(configValue(<span class="stri">"CHECK_INT_DIV_BY_ZERO"</span>));
    conf.CHECK_INT_DIV_ZERO_BY_ZERO    := boolean(configValue(<span class="stri">"CHECK_INT_DIV_ZERO_BY_ZERO"</span>));
    conf.CHECK_INT_REM_BY_ZERO         := boolean(configValue(<span class="stri">"CHECK_INT_REM_BY_ZERO"</span>));
    conf.CHECK_INT_REM_ZERO_BY_ZERO    := boolean(configValue(<span class="stri">"CHECK_INT_REM_ZERO_BY_ZERO"</span>));
    conf.FLOAT_ZERO_DIV_ERROR          := boolean(configValue(<span class="stri">"FLOAT_ZERO_DIV_ERROR"</span>));
    conf.CHECK_FLOAT_DIV_BY_ZERO       := boolean(configValue(<span class="stri">"CHECK_FLOAT_DIV_BY_ZERO"</span>));
    conf.HAS_EXP2                      := boolean(configValue(<span class="stri">"HAS_EXP2"</span>));
    conf.HAS_EXP10                     := boolean(configValue(<span class="stri">"HAS_EXP10"</span>));
    conf.HAS_EXPM1                     := boolean(configValue(<span class="stri">"HAS_EXPM1"</span>));
    conf.HAS_CBRT                      := boolean(configValue(<span class="stri">"HAS_CBRT"</span>));
    conf.LIMITED_CSTRI_LITERAL_LEN     := boolean(configValue(<span class="stri">"LIMITED_CSTRI_LITERAL_LEN"</span>));
    conf.SWITCH_WORKS_FOR_INT64TYPE    := boolean(configValue(<span class="stri">"SWITCH_WORKS_FOR_INT64TYPE"</span>));
    conf.STMT_BLOCK_IN_PARENTHESES_OK  := boolean(configValue(<span class="stri">"STMT_BLOCK_IN_PARENTHESES_OK"</span>));
    conf.CC_SOURCE_UTF8                := boolean(configValue(<span class="stri">"CC_SOURCE_UTF8"</span>));
    conf.USE_WMAIN                     := boolean(configValue(<span class="stri">"USE_WMAIN"</span>));
    conf.USE_WINMAIN                   := boolean(configValue(<span class="stri">"USE_WINMAIN"</span>));
    conf.USE_DO_EXIT                   := boolean(configValue(<span class="stri">"USE_DO_EXIT"</span>));
    conf.FLOATTYPE_DOUBLE              := boolean(configValue(<span class="stri">"FLOATTYPE_DOUBLE"</span>));
    conf.INTTYPE_SIZE                  := integer(configValue(<span class="stri">"INTTYPE_SIZE"</span>));
    conf.FLOATTYPE_SIZE                := integer(configValue(<span class="stri">"FLOATTYPE_SIZE"</span>));
    conf.POINTER_SIZE                  := integer(configValue(<span class="stri">"POINTER_SIZE"</span>));
    conf.GENERIC_SIZE                  := max({conf.INTTYPE_SIZE, conf.FLOATTYPE_SIZE, conf.POINTER_SIZE});
    conf.INT_SIZE                      := integer(configValue(<span class="stri">"INT_SIZE"</span>));
    conf.LONG_SIZE                     := integer(configValue(<span class="stri">"LONG_SIZE"</span>));
    conf.FLOATTYPE_MANTISSA_BITS       := integer(configValue(<span class="stri">"FLOATTYPE_MANTISSA_BITS"</span>));
    conf.FLOATTYPE_EXPONENT_OFFSET     := integer(configValue(<span class="stri">"FLOATTYPE_EXPONENT_OFFSET"</span>));
    conf.INT_RANGE_IN_FLOATTYPE_MAX    := integer(configValue(<span class="stri">"INT_RANGE_IN_FLOATTYPE_MAX"</span>));
    conf.MINIMUM_TRUNC_ARGUMENT        := integer(configValue(<span class="stri">"MINIMUM_TRUNC_ARGUMENT"</span>));
    conf.MAXIMUM_TRUNC_ARGUMENT        := integer(configValue(<span class="stri">"MAXIMUM_TRUNC_ARGUMENT"</span>));
    conf.PIXEL_RED_MASK                := integer(configValue(<span class="stri">"PIXEL_RED_MASK"</span>), 16);
    conf.PIXEL_GREEN_MASK              := integer(configValue(<span class="stri">"PIXEL_GREEN_MASK"</span>), 16);
    conf.PIXEL_BLUE_MASK               := integer(configValue(<span class="stri">"PIXEL_BLUE_MASK"</span>), 16);
    conf.RGB_TO_PIXEL_FLAG_NAME        := configValue(<span class="stri">"RGB_TO_PIXEL_FLAG_NAME"</span>);
    conf.RAND_MULTIPLIER               := integer(configValue(<span class="stri">"RAND_MULTIPLIER"</span>));
    conf.RAND_INCREMENT                := integer(configValue(<span class="stri">"RAND_INCREMENT"</span>));
    conf.BOOLTYPE                      := configValue(<span class="stri">"BOOLTYPE"</span>);
    conf.INT32TYPE                     := configValue(<span class="stri">"INT32TYPE"</span>);
    conf.UINT32TYPE                    := configValue(<span class="stri">"UINT32TYPE"</span>);
    conf.INT64TYPE                     := configValue(<span class="stri">"INT64TYPE"</span>);
    conf.UINT64TYPE                    := configValue(<span class="stri">"UINT64TYPE"</span>);
    conf.INT128TYPE                    := configValue(<span class="stri">"INT128TYPE"</span>);
    conf.UINT128TYPE                   := configValue(<span class="stri">"UINT128TYPE"</span>);
    conf.INT32TYPE_LITERAL_SUFFIX      := configValue(<span class="stri">"INT32TYPE_LITERAL_SUFFIX"</span>);
    conf.INT64TYPE_LITERAL_SUFFIX      := configValue(<span class="stri">"INT64TYPE_LITERAL_SUFFIX"</span>);
    conf.MACRO_DEFS                    := configValue(<span class="stri">"MACRO_DEFS"</span>);
    conf.OVERFLOW_SIGNAL               := configValue(<span class="stri">"OVERFLOW_SIGNAL"</span>);
    conf.BUILTIN_ADD_OVERFLOW          := configValue(<span class="stri">"BUILTIN_ADD_OVERFLOW"</span>);
    conf.BUILTIN_SUB_OVERFLOW          := configValue(<span class="stri">"BUILTIN_SUB_OVERFLOW"</span>);
    conf.BUILTIN_MULT_OVERFLOW         := configValue(<span class="stri">"BUILTIN_MULT_OVERFLOW"</span>);
    conf.INT_DIV_OVERFLOW              := integer(configValue(<span class="stri">"INT_DIV_OVERFLOW"</span>));
    conf.INT_REM_OVERFLOW              := integer(configValue(<span class="stri">"INT_REM_OVERFLOW"</span>));
    conf.OBJECT_FILE_EXTENSION         := configValue(<span class="stri">"OBJECT_FILE_EXTENSION"</span>);
    conf.LIBRARY_FILE_EXTENSION        := configValue(<span class="stri">"LIBRARY_FILE_EXTENSION"</span>);
    conf.EXECUTABLE_FILE_EXTENSION     := configValue(<span class="stri">"EXECUTABLE_FILE_EXTENSION"</span>);
    conf.LINKED_PROGRAM_EXTENSION      := configValue(<span class="stri">"LINKED_PROGRAM_EXTENSION"</span>);
    conf.CC_ENVIRONMENT_INI            := configValue(<span class="stri">"CC_ENVIRONMENT_INI"</span>);
    conf.C_COMPILER                    := configValue(<span class="stri">"C_COMPILER"</span>);
    conf.CPLUSPLUS_COMPILER            := configValue(<span class="stri">"CPLUSPLUS_COMPILER"</span>);
    conf.CALL_C_COMPILER_FROM_SHELL    := boolean(configValue(<span class="stri">"CALL_C_COMPILER_FROM_SHELL"</span>));
    conf.C_COMPILER_VERSION            := configValue(<span class="stri">"C_COMPILER_VERSION"</span>);
    conf.CC_OPT_DEBUG_INFO             := noEmptyStrings(split(configValue(<span class="stri">"CC_OPT_DEBUG_INFO"</span>), <span class="stri">' '</span>));
    conf.CC_OPT_LINK_TIME_OPTIMIZATION := configValue(<span class="stri">"CC_OPT_LINK_TIME_OPTIMIZATION"</span>);
    conf.CC_OPT_NO_WARNINGS            := configValue(<span class="stri">"CC_OPT_NO_WARNINGS"</span>);
    conf.CC_OPT_OPTIMIZE_1             := noEmptyStrings(split(configValue(<span class="stri">"CC_OPT_OPTIMIZE_1"</span>), <span class="stri">' '</span>));
    conf.CC_OPT_OPTIMIZE_2             := noEmptyStrings(split(configValue(<span class="stri">"CC_OPT_OPTIMIZE_2"</span>), <span class="stri">' '</span>));
    conf.CC_OPT_OPTIMIZE_3             := noEmptyStrings(split(configValue(<span class="stri">"CC_OPT_OPTIMIZE_3"</span>), <span class="stri">' '</span>));
    conf.CC_OPT_TRAP_OVERFLOW          := configValue(<span class="stri">"CC_OPT_TRAP_OVERFLOW"</span>);
    conf.CC_OPT_VERSION_INFO           := configValue(<span class="stri">"CC_OPT_VERSION_INFO"</span>);
    conf.CC_FLAGS                      := noEmptyStrings(split(configValue(<span class="stri">"CC_FLAGS"</span>), <span class="stri">' '</span>));
    conf.CC_ERROR_FILEDES              := integer(configValue(<span class="stri">"CC_ERROR_FILEDES"</span>));
    conf.CC_VERSION_INFO_FILEDES       := integer(configValue(<span class="stri">"CC_VERSION_INFO_FILEDES"</span>));
    conf.LINKER_OPT_DEBUG_INFO         := configValue(<span class="stri">"LINKER_OPT_DEBUG_INFO"</span>);
    conf.LINKER_OPT_LTO_MANDATORY      := boolean(configValue(<span class="stri">"LINKER_OPT_LTO_MANDATORY"</span>));
    conf.LINKER_OPT_NO_DEBUG_INFO      := configValue(<span class="stri">"LINKER_OPT_NO_DEBUG_INFO"</span>);
    conf.LINKER_OPT_OUTPUT_FILE        := configValue(<span class="stri">"LINKER_OPT_OUTPUT_FILE"</span>);
    conf.LINKER_OPT_SPECIAL_LIB        := configValue(<span class="stri">"LINKER_OPT_SPECIAL_LIB"</span>);
    conf.LINKER_OPT_STACK_SIZE         := configValue(<span class="stri">"LINKER_OPT_STACK_SIZE"</span>);
    conf.LINKER_FLAGS                  := noEmptyStrings(split(configValue(<span class="stri">"LINKER_FLAGS"</span>), <span class="stri">' '</span>));
    conf.DEFAULT_STACK_SIZE            := integer(configValue(<span class="stri">"DEFAULT_STACK_SIZE"</span>));
    conf.SYSTEM_LIBS                   := noEmptyStrings(split(configValue(<span class="stri">"SYSTEM_LIBS"</span>), <span class="stri">' '</span>));
    conf.SYSTEM_BIGINT_LIBS            := noEmptyStrings(split(configValue(<span class="stri">"SYSTEM_BIGINT_LIBS"</span>), <span class="stri">'\n'</span>));
    conf.SYSTEM_CONSOLE_LIBS           := noEmptyStrings(split(configValue(<span class="stri">"SYSTEM_CONSOLE_LIBS"</span>), <span class="stri">'\n'</span>));
    conf.SYSTEM_DATABASE_LIBS          := noEmptyStrings(split(configValue(<span class="stri">"SYSTEM_DATABASE_LIBS"</span>), <span class="stri">'\n'</span>));
    conf.SYSTEM_DRAW_LIBS              := noEmptyStrings(split(configValue(<span class="stri">"SYSTEM_DRAW_LIBS"</span>), <span class="stri">'\n'</span>));
    conf.SYSTEM_MATH_LIBS              := noEmptyStrings(split(configValue(<span class="stri">"SYSTEM_MATH_LIBS"</span>), <span class="stri">' '</span>));
    conf.SEED7_LIB                     := configValue(<span class="stri">"SEED7_LIB"</span>);
    conf.DRAW_LIB                      := configValue(<span class="stri">"DRAW_LIB"</span>);
    conf.CONSOLE_LIB                   := configValue(<span class="stri">"CONSOLE_LIB"</span>);
    conf.DATABASE_LIB                  := configValue(<span class="stri">"DATABASE_LIB"</span>);
    conf.COMP_DATA_LIB                 := configValue(<span class="stri">"COMP_DATA_LIB"</span>);
    conf.COMPILER_LIB                  := configValue(<span class="stri">"COMPILER_LIB"</span>);
    conf.SPECIAL_LIB                   := configValue(<span class="stri">"SPECIAL_LIB"</span>);
    conf.S7_LIB_DIR                    := configValue(<span class="stri">"S7_LIB_DIR"</span>);
    conf.VERSION_REVISION_LEVEL        := integer(configValue(<span class="stri">"VERSION_REVISION_LEVEL"</span>));
    conf.REDIRECT_FILEDES_1            := configValue(<span class="stri">"REDIRECT_FILEDES_1"</span>);
    conf.REDIRECT_FILEDES_2            := configValue(<span class="stri">"REDIRECT_FILEDES_2"</span>);
    conf.NULL_DEVICE                   := configValue(<span class="stri">"NULL_DEVICE"</span>);
    <span class="keywd">if</span> conf.INTTYPE_SIZE = 32 <span class="keywd">then</span>
      conf.INTTYPE_LITERAL_SUFFIX := conf.INT32TYPE_LITERAL_SUFFIX;
    <span class="keywd">else</span>
      conf.INTTYPE_LITERAL_SUFFIX := conf.INT64TYPE_LITERAL_SUFFIX;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> conf.INT_SIZE = 16 <span class="keywd">then</span>
      <span class="keywd">if</span> conf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        conf.INT_MIN := -32768;
      <span class="keywd">else</span>
        conf.INT_MIN := -32767;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      conf.INT_MAX :=  32767;
    <span class="keywd">elsif</span> conf.INT_SIZE = 32 <span class="keywd">then</span>
      <span class="keywd">if</span> conf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        conf.INT_MIN := -2147483648;
      <span class="keywd">else</span>
        conf.INT_MIN := -2147483647;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      conf.INT_MAX :=  2147483647;
    <span class="keywd">elsif</span> conf.INT_SIZE = 64 <span class="keywd">then</span>
      <span class="keywd">if</span> conf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        conf.INT_MIN := -9223372036854775807 - 1;
      <span class="keywd">else</span>
        conf.INT_MIN := -9223372036854775807;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      conf.INT_MAX :=  9223372036854775807;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Structure with configuration values for C compiler and runtime.
 *)</span>
<span class="keywd">var</span> <span class="type">ccConfigType</span>: ccConf <span class="keywd">is</span> getBuiltInConfig;


<span class="keywd">const</span> <span class="type">proc</span>: assignConfigValue (<span class="keywd">inout</span> <span class="type">ccConfigType</span>: conf, <span class="op">in</span> <span class="type">string</span>: name, <span class="op">in</span> <span class="type">string</span>: value) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">case</span> name <span class="keywd">of</span>
      <span class="keywd">when</span> {<span class="stri">"WITH_STRI_CAPACITY"</span>}:            conf.WITH_STRI_CAPACITY            := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"ALLOW_STRITYPE_SLICES"</span>}:         conf.ALLOW_STRITYPE_SLICES         := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"ALLOW_BSTRITYPE_SLICES"</span>}:        conf.ALLOW_BSTRITYPE_SLICES        := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"RSHIFT_DOES_SIGN_EXTEND"</span>}:       conf.RSHIFT_DOES_SIGN_EXTEND       := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"TWOS_COMPLEMENT_INTTYPE"</span>}:       conf.TWOS_COMPLEMENT_INTTYPE       := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LITTLE_ENDIAN_INTTYPE"</span>}:         conf.LITTLE_ENDIAN_INTTYPE         := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"FLOAT_COMPARISON_OKAY"</span>}:         conf.FLOAT_COMPARISON_OKAY         := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"POW_FUNCTION_OKAY"</span>}:             conf.POW_FUNCTION_OKAY             := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"FMOD_FUNCTION_OKAY"</span>}:            conf.FMOD_FUNCTION_OKAY            := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"SQRT_FUNCTION_OKAY"</span>}:            conf.SQRT_FUNCTION_OKAY            := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"EXP_FUNCTION_OKAY"</span>}:             conf.EXP_FUNCTION_OKAY             := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LOG_FUNCTION_OKAY"</span>}:             conf.LOG_FUNCTION_OKAY             := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LOG10_FUNCTION_OKAY"</span>}:           conf.LOG10_FUNCTION_OKAY           := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LOG1P_FUNCTION_OKAY"</span>}:           conf.LOG1P_FUNCTION_OKAY           := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LOG2_FUNCTION_OKAY"</span>}:            conf.LOG2_FUNCTION_OKAY            := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LDEXP_FUNCTION_OKAY"</span>}:           conf.LDEXP_FUNCTION_OKAY           := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"FREXP_FUNCTION_OKAY"</span>}:           conf.FREXP_FUNCTION_OKAY           := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"HAS_SIGSETJMP"</span>}:                 conf.HAS_SIGSETJMP                 := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"CHECK_INT_DIV_BY_ZERO"</span>}:         conf.CHECK_INT_DIV_BY_ZERO         := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"CHECK_INT_DIV_ZERO_BY_ZERO"</span>}:    conf.CHECK_INT_DIV_ZERO_BY_ZERO    := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"CHECK_INT_REM_BY_ZERO"</span>}:         conf.CHECK_INT_REM_BY_ZERO         := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"CHECK_INT_REM_ZERO_BY_ZERO"</span>}:    conf.CHECK_INT_REM_ZERO_BY_ZERO    := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"FLOAT_ZERO_DIV_ERROR"</span>}:          conf.FLOAT_ZERO_DIV_ERROR          := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"CHECK_FLOAT_DIV_BY_ZERO"</span>}:       conf.CHECK_FLOAT_DIV_BY_ZERO       := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"HAS_EXP2"</span>}:                      conf.HAS_EXP2                      := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"HAS_EXP10"</span>}:                     conf.HAS_EXP10                     := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"HAS_EXPM1"</span>}:                     conf.HAS_EXPM1                     := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"HAS_CBRT"</span>}:                      conf.HAS_CBRT                      := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LIMITED_CSTRI_LITERAL_LEN"</span>}:     conf.LIMITED_CSTRI_LITERAL_LEN     := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"SWITCH_WORKS_FOR_INT64TYPE"</span>}:    conf.SWITCH_WORKS_FOR_INT64TYPE    := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"STMT_BLOCK_IN_PARENTHESES_OK"</span>}:  conf.STMT_BLOCK_IN_PARENTHESES_OK  := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"CC_SOURCE_UTF8"</span>}:                conf.CC_SOURCE_UTF8                := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"USE_WMAIN"</span>}:                     conf.USE_WMAIN                     := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"USE_WINMAIN"</span>}:                   conf.USE_WINMAIN                   := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"USE_DO_EXIT"</span>}:                   conf.USE_DO_EXIT                   := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"FLOATTYPE_DOUBLE"</span>}:              conf.FLOATTYPE_DOUBLE              := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"INTTYPE_SIZE"</span>}:                  conf.INTTYPE_SIZE                  := integer(value);
      <span class="keywd">when</span> {<span class="stri">"FLOATTYPE_SIZE"</span>}:                conf.FLOATTYPE_SIZE                := integer(value);
      <span class="keywd">when</span> {<span class="stri">"POINTER_SIZE"</span>}:                  conf.POINTER_SIZE                  := integer(value);
      <span class="keywd">when</span> {<span class="stri">"GENERIC_SIZE"</span>}:                  conf.GENERIC_SIZE                  := integer(value);
      <span class="keywd">when</span> {<span class="stri">"INT_SIZE"</span>}:                      conf.INT_SIZE                      := integer(value);
      <span class="keywd">when</span> {<span class="stri">"LONG_SIZE"</span>}:                     conf.LONG_SIZE                     := integer(value);
      <span class="keywd">when</span> {<span class="stri">"FLOATTYPE_MANTISSA_BITS"</span>}:       conf.FLOATTYPE_MANTISSA_BITS       := integer(value);
      <span class="keywd">when</span> {<span class="stri">"FLOATTYPE_EXPONENT_OFFSET"</span>}:     conf.FLOATTYPE_EXPONENT_OFFSET     := integer(value);
      <span class="keywd">when</span> {<span class="stri">"INT_RANGE_IN_FLOATTYPE_MAX"</span>}:    conf.INT_RANGE_IN_FLOATTYPE_MAX    := integer(value);
      <span class="keywd">when</span> {<span class="stri">"MINIMUM_TRUNC_ARGUMENT"</span>}:        conf.MINIMUM_TRUNC_ARGUMENT        := integer(value);
      <span class="keywd">when</span> {<span class="stri">"MAXIMUM_TRUNC_ARGUMENT"</span>}:        conf.MAXIMUM_TRUNC_ARGUMENT        := integer(value);
      <span class="keywd">when</span> {<span class="stri">"PIXEL_RED_MASK"</span>}:                conf.PIXEL_RED_MASK                := integer(value, 16);
      <span class="keywd">when</span> {<span class="stri">"PIXEL_GREEN_MASK"</span>}:              conf.PIXEL_GREEN_MASK              := integer(value, 16);
      <span class="keywd">when</span> {<span class="stri">"PIXEL_BLUE_MASK"</span>}:               conf.PIXEL_BLUE_MASK               := integer(value, 16);
      <span class="keywd">when</span> {<span class="stri">"RGB_TO_PIXEL_FLAG_NAME"</span>}:        conf.RGB_TO_PIXEL_FLAG_NAME        := value;
      <span class="keywd">when</span> {<span class="stri">"RAND_MULTIPLIER"</span>}:               conf.RAND_MULTIPLIER               := integer(value);
      <span class="keywd">when</span> {<span class="stri">"RAND_INCREMENT"</span>}:                conf.RAND_INCREMENT                := integer(value);
      <span class="keywd">when</span> {<span class="stri">"BOOLTYPE"</span>}:                      conf.BOOLTYPE                      := value;
      <span class="keywd">when</span> {<span class="stri">"INT32TYPE"</span>}:                     conf.INT32TYPE                     := value;
      <span class="keywd">when</span> {<span class="stri">"UINT32TYPE"</span>}:                    conf.UINT32TYPE                    := value;
      <span class="keywd">when</span> {<span class="stri">"INT64TYPE"</span>}:                     conf.INT64TYPE                     := value;
      <span class="keywd">when</span> {<span class="stri">"UINT64TYPE"</span>}:                    conf.UINT64TYPE                    := value;
      <span class="keywd">when</span> {<span class="stri">"INT128TYPE"</span>}:                    conf.INT128TYPE                    := value;
      <span class="keywd">when</span> {<span class="stri">"UINT128TYPE"</span>}:                   conf.UINT128TYPE                   := value;
      <span class="keywd">when</span> {<span class="stri">"INT32TYPE_LITERAL_SUFFIX"</span>}:      conf.INT32TYPE_LITERAL_SUFFIX      := value;
      <span class="keywd">when</span> {<span class="stri">"INT64TYPE_LITERAL_SUFFIX"</span>}:      conf.INT64TYPE_LITERAL_SUFFIX      := value;
      <span class="keywd">when</span> {<span class="stri">"MACRO_DEFS"</span>}:                    conf.MACRO_DEFS                    := value;
      <span class="keywd">when</span> {<span class="stri">"OVERFLOW_SIGNAL"</span>}:               conf.OVERFLOW_SIGNAL               := value;
      <span class="keywd">when</span> {<span class="stri">"BUILTIN_ADD_OVERFLOW"</span>}:          conf.BUILTIN_ADD_OVERFLOW          := value;
      <span class="keywd">when</span> {<span class="stri">"BUILTIN_SUB_OVERFLOW"</span>}:          conf.BUILTIN_SUB_OVERFLOW          := value;
      <span class="keywd">when</span> {<span class="stri">"BUILTIN_MULT_OVERFLOW"</span>}:         conf.BUILTIN_MULT_OVERFLOW         := value;
      <span class="keywd">when</span> {<span class="stri">"INT_DIV_OVERFLOW"</span>}:              conf.INT_DIV_OVERFLOW              := integer(value);
      <span class="keywd">when</span> {<span class="stri">"INT_REM_OVERFLOW"</span>}:              conf.INT_REM_OVERFLOW              := integer(value);
      <span class="keywd">when</span> {<span class="stri">"OBJECT_FILE_EXTENSION"</span>}:         conf.OBJECT_FILE_EXTENSION         := value;
      <span class="keywd">when</span> {<span class="stri">"LIBRARY_FILE_EXTENSION"</span>}:        conf.LIBRARY_FILE_EXTENSION        := value;
      <span class="keywd">when</span> {<span class="stri">"EXECUTABLE_FILE_EXTENSION"</span>}:     conf.EXECUTABLE_FILE_EXTENSION     := value;
      <span class="keywd">when</span> {<span class="stri">"LINKED_PROGRAM_EXTENSION"</span>}:      conf.LINKED_PROGRAM_EXTENSION      := value;
      <span class="keywd">when</span> {<span class="stri">"CC_ENVIRONMENT_INI"</span>}:            conf.CC_ENVIRONMENT_INI            := value;
      <span class="keywd">when</span> {<span class="stri">"C_COMPILER"</span>}:                    conf.C_COMPILER                    := value;
      <span class="keywd">when</span> {<span class="stri">"CPLUSPLUS_COMPILER"</span>}:            conf.CPLUSPLUS_COMPILER            := value;
      <span class="keywd">when</span> {<span class="stri">"CALL_C_COMPILER_FROM_SHELL"</span>}:    conf.CALL_C_COMPILER_FROM_SHELL    := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"C_COMPILER_VERSION"</span>}:            conf.C_COMPILER_VERSION            := value;
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_DEBUG_INFO"</span>}:             conf.CC_OPT_DEBUG_INFO             := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_LINK_TIME_OPTIMIZATION"</span>}: conf.CC_OPT_LINK_TIME_OPTIMIZATION := value;
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_NO_WARNINGS"</span>}:            conf.CC_OPT_NO_WARNINGS            := value;
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_OPTIMIZE_1"</span>}:             conf.CC_OPT_OPTIMIZE_1             := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_OPTIMIZE_2"</span>}:             conf.CC_OPT_OPTIMIZE_2             := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_OPTIMIZE_3"</span>}:             conf.CC_OPT_OPTIMIZE_3             := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_TRAP_OVERFLOW"</span>}:          conf.CC_OPT_TRAP_OVERFLOW          := value;
      <span class="keywd">when</span> {<span class="stri">"CC_OPT_VERSION_INFO"</span>}:           conf.CC_OPT_VERSION_INFO           := value;
      <span class="keywd">when</span> {<span class="stri">"CC_FLAGS"</span>}:                      conf.CC_FLAGS                      := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"CC_ERROR_FILEDES"</span>}:              conf.CC_ERROR_FILEDES              := integer(value);
      <span class="keywd">when</span> {<span class="stri">"CC_VERSION_INFO_FILEDES"</span>}:       conf.CC_VERSION_INFO_FILEDES       := integer(value);
      <span class="keywd">when</span> {<span class="stri">"LINKER_OPT_DEBUG_INFO"</span>}:         conf.LINKER_OPT_DEBUG_INFO         := value;
      <span class="keywd">when</span> {<span class="stri">"LINKER_OPT_LTO_MANDATORY"</span>}:      conf.LINKER_OPT_LTO_MANDATORY      := boolean(value);
      <span class="keywd">when</span> {<span class="stri">"LINKER_OPT_NO_DEBUG_INFO"</span>}:      conf.LINKER_OPT_NO_DEBUG_INFO      := value;
      <span class="keywd">when</span> {<span class="stri">"LINKER_OPT_OUTPUT_FILE"</span>}:        conf.LINKER_OPT_OUTPUT_FILE        := value;
      <span class="keywd">when</span> {<span class="stri">"LINKER_OPT_SPECIAL_LIB"</span>}:        conf.LINKER_OPT_SPECIAL_LIB        := value;
      <span class="keywd">when</span> {<span class="stri">"LINKER_OPT_STACK_SIZE"</span>}:         conf.LINKER_OPT_STACK_SIZE         := value;
      <span class="keywd">when</span> {<span class="stri">"LINKER_FLAGS"</span>}:                  conf.LINKER_FLAGS                  := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"DEFAULT_STACK_SIZE"</span>}:            conf.DEFAULT_STACK_SIZE            := integer(value);
      <span class="keywd">when</span> {<span class="stri">"SYSTEM_LIBS"</span>}:                   conf.SYSTEM_LIBS                   := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"SYSTEM_BIGINT_LIBS"</span>}:            conf.SYSTEM_BIGINT_LIBS            := noEmptyStrings(split(value, <span class="stri">'\n'</span>));
      <span class="keywd">when</span> {<span class="stri">"SYSTEM_CONSOLE_LIBS"</span>}:           conf.SYSTEM_CONSOLE_LIBS           := noEmptyStrings(split(value, <span class="stri">'\n'</span>));
      <span class="keywd">when</span> {<span class="stri">"SYSTEM_DATABASE_LIBS"</span>}:          conf.SYSTEM_DATABASE_LIBS          := noEmptyStrings(split(value, <span class="stri">'\n'</span>));
      <span class="keywd">when</span> {<span class="stri">"SYSTEM_DRAW_LIBS"</span>}:              conf.SYSTEM_DRAW_LIBS              := noEmptyStrings(split(value, <span class="stri">'\n'</span>));
      <span class="keywd">when</span> {<span class="stri">"SYSTEM_MATH_LIBS"</span>}:              conf.SYSTEM_MATH_LIBS              := noEmptyStrings(split(value, <span class="stri">' '</span>));
      <span class="keywd">when</span> {<span class="stri">"SEED7_LIB"</span>}:                     conf.SEED7_LIB                     := value;
      <span class="keywd">when</span> {<span class="stri">"DRAW_LIB"</span>}:                      conf.DRAW_LIB                      := value;
      <span class="keywd">when</span> {<span class="stri">"CONSOLE_LIB"</span>}:                   conf.CONSOLE_LIB                   := value;
      <span class="keywd">when</span> {<span class="stri">"DATABASE_LIB"</span>}:                  conf.DATABASE_LIB                  := value;
      <span class="keywd">when</span> {<span class="stri">"COMP_DATA_LIB"</span>}:                 conf.COMP_DATA_LIB                 := value;
      <span class="keywd">when</span> {<span class="stri">"COMPILER_LIB"</span>}:                  conf.COMPILER_LIB                  := value;
      <span class="keywd">when</span> {<span class="stri">"SPECIAL_LIB"</span>}:                   conf.SPECIAL_LIB                   := value;
      <span class="keywd">when</span> {<span class="stri">"S7_LIB_DIR"</span>}:                    conf.S7_LIB_DIR                    := value;
      <span class="keywd">when</span> {<span class="stri">"VERSION_REVISION_LEVEL"</span>}:        conf.VERSION_REVISION_LEVEL        := integer(value);
      <span class="keywd">when</span> {<span class="stri">"REDIRECT_FILEDES_1"</span>}:            conf.REDIRECT_FILEDES_1            := value;
      <span class="keywd">when</span> {<span class="stri">"REDIRECT_FILEDES_2"</span>}:            conf.REDIRECT_FILEDES_2            := value;
      <span class="keywd">when</span> {<span class="stri">"NULL_DEVICE"</span>}:                   conf.NULL_DEVICE                   := value;
      <span class="keywd">when</span> {<span class="stri">"INTTYPE_LITERAL_SUFFIX"</span>}:        conf.INTTYPE_LITERAL_SUFFIX        := value;
      <span class="keywd">when</span> {<span class="stri">"INT_MIN"</span>}:                       conf.INT_MIN                       := integer(value);
      <span class="keywd">when</span> {<span class="stri">"INT_MAX"</span>}:                       conf.INT_MAX                       := integer(value);
      <span class="keywd">otherwise</span>:
        raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">case</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">ccConfigType</span>: readConfig (<span class="op">in</span> <span class="type">string</span>: configFileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">ccConfigType</span>: conf <span class="keywd">is</span> ccConfigType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">propertyDataType</span>: propertyData <span class="keywd">is</span> propertyDataType.value;
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: value <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    propertyData := readPropertyFile(configFileName);
    <span class="keywd">for</span> value <span class="keywd">key</span> name <span class="keywd">range</span> propertyData <span class="keywd">do</span>
      assignConfigValue(conf, name, value);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: determineCCVersion <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: c_compiler_version <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: redirection <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: ccVersionFile <span class="keywd">is</span> <span class="stri">"cc_version"</span>;
    <span class="keywd">var</span> <span class="type">file</span>: aFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    ccVersionFile &amp;:= <span class="stri">"_"</span> &lt;&amp; rand(0, 999999990) <span class="op">lpad0</span> 9;
    <span class="keywd">case</span> ccConf.CC_VERSION_INFO_FILEDES <span class="keywd">of</span>
      <span class="keywd">when</span> {1}:
        redirection &amp;:= ccConf.REDIRECT_FILEDES_1 &amp; ccVersionFile;
        redirection &amp;:= ccConf.REDIRECT_FILEDES_2 &amp; ccConf.NULL_DEVICE;
      <span class="keywd">when</span> {2}:
        redirection &amp;:= ccConf.REDIRECT_FILEDES_1 &amp; ccConf.NULL_DEVICE;
        redirection &amp;:= ccConf.REDIRECT_FILEDES_2 &amp; ccVersionFile;
    <span class="keywd">end</span> <span class="keywd">case</span>;
    cmd_sh(ccConf.C_COMPILER, ccConf.CC_OPT_VERSION_INFO &lt;&amp;
           <span class="stri">" "</span> &lt;&amp; join(redirection, <span class="stri">" "</span>));
    aFile := open(ccVersionFile, <span class="stri">"r"</span>);
    <span class="keywd">if</span> aFile &lt;> STD_NULL <span class="keywd">then</span>
      c_compiler_version := getln(aFile);
      close(aFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> fileType(ccVersionFile) = FILE_REGULAR <span class="keywd">then</span>
      removeFile(ccVersionFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: ccVersionIsOkay <span class="keywd">is</span>
  <span class="keywd">return</span> determineCCVersion = ccConf.C_COMPILER_VERSION;
</pre>
</body>
</html>
