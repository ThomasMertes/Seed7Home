<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  chartype.s7i  Character type definitions                        *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2009, 2019, 2024  Thomas Mertes            *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: letter_char <span class="keywd">is</span> {<span class="stri">'A'</span> .. <span class="stri">'Z'</span>} | {<span class="stri">'a'</span> .. <span class="stri">'z'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: digit_char <span class="keywd">is</span> {<span class="stri">'0'</span> .. <span class="stri">'9'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: hexdigit_char <span class="keywd">is</span> digit_char | {<span class="stri">'A'</span> .. <span class="stri">'F'</span>} | {<span class="stri">'a'</span> .. <span class="stri">'f'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: octdigit_char <span class="keywd">is</span> {<span class="stri">'0'</span> .. <span class="stri">'7'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: alphanum_char <span class="keywd">is</span> letter_char | digit_char;
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: control_char <span class="keywd">is</span> {<span class="stri">'\0;'</span> .. <span class="stri">'\31;'</span>} | {<span class="stri">'\127;'</span> .. <span class="stri">'\159;'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: ascii_control_char <span class="keywd">is</span> {<span class="stri">'\0;'</span> .. <span class="stri">'\31;'</span>} | {<span class="stri">'\127;'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: special_char <span class="keywd">is</span>
    {<span class="stri">'!'</span>, <span class="stri">'$'</span>, <span class="stri">'%'</span>, <span class="stri">'&amp;'</span>, <span class="stri">'*'</span>, <span class="stri">'+'</span>, <span class="stri">','</span>, <span class="stri">'-'</span>, <span class="stri">'.'</span>, <span class="stri">'/'</span>,
     <span class="stri">':'</span>, <span class="stri">';'</span>, <span class="stri">'&lt;'</span>, <span class="stri">'='</span>, <span class="stri">'>'</span>, <span class="stri">'?'</span>, <span class="stri">'@'</span>, <span class="stri">'\\'</span>,<span class="stri">'^'</span>, <span class="stri">'`'</span>,
     <span class="stri">'|'</span>, <span class="stri">'~'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: extended_special_char <span class="keywd">is</span> special_char | { <span class="stri">'"'</span>, <span class="stri">'#'</span>, <span class="stri">'''</span> };
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: left_angle_bracket <span class="keywd">is</span> {<span class="stri">'&lt;'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: right_angle_bracket <span class="keywd">is</span> {<span class="stri">'>'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: special_html_char <span class="keywd">is</span> special_char - left_angle_bracket;
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: single_quotation_char <span class="keywd">is</span> {<span class="stri">'''</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: double_quotation_char <span class="keywd">is</span> {<span class="stri">'"'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: sharp_char <span class="keywd">is</span> {<span class="stri">'#'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: hyphen_char <span class="keywd">is</span> {<span class="stri">'-'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: slash_char <span class="keywd">is</span> {<span class="stri">'/'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: special_sql_char <span class="keywd">is</span> special_char - hyphen_char - slash_char;
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: paren_char <span class="keywd">is</span> {<span class="stri">'('</span>, <span class="stri">')'</span>, <span class="stri">'['</span>, <span class="stri">']'</span>, <span class="stri">'{'</span>, <span class="stri">'}'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: left_paren_char <span class="keywd">is</span> {<span class="stri">'('</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: other_paren_char <span class="keywd">is</span> {<span class="stri">')'</span>, <span class="stri">'['</span>, <span class="stri">']'</span>, <span class="stri">'{'</span>, <span class="stri">'}'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: name_start_char <span class="keywd">is</span> letter_char | {<span class="stri">'_'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: name_char <span class="keywd">is</span> letter_char | digit_char | {<span class="stri">'_'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: space_or_tab <span class="keywd">is</span> {<span class="stri">' '</span>, <span class="stri">'\t'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: line_end_char <span class="keywd">is</span> {<span class="stri">'\n'</span>, <span class="stri">'\r'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: white_space_char <span class="keywd">is</span> {<span class="stri">' '</span>, <span class="stri">'\t'</span>, <span class="stri">'\n'</span>, <span class="stri">'\r'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: white_space_or_end_tag <span class="keywd">is</span> white_space_char | {<span class="stri">'>'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: white_space_or_printable <span class="keywd">is</span> white_space_char | {<span class="stri">'!'</span> .. <span class="stri">'~'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: equals_or_end_tag <span class="keywd">is</span> {<span class="stri">'='</span>, <span class="stri">'>'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: special_comment_char <span class="keywd">is</span> {<span class="stri">'('</span>, <span class="stri">'*'</span>, EOF};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: html_name_start_char <span class="keywd">is</span> letter_char | {<span class="stri">'-'</span>, <span class="stri">'.'</span>, <span class="stri">'_'</span>, <span class="stri">':'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: html_name_char <span class="keywd">is</span> alphanum_char | {<span class="stri">'-'</span>, <span class="stri">'.'</span>, <span class="stri">'_'</span>, <span class="stri">':'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: http_separators <span class="keywd">is</span>
    {<span class="stri">'('</span>, <span class="stri">')'</span>, <span class="stri">'&lt;'</span>, <span class="stri">'>'</span>, <span class="stri">'@'</span>, <span class="stri">','</span>, <span class="stri">';'</span>, <span class="stri">':'</span>, <span class="stri">'\\'</span>,
     <span class="stri">'/'</span>, <span class="stri">'['</span>, <span class="stri">']'</span>, <span class="stri">'?'</span>, <span class="stri">'='</span>, <span class="stri">'{'</span>, <span class="stri">'}'</span>};
<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: http_token_char <span class="keywd">is</span> {<span class="stri">'!'</span> .. <span class="stri">'~'</span>} - http_separators - double_quotation_char;

<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: no_escape_char <span class="keywd">is</span>
    {<span class="stri">' '</span>, <span class="stri">'!'</span>,      <span class="stri">'#'</span>, <span class="stri">'$'</span>, <span class="stri">'%'</span>, <span class="stri">'&amp;'</span>, <span class="stri">'''</span>,
     <span class="stri">'('</span>, <span class="stri">')'</span>, <span class="stri">'*'</span>, <span class="stri">'+'</span>, <span class="stri">','</span>, <span class="stri">'-'</span>, <span class="stri">'.'</span>, <span class="stri">'/'</span>,
     <span class="stri">'0'</span>, <span class="stri">'1'</span>, <span class="stri">'2'</span>, <span class="stri">'3'</span>, <span class="stri">'4'</span>, <span class="stri">'5'</span>, <span class="stri">'6'</span>, <span class="stri">'7'</span>,
     <span class="stri">'8'</span>, <span class="stri">'9'</span>, <span class="stri">':'</span>, <span class="stri">';'</span>, <span class="stri">'&lt;'</span>, <span class="stri">'='</span>, <span class="stri">'>'</span>, <span class="stri">'?'</span>,
     <span class="stri">'@'</span>, <span class="stri">'A'</span>, <span class="stri">'B'</span>, <span class="stri">'C'</span>, <span class="stri">'D'</span>, <span class="stri">'E'</span>, <span class="stri">'F'</span>, <span class="stri">'G'</span>,
     <span class="stri">'H'</span>, <span class="stri">'I'</span>, <span class="stri">'J'</span>, <span class="stri">'K'</span>, <span class="stri">'L'</span>, <span class="stri">'M'</span>, <span class="stri">'N'</span>, <span class="stri">'O'</span>,
     <span class="stri">'P'</span>, <span class="stri">'Q'</span>, <span class="stri">'R'</span>, <span class="stri">'S'</span>, <span class="stri">'T'</span>, <span class="stri">'U'</span>, <span class="stri">'V'</span>, <span class="stri">'W'</span>,
     <span class="stri">'X'</span>, <span class="stri">'Y'</span>, <span class="stri">'Z'</span>, <span class="stri">'['</span>,      <span class="stri">']'</span>, <span class="stri">'^'</span>, <span class="stri">'_'</span>,
     <span class="stri">'`'</span>, <span class="stri">'a'</span>, <span class="stri">'b'</span>, <span class="stri">'c'</span>, <span class="stri">'d'</span>, <span class="stri">'e'</span>, <span class="stri">'f'</span>, <span class="stri">'g'</span>,
     <span class="stri">'h'</span>, <span class="stri">'i'</span>, <span class="stri">'j'</span>, <span class="stri">'k'</span>, <span class="stri">'l'</span>, <span class="stri">'m'</span>, <span class="stri">'n'</span>, <span class="stri">'o'</span>,
     <span class="stri">'p'</span>, <span class="stri">'q'</span>, <span class="stri">'r'</span>, <span class="stri">'s'</span>, <span class="stri">'t'</span>, <span class="stri">'u'</span>, <span class="stri">'v'</span>, <span class="stri">'w'</span>,
     <span class="stri">'x'</span>, <span class="stri">'y'</span>, <span class="stri">'z'</span>, <span class="stri">'{'</span>, <span class="stri">'|'</span>, <span class="stri">'}'</span>, <span class="stri">'~'</span>};

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: esc_tab <span class="keywd">is</span> [](
    <span class="comment">(* " *)</span> <span class="stri">"\""</span>, <span class="comment">(* # *)</span> <span class="stri">" "</span>,  <span class="comment">(* $ *)</span> <span class="stri">" "</span>,  <span class="comment">(* % *)</span> <span class="stri">" "</span>,  <span class="comment">(* &amp; *)</span> <span class="stri">" "</span>,
    <span class="comment">(* ' *)</span> <span class="stri">"'"</span>,  <span class="comment">(* ( *)</span> <span class="stri">" "</span>,  <span class="comment">(* ) *)</span> <span class="stri">" "</span>,  <span class="comment">(* * *)</span> <span class="stri">" "</span>,  <span class="comment">(* + *)</span> <span class="stri">" "</span>,
    <span class="comment">(* , *)</span> <span class="stri">" "</span>,  <span class="comment">(* - *)</span> <span class="stri">" "</span>,  <span class="comment">(* . *)</span> <span class="stri">" "</span>,  <span class="comment">(* / *)</span> <span class="stri">" "</span>,  <span class="comment">(* 0 *)</span> <span class="stri">" "</span>,
    <span class="comment">(* 1 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 2 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 3 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 4 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 5 *)</span> <span class="stri">" "</span>,
    <span class="comment">(* 6 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 7 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 8 *)</span> <span class="stri">" "</span>,  <span class="comment">(* 9 *)</span> <span class="stri">" "</span>,  <span class="comment">(* : *)</span> <span class="stri">" "</span>,
    <span class="comment">(* ; *)</span> <span class="stri">" "</span>,  <span class="comment">(* &lt; *)</span> <span class="stri">" "</span>,  <span class="comment">(* = *)</span> <span class="stri">" "</span>,  <span class="comment">(* > *)</span> <span class="stri">" "</span>,  <span class="comment">(* ? *)</span> <span class="stri">" "</span>,
    <span class="comment">(* @ *)</span> <span class="stri">" "</span>,  <span class="comment">(* A *)</span> <span class="stri">"\A"</span>, <span class="comment">(* B *)</span> <span class="stri">"\B"</span>, <span class="comment">(* C *)</span> <span class="stri">"\C"</span>, <span class="comment">(* D *)</span> <span class="stri">"\D"</span>,
    <span class="comment">(* E *)</span> <span class="stri">"\E"</span>, <span class="comment">(* F *)</span> <span class="stri">"\F"</span>, <span class="comment">(* G *)</span> <span class="stri">"\G"</span>, <span class="comment">(* H *)</span> <span class="stri">"\H"</span>, <span class="comment">(* I *)</span> <span class="stri">"\I"</span>,
    <span class="comment">(* J *)</span> <span class="stri">"\J"</span>, <span class="comment">(* K *)</span> <span class="stri">"\K"</span>, <span class="comment">(* L *)</span> <span class="stri">"\L"</span>, <span class="comment">(* M *)</span> <span class="stri">"\M"</span>, <span class="comment">(* N *)</span> <span class="stri">"\N"</span>,
    <span class="comment">(* O *)</span> <span class="stri">"\O"</span>, <span class="comment">(* P *)</span> <span class="stri">"\P"</span>, <span class="comment">(* Q *)</span> <span class="stri">"\Q"</span>, <span class="comment">(* R *)</span> <span class="stri">"\R"</span>, <span class="comment">(* S *)</span> <span class="stri">"\S"</span>,
    <span class="comment">(* T *)</span> <span class="stri">"\T"</span>, <span class="comment">(* U *)</span> <span class="stri">"\U"</span>, <span class="comment">(* V *)</span> <span class="stri">"\V"</span>, <span class="comment">(* W *)</span> <span class="stri">"\W"</span>, <span class="comment">(* X *)</span> <span class="stri">"\X"</span>,
    <span class="comment">(* Y *)</span> <span class="stri">"\Y"</span>, <span class="comment">(* Z *)</span> <span class="stri">"\Z"</span>, <span class="comment">(* [ *)</span> <span class="stri">" "</span>,  <span class="comment">(* \ *)</span> <span class="stri">"\\"</span>, <span class="comment">(* ] *)</span> <span class="stri">" "</span>,
    <span class="comment">(* ^ *)</span> <span class="stri">" "</span>,  <span class="comment">(* _ *)</span> <span class="stri">" "</span>,  <span class="comment">(* ` *)</span> <span class="stri">" "</span>,  <span class="comment">(* a *)</span> <span class="stri">"\a"</span>, <span class="comment">(* b *)</span> <span class="stri">"\b"</span>,
    <span class="comment">(* c *)</span> <span class="stri">" "</span>,  <span class="comment">(* d *)</span> <span class="stri">" "</span>,  <span class="comment">(* e *)</span> <span class="stri">"\e"</span>, <span class="comment">(* f *)</span> <span class="stri">"\f"</span>, <span class="comment">(* g *)</span> <span class="stri">" "</span>,
    <span class="comment">(* h *)</span> <span class="stri">" "</span>,  <span class="comment">(* i *)</span> <span class="stri">" "</span>,  <span class="comment">(* j *)</span> <span class="stri">" "</span>,  <span class="comment">(* k *)</span> <span class="stri">" "</span>,  <span class="comment">(* l *)</span> <span class="stri">" "</span>,
    <span class="comment">(* m *)</span> <span class="stri">" "</span>,  <span class="comment">(* n *)</span> <span class="stri">"\n"</span>, <span class="comment">(* o *)</span> <span class="stri">" "</span>,  <span class="comment">(* p *)</span> <span class="stri">" "</span>,  <span class="comment">(* q *)</span> <span class="stri">" "</span>,
    <span class="comment">(* r *)</span> <span class="stri">"\r"</span>, <span class="comment">(* s *)</span> <span class="stri">" "</span>,  <span class="comment">(* t *)</span> <span class="stri">"\t"</span>, <span class="comment">(* u *)</span> <span class="stri">" "</span>,  <span class="comment">(* v *)</span> <span class="stri">"\v"</span>);


<span class="comment">(**
 *  Determine leftmost position of a char from ''chSet'' in ''stri''.
 *  @return the position of a char from ''chSet'' or 0 if ''stri''
 *          does not contain any character from ''chSet''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: pos (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: chSet) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">key</span> index <span class="keywd">range</span> stri <span class="keywd">until</span> pos &lt;> 0 <span class="keywd">do</span>
      <span class="keywd">if</span> ch <span class="op">in</span> chSet <span class="keywd">then</span>
        pos := index;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
