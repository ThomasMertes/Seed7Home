<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  vectorfont.s7i  Defines the vector font type.                   *)</span>
<span class="comment">(*  Copyright (C) 2010, 2012  Thomas Mertes                         *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/font.htm">font.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pixmapfont.htm">pixmapfont.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pixmap_file.htm">pixmap_file.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">type</span>: charVectorType <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">pointList</span>: points <span class="keywd">is</span> 0 <span class="op">times</span> pointList.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: fontVectorType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">char</span><span class="type">]</span> <span class="type">charVectorType</span>;

<span class="comment">(**
 *  [[font|Font]] implementation type for vector fonts.
 *  The following vector fonts are available: vecfont10.s7i,
 *  vecfont18.s7i, cronos16.s7i, cronos27.s7i, modern27.s7i
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: vectorFont <span class="keywd">is</span> sub fontProperties <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">fontVectorType</span>: fontVectors <span class="keywd">is</span> fontVectorType.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(vectorFont, font);


<span class="comment">(**
 *  Determine the pixel width of a string displayed with a font.
 *  @return the pixel width of ''stri'' displayed with ''vecFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">vectorFont</span>: vecFont, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> stri <span class="keywd">do</span>
      <span class="keywd">if</span> ch <span class="op">in</span> vecFont.fontVectors <span class="keywd">then</span>
        width +:= vecFont.fontVectors[ch].width;
      <span class="keywd">else</span>
        width +:= vecFont.fontVectors[<span class="stri">' '</span>].width;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    width +:= vecFont.characterSpacing * length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute how many chars fit in a width, if ''stri'' is displayed.
 *  This is done for the given ''vecFont''. The ''allowedWidth'' is
 *  specified in pixels. The expression:
 *   numOfCharsInWidth(aFont, stri, width(aFont, stri))
 *  will always be equivalent to
 *   length(stri);
 *  @return the number of chars from ''stri'' that fit into ''allowedWidth''
 *          if ''stri'' is displayed with ''vecFont''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: numOfCharsInWidth (<span class="op">in</span> <span class="type">vectorFont</span>: vecFont,
    <span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">integer</span>: allowedWidth) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: numOfChars <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: totalWidth <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> index &lt;= length(stri) <span class="op">and</span> totalWidth &lt;= allowedWidth <span class="keywd">do</span>
      <span class="keywd">if</span> stri[index] <span class="op">in</span> vecFont.fontVectors <span class="keywd">then</span>
        totalWidth +:= vecFont.fontVectors[stri[index]].width;
      <span class="keywd">else</span>
        totalWidth +:= vecFont.fontVectors[<span class="stri">' '</span>].width;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      totalWidth +:= vecFont.characterSpacing;
      <span class="keywd">if</span> totalWidth &lt;= allowedWidth <span class="keywd">then</span>
        incr(index);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    numOfChars := pred(index);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a pixmap from ''charVectors''.
 *  The ''charVectorType'' describes an array of filled polygons.
 *  Together the filled polygons define a pixmap. The ''background''
 *  is used as background of the pixmap and the ''foreground'' is used
 *  as color for the filled polygons. The ''scale'' parameter is
 *  used to scale the pixmap, but does not scale the polygons.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: genPixmap (<span class="op">in</span> <span class="type">vectorFont</span>: vecFont, <span class="op">in</span> <span class="type">charVectorType</span>: charVectors,
    <span class="op">in</span> <span class="type">color</span>: foreground, <span class="op">in</span> <span class="type">color</span>: background, <span class="op">in</span> <span class="type">integer</span>: scale) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    height := lineHeight(vecFont);
    width := charVectors.width;
    pixmap := newPixmap(width * scale, height * scale);
    clear(pixmap, background);
    <span class="keywd">if</span> scale = 1 <span class="keywd">then</span>
      <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(charVectors.points) <span class="keywd">do</span>
        fpolyLine(pixmap, 0, 0, charVectors.points[index], foreground);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">else</span>
      <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(charVectors.points) <span class="keywd">do</span>
        fpolyLine(pixmap, 0, 0, scale(charVectors.points[index], scale), foreground);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a pixmap font from a vector font.
 *  The pixmapFont structure is set up and the pixmap for space (' ')
 *  is created. The pixmaps of other characters are created on demand
 *  with ''getFontCharPixmap''.
 *  @return the created pixmap font.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixmapFontType</span>: genPixmapFont (<span class="op">in</span> <span class="type">vectorFont</span>: vecFont,
    <span class="op">in</span> <span class="type">integer</span>: fontSize, <span class="op">in</span> <span class="type">integer</span>: scale,
    <span class="op">in</span> <span class="type">color</span>: foreground, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixmapFontType</span>: pixmapFont <span class="keywd">is</span> pixmapFontType.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> <span class="stri">' '</span> <span class="op">in</span> vecFont.fontVectors <span class="keywd">then</span>
      incl(pixmapFont.pixmap, <span class="stri">' '</span>, genPixmap(vecFont, vecFont.fontVectors[<span class="stri">' '</span>],
          foreground, background, scale));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    pixmapFont.baseFont := vecFont;
    pixmapFont.fontSize := fontSize;
    pixmapFont.scale := scale;
    pixmapFont.foreground := foreground;
    pixmapFont.background := background;
    pixmapFont.baseLineDelta := baseLineDelta(vecFont) * scale;
    pixmapFont.line_delta := lineHeight(vecFont) * scale;
    pixmapFont.column_delta := columnWidth(vecFont) * scale;
    pixmapFont.characterSpacing := characterSpacing(vecFont) * scale;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the pixmap of a given ''vectorFont'' and char.
 *  This function is used to create character pixmaps on demand.
 *  @return the pixmap of the character ''ch''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getFontCharPixmap (<span class="op">in</span> <span class="type">vectorFont</span>: vecFont,
    <span class="keywd">inout</span> <span class="type">pixmapFontType</span>: pixmapFont, <span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: charPixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ch <span class="op">in</span> vecFont.fontVectors <span class="keywd">then</span>
      charPixmap := genPixmap(vecFont, vecFont.fontVectors[ch],
          pixmapFont.foreground, pixmapFont.background, pixmapFont.scale);
      incl(pixmapFont.pixmap, ch, charPixmap);
    <span class="keywd">else</span>
      charPixmap := pixmapFont.pixmap[<span class="stri">' '</span>];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setFont (<span class="keywd">inout</span> <span class="type">pixmapFontFile</span>: fontFile, <span class="op">in</span> <span class="type">vectorFont</span>: aFont) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    fontFile.font := getFont(aFont, fontSize(fontFile.font),
        scale(fontFile.font), foreground(fontFile.font), background(fontFile.font));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">#</span>
<span class="comment"># Helper functions for the font definition</span>
<span class="comment">#</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">pointList</span>: pline (<span class="op">in</span> <span class="type">array</span> <span class="type">integer</span>: points) <span class="keywd">is</span>
  <span class="keywd">return</span> genPointList(points);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">pointList</span>: fillp (<span class="op">in</span> <span class="type">array</span> <span class="type">integer</span>: points) <span class="keywd">is</span>
  <span class="keywd">return</span> genPointList(points);


<span class="keywd">const</span> <span class="type">proc</span>: incl (<span class="keywd">inout</span> <span class="type">fontVectorType</span>: fontVectors, <span class="op">in</span> <span class="type">char</span>: ch, <span class="op">in</span> <span class="type">integer</span>: width,
    <span class="op">in</span> <span class="type">array</span> <span class="type">pointList</span>: points) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">charVectorType</span>: charDescription <span class="keywd">is</span> charVectorType.value;
  <span class="keywd">begin</span>
    charDescription.width := width;
    charDescription.points := points;
    incl(fontVectors, ch, charDescription);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the maximal column width of all chars in a ''fontVectorType''.
 *  This is used as helper function when a font is defined.
 *  @return the maximal column width of all chars in ''fontVectorType''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: columnWidth (<span class="op">in</span> <span class="type">fontVectorType</span>: fontVectors) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: maxWidth <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> ch <span class="keywd">range</span> fontVectors <span class="keywd">do</span>
      <span class="keywd">if</span> fontVectors[ch].width > maxWidth <span class="keywd">then</span>
        maxWidth := fontVectors[ch].width;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
