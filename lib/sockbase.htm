<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  sockbase.s7i  Support for socket address and primitive socket   *)</span>
<span class="comment">(*  Copyright (C) 2007 - 2009, 2011  Thomas Mertes                  *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Abstract data type to store socket addresses.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: socketAddress <span class="keywd">is</span> newtype;


IN_PARAM_IS_REFERENCE(socketAddress);

<span class="keywd">const</span> <span class="type">creator</span>: (<span class="keywd">ref</span> <span class="type">socketAddress</span>: dest) ::= (<span class="op">in</span> <span class="type">socketAddress</span>: source)     <span class="keywd">is</span> action <span class="stri">"BST_CREATE"</span>;
<span class="keywd">const</span> <span class="type">destroyer</span>: destroy (<span class="keywd">ref</span> <span class="type">socketAddress</span>: aValue)                        <span class="keywd">is</span> action <span class="stri">"BST_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">socketAddress</span>: dest) := (<span class="op">in</span> <span class="type">socketAddress</span>: source)       <span class="keywd">is</span> action <span class="stri">"BST_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">socketAddress</span>: _GENERATE_EMPTY_SOCKET_ADDRESS                    <span class="keywd">is</span> action <span class="stri">"BST_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">socketAddress</span>: (attr socketAddress) . value                           <span class="keywd">is</span> _GENERATE_EMPTY_SOCKET_ADDRESS;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">socketAddress</span>: addr1) = (<span class="op">in</span> <span class="type">socketAddress</span>: addr2) <span class="keywd">is</span> action <span class="stri">"BST_EQ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">socketAddress</span>: addr1) &lt;> (<span class="op">in</span> <span class="type">socketAddress</span>: addr2) <span class="keywd">is</span> action <span class="stri">"BST_NE"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: addrFamily (<span class="op">in</span> <span class="type">socketAddress</span>: address)                  <span class="keywd">is</span> action <span class="stri">"SOC_ADDR_FAMILY"</span>;


<span class="comment">(**
 *  Compare two socket addresses.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">socketAddress</span>: addr1, <span class="op">in</span> <span class="type">socketAddress</span>: addr2) <span class="keywd">is</span> action <span class="stri">"BST_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a socket address.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">socketAddress</span>: address)                    <span class="keywd">is</span> action <span class="stri">"BST_HASHCODE"</span>;


<span class="comment">(**
 *  Get the numeric (IP) address of the host at ''address''.
 *  IPv4 addresses return the socketAddress in dot notation (e.g.:
 *  "192.0.2.235") and IPv6 addresses return the socketAddress in
 *  colon notation (e.g.: "fe80:0:0:0:202:b3ff:fe1e:8329").
 *  @return the IP address of the specified host.
 *  @exception RANGE_ERROR The address is neither AF_INET nor AF_INET6.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: numericAddress (<span class="op">in</span> <span class="type">socketAddress</span>: address)               <span class="keywd">is</span> action <span class="stri">"SOC_ADDR_NUMERIC"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: service (<span class="op">in</span> <span class="type">socketAddress</span>: address)                      <span class="keywd">is</span> action <span class="stri">"SOC_ADDR_SERVICE"</span>;


<span class="comment">(**
 *  Create an internet socket address of a port at a host.
 *  The ''hostName'' is either a host name (e.g.: "www.example.org"),
 *  or an IPv4 address in standard dot notation (e.g.: "192.0.2.235").
 *  Operating systems supporting IPv6 may also accept an IPv6 address
 *  in colon notation.
 *  @return the internet socket address, and socketAddress.value if
 *          the host cannot be found.
 *  @exception FILE_ERROR A system function returns an error.
 *  @exception RANGE_ERROR The port is not in the range 0 to 65535 or
 *             hostName cannot be converted to the system string type.
 *  @exception MEMORY_ERROR Not enough memory to convert ''hostName''.
 *             to the system representation or not enough memory to
 *             represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">socketAddress</span>: inetSocketAddress (<span class="op">in</span> <span class="type">string</span>: hostName,
                                             <span class="op">in</span> <span class="type">integer</span>: port)              <span class="keywd">is</span> action <span class="stri">"SOC_INET_ADDR"</span>;


<span class="comment">(**
 *  Create an internet socket address of a port at localhost.
 *  @return the internet socket address.
 *  @exception FILE_ERROR A system function returns an error.
 *  @exception RANGE_ERROR The port is not in the range 0 to 65535.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">socketAddress</span>: inetSocketAddress (<span class="op">in</span> <span class="type">integer</span>: port)              <span class="keywd">is</span> action <span class="stri">"SOC_INET_LOCAL_ADDR"</span>;


<span class="comment">(**
 *  Create an internet listener socket address of a port at localhost.
 *  @return the internet listener socket address.
 *  @exception FILE_ERROR A system function returns an error.
 *  @exception RANGE_ERROR The port is not in the range 0 to 65535.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">socketAddress</span>: inetListenerAddress (<span class="op">in</span> <span class="type">integer</span>: port)            <span class="keywd">is</span> action <span class="stri">"SOC_INET_SERV_ADDR"</span>;


<span class="comment">(**
 *  Determine the hostname.
 *  @return the hostname.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getHostname                                              <span class="keywd">is</span> action <span class="stri">"SOC_GET_HOSTNAME"</span>;


<span class="keywd">const</span> <span class="type">type</span>: PRIMITIVE_SOCKET <span class="keywd">is</span> newtype;
IN_PARAM_IS_VALUE(PRIMITIVE_SOCKET);

<span class="keywd">const</span> <span class="type">creator</span>: (<span class="keywd">ref</span> <span class="type">PRIMITIVE_SOCKET</span>: dest) ::= (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: source) <span class="keywd">is</span> action <span class="stri">"SOC_CREATE"</span>;
<span class="keywd">const</span> <span class="type">destroyer</span>: destroy (<span class="keywd">ref</span> <span class="type">PRIMITIVE_SOCKET</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">PRIMITIVE_SOCKET</span>: dest) := (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: source)   <span class="keywd">is</span> action <span class="stri">"SOC_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: sock1) = (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: sock2)  <span class="keywd">is</span> action <span class="stri">"SOC_EQ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: sock1) &lt;> (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: sock2) <span class="keywd">is</span> action <span class="stri">"SOC_NE"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_SOCKET</span>: _GENERATE_EMPTY_PRIMITIVE_SOCKET               <span class="keywd">is</span> action <span class="stri">"SOC_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">PRIMITIVE_SOCKET</span>: (attr PRIMITIVE_SOCKET) . value                     <span class="keywd">is</span> _GENERATE_EMPTY_PRIMITIVE_SOCKET;
<span class="keywd">const</span> <span class="type">PRIMITIVE_SOCKET</span>: PRIMITIVE_NULL_SOCKET                               <span class="keywd">is</span> PRIMITIVE_SOCKET.value;

<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket)                            <span class="keywd">is</span> action <span class="stri">"SOC_CLOSE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">socketAddress</span>: localAddress (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket)       <span class="keywd">is</span> action <span class="stri">"SOC_GET_LOCAL_ADDR"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">socketAddress</span>: peerAddress (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket)        <span class="keywd">is</span> action <span class="stri">"SOC_GET_PEER_ADDR"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket)                      <span class="keywd">is</span> action <span class="stri">"SOC_ORD"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket,
                       <span class="keywd">inout</span> <span class="type">char</span>: eofIndicator)                            <span class="keywd">is</span> action <span class="stri">"SOC_GETC"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket, <span class="op">in</span> <span class="type">integer</span>: maxLength,
                         <span class="keywd">inout</span> <span class="type">char</span>: eofIndicator)                          <span class="keywd">is</span> action <span class="stri">"SOC_GETS"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket)                 <span class="keywd">is</span> action <span class="stri">"SOC_HAS_NEXT"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: word_read (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)                  <span class="keywd">is</span> action <span class="stri">"SOC_WORD_READ"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: line_read (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)                  <span class="keywd">is</span> action <span class="stri">"SOC_LINE_READ"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: outSocket, <span class="op">in</span> <span class="type">string</span>: stri)         <span class="keywd">is</span> action <span class="stri">"SOC_WRITE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: recv (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket, <span class="keywd">inout</span> <span class="type">string</span>: stri,
                          <span class="op">in</span> <span class="type">integer</span>: length, <span class="op">in</span> <span class="type">integer</span>: flags)            <span class="keywd">is</span> action <span class="stri">"SOC_RECV"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: recvfrom (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket, <span class="keywd">inout</span> <span class="type">string</span>: stri,
                          <span class="op">in</span> <span class="type">integer</span>: length, <span class="op">in</span> <span class="type">integer</span>: flags,
                          <span class="keywd">inout</span> <span class="type">socketAddress</span>: address)                     <span class="keywd">is</span> action <span class="stri">"SOC_RECVFROM"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: send (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: outSocket, <span class="op">in</span> <span class="type">string</span>: stri,
                          <span class="op">in</span> <span class="type">integer</span>: flags)                                <span class="keywd">is</span> action <span class="stri">"SOC_SEND"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: sendto (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: outSocket, <span class="op">in</span> <span class="type">string</span>: stri,
                            <span class="op">in</span> <span class="type">integer</span>: flags, <span class="op">in</span> <span class="type">socketAddress</span>: address)   <span class="keywd">is</span> action <span class="stri">"SOC_SENDTO"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: setSockOpt (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: outSocket, <span class="op">in</span> <span class="type">integer</span>: optname,
                        <span class="op">in</span> <span class="type">boolean</span>: optval)                                 <span class="keywd">is</span> action <span class="stri">"SOC_SET_OPT_BOOL"</span>;
<span class="keywd">const</span> <span class="type">integer</span>: SO_REUSEADDR <span class="keywd">is</span> 1;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_SOCKET</span>: PRIMITIVE_SOCKET (<span class="op">in</span> <span class="type">integer</span>: domain,
                                               <span class="op">in</span> <span class="type">integer</span>: sockType,
                                               <span class="op">in</span> <span class="type">integer</span>: protocol)        <span class="keywd">is</span> action <span class="stri">"SOC_SOCKET"</span>;


<span class="comment">(**
 *  Connect ''aSocket'' to the given ''address''.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: connect (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: aSocket,
                     <span class="op">in</span> <span class="type">socketAddress</span>: address)                             <span class="keywd">is</span> action <span class="stri">"SOC_CONNECT"</span>;


<span class="comment">(**
 *  Create a new accepted connection socket for ''listenerSocket''.
 *  The function waits until at least one connection request is
 *  in the sockets queue of pending connections. Then it extracts
 *  the first connection request from the sockets queue. This
 *  request is accepted and a connection socket is created for it.
 *  @return the accepted connection socket.
 *  @exception FILE_ERROR A system function returns an error.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_SOCKET</span>: accept (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: listenerSocket,
                                     <span class="keywd">inout</span> <span class="type">socketAddress</span>: address)          <span class="keywd">is</span> action <span class="stri">"SOC_ACCEPT"</span>;


<span class="comment">(**
 *  Assign the specified ''address'' to the ''listenerSocket''.
 *  @param address An internet listener socket address.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: bind (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: listenerSocket,
                  <span class="op">in</span> <span class="type">socketAddress</span>: address)                                <span class="keywd">is</span> action <span class="stri">"SOC_BIND"</span>;


<span class="comment">(**
 *  Listen for socket connections and limit the incoming queue.
 *  The ''backlog'' argument defines the maximum length to which
 *  the queue of pending connections for ''listenerSocket'' may grow.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: listen (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: listenerSocket,
                    <span class="op">in</span> <span class="type">integer</span>: backlog)                                    <span class="keywd">is</span> action <span class="stri">"SOC_LISTEN"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: inputReady (<span class="op">in</span> <span class="type">PRIMITIVE_SOCKET</span>: inSocket, <span class="op">in</span> <span class="type">integer</span>: seconds,
                                <span class="op">in</span> <span class="type">integer</span>: microSeconds)                   <span class="keywd">is</span> action <span class="stri">"SOC_INPUT_READY"</span>;
</pre>
</body>
</html>
