<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  process.s7i   Support for creating processes                    *)</span>
<span class="comment">(*  Copyright (C) 2009 - 2016, 2021, 2022  Thomas Mertes            *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/cc_conf.htm">cc_conf.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/stdio.htm">stdio.s7i</a>"</span>;


<span class="comment">(**
 *  Type to manage processes.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: process <span class="keywd">is</span> newtype;


IN_PARAM_IS_REFERENCE(process);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">process</span>: dest) ::= (<span class="op">in</span> <span class="type">process</span>: source)     <span class="keywd">is</span> action <span class="stri">"PCS_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">process</span>: aValue)                    <span class="keywd">is</span> action <span class="stri">"PCS_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">process</span>: dest) := (<span class="op">in</span> <span class="type">process</span>: source)    <span class="keywd">is</span> action <span class="stri">"PCS_CPY"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">process</span>: _GENERATE_EMPTY_PROCESS                  <span class="keywd">is</span> action <span class="stri">"PCS_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">process</span>: (attr process) . EMPTY                        <span class="keywd">is</span> _GENERATE_EMPTY_PROCESS;


<span class="comment">(**
 *  Default value of ''process'' (process.EMPTY).
 *)</span>
<span class="keywd">const</span> <span class="type">process</span>: (attr process) . value                        <span class="keywd">is</span> _GENERATE_EMPTY_PROCESS;


<span class="comment">(**
 *  Check if two processes are equal.
 *  Processes are compared with the process identifier (PID).
 *  @return TRUE if the two processes are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">process</span>: process1) = (<span class="op">in</span> <span class="type">process</span>: process2)  <span class="keywd">is</span> action <span class="stri">"PCS_EQ"</span>;


<span class="comment">(**
 *  Check if two processes are not equal.
 *  Processes are compared with the process identifier (PID).
 *  @return TRUE if both processes are not equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">process</span>: process1) &lt;> (<span class="op">in</span> <span class="type">process</span>: process2) <span class="keywd">is</span> action <span class="stri">"PCS_NE"</span>;


<span class="comment">(**
 *  Compare two process values.
 *  The order of two processes is determined by comparing the process
 *  identifiers (PID). Therefore the result of ''compare'' may change
 *  if the program is executed again. Inside a program the result
 *  of ''compare'' is consistent and can be used to maintain hash
 *  tables.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">process</span>: process1, <span class="op">in</span> <span class="type">process</span>: process2) <span class="keywd">is</span> action <span class="stri">"PCS_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a process.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_HASHCODE"</span>;


<span class="comment">(**
 *  Convert a ''process'' to a [[string]].
 *  The process is converted to a string with the process identifier (PID).
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_STR"</span>;


<span class="comment">(**
 *  Test whether the specified process is alive.
 *  @return TRUE if the specified process has not yet terminated,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isAlive (<span class="op">in</span> <span class="type">process</span>: process1) <span class="keywd">is</span> action <span class="stri">"PCS_IS_ALIVE"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">process</span>: startProcess (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
    <span class="keywd">inout</span> <span class="type">clib_file</span>: stdin, <span class="keywd">inout</span> <span class="type">clib_file</span>: stdout, <span class="keywd">inout</span> <span class="type">clib_file</span>: stderr) <span class="keywd">is</span> action <span class="stri">"PCS_START"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">process</span>: startProcess (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
    <span class="keywd">inout</span> <span class="type">file</span>: stdin, <span class="keywd">inout</span> <span class="type">file</span>: stdout, <span class="keywd">inout</span> <span class="type">file</span>: stderr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">process</span>: aProcess <span class="keywd">is</span> process.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: stdinFile <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">clib_file</span>: stdoutFile <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">clib_file</span>: stderrFile <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">external_file</span>: aFile <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stdin &lt;> STD_NULL <span class="keywd">then</span>
      aFile := external_file <span class="op">conv</span> stdin;
      stdinFile := aFile.ext_file;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> stdout &lt;> STD_NULL <span class="keywd">then</span>
      aFile := external_file <span class="op">conv</span> stdout;
      stdoutFile := aFile.ext_file;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> stderr &lt;> STD_NULL <span class="keywd">then</span>
      aFile := external_file <span class="op">conv</span> stderr;
      stderrFile := aFile.ext_file;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    aProcess := startProcess(command, parameters, stdinFile, stdoutFile, stderrFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Start a new process.
 *  The command path must lead to an executable file. The environment
 *  variable PATH is not used to search for an executable.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param parameters Array of argument strings passed to the new
 *         program.
 *  @return the process that has been started.
 *  @exception MEMORY_ERROR Not enough memory to convert 'command'
 *             to the system path type.
 *  @exception RANGE_ERROR 'command' is not representable in the
 *             system path type.
 *  @exception FILE_ERROR The file does not exist or does not
 *             have execute permission.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">process</span>: startProcess (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters) <span class="keywd">is</span>
  <span class="keywd">return</span> startProcess(command, parameters, STD_IN.ext_file, STD_OUT.ext_file,
                      STD_ERR.ext_file);


<span class="comment">(**
 *  Start a new process.
 *  The command path must lead to an executable file. The environment
 *  variable PATH is not used to search for an executable.
 *  @param cmdAndParams Command to be executed and optional space
 *         separated list of parameters. Command and parameters
 *         must be space separated.
 *  @return the process that has been started.
 *  @exception MEMORY_ERROR Not enough memory to convert 'command'
 *             to the system path type.
 *  @exception RANGE_ERROR 'command' is not representable in the
 *             system path type.
 *  @exception FILE_ERROR The file does not exist or does not
 *             have execute permission.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">process</span>: startProcess (<span class="op">in</span> <span class="keywd">var</span> <span class="type">string</span>: cmdAndParams) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">process</span>: childProcess <span class="keywd">is</span> process.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: parameter <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: parameters <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    command := getCommandLineWord(cmdAndParams);
    parameter := getCommandLineWord(cmdAndParams);
    <span class="keywd">while</span> parameter &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      parameters &amp;:= parameter;
      parameter := getCommandLineWord(cmdAndParams);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    childProcess := startProcess(command, parameters);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: childStdInClibFile (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_CHILD_STDIN"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: childStdOutClibFile (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_CHILD_STDOUT"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: childStdErrClibFile (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_CHILD_STDERR"</span>;


<span class="comment">(**
 *  Returns the standard input file (stdin) of the given child process.
 *  If the standard input file of the subprocess has been redirected
 *  then this function will return NULL.
 *  @return the standard input file of 'aProcess' or
 *          STD_NULL, if stdin has been redirected.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: childStdIn (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: stdIn <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: stdinClibFile <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_file <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    stdinClibFile := childStdInClibFile(aProcess);
    <span class="keywd">if</span> stdinClibFile &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_file.ext_file := stdinClibFile;
      stdIn:= toInterface(new_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Returns the standard output file (stdout) of the given child process.
 *  If the standard output file of the subprocess has been redirected
 *  then this function will return NULL.
 *  @return the standard output file of 'aProcess' or
 *          STD_NULL, if stdout has been redirected.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: childStdOut (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: stdOut <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: stdoutClibFile <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_file <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    stdoutClibFile := childStdOutClibFile(aProcess);
    <span class="keywd">if</span> stdoutClibFile &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_file.ext_file := stdoutClibFile;
      stdOut:= toInterface(new_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Returns the error output file (stderr) of the given child process.
 *  If the standard error file of the subprocess has been redirected
 *  then this function will return NULL.
 *  @return the error output file of 'aProcess' or
 *          STD_NULL, if stderr has been redirected.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: childStdErr (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: stdErr <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: stderrClibFile <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_file <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    stderrClibFile := childStdErrClibFile(aProcess);
    <span class="keywd">if</span> stderrClibFile &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_file.ext_file := stderrClibFile;
      stdErr:= toInterface(new_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Kill the specified process.
 *  @exception FILE_ERROR It was not possible to kill the process.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: kill (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_KILL"</span>;


<span class="comment">(**
 *  Wait until the specified child process has terminated.
 *  Suspend the execution of the calling process until the
 *  specified child has terminated.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: waitFor (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_WAIT_FOR"</span>;


<span class="comment">(**
 *  Return the exit value of the specified process.
 *  By convention, the value 0 indicates normal termination.
 *  @return the exit value of the specified process.
 *  @exception FILE_ERROR The process has not yet terminated.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: exitValue (<span class="op">in</span> <span class="type">process</span>: aProcess) <span class="keywd">is</span> action <span class="stri">"PCS_EXIT_VALUE"</span>;


<span class="comment">(**
 *  Returns the search path of the system as [[array]] of [[string]]s.
 *  @return the search path of the system.
 *  @exception MEMORY_ERROR Not enough memory to create the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: getSearchPath  <span class="keywd">is</span> action <span class="stri">"CMD_GET_SEARCH_PATH"</span>;


<span class="comment">(**
 *  Sets the search path from an array of strings.
 *  The search path is used by the current process and its sub processes.
 *  The path of parent processes is not affected by this function.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system string type.
 *  @exception RANGE_ERROR The path cannot be converted to the
 *             system string type or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setSearchPath (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: searchPath)  <span class="keywd">is</span> action <span class="stri">"CMD_SET_SEARCH_PATH"</span>;


<span class="comment">(**
 *  Search for an executable in the directories of the search path.
 *  @return the absolute path of the executable or "" if
 *          the executable was not found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: commandPath (<span class="op">in</span> <span class="type">string</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: cmdPath <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: path <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: filePath <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: searching <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> pos(command, <span class="stri">'/'</span>) = 0 <span class="keywd">then</span>
      <span class="keywd">for</span> path <span class="keywd">range</span> getSearchPath <span class="keywd">do</span>
        filePath := path &amp; <span class="stri">"/"</span> &amp; command &amp; ccConf.EXECUTABLE_FILE_EXTENSION;
        <span class="keywd">if</span> searching <span class="op">and</span> fileType(filePath) = FILE_REGULAR <span class="op">and</span>
            fileMode(filePath) &amp; {EXEC_USER, EXEC_GROUP, EXEC_OTHER} &lt;> fileMode.value <span class="keywd">then</span>
          searching := FALSE;
          cmdPath := filePath;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> startsWith(command, <span class="stri">"/"</span>) <span class="keywd">then</span>
        cmdPath := command &amp; ccConf.EXECUTABLE_FILE_EXTENSION;
      <span class="keywd">else</span>
        cmdPath := getcwd;
        <span class="keywd">if</span> cmdPath = <span class="stri">"/"</span> <span class="keywd">then</span>
          cmdPath &amp;:= command &amp; ccConf.EXECUTABLE_FILE_EXTENSION;
        <span class="keywd">else</span>
          cmdPath &amp;:= <span class="stri">"/"</span> &amp; command &amp; ccConf.EXECUTABLE_FILE_EXTENSION;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> fileType(cmdPath) &lt;> FILE_REGULAR <span class="op">or</span>
          fileMode(cmdPath) &amp; {EXEC_USER, EXEC_GROUP, EXEC_OTHER} = fileMode.value <span class="keywd">then</span>
        cmdPath := <span class="stri">""</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Search for the directory of an executable in the search path.
 *  @return the absolute path of the directory of the executable or
 *          "" if the executable was not found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: commandDir (<span class="op">in</span> <span class="type">string</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: cmdDir <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: path <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: filePath <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: searching <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSlashPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> pos(command, <span class="stri">'/'</span>) = 0 <span class="keywd">then</span>
      <span class="keywd">for</span> path <span class="keywd">range</span> getSearchPath <span class="keywd">do</span>
        filePath := path &amp; <span class="stri">"/"</span> &amp; command &amp; ccConf.EXECUTABLE_FILE_EXTENSION;
        <span class="keywd">if</span> searching <span class="op">and</span> fileType(filePath) = FILE_REGULAR <span class="op">and</span>
            fileMode(filePath) &amp; {EXEC_USER, EXEC_GROUP, EXEC_OTHER} &lt;> fileMode.value <span class="keywd">then</span>
          searching := FALSE;
          cmdDir := path;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">elsif</span> startsWith(command, <span class="stri">"/"</span>) <span class="keywd">then</span>
      lastSlashPos := rpos(command, <span class="stri">'/'</span>);
      <span class="keywd">if</span> lastSlashPos = 1 <span class="keywd">then</span>
        cmdDir := <span class="stri">"/"</span>;
      <span class="keywd">else</span>
        cmdDir := command[.. pred(lastSlashPos)];
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      cmdDir := getcwd;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: pipe2 (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
    <span class="keywd">inout</span> <span class="type">clib_file</span>: primitiveChildStdin,
    <span class="keywd">inout</span> <span class="type">clib_file</span>: primitiveChildStdout) <span class="keywd">is</span> action <span class="stri">"PCS_PIPE2"</span>;


<span class="comment">(**
 *  Start a process and connect pipes to its standard I/O files.
 *  The command path must lead to an executable file. The environment
 *  variable PATH is not used to search for an executable. Pipe2
 *  can be used to execute programs which process a stream of data.
 *  Interactive programs buffer their I/O if they are not connected
 *  to a terminal. Pipe2 has no influence of the buffering of the
 *  executed command. Therefore interactive programs might not work
 *  correctly with pipe2.
 *  @exception MEMORY_ERROR Not enough memory to convert 'command'
 *             to the system path type.
 *  @exception RANGE_ERROR 'command' is not representable in the
 *             system path type.
 *  @exception FILE_ERROR The file does not exist or does not
 *             have execute permission.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: pipe2 (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
    <span class="keywd">inout</span> <span class="type">file</span>: childStdin, <span class="keywd">inout</span> <span class="type">file</span>: childStdout) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: primitiveChildStdin <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">clib_file</span>: primitiveChildStdout <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_ChildStdin <span class="keywd">is</span> external_file.value;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_ChildStdout <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    pipe2(command, parameters, primitiveChildStdin, primitiveChildStdout);
    <span class="keywd">if</span> primitiveChildStdin &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_ChildStdin.ext_file := primitiveChildStdin;
      childStdin := toInterface(new_ChildStdin);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> primitiveChildStdout &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      <span class="comment"># setbuf(primitiveChildStdout, IO_NO_BUFFERING, 0);</span>
      new_ChildStdout.ext_file := primitiveChildStdout;
      childStdout := toInterface(new_ChildStdout);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: pty (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
    <span class="keywd">inout</span> <span class="type">clib_file</span>: primitiveChildStdin,
    <span class="keywd">inout</span> <span class="type">clib_file</span>: primitiveChildStdout) <span class="keywd">is</span> action <span class="stri">"PCS_PTY"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: pty (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
    <span class="keywd">inout</span> <span class="type">file</span>: childStdin, <span class="keywd">inout</span> <span class="type">file</span>: childStdout) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: primitiveChildStdin <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">clib_file</span>: primitiveChildStdout <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_ChildStdin <span class="keywd">is</span> external_file.value;
    <span class="keywd">var</span> <span class="type">external_file</span>: new_ChildStdout <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    pty(command, parameters, primitiveChildStdin, primitiveChildStdout);
    <span class="keywd">if</span> primitiveChildStdin &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_ChildStdin.ext_file := primitiveChildStdin;
      childStdin := toInterface(new_ChildStdin);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> primitiveChildStdout &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_ChildStdout.ext_file := primitiveChildStdout;
      childStdout := toInterface(new_ChildStdout);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
