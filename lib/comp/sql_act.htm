<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  sql_act.s7i   Generate code for actions for database access.    *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_BIGINT        <span class="keywd">is</span> action <span class="stri">"SQL_BIND_BIGINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_BIGRAT        <span class="keywd">is</span> action <span class="stri">"SQL_BIND_BIGRAT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_BOOL          <span class="keywd">is</span> action <span class="stri">"SQL_BIND_BOOL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_BSTRI         <span class="keywd">is</span> action <span class="stri">"SQL_BIND_BSTRI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_DURATION      <span class="keywd">is</span> action <span class="stri">"SQL_BIND_DURATION"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_FLOAT         <span class="keywd">is</span> action <span class="stri">"SQL_BIND_FLOAT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_INT           <span class="keywd">is</span> action <span class="stri">"SQL_BIND_INT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_NULL          <span class="keywd">is</span> action <span class="stri">"SQL_BIND_NULL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_STRI          <span class="keywd">is</span> action <span class="stri">"SQL_BIND_STRI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_BIND_TIME          <span class="keywd">is</span> action <span class="stri">"SQL_BIND_TIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CLOSE              <span class="keywd">is</span> action <span class="stri">"SQL_CLOSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CMP_DB             <span class="keywd">is</span> action <span class="stri">"SQL_CMP_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CMP_STMT           <span class="keywd">is</span> action <span class="stri">"SQL_CMP_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_BIGINT      <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_BIGINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_BIGRAT      <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_BIGRAT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_BOOL        <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_BOOL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_BSTRI       <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_BSTRI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_DURATION    <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_DURATION"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_FLOAT       <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_FLOAT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_INT         <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_INT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_STRI        <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_STRI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COLUMN_TIME        <span class="keywd">is</span> action <span class="stri">"SQL_COLUMN_TIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_COMMIT             <span class="keywd">is</span> action <span class="stri">"SQL_COMMIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CPY_DB             <span class="keywd">is</span> action <span class="stri">"SQL_CPY_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CPY_STMT           <span class="keywd">is</span> action <span class="stri">"SQL_CPY_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CREATE_DB          <span class="keywd">is</span> action <span class="stri">"SQL_CREATE_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_CREATE_STMT        <span class="keywd">is</span> action <span class="stri">"SQL_CREATE_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_DESTR_DB           <span class="keywd">is</span> action <span class="stri">"SQL_DESTR_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_DESTR_STMT         <span class="keywd">is</span> action <span class="stri">"SQL_DESTR_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_DRIVER             <span class="keywd">is</span> action <span class="stri">"SQL_DRIVER"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_EMPTY_DB           <span class="keywd">is</span> action <span class="stri">"SQL_EMPTY_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_EMPTY_STMT         <span class="keywd">is</span> action <span class="stri">"SQL_EMPTY_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_EQ_DB              <span class="keywd">is</span> action <span class="stri">"SQL_EQ_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_EQ_STMT            <span class="keywd">is</span> action <span class="stri">"SQL_EQ_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_ERR_CODE           <span class="keywd">is</span> action <span class="stri">"SQL_ERR_CODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_ERR_DB_FUNC        <span class="keywd">is</span> action <span class="stri">"SQL_ERR_DB_FUNC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_ERR_LIB_FUNC       <span class="keywd">is</span> action <span class="stri">"SQL_ERR_LIB_FUNC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_ERR_MESSAGE        <span class="keywd">is</span> action <span class="stri">"SQL_ERR_MESSAGE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_EXECUTE            <span class="keywd">is</span> action <span class="stri">"SQL_EXECUTE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_FETCH              <span class="keywd">is</span> action <span class="stri">"SQL_FETCH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_GET_AUTO_COMMIT    <span class="keywd">is</span> action <span class="stri">"SQL_GET_AUTO_COMMIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_IS_NULL            <span class="keywd">is</span> action <span class="stri">"SQL_IS_NULL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_NE_DB              <span class="keywd">is</span> action <span class="stri">"SQL_NE_DB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_NE_STMT            <span class="keywd">is</span> action <span class="stri">"SQL_NE_STMT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_DB2           <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_DB2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_FIRE          <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_FIRE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_INFORMIX      <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_INFORMIX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_LITE          <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_LITE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_MY            <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_MY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_OCI           <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_OCI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_ODBC          <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_ODBC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_POST          <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_POST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_SQLSRV        <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_SQLSRV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_OPEN_TDS           <span class="keywd">is</span> action <span class="stri">"SQL_OPEN_TDS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_PREPARE            <span class="keywd">is</span> action <span class="stri">"SQL_PREPARE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_ROLLBACK           <span class="keywd">is</span> action <span class="stri">"SQL_ROLLBACK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_SET_AUTO_COMMIT    <span class="keywd">is</span> action <span class="stri">"SQL_SET_AUTO_COMMIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_STMT_COLUMN_COUNT  <span class="keywd">is</span> action <span class="stri">"SQL_STMT_COLUMN_COUNT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SQL_STMT_COLUMN_NAME   <span class="keywd">is</span> action <span class="stri">"SQL_STMT_COLUMN_NAME"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: sql_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        sqlBindBigInt (sqlStmtType, intType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindBigRat (sqlStmtType, intType, const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindBool (sqlStmtType, intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindBStri (sqlStmtType, intType, const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindDuration (sqlStmtType, intType, intType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindFloat (sqlStmtType, intType, floatType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindInt (sqlStmtType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindNull (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindStri (sqlStmtType, intType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlBindTime (sqlStmtType, intType, intType, intType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlClose (databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  sqlColumnBigInt (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlColumnBigRat (sqlStmtType, intType, bigIntType *, bigIntType * );"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    sqlColumnBool (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   sqlColumnBStri (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlColumnDuration (sqlStmtType, intType, intType *, intType *, intType *, intType *, intType *, intType *, intType * );"</span>);
    declareExtern(c_prog, <span class="stri">"floatType   sqlColumnFloat (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     sqlColumnInt (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    sqlColumnStri (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlColumnTime (sqlStmtType, intType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType * );"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlCommit (databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlCpyDb (databaseType *const, const databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlCpyDbGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlCpyStmt (sqlStmtType *const, const sqlStmtType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlCpyStmtGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlCreateDb (const databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType sqlCreateDbGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"sqlStmtType sqlCreateStmt (const sqlStmtType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType sqlCreateStmtGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlDestrDb (const databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlDestrDbGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlDestrStmt (const sqlStmtType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlDestrStmtGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     sqlDriver (databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     sqlErrCode (void);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    sqlErrDbFunc (void);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    sqlErrLibFunc (void);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    sqlErrMessage (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlExecute (sqlStmtType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    sqlFetch (sqlStmtType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    sqlGetAutoCommit (databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    sqlIsNull (sqlStmtType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenDb2 (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenFire (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenInformix (const const_striType, intType, const const_striType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenLite (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenMy (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenOci (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenOdbc (const const_striType driver, const const_striType server, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenPost (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenSqlServer (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"databaseType sqlOpenTds (const const_striType, intType, const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"sqlStmtType sqlPrepare (databaseType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlRollback (databaseType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        sqlSetAutoCommit (databaseType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     sqlStmtColumnCount (sqlStmtType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    sqlStmtColumnName (sqlStmtType, intType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_BIGINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.expr &amp;:= <span class="stri">"sqlBindBigInt("</span>;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], statement);
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_BIGRAT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.expr &amp;:= <span class="stri">"sqlBindBigRat("</span>;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], statement);
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_BOOL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlBindBool("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_BSTRI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.expr &amp;:= <span class="stri">"sqlBindBStri("</span>;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], statement);
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_DURATION, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlBindDuration("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_FLOAT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlBindFloat("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_INT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlBindInt("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_NULL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlBindNull("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_STRI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.expr &amp;:= <span class="stri">"sqlBindStri("</span>;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], statement);
    statement.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], statement);
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_BIND_TIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlBindTime("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_CLOSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlClose("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_CMP_DB, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"ptrCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_CMP_STMT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"ptrCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_BIGINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlColumnBigInt("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_BIGRAT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlColumnBigRat("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_BOOL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlColumnBool("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_BSTRI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlColumnBStri("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_DURATION, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlColumnDuration("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_FLOAT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlColumnFloat("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_INT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlColumnInt("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_STRI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlColumnStri("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COLUMN_TIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlColumnTime("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[11], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_COMMIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlCommit("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_CPY_DB, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"databaseType new_db;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_db="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"sqlDestrDb("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_db;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"databaseType *db_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"sqlDestrDb(*db_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*db_ptr=new_db;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"sqlCpyDb(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_CPY_STMT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"sqlStmtType new_stmt;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_stmt="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"sqlDestrStmt("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_stmt;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"sqlStmtType *stmt_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"sqlDestrStmt(*stmt_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*stmt_ptr=new_stmt;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"sqlCpyStmt(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_DRIVER, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlDriver("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_EQ_DB, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_EQ_STMT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_ERR_CODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlErrCode()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_ERR_DB_FUNC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlErrDbFunc()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_ERR_LIB_FUNC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlErrLibFunc()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_ERR_MESSAGE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlErrMessage()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_EXECUTE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlExecute("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_FETCH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlFetch("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_GET_AUTO_COMMIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlGetAutoCommit("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_IS_NULL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlIsNull("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_NE_DB, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_NE_STMT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_DB2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenDb2("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_FIRE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenFire("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_INFORMIX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenInformix("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[7], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_LITE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenLite("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_MY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenMy("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_OCI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenOci("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_ODBC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenOdbc("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_POST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenPost("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_SQLSRV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenSqlServer("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_OPEN_TDS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlOpenTds("</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[6], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_PREPARE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"sqlPrepare("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_ROLLBACK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlRollback("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_SET_AUTO_COMMIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"sqlSetAutoCommit("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_STMT_COLUMN_COUNT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"sqlStmtColumnCount("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SQL_STMT_COLUMN_NAME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"sqlStmtColumnName("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
