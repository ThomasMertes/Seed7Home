<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  actions.s7i   Generate C code for primitive actions.            *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2015  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">proc</span>: process_action (<span class="op">in</span> <span class="type">reference</span>: function, <span class="op">in</span> <span class="type">ref_list</span>: params,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">const</span> <span class="type">proc</span>: declareExtern (<span class="keywd">inout</span> <span class="type">file</span>: c_prog, <span class="op">in</span> <span class="type">string</span>: prototype) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/act_act.htm">comp/act_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/arr_act.htm">comp/arr_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/big_act.htm">comp/big_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/bin_act.htm">comp/bin_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/bln_act.htm">comp/bln_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/bst_act.htm">comp/bst_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/chr_act.htm">comp/chr_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/cmd_act.htm">comp/cmd_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/con_act.htm">comp/con_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/dcl_act.htm">comp/dcl_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/drw_act.htm">comp/drw_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/enu_act.htm">comp/enu_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/fil_act.htm">comp/fil_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/flt_act.htm">comp/flt_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/gkb_act.htm">comp/gkb_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/hsh_act.htm">comp/hsh_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/int_act.htm">comp/int_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/itf_act.htm">comp/itf_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/kbd_act.htm">comp/kbd_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/pcs_act.htm">comp/pcs_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/pol_act.htm">comp/pol_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/prc_act.htm">comp/prc_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/prg_act.htm">comp/prg_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/ref_act.htm">comp/ref_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/rfl_act.htm">comp/rfl_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/sct_act.htm">comp/sct_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/sel_act.htm">comp/sel_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/set_act.htm">comp/set_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/soc_act.htm">comp/soc_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/sql_act.htm">comp/sql_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/str_act.htm">comp/str_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/tim_act.htm">comp/tim_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/typ_act.htm">comp/typ_act.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../../lib/comp/ut8_act.htm">comp/ut8_act.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: declareExtern (<span class="keywd">inout</span> <span class="type">file</span>: c_prog, <span class="op">in</span> <span class="type">string</span>: prototype) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    write(c_prog, <span class="stri">"extern "</span>);
    <span class="keywd">if</span> config.declare_with_extern_c <span class="keywd">then</span>
      write(c_prog, <span class="stri">"\"C\" "</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    writeln(c_prog, prototype);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_unknown_action (<span class="op">in</span> <span class="type">string</span>: action_name, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"/* ACTOBJECT { "</span>;
    c_expr.expr &amp;:= action_name;
    c_expr.expr &amp;:= <span class="stri">" }*/"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_action (<span class="op">in</span> <span class="type">reference</span>: function, <span class="op">in</span> <span class="type">ref_list</span>: params,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ACTION</span>: currentAction <span class="keywd">is</span> action <span class="stri">"PRC_NOOP"</span>;
    <span class="keywd">var</span> <span class="type">string</span>: actionName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    currentAction := getValue(function, ACTION);
    actionName := str(currentAction);
    <span class="comment"># c_expr.expr &amp;:= "/* " &lt;&amp; actionName &lt;&amp; " */\n";</span>
    <span class="keywd">case</span> actionName <span class="keywd">of</span>
      <span class="keywd">when</span> {<span class="stri">"ACT_CPY"</span>}:
        process(ACT_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_EQ"</span>}:
        process(ACT_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_GEN"</span>}:
        process(ACT_GEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_ICONV1"</span>}:
        process(ACT_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_ICONV3"</span>}:
        process(ACT_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_NE"</span>}:
        process(ACT_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_ORD"</span>}:
        process(ACT_ORD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_STR"</span>}:
        process(ACT_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ACT_VALUE"</span>}:
        process(ACT_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_APPEND"</span>}:
        process(ARR_APPEND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_ARRLIT"</span>}:
        process(ARR_ARRLIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_ARRLIT2"</span>}:
        process(ARR_ARRLIT2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_BASELIT"</span>}:
        process(ARR_BASELIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_BASELIT2"</span>}:
        process(ARR_BASELIT2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_CAT"</span>}:
        process(ARR_CAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_CONV"</span>}:
        process(ARR_CONV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_CPY"</span>}:
        process(ARR_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_CREATE"</span>}:
        process(ARR_CREATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_DESTR"</span>}:
        process(ARR_DESTR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_EXTEND"</span>}:
        process(ARR_EXTEND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_GEN"</span>}:
        process(ARR_GEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_HEAD"</span>}:
        process(ARR_HEAD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_IDX"</span>}:
        process(ARR_IDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_INSERT"</span>}:
        process(ARR_INSERT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_INSERT_ARRAY"</span>}:
        process(ARR_INSERT_ARRAY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_LNG"</span>}:
        process(ARR_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_MAXIDX"</span>}:
        process(ARR_MAXIDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_MINIDX"</span>}:
        process(ARR_MINIDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_PUSH"</span>}:
        process(ARR_PUSH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_RANGE"</span>}:
        process(ARR_RANGE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_REMOVE"</span>}:
        process(ARR_REMOVE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_REMOVE_ARRAY"</span>}:
        process(ARR_REMOVE_ARRAY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_SORT"</span>}:
        process(ARR_SORT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_SORT_REVERSE"</span>}:
        process(ARR_SORT_REVERSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_SUBARR"</span>}:
        process(ARR_SUBARR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_TIMES"</span>}:
        process(ARR_TIMES, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ARR_TAIL"</span>}:
        process(ARR_TAIL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ABS"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ABS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ADD"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ADD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ADD_ASSIGN"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ADD_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_BIT_LENGTH"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_BIT_LENGTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_CMP"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_CONV"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_CONV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_CPY"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_DECR"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_DECR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_DIV"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_DIV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_DIV_REM"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_DIV_REM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_EQ"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_FROM_BSTRI_BE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_FROM_BSTRI_BE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_FROM_BSTRI_LE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_FROM_BSTRI_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_GCD"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_GCD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_GE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_GT"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_HASHCODE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ICONV1"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ICONV3"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_INCR"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_INCR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_IPOW"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_IPOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LOG10"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LOG10, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LOG2"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LOG2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LOWEST_SET_BIT"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LOWEST_SET_BIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LSHIFT"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LSHIFT_ASSIGN"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LSHIFT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_LT"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_MDIV"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_MDIV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_MOD"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_MOD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_MULT"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_MULT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_MULT_ASSIGN"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_MULT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_NE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_NEGATE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_NEGATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ODD"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ODD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_ORD"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_ORD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_PARSE1"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_PARSE1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_PARSE_BASED"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_PARSE_BASED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_PLUS"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_PLUS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_PRED"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_PRED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_radix"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_radix, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_RADIX"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_RADIX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_RAND"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_RAND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_REM"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_REM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_RSHIFT"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_RSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_RSHIFT_ASSIGN"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_RSHIFT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_SBTR"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_SBTR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_SBTR_ASSIGN"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_SBTR_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_STR"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_SUCC"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_SUCC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_TO_BSTRI_BE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_TO_BSTRI_BE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_TO_BSTRI_LE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_TO_BSTRI_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIG_VALUE"</span>}:
        programUses.bigintLibrary := TRUE;
        process(BIG_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_AND"</span>}:
        process(BIN_AND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_AND_ASSIGN"</span>}:
        process(BIN_AND_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_BIG"</span>}:
        process(BIN_BIG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_BINARY"</span>}:
        process(BIN_BINARY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_BIT_LENGTH"</span>}:
        process(BIN_BIT_LENGTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_BYTES_BE_2_UINT"</span>}:
        process(BIN_BYTES_BE_2_UINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_BYTES_LE_2_UINT"</span>}:
        process(BIN_BYTES_LE_2_UINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_CARD"</span>}:
        process(BIN_CARD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_CMP"</span>}:
        process(BIN_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_GET_BINARY_FROM_SET"</span>}:
        process(BIN_GET_BINARY_FROM_SET, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_LOWEST_SET_BIT"</span>}:
        process(BIN_LOWEST_SET_BIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_LSHIFT"</span>}:
        process(BIN_LSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_LSHIFT_ASSIGN"</span>}:
        process(BIN_LSHIFT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_N_BYTES_BE"</span>}:
        process(BIN_N_BYTES_BE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_N_BYTES_LE"</span>}:
        process(BIN_N_BYTES_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_OR"</span>}:
        process(BIN_OR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_OR_ASSIGN"</span>}:
        process(BIN_OR_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_radix"</span>}:
        process(BIN_radix, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_RADIX"</span>}:
        process(BIN_RADIX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_RSHIFT"</span>}:
        process(BIN_RSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_RSHIFT_ASSIGN"</span>}:
        process(BIN_RSHIFT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_STR"</span>}:
        process(BIN_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_XOR"</span>}:
        process(BIN_XOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BIN_XOR_ASSIGN"</span>}:
        process(BIN_XOR_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_AND"</span>}:
        process(BLN_AND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_CPY"</span>}:
        process(BLN_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_EQ"</span>}:
        process(BLN_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_GE"</span>}:
        process(BLN_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_GT"</span>}:
        process(BLN_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_ICONV1"</span>}:
        process(BLN_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_ICONV3"</span>}:
        process(BLN_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_LE"</span>}:
        process(BLN_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_LT"</span>}:
        process(BLN_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_NE"</span>}:
        process(BLN_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_NOT"</span>}:
        process(BLN_NOT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_OR"</span>}:
        process(BLN_OR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_ORD"</span>}:
        process(BLN_ORD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_PRED"</span>}:
        process(BLN_PRED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_SUCC"</span>}:
        process(BLN_SUCC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_TERNARY"</span>}:
        process(BLN_TERNARY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BLN_VALUE"</span>}:
        process(BLN_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_APPEND"</span>}:
        process(BST_APPEND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_CMP"</span>}:
        process(BST_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_CPY"</span>}:
        process(BST_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_EQ"</span>}:
        process(BST_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_HASHCODE"</span>}:
        process(BST_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_IDX"</span>}:
        process(BST_IDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_LNG"</span>}:
        process(BST_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_NE"</span>}:
        process(BST_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_PARSE1"</span>}:
        process(BST_PARSE1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_STR"</span>}:
        process(BST_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"BST_VALUE"</span>}:
        process(BST_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_CLIT"</span>}:
        process(CHR_CLIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_CMP"</span>}:
        process(CHR_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_CPY"</span>}:
        process(CHR_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_EQ"</span>}:
        process(CHR_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_DECR"</span>}:
        process(CHR_DECR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_GE"</span>}:
        process(CHR_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_GT"</span>}:
        process(CHR_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_HASHCODE"</span>}:
        process(CHR_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_ICONV1"</span>}:
        process(CHR_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_ICONV3"</span>}:
        process(CHR_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_INCR"</span>}:
        process(CHR_INCR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_IS_LETTER"</span>}:
        process(CHR_IS_LETTER, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_LE"</span>}:
        process(CHR_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_LOW"</span>}:
        process(CHR_LOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_LT"</span>}:
        process(CHR_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_NE"</span>}:
        process(CHR_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_ORD"</span>}:
        process(CHR_ORD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_PRED"</span>}:
        process(CHR_PRED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_STR"</span>}:
        process(CHR_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_SUCC"</span>}:
        process(CHR_SUCC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_UP"</span>}:
        process(CHR_UP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_VALUE"</span>}:
        process(CHR_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CHR_WIDTH"</span>}:
        process(CHR_WIDTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_BIG_FILESIZE"</span>}:
        process(CMD_BIG_FILESIZE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_CHDIR"</span>}:
        process(CMD_CHDIR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_CLONE_FILE"</span>}:
        process(CMD_CLONE_FILE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_CONFIG_VALUE"</span>}:
        process(CMD_CONFIG_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_COPY_FILE"</span>}:
        process(CMD_COPY_FILE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_ENVIRONMENT"</span>}:
        process(CMD_ENVIRONMENT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_FILESIZE"</span>}:
        process(CMD_FILESIZE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_FILETYPE"</span>}:
        process(CMD_FILETYPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_FILETYPE_SL"</span>}:
        process(CMD_FILETYPE_SL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_FINAL_PATH"</span>}:
        process(CMD_FINAL_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GETCWD"</span>}:
        process(CMD_GETCWD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GETENV"</span>}:
        process(CMD_GETENV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_ATIME"</span>}:
        process(CMD_GET_ATIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_ATIME_OF_SYMLINK"</span>}:
        process(CMD_GET_ATIME_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_CTIME"</span>}:
        process(CMD_GET_CTIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_FILE_MODE"</span>}:
        process(CMD_GET_FILE_MODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_FILE_MODE_OF_SYMLINK"</span>}:
        process(CMD_GET_FILE_MODE_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_GROUP"</span>}:
        process(CMD_GET_GROUP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_GROUP_OF_SYMLINK"</span>}:
        process(CMD_GET_GROUP_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_MTIME"</span>}:
        process(CMD_GET_MTIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_MTIME_OF_SYMLINK"</span>}:
        process(CMD_GET_MTIME_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_OWNER"</span>}:
        process(CMD_GET_OWNER, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_OWNER_OF_SYMLINK"</span>}:
        process(CMD_GET_OWNER_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_GET_SEARCH_PATH"</span>}:
        process(CMD_GET_SEARCH_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_HOME_DIR"</span>}:
        process(CMD_HOME_DIR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_MAKE_DIR"</span>}:
        process(CMD_MAKE_DIR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_MAKE_LINK"</span>}:
        process(CMD_MAKE_LINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_MOVE"</span>}:
        process(CMD_MOVE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_READ_DIR"</span>}:
        process(CMD_READ_DIR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_READ_LINK"</span>}:
        process(CMD_READ_LINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_READ_LINK_ABSOLUTE"</span>}:
        process(CMD_READ_LINK_ABSOLUTE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_REMOVE_FILE"</span>}:
        process(CMD_REMOVE_FILE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_REMOVE_TREE"</span>}:
        process(CMD_REMOVE_TREE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SETENV"</span>}:
        process(CMD_SETENV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_ATIME"</span>}:
        process(CMD_SET_ATIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_FILE_MODE"</span>}:
        process(CMD_SET_FILE_MODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_GROUP"</span>}:
        process(CMD_SET_GROUP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_GROUP_OF_SYMLINK"</span>}:
        process(CMD_SET_GROUP_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_MTIME"</span>}:
        process(CMD_SET_MTIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_MTIME_OF_SYMLINK"</span>}:
        process(CMD_SET_MTIME_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_OWNER"</span>}:
        process(CMD_SET_OWNER, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_OWNER_OF_SYMLINK"</span>}:
        process(CMD_SET_OWNER_OF_SYMLINK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SET_SEARCH_PATH"</span>}:
        process(CMD_SET_SEARCH_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SHELL"</span>}:
        process(CMD_SHELL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_SHELL_ESCAPE"</span>}:
        process(CMD_SHELL_ESCAPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_TO_OS_PATH"</span>}:
        process(CMD_TO_OS_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CMD_UNSETENV"</span>}:
        process(CMD_UNSETENV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_CLEAR"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_CLEAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_COLUMN"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_COLUMN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_CURSOR"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_CURSOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_FLUSH"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_FLUSH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_HEIGHT"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_HEIGHT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_H_SCL"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_H_SCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_LINE"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_LINE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_OPEN"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_OPEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_SETPOS"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_SETPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_V_SCL"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_V_SCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_WIDTH"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_WIDTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"CON_WRITE"</span>}:
        programUses.consoleLibrary := TRUE;
        process(CON_WRITE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DCL_CONST"</span>}:
        process(DCL_CONST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DCL_FWD"</span>}:
        process(DCL_FWD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DCL_GLOBAL"</span>}:
        process(DCL_GLOBAL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DCL_VAR"</span>}:
        process(DCL_VAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_BORDER"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_BORDER, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_CAPTURE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_CAPTURE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_CLEAR"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_CLEAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_CMP"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_CONV_POINT_LIST"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_CONV_POINT_LIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_COPYAREA"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_COPYAREA, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_CPY"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_EQ"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_FLUSH"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_FLUSH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_FPOLY_LINE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_FPOLY_LINE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GEN_POINT_LIST"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GEN_POINT_LIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_IMAGE_PIXEL"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_IMAGE_PIXEL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_PIXEL"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_PIXEL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_PIXEL_ARRAY"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_PIXEL_ARRAY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_PIXEL_DATA"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_PIXEL_DATA, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_PIXEL_DATA_FROM_ARRAY"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_PIXEL_DATA_FROM_ARRAY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_PIXMAP"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_PIXMAP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_GET_PIXMAP_FROM_PIXELS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_GET_PIXMAP_FROM_PIXELS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_HASHCODE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_HEIGHT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_HEIGHT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_NE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_NEW_PIXMAP"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_NEW_PIXMAP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_OPEN"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_OPEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_OPEN_SUB_WINDOW"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_OPEN_SUB_WINDOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PARC"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PARC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PCIRCLE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PCIRCLE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PFARC"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PFARC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PFARCCHORD"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PFARCCHORD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PFARCPIESLICE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PFARCPIESLICE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PFCIRCLE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PFCIRCLE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PFELLIPSE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PFELLIPSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PIXEL_TO_RGB"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PIXEL_TO_RGB, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PLINE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PLINE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_POINTER_XPOS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_POINTER_XPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_POINTER_YPOS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_POINTER_YPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_POLY_LINE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_POLY_LINE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PPOINT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PPOINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PRECT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PRECT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PUT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PUT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_PUT_SCALED"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_PUT_SCALED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_RGBCOL"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_RGBCOL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SCREEN_HEIGHT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SCREEN_HEIGHT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SCREEN_WIDTH"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SCREEN_WIDTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_CONTENT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_CONTENT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_CURSOR_VISIBLE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_CURSOR_VISIBLE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_POINTER_POS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_POINTER_POS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_POS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_POS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_SIZE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_SIZE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_TRANSPARENT_COLOR"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_TRANSPARENT_COLOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_SET_WINDOW_NAME"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_SET_WINDOW_NAME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_TEXT"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_TEXT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_TO_BOTTOM"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_TO_BOTTOM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_TO_TOP"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_TO_TOP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_VALUE"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_WIDTH"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_WIDTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_XPOS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_XPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"DRW_YPOS"</span>}:
        programUses.drawLibrary := TRUE;
        process(DRW_YPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_CONV"</span>}:
        process(ENU_CONV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_CPY"</span>}:
        process(ENU_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_EQ"</span>}:
        process(ENU_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_ICONV2"</span>}:
        process(ENU_ICONV2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_LIT"</span>}:
        process(ENU_LIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_NE"</span>}:
        process(ENU_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_ORD2"</span>}:
        process(ENU_ORD2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ENU_VALUE"</span>}:
        process(ENU_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_BIG_LNG"</span>}:
        process(FIL_BIG_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_BIG_SEEK"</span>}:
        process(FIL_BIG_SEEK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_BIG_TELL"</span>}:
        process(FIL_BIG_TELL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_CLOSE"</span>}:
        process(FIL_CLOSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_CPY"</span>}:
        process(FIL_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_EMPTY"</span>}:
        process(FIL_EMPTY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_EOF"</span>}:
        process(FIL_EOF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_EQ"</span>}:
        process(FIL_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_ERR"</span>}:
        process(FIL_ERR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_FLUSH"</span>}:
        process(FIL_FLUSH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_GETC"</span>}:
        process(FIL_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_GETS"</span>}:
        process(FIL_GETS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_HAS_NEXT"</span>}:
        process(FIL_HAS_NEXT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_IN"</span>}:
        process(FIL_IN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_INPUT_READY"</span>}:
        process(FIL_INPUT_READY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_LINE_READ"</span>}:
        process(FIL_LINE_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_LIT"</span>}:
        process(FIL_LIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_LNG"</span>}:
        process(FIL_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_NE"</span>}:
        process(FIL_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_OPEN"</span>}:
        process(FIL_OPEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_OPEN_NULL_DEVICE"</span>}:
        process(FIL_OPEN_NULL_DEVICE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_OUT"</span>}:
        process(FIL_OUT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_PCLOSE"</span>}:
        process(FIL_PCLOSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_PIPE"</span>}:
        process(FIL_PIPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_POPEN"</span>}:
        process(FIL_POPEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_PRINT"</span>}:
        process(FIL_PRINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_SEEK"</span>}:
        process(FIL_SEEK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_SEEKABLE"</span>}:
        process(FIL_SEEKABLE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_SETBUF"</span>}:
        process(FIL_SETBUF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_TELL"</span>}:
        process(FIL_TELL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_TERMINATED_READ"</span>}:
        process(FIL_TERMINATED_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_TRUNCATE"</span>}:
        process(FIL_TRUNCATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_VALUE"</span>}:
        process(FIL_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_WRITE"</span>}:
        process(FIL_WRITE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FIL_WORD_READ"</span>}:
        process(FIL_WORD_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ABS"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ABS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ACOS"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ACOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ADD"</span>}:
        process(FLT_ADD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ADD_ASSIGN"</span>}:
        process(FLT_ADD_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ASIN"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ASIN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ATAN"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ATAN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ATAN2"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ATAN2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_BITS2DOUBLE"</span>}:
        process(FLT_BITS2DOUBLE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_BITS2SINGLE"</span>}:
        process(FLT_BITS2SINGLE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_CEIL"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_CEIL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_CMP"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_COS"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_COS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_COSH"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_COSH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_CPY"</span>}:
        process(FLT_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_DECOMPOSE"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_DECOMPOSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_DGTS"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_DGTS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_DIV"</span>}:
        process(FLT_DIV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_DIV_ASSIGN"</span>}:
        process(FLT_DIV_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_DOUBLE2BITS"</span>}:
        process(FLT_DOUBLE2BITS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_EQ"</span>}:
        process(FLT_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_EXP"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_EXP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_EXPM1"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_EXPM1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_FLOOR"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_FLOOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_GE"</span>}:
        process(FLT_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_GT"</span>}:
        process(FLT_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_HASHCODE"</span>}:
        process(FLT_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ICONV1"</span>}:
        process(FLT_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ICONV3"</span>}:
        process(FLT_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_IPOW"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_IPOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ISNAN"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ISNAN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ISNEGATIVEZERO"</span>}:
        process(FLT_ISNEGATIVEZERO, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LE"</span>}:
        process(FLT_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LOG"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_LOG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LOG10"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_LOG10, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LOG1P"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_LOG1P, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LOG2"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_LOG2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LSHIFT"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_LSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_LT"</span>}:
        process(FLT_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_MOD"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_MOD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_MULT"</span>}:
        process(FLT_MULT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_MULT_ASSIGN"</span>}:
        process(FLT_MULT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_NE"</span>}:
        process(FLT_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_NEGATE"</span>}:
        process(FLT_NEGATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_PARSE1"</span>}:
        process(FLT_PARSE1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_PLUS"</span>}:
        process(FLT_PLUS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_POW"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_POW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_RAND"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_RAND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_REM"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_REM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_ROUND"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_ROUND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_RSHIFT"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_RSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SBTR"</span>}:
        process(FLT_SBTR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SBTR_ASSIGN"</span>}:
        process(FLT_SBTR_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SCI"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_SCI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SIN"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_SIN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SINGLE2BITS"</span>}:
        process(FLT_SINGLE2BITS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SINH"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_SINH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_SQRT"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_SQRT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_STR"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_STR_SCIENTIFIC"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_STR_SCIENTIFIC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_TAN"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_TAN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_TANH"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_TANH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_TRUNC"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_TRUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"FLT_VALUE"</span>}:
        programUses.mathLibrary := TRUE;
        process(FLT_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_GETC"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_GETS"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_GETS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_INPUT_READY"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_INPUT_READY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_LINE_READ"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_LINE_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_RAW_GETC"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_RAW_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_SELECT_INPUT"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_SELECT_INPUT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_WINDOW"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_WINDOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_WORD_READ"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_WORD_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_BUTTON_PRESSED"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_BUTTON_PRESSED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_CLICKED_XPOS"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_CLICKED_XPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"GKB_CLICKED_YPOS"</span>}:
        programUses.drawLibrary := TRUE;
        process(GKB_CLICKED_YPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_CONCAT_KEY_VALUE"</span>}:
        process(HSH_CONCAT_KEY_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_CONTAINS"</span>}:
        process(HSH_CONTAINS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_CPY"</span>}:
        process(HSH_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_CREATE"</span>}:
        process(HSH_CREATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_DESTR"</span>}:
        process(HSH_DESTR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_EXCL"</span>}:
        process(HSH_EXCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_FOR"</span>}:
        process(HSH_FOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_FOR_DATA_KEY"</span>}:
        process(HSH_FOR_DATA_KEY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_FOR_KEY"</span>}:
        process(HSH_FOR_KEY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_GEN_HASH"</span>}:
        process(HSH_GEN_HASH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_GEN_KEY_VALUE"</span>}:
        process(HSH_GEN_KEY_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_IDX"</span>}:
        process(HSH_IDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_IDX2"</span>}:
        process(HSH_IDX2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_INCL"</span>}:
        process(HSH_INCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_KEYS"</span>}:
        process(HSH_KEYS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_LNG"</span>}:
        process(HSH_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_RAND_KEY"</span>}:
        process(HSH_RAND_KEY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_UPDATE"</span>}:
        process(HSH_UPDATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"HSH_VALUES"</span>}:
        process(HSH_VALUES, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_ABS"</span>}:
        process(INT_ABS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_ADD"</span>}:
        process(INT_ADD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_ADD_ASSIGN"</span>}:
        process(INT_ADD_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BINOM"</span>}:
        process(INT_BINOM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BIT_LENGTH"</span>}:
        process(INT_BIT_LENGTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_BE_2_INT"</span>}:
        process(INT_BYTES_BE_2_INT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_BE_2_UINT"</span>}:
        process(INT_BYTES_BE_2_UINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_BE_SIGNED"</span>}:
        process(INT_BYTES_BE_SIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_BE_UNSIGNED"</span>}:
        process(INT_BYTES_BE_UNSIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_LE_2_INT"</span>}:
        process(INT_BYTES_LE_2_INT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_LE_2_UINT"</span>}:
        process(INT_BYTES_LE_2_UINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_LE_SIGNED"</span>}:
        process(INT_BYTES_LE_SIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_BYTES_LE_UNSIGNED"</span>}:
        process(INT_BYTES_LE_UNSIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_CMP"</span>}:
        process(INT_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_CPY"</span>}:
        process(INT_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_DECR"</span>}:
        process(INT_DECR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_DIV"</span>}:
        process(INT_DIV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_EQ"</span>}:
        process(INT_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_FACT"</span>}:
        process(INT_FACT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_GE"</span>}:
        process(INT_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_GT"</span>}:
        process(INT_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_HASHCODE"</span>}:
        process(INT_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_ICONV1"</span>}:
        process(INT_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_ICONV3"</span>}:
        process(INT_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_INCR"</span>}:
        process(INT_INCR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LE"</span>}:
        process(INT_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LOG10"</span>}:
        process(INT_LOG10, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LOG2"</span>}:
        process(INT_LOG2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LOWEST_SET_BIT"</span>}:
        process(INT_LOWEST_SET_BIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LPAD0"</span>}:
        process(INT_LPAD0, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LSHIFT"</span>}:
        process(INT_LSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LSHIFT_ASSIGN"</span>}:
        process(INT_LSHIFT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_LT"</span>}:
        process(INT_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_MDIV"</span>}:
        process(INT_MDIV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_MOD"</span>}:
        process(INT_MOD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_MULT"</span>}:
        process(INT_MULT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_MULT_ASSIGN"</span>}:
        process(INT_MULT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_NE"</span>}:
        process(INT_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_NEGATE"</span>}:
        process(INT_NEGATE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_N_BYTES_BE_SIGNED"</span>}:
        process(INT_N_BYTES_BE_SIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_N_BYTES_BE_UNSIGNED"</span>}:
        process(INT_N_BYTES_BE_UNSIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_N_BYTES_LE_SIGNED"</span>}:
        process(INT_N_BYTES_LE_SIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_N_BYTES_LE_UNSIGNED"</span>}:
        process(INT_N_BYTES_LE_UNSIGNED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_ODD"</span>}:
        process(INT_ODD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_PARSE1"</span>}:
        process(INT_PARSE1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_PLUS"</span>}:
        process(INT_PLUS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_POW"</span>}:
        process(INT_POW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_PRED"</span>}:
        process(INT_PRED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_radix"</span>}:
        process(INT_radix, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_RADIX"</span>}:
        process(INT_RADIX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_RAND"</span>}:
        process(INT_RAND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_REM"</span>}:
        process(INT_REM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_RSHIFT"</span>}:
        process(INT_RSHIFT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_RSHIFT_ASSIGN"</span>}:
        process(INT_RSHIFT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_SBTR"</span>}:
        process(INT_SBTR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_SBTR_ASSIGN"</span>}:
        process(INT_SBTR_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_SQRT"</span>}:
        process(INT_SQRT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_STR"</span>}:
        process(INT_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_SUCC"</span>}:
        process(INT_SUCC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"INT_VALUE"</span>}:
        process(INT_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_CMP"</span>}:
        process(ITF_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_CONV2"</span>}:
        process(ITF_CONV2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_CPY"</span>}:
        process(ITF_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_CPY2"</span>}:
        process(ITF_CPY2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_EQ"</span>}:
        process(ITF_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_HASHCODE"</span>}:
        process(ITF_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_NE"</span>}:
        process(ITF_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"ITF_TO_INTERFACE"</span>}:
        process(ITF_TO_INTERFACE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"KBD_GETC"</span>}:
        programUses.consoleLibrary := TRUE;
        process(KBD_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"KBD_GETS"</span>}:
        programUses.consoleLibrary := TRUE;
        process(KBD_GETS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"KBD_INPUT_READY"</span>}:
        programUses.consoleLibrary := TRUE;
        process(KBD_INPUT_READY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"KBD_LINE_READ"</span>}:
        programUses.consoleLibrary := TRUE;
        process(KBD_LINE_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"KBD_RAW_GETC"</span>}:
        programUses.consoleLibrary := TRUE;
        process(KBD_RAW_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"KBD_WORD_READ"</span>}:
        programUses.consoleLibrary := TRUE;
        process(KBD_WORD_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_CHILD_STDERR"</span>}:
        process(PCS_CHILD_STDERR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_CHILD_STDIN"</span>}:
        process(PCS_CHILD_STDIN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_CHILD_STDOUT"</span>}:
        process(PCS_CHILD_STDOUT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_CMP"</span>}:
        process(PCS_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_CPY"</span>}:
        process(PCS_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_EQ"</span>}:
        process(PCS_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_EXIT_VALUE"</span>}:
        process(PCS_EXIT_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_HASHCODE"</span>}:
        process(PCS_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_IS_ALIVE"</span>}:
        process(PCS_IS_ALIVE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_KILL"</span>}:
        process(PCS_KILL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_NE"</span>}:
        process(PCS_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_PIPE2"</span>}:
        process(PCS_PIPE2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_PTY"</span>}:
        process(PCS_PTY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_START"</span>}:
        process(PCS_START, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_START_PIPE"</span>}:
        process(PCS_START_PIPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_STR"</span>}:
        process(PCS_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_VALUE"</span>}:
        process(PCS_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PCS_WAIT_FOR"</span>}:
        process(PCS_WAIT_FOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_BSTRING"</span>}:
        process(PLT_BSTRING, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_CMP"</span>}:
        process(PLT_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_CPY"</span>}:
        process(PLT_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_EQ"</span>}:
        process(PLT_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_HASHCODE"</span>}:
        process(PLT_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_NE"</span>}:
        process(PLT_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_POINT_LIST"</span>}:
        process(PLT_POINT_LIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PLT_VALUE"</span>}:
        process(PLT_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_ADD_CHECK"</span>}:
        process(POL_ADD_CHECK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_CLEAR"</span>}:
        process(POL_CLEAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_CPY"</span>}:
        process(POL_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_GET_CHECK"</span>}:
        process(POL_GET_CHECK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_GET_FINDING"</span>}:
        process(POL_GET_FINDING, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_HAS_NEXT"</span>}:
        process(POL_HAS_NEXT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_ITER_CHECKS"</span>}:
        process(POL_ITER_CHECKS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_ITER_FINDINGS"</span>}:
        process(POL_ITER_FINDINGS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_NEXT_FILE"</span>}:
        process(POL_NEXT_FILE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_POLL"</span>}:
        process(POL_POLL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_REMOVE_CHECK"</span>}:
        process(POL_REMOVE_CHECK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"POL_VALUE"</span>}:
        process(POL_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_ARGS"</span>}:
        process(PRC_ARGS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_BLOCK"</span>}:
        process(PRC_BLOCK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_BLOCK_CATCH_ALL"</span>}:
        process(PRC_BLOCK_CATCH_ALL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_BLOCK_OTHERWISE"</span>}:
        process(PRC_BLOCK_OTHERWISE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_CASE"</span>}:
        process(PRC_CASE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_CASE_DEF"</span>}:
        process(PRC_CASE_DEF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_CASE_HASHSET"</span>}:
        process(PRC_CASE_HASHSET, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_CASE_HASHSET_DEF"</span>}:
        process(PRC_CASE_HASHSET_DEF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_CPY"</span>}:
        process(PRC_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_DYNAMIC"</span>}:
        process(PRC_DYNAMIC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_EXIT"</span>}:
        process(PRC_EXIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_FOR_DOWNTO"</span>}:
        process(PRC_FOR_DOWNTO, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_FOR_DOWNTO_STEP"</span>}:
        process(PRC_FOR_DOWNTO_STEP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_FOR_TO"</span>}:
        process(PRC_FOR_TO, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_FOR_TO_STEP"</span>}:
        process(PRC_FOR_TO_STEP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_HEAPSTAT"</span>}:
        process(PRC_HEAPSTAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_HSIZE"</span>}:
        process(PRC_HSIZE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_IF"</span>}:
        process(PRC_IF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_IF_ELSIF"</span>}:
        process(PRC_IF_ELSIF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_IF_NOOP"</span>}:
        process(PRC_IF_NOOP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_LINE"</span>}:
        process(PRC_LINE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_NOOP"</span>}:
        process(PRC_NOOP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_RAISE"</span>}:
        process(PRC_RAISE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_REPEAT"</span>}:
        process(PRC_REPEAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_REPEAT_NOOP"</span>}:
        process(PRC_REPEAT_NOOP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_RETURN"</span>}:
        process(PRC_RETURN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_SEMICOLON"</span>}:
        process(PRC_SEMICOLON, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_WHILE"</span>}:
        process(PRC_WHILE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRC_WHILE_NOOP"</span>}:
        process(PRC_WHILE_NOOP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_BSTRI_PARSE"</span>}:
        process(PRG_BSTRI_PARSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_CMP"</span>}:
        process(PRG_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_CPY"</span>}:
        process(PRG_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_EQ"</span>}:
        process(PRG_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_ERROR_COUNT"</span>}:
        process(PRG_ERROR_COUNT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_EVAL"</span>}:
        process(PRG_EVAL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_EVAL_WITH_ARGS"</span>}:
        process(PRG_EVAL_WITH_ARGS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_EXEC"</span>}:
        process(PRG_EXEC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_FIL_PARSE"</span>}:
        process(PRG_FIL_PARSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_GET_ERROR"</span>}:
        process(PRG_GET_ERROR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_GLOBAL_OBJECTS"</span>}:
        process(PRG_GLOBAL_OBJECTS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_HASHCODE"</span>}:
        process(PRG_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_MATCH"</span>}:
        process(PRG_MATCH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_MATCH_EXPR"</span>}:
        process(PRG_MATCH_EXPR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_NAME"</span>}:
        process(PRG_NAME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_NE"</span>}:
        process(PRG_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_OWN_NAME"</span>}:
        process(PRG_OWN_NAME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_OWN_PATH"</span>}:
        process(PRG_OWN_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_PATH"</span>}:
        process(PRG_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_STRUCT_SYMBOLS"</span>}:
        process(PRG_STRUCT_SYMBOLS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_STR_PARSE"</span>}:
        process(PRG_STR_PARSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_SYOBJECT"</span>}:
        process(PRG_SYOBJECT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_SYSVAR"</span>}:
        process(PRG_SYSVAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"PRG_VALUE"</span>}:
        process(PRG_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ADDR"</span>}:
        process(REF_ADDR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ALLOC"</span>}:
        process(REF_ALLOC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ALLOC_INT"</span>}:
        process(REF_ALLOC_INT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ALLOC_STRI"</span>}:
        process(REF_ALLOC_STRI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ALLOC_VAR"</span>}:
        process(REF_ALLOC_VAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_APPEND_PARAMS"</span>}:
        process(REF_APPEND_PARAMS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ARRMAXIDX"</span>}:
        process(REF_ARRMAXIDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ARRMINIDX"</span>}:
        process(REF_ARRMINIDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ARRTOLIST"</span>}:
        process(REF_ARRTOLIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_BODY"</span>}:
        process(REF_BODY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_CATEGORY"</span>}:
        process(REF_CATEGORY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_CAT_PARSE"</span>}:
        process(REF_CAT_PARSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_CAT_STR"</span>}:
        process(REF_CAT_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_CMP"</span>}:
        process(REF_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_CPY"</span>}:
        process(REF_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_DEREF"</span>}:
        process(REF_DEREF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_EQ"</span>}:
        process(REF_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_FILE"</span>}:
        process(REF_FILE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_GETREF"</span>}:
        process(REF_GETREF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_HASHCODE"</span>}:
        process(REF_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_HSHDATATOLIST"</span>}:
        process(REF_HSHDATATOLIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_HSHKEYSTOLIST"</span>}:
        process(REF_HSHKEYSTOLIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_HSHLENGTH"</span>}:
        process(REF_HSHLENGTH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ISTEMP"</span>}:
        process(REF_ISTEMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ISVAR"</span>}:
        process(REF_ISVAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_ITFTOSCT"</span>}:
        process(REF_ITFTOSCT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_LINE"</span>}:
        process(REF_LINE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_LOCAL_CONSTS"</span>}:
        process(REF_LOCAL_CONSTS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_LOCAL_VARS"</span>}:
        process(REF_LOCAL_VARS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_NE"</span>}:
        process(REF_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_NUM"</span>}:
        process(REF_NUM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_PARAMS"</span>}:
        process(REF_PARAMS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_PATH"</span>}:
        process(REF_PATH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_RESINI"</span>}:
        process(REF_RESINI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_RESULT"</span>}:
        process(REF_RESULT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_SCTTOLIST"</span>}:
        process(REF_SCTTOLIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_SELECT"</span>}:
        process(REF_SELECT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_SETCATEGORY"</span>}:
        process(REF_SETCATEGORY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_SETPARAMS"</span>}:
        process(REF_SETPARAMS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_SETTYPE"</span>}:
        process(REF_SETTYPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_SETVAR"</span>}:
        process(REF_SETVAR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_STR"</span>}:
        process(REF_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_TRACE"</span>}:
        process(REF_TRACE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_TYPE"</span>}:
        process(REF_TYPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"REF_VALUE"</span>}:
        process(REF_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_APPEND"</span>}:
        process(RFL_APPEND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_CAT"</span>}:
        process(RFL_CAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_CPY"</span>}:
        process(RFL_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_ELEM"</span>}:
        process(RFL_ELEM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_ELEMCPY"</span>}:
        process(RFL_ELEMCPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_EQ"</span>}:
        process(RFL_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_FOR"</span>}:
        process(RFL_FOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_FOR_UNTIL"</span>}:
        process(RFL_FOR_UNTIL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_HEAD"</span>}:
        process(RFL_HEAD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_IDX"</span>}:
        process(RFL_IDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_INCL"</span>}:
        process(RFL_INCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_IPOS"</span>}:
        process(RFL_IPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_LNG"</span>}:
        process(RFL_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_MKLIST"</span>}:
        process(RFL_MKLIST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_NE"</span>}:
        process(RFL_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_NOT_ELEM"</span>}:
        process(RFL_NOT_ELEM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_POS"</span>}:
        process(RFL_POS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_SET_VALUE"</span>}:
        process(RFL_SET_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_TAIL"</span>}:
        process(RFL_TAIL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"RFL_VALUE"</span>}:
        process(RFL_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SCT_ALLOC"</span>}:
        process(SCT_ALLOC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SCT_CONV"</span>}:
        process(SCT_CONV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SCT_CPY"</span>}:
        process(SCT_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SCT_SELECT"</span>}:
        process(SCT_SELECT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_CMP"</span>}:
        process(SEL_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_CPY"</span>}:
        process(SEL_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_EQ"</span>}:
        process(SEL_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_HASHCODE"</span>}:
        process(SEL_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_NAME"</span>}:
        process(SEL_NAME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_NE"</span>}:
        process(SEL_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_SYMB"</span>}:
        process(SEL_SYMB, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SEL_TYPE"</span>}:
        process(SEL_TYPE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_ARRLIT"</span>}:
        process(SET_ARRLIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_BASELIT"</span>}:
        process(SET_BASELIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_CARD"</span>}:
        process(SET_CARD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_CMP"</span>}:
        process(SET_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_CONV1"</span>}:
        process(SET_CONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_CONV3"</span>}:
        process(SET_CONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_CPY"</span>}:
        process(SET_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_DIFF"</span>}:
        process(SET_DIFF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_DIFF_ASSIGN"</span>}:
        process(SET_DIFF_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_ELEM"</span>}:
        process(SET_ELEM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_EQ"</span>}:
        process(SET_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_EXCL"</span>}:
        process(SET_EXCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_GE"</span>}:
        process(SET_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_GT"</span>}:
        process(SET_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_HASHCODE"</span>}:
        process(SET_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_ICONV1"</span>}:
        process(SET_ICONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_ICONV3"</span>}:
        process(SET_ICONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_INCL"</span>}:
        process(SET_INCL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_INTERSECT"</span>}:
        process(SET_INTERSECT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_INTERSECT_ASSIGN"</span>}:
        process(SET_INTERSECT_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_LE"</span>}:
        process(SET_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_LT"</span>}:
        process(SET_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_MAX"</span>}:
        process(SET_MAX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_MIN"</span>}:
        process(SET_MIN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_NE"</span>}:
        process(SET_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_NEXT"</span>}:
        process(SET_NEXT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_NOT_ELEM"</span>}:
        process(SET_NOT_ELEM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_RAND"</span>}:
        process(SET_RAND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_RANGELIT"</span>}:
        process(SET_RANGELIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_SCONV1"</span>}:
        process(SET_SCONV1, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_SCONV3"</span>}:
        process(SET_SCONV3, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_SYMDIFF"</span>}:
        process(SET_SYMDIFF, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_UNION"</span>}:
        process(SET_UNION, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_UNION_ASSIGN"</span>}:
        process(SET_UNION_ASSIGN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SET_VALUE"</span>}:
        process(SET_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_ACCEPT"</span>}:
        process(SOC_ACCEPT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_ADDR_FAMILY"</span>}:
        process(SOC_ADDR_FAMILY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_ADDR_NUMERIC"</span>}:
        process(SOC_ADDR_NUMERIC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_ADDR_SERVICE"</span>}:
        process(SOC_ADDR_SERVICE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_BIND"</span>}:
        process(SOC_BIND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_CLOSE"</span>}:
        process(SOC_CLOSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_CONNECT"</span>}:
        process(SOC_CONNECT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_CPY"</span>}:
        process(SOC_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_EQ"</span>}:
        process(SOC_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_GETC"</span>}:
        process(SOC_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_GETS"</span>}:
        process(SOC_GETS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_GET_HOSTNAME"</span>}:
        process(SOC_GET_HOSTNAME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_GET_LOCAL_ADDR"</span>}:
        process(SOC_GET_LOCAL_ADDR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_GET_PEER_ADDR"</span>}:
        process(SOC_GET_PEER_ADDR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_HAS_NEXT"</span>}:
        process(SOC_HAS_NEXT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_INET_ADDR"</span>}:
        process(SOC_INET_ADDR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_INET_LOCAL_ADDR"</span>}:
        process(SOC_INET_LOCAL_ADDR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_INET_SERV_ADDR"</span>}:
        process(SOC_INET_SERV_ADDR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_INPUT_READY"</span>}:
        process(SOC_INPUT_READY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_LINE_READ"</span>}:
        process(SOC_LINE_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_LISTEN"</span>}:
        process(SOC_LISTEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_NE"</span>}:
        process(SOC_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_ORD"</span>}:
        process(SOC_ORD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_RECV"</span>}:
        process(SOC_RECV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_SEND"</span>}:
        process(SOC_SEND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_SET_OPT_BOOL"</span>}:
        process(SOC_SET_OPT_BOOL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_SOCKET"</span>}:
        process(SOC_SOCKET, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_WORD_READ"</span>}:
        process(SOC_WORD_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SOC_WRITE"</span>}:
        process(SOC_WRITE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_BIGINT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_BIGINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_BIGRAT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_BIGRAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_BOOL"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_BOOL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_BSTRI"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_BSTRI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_DURATION"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_DURATION, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_FLOAT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_FLOAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_INT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_INT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_NULL"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_NULL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_STRI"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_STRI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_BIND_TIME"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_BIND_TIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_CLOSE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_CLOSE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_CMP_DB"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_CMP_DB, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_CMP_STMT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_CMP_STMT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_BIGINT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_BIGINT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_BIGRAT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_BIGRAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_BOOL"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_BOOL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_BSTRI"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_BSTRI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_DURATION"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_DURATION, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_FLOAT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_FLOAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_INT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_INT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_STRI"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_STRI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COLUMN_TIME"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COLUMN_TIME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_COMMIT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_COMMIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_CPY_DB"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_CPY_DB, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_CPY_STMT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_CPY_STMT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_DRIVER"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_DRIVER, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_EQ_DB"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_EQ_DB, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_EQ_STMT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_EQ_STMT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_ERR_CODE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_ERR_CODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_ERR_DB_FUNC"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_ERR_DB_FUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_ERR_LIB_FUNC"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_ERR_LIB_FUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_ERR_MESSAGE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_ERR_MESSAGE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_EXECUTE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_EXECUTE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_FETCH"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_FETCH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_GET_AUTO_COMMIT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_GET_AUTO_COMMIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_IS_NULL"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_IS_NULL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_NE_DB"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_NE_DB, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_NE_STMT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_NE_STMT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_DB2"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_DB2, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_FIRE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_FIRE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_INFORMIX"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_INFORMIX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_LITE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_LITE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_MY"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_MY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_OCI"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_OCI, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_ODBC"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_ODBC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_POST"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_POST, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_SQLSRV"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_SQLSRV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_OPEN_TDS"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_OPEN_TDS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_PREPARE"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_PREPARE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_ROLLBACK"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_ROLLBACK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_SET_AUTO_COMMIT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_SET_AUTO_COMMIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_STMT_COLUMN_COUNT"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_STMT_COLUMN_COUNT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"SQL_STMT_COLUMN_NAME"</span>}:
        programUses.databaseLibrary := TRUE;
        process(SQL_STMT_COLUMN_NAME, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_APPEND"</span>}:
        process(STR_APPEND, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CAT"</span>}:
        process(STR_CAT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CHIPOS"</span>}:
        process(STR_CHIPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CHPOS"</span>}:
        process(STR_CHPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CHSPLIT"</span>}:
        process(STR_CHSPLIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CLIT"</span>}:
        process(STR_CLIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CMP"</span>}:
        process(STR_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_CPY"</span>}:
        process(STR_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_ELEMCPY"</span>}:
        process(STR_ELEMCPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_EQ"</span>}:
        process(STR_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_FOR"</span>}:
        process(STR_FOR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_FOR_KEY"</span>}:
        process(STR_FOR_KEY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_FOR_VAR_KEY"</span>}:
        process(STR_FOR_VAR_KEY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_FROM_UTF8"</span>}:
        process(STR_FROM_UTF8, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_GE"</span>}:
        process(STR_GE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_GT"</span>}:
        process(STR_GT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_HASHCODE"</span>}:
        process(STR_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_HEAD"</span>}:
        process(STR_HEAD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_IDX"</span>}:
        process(STR_IDX, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_IPOS"</span>}:
        process(STR_IPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LE"</span>}:
        process(STR_LE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LIT"</span>}:
        process(STR_LIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LNG"</span>}:
        process(STR_LNG, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LOW"</span>}:
        process(STR_LOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LPAD"</span>}:
        process(STR_LPAD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LPAD0"</span>}:
        process(STR_LPAD0, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LT"</span>}:
        process(STR_LT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_LTRIM"</span>}:
        process(STR_LTRIM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_MULT"</span>}:
        process(STR_MULT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_NE"</span>}:
        process(STR_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_POS"</span>}:
        process(STR_POS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_POSCPY"</span>}:
        process(STR_POSCPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_PUSH"</span>}:
        process(STR_PUSH, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RANGE"</span>}:
        process(STR_RANGE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RCHIPOS"</span>}:
        process(STR_RCHIPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RCHPOS"</span>}:
        process(STR_RCHPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_REPL"</span>}:
        process(STR_REPL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RIPOS"</span>}:
        process(STR_RIPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RPAD"</span>}:
        process(STR_RPAD, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RPOS"</span>}:
        process(STR_RPOS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_RTRIM"</span>}:
        process(STR_RTRIM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_SPLIT"</span>}:
        process(STR_SPLIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_STR"</span>}:
        process(STR_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_SUBSTR"</span>}:
        process(STR_SUBSTR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_SUBSTR_FIXLEN"</span>}:
        process(STR_SUBSTR_FIXLEN, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_TAIL"</span>}:
        process(STR_TAIL, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_TO_UTF8"</span>}:
        process(STR_TO_UTF8, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_TRIM"</span>}:
        process(STR_TRIM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_UP"</span>}:
        process(STR_UP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"STR_VALUE"</span>}:
        process(STR_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TIM_AWAIT"</span>}:
        process(TIM_AWAIT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TIM_FROM_TIMESTAMP"</span>}:
        process(TIM_FROM_TIMESTAMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TIM_NOW"</span>}:
        process(TIM_NOW, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TIM_SET_LOCAL_TZ"</span>}:
        process(TIM_SET_LOCAL_TZ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_CMP"</span>}:
        process(TYP_CMP, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_CPY"</span>}:
        process(TYP_CPY, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_EQ"</span>}:
        process(TYP_EQ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_FUNC"</span>}:
        process(TYP_FUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_HASHCODE"</span>}:
        process(TYP_HASHCODE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_INTERFACES"</span>}:
        process(TYP_INTERFACES, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_ISDERIVED"</span>}:
        process(TYP_ISDERIVED, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_ISFUNC"</span>}:
        process(TYP_ISFUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_ISVARFUNC"</span>}:
        process(TYP_ISVARFUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_MATCHOBJ"</span>}:
        process(TYP_MATCHOBJ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_META"</span>}:
        process(TYP_META, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_NE"</span>}:
        process(TYP_NE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_NUM"</span>}:
        process(TYP_NUM, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_RESULT"</span>}:
        process(TYP_RESULT, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_STR"</span>}:
        process(TYP_STR, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_VALUE"</span>}:
        process(TYP_VALUE, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_VARCONV"</span>}:
        process(TYP_VARCONV, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"TYP_VARFUNC"</span>}:
        process(TYP_VARFUNC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"UT8_GETC"</span>}:
        process(UT8_GETC, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"UT8_GETS"</span>}:
        process(UT8_GETS, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"UT8_LINE_READ"</span>}:
        process(UT8_LINE_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"UT8_SEEK"</span>}:
        process(UT8_SEEK, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"UT8_WORD_READ"</span>}:
        process(UT8_WORD_READ, function, params, c_expr);
      <span class="keywd">when</span> {<span class="stri">"UT8_WRITE"</span>}:
        process(UT8_WRITE, function, params, c_expr);
      <span class="keywd">otherwise</span>:
        process_unknown_action(actionName, c_expr);
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
