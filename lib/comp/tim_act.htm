<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  tim_act.s7i   Generate code for actions of time and duration.   *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: TIM_AWAIT           <span class="keywd">is</span> action <span class="stri">"TIM_AWAIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TIM_FROM_TIMESTAMP  <span class="keywd">is</span> action <span class="stri">"TIM_FROM_TIMESTAMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TIM_NOW             <span class="keywd">is</span> action <span class="stri">"TIM_NOW"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TIM_SET_LOCAL_TZ    <span class="keywd">is</span> action <span class="stri">"TIM_SET_LOCAL_TZ"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: tim_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        timAwait (intType, intType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        timFromIntTimestamp (intType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        timNow (intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        timSetLocalTZ (intType, intType, intType, intType, intType, intType, intType *, boolType *);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TIM_AWAIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"timAwait("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TIM_FROM_TIMESTAMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"timFromIntTimestamp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TIM_NOW, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"timNow(&amp;("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TIM_SET_LOCAL_TZ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"timSetLocalTZ("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
