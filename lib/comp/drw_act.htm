<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  drw_act.s7i   Generate code for actions to do graphic output.   *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_ARC                       <span class="keywd">is</span> action <span class="stri">"DRW_ARC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_ARC2                      <span class="keywd">is</span> action <span class="stri">"DRW_ARC2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_BACKGROUND                <span class="keywd">is</span> action <span class="stri">"DRW_BACKGROUND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_BORDER                    <span class="keywd">is</span> action <span class="stri">"DRW_BORDER"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_CAPTURE                   <span class="keywd">is</span> action <span class="stri">"DRW_CAPTURE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_CIRCLE                    <span class="keywd">is</span> action <span class="stri">"DRW_CIRCLE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_CLEAR                     <span class="keywd">is</span> action <span class="stri">"DRW_CLEAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_CMP                       <span class="keywd">is</span> action <span class="stri">"DRW_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_COLOR                     <span class="keywd">is</span> action <span class="stri">"DRW_COLOR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_CONV_POINT_LIST           <span class="keywd">is</span> action <span class="stri">"DRW_CONV_POINT_LIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_COPYAREA                  <span class="keywd">is</span> action <span class="stri">"DRW_COPYAREA"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_CPY                       <span class="keywd">is</span> action <span class="stri">"DRW_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_EQ                        <span class="keywd">is</span> action <span class="stri">"DRW_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_FARCCHORD                 <span class="keywd">is</span> action <span class="stri">"DRW_FARCCHORD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_FARCPIESLICE              <span class="keywd">is</span> action <span class="stri">"DRW_FARCPIESLICE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_FCIRCLE                   <span class="keywd">is</span> action <span class="stri">"DRW_FCIRCLE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_FELLIPSE                  <span class="keywd">is</span> action <span class="stri">"DRW_FELLIPSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_FLUSH                     <span class="keywd">is</span> action <span class="stri">"DRW_FLUSH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_FPOLY_LINE                <span class="keywd">is</span> action <span class="stri">"DRW_FPOLY_LINE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GEN_POINT_LIST            <span class="keywd">is</span> action <span class="stri">"DRW_GEN_POINT_LIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_IMAGE_PIXEL           <span class="keywd">is</span> action <span class="stri">"DRW_GET_IMAGE_PIXEL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_PIXEL                 <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_PIXEL_ARRAY           <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_ARRAY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_PIXEL_DATA            <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_DATA"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_PIXEL_DATA_FROM_ARRAY <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_DATA_FROM_ARRAY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_PIXMAP                <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXMAP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_GET_PIXMAP_FROM_PIXELS    <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXMAP_FROM_PIXELS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_HASHCODE                  <span class="keywd">is</span> action <span class="stri">"DRW_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_HEIGHT                    <span class="keywd">is</span> action <span class="stri">"DRW_HEIGHT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_LINE                      <span class="keywd">is</span> action <span class="stri">"DRW_LINE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_NE                        <span class="keywd">is</span> action <span class="stri">"DRW_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_NEW_PIXMAP                <span class="keywd">is</span> action <span class="stri">"DRW_NEW_PIXMAP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_OPEN                      <span class="keywd">is</span> action <span class="stri">"DRW_OPEN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_OPEN_SUB_WINDOW           <span class="keywd">is</span> action <span class="stri">"DRW_OPEN_SUB_WINDOW"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PARC                      <span class="keywd">is</span> action <span class="stri">"DRW_PARC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PCIRCLE                   <span class="keywd">is</span> action <span class="stri">"DRW_PCIRCLE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PFARC                     <span class="keywd">is</span> action <span class="stri">"DRW_PFARC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PFARCCHORD                <span class="keywd">is</span> action <span class="stri">"DRW_PFARCCHORD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PFARCPIESLICE             <span class="keywd">is</span> action <span class="stri">"DRW_PFARCPIESLICE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PFCIRCLE                  <span class="keywd">is</span> action <span class="stri">"DRW_PFCIRCLE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PFELLIPSE                 <span class="keywd">is</span> action <span class="stri">"DRW_PFELLIPSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PIXEL_TO_RGB              <span class="keywd">is</span> action <span class="stri">"DRW_PIXEL_TO_RGB"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PLINE                     <span class="keywd">is</span> action <span class="stri">"DRW_PLINE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_POINT                     <span class="keywd">is</span> action <span class="stri">"DRW_POINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_POINTER_XPOS              <span class="keywd">is</span> action <span class="stri">"DRW_POINTER_XPOS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_POINTER_YPOS              <span class="keywd">is</span> action <span class="stri">"DRW_POINTER_YPOS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_POLY_LINE                 <span class="keywd">is</span> action <span class="stri">"DRW_POLY_LINE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PPOINT                    <span class="keywd">is</span> action <span class="stri">"DRW_PPOINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PRECT                     <span class="keywd">is</span> action <span class="stri">"DRW_PRECT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PUT                       <span class="keywd">is</span> action <span class="stri">"DRW_PUT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_PUT_SCALED                <span class="keywd">is</span> action <span class="stri">"DRW_PUT_SCALED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_RECT                      <span class="keywd">is</span> action <span class="stri">"DRW_RECT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_RGBCOL                    <span class="keywd">is</span> action <span class="stri">"DRW_RGBCOL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SCREEN_HEIGHT             <span class="keywd">is</span> action <span class="stri">"DRW_SCREEN_HEIGHT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SCREEN_WIDTH              <span class="keywd">is</span> action <span class="stri">"DRW_SCREEN_WIDTH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_CONTENT               <span class="keywd">is</span> action <span class="stri">"DRW_SET_CONTENT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_CURSOR_VISIBLE        <span class="keywd">is</span> action <span class="stri">"DRW_SET_CURSOR_VISIBLE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_POINTER_POS           <span class="keywd">is</span> action <span class="stri">"DRW_SET_POINTER_POS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_POS                   <span class="keywd">is</span> action <span class="stri">"DRW_SET_POS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_SIZE                  <span class="keywd">is</span> action <span class="stri">"DRW_SET_SIZE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_TRANSPARENT_COLOR     <span class="keywd">is</span> action <span class="stri">"DRW_SET_TRANSPARENT_COLOR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_SET_WINDOW_NAME           <span class="keywd">is</span> action <span class="stri">"DRW_SET_WINDOW_NAME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_TEXT                      <span class="keywd">is</span> action <span class="stri">"DRW_TEXT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_TO_BOTTOM                 <span class="keywd">is</span> action <span class="stri">"DRW_TO_BOTTOM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_TO_TOP                    <span class="keywd">is</span> action <span class="stri">"DRW_TO_TOP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_VALUE                     <span class="keywd">is</span> action <span class="stri">"DRW_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_WIDTH                     <span class="keywd">is</span> action <span class="stri">"DRW_WIDTH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_XPOS                      <span class="keywd">is</span> action <span class="stri">"DRW_XPOS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: DRW_YPOS                      <span class="keywd">is</span> action <span class="stri">"DRW_YPOS"</span>;

<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_BSTRING                   <span class="keywd">is</span> action <span class="stri">"PLT_BSTRING"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_CMP                       <span class="keywd">is</span> action <span class="stri">"PLT_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_CPY                       <span class="keywd">is</span> action <span class="stri">"PLT_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_EQ                        <span class="keywd">is</span> action <span class="stri">"PLT_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_HASHCODE                  <span class="keywd">is</span> action <span class="stri">"PLT_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_NE                        <span class="keywd">is</span> action <span class="stri">"PLT_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_POINT_LIST                <span class="keywd">is</span> action <span class="stri">"PLT_POINT_LIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PLT_VALUE                     <span class="keywd">is</span> action <span class="stri">"PLT_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: constructRgbMacroPart (<span class="op">in</span> <span class="type">string</span>: colorName, <span class="op">in</span> <span class="type">integer</span>: colorMask,
    <span class="keywd">inout</span> <span class="type">string</span>: macroBody) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: highestMaskBit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: macroPart <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    highestMaskBit := succ(log2(colorMask));
    <span class="keywd">if</span> highestMaskBit > 16 <span class="keywd">then</span>
      macroPart := <span class="stri">"((((unsigned long) ("</span> &lt;&amp; colorName &lt;&amp;
                   <span class="stri">")) &lt;&lt; "</span> &lt;&amp; highestMaskBit - 16 &lt;&amp;
                   <span class="stri">") &amp; 0x"</span> &lt;&amp; colorMask radix 16 &lt;&amp; <span class="stri">")"</span>;
    <span class="keywd">elsif</span> highestMaskBit &lt; 16 <span class="keywd">then</span>
      macroPart := <span class="stri">"((((unsigned long) ("</span> &lt;&amp; colorName &lt;&amp;
                   <span class="stri">")) >> "</span> &lt;&amp; 16 - highestMaskBit &lt;&amp;
                   <span class="stri">") &amp; 0x"</span> &lt;&amp; colorMask radix 16 &lt;&amp; <span class="stri">")"</span>;
    <span class="keywd">else</span>
      macroPart := <span class="stri">"(((unsigned long) ("</span> &lt;&amp; colorName &lt;&amp;
                   <span class="stri">")) &amp; 0x"</span> &lt;&amp; colorMask radix 16 &lt;&amp; <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> macroBody &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      macroBody &amp;:= <span class="stri">" | "</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    macroBody &amp;:= macroPart;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: defineRgbMacroBody <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: macroBody <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    constructRgbMacroPart(<span class="stri">"red"</span>,   ccConf.PIXEL_RED_MASK,   macroBody);
    constructRgbMacroPart(<span class="stri">"green"</span>, ccConf.PIXEL_GREEN_MASK, macroBody);
    constructRgbMacroPart(<span class="stri">"blue"</span>,  ccConf.PIXEL_BLUE_MASK,  macroBody);
    <span class="keywd">if</span> ccConf.PIXEL_ALPHA_MASK &lt;> 0 <span class="keywd">then</span>
      macroBody := <span class="stri">"("</span> &lt;&amp; macroBody &lt;&amp; <span class="stri">") | 0x"</span> &lt;&amp; ccConf.PIXEL_ALPHA_MASK radix 16;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: drw_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        drawInit (void);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwPointerXpos (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwPointerYpos (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwArc (const_winType, intType, intType, intType, floatType, floatType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwArc2 (const_winType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwBackground (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   drwBorder (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwCapture (intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwCircle (const_winType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwClear (winType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwColor (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   drwConvPointList (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwCopyArea (const_winType, const_winType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwCpy (winType *const, const winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwCreate (const winType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType drwCreateGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwDestr (const winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwDestrGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwFArcChord (const_winType, intType, intType, intType, floatType, floatType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwFArcPieSlice (const_winType, intType, intType, intType, floatType, floatType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwFCircle (const_winType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwFEllipse (const_winType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwEmpty (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwFlush (void);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   drwGenPointList (const const_arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwGetImagePixel (const_bstriType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwGetPixel (const_winType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   drwGetPixelArray (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   drwGetPixelData (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   drwGetPixelDataFromArray (const_arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwGetPixmap (const_winType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwGetPixmapFromPixels (const_arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwHeight (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwImage (int32Type *, memSizeType, memSizeType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwLine (const_winType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwNewPixmap (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwOpen (intType, intType, intType, intType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwOpenSubWindow (const_winType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPArc (const_winType, intType, intType, intType, floatType, floatType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPCircle (const_winType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPFArc (const_winType, intType, intType, intType, floatType, floatType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPFArcChord (const_winType, intType, intType, intType, floatType, floatType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPFArcPieSlice (const_winType, intType, intType, intType, floatType, floatType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPFCircle (const_winType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPFEllipse (const_winType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPixelToRgb (intType, intType *, intType *, intType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPLine (const_winType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPoint (const_winType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPPoint (const_winType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPRect (const_winType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPolyLine (const_winType, intType, intType, bstriType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwFPolyLine (const_winType, intType, intType, bstriType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPut (const_winType, intType, intType, const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwPutScaled (const_winType, intType, intType, intType, intType, const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwRect (const_winType, intType, intType, intType, intType);"</span>);
    <span class="keywd">if</span> config.inlineFunctions <span class="op">and</span> ccConf.PIXEL_RED_MASK   &lt;> 0 <span class="op">and</span>
                                  ccConf.PIXEL_GREEN_MASK &lt;> 0 <span class="op">and</span>
                                  ccConf.PIXEL_BLUE_MASK  &lt;> 0 <span class="keywd">then</span>
      <span class="keywd">if</span> ccConf.RGB_TO_PIXEL_FLAG_NAME = <span class="stri">""</span> <span class="keywd">then</span>
        writeln(c_prog, <span class="stri">"#define drwRgbColor(red, green, blue) "</span> &lt;&amp;
                        <span class="stri">"("</span> &lt;&amp; defineRgbMacroBody &lt;&amp; <span class="stri">")"</span>);
      <span class="keywd">else</span>
        declareExtern(c_prog, <span class="stri">"intType     drwRgbColor (intType, intType, intType);"</span>);
        writeln(c_prog, <span class="stri">"extern int "</span> &lt;&amp; ccConf.RGB_TO_PIXEL_FLAG_NAME &lt;&amp; <span class="stri">";"</span>);
        writeln(c_prog, <span class="stri">"#define drwRgbColor(red, green, blue) "</span> &lt;&amp;
                        <span class="stri">"("</span> &lt;&amp; ccConf.RGB_TO_PIXEL_FLAG_NAME &lt;&amp; <span class="stri">"?("</span> &lt;&amp;
                        defineRgbMacroBody &lt;&amp; <span class="stri">"):(drwRgbColor)(red, green, blue))"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      declareExtern(c_prog, <span class="stri">"intType     drwRgbColor (intType, intType, intType);"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    declareExtern(c_prog, <span class="stri">"intType     drwScreenHeight (void);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwScreenWidth (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetContent (const_winType, const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetCursorVisible (winType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetPointerPos (const_winType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetPos (const_winType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetSize (winType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetTransparentColor (winType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwSetWindowName (winType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwText (const_winType, intType, intType, const const_striType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwToBottom (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        drwToTop (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"winType     drwValue (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwWidth (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwXPos (const_winType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     drwYPos (const_winType);"</span>);

    declareExtern(c_prog, <span class="stri">"bstriType   pltAlign (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   pltValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_ARC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwArc("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_ARC2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwArc2("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_BACKGROUND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwBackground("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_BORDER, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    result_type := resultType(getType(function));
    prepare_typed_result(result_type, c_expr);
    c_expr.result_expr := <span class="stri">"drwBorder("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_CAPTURE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_win_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwCapture("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_CIRCLE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwCircle("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_CLEAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwClear("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"ptrCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_COLOR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwColor("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_CONV_POINT_LIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    result_type := resultType(getType(function));
    prepare_typed_result(result_type, c_expr);
    c_expr.result_expr := <span class="stri">"drwConvPointList("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_COPYAREA, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwCopyArea("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"winType new_win;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_win="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"drwDestr("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_win;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"winType *win_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"drwDestr(*win_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*win_ptr=new_win;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"drwCpy(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_FARCCHORD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwFArcChord("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_FARCPIESLICE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwFArcPieSlice("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_FCIRCLE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwFCircle("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_FELLIPSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwFEllipse("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_FLUSH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwFlush();\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_FPOLY_LINE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwFPolyLine("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GEN_POINT_LIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"drwGenPointList("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_IMAGE_PIXEL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwGetImagePixel("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_PIXEL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwGetPixel("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_PIXEL_ARRAY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    result_type := resultType(getType(function));
    prepare_typed_result(result_type, c_expr);
    c_expr.result_expr := <span class="stri">"drwGetPixelArray("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_PIXEL_DATA, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwGetPixelData("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_PIXEL_DATA_FROM_ARRAY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwGetPixelDataFromArray("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_PIXMAP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_win_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwGetPixmap("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_GET_PIXMAP_FROM_PIXELS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_win_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwGetPixmapFromPixels("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)(((memSizeType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")) >> 6)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_HEIGHT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwHeight("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_LINE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwLine("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_NEW_PIXMAP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_win_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwNewPixmap("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_OPEN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_win_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwOpen("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_OPEN_SUB_WINDOW, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_win_result(c_expr);
    c_expr.result_expr := <span class="stri">"drwOpenSubWindow("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PARC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPArc("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PCIRCLE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPCircle("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PFARC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPFArc("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PFARCCHORD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPFArcChord("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PFARCPIESLICE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPFArcPieSlice("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PFCIRCLE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPFCircle("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PFELLIPSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPFEllipse("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: assignColorOfPixel (<span class="op">in</span> <span class="type">string</span>: pixelName,
    <span class="op">in</span> <span class="type">reference</span>: colorDestination, <span class="op">in</span> <span class="type">integer</span>: colorMask,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: highestMaskBit <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    process_expr(colorDestination, c_expr);
    c_expr.expr &amp;:= <span class="stri">" = (intType)("</span>;
    highestMaskBit := succ(log2(colorMask));
    <span class="keywd">if</span> highestMaskBit > 16 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
      c_expr.expr &amp;:= pixelName;
      c_expr.expr &amp;:= <span class="stri">") &amp; 0x"</span>;
      c_expr.expr &amp;:= colorMask radix 16;
      c_expr.expr &amp;:= <span class="stri">") >> "</span>;
      c_expr.expr &amp;:= str(highestMaskBit - 16);
    <span class="keywd">elsif</span> highestMaskBit &lt; 16 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
      c_expr.expr &amp;:= pixelName;
      c_expr.expr &amp;:= <span class="stri">") &amp; 0x"</span>;
      c_expr.expr &amp;:= colorMask radix 16;
      c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
      c_expr.expr &amp;:= str(16 - highestMaskBit);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
      c_expr.expr &amp;:= pixelName;
      c_expr.expr &amp;:= <span class="stri">") &amp; 0x"</span>;
      c_expr.expr &amp;:= colorMask radix 16;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PIXEL_TO_RGB, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: pixelName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> config.inlineFunctions <span class="op">and</span> ccConf.PIXEL_RED_MASK   &lt;> 0 <span class="op">and</span>
                                  ccConf.PIXEL_GREEN_MASK &lt;> 0 <span class="op">and</span>
                                  ccConf.PIXEL_BLUE_MASK  &lt;> 0 <span class="keywd">then</span>
      incr(count.inlinedFunctions);
      <span class="keywd">if</span> ccConf.RGB_TO_PIXEL_FLAG_NAME &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"if ("</span>;
        statement.expr &amp;:= ccConf.RGB_TO_PIXEL_FLAG_NAME;
        statement.expr &amp;:= <span class="stri">") {\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        pixelName := normalVariable(params[1], statement);
      <span class="keywd">else</span>
        incr(statement.temp_num);
        pixelName := <span class="stri">"pixel_"</span> &amp; str(statement.temp_num);
        statement.temp_decls &amp;:= <span class="stri">"uintType "</span>;
        statement.temp_decls &amp;:= pixelName;
        statement.temp_decls &amp;:= <span class="stri">";\n"</span>;
        statement.expr &amp;:= pixelName;
        statement.expr &amp;:= <span class="stri">"=(uintType)("</span>;
        process_expr(params[1], statement);
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      assignColorOfPixel(pixelName, params[2], ccConf.PIXEL_RED_MASK,   statement);
      assignColorOfPixel(pixelName, params[3], ccConf.PIXEL_GREEN_MASK, statement);
      assignColorOfPixel(pixelName, params[4], ccConf.PIXEL_BLUE_MASK,  statement);
      <span class="keywd">if</span> ccConf.RGB_TO_PIXEL_FLAG_NAME &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
        statement.expr &amp;:= <span class="stri">"drwPixelToRgb("</span>;
        statement.expr &amp;:= pixelName;
        statement.expr &amp;:= <span class="stri">", &amp;("</span>;
        process_expr(params[2], statement);
        statement.expr &amp;:= <span class="stri">"), &amp;("</span>;
        process_expr(params[3], statement);
        statement.expr &amp;:= <span class="stri">"), &amp;("</span>;
        process_expr(params[4], statement);
        statement.expr &amp;:= <span class="stri">"));\n"</span>;
        statement.expr &amp;:= <span class="stri">"}\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"drwPixelToRgb("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
      process_expr(params[4], c_expr);
      c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PLINE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPLine("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_POINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPoint("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_POINTER_XPOS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwPointerXpos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_POINTER_YPOS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwPointerYpos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_POLY_LINE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPolyLine("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PPOINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPPoint("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PRECT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPRect("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PUT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPut("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_PUT_SCALED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwPutScaled("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_RECT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwRect("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_RGBCOL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwRgbColor("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SCREEN_HEIGHT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwScreenHeight()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SCREEN_WIDTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwScreenWidth()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_CONTENT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetContent("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_CURSOR_VISIBLE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetCursorVisible("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_POINTER_POS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetPointerPos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_POS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetPos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_SIZE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetSize("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_TRANSPARENT_COLOR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetTransparentColor("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_SET_WINDOW_NAME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwSetWindowName("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_TEXT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwText("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_TO_BOTTOM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwToBottom("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_TO_TOP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"drwToTop("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_WIDTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwWidth("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_XPOS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwXPos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (DRW_YPOS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"drwYPos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_BSTRING, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_expr(params[1], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bstCmp("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"bstriType new_bstri;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_bstri="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"bstDestr("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_bstri;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"bstriType *bstri_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"bstDestr(*bstri_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*bstri_ptr=new_bstri;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"bstCpy(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bstri_a_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: bstri_b_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    bstri_a_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_a_"</span>, params[1], c_expr);
    bstri_b_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_b_"</span>, params[3], c_expr);
    <span class="comment">(* Formula used: (a->size==b->size&amp;&amp;memcmp(a->mem,b->mem,
                     a->size*sizeof(unsigned char))==0) *)</span>
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size=="</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->size&amp;&amp;memcmp("</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size*sizeof(unsigned char))==0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bstHashCode("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bstri_a_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: bstri_b_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    bstri_a_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_a_"</span>, params[1], c_expr);
    bstri_b_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_b_"</span>, params[3], c_expr);
    <span class="comment">(* Formula used: (a->size!=b->size||memcmp(a->mem,b->mem,
                     a->size*sizeof(unsigned char))!=0) *)</span>
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size!="</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->size||memcmp("</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size*sizeof(unsigned char))!=0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_POINT_LIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_expr(params[1], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PLT_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"pltValue("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
