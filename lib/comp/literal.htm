<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  literal.s7i   Support to write literals.                        *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014, 2022  Thomas Mertes     *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">integer</span>: MAX_SHOWN_BIGINT_LITERAL_BITLENGTH <span class="keywd">is</span> 256;
<span class="keywd">const</span> <span class="type">integer</span>: MAX_SHOWN_STRI_LITERAL_LENGTH <span class="keywd">is</span> 256;

<span class="keywd">const</span> <span class="type">bigInteger</span>: MAX_BIGDIGIT <span class="keywd">is</span> 2_ ** 31 - 1_;


<span class="keywd">const</span> <span class="type">type</span>: bigint_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">bigInteger</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: bigint_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> bigInteger;
<span class="keywd">const</span> <span class="type">type</span>: bigint_bstri_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">integer</span>;

<span class="keywd">var</span> <span class="type">bigint_table_hash</span>: bigint_const_table <span class="keywd">is</span> bigint_table_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">bigint_bstri_hash</span>: bigint_bstri_table <span class="keywd">is</span> bigint_bstri_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: stri_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: stri_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> string;

<span class="keywd">var</span> <span class="type">stri_table_hash</span>: stri_const_table <span class="keywd">is</span> stri_table_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: bstri_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">bstring</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: bstri_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> bstring;

<span class="keywd">var</span> <span class="type">bstri_table_hash</span>: bstri_const_table <span class="keywd">is</span> bstri_table_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: nan_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">bin64</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: nan_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> bin64;

<span class="keywd">var</span> <span class="type">nan_table_hash</span>: nan_const_table <span class="keywd">is</span> nan_table_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: set_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">bitset</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: set_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> bitset;

<span class="keywd">var</span> <span class="type">set_table_hash</span>: set_const_table <span class="keywd">is</span> set_table_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: type_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: type_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> type;

<span class="keywd">var</span> <span class="type">type_table_hash</span>: type_const_table <span class="keywd">is</span> type_table_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: win_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">PRIMITIVE_WINDOW</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: win_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> PRIMITIVE_WINDOW;
<span class="keywd">const</span> <span class="type">type</span>: win_bstri_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">integer</span>;

<span class="keywd">var</span> <span class="type">win_table_hash</span>: win_const_table <span class="keywd">is</span> win_table_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">win_bstri_hash</span>: win_bstri_table <span class="keywd">is</span> win_bstri_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: const_table_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">reference</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: const_index_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> reference;

<span class="keywd">var</span> <span class="type">const_table_hash</span>: const_table <span class="keywd">is</span> const_table_hash.EMPTY_HASH;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: stringInComment (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(stri) &lt;= MAX_SHOWN_STRI_LITERAL_LENGTH <span class="keywd">then</span>
      expr &amp;:= <span class="stri">" /* "</span>;
      expr &amp;:= replace(literal(stri), <span class="stri">"*/"</span>, <span class="stri">"*\\/"</span>);
      expr &amp;:= <span class="stri">" */"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: stringLiteral (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri <span class="op">not</span> <span class="op">in</span> stri_const_table <span class="keywd">then</span>
      stri_const_table @:= [stri] length(stri_const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> ccConf.ALLOW_STRITYPE_SLICES <span class="keywd">then</span>
      expr := <span class="stri">"&amp;"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    expr &amp;:= <span class="stri">"str["</span>;
    expr &amp;:= str(stri_const_table[stri]);
    expr &amp;:= <span class="stri">"]"</span>;
    expr &amp;:= stringInComment(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bstriLiteral (<span class="op">in</span> <span class="type">bstring</span>: bstri) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> bstri <span class="op">not</span> <span class="op">in</span> bstri_const_table <span class="keywd">then</span>
      bstri_const_table @:= [bstri] length(bstri_const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> ccConf.ALLOW_BSTRITYPE_SLICES <span class="keywd">then</span>
      expr := <span class="stri">"&amp;"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    expr &amp;:= <span class="stri">"bst["</span>;
    expr &amp;:= str(bstri_const_table[bstri]);
    expr &amp;:= <span class="stri">"]"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: charLiteral (<span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="stri">"(charType) "</span> &amp; c_literal(ch);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: integerLiteral (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.INTTYPE_SIZE = 64 <span class="op">and</span> ccConf.INTTYPE_LITERAL_SUFFIX = <span class="stri">""</span> <span class="keywd">then</span>
      <span class="keywd">if</span> number &lt; 0 <span class="keywd">then</span>
        <span class="keywd">if</span> number = integer.first <span class="keywd">then</span>
          expr := <span class="stri">"(intType) ("</span>;
          expr &amp;:= str(succ(integer.first));
          expr &amp;:= <span class="stri">"-1)"</span>;
        <span class="keywd">else</span>
          expr := <span class="stri">"(-(intType) "</span>;
          expr &amp;:= str(-number);
          expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        expr := <span class="stri">"(intType) "</span>;
        expr &amp;:= str(number);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> number = integer.first <span class="keywd">then</span>
      expr := <span class="stri">"("</span>;
      expr &amp;:= str(succ(integer.first));
      expr &amp;:= ccConf.INTTYPE_LITERAL_SUFFIX;
      expr &amp;:= <span class="stri">"-1"</span>;
      expr &amp;:= ccConf.INTTYPE_LITERAL_SUFFIX;
      expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      expr := str(number);
      expr &amp;:= ccConf.INTTYPE_LITERAL_SUFFIX;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bigIntegerLiteral (<span class="op">in</span> <span class="type">bigInteger</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> number <span class="op">not</span> <span class="op">in</span> bigint_const_table <span class="keywd">then</span>
      bigint_const_table @:= [number] length(bigint_const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    expr := <span class="stri">"big["</span>;
    expr &amp;:= str(bigint_const_table[number]);
    expr &amp;:= <span class="stri">"]"</span>;
    <span class="keywd">if</span> bitLength(number) &lt;= MAX_SHOWN_BIGINT_LITERAL_BITLENGTH <span class="keywd">then</span>
      expr &amp;:= <span class="stri">" /* "</span>;
      expr &amp;:= str(number);
      expr &amp;:= <span class="stri">" */"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: memSizeLiteral (<span class="op">in</span> <span class="type">integer</span>: aSize) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.POINTER_SIZE = 64 <span class="keywd">then</span>
      <span class="keywd">if</span> ccConf.INT64TYPE_LITERAL_SUFFIX = <span class="stri">""</span> <span class="keywd">then</span>
        expr := <span class="stri">"(memSizeType) "</span>;
        expr &amp;:= str(aSize);
        expr &amp;:= <span class="stri">"U"</span>;
      <span class="keywd">else</span>
        expr := str(aSize);
        expr &amp;:= <span class="stri">"U"</span>;
        expr &amp;:= ccConf.INT64TYPE_LITERAL_SUFFIX;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span> <span class="comment"># ccConf.POINTER_SIZE = 32</span>
      expr := str(aSize);
      expr &amp;:= <span class="stri">"U"</span>;
      expr &amp;:= ccConf.INT32TYPE_LITERAL_SUFFIX;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bitsetLiteral (<span class="op">in</span> <span class="type">bitset</span>: aBitset) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aBitset <span class="op">not</span> <span class="op">in</span> set_const_table <span class="keywd">then</span>
      set_const_table @:= [aBitset] length(set_const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    expr := <span class="stri">"set["</span>;
    expr &amp;:= str(set_const_table[aBitset]);
    expr &amp;:= <span class="stri">"]"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: floatLiteral (<span class="op">in</span> <span class="type">float</span>: aFloat) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">bin64</span>: bits <span class="keywd">is</span> bin64(0);
    <span class="keywd">var</span> <span class="type">integer</span>: exponentPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> isNaN(aFloat) <span class="keywd">then</span>
      bits := bin64(aFloat);
      <span class="keywd">if</span> bits <span class="op">not</span> <span class="op">in</span> nan_const_table <span class="keywd">then</span>
        nan_const_table @:= [bits] length(nan_const_table);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      expr := <span class="stri">"nanValue["</span>;
      expr &amp;:= str(nan_const_table[bits]);
      expr &amp;:= <span class="stri">"].aDouble"</span>;
    <span class="keywd">elsif</span> aFloat = Infinity <span class="keywd">then</span>
      expr := <span class="stri">"POSITIVE_INFINITY"</span>;
    <span class="keywd">elsif</span> aFloat = -Infinity <span class="keywd">then</span>
      expr := <span class="stri">"NEGATIVE_INFINITY"</span>;
    <span class="keywd">elsif</span> isNegativeZero(aFloat) <span class="keywd">then</span>
      expr := <span class="stri">"negativeZero"</span>;
    <span class="keywd">else</span>
      expr := str(aFloat);
      <span class="comment"># Make sure that the literal is parsed to the same value.</span>
      <span class="keywd">if</span> float(expr) &lt;> aFloat <span class="op">or</span> length(expr) >= 100 <span class="keywd">then</span>
        expr := aFloat <span class="op">sci</span> 100;
        exponentPos := pos(expr, <span class="stri">'e'</span>);
        pos := pred(exponentPos);
        <span class="keywd">while</span> pos >= 1 <span class="op">and</span> expr[pos] = <span class="stri">'0'</span> <span class="keywd">do</span>
          decr(pos);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        expr := expr[.. pos] &amp; expr[exponentPos ..];
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: typeLiteral (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aType <span class="op">not</span> <span class="op">in</span> type_const_table <span class="keywd">then</span>
      type_const_table @:= [aType] length(type_const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    expr := <span class="stri">"typ["</span>;
    expr &amp;:= str(type_const_table[aType]);
    expr &amp;:= <span class="stri">"] /* "</span>;
    expr &amp;:= type_name2(aType);
    expr &amp;:= <span class="stri">" */"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: windowLiteral (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aWindow <span class="op">not</span> <span class="op">in</span> win_const_table <span class="keywd">then</span>
      win_const_table @:= [aWindow] length(win_const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    expr := <span class="stri">"win["</span>;
    expr &amp;:= str(win_const_table[aWindow]);
    expr &amp;:= <span class="stri">"]"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
