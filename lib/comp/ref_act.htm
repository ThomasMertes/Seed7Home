<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  ref_act.s7i   Generate code for actions of the type reference.  *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2015  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ADDR           <span class="keywd">is</span> action <span class="stri">"REF_ADDR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ALLOC          <span class="keywd">is</span> action <span class="stri">"REF_ALLOC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ALLOC_INT      <span class="keywd">is</span> action <span class="stri">"REF_ALLOC_INT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ALLOC_STRI     <span class="keywd">is</span> action <span class="stri">"REF_ALLOC_STRI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ALLOC_VAR      <span class="keywd">is</span> action <span class="stri">"REF_ALLOC_VAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ARRMAXIDX      <span class="keywd">is</span> action <span class="stri">"REF_ARRMAXIDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ARRMINIDX      <span class="keywd">is</span> action <span class="stri">"REF_ARRMINIDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ARRTOLIST      <span class="keywd">is</span> action <span class="stri">"REF_ARRTOLIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_BODY           <span class="keywd">is</span> action <span class="stri">"REF_BODY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_CATEGORY       <span class="keywd">is</span> action <span class="stri">"REF_CATEGORY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_CAT_PARSE      <span class="keywd">is</span> action <span class="stri">"REF_CAT_PARSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_CAT_STR        <span class="keywd">is</span> action <span class="stri">"REF_CAT_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_CMP            <span class="keywd">is</span> action <span class="stri">"REF_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_CPY            <span class="keywd">is</span> action <span class="stri">"REF_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_DEREF          <span class="keywd">is</span> action <span class="stri">"REF_DEREF"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_EQ             <span class="keywd">is</span> action <span class="stri">"REF_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_FILE           <span class="keywd">is</span> action <span class="stri">"REF_FILE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_GETREF         <span class="keywd">is</span> action <span class="stri">"REF_GETREF"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_HASHCODE       <span class="keywd">is</span> action <span class="stri">"REF_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_HSHDATATOLIST  <span class="keywd">is</span> action <span class="stri">"REF_HSHDATATOLIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_HSHKEYSTOLIST  <span class="keywd">is</span> action <span class="stri">"REF_HSHKEYSTOLIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_HSHLENGTH      <span class="keywd">is</span> action <span class="stri">"REF_HSHLENGTH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ISTEMP         <span class="keywd">is</span> action <span class="stri">"REF_ISTEMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ISVAR          <span class="keywd">is</span> action <span class="stri">"REF_ISVAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_ITFTOSCT       <span class="keywd">is</span> action <span class="stri">"REF_ITFTOSCT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_LINE           <span class="keywd">is</span> action <span class="stri">"REF_LINE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_LOCAL_CONSTS   <span class="keywd">is</span> action <span class="stri">"REF_LOCAL_CONSTS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_LOCAL_VARS     <span class="keywd">is</span> action <span class="stri">"REF_LOCAL_VARS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_NE             <span class="keywd">is</span> action <span class="stri">"REF_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_NUM            <span class="keywd">is</span> action <span class="stri">"REF_NUM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_PARAMS         <span class="keywd">is</span> action <span class="stri">"REF_PARAMS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_PATH           <span class="keywd">is</span> action <span class="stri">"REF_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_RESINI         <span class="keywd">is</span> action <span class="stri">"REF_RESINI"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_RESULT         <span class="keywd">is</span> action <span class="stri">"REF_RESULT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_SCTTOLIST      <span class="keywd">is</span> action <span class="stri">"REF_SCTTOLIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_SELECT         <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_SETCATEGORY    <span class="keywd">is</span> action <span class="stri">"REF_SETCATEGORY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_SETPARAMS      <span class="keywd">is</span> action <span class="stri">"REF_SETPARAMS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_SETTYPE        <span class="keywd">is</span> action <span class="stri">"REF_SETTYPE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_SETVAR         <span class="keywd">is</span> action <span class="stri">"REF_SETVAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_STR            <span class="keywd">is</span> action <span class="stri">"REF_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_TRACE          <span class="keywd">is</span> action <span class="stri">"REF_TRACE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_TYPE           <span class="keywd">is</span> action <span class="stri">"REF_TYPE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: REF_VALUE          <span class="keywd">is</span> action <span class="stri">"REF_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: ref_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"objRefType  refAlloc (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refAllocInt (boolType, typeType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refAllocStri (boolType, typeType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refAllocVar (typeType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refArrMaxIdx (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refArrMinIdx (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refArrToList (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refBody (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refCategory (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refCatParse (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    refCatStr (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    refFile (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refHshDataToList (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refHshKeysToList (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refHshLength (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    refIsTemp (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    refIsVar (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refItfToSct (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refLine (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refLocalConsts (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refLocalVars (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     refNum (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refParams (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    refPath (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refResini (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refResult (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    refSctToList (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        refSetCategory (objRefType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        refSetParams (objRefType, const_listType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        refSetType (objRefType, typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        refSetVar (objRefType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    refStr (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refSymb (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"typeType    refType (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  refValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ADDR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(void *)("</span>;
    <span class="keywd">if</span> valueIsAtHeap(getExprResultType(params[2])) <span class="keywd">then</span>
      process_expr(params[2], c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"&amp;("</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ALLOC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refAlloc("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ALLOC_INT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refAllocInt("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ALLOC_STRI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refAllocStri("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ALLOC_VAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refAllocVar("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ARRMAXIDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refArrMaxIdx("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ARRMINIDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refArrMinIdx("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ARRTOLIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"refArrToList("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_BODY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refBody("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_CATEGORY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refCategory("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_CAT_PARSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refCatParse("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_CAT_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"refCatStr("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"ptrCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_DEREF, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"/*ref_deref*/ *(("</span>;
    c_expr.expr &amp;:= type_name(resultType(getType(function)));
    c_expr.expr &amp;:= <span class="stri">" *)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_FILE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refFile("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_GETREF, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"refGetRef("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)(((memSizeType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")) >> 6)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_HSHDATATOLIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"refHshDataToList("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_HSHKEYSTOLIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"refHshKeysToList("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_HSHLENGTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refHshLength("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ISTEMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refIsTemp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ISVAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refIsVar("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_ITFTOSCT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refItfToSct("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_LINE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refLine("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_LOCAL_CONSTS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"refLocalConsts("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_LOCAL_VARS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"refLocalVars("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_NUM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refNum("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_PARAMS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refParams("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refPath("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_RESINI, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refResini("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_RESULT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refResult("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_SCTTOLIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"refSctToList("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_SELECT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: object_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    object_type := getExprResultType(params[1]);
    <span class="keywd">if</span> object_type <span class="op">in</span> typeData.struct_element_idx <span class="op">and</span>
        params[3] <span class="op">in</span> typeData.struct_element_idx[object_type] <span class="keywd">then</span>
      <span class="keywd">if</span> category(params[1]) = REFPARAMOBJECT <span class="op">and</span> isVar(params[1]) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"(*((structType *)("</span>;
        getAnyParamToExpr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">")))->stru["</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"((structType)("</span>;
        getAnyParamToExpr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">"))->stru["</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= str(typeData.struct_element_idx[object_type][params[3]]);
      c_expr.expr &amp;:= <span class="stri">"]"</span>;
      c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
      c_expr.expr &amp;:= <span class="stri">"/*->o_"</span>;
      create_name2(params[3], c_expr.expr);
      c_expr.expr &amp;:= <span class="stri">"*/"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_SETCATEGORY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"refSetCategory("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_SETPARAMS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"refSetParams("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_SETTYPE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"refSetType("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_SETVAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"refSetVar("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"refStr("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_TRACE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: traceParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">type</span>: object_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    traceParam := params[1];
    object_type := getExprResultType(traceParam);
    c_expr.expr &amp;:= <span class="stri">"printf(\""</span>;
    <span class="keywd">if</span> isVar(traceParam) <span class="op">or</span> isVarfunc(getType(traceParam)) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"var "</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"const "</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    process_expr(traceParam, param1);
    <span class="keywd">if</span> param1.result_expr &lt;> <span class="stri">""</span> <span class="op">or</span> param1.temp_decls &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"[TEMP] \");\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      c_expr.expr &amp;:= param1.temp_decls;
      c_expr.expr &amp;:= param1.result_decl;
      c_expr.expr &amp;:= param1.temp_assigns;
      c_expr.expr &amp;:= <span class="stri">"printf(\""</span>;
      param1.expr &amp;:= param1.result_intro;
      param1.expr &amp;:= param1.result_expr;
      param1.expr &amp;:= param1.result_finish;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">"%s: %s is \", "</span>;
    c_expr.expr &amp;:= c_literal(str(object_type));
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    c_expr.expr &amp;:= c_literal(str(traceParam));
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> object_type <span class="op">in</span> typeData.typeCategory <span class="keywd">then</span>
      <span class="keywd">case</span> typeData.typeCategory[object_type] <span class="keywd">of</span>
        <span class="keywd">when</span> {VOIDOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;VOIDOBJECT>\")"</span>;
        <span class="keywd">when</span> {BOOLOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;BOOLOBJECT> %d\", "</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {ENUMOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;ENUMOBJECT> %d\", "</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {INTOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;INTOBJECT> %ld\", "</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {BIGINTOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"char *cstri=bigHexCStri("</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;BIGINTOBJECT> %s\", cstri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"free((void *) cstri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {FLOATOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;FLOATOBJECT> %f\", "</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {CHAROBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;CHAROBJECT> %c\", "</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {STRIOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;STRIOBJECT>\"); "</span>;
          c_expr.expr &amp;:= <span class="stri">"filPrint("</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {BSTRIOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;BSTRIOBJECT>\")"</span>;
        <span class="keywd">when</span> {FILEOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"fileType file="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;FILEOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (file == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_FILE* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"cFileType cFile=file->cFile;\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" file [%lu] %lu\", file->usage_count, file);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (cFile == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" *CLIB_NULL_FILE*\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else if (cFile == stdin) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" stdin\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else if (cFile == stdout) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" stdout\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else if (cFile == stderr) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" stderr\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" file %d\", fileno(cFile));\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {SOCKETOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;SOCKETOBJECT>\")"</span>;
        <span class="keywd">when</span> {POLLOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;POLLOBJECT>\")"</span>;
        <span class="keywd">when</span> {TYPEOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;TYPEOBJECT> %X\", "</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">when</span> {WINOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"winType win="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;WINOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (win == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_WINDOW* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" window [%lu] %lu\", win->usage_count, win);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {POINTLISTOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;POINTLISTOBJECT>\")"</span>;
        <span class="keywd">when</span> {PROCESSOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"processType process="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;PROCESSOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (process == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_PROCESS* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" process [%lu] %lu\", process->usage_count, process);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {PROGOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"progType prg="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;PROGOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (prg == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_PROG* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" program [%lu] %lu\", prg->usage_count, prg);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {REFOBJECT}:
          programUses.compDataLibrary := TRUE;
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"objRefType ref="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"striType typeStri=typStr(refType(ref));\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"striType nameStri=refStr(ref);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"striType categoryStri=refCatStr(refCategory(ref));\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;REFOBJECT>\\n\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (refIsVar(ref)) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  var \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  const \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"filWrite(&amp;stdoutFileRecord, typeStri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\": \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"filWrite(&amp;stdoutFileRecord, nameStri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" is &lt;\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"filWrite(&amp;stdoutFileRecord, categoryStri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\">\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"strDestr(typeStri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"strDestr(nameStri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"strDestr(categoryStri);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {REFLISTOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;REFLISTOBJECT>\")"</span>;
        <span class="keywd">when</span> {SETOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"setType aSet="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;SETOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (aSet == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_SET* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" set[%ld/%ld]\", aSet->min_position, aSet->max_position);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {ARRAYOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"arrayType arr="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;ARRAYOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (arr == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_ARRAY* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" array[%ld .. %ld]\", arr->min_position, arr->max_position);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {HASHOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"hashType hsh="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;HASHOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (hsh == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_HASH* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" hash[%ld]\", hsh->size);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {STRUCTOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"structType sct="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;STRUCTOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (sct == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_STRUCT* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" struct["</span>;
          c_expr.expr &amp;:= str(typeData.struct_size[object_type]);
          c_expr.expr &amp;:= <span class="stri">"]\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (sct->usage_count != 0) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;%lu>\", sct->usage_count);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" type_num=%lu %lx\", (unsigned long) sct->type_num, (unsigned long) sct);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">when</span> {INTERFACEOBJECT}:
          c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"interfaceType itf="</span>;
          c_expr.expr &amp;:= param1.expr;
          c_expr.expr &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;INTERFACEOBJECT>\");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"if (itf == NULL) {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\"  *NULL_INTERFACE* \");\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"} else {\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" usage_count=%lu %lx\", itf->usage_count, itf);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"printf(\" type_num=%lu %lx\", itf->type_num, itf);\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
        <span class="keywd">otherwise</span>:
          c_expr.expr &amp;:= <span class="stri">"printf(\"&lt; ?? >\")"</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">elsif</span> object_type = typeData.proctype <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"printf(\"&lt;CALLOBJECT> %X\", "</span>;
      c_expr.expr &amp;:= param1.expr;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"printf(\"&lt; ?? >\")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">";\n"</span>;
    <span class="keywd">if</span> param1.result_expr &lt;> <span class="stri">""</span> <span class="op">or</span> param1.temp_decls &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.expr &amp;:= param1.temp_frees;
      c_expr.expr &amp;:= param1.result_free;
      c_expr.expr &amp;:= <span class="stri">"}"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_TYPE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refType("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (REF_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"refValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
