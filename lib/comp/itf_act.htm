<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  itf_act.s7i   Generate code for actions of interface types.     *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_CMP           <span class="keywd">is</span> action <span class="stri">"ITF_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_CONV2         <span class="keywd">is</span> action <span class="stri">"ITF_CONV2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_CPY           <span class="keywd">is</span> action <span class="stri">"ITF_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_CPY2          <span class="keywd">is</span> action <span class="stri">"ITF_CPY2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_EQ            <span class="keywd">is</span> action <span class="stri">"ITF_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_HASHCODE      <span class="keywd">is</span> action <span class="stri">"ITF_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_NE            <span class="keywd">is</span> action <span class="stri">"ITF_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ITF_TO_INTERFACE  <span class="keywd">is</span> action <span class="stri">"ITF_TO_INTERFACE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: itf_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"interfaceType itfCreate (const interfaceType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType itfCreateGeneric (const genericType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"ptrCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_CONV2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    statement.temp_decls &amp;:= <span class="stri">"interfaceType new_interface;\n"</span>;
    statement.expr &amp;:= <span class="stri">"new_interface="</span>;
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= <span class="stri">"if (new_interface->usage_count != 0) {new_interface->usage_count++; }\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    process_destr_declaration(getExprResultType(params[1]), global_c_expr);
    <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
      process_destr_call(getExprResultType(params[1]),
          c_param1.expr, statement.expr);
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"=new_interface;\n"</span>;
    <span class="keywd">else</span>
      statement.temp_decls &amp;:= <span class="stri">"interfaceType *interface_ptr=&amp;("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
      process_destr_call(getExprResultType(params[1]),
          <span class="stri">"*interface_ptr"</span>, statement.expr);
      statement.expr &amp;:= <span class="stri">"*interface_ptr=new_interface;\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_CPY2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process(ITF_CPY, function, params, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)(((memSizeType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")) >> 6)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ITF_TO_INTERFACE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: result_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    incr(c_expr.temp_num);
    result_name := <span class="stri">"result_"</span> &amp; str(c_expr.temp_num);
    c_expr.temp_decls &amp;:= <span class="stri">"interfaceType "</span>;
    c_expr.temp_decls &amp;:= result_name;
    c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
    c_expr.result_expr &amp;:= <span class="stri">"/* ITF_TO_INTERFACE */("</span>;
    c_expr.result_expr &amp;:= result_name;
    c_expr.result_expr &amp;:= <span class="stri">"="</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">","</span>;
    c_expr.result_expr &amp;:= result_name;
    c_expr.result_expr &amp;:= <span class="stri">"->usage_count!=0 ? "</span>;
    c_expr.result_expr &amp;:= result_name;
    c_expr.result_expr &amp;:= <span class="stri">"->usage_count++ : 0,"</span>;
    c_expr.result_expr &amp;:= result_name;
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
