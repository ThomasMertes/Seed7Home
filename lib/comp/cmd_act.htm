<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  cmd_act.s7i   Generate code for actions of system commands.     *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_BIG_FILESIZE             <span class="keywd">is</span> action <span class="stri">"CMD_BIG_FILESIZE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_CHDIR                    <span class="keywd">is</span> action <span class="stri">"CMD_CHDIR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_CLONE_FILE               <span class="keywd">is</span> action <span class="stri">"CMD_CLONE_FILE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_CONFIG_VALUE             <span class="keywd">is</span> action <span class="stri">"CMD_CONFIG_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_COPY_FILE                <span class="keywd">is</span> action <span class="stri">"CMD_COPY_FILE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_ENVIRONMENT              <span class="keywd">is</span> action <span class="stri">"CMD_ENVIRONMENT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_FILESIZE                 <span class="keywd">is</span> action <span class="stri">"CMD_FILESIZE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_FILETYPE                 <span class="keywd">is</span> action <span class="stri">"CMD_FILETYPE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_FILETYPE_SL              <span class="keywd">is</span> action <span class="stri">"CMD_FILETYPE_SL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_FINAL_PATH               <span class="keywd">is</span> action <span class="stri">"CMD_FINAL_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GETCWD                   <span class="keywd">is</span> action <span class="stri">"CMD_GETCWD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GETENV                   <span class="keywd">is</span> action <span class="stri">"CMD_GETENV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_ATIME                <span class="keywd">is</span> action <span class="stri">"CMD_GET_ATIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_ATIME_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_GET_ATIME_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_CTIME                <span class="keywd">is</span> action <span class="stri">"CMD_GET_CTIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_FILE_MODE            <span class="keywd">is</span> action <span class="stri">"CMD_GET_FILE_MODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_FILE_MODE_OF_SYMLINK <span class="keywd">is</span> action <span class="stri">"CMD_GET_FILE_MODE_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_GROUP                <span class="keywd">is</span> action <span class="stri">"CMD_GET_GROUP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_GROUP_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_GET_GROUP_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_MTIME                <span class="keywd">is</span> action <span class="stri">"CMD_GET_MTIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_MTIME_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_GET_MTIME_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_OWNER                <span class="keywd">is</span> action <span class="stri">"CMD_GET_OWNER"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_OWNER_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_GET_OWNER_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_GET_SEARCH_PATH          <span class="keywd">is</span> action <span class="stri">"CMD_GET_SEARCH_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_HOME_DIR                 <span class="keywd">is</span> action <span class="stri">"CMD_HOME_DIR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_MKDIR                    <span class="keywd">is</span> action <span class="stri">"CMD_MKDIR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_MOVE                     <span class="keywd">is</span> action <span class="stri">"CMD_MOVE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_READ_DIR                 <span class="keywd">is</span> action <span class="stri">"CMD_READ_DIR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_READ_LINK                <span class="keywd">is</span> action <span class="stri">"CMD_READ_LINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_READ_LINK_ABSOLUTE       <span class="keywd">is</span> action <span class="stri">"CMD_READ_LINK_ABSOLUTE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_REMOVE_FILE              <span class="keywd">is</span> action <span class="stri">"CMD_REMOVE_FILE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_REMOVE_TREE              <span class="keywd">is</span> action <span class="stri">"CMD_REMOVE_TREE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SETENV                   <span class="keywd">is</span> action <span class="stri">"CMD_SETENV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_ATIME                <span class="keywd">is</span> action <span class="stri">"CMD_SET_ATIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_FILE_MODE            <span class="keywd">is</span> action <span class="stri">"CMD_SET_FILE_MODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_GROUP                <span class="keywd">is</span> action <span class="stri">"CMD_SET_GROUP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_GROUP_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_SET_GROUP_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_MTIME                <span class="keywd">is</span> action <span class="stri">"CMD_SET_MTIME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_MTIME_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_SET_MTIME_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_OWNER                <span class="keywd">is</span> action <span class="stri">"CMD_SET_OWNER"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_OWNER_OF_SYMLINK     <span class="keywd">is</span> action <span class="stri">"CMD_SET_OWNER_OF_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SET_SEARCH_PATH          <span class="keywd">is</span> action <span class="stri">"CMD_SET_SEARCH_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SHELL                    <span class="keywd">is</span> action <span class="stri">"CMD_SHELL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SHELL_ESCAPE             <span class="keywd">is</span> action <span class="stri">"CMD_SHELL_ESCAPE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_SYMLINK                  <span class="keywd">is</span> action <span class="stri">"CMD_SYMLINK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_TO_OS_PATH               <span class="keywd">is</span> action <span class="stri">"CMD_TO_OS_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CMD_UNSETENV                 <span class="keywd">is</span> action <span class="stri">"CMD_UNSETENV"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cmd_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"bigIntType  cmdBigFileSize (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdChdir (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdCloneFile (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdConfigValue (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdCopyFile (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   cmdEnvironment (void);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     cmdFileSize (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     cmdFileType (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     cmdFileTypeSL (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdFinalPath (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdGetcwd (void);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdGetenv (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdGetATime (const const_striType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdGetATimeOfSymlink (const const_striType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdGetCTime (const const_striType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"setType     cmdGetFileMode (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"setType     cmdGetFileModeOfSymlink (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdGetGroup (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdGetGroupOfSymlink (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdGetMTime (const const_striType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdGetMTimeOfSymlink (const const_striType, intType *, intType *, intType *, intType *, intType *, intType *, intType *, intType *, boolType *);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdGetOwner (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdGetOwnerOfSymlink (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   cmdGetSearchPath (void);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdHomeDir (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdMkdir (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdMove (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   cmdReadDir (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdReadLink (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdReadLinkAbsolute (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdRemoveFile (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdRemoveTree (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetenv (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetATime (const const_striType, intType, intType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetFileMode (const const_striType, const const_setType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetGroup (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetGroupOfSymlink (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetMTime (const const_striType, intType, intType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetMTimeOfSymlink (const const_striType, intType, intType, intType, intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetOwner (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSetOwnerOfSymlink (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     cmdShell (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdShellEscape (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdSymlink (const_striType, const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    cmdToOsPath (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        cmdUnsetenv (const const_striType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_BIG_FILESIZE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdBigFileSize("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_CHDIR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdChdir("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_CLONE_FILE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdCloneFile("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_CONFIG_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdConfigValue("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_COPY_FILE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdCopyFile("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_ENVIRONMENT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    result_type := resultType(getType(function));
    prepare_typed_result(result_type, c_expr);
    c_expr.result_expr := <span class="stri">"cmdEnvironment()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_FILESIZE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"cmdFileSize("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_FILETYPE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"cmdFileType("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_FILETYPE_SL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"cmdFileTypeSL("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_FINAL_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdFinalPath("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GETCWD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetcwd()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GETENV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetenv("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_ATIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdGetATime("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_ATIME_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdGetATimeOfSymlink("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_CTIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdGetCTime("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_FILE_MODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_set_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetFileMode("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_FILE_MODE_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_set_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetFileModeOfSymlink("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_GROUP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetGroup("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_GROUP_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetGroupOfSymlink("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_MTIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdGetMTime("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_MTIME_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdGetMTimeOfSymlink("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[10], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_OWNER, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetOwner("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_OWNER_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetOwnerOfSymlink("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_GET_SEARCH_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    result_type := resultType(getType(function));
    prepare_typed_result(result_type, c_expr);
    c_expr.result_expr := <span class="stri">"cmdGetSearchPath()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_HOME_DIR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdHomeDir()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_MKDIR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdMkdir("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_MOVE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdMove("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_READ_DIR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(array_type[getExprResultType(params[1])], c_expr);
    c_expr.result_expr := <span class="stri">"cmdReadDir("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_READ_LINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdReadLink("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_READ_LINK_ABSOLUTE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdReadLinkAbsolute("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_REMOVE_FILE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdRemoveFile("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_REMOVE_TREE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdRemoveTree("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SETENV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetenv("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_ATIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetATime("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_FILE_MODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetFileMode("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_GROUP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetGroup("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_GROUP_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetGroupOfSymlink("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_MTIME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetMTime("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_MTIME_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetMTimeOfSymlink("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[9], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_OWNER, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetOwner("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_OWNER_OF_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSetOwnerOfSymlink("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SET_SEARCH_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"cmdSetSearchPath("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SHELL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"cmdShell("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SHELL_ESCAPE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdShellEscape("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_SYMLINK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdSymlink("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_TO_OS_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"cmdToOsPath("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CMD_UNSETENV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"cmdUnsetenv("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
