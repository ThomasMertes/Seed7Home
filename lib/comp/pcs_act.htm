<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pcs_act.s7i   Generate code for actions of process commands.    *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2016  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_CHILD_STDERR <span class="keywd">is</span> action <span class="stri">"PCS_CHILD_STDERR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_CHILD_STDIN  <span class="keywd">is</span> action <span class="stri">"PCS_CHILD_STDIN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_CHILD_STDOUT <span class="keywd">is</span> action <span class="stri">"PCS_CHILD_STDOUT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_CMP          <span class="keywd">is</span> action <span class="stri">"PCS_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_CPY          <span class="keywd">is</span> action <span class="stri">"PCS_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_CREATE       <span class="keywd">is</span> action <span class="stri">"PCS_CREATE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_DESTR        <span class="keywd">is</span> action <span class="stri">"PCS_DESTR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_EMPTY        <span class="keywd">is</span> action <span class="stri">"PCS_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_EQ           <span class="keywd">is</span> action <span class="stri">"PCS_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_EXIT_VALUE   <span class="keywd">is</span> action <span class="stri">"PCS_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_HASHCODE     <span class="keywd">is</span> action <span class="stri">"PCS_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_IS_ALIVE     <span class="keywd">is</span> action <span class="stri">"PCS_IS_ALIVE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_KILL         <span class="keywd">is</span> action <span class="stri">"PCS_KILL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_NE           <span class="keywd">is</span> action <span class="stri">"PCS_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_PIPE2        <span class="keywd">is</span> action <span class="stri">"PCS_PIPE2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_PTY          <span class="keywd">is</span> action <span class="stri">"PCS_PTY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_START        <span class="keywd">is</span> action <span class="stri">"PCS_START"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_STR          <span class="keywd">is</span> action <span class="stri">"PCS_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_VALUE        <span class="keywd">is</span> action <span class="stri">"PCS_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PCS_WAIT_FOR     <span class="keywd">is</span> action <span class="stri">"PCS_WAIT_FOR"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: pcs_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"fileType    pcsChildStdErr (const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    pcsChildStdIn (const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    pcsChildStdOut (const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     pcsCmp (const const_processType, const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     pcsCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsCpy (processType *const, const processType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"processType pcsCreate (const processType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType pcsCreateGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsDestr (const processType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsDestrGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    pcsEq (const const_processType, const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     pcsExitValue (const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     pcsHashCode (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    pcsIsAlive (const processType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsKill (const processType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsPipe2 (const const_striType, const const_arrayType, fileType *, fileType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsPty (const const_striType, const const_arrayType, fileType *, fileType *);"</span>);
    declareExtern(c_prog, <span class="stri">"processType pcsStart (const const_striType, const const_arrayType, fileType, fileType, fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    pcsStr (const const_processType);"</span>);
    declareExtern(c_prog, <span class="stri">"processType pcsValue (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        pcsWaitFor (const processType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_CHILD_STDERR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_file_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"pcsChildStdErr("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_CHILD_STDIN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_file_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"pcsChildStdIn("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_CHILD_STDOUT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_file_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"pcsChildStdOut("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsCmp("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], c_param1);
    c_param3.temp_num := c_param1.temp_num;
    process_expr(params[3], c_param3);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      setDiagnosticLine(c_expr);
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"processType old_process="</span>;
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">";\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"processType *process_ptr=&amp;("</span>;
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">");\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"processType old_process=*process_ptr;\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"*process_ptr="</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= c_param3.result_expr;
      c_expr.expr &amp;:= <span class="stri">";\n"</span>;
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"pcsDestr(old_process);\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"pcsCpy(&amp;("</span>;
      c_expr.expr &amp;:= c_param1.expr;
      c_expr.expr &amp;:= <span class="stri">"), "</span>;
      c_expr.expr &amp;:= c_param3.expr;
      c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsEq("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_EXIT_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsExitValue("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsHashCode("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_IS_ALIVE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsIsAlive("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_KILL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"pcsKill("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"!pcsEq("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_PIPE2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsPipe2("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_PTY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsPty("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_START, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_process_result(c_expr);
    c_expr.result_expr := <span class="stri">"pcsStart("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[5], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"pcsStr("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"pcsValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;



<span class="keywd">const</span> <span class="type">proc</span>: process (PCS_WAIT_FOR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"pcsWaitFor("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
