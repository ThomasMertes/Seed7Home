<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  type.s7i      Type functions, variables and constants for s7c.  *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment"># Category values only used in the Compiler:</span>
<span class="keywd">const</span> <span class="type">category</span>: BOOLOBJECT        <span class="keywd">is</span> category <span class="op">conv</span> 256;
<span class="keywd">const</span> <span class="type">category</span>: ENUMOBJECT        <span class="keywd">is</span> category <span class="op">conv</span> 257;
<span class="keywd">const</span> <span class="type">category</span>: VOIDOBJECT        <span class="keywd">is</span> category <span class="op">conv</span> 258;

<span class="keywd">const</span> <span class="type">type</span>: typeReferenceHash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">reference</span>;
<span class="keywd">const</span> <span class="type">type</span>: typeCategoryHash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">category</span>;
<span class="keywd">const</span> <span class="type">type</span>: type_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">type</span>;
<span class="keywd">const</span> <span class="type">type</span>: boolean_type_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">boolean</span>;
<span class="keywd">const</span> <span class="type">type</span>: integer_type_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: element_type_array <span class="keywd">is</span> <span class="type">array</span> <span class="type">type</span>;
<span class="keywd">const</span> <span class="type">type</span>: struct_element_type_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">element_type_array</span>;
<span class="keywd">const</span> <span class="type">type</span>: string_type_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">string</span>;
<span class="keywd">const</span> <span class="type">type</span>: implements_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">array</span> type;

<span class="keywd">var</span> <span class="type">typeCategoryHash</span>: typeCategory <span class="keywd">is</span> typeCategoryHash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">type_hash</span>: array_element <span class="keywd">is</span> type_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">type_hash</span>: array_type <span class="keywd">is</span> type_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">integer_type_hash</span>: array_minIdx <span class="keywd">is</span> integer_type_hash.value;
<span class="keywd">var</span> <span class="type">integer_type_hash</span>: array_maxIdx <span class="keywd">is</span> integer_type_hash.value;
<span class="keywd">var</span> <span class="type">struct_element_type_hash</span>: struct_element_type <span class="keywd">is</span> struct_element_type_hash.EMPTY_HASH;

<span class="keywd">const</span> <span class="type">type</span>: element_number_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">reference</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: number_element_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">integer</span><span class="type">]</span> <span class="type">array</span> reference;
<span class="keywd">const</span> <span class="type">type</span>: struct_size_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: struct_element_array <span class="keywd">is</span> <span class="type">array</span> <span class="type">reference</span>;
<span class="keywd">const</span> <span class="type">type</span>: struct_element_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">struct_element_array</span>;
<span class="keywd">const</span> <span class="type">type</span>: element_idx_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">reference</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: struct_element_idx_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">type</span><span class="type">]</span> <span class="type">element_idx_hash</span>;
<span class="keywd">const</span> <span class="type">type</span>: boolean_obj_hash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">reference</span><span class="type">]</span> <span class="type">boolean</span>;

<span class="keywd">var</span> <span class="type">implements_hash</span>: implements <span class="keywd">is</span> implements_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">struct_size_hash</span>: struct_size <span class="keywd">is</span> struct_size_hash.value;
<span class="keywd">var</span> <span class="type">struct_element_hash</span>: struct_element <span class="keywd">is</span> struct_element_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">struct_element_idx_hash</span>: struct_element_idx <span class="keywd">is</span> struct_element_idx_hash.EMPTY_HASH;

<span class="comment"># Type variables which hold types from the program being compiled</span>
<span class="keywd">var</span> <span class="type">type</span>: proctype <span class="keywd">is</span> void;
<span class="keywd">var</span> <span class="type">type</span>: voidtype <span class="keywd">is</span> void;
<span class="keywd">var</span> <span class="type">type</span>: fileInterfaceType <span class="keywd">is</span> void;

<span class="keywd">var</span> <span class="type">program</span>: prog <span class="keywd">is</span> program.EMPTY;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: raw_type_name (<span class="op">in</span> <span class="type">type</span>: object_type) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: typeName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">in</span> typeCategory <span class="keywd">then</span>
      <span class="keywd">case</span> typeCategory[object_type] <span class="keywd">of</span>
        <span class="keywd">when</span> {VOIDOBJECT}:      typeName := <span class="stri">"void"</span>;
        <span class="keywd">when</span> {BOOLOBJECT}:      typeName := <span class="stri">"boolType"</span>;
        <span class="keywd">when</span> {ENUMOBJECT}:      typeName := <span class="stri">"enumType"</span>;
        <span class="keywd">when</span> {INTOBJECT}:       typeName := <span class="stri">"intType"</span>;
        <span class="keywd">when</span> {BIGINTOBJECT}:    typeName := <span class="stri">"bigIntType"</span>;
        <span class="keywd">when</span> {FLOATOBJECT}:     typeName := <span class="stri">"floatType"</span>;
        <span class="keywd">when</span> {CHAROBJECT}:      typeName := <span class="stri">"charType"</span>;
        <span class="keywd">when</span> {STRIOBJECT}:      typeName := <span class="stri">"striType"</span>;
        <span class="keywd">when</span> {BSTRIOBJECT}:     typeName := <span class="stri">"bstriType"</span>;
        <span class="keywd">when</span> {FILEOBJECT}:      typeName := <span class="stri">"fileType"</span>;
        <span class="keywd">when</span> {SOCKETOBJECT}:    typeName := <span class="stri">"socketType"</span>;
        <span class="keywd">when</span> {POLLOBJECT}:      typeName := <span class="stri">"pollType"</span>;
        <span class="keywd">when</span> {SETOBJECT}:       typeName := <span class="stri">"setType"</span>;
        <span class="keywd">when</span> {WINOBJECT}:       typeName := <span class="stri">"winType"</span>;
        <span class="keywd">when</span> {POINTLISTOBJECT}: typeName := <span class="stri">"bstriType"</span>;
        <span class="keywd">when</span> {PROCESSOBJECT}:   typeName := <span class="stri">"processType"</span>;
        <span class="keywd">when</span> {PROGOBJECT}:      typeName := <span class="stri">"progType"</span>;
        <span class="keywd">when</span> {DATABASEOBJECT}:  typeName := <span class="stri">"databaseType"</span>;
        <span class="keywd">when</span> {SQLSTMTOBJECT}:   typeName := <span class="stri">"sqlStmtType"</span>;
        <span class="keywd">when</span> {ARRAYOBJECT}:     typeName := <span class="stri">"arrayType"</span>;
        <span class="keywd">when</span> {HASHOBJECT}:      typeName := <span class="stri">"hashType"</span>;
        <span class="keywd">when</span> {STRUCTOBJECT}:    typeName := <span class="stri">"structType"</span>;
        <span class="keywd">when</span> {INTERFACEOBJECT}: typeName := <span class="stri">"interfaceType"</span>;
        <span class="keywd">when</span> {REFOBJECT}:       typeName := <span class="stri">"objRefType"</span>;
        <span class="keywd">when</span> {REFLISTOBJECT}:   typeName := <span class="stri">"listType"</span>;
        <span class="keywd">when</span> {TYPEOBJECT}:      typeName := <span class="stri">"typeType"</span>;
        <span class="keywd">when</span> {ACTOBJECT}:       typeName := <span class="stri">"actType"</span>;
        <span class="keywd">otherwise</span>:
          typeName := <span class="stri">"t_"</span>;
          typeName &amp;:= str(typeNumber(object_type));
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">else</span>
      typeName := <span class="stri">"t_"</span>;
      typeName &amp;:= str(typeNumber(object_type));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: type_name (<span class="op">in</span> <span class="type">type</span>: object_type) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: typeName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    typeName := raw_type_name(object_type);
    typeName &amp;:= <span class="stri">"/*t_"</span>;
    typeName &amp;:= str(typeNumber(object_type));
    typeName &amp;:= <span class="stri">"_"</span>;
    typeName &amp;:= str(object_type);
    typeName &amp;:= <span class="stri">"*/"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: type_name2 (<span class="op">in</span> <span class="type">type</span>: object_type) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: typeName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    typeName := raw_type_name(object_type);
    typeName &amp;:= <span class="stri">"/t_"</span>;
    typeName &amp;:= str(typeNumber(object_type));
    typeName &amp;:= <span class="stri">"_"</span>;
    typeName &amp;:= str(object_type);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: base_type (<span class="op">in</span> <span class="type">type</span>: array_type) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: baseType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ref_list</span>: param_list <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">reference</span>: matched_object <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    param_list := make_list(typeObject(array_type));
    param_list &amp;:= make_list(syobject(prog, <span class="stri">"base_type"</span>));
    matched_object := match(prog, param_list);
    <span class="keywd">if</span> matched_object &lt;> NIL <span class="op">and</span> category(matched_object) = TYPEOBJECT <span class="keywd">then</span>
      baseType := getValue(matched_object, type);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: getExprResultType (<span class="op">in</span> <span class="type">reference</span>: aReference) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: resultType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    <span class="comment"># write("getExprResultType: ");</span>
    <span class="comment"># TRACE_OBJ(aReference);</span>
    <span class="comment"># writeln;</span>
    resultType := getType(aReference);
    <span class="keywd">if</span> category(aReference) = CALLOBJECT <span class="keywd">then</span>
      <span class="keywd">while</span> isFunc(resultType) <span class="op">or</span> isVarfunc(resultType) <span class="keywd">do</span>
        <span class="comment"># writeln("isFunc(" &lt;&amp; str(resultType) &lt;&amp; "): " &lt;&amp; str(category(aReference)));</span>
        resultType := resultType(resultType);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="comment"># writeln("getExprResultType --> " &lt;&amp; str(resultType));</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: raw_type_value (<span class="op">in</span> <span class="type">type</span>: object_type) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: valueName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">in</span> typeCategory <span class="keywd">then</span>
      <span class="keywd">case</span> typeCategory[object_type] <span class="keywd">of</span>
        <span class="keywd">when</span> {BOOLOBJECT}:      valueName := <span class="stri">"boolValue"</span>;
        <span class="keywd">when</span> {ENUMOBJECT}:      valueName := <span class="stri">"enumValue"</span>;
        <span class="keywd">when</span> {INTOBJECT}:       valueName := <span class="stri">"intValue"</span>;
        <span class="keywd">when</span> {BIGINTOBJECT}:    valueName := <span class="stri">"bigIntValue"</span>;
        <span class="keywd">when</span> {FLOATOBJECT}:     valueName := <span class="stri">"floatValue"</span>;
        <span class="keywd">when</span> {CHAROBJECT}:      valueName := <span class="stri">"charValue"</span>;
        <span class="keywd">when</span> {STRIOBJECT}:      valueName := <span class="stri">"striValue"</span>;
        <span class="keywd">when</span> {BSTRIOBJECT}:     valueName := <span class="stri">"bstriValue"</span>;
        <span class="keywd">when</span> {FILEOBJECT}:      valueName := <span class="stri">"fileValue"</span>;
        <span class="keywd">when</span> {SOCKETOBJECT}:    valueName := <span class="stri">"socketValue"</span>;
        <span class="keywd">when</span> {POLLOBJECT}:      valueName := <span class="stri">"pollValue"</span>;
        <span class="keywd">when</span> {SETOBJECT}:       valueName := <span class="stri">"setValue"</span>;
        <span class="keywd">when</span> {WINOBJECT}:       valueName := <span class="stri">"winValue"</span>;
        <span class="keywd">when</span> {POINTLISTOBJECT}: valueName := <span class="stri">"bstriValue"</span>;
        <span class="keywd">when</span> {PROCESSOBJECT}:   valueName := <span class="stri">"processValue"</span>;
        <span class="keywd">when</span> {PROGOBJECT}:      valueName := <span class="stri">"progValue"</span>;
        <span class="keywd">when</span> {DATABASEOBJECT}:  valueName := <span class="stri">"databaseValue"</span>;
        <span class="keywd">when</span> {SQLSTMTOBJECT}:   valueName := <span class="stri">"sqlStmtValue"</span>;
        <span class="keywd">when</span> {ARRAYOBJECT}:     valueName := <span class="stri">"arrayValue"</span>;
        <span class="keywd">when</span> {HASHOBJECT}:      valueName := <span class="stri">"hashValue"</span>;
        <span class="keywd">when</span> {STRUCTOBJECT}:    valueName := <span class="stri">"structValue"</span>;
        <span class="keywd">when</span> {INTERFACEOBJECT}: valueName := <span class="stri">"interfaceValue"</span>;
        <span class="keywd">when</span> {REFOBJECT}:       valueName := <span class="stri">"objRefValue"</span>;
        <span class="keywd">when</span> {REFLISTOBJECT}:   valueName := <span class="stri">"listValue"</span>;
        <span class="keywd">when</span> {TYPEOBJECT}:      valueName := <span class="stri">"typeValue"</span>;
        <span class="keywd">when</span> {ACTOBJECT}:       valueName := <span class="stri">"actValue"</span>;
        <span class="keywd">otherwise</span>:              valueName := <span class="stri">"genericValue"</span>;
       <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">else</span>
      valueName := <span class="stri">"genericValue"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: select_value_from_rtlObjectStruct (<span class="op">in</span> <span class="type">type</span>: typeWanted) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="stri">".value."</span> &amp; raw_type_value(typeWanted);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: select_value_from_rtlObjectptr (<span class="op">in</span> <span class="type">type</span>: typeWanted) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="stri">"->value."</span> &amp; raw_type_value(typeWanted);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: valueIsAtHeap (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isAtHeap <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">category</span>: heapCategories <span class="keywd">is</span> {
        BIGINTOBJECT, STRIOBJECT, BSTRIOBJECT, FILEOBJECT, WINOBJECT,
        POINTLISTOBJECT, PROCESSOBJECT, PROGOBJECT, DATABASEOBJECT,
        SQLSTMTOBJECT, SETOBJECT, ARRAYOBJECT, STRUCTOBJECT, HASHOBJECT,
        INTERFACEOBJECT, REFLISTOBJECT};
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aType <span class="op">in</span> typeCategory <span class="op">and</span> typeCategory[aType] <span class="op">in</span> heapCategories <span class="keywd">then</span>
      isAtHeap := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: valueIsAtHeap (<span class="op">in</span> <span class="type">reference</span>: a_param) <span class="keywd">is</span>
  <span class="keywd">return</span> valueIsAtHeap(getType(a_param));


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: useConstPrefix (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: useConstPrefix <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">category</span>: constPrefixCategories <span class="keywd">is</span> {
        BIGINTOBJECT, STRIOBJECT, PROGOBJECT,
        ARRAYOBJECT, SETOBJECT, HASHOBJECT};
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aType <span class="op">in</span> typeCategory <span class="op">and</span> typeCategory[aType] <span class="op">in</span> constPrefixCategories <span class="keywd">then</span>
      useConstPrefix := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: useConstPrefix (<span class="op">in</span> <span class="type">reference</span>: a_param) <span class="keywd">is</span>
  <span class="keywd">return</span> useConstPrefix(getType(a_param));
</pre>
</body>
</html>
