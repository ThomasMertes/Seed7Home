<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  arr_act.s7i   Generate code for actions of the type array.      *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2015, 2018  Thomas Mertes     *)</span>
<span class="comment">(*  Copyright (C) 2020 - 2022  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_APPEND       <span class="keywd">is</span> action <span class="stri">"ARR_APPEND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_ARRLIT       <span class="keywd">is</span> action <span class="stri">"ARR_ARRLIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_ARRLIT2      <span class="keywd">is</span> action <span class="stri">"ARR_ARRLIT2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_BASELIT      <span class="keywd">is</span> action <span class="stri">"ARR_BASELIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_BASELIT2     <span class="keywd">is</span> action <span class="stri">"ARR_BASELIT2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_CAT          <span class="keywd">is</span> action <span class="stri">"ARR_CAT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_CONV         <span class="keywd">is</span> action <span class="stri">"ARR_CONV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_CPY          <span class="keywd">is</span> action <span class="stri">"ARR_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_CREATE       <span class="keywd">is</span> action <span class="stri">"ARR_CREATE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_DESTR        <span class="keywd">is</span> action <span class="stri">"ARR_DESTR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_EXTEND       <span class="keywd">is</span> action <span class="stri">"ARR_EXTEND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_GEN          <span class="keywd">is</span> action <span class="stri">"ARR_GEN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_HEAD         <span class="keywd">is</span> action <span class="stri">"ARR_HEAD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_IDX          <span class="keywd">is</span> action <span class="stri">"ARR_IDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_INSERT       <span class="keywd">is</span> action <span class="stri">"ARR_INSERT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_INSERT_ARRAY <span class="keywd">is</span> action <span class="stri">"ARR_INSERT_ARRAY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_LNG          <span class="keywd">is</span> action <span class="stri">"ARR_LNG"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_MAXIDX       <span class="keywd">is</span> action <span class="stri">"ARR_MAXIDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_MINIDX       <span class="keywd">is</span> action <span class="stri">"ARR_MINIDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_PUSH         <span class="keywd">is</span> action <span class="stri">"ARR_PUSH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_RANGE        <span class="keywd">is</span> action <span class="stri">"ARR_RANGE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_REMOVE       <span class="keywd">is</span> action <span class="stri">"ARR_REMOVE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_REMOVE_ARRAY <span class="keywd">is</span> action <span class="stri">"ARR_REMOVE_ARRAY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_SORT         <span class="keywd">is</span> action <span class="stri">"ARR_SORT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_SORT_REVERSE <span class="keywd">is</span> action <span class="stri">"ARR_SORT_REVERSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_SUBARR       <span class="keywd">is</span> action <span class="stri">"ARR_SUBARR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_TAIL         <span class="keywd">is</span> action <span class="stri">"ARR_TAIL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ARR_TIMES        <span class="keywd">is</span> action <span class="stri">"ARR_TIMES"</span>;

<span class="keywd">var</span> <span class="type">boolean_type_hash</span>: times_prototype_declared <span class="keywd">is</span> boolean_type_hash.EMPTY_HASH;


<span class="keywd">const</span> <span class="type">proc</span>: arr_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        arrAppend (arrayType *const, const arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrArrlit2 (intType, arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrBaselit (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrBaselit2 (intType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrCat (arrayType, const arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrExtend (arrayType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        arrFree (arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrGen (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrHead (const const_arrayType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrHeadTemp (arrayType *, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType arrIdxTemp (arrayType *, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        arrInsert (arrayType *, intType, genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        arrInsertArray (arrayType *, intType, arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        arrInsertArrayTemp (arrayType *, intType, arrayType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrMalloc (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        arrPush (arrayType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrRange (const const_arrayType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrRangeTemp (arrayType *, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrRealloc (arrayType, memSizeType, memSizeType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType arrRemove (arrayType *, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrRemoveArray (arrayType *, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrSort (arrayType, compareType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrSortReverse (arrayType, compareType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrSubarr (const const_arrayType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrSubarrTemp (arrayType *, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrTail (const const_arrayType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrTailTemp (arrayType *, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   arrTimes (intType, intType, const genericType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: declare_times_prototype (<span class="op">in</span> <span class="type">type</span>: arrayType,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: elementType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> arrayType <span class="op">not</span> <span class="op">in</span> times_prototype_declared <span class="keywd">then</span>
      elementType := array_element[arrayType];
      process_create_declaration(elementType, c_expr);
      <span class="comment"># c_expr.expr &amp;:= type_name(arrayType);</span>
      c_expr.expr &amp;:= <span class="stri">"static arrayType times_"</span>;
      c_expr.expr &amp;:= str(typeNumber(arrayType));
      c_expr.expr &amp;:= <span class="stri">" (intType, const "</span>;
      <span class="keywd">if</span> useConstPrefix(elementType) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"const_"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= type_name(elementType);
      c_expr.expr &amp;:= <span class="stri">");\n\n"</span>;
      times_prototype_declared @:= [arrayType] TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_arr_append (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">reference</span>: param3,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(param1, c_param1);
    c_param3.temp_num := c_param1.temp_num;
    getTemporaryToResultExpr(param3, c_param3);
    incr(c_param3.temp_num);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"arrAppend(&amp;("</span>;
    c_expr.expr &amp;:= c_param1.expr;
    c_expr.expr &amp;:= <span class="stri">"), "</span>;
    c_expr.expr &amp;:= c_param3.result_expr;
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_APPEND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_arr_append(params[1], params[3], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_ARRLIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: anArray <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> isConstant(params[3]) <span class="keywd">then</span>
      anArray := evaluate(prog, params[3]);
      <span class="keywd">if</span> category(anArray) = ARRAYOBJECT <span class="keywd">then</span>
        <span class="keywd">if</span> anArray <span class="op">not</span> <span class="op">in</span> const_table <span class="keywd">then</span>
          const_table @:= [anArray] length(const_table);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"arr["</span>;
        c_expr.expr &amp;:= str(const_table[anArray]);
        c_expr.expr &amp;:= <span class="stri">"]"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      prepareAnyParamTemporarys(params[3], c_param, c_expr);
      <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        prepare_typed_result(getExprResultType(params[3]), c_expr);
        c_expr.result_expr := <span class="stri">"/*arrArrlit()*/"</span>;
        c_expr.result_expr &amp;:= c_param.result_expr;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"/*arrArrlit()*/"</span>;
        c_expr.expr &amp;:= c_param.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_ARRLIT2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(getExprResultType(params[4]), c_expr);
    c_expr.result_expr := <span class="stri">"arrArrlit2("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getTemporaryToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_BASELIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> resultType(getType(function)) <span class="op">not</span> <span class="op">in</span> array_element <span class="keywd">then</span>
      array_element @:= [resultType(getType(function))] getType(params[3]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"arrBaselit((genericType)("</span>;
    getGenericTemporaryToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_BASELIT2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> resultType(getType(function)) <span class="op">not</span> <span class="op">in</span> array_element <span class="keywd">then</span>
      array_element @:= [resultType(getType(function))] getType(params[4]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"arrBaselit2("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", (genericType)("</span>;
    getGenericTemporaryToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_CAT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"arrCat("</span>;
    getTemporaryToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getTemporaryToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_CONV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    prepareAnyParamTemporarys(params[3], c_param, c_expr);
    <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      prepare_typed_result(getExprResultType(params[3]), c_expr);
      c_expr.result_expr := <span class="stri">"/*arrConv()*/"</span>;
      c_expr.result_expr &amp;:= c_param.result_expr;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"/*arrConv()*/"</span>;
      c_expr.expr &amp;:= c_param.expr;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isIntArrayOfZeros (<span class="op">in</span> <span class="type">reference</span>: arr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isIntArrayOfZeros <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: elementType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">ref_list</span>: arrayList <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">reference</span>: element <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: elementValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    arrayType := getExprResultType(arr);
    elementType := array_element[arrayType];
    <span class="keywd">if</span> elementType <span class="op">in</span> typeCategory <span class="op">and</span> typeCategory[elementType] = INTOBJECT <span class="keywd">then</span>
      arrayList := arrayToList(arr);
      isIntArrayOfZeros := TRUE;
      <span class="keywd">for</span> element <span class="keywd">range</span> arrayList <span class="keywd">until</span> <span class="op">not</span> isIntArrayOfZeros <span class="keywd">do</span>
        elementValue := getValue(element, integer);
        <span class="keywd">if</span> elementValue &lt;> 0 <span class="keywd">then</span>
          isIntArrayOfZeros := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_arr_cpy_times_optimization (<span class="op">in</span> <span class="type">reference</span>: dest,
    <span class="op">in</span> <span class="type">reference</span>: factor, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: factorRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: factorName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    writeln(<span class="stri">"process_arr_cpy_times_optimization A "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp; <span class="stri">")"</span>);
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(dest, c_param1, statement);
    statement.expr &amp;:= <span class="stri">"("</span>;
    factorName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"factor_"</span>, factor, statement);
    <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
      factorRange := getIntRange(factor);
      <span class="keywd">if</span> factorRange.minValue &lt; 0 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"(rngChk(("</span>;
        statement.expr &amp;:= factorName;
        statement.expr &amp;:= <span class="stri">") &lt; 0)?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":0),\n"</span>;
      <span class="keywd">else</span>
        countRangeOptimizations(statement);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(countNoRangeChecks);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> isNormalVariable(dest) <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"memSizeType size_a = (uintType)(("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">")->max_position - ("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">")->min_position + 1);\n"</span>;
      statement.expr &amp;:= <span class="stri">"(size_a != (uintType)("</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">")?"</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"=(arrayType)(arrRealloc("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">", size_a, "</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">")):0),\n"</span>;
      statement.expr &amp;:= <span class="stri">"memset(("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">")->arr, 0, "</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType)),\n"</span>;
      statement.expr &amp;:= <span class="stri">"("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">")->min_position = 1,\n"</span>;
      statement.expr &amp;:= <span class="stri">"("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">")->max_position = "</span>;
    <span class="keywd">else</span>
      statement.temp_decls &amp;:= <span class="stri">"arrayType *array_ptr=&amp;("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
      statement.temp_decls &amp;:= <span class="stri">"memSizeType size_a = (uintType)((*array_ptr)->max_position - (*array_ptr)->min_position + 1);\n"</span>;
      statement.expr &amp;:= <span class="stri">"(size_a != (uintType)("</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">")?\n"</span>;
      statement.expr &amp;:= <span class="stri">"*array_ptr=(arrayType)(arrRealloc(*array_ptr, size_a, "</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">")):0),\n"</span>;
      statement.expr &amp;:= <span class="stri">"memset((*array_ptr)->arr, 0, "</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType)),\n"</span>;
      statement.expr &amp;:= <span class="stri">"(*array_ptr)->min_position = 1,\n"</span>;
      statement.expr &amp;:= <span class="stri">"(*array_ptr)->max_position = "</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    statement.expr &amp;:= factorName;
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_arr_cpy_times_optimization (<span class="op">in</span> <span class="type">reference</span>: dest,
    <span class="op">in</span> <span class="type">integer</span>: minIdx, <span class="op">in</span> <span class="type">reference</span>: maxIdx, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: maxIdxRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: maxIdxName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: factorName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    writeln(<span class="stri">"process_arr_cpy_times_optimization B "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp; <span class="stri">"): "</span> &lt;&amp; minIdx);
    arrayType := getExprResultType(dest);
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(dest, c_param1, statement);
    statement.expr &amp;:= <span class="stri">"("</span>;
    maxIdxName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"maxIdx_"</span>, maxIdx, statement);
    factorName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"factor_"</span>, statement);
    statement.expr &amp;:= factorName;
    statement.expr &amp;:= <span class="stri">"="</span>;
    statement.expr &amp;:= maxIdxName;
    <span class="keywd">if</span> minIdx > 1 <span class="keywd">then</span>
      statement.expr &amp;:= <span class="stri">"- "</span>;
      statement.expr &amp;:= integerLiteral(pred(minIdx));
    <span class="keywd">elsif</span> minIdx &lt;= succ(integer.first) <span class="keywd">then</span>
      statement.expr &amp;:= <span class="stri">"- "</span>;
      statement.expr &amp;:= integerLiteral(minIdx);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">"++"</span>;
    <span class="keywd">elsif</span> minIdx &lt; 1 <span class="keywd">then</span>
      statement.expr &amp;:= <span class="stri">"+ "</span>;
      statement.expr &amp;:= integerLiteral(succ(-minIdx));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    statement.expr &amp;:= <span class="stri">", "</span>;
    <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
      maxIdxRange := getIntRange(maxIdx);
      <span class="keywd">if</span> maxIdxRange.maxValue &lt; pred(minIdx) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
        statement.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">",\n"</span>;
      <span class="keywd">elsif</span> maxIdxRange.minValue &lt; pred(minIdx) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"(rngChk(("</span>;
        statement.expr &amp;:= factorName;
        statement.expr &amp;:= <span class="stri">") &lt; 0)?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":0),\n"</span>;
      <span class="keywd">else</span>
        countRangeOptimizations(statement);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(countNoRangeChecks);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> isNormalVariable(dest) <span class="keywd">then</span>
      statement.expr &amp;:= <span class="stri">"("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">")->max_position != "</span>;
      statement.expr &amp;:= maxIdxName;
      statement.expr &amp;:= <span class="stri">"?\n("</span>;
      process_destr_declaration(arrayType, global_c_expr);
      statement.expr &amp;:= <span class="stri">"destr_"</span>;
      statement.expr &amp;:= str(typeNumber(arrayType));
      statement.expr &amp;:= <span class="stri">"("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"),"</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"=arrMalloc("</span>;
      statement.expr &amp;:= integerLiteral(minIdx);
      statement.expr &amp;:= <span class="stri">", "</span>;
      statement.expr &amp;:= maxIdxName;
      statement.expr &amp;:= <span class="stri">")):0,\nmemset(("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">")->arr, 0, "</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType)));\n"</span>;
    <span class="keywd">else</span>
      statement.temp_decls &amp;:= <span class="stri">"arrayType *array_ptr=&amp;("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
      statement.expr &amp;:= <span class="stri">"(*array_ptr)->max_position != "</span>;
      statement.expr &amp;:= maxIdxName;
      statement.expr &amp;:= <span class="stri">"?\n("</span>;
      process_destr_declaration(arrayType, global_c_expr);
      statement.expr &amp;:= <span class="stri">"destr_"</span>;
      statement.expr &amp;:= str(typeNumber(arrayType));
      statement.expr &amp;:= <span class="stri">"(*array_ptr),*array_ptr=arrMalloc("</span>;
      statement.expr &amp;:= integerLiteral(minIdx);
      statement.expr &amp;:= <span class="stri">", "</span>;
      statement.expr &amp;:= maxIdxName;
      statement.expr &amp;:= <span class="stri">")):0,\nmemset((*array_ptr)->arr, 0, "</span>;
      statement.expr &amp;:= factorName;
      statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType)));\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_arr_cpy_array_of_zeros (<span class="op">in</span> <span class="type">reference</span>: dest,
    <span class="op">in</span> <span class="type">integer</span>: minPosition, <span class="op">in</span> <span class="type">integer</span>: maxPosition, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: arraySize <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    arraySize := succ(maxPosition - minPosition);
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(dest, c_param1, statement);
    statement.expr &amp;:= <span class="stri">"("</span>;
    arrayType := getExprResultType(dest);
    <span class="keywd">if</span> isNormalVariable(dest) <span class="keywd">then</span>
      <span class="keywd">if</span> arrayType <span class="op">not</span> <span class="op">in</span> array_minIdx <span class="op">or</span> arrayType <span class="op">not</span> <span class="op">in</span> array_maxIdx <span class="op">or</span>
          minPosition &lt;> array_minIdx[arrayType] <span class="op">and</span>
          maxPosition &lt;> array_maxIdx[arrayType] <span class="keywd">then</span>
        statement.temp_decls &amp;:= <span class="stri">"memSizeType size_a = (uintType)(("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">")->max_position - ("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">")->min_position + 1);\n"</span>;
        statement.expr &amp;:= <span class="stri">"(size_a != (uintType)("</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">")?"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=(arrayType)(arrRealloc("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">", size_a, "</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">")):0),\n"</span>;
        statement.expr &amp;:= <span class="stri">"memset(("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">")->arr, 0, "</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType)),\n"</span>;
        statement.expr &amp;:= <span class="stri">"("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">")->min_position = "</span>;
        statement.expr &amp;:= integerLiteral(minPosition);
        statement.expr &amp;:= <span class="stri">",\n"</span>;
        statement.expr &amp;:= <span class="stri">"("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">")->max_position = "</span>;
        statement.expr &amp;:= integerLiteral(maxPosition);
      <span class="keywd">else</span>
        statement.expr &amp;:= <span class="stri">"memset(("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">")->arr, 0, "</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.temp_decls &amp;:= <span class="stri">"arrayType *array_ptr=&amp;("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">if</span> arrayType <span class="op">not</span> <span class="op">in</span> array_minIdx <span class="op">or</span> arrayType <span class="op">not</span> <span class="op">in</span> array_maxIdx <span class="op">or</span>
          minPosition &lt;> array_minIdx[arrayType] <span class="op">and</span>
          maxPosition &lt;> array_maxIdx[arrayType] <span class="keywd">then</span>
        statement.temp_decls &amp;:= <span class="stri">"memSizeType size_a = (uintType)((*array_ptr)->max_position - (*array_ptr)->min_position + 1);\n"</span>;
        statement.expr &amp;:= <span class="stri">"(size_a != (uintType)("</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">")?\n"</span>;
        statement.expr &amp;:= <span class="stri">"*array_ptr=(arrayType)(arrRealloc(*array_ptr, size_a, "</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">")):0),\n"</span>;
        statement.expr &amp;:= <span class="stri">"memset((*array_ptr)->arr, 0, "</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType)),\n"</span>;
        statement.expr &amp;:= <span class="stri">"(*array_ptr)->min_position = "</span>;
        statement.expr &amp;:= integerLiteral(minPosition);
        statement.expr &amp;:= <span class="stri">",\n"</span>;
        statement.expr &amp;:= <span class="stri">"(*array_ptr)->max_position = "</span>;
        statement.expr &amp;:= integerLiteral(maxPosition);
      <span class="keywd">else</span>
        statement.expr &amp;:= <span class="stri">"memset((*array_ptr)->arr, 0, "</span>;
        statement.expr &amp;:= integerLiteral(arraySize);
        statement.expr &amp;:= <span class="stri">" * sizeof(rtlObjectType))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isFixedMinIdxTimes (<span class="op">in</span> <span class="type">reference</span>: aParam) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isFixedMinIdxTimes <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">reference</span>: timesBody <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">reference</span>: timesExpression <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    arrayType := getExprResultType(aParam);
    <span class="keywd">if</span> arrayType <span class="op">in</span> array_minIdx <span class="op">and</span>
        category(aParam) = CALLOBJECT <span class="op">and</span>
        length(getValue(aParam, ref_list)) >= 4 <span class="op">and</span>
        str(getActionParameter(aParam, 2)) = <span class="stri">"times"</span> <span class="op">and</span>
        category(getValue(aParam, ref_list)[1]) = BLOCKOBJECT <span class="keywd">then</span>
      timesBody := body(getValue(aParam, ref_list)[1]);
      <span class="keywd">if</span> isActionExpression(timesBody, <span class="stri">"ARR_ARRLIT2"</span>) <span class="keywd">then</span>
        timesExpression := getActionParameter(timesBody, 4);
        <span class="keywd">if</span> isActionExpression(timesExpression, <span class="stri">"ARR_TIMES"</span>) <span class="keywd">then</span>
          isFixedMinIdxTimes := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: two_dimensional_times_optimization (<span class="op">in</span> <span class="type">reference</span>: dest,
    <span class="op">in</span> <span class="type">integer</span>: minIdx1, <span class="op">in</span> <span class="type">reference</span>: maxIdx1, <span class="op">in</span> <span class="type">integer</span>: minIdx2, <span class="op">in</span> <span class="type">reference</span>: maxIdx2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">string</span>: maxIdx1Name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: maxIdx2Name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: resultName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    arrayType := getExprResultType(dest);
    writeln(<span class="stri">"two_dimensional_times_optimization "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp; <span class="stri">"):"</span> &lt;&amp; minIdx1 &lt;&amp; <span class="stri">" "</span> &lt;&amp; minIdx2);
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(dest, c_param1, statement);
    maxIdx1Name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"maxIdx1_"</span>, statement);
    <span class="keywd">if</span> isNormalVariable(maxIdx2) <span class="keywd">then</span>
      maxIdx2Name := normalVariable(maxIdx2, statement);
    <span class="keywd">else</span>
      maxIdx2Name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"maxIdx2_"</span>, statement);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    statement.expr &amp;:= maxIdx1Name;
    statement.expr &amp;:= <span class="stri">"=("</span>;
    process_expr(maxIdx1, statement);
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> <span class="op">not</span> isNormalVariable(maxIdx2) <span class="keywd">then</span>
      statement.expr &amp;:= maxIdx2Name;
      statement.expr &amp;:= <span class="stri">"=("</span>;
      process_expr(maxIdx2, statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> isNormalVariable(dest) <span class="keywd">then</span>
      resultName := <span class="stri">"("</span> &amp; c_param1.expr &amp; <span class="stri">")"</span>;
    <span class="keywd">else</span>
      statement.temp_decls &amp;:= <span class="stri">"arrayType *array_ptr=&amp;("</span>;
      statement.temp_decls &amp;:= c_param1.expr;
      statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
      resultName := <span class="stri">"(*array_ptr)"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    process_destr_declaration(arrayType, global_c_expr);
    process_destr_call(arrayType, resultName, statement.expr);
    statement.expr &amp;:= resultName;
    statement.expr &amp;:= <span class="stri">"=arrMalloc("</span>;
    statement.expr &amp;:= integerLiteral(minIdx1);
    statement.expr &amp;:= <span class="stri">", "</span>;
    statement.expr &amp;:= maxIdx1Name;
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> minIdx1 > 1 <span class="keywd">then</span>
      statement.expr &amp;:= maxIdx1Name;
      statement.expr &amp;:= <span class="stri">"-= "</span>;
      statement.expr &amp;:= integerLiteral(pred(minIdx1));
      statement.expr &amp;:= <span class="stri">";\n"</span>;
    <span class="keywd">elsif</span> minIdx1 &lt;= succ(integer.first) <span class="keywd">then</span>
      statement.expr &amp;:= maxIdx1Name;
      statement.expr &amp;:= <span class="stri">"-= "</span>;
      statement.expr &amp;:= integerLiteral(minIdx1);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= maxIdx1Name;
      statement.expr &amp;:= <span class="stri">"++;\n"</span>;
    <span class="keywd">elsif</span> minIdx1 &lt; 1 <span class="keywd">then</span>
      statement.expr &amp;:= maxIdx1Name;
      statement.expr &amp;:= <span class="stri">"+= "</span>;
      statement.expr &amp;:= integerLiteral(succ(-minIdx1));
      statement.expr &amp;:= <span class="stri">";\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    statement.expr &amp;:= <span class="stri">"while ("</span>;
    statement.expr &amp;:= maxIdx1Name;
    statement.expr &amp;:= <span class="stri">"!=0) {\n"</span>;
    statement.expr &amp;:= maxIdx1Name;
    statement.expr &amp;:= <span class="stri">"--;\n"</span>;
    statement.expr &amp;:= resultName;
    statement.expr &amp;:= <span class="stri">"->arr["</span>;
    statement.expr &amp;:= maxIdx1Name;
    statement.expr &amp;:= <span class="stri">"].value.arrayValue=arrTimes("</span>;
    statement.expr &amp;:= integerLiteral(minIdx2);
    statement.expr &amp;:= <span class="stri">", "</span>;
    statement.expr &amp;:= maxIdx2Name;
    statement.expr &amp;:= <span class="stri">", 0);\n"</span>;
    statement.expr &amp;:= <span class="stri">"}\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    arrayType := getExprResultType(params[1]);
    <span class="keywd">if</span> isActionExpression(params[3], <span class="stri">"ARR_CAT"</span>) <span class="op">and</span>
        getActionParameter(params[3], 1) = params[1] <span class="keywd">then</span>
      process_arr_append(params[1], getActionParameter(params[3], 3), c_expr);
    <span class="keywd">elsif</span> inlineFunctions <span class="op">and</span>
        isActionExpression(params[3], <span class="stri">"ARR_TIMES"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[3], 3), INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
      process_arr_cpy_times_optimization(params[1],
          getActionParameter(params[3], 1), c_expr);
    <span class="keywd">elsif</span> inlineFunctions <span class="op">and</span>
        getConstant(params[3], ARRAYOBJECT, evaluatedParam) <span class="op">and</span>
        isIntArrayOfZeros(evaluatedParam) <span class="keywd">then</span>
      process_arr_cpy_array_of_zeros(params[1],
          arrayMinIdx(evaluatedParam), arrayMaxIdx(evaluatedParam), c_expr);
<span class="comment">(*
    elsif inlineFunctions and isFixedMinIdxTimes(params[3]) and
        getConstant(getActionParameter(params[3], 3), INTOBJECT, evaluatedParam) and
        getValue(evaluatedParam, integer) = 0 then
      process_arr_cpy_times_optimization(params[1], array_minIdx[arrayType],
          getActionParameter(params[3], 1), c_expr);
*)</span>

    <span class="keywd">elsif</span> isFixedMinIdxTimes(params[3]) <span class="op">and</span>
        isFixedMinIdxTimes(getActionParameter(params[3], 3)) <span class="op">and</span>
        getConstant(getActionParameter(getActionParameter(params[3], 3), 3), INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
      two_dimensional_times_optimization(params[1],
          array_minIdx[arrayType], getActionParameter(params[3], 1),
          array_minIdx[getExprResultType(getActionParameter(params[3], 3))],
          getActionParameter(getActionParameter(params[3], 3), 1), c_expr);
    <span class="keywd">else</span>
      <span class="keywd">if</span> isFixedMinIdxTimes(params[3]) <span class="op">and</span>
          getConstant(getActionParameter(params[3], 3), INTOBJECT, evaluatedParam) <span class="op">and</span>
          getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
        writeln(<span class="stri">"process_arr_cpy_times_optimization "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp; <span class="stri">"): "</span> &lt;&amp; array_minIdx[arrayType]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> isFixedMinIdxTimes(params[3]) <span class="op">and</span>
          isFixedMinIdxTimes(getActionParameter(params[3], 3)) <span class="op">and</span>
          getConstant(getActionParameter(getActionParameter(params[3], 3), 3), INTOBJECT, evaluatedParam) <span class="op">and</span>
          getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
        writeln(<span class="stri">"two_dimensional_arr_cpy_times "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp; <span class="stri">"):"</span> &lt;&amp; array_minIdx[arrayType] &lt;&amp; <span class="stri">" "</span> &lt;&amp; array_minIdx[getExprResultType(getActionParameter(params[3], 3))]);
        <span class="comment"># getActionParameter(params[3], 1)</span>
	<span class="comment"># getActionParameter(getActionParameter(params[3], 3), 1)</span>
      <span class="keywd">end</span> <span class="keywd">if</span>;

      statement.temp_num := c_expr.temp_num;
      prepareAnyParamTemporarys(params[1], c_param1, statement);
      c_param3.demand := ASSIGN_RESULT;
      prepareAnyParamTemporarys(params[3], c_param3, statement);
      <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        statement.temp_decls &amp;:= <span class="stri">"arrayType new_array;\n"</span>;
        statement.expr &amp;:= <span class="stri">"new_array="</span>;
        statement.expr &amp;:= c_param3.result_expr;
        statement.expr &amp;:= <span class="stri">";\n"</span>;
        process_destr_declaration(arrayType, global_c_expr);
        <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
          process_destr_call(arrayType, c_param1.expr, statement.expr);
          statement.expr &amp;:= c_param1.expr;
          statement.expr &amp;:= <span class="stri">"=new_array;\n"</span>;
        <span class="keywd">else</span>
          statement.temp_decls &amp;:= <span class="stri">"arrayType *array_ptr=&amp;("</span>;
          statement.temp_decls &amp;:= c_param1.expr;
          statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
          process_destr_call(arrayType, <span class="stri">"*array_ptr"</span>, statement.expr);
          statement.expr &amp;:= <span class="stri">"*array_ptr=new_array;\n"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        process_cpy_declaration(arrayType, global_c_expr);
        process_cpy_call(arrayType, c_param1.expr, c_param3.expr,
            statement.expr);
        statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_CREATE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[3]);
    typeCategory @:= [param_type] ARRAYOBJECT;
    process_create_declaration(param_type, global_c_expr);
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"=create_"</span>;
    c_expr.expr &amp;:= str(typeNumber(param_type));
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_DESTR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[1]);
    process_destr_declaration(param_type, global_c_expr);
    c_expr.expr &amp;:= <span class="stri">"destr_"</span>;
    c_expr.expr &amp;:= str(typeNumber(param_type));
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_EXTEND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"arrExtend("</span>;
    getTemporaryToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", (genericType)("</span>;
    getGenericTemporaryToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_GEN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"arrGen((genericType)("</span>;
    getGenericTemporaryToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"), (genericType)("</span>;
    getGenericTemporaryToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_HEAD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[1]);
    prepare_typed_result(param_type, c_expr);
    prepareAnyParamTemporarys(params[1], c_param, c_expr);
    <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.temp_decls &amp;:= c_param.result_decl;
      c_expr.temp_frees &amp;:= c_param.result_free;
      c_expr.temp_to_null &amp;:= c_param.result_to_null;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= c_param.result_intro;
      c_expr.result_expr &amp;:= c_param.result_expr;
      c_expr.result_expr &amp;:= c_param.result_finish;
      c_expr.result_expr &amp;:= <span class="stri">", arrHeadTemp(&amp;("</span>;
      c_expr.result_expr &amp;:= c_param.result_name;
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      getStdParamToResultExpr(params[4], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">elsif</span> valueIsAtHeap(array_element[param_type]) <span class="keywd">then</span>
      incr(c_expr.temp_num);
      array_name := <span class="stri">"tmp_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"arrayType "</span>;
      c_expr.temp_decls &amp;:= array_name;
      c_expr.temp_decls &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.temp_frees &amp;:= <span class="stri">"if ("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">" != NULL) {arrFree("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">");}\n"</span>;
      c_expr.temp_to_null &amp;:= array_name;
      c_expr.temp_to_null &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= array_name;
      c_expr.result_expr &amp;:= <span class="stri">"=arrHead("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[4], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      typeCategory @:= [param_type] ARRAYOBJECT;
      process_create_declaration(param_type, global_c_expr);
      process_create_call(param_type, array_name, c_expr.result_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.result_expr := <span class="stri">"arrHead("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[4], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_arr_idx (<span class="op">in</span> <span class="type">reference</span>: function, <span class="op">in</span> <span class="type">reference</span>: anArray,
    <span class="op">in</span> <span class="type">reference</span>: index, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: index_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: indexRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: index_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> anArray <span class="op">not</span> <span class="op">in</span> const_table <span class="keywd">then</span>
      const_table @:= [anArray] length(const_table);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> getConstant(index, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      index_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> index_value &lt; arrayMinIdx(anArray) <span class="op">or</span> index_value > arrayMaxIdx(anArray) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        c_expr.expr &amp;:= type_name(resultType(getType(function)));
        c_expr.expr &amp;:= <span class="stri">")(raiseError(INDEX_ERROR), 0)"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"arr["</span>;
        c_expr.expr &amp;:= str(const_table[anArray]);
        c_expr.expr &amp;:= <span class="stri">"]->arr["</span>;
        c_expr.expr &amp;:= str(index_value - arrayMinIdx(anArray));
        c_expr.expr &amp;:= <span class="stri">"]"</span>;
        c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      indexRange := getIntRange(index);
      <span class="keywd">if</span> indexRange.maxValue &lt; arrayMinIdx(anArray) <span class="op">or</span>
          indexRange.minValue > arrayMaxIdx(anArray) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        c_expr.expr &amp;:= type_name(resultType(getType(function)));
        c_expr.expr &amp;:= <span class="stri">")(raiseError(INDEX_ERROR), 0)"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"arr["</span>;
        c_expr.expr &amp;:= str(const_table[anArray]);
        c_expr.expr &amp;:= <span class="stri">"]->arr["</span>;
        <span class="keywd">if</span> array_index_check <span class="keywd">then</span>
          <span class="keywd">if</span> indexRange.minValue &lt; arrayMinIdx(anArray) <span class="op">or</span>
              indexRange.maxValue > arrayMaxIdx(anArray) <span class="keywd">then</span>
            incr(countIndexChecks);
            incr(c_expr.temp_num);
            index_name := <span class="stri">"idx_"</span> &amp; str(c_expr.temp_num);
            <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
              c_expr.temp_decls &amp;:= <span class="stri">"uintType "</span>;
            <span class="keywd">else</span>
              c_expr.temp_decls &amp;:= <span class="stri">"intType "</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            c_expr.temp_decls &amp;:= index_name;
            c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
            c_expr.expr &amp;:= <span class="stri">"("</span>;
            c_expr.expr &amp;:= index_name;
            c_expr.expr &amp;:= <span class="stri">"=("</span>;
            process_expr(index, c_expr);
            c_expr.expr &amp;:= <span class="stri">")"</span>;
            <span class="keywd">if</span> arrayMinIdx(anArray) &lt;> 0 <span class="keywd">then</span>
              <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
                c_expr.expr &amp;:= <span class="stri">"- (uintType) "</span>;
              <span class="keywd">else</span>
                c_expr.expr &amp;:= <span class="stri">"- "</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              c_expr.expr &amp;:= integerLiteral(arrayMinIdx(anArray));
            <span class="keywd">end</span> <span class="keywd">if</span>;
            c_expr.expr &amp;:= <span class="stri">", idxChk("</span>;
            <span class="keywd">if</span> <span class="op">not</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">"&lt;0 || "</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            c_expr.expr &amp;:= index_name;
            c_expr.expr &amp;:= <span class="stri">">="</span>;
            c_expr.expr &amp;:= integerLiteral(arrayLength(anArray));
            c_expr.expr &amp;:= <span class="stri">") ? "</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">" : "</span>;
            c_expr.expr &amp;:= index_name;
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">else</span>
            countIndexOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"("</span>;
            process_expr(index, c_expr);
            c_expr.expr &amp;:= <span class="stri">")"</span>;
            <span class="keywd">if</span> arrayMinIdx(anArray) &lt;> 0 <span class="keywd">then</span>
              c_expr.expr &amp;:= <span class="stri">"- "</span>;
              c_expr.expr &amp;:= integerLiteral(arrayMinIdx(anArray));
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          incr(countSuppressedIndexChecks);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(index, c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">if</span> arrayMinIdx(anArray) &lt;> 0 <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"- "</span>;
            c_expr.expr &amp;:= integerLiteral(arrayMinIdx(anArray));
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"]"</span>;
        c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_arr_idx (<span class="op">in</span> <span class="type">reference</span>: function, <span class="op">in</span> <span class="type">reference</span>: param1,
    <span class="op">in</span> <span class="type">integer</span>: index, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">string</span>: result_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    prepareAnyParamTemporarys(param1, c_param, c_expr);
    <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      incr(c_expr.temp_num);
      result_name := <span class="stri">"help_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"rtlObjectType "</span>;
      c_expr.temp_decls &amp;:= result_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.temp_decls &amp;:= c_param.result_decl;
      c_expr.temp_frees &amp;:= c_param.result_free;
      c_expr.temp_to_null &amp;:= c_param.result_to_null;
      <span class="keywd">if</span> resultType(getType(function)) <span class="op">in</span> typeCategory <span class="op">and</span>
          typeCategory[resultType(getType(function))] <span class="op">in</span> destrNecessary <span class="keywd">then</span>
        prepare_typed_result(resultType(getType(function)), c_expr);
        c_expr.result_expr &amp;:= <span class="stri">"("</span>;
        c_expr.result_expr &amp;:= c_param.result_intro;
        c_expr.result_expr &amp;:= c_param.result_expr;
        c_expr.result_expr &amp;:= c_param.result_finish;
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        c_expr.result_expr &amp;:= result_name;
        c_expr.result_expr &amp;:= <span class="stri">".value.genericValue=arrIdxTemp(&amp;("</span>;
        c_expr.result_expr &amp;:= c_param.result_name;
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= integerLiteral(index);
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= result_name;
        c_expr.result_expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
        c_expr.result_expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        c_expr.expr &amp;:= c_param.result_intro;
        c_expr.expr &amp;:= c_param.result_expr;
        c_expr.expr &amp;:= c_param.result_finish;
        c_expr.expr &amp;:= <span class="stri">", "</span>;
        c_expr.expr &amp;:= result_name;
        c_expr.expr &amp;:= <span class="stri">".value.genericValue=arrIdxTemp(&amp;("</span>;
        c_expr.expr &amp;:= c_param.result_name;
        c_expr.expr &amp;:= <span class="stri">"), "</span>;
        c_expr.expr &amp;:= integerLiteral(index);
        c_expr.expr &amp;:= <span class="stri">"), "</span>;
        c_expr.expr &amp;:= result_name;
        c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(countOptimizations);
      <span class="keywd">if</span> isNormalVariable(param1) <span class="keywd">then</span>
        array_name := <span class="stri">"("</span> &amp; c_param.expr &amp; <span class="stri">")"</span>;
      <span class="keywd">else</span>
        incr(c_expr.temp_num);
        array_name := <span class="stri">"tmp_"</span> &amp; str(c_expr.temp_num);
        <span class="keywd">if</span> <span class="op">not</span> isVarfunc(getType(function)) <span class="keywd">then</span>
          c_expr.temp_decls &amp;:= <span class="stri">"const_"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.temp_decls &amp;:= <span class="stri">"arrayType "</span>;
        c_expr.temp_decls &amp;:= array_name;
        c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
        c_expr.expr &amp;:= <span class="stri">"(*("</span>;
        c_expr.expr &amp;:= array_name;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
        c_expr.expr &amp;:= c_param.expr;
        c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= array_name;
      c_expr.expr &amp;:= <span class="stri">"->arr["</span>;
      arrayType := getExprResultType(param1);
      <span class="keywd">if</span> array_index_check <span class="keywd">then</span>
        <span class="keywd">if</span> arrayType <span class="op">in</span> array_minIdx <span class="op">and</span> arrayType <span class="op">in</span> array_maxIdx <span class="keywd">then</span>
          <span class="keywd">if</span> index &lt; array_minIdx[arrayType] <span class="op">or</span>
              index > array_maxIdx[arrayType] <span class="keywd">then</span>
            warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
          <span class="keywd">else</span>
            countIndexOptimizations(c_expr);
            c_expr.expr &amp;:= integerLiteral(index - array_minIdx[arrayType]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> arrayType <span class="op">in</span> array_minIdx <span class="op">and</span> index &lt; array_minIdx[arrayType] <span class="keywd">then</span>
          warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
        <span class="keywd">else</span>
          incr(countIndexChecks);
          c_expr.expr &amp;:= <span class="stri">"(idxChk("</span>;
          <span class="keywd">if</span> arrayType <span class="op">not</span> <span class="op">in</span> array_minIdx <span class="keywd">then</span>
            c_expr.expr &amp;:= integerLiteral(index);
            c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
            c_expr.expr &amp;:= array_name;
            c_expr.expr &amp;:= <span class="stri">"->min_position || "</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= integerLiteral(index);
          c_expr.expr &amp;:= <span class="stri">">"</span>;
          c_expr.expr &amp;:= array_name;
          c_expr.expr &amp;:= <span class="stri">"->max_position) ? "</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">" : "</span>;
          <span class="keywd">if</span> arrayType <span class="op">in</span> array_minIdx <span class="keywd">then</span>
            c_expr.expr &amp;:= integerLiteral(index - array_minIdx[arrayType]);
          <span class="keywd">else</span>
            c_expr.expr &amp;:= integerLiteral(index);
            c_expr.expr &amp;:= <span class="stri">"-"</span>;
            c_expr.expr &amp;:= array_name;
            c_expr.expr &amp;:= <span class="stri">"->min_position"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        incr(countSuppressedIndexChecks);
        <span class="keywd">if</span> arrayType <span class="op">in</span> array_minIdx <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(index - array_minIdx[arrayType]);
        <span class="keywd">else</span>
          c_expr.expr &amp;:= integerLiteral(index);
          c_expr.expr &amp;:= <span class="stri">"-"</span>;
          c_expr.expr &amp;:= array_name;
          c_expr.expr &amp;:= <span class="stri">"->min_position"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"]"</span>;
      c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
      <span class="keywd">if</span> <span class="op">not</span> isNormalVariable(param1) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_fixlen_array_index (<span class="op">in</span> <span class="type">reference</span>: index,
    <span class="op">in</span> <span class="type">intRange</span>: indexRange, <span class="op">in</span> <span class="type">integer</span>: minIndex, <span class="op">in</span> <span class="type">integer</span>: maxIndex,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: index_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> indexRange.maxValue &lt; minIndex <span class="op">or</span>
        indexRange.minValue > maxIndex <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
    <span class="keywd">elsif</span> indexRange.minValue >= minIndex <span class="op">and</span>
        indexRange.maxValue &lt;= maxIndex <span class="keywd">then</span>
      countIndexOptimizations(c_expr);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(index, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">if</span> minIndex &lt;> 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"- "</span>;
        c_expr.expr &amp;:= integerLiteral(minIndex);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(countIndexChecks);
      <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        index_name := getTempVariable(<span class="stri">"uintType"</span>, <span class="stri">"idx_"</span>, <span class="stri">""</span>, c_expr);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">" = (uintType)("</span>;
        process_expr(index, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">if</span> minIndex &lt;> 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"-(uintType)"</span>;
          c_expr.expr &amp;:= integerLiteral(minIndex);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">",idxChk("</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">" >= (uintType)"</span>;
        c_expr.expr &amp;:= integerLiteral(succ(maxIndex - minIndex));
        c_expr.expr &amp;:= <span class="stri">") ? "</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">" : "</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        index_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"idx_"</span>, index, c_expr);
        c_expr.expr &amp;:= <span class="stri">"(idxChk("</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">" &lt; "</span>;
        c_expr.expr &amp;:= integerLiteral(minIndex);
        c_expr.expr &amp;:= <span class="stri">" || "</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">" > "</span>;
        c_expr.expr &amp;:= integerLiteral(maxIndex);
        c_expr.expr &amp;:= <span class="stri">") ? "</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">" : "</span>;
        c_expr.expr &amp;:= index_name;
        <span class="keywd">if</span> minIndex &lt;> 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"- "</span>;
          c_expr.expr &amp;:= integerLiteral(minIndex);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_base_array_index (<span class="op">in</span> <span class="type">string</span>: array_name,
    <span class="op">in</span> <span class="type">reference</span>: index, <span class="op">in</span> <span class="type">intRange</span>: indexRange, <span class="op">in</span> <span class="type">integer</span>: minIndex,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: index_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> indexRange.maxValue &lt; minIndex <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
    <span class="keywd">else</span>
      incr(countIndexChecks);
      index_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"idx_"</span>, index, c_expr);
      c_expr.expr &amp;:= <span class="stri">"(idxChk("</span>;
      <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="op">and</span>
          indexRange.minValue &lt; minIndex <span class="op">and</span>
          minIndex = 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"(uintType)"</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">" > (uintType)("</span>;
        c_expr.expr &amp;:= array_name;
        c_expr.expr &amp;:= <span class="stri">"->max_position)"</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> indexRange.minValue &lt; minIndex <span class="keywd">then</span>
          c_expr.expr &amp;:= index_name;
          c_expr.expr &amp;:= <span class="stri">" &lt; "</span>;
          c_expr.expr &amp;:= integerLiteral(minIndex);
          c_expr.expr &amp;:= <span class="stri">" || "</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">" > "</span>;
        c_expr.expr &amp;:= array_name;
        c_expr.expr &amp;:= <span class="stri">"->max_position"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">") ? "</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">" : "</span>;
      c_expr.expr &amp;:= index_name;
      <span class="keywd">if</span> minIndex &lt;> 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"- "</span>;
        c_expr.expr &amp;:= integerLiteral(minIndex);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_IDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">intRange</span>: indexRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: index_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: result_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getType(params[1]) <span class="op">not</span> <span class="op">in</span> array_element <span class="keywd">then</span>
      array_element @:= [getType(params[1])] resultType(getType(function));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> getConstant(params[1], ARRAYOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_arr_idx(function, evaluatedParam, params[3], c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_arr_idx(function, params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">else</span>
      prepareAnyParamTemporarys(params[1], c_param, c_expr);
      <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        incr(c_expr.temp_num);
        result_name := <span class="stri">"help_"</span> &amp; str(c_expr.temp_num);
        c_expr.temp_decls &amp;:= <span class="stri">"rtlObjectType "</span>;
        c_expr.temp_decls &amp;:= result_name;
        c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
        c_expr.temp_decls &amp;:= c_param.result_decl;
        c_expr.temp_frees &amp;:= c_param.result_free;
        c_expr.temp_to_null &amp;:= c_param.result_to_null;
        <span class="keywd">if</span> resultType(getType(function)) <span class="op">in</span> typeCategory <span class="op">and</span>
            typeCategory[resultType(getType(function))] <span class="op">in</span> destrNecessary <span class="keywd">then</span>
          prepare_typed_result(resultType(getType(function)), c_expr);
          c_expr.result_expr &amp;:= <span class="stri">"("</span>;
          c_expr.result_expr &amp;:= c_param.result_intro;
          c_expr.result_expr &amp;:= c_param.result_expr;
          c_expr.result_expr &amp;:= c_param.result_finish;
          c_expr.result_expr &amp;:= <span class="stri">", "</span>;
          c_expr.result_expr &amp;:= result_name;
          c_expr.result_expr &amp;:= <span class="stri">".value.genericValue=arrIdxTemp(&amp;("</span>;
          c_expr.result_expr &amp;:= c_param.result_name;
          c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
          getAnyParamToResultExpr(params[3], c_expr);
          c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
          c_expr.result_expr &amp;:= result_name;
          c_expr.result_expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
          c_expr.result_expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          c_expr.expr &amp;:= c_param.result_intro;
          c_expr.expr &amp;:= c_param.result_expr;
          c_expr.expr &amp;:= c_param.result_finish;
          c_expr.expr &amp;:= <span class="stri">", "</span>;
          c_expr.expr &amp;:= result_name;
          c_expr.expr &amp;:= <span class="stri">".value.genericValue=arrIdxTemp(&amp;("</span>;
          c_expr.expr &amp;:= c_param.result_name;
          c_expr.expr &amp;:= <span class="stri">"), "</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">"), "</span>;
          c_expr.expr &amp;:= result_name;
          c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
          array_name := <span class="stri">"("</span> &amp; c_param.expr &amp; <span class="stri">")"</span>;
        <span class="keywd">else</span>
          incr(c_expr.temp_num);
          array_name := <span class="stri">"tmp_"</span> &amp; str(c_expr.temp_num);
          <span class="keywd">if</span> <span class="op">not</span> isVarfunc(getType(function)) <span class="keywd">then</span>
            c_expr.temp_decls &amp;:= <span class="stri">"const_"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.temp_decls &amp;:= <span class="stri">"arrayType "</span>;
          c_expr.temp_decls &amp;:= array_name;
          c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
          c_expr.expr &amp;:= <span class="stri">"(*("</span>;
          c_expr.expr &amp;:= array_name;
          c_expr.expr &amp;:= <span class="stri">"="</span>;
          c_expr.expr &amp;:= c_param.expr;
          c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= array_name;
        c_expr.expr &amp;:= <span class="stri">"->arr["</span>;
        arrayType := getExprResultType(params[1]);
        <span class="keywd">if</span> array_index_check <span class="keywd">then</span>
          indexRange := getIntRange(params[3]);
          <span class="keywd">if</span> arrayType <span class="op">in</span> array_minIdx <span class="op">and</span> arrayType <span class="op">in</span> array_maxIdx <span class="keywd">then</span>
            process_fixlen_array_index(params[3], indexRange,
                array_minIdx[arrayType], array_maxIdx[arrayType], c_expr);
          <span class="keywd">elsif</span> arrayType <span class="op">in</span> array_minIdx <span class="keywd">then</span>
            process_base_array_index(array_name, params[3], indexRange,
                array_minIdx[arrayType], c_expr);
          <span class="keywd">else</span>
            incr(countIndexChecks);
            <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
              index_name := getTempVariable(<span class="stri">"uintType"</span>, <span class="stri">"idx_"</span>, <span class="stri">""</span>, c_expr);
              c_expr.expr &amp;:= <span class="stri">"("</span>;
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">" = (uintType)("</span>;
              process_expr(params[3], c_expr);
              c_expr.expr &amp;:= <span class="stri">")-(uintType)("</span>;
              c_expr.expr &amp;:= array_name;
              c_expr.expr &amp;:= <span class="stri">"->min_position),idxChk("</span>;
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">" >= (uintType)("</span>;
              c_expr.expr &amp;:= array_name;
              c_expr.expr &amp;:= <span class="stri">"->max_position) - (uintType)("</span>;
              c_expr.expr &amp;:= array_name;
              c_expr.expr &amp;:= <span class="stri">"->min_position) + (uintType)1) ? "</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">" : "</span>;
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">")"</span>;
            <span class="keywd">else</span>
              index_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"idx_"</span>, params[3], c_expr);
              c_expr.expr &amp;:= <span class="stri">"(idxChk("</span>;
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">" &lt; "</span>;
              c_expr.expr &amp;:= array_name;
              c_expr.expr &amp;:= <span class="stri">"->min_position || "</span>;
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">" > "</span>;
              c_expr.expr &amp;:= array_name;
              c_expr.expr &amp;:= <span class="stri">"->max_position) ? "</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">" : "</span>;
              c_expr.expr &amp;:= index_name;
              c_expr.expr &amp;:= <span class="stri">"-"</span>;
              c_expr.expr &amp;:= array_name;
              c_expr.expr &amp;:= <span class="stri">"->min_position)"</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          incr(countSuppressedIndexChecks);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")- "</span>;
          <span class="keywd">if</span> arrayType <span class="op">in</span> array_minIdx <span class="keywd">then</span>
            c_expr.expr &amp;:= integerLiteral(array_minIdx[arrayType]);
          <span class="keywd">else</span>
            c_expr.expr &amp;:= array_name;
            c_expr.expr &amp;:= <span class="stri">"->min_position"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"]"</span>;
        c_expr.expr &amp;:= select_value_from_rtlObjectStruct(resultType(getType(function)));
        <span class="keywd">if</span> <span class="op">not</span> isNormalVariable(params[1]) <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"))"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_INSERT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: array_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: element_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: position_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    array_type := getExprResultType(params[1]);
    element_type := getExprResultType(params[3]);
    <span class="keywd">if</span> array_type <span class="op">not</span> <span class="op">in</span> array_element <span class="keywd">then</span>
      array_element @:= [array_type] element_type;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> valueIsAtHeap(element_type) <span class="keywd">then</span>
      <span class="keywd">if</span> array_index_check <span class="keywd">then</span>
        incr(countIndexChecks);
        incr(statement.temp_num);
        <span class="keywd">if</span> getConstant(params[2], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
          position_name := integerLiteral(getValue(evaluatedParam, integer));
        <span class="keywd">else</span>
          position_name := <span class="stri">"pos_"</span> &amp; str(statement.temp_num);
          statement.temp_decls &amp;:= <span class="stri">"intType "</span>;
          statement.temp_decls &amp;:= position_name;
          statement.temp_decls &amp;:= <span class="stri">";"</span>;
          statement.expr &amp;:= position_name;
          statement.expr &amp;:= <span class="stri">" = "</span>;
          process_expr(params[2], statement);
          statement.expr &amp;:= <span class="stri">";\n"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        array_name := getParameterAsReference(type_name(array_type),
                                              <span class="stri">"arr_"</span>, params[1], statement);
        statement.expr &amp;:= <span class="stri">"if (idxChk("</span>;
        statement.expr &amp;:= position_name;
        statement.expr &amp;:= <span class="stri">" &lt; "</span>;
        statement.expr &amp;:= array_name;
        statement.expr &amp;:= <span class="stri">"->min_position || "</span>;
        statement.expr &amp;:= position_name;
        statement.expr &amp;:= <span class="stri">" > "</span>;
        statement.expr &amp;:= array_name;
        statement.expr &amp;:= <span class="stri">"->max_position + 1)) {\n"</span>;
        statement.expr &amp;:= raiseError(<span class="stri">"INDEX_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
        statement.expr &amp;:= <span class="stri">"arrInsert(&amp;("</span>;
        statement.expr &amp;:= array_name;
        statement.expr &amp;:= <span class="stri">"), "</span>;
        statement.expr &amp;:= position_name;
        statement.expr &amp;:= <span class="stri">", (genericType)("</span>;
        getCreatedValueAsGeneric(params[3], statement);
        statement.expr &amp;:= <span class="stri">"));\n"</span>;
        statement.expr &amp;:= <span class="stri">"}\n"</span>;
        doLocalDeclsOfStatement(statement, c_expr);
      <span class="keywd">else</span>
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"arrInsert(&amp;("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">"), "</span>;
        process_expr(params[2], c_expr);
        c_expr.expr &amp;:= <span class="stri">", (genericType)("</span>;
        getCreatedValueAsGeneric(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"arrInsert(&amp;("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">"), "</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getGenericValue(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_INSERT_ARRAY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param3_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    param3_type := getExprResultType(params[3]);
    <span class="keywd">if</span> valueIsAtHeap(array_element[param3_type]) <span class="keywd">then</span>
      statement.expr &amp;:= <span class="stri">"arrInsertArrayTemp(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      process_expr(params[2], statement);
      statement.expr &amp;:= <span class="stri">", "</span>;
      getTemporaryToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"arrInsertArray(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      process_expr(params[2], statement);
      statement.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_LNG, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], ARRAYOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= str(arrayMaxIdx(evaluatedParam) - arrayMinIdx(evaluatedParam) + 1);
      <span class="keywd">if</span> evaluatedParam <span class="op">in</span> const_table <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">" /* length(arr["</span>;
        c_expr.expr &amp;:= str(const_table[evaluatedParam]);
        c_expr.expr &amp;:= <span class="stri">"]) */"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">" /* length(array) */"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      array_name := getParameterAsVariable(<span class="stri">"const_arrayType"</span>, <span class="stri">"tmp_"</span>, params[1], c_expr);
      c_expr.expr &amp;:= array_name;
      c_expr.expr &amp;:= <span class="stri">"->max_position - "</span>;
      c_expr.expr &amp;:= array_name;
      c_expr.expr &amp;:= <span class="stri">"->min_position + 1)"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_MAXIDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], ARRAYOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= str(arrayMaxIdx(evaluatedParam));
      <span class="keywd">if</span> evaluatedParam <span class="op">in</span> const_table <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">" /* maxIdx(arr["</span>;
        c_expr.expr &amp;:= str(const_table[evaluatedParam]);
        c_expr.expr &amp;:= <span class="stri">"]) */"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">" /* maxIdx(array) */"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")->max_position"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_MINIDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], ARRAYOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= str(arrayMinIdx(evaluatedParam));
      <span class="keywd">if</span> evaluatedParam <span class="op">in</span> const_table <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">" /* minIdx(arr["</span>;
        c_expr.expr &amp;:= str(const_table[evaluatedParam]);
        c_expr.expr &amp;:= <span class="stri">"]) */"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">" /* minIdx(array) */"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")->min_position"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_PUSH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getType(params[1]) <span class="op">not</span> <span class="op">in</span> array_element <span class="keywd">then</span>
      array_element @:= [getType(params[1])] getType(params[3]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    process_expr(params[1], c_param1);
    c_param3.temp_num := c_param1.temp_num;
    getGenericTemporaryToResultExpr(params[3], c_param3);
    incr(c_param3.temp_num);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"arrPush(&amp;("</span>;
    c_expr.expr &amp;:= c_param1.expr;
    c_expr.expr &amp;:= <span class="stri">"), (genericType)("</span>;
    c_expr.expr &amp;:= c_param3.result_expr;
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_RANGE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[1]);
    prepare_typed_result(param_type, c_expr);
    prepareAnyParamTemporarys(params[1], c_param, c_expr);
    <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.temp_decls &amp;:= c_param.result_decl;
      c_expr.temp_frees &amp;:= c_param.result_free;
      c_expr.temp_to_null &amp;:= c_param.result_to_null;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= c_param.result_intro;
      c_expr.result_expr &amp;:= c_param.result_expr;
      c_expr.result_expr &amp;:= c_param.result_finish;
      c_expr.result_expr &amp;:= <span class="stri">", arrRangeTemp(&amp;("</span>;
      c_expr.result_expr &amp;:= c_param.result_name;
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[5], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">elsif</span> valueIsAtHeap(array_element[param_type]) <span class="keywd">then</span>
      incr(c_expr.temp_num);
      array_name := <span class="stri">"tmp_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"arrayType "</span>;
      c_expr.temp_decls &amp;:= array_name;
      c_expr.temp_decls &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.temp_frees &amp;:= <span class="stri">"if ("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">" != NULL) {arrFree("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">");}\n"</span>;
      c_expr.temp_to_null &amp;:= array_name;
      c_expr.temp_to_null &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= array_name;
      c_expr.result_expr &amp;:= <span class="stri">"=arrRange("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[5], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      typeCategory @:= [param_type] ARRAYOBJECT;
      process_create_declaration(param_type, global_c_expr);
      process_create_call(param_type, array_name, c_expr.result_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.result_expr := <span class="stri">"arrRange("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[5], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_REMOVE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: proc_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">string</span>: temp_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    proc_type := getType(function);
    result_type := resultType(proc_type);
    <span class="keywd">if</span> valueIsAtHeap(result_type) <span class="keywd">then</span>
      prepare_typed_result(result_type, c_expr);
      temp_name := beginCastGenericToResultExpr(result_type, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"arrRemove(&amp;("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      getStdParamToResultExpr(params[2], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
      endCastGenericToResultExpr(result_type, temp_name, c_expr);
    <span class="keywd">else</span>
      temp_name := beginCastGeneric(result_type, c_expr);
      c_expr.expr &amp;:= <span class="stri">"arrRemove(&amp;("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">"), "</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
      endCastGeneric(result_type, temp_name, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_REMOVE_ARRAY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[1]);
    prepare_typed_result(param_type, c_expr);
    c_expr.result_expr := <span class="stri">"arrRemoveArray(&amp;("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_SORT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declare_func_pointer_if_necessary(params[2], global_c_expr);
    prepare_typed_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"arrSort("</span>;
    getTemporaryToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", (compareType)("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_SORT_REVERSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declare_func_pointer_if_necessary(params[2], global_c_expr);
    prepare_typed_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"arrSortReverse("</span>;
    getTemporaryToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", (compareType)("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_SUBARR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[1]);
    prepare_typed_result(param_type, c_expr);
    prepareAnyParamTemporarys(params[1], c_param, c_expr);
    <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.temp_decls &amp;:= c_param.result_decl;
      c_expr.temp_frees &amp;:= c_param.result_free;
      c_expr.temp_to_null &amp;:= c_param.result_to_null;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= c_param.result_intro;
      c_expr.result_expr &amp;:= c_param.result_expr;
      c_expr.result_expr &amp;:= c_param.result_finish;
      c_expr.result_expr &amp;:= <span class="stri">", arrSubarrTemp(&amp;("</span>;
      c_expr.result_expr &amp;:= c_param.result_name;
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[5], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">elsif</span> valueIsAtHeap(array_element[param_type]) <span class="keywd">then</span>
      incr(c_expr.temp_num);
      array_name := <span class="stri">"tmp_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"arrayType "</span>;
      c_expr.temp_decls &amp;:= array_name;
      c_expr.temp_decls &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.temp_frees &amp;:= <span class="stri">"if ("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">" != NULL) {arrFree("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">");}\n"</span>;
      c_expr.temp_to_null &amp;:= array_name;
      c_expr.temp_to_null &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= array_name;
      c_expr.result_expr &amp;:= <span class="stri">"=arrSubarr("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[5], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      typeCategory @:= [param_type] ARRAYOBJECT;
      process_create_declaration(param_type, global_c_expr);
      process_create_call(param_type, array_name, c_expr.result_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.result_expr := <span class="stri">"arrSubarr("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[5], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_TAIL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: param_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: array_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    param_type := getExprResultType(params[1]);
    prepare_typed_result(param_type, c_expr);
    prepareAnyParamTemporarys(params[1], c_param, c_expr);
    <span class="keywd">if</span> c_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.temp_decls &amp;:= c_param.result_decl;
      c_expr.temp_frees &amp;:= c_param.result_free;
      c_expr.temp_to_null &amp;:= c_param.result_to_null;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= c_param.result_intro;
      c_expr.result_expr &amp;:= c_param.result_expr;
      c_expr.result_expr &amp;:= c_param.result_finish;
      c_expr.result_expr &amp;:= <span class="stri">", arrTailTemp(&amp;("</span>;
      c_expr.result_expr &amp;:= c_param.result_name;
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">elsif</span> valueIsAtHeap(array_element[param_type]) <span class="keywd">then</span>
      incr(c_expr.temp_num);
      array_name := <span class="stri">"tmp_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"arrayType "</span>;
      c_expr.temp_decls &amp;:= array_name;
      c_expr.temp_decls &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.temp_frees &amp;:= <span class="stri">"if ("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">" != NULL) {arrFree("</span>;
      c_expr.temp_frees &amp;:= array_name;
      c_expr.temp_frees &amp;:= <span class="stri">");}\n"</span>;
      c_expr.temp_to_null &amp;:= array_name;
      c_expr.temp_to_null &amp;:= <span class="stri">"=NULL;\n"</span>;
      c_expr.result_expr := <span class="stri">"("</span>;
      c_expr.result_expr &amp;:= array_name;
      c_expr.result_expr &amp;:= <span class="stri">"=arrTail("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      typeCategory @:= [param_type] ARRAYOBJECT;
      process_create_declaration(param_type, global_c_expr);
      process_create_call(param_type, array_name, c_expr.result_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.result_expr := <span class="stri">"arrTail("</span>;
      c_expr.result_expr &amp;:= c_param.expr;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: two_dimensional_times_optimization (<span class="op">in</span> <span class="type">type</span>: result_type,
    <span class="op">in</span> <span class="type">reference</span>: factor1, <span class="op">in</span> <span class="type">reference</span>: factor2, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: factor1Name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: factor2Name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: resultName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    prepare_typed_result(result_type, c_expr);
    c_expr.result_expr := <span class="stri">"({"</span>;
    factor1Name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"factor1_"</span>, c_expr);
    factor2Name := getParameterInResultStatement(<span class="stri">"intType"</span>,
        <span class="stri">"factor2_"</span>, factor2, c_expr);
    resultName := defineTempVariable(<span class="stri">"arrayType"</span>, <span class="stri">"times_res_"</span>, c_expr);
    c_expr.result_expr &amp;:= factor1Name;
    c_expr.result_expr &amp;:= <span class="stri">"=("</span>;
    getStdParamToResultExpr(factor1, c_expr);
    c_expr.result_expr &amp;:= <span class="stri">");\n"</span>;
    c_expr.result_expr &amp;:= resultName;
    c_expr.result_expr &amp;:= <span class="stri">"=arrMalloc(1, "</span>;
    c_expr.result_expr &amp;:= factor1Name;
    c_expr.result_expr &amp;:= <span class="stri">");\n"</span>;
    c_expr.result_expr &amp;:= <span class="stri">"while ("</span>;
    c_expr.result_expr &amp;:= factor1Name;
    c_expr.result_expr &amp;:= <span class="stri">"!=0) {\n"</span>;
    c_expr.result_expr &amp;:= factor1Name;
    c_expr.result_expr &amp;:= <span class="stri">"--;\n"</span>;
    c_expr.result_expr &amp;:= resultName;
    c_expr.result_expr &amp;:= <span class="stri">"->arr["</span>;
    c_expr.result_expr &amp;:= factor1Name;
    c_expr.result_expr &amp;:= <span class="stri">"].value.arrayValue=arrTimes(1, "</span>;
    c_expr.result_expr &amp;:= factor2Name;
    c_expr.result_expr &amp;:= <span class="stri">", 0);\n"</span>;
    c_expr.result_expr &amp;:= <span class="stri">"}\n"</span>;
    c_expr.result_expr &amp;:= resultName;
    c_expr.result_expr &amp;:= <span class="stri">";})"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ARR_TIMES, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">type</span>: result_type <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: element_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    result_type := resultType(getType(function));
    typeCategory @:= [result_type] ARRAYOBJECT;
    <span class="keywd">if</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_typed_result(result_type, c_expr);
      c_expr.result_expr := <span class="stri">"arrMalloc(1, 0)"</span>;
    <span class="keywd">elsif</span> inlineFunctions <span class="op">and</span> ccConf.STMT_BLOCK_IN_PARENTHESES_OK <span class="op">and</span>
        isActionExpression(params[3], <span class="stri">"ARR_TIMES"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[3], 3), INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
      two_dimensional_times_optimization(result_type, params[1],
          getActionParameter(params[3], 1), c_expr);
    <span class="keywd">else</span>
      element_type := getType(formalParams(function)[3]);
      <span class="keywd">if</span> element_type <span class="op">in</span> typeCategory <span class="op">and</span>
          typeCategory[element_type] <span class="op">in</span> simpleValueType <span class="keywd">then</span>
        incr(countOptimizations);
        prepare_typed_result(result_type, c_expr);
        c_expr.result_expr := <span class="stri">"arrTimes(1, "</span>;
        getStdParamToResultExpr(params[1], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        getGenericValueToResultExpr(params[3], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        declare_times_prototype(result_type, global_c_expr);
        prepare_typed_result(result_type, c_expr);
        c_expr.result_expr := <span class="stri">"times_"</span>;
        c_expr.result_expr &amp;:= str(typeNumber(result_type));
        c_expr.result_expr &amp;:= <span class="stri">"("</span>;
        getStdParamToResultExpr(params[1], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        getAnyParamToResultExpr(params[3], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
