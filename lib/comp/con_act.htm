<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  con_act.s7i   Generate code for actions of text console output. *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: CON_CLEAR   <span class="keywd">is</span> action <span class="stri">"CON_CLEAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_COLUMN  <span class="keywd">is</span> action <span class="stri">"CON_COLUMN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_CURSOR  <span class="keywd">is</span> action <span class="stri">"CON_CURSOR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_FLUSH   <span class="keywd">is</span> action <span class="stri">"CON_FLUSH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_HEIGHT  <span class="keywd">is</span> action <span class="stri">"CON_HEIGHT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_H_SCL   <span class="keywd">is</span> action <span class="stri">"CON_H_SCL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_LINE    <span class="keywd">is</span> action <span class="stri">"CON_LINE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_OPEN    <span class="keywd">is</span> action <span class="stri">"CON_OPEN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_SETPOS  <span class="keywd">is</span> action <span class="stri">"CON_SETPOS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_V_SCL   <span class="keywd">is</span> action <span class="stri">"CON_V_SCL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_WIDTH   <span class="keywd">is</span> action <span class="stri">"CON_WIDTH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CON_WRITE   <span class="keywd">is</span> action <span class="stri">"CON_WRITE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: con_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        conClear (intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     conColumn (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conCursor (boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conFlush (void);"</span>);
    declareExtern(c_prog, <span class="stri">"int         conHeight (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conHScroll (intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     conLine (void);"</span>);
    declareExtern(c_prog, <span class="stri">"int         conOpen (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conSetpos (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conShut (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conVScroll (intType, intType, intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"int         conWidth (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        conWrite (const_striType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_CLEAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conClear("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_COLUMN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"conColumn()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_CURSOR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conCursor("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_FLUSH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conFlush();\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_HEIGHT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType) conHeight()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_H_SCL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"conHScroll("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_LINE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"conLine()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_OPEN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conOpen();\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_SETPOS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conSetpos("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_V_SCL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conVScroll("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_WIDTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType) conWidth()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CON_WRITE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"conWrite("</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
