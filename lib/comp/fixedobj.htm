<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">
<span class="keywd">const</span> <span class="type">type</span>: fixedArrayHash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">reference</span><span class="type">]</span> <span class="type">reference</span>;

<span class="keywd">var</span> <span class="type">fixedArrayHash</span>: fixedArray <span class="keywd">is</span> fixedArrayHash.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: changesArraySize (<span class="op">in</span> <span class="type">reference</span>: result_object,
    <span class="op">in</span> <span class="type">reference</span>: current_expression) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: changesArraySize <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">string</span>: doesNotChangeArraySize <span class="keywd">is</span>
        {<span class="stri">"ARR_IDX"</span>, <span class="stri">"ARR_CAT"</span>};
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">string</span>: mayChangeArraySize <span class="keywd">is</span>
        {<span class="stri">"ARR_CPY"</span>, <span class="stri">"ARR_APPEND"</span>, <span class="stri">"ARR_PUSH"</span>, <span class="stri">"ARR_INSERT"</span>, <span class="stri">"ARR_INSERT_ARRAY"</span>,
         <span class="stri">"ARR_REMOVE"</span>, <span class="stri">"ARR_REMOVE_ARRAY"</span>};
    <span class="keywd">var</span> <span class="type">category</span>: exprCategory <span class="keywd">is</span> category.value;
    <span class="keywd">var</span> <span class="type">ref_list</span>: params <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">reference</span>: currentFunction <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: actionName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: paramNum <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    exprCategory := category(current_expression);
    <span class="keywd">if</span> exprCategory = MATCHOBJECT <span class="op">or</span> exprCategory = CALLOBJECT <span class="keywd">then</span>
      params := getValue(current_expression, ref_list);
      currentFunction := params[1];
      <span class="keywd">if</span> category(currentFunction) = ACTOBJECT <span class="keywd">then</span>
        actionName := str(getValue(currentFunction, ACTION));
        <span class="comment"># writeln(actionName);</span>
      <span class="keywd">end</span> <span class="keywd">if</span>;
      paramNum := 2;
      <span class="keywd">while</span> paramNum &lt;= length(params) <span class="op">and</span> <span class="op">not</span> changesArraySize <span class="keywd">do</span>
        <span class="keywd">if</span> params[paramNum] = result_object <span class="keywd">then</span>
          <span class="keywd">if</span> actionName <span class="op">in</span> mayChangeArraySize <span class="op">and</span> paramNum = 2 <span class="keywd">then</span>
            <span class="comment"># writeln("may change size: " &lt;&amp; actionName);</span>
            changesArraySize := TRUE;
          <span class="keywd">elsif</span> actionName <span class="op">in</span> doesNotChangeArraySize <span class="keywd">then</span>
            <span class="comment"># writeln("skip " &lt;&amp; actionName);</span>
            noop;
          <span class="keywd">else</span>
            <span class="comment"># writeln("usage " &lt;&amp; actionName);</span>
            changesArraySize := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> changesArraySize <span class="keywd">then</span>
          changesArraySize := changesArraySize(result_object, params[paramNum]);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        incr(paramNum);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkIfArraySizeCanChange (<span class="op">in</span> <span class="type">reference</span>: result_object,
    <span class="op">in</span> <span class="keywd">var</span> <span class="type">reference</span>: result_init, <span class="op">in</span> <span class="type">reference</span>: current_expression) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedExpr <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> <span class="op">not</span> changesArraySize(result_object, current_expression) <span class="keywd">then</span>
      writeln(<span class="stri">" ***** No changes of array size"</span>);
      <span class="keywd">if</span> isConstant(result_init) <span class="keywd">then</span>
        <span class="keywd">block</span>
          evaluatedExpr := evaluate(prog, result_init);
          <span class="keywd">if</span> evaluatedExpr &lt;> NIL <span class="keywd">then</span>
            incr(countEvaluations);
            result_init := evaluatedExpr;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        exception
          catch NUMERIC_ERROR:  noop;
          catch OVERFLOW_ERROR: noop;
          catch RANGE_ERROR:    noop;
          catch INDEX_ERROR:    noop;
          catch FILE_ERROR:     noop;
          catch DATABASE_ERROR: noop;
        <span class="keywd">end</span> <span class="keywd">block</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      fixedArray @:= [result_object] result_init;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
