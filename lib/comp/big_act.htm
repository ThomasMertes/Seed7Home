<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  big_act.s7i   Generate code for actions of the type bigInteger. *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2015, 2017  Thomas Mertes     *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ABS             <span class="keywd">is</span> action <span class="stri">"BIG_ABS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ADD             <span class="keywd">is</span> action <span class="stri">"BIG_ADD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ADD_ASSIGN      <span class="keywd">is</span> action <span class="stri">"BIG_ADD_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_BIT_LENGTH      <span class="keywd">is</span> action <span class="stri">"BIG_BIT_LENGTH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_CMP             <span class="keywd">is</span> action <span class="stri">"BIG_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_CONV            <span class="keywd">is</span> action <span class="stri">"BIG_CONV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_CPY             <span class="keywd">is</span> action <span class="stri">"BIG_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_DECR            <span class="keywd">is</span> action <span class="stri">"BIG_DECR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_DIV             <span class="keywd">is</span> action <span class="stri">"BIG_DIV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_DIV_REM         <span class="keywd">is</span> action <span class="stri">"BIG_DIV_REM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_EQ              <span class="keywd">is</span> action <span class="stri">"BIG_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_FROM_BSTRI_BE   <span class="keywd">is</span> action <span class="stri">"BIG_FROM_BSTRI_BE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_FROM_BSTRI_LE   <span class="keywd">is</span> action <span class="stri">"BIG_FROM_BSTRI_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_GCD             <span class="keywd">is</span> action <span class="stri">"BIG_GCD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_GE              <span class="keywd">is</span> action <span class="stri">"BIG_GE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_GT              <span class="keywd">is</span> action <span class="stri">"BIG_GT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_HASHCODE        <span class="keywd">is</span> action <span class="stri">"BIG_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ICONV1          <span class="keywd">is</span> action <span class="stri">"BIG_ICONV1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ICONV3          <span class="keywd">is</span> action <span class="stri">"BIG_ICONV3"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_INCR            <span class="keywd">is</span> action <span class="stri">"BIG_INCR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_IPOW            <span class="keywd">is</span> action <span class="stri">"BIG_IPOW"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LE              <span class="keywd">is</span> action <span class="stri">"BIG_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LOG10           <span class="keywd">is</span> action <span class="stri">"BIG_LOG10"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LOG2            <span class="keywd">is</span> action <span class="stri">"BIG_LOG2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LOWEST_SET_BIT  <span class="keywd">is</span> action <span class="stri">"BIG_LOWEST_SET_BIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LSHIFT          <span class="keywd">is</span> action <span class="stri">"BIG_LSHIFT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LSHIFT_ASSIGN   <span class="keywd">is</span> action <span class="stri">"BIG_LSHIFT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_LT              <span class="keywd">is</span> action <span class="stri">"BIG_LT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_MDIV            <span class="keywd">is</span> action <span class="stri">"BIG_MDIV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_MOD             <span class="keywd">is</span> action <span class="stri">"BIG_MOD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_MULT            <span class="keywd">is</span> action <span class="stri">"BIG_MULT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_MULT_ASSIGN     <span class="keywd">is</span> action <span class="stri">"BIG_MULT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_NE              <span class="keywd">is</span> action <span class="stri">"BIG_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_NEGATE          <span class="keywd">is</span> action <span class="stri">"BIG_NEGATE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ODD             <span class="keywd">is</span> action <span class="stri">"BIG_ODD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_ORD             <span class="keywd">is</span> action <span class="stri">"BIG_ORD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_PARSE1          <span class="keywd">is</span> action <span class="stri">"BIG_PARSE1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_PARSE_BASED     <span class="keywd">is</span> action <span class="stri">"BIG_PARSE_BASED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_PLUS            <span class="keywd">is</span> action <span class="stri">"BIG_PLUS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_PRED            <span class="keywd">is</span> action <span class="stri">"BIG_PRED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_radix           <span class="keywd">is</span> action <span class="stri">"BIG_radix"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_RADIX           <span class="keywd">is</span> action <span class="stri">"BIG_RADIX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_RAND            <span class="keywd">is</span> action <span class="stri">"BIG_RAND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_REM             <span class="keywd">is</span> action <span class="stri">"BIG_REM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_RSHIFT          <span class="keywd">is</span> action <span class="stri">"BIG_RSHIFT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_RSHIFT_ASSIGN   <span class="keywd">is</span> action <span class="stri">"BIG_RSHIFT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_SBTR            <span class="keywd">is</span> action <span class="stri">"BIG_SBTR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_SBTR_ASSIGN     <span class="keywd">is</span> action <span class="stri">"BIG_SBTR_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_STR             <span class="keywd">is</span> action <span class="stri">"BIG_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_SUCC            <span class="keywd">is</span> action <span class="stri">"BIG_SUCC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_TO_BSTRI_BE     <span class="keywd">is</span> action <span class="stri">"BIG_TO_BSTRI_BE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_TO_BSTRI_LE     <span class="keywd">is</span> action <span class="stri">"BIG_TO_BSTRI_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIG_VALUE           <span class="keywd">is</span> action <span class="stri">"BIG_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: big_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"bigIntType  bigAbs (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigAbsTemp (bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigAdd (const_bigIntType, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigAddAssign (bigIntType *const, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigAddAssignSignedDigit (bigIntType *const, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigAddTemp (bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigAnd (const_bigIntType, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bigBitLength (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bigCmp (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bigCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bigCmpSignedDigit (const const_bigIntType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigCpy (bigIntType *const, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigCreate (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType bigCreateGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigDecr (bigIntType *const);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigDestr (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigDestrGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigDiv (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigDivRem (const const_bigIntType, const const_bigIntType, bigIntType *);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    bigEq (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    bigEqSignedDigit (const const_bigIntType, intType);"</span>);
    <span class="keywd">if</span> ccConf.INTTYPE_SIZE = 64 <span class="keywd">then</span>
      declareExtern(c_prog, <span class="stri">"bigIntType  bigFromInt64 (intType);"</span>);
      writeln(c_prog, <span class="stri">"#define     bigIConv bigFromInt64"</span>);
    <span class="keywd">elsif</span> ccConf.INTTYPE_SIZE = 32 <span class="keywd">then</span>
      declareExtern(c_prog, <span class="stri">"bigIntType  bigFromInt32 (intType);"</span>);
      writeln(c_prog, <span class="stri">"#define     bigIConv bigFromInt32"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    declareExtern(c_prog, <span class="stri">"bigIntType  bigFromBStriBe (const const_bstriType, const boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigFromBStriLe (const const_bstriType, const boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigFromUInt64 (uint64Type);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigGcd (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bigHashCode (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"char       *bigHexCStri (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigIncr (bigIntType *const);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigIPow (const const_bigIntType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigIPowSignedDigit (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLog10 (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLog2 (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLowerBits (const const_bigIntType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLowerBitsTemp (const bigIntType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"uint64Type  bigLowerBits64 (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bigLowestSetBit (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLShift (const const_bigIntType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigLShiftAssign (bigIntType *const, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLShiftOne (const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigLog2BaseIPow (const intType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigMDiv (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigMod (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigMult (const_bigIntType, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigMultAssign (bigIntType *const, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigMultSignedDigit (const_bigIntType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigNegate (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigNegateTemp (bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    bigOdd (const const_bigIntType);"</span>);
    <span class="keywd">if</span> ccConf.INTTYPE_SIZE = 64 <span class="keywd">then</span>
      declareExtern(c_prog, <span class="stri">"intType     bigToInt64 (const const_bigIntType, errInfoType *);"</span>);
      writeln(c_prog, <span class="stri">"#define     bigOrd(x) bigToInt64(x, NULL)"</span>);
    <span class="keywd">elsif</span> ccConf.INTTYPE_SIZE = 32 <span class="keywd">then</span>
      declareExtern(c_prog, <span class="stri">"intType     bigToInt32 (const const_bigIntType, errInfoType *);"</span>);
      writeln(c_prog, <span class="stri">"#define     bigOrd(x) bigToInt32(x, NULL)"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    declareExtern(c_prog, <span class="stri">"bigIntType  bigOr (const_bigIntType, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigParse (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigParseBased (const const_striType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigPred (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigPredTemp (bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    bigRadix (const const_bigIntType, intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigRand (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigRem (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigRShift (const const_bigIntType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigRShiftAssign (bigIntType *const, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigSbtr (const const_bigIntType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bigSbtrAssign (bigIntType *const, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigSbtrTemp (bigIntType, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigSquare (const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    bigStr (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigSucc (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigSuccTemp (bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   bigToBStriBe (const const_bigIntType, const boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   bigToBStriLe (const const_bigIntType, const boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"uint64Type  bigToUInt64 (const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigValue (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigXor (const_bigIntType, const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  bigZero (void);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">bigInteger</span>: INTTYPE_MAX <span class="keywd">is</span> 2_ ** pred(ccConf.INTTYPE_SIZE) - 1_;
<span class="keywd">const</span> <span class="type">type</span>: addSubBigElementType <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: doAdd <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">reference</span>: summand <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: constSummand <span class="keywd">is</span> 0_;
  <span class="keywd">end</span> <span class="keywd">struct</span>;
<span class="keywd">const</span> <span class="type">type</span>: addSubBigListType <span class="keywd">is</span> <span class="type">array</span> <span class="type">addSubBigElementType</span>;


<span class="keywd">const</span> <span class="type">proc</span>: generateAddSubParamList (<span class="keywd">inout</span> <span class="type">addSubBigListType</span>: addSubParamList,
    <span class="op">in</span> <span class="keywd">var</span> <span class="type">reference</span>: leftParam) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: actionFound <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">ref_list</span>: subExprParams <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">addSubBigElementType</span>: addSubElement <span class="keywd">is</span> addSubBigElementType.value;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      actionFound := FALSE;
      <span class="keywd">if</span> category(leftParam) = CALLOBJECT <span class="keywd">then</span>
        subExprParams := getValue(leftParam, ref_list);
        <span class="keywd">if</span> category(subExprParams[1]) = ACTOBJECT <span class="keywd">then</span>
          <span class="keywd">if</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"BIG_ADD"</span> <span class="keywd">then</span>
            leftParam := subExprParams[2];
            addSubElement.doAdd := TRUE;
            addSubElement.summand := subExprParams[4];
            addSubParamList := [] (addSubElement) &amp; addSubParamList;
            actionFound := TRUE;
          <span class="keywd">elsif</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"BIG_SBTR"</span> <span class="keywd">then</span>
            leftParam := subExprParams[2];
            addSubElement.doAdd := FALSE;
            addSubElement.summand := subExprParams[4];
            addSubParamList := [] (addSubElement) &amp; addSubParamList;
            actionFound := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> <span class="op">not</span> actionFound;
    <span class="keywd">if</span> category(leftParam) = CALLOBJECT <span class="keywd">then</span>
      subExprParams := getValue(leftParam, ref_list);
      <span class="keywd">if</span> category(subExprParams[1]) = ACTOBJECT <span class="keywd">then</span>
        <span class="keywd">if</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"BIG_SUCC"</span> <span class="keywd">then</span>
          addSubElement.doAdd := TRUE;
          addSubElement.summand := NIL;
          addSubElement.constSummand := 1_;
          addSubParamList := [] (addSubElement) &amp; addSubParamList;
          generateAddSubParamList(addSubParamList, subExprParams[2]);
          actionFound := TRUE;
        <span class="keywd">elsif</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"BIG_PRED"</span> <span class="keywd">then</span>
          addSubElement.doAdd := FALSE;
          addSubElement.summand := NIL;
          addSubElement.constSummand := 1_;
          addSubParamList := [] (addSubElement) &amp; addSubParamList;
          generateAddSubParamList(addSubParamList, subExprParams[2]);
          actionFound := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> actionFound <span class="keywd">then</span>
      addSubElement.doAdd := TRUE;
      addSubElement.summand := leftParam;
      addSubParamList := [] (addSubElement) &amp; addSubParamList;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: evaluateConstants (<span class="keywd">inout</span> <span class="type">addSubBigListType</span>: addSubParamList) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: paramValue <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> addSubParamList <span class="keywd">do</span>
      <span class="keywd">if</span> addSubParamList[index].summand &lt;> NIL <span class="keywd">then</span>
        <span class="keywd">if</span> getConstant(addSubParamList[index].summand, BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
          paramValue := getValue(evaluatedParam, bigInteger);
          addSubParamList[index].summand := NIL;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        paramValue := addSubParamList[index].constSummand;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> addSubParamList[index].summand = NIL <span class="keywd">then</span>
        <span class="keywd">if</span> index > 1 <span class="op">and</span> paramValue &lt; 0_ <span class="keywd">then</span>
          addSubParamList[index].doAdd := <span class="op">not</span> addSubParamList[index].doAdd;
          addSubParamList[index].constSummand := -paramValue;
        <span class="keywd">else</span>
          addSubParamList[index].constSummand := paramValue;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimizeAddSubElement (<span class="op">in</span> <span class="type">addSubBigElementType</span>: dividend,
    <span class="op">in</span> <span class="type">bigInteger</span>: divisor, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: aParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> dividend.summand &lt;> NIL <span class="keywd">then</span>
      <span class="keywd">if</span> isActionExpression(dividend.summand, <span class="stri">"BIN_BIG"</span>) <span class="keywd">then</span>
        aParam := getActionParameter(dividend.summand, 1);
        c_expr.expr &amp;:= <span class="stri">"(uint64Type)("</span>;
        process_expr(aParam, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">elsif</span> isActionExpression(dividend.summand, <span class="stri">"BIG_ICONV1"</span>) <span class="keywd">then</span>
        aParam := getActionParameter(dividend.summand, 1);
        c_expr.expr &amp;:= <span class="stri">"(uint64Type)("</span>;
        process_expr(aParam, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">elsif</span> isActionExpression(dividend.summand, <span class="stri">"BIG_ICONV3"</span>) <span class="keywd">then</span>
        aParam := getActionParameter(dividend.summand, 3);
        c_expr.expr &amp;:= <span class="stri">"(uint64Type)("</span>;
        process_expr(aParam, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"bigLowerBits64("</span>;
        getAnyParamToExpr(dividend.summand, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(uint64Type)("</span>;
      c_expr.expr &amp;:= integerLiteral(
          ord(bin64(dividend.constSummand <span class="op">mod</span> divisor)));
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimizeAddSubList (<span class="op">in</span> <span class="type">addSubBigListType</span>: addSubParamList,
    <span class="op">in</span> <span class="type">bigInteger</span>: divisor, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> addSubParamList <span class="keywd">do</span>
      <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
        <span class="keywd">if</span> addSubParamList[index].doAdd <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">" + "</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">" - "</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      optimizeAddSubElement(addSubParamList[index], divisor, c_expr);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_rshift (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">integer</span>: rshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_lshift (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">integer</span>: lshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bigint_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> lshift = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(param1, c_expr);
    <span class="keywd">elsif</span> lshift &lt; 0 <span class="op">and</span> lshift &lt;> integer.first <span class="keywd">then</span>
      process_const_big_rshift(param1, -lshift, c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        bigint_name := defineTempVariable(<span class="stri">"bigIntType"</span>, <span class="stri">"tmp_"</span>, c_expr);
        c_expr.result_expr := <span class="stri">"(bigLShiftAssign(("</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"="</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
        c_expr.result_expr &amp;:= <span class="stri">", &amp;"</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= integerLiteral(lshift);
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= bigint_name;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigLShift("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        c_expr.result_expr &amp;:= integerLiteral(lshift);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_rshift (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">integer</span>: rshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bigint_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rshift = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(param1, c_expr);
    <span class="keywd">elsif</span> rshift &lt; 0 <span class="op">and</span> rshift &lt;> integer.first <span class="keywd">then</span>
      process_const_big_lshift(param1, -rshift, c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        bigint_name := defineTempVariable(<span class="stri">"bigIntType"</span>, <span class="stri">"tmp_"</span>, c_expr);
        c_expr.result_expr := <span class="stri">"(bigRShiftAssign(("</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"="</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
        c_expr.result_expr &amp;:= <span class="stri">", &amp;"</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= integerLiteral(rshift);
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= bigint_name;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigRShift("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        c_expr.result_expr &amp;:= integerLiteral(rshift);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ABS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: bigNumber <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      bigNumber := abs(getValue(evaluatedParam, bigInteger));
      c_expr.expr &amp;:= bigIntegerLiteral(bigNumber);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(params[1], c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigAbsTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigAbs("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_add (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: number,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(param1, BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(getValue(evaluatedParam, bigInteger) + number);
    <span class="keywd">elsif</span> number = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(param1, c_expr);
    <span class="keywd">elsif</span> number = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigSuccTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigSucc("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> number = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigPredTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigPred("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> number > 0_ <span class="keywd">then</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigAddTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigAdd("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(number);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span> <span class="comment"># number &lt; 0_</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigSbtrTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigSbtr("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(-number);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Produces code for the big integer addition.
 *  If the first or the second parameter is a temporary value
 *  the addition is done with bigAddTemp. The bigAddTemp function
 *  returns the first parameter as result of the addition. That
 *  way the temporary value of a parameter must not be freed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ADD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_add(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_add(params[3], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> params[1] = params[3] <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigLShift("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", 1)"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      <span class="keywd">if</span> isActionExpression(params[1], <span class="stri">"BIG_NEGATE"</span>) <span class="keywd">then</span>
        incr(countOptimizations);
        prepareAnyParamTemporarys(params[3], c_param3, c_expr);
        <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          c_expr.result_expr := <span class="stri">"bigSbtrTemp("</span>;
          c_expr.result_expr &amp;:= c_param3.result_expr;
        <span class="keywd">else</span>
          c_expr.result_expr := <span class="stri">"bigSbtr("</span>;
          c_expr.result_expr &amp;:= c_param3.expr;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        getAnyParamToResultExpr(getValue(params[1], ref_list)[3], c_expr);
      <span class="keywd">else</span>
        prepareAnyParamTemporarys(params[1], c_param1, c_expr);
        <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          c_expr.result_expr := <span class="stri">"bigAddTemp("</span>;
          c_expr.result_expr &amp;:= c_param1.result_expr;
          c_expr.result_expr &amp;:= <span class="stri">", "</span>;
          getAnyParamToResultExpr(params[3], c_expr);
        <span class="keywd">else</span>
          prepareAnyParamTemporarys(params[3], c_param3, c_expr);
          <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
            c_expr.result_expr := <span class="stri">"bigAddTemp("</span>;
            c_expr.result_expr &amp;:= c_param3.result_expr;
            c_expr.result_expr &amp;:= <span class="stri">", "</span>;
            c_expr.result_expr &amp;:= c_param1.expr;
          <span class="keywd">else</span>
            c_expr.result_expr := <span class="stri">"bigAdd("</span>;
            c_expr.result_expr &amp;:= c_param1.expr;
            c_expr.result_expr &amp;:= <span class="stri">", "</span>;
            c_expr.result_expr &amp;:= c_param3.expr;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_add_assign (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: delta,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> delta = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigDecr(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> delta = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore bigInteger +:= 0_; */\n"</span>;
    <span class="keywd">elsif</span> delta = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigIncr(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> abs(delta) &lt;= MAX_BIGDIGIT <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigAddAssignSignedDigit(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= integerLiteral(ord(delta));
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigAddAssign(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= bigIntegerLiteral(delta);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ADD_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_add_assign(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigAddAssign(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      getAnyParamToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_BIT_LENGTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bigBitLength("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_cmp (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: number,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(param1, BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= str(compare(getValue(evaluatedParam, bigInteger), number));
    <span class="keywd">elsif</span> abs(number) &lt;= MAX_BIGDIGIT <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"bigCmpSignedDigit("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(ord(number));
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigCmp("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= bigIntegerLiteral(number);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_cmp (<span class="op">in</span> <span class="type">bigInteger</span>: number, <span class="op">in</span> <span class="type">reference</span>: param2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"-"</span>;
    process_const_big_cmp(param2, number, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[2], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(getValue(evaluatedParam, bigInteger), params[2], c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigCmp("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_CONV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], c_param1);
    c_param3.temp_num := c_param1.temp_num;
    process_expr(params[3], c_param3);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      setDiagnosticLine(c_expr);
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"bigIntType old_big="</span>;
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">";\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"bigIntType *big_ptr=&amp;("</span>;
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">");\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"bigIntType old_big=*big_ptr;\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"*big_ptr="</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= c_param3.result_expr;
      c_expr.expr &amp;:= <span class="stri">";\n"</span>;
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"bigDestr(old_big);\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"bigCpy(&amp;("</span>;
      c_expr.expr &amp;:= c_param1.expr;
      c_expr.expr &amp;:= <span class="stri">"), "</span>;
      c_expr.expr &amp;:= c_param3.expr;
      c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_DECR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"bigDecr(&amp;("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_div (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">bigInteger</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: quotient <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_dividend <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(dividend, BIGINTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      incr(countOptimizations);
      quotient := getValue(evaluatedDividend, bigInteger) <span class="op">div</span> divisor;
      c_expr.expr &amp;:= bigIntegerLiteral(quotient);
    <span class="keywd">elsif</span> divisor = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(dividend, c_expr);
    <span class="keywd">elsif</span> divisor = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(dividend, c_dividend, c_expr);
      <span class="keywd">if</span> c_dividend.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_dividend.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_dividend.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigDiv("</span>;
      getAnyParamToResultExpr(dividend, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(divisor);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_DIV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_div(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigDiv("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_DIV_REM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">type</span>: quotRemType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">string</span>: quotRemName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    diagnosticLine := diagnosticLine(function);
    quotRemType := resultType(getType(function));
    prepare_typed_result(quotRemType, c_expr);
    quotRemName := defineTempVariable(type_name(quotRemType), <span class="stri">"quotRem_"</span>, c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"(\n"</span>;
    c_expr.result_expr &amp;:= process_sct_alloc(quotRemType, quotRemName, 2, diagnosticLine);
    c_expr.result_expr &amp;:= <span class="stri">",\n"</span>;
    c_expr.result_expr &amp;:= diagnosticLine;
    c_expr.result_expr &amp;:= quotRemName;
    c_expr.result_expr &amp;:= <span class="stri">"->usage_count = 1,\n"</span>;
    c_expr.result_expr &amp;:= diagnosticLine;
    c_expr.result_expr &amp;:= quotRemName;
    c_expr.result_expr &amp;:= <span class="stri">"->type_num = "</span>;
    c_expr.result_expr &amp;:= str(typeNumber(quotRemType));
    c_expr.result_expr &amp;:= <span class="stri">",\n"</span>;
    c_expr.result_expr &amp;:= diagnosticLine;
    c_expr.result_expr &amp;:= quotRemName;
    c_expr.result_expr &amp;:= <span class="stri">"->stru[0].value.bigIntValue = bigDivRem("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", &amp;"</span>;
    c_expr.result_expr &amp;:= quotRemName;
    c_expr.result_expr &amp;:= <span class="stri">"->stru[1].value.bigIntValue"</span>;
    c_expr.result_expr &amp;:= <span class="stri">"),\n"</span>;
    c_expr.result_expr &amp;:= diagnosticLine;
    c_expr.result_expr &amp;:= quotRemName;
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_eq (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: number,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(param1, BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= str(ord(getValue(evaluatedParam, bigInteger) = number));
      c_expr.expr &amp;:= <span class="stri">"/*"</span>;
      c_expr.expr &amp;:= str(getValue(evaluatedParam, bigInteger) = number);
      c_expr.expr &amp;:= <span class="stri">"*/"</span>;
    <span class="keywd">elsif</span> abs(number) &lt;= MAX_BIGDIGIT <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"bigEqSignedDigit("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(ord(number));
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigEq("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= bigIntegerLiteral(number);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_eq(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_eq(params[3], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigEq("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_FROM_BSTRI_BE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigFromBStriBe("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_FROM_BSTRI_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigFromBStriLe("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_GCD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigGcd("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_GE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[1], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" >= 0"</span>;
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[3], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" &lt;= 0"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigCmp("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">") >= 0"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_GT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[1], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" > 0"</span>;
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[3], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" &lt; 0"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigCmp("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">") > 0"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bigHashCode("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ICONV1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigIConv("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ICONV3, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigIConv("</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_INCR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"bigIncr(&amp;("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_ipow (<span class="op">in</span> <span class="type">reference</span>: base, <span class="op">in</span> <span class="type">integer</span>: exponent,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedBase <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: bigNumber <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> exponent &lt; 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(base, BIGINTOBJECT, evaluatedBase) <span class="keywd">then</span>
      incr(countOptimizations);
      bigNumber := getValue(evaluatedBase, bigInteger) ** exponent;
      c_expr.expr &amp;:= bigIntegerLiteral(bigNumber);
    <span class="keywd">elsif</span> exponent = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(1_);
    <span class="keywd">elsif</span> exponent = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(base, c_expr);
    <span class="keywd">elsif</span> exponent = 2 <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigSquare("</span>;
      getAnyParamToResultExpr(base, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigIPow("</span>;
      getAnyParamToResultExpr(base, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= str(exponent);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_ipow (<span class="op">in</span> <span class="type">bigInteger</span>: base, <span class="op">in</span> <span class="type">reference</span>: exponent,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: exponent_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> base = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> bigint_power_check <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponent_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
        c_expr.expr &amp;:= exponent_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
        c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= exponent_name;
        c_expr.expr &amp;:= <span class="stri">"&amp;1?"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(-1_);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(1_);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")&amp;1?"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(-1_);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(1_);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> bigint_power_check <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponent_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
        c_expr.expr &amp;:= exponent_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
        c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= exponent_name;
        c_expr.expr &amp;:= <span class="stri">"==0?"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(1_);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(0_);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")==0?"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(1_);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(0_);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> bigint_power_check <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"(numChk(("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")&lt;0)?"</span>;
        c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= bigIntegerLiteral(1_);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= bigIntegerLiteral(1_);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base > 0_ <span class="op">and</span> log2(base) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(base)) = base <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigLog2BaseIPow("</span>;
      c_expr.result_expr &amp;:= integerLiteral(ord(log2(base)));
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(exponent, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> abs(base) &lt;= MAX_BIGDIGIT <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigIPowSignedDigit("</span>;
      c_expr.result_expr &amp;:= integerLiteral(ord(base));
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(exponent, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigIPow("</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(base);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(exponent, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_IPOW, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_ipow(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_ipow(getValue(evaluatedParam, bigInteger), params[3], c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigIPow("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[1], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" &lt;= 0"</span>;
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[3], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" >= 0"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigCmp("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;= 0"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LOG10, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigLog10("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LOG2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigLog2("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LOWEST_SET_BIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bigLowestSetBit("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_lshift (<span class="op">in</span> <span class="type">bigInteger</span>: number, <span class="op">in</span> <span class="type">reference</span>: param3,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">bigInteger</span>: bigNumber <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="comment">(* if category(param3) = INTOBJECT and not isVar(param3) then
      incr(countOptimizations);
      bigNumber := number &lt;&lt; getValue(param3, integer);
      c_expr.expr &amp;:= bigIntegerLiteral(bigNumber);
    els *)</span>
    <span class="keywd">if</span> number = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(0_);
    <span class="keywd">elsif</span> number = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigLShiftOne("</span>;
      getStdParamToResultExpr(param3, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigLShift("</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(number);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(param3, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LSHIFT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: bigint_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_lshift(getValue(evaluatedParam, bigInteger), params[3], c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_lshift(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(params[1], c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        bigint_name := defineTempVariable(<span class="stri">"bigIntType"</span>, <span class="stri">"tmp_"</span>, c_expr);
        c_expr.result_expr := <span class="stri">"(bigLShiftAssign(("</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"="</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
        c_expr.result_expr &amp;:= <span class="stri">", &amp;"</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        getStdParamToResultExpr(params[3], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= bigint_name;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigLShift("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        getStdParamToResultExpr(params[3], c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LSHIFT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore bigInteger &lt;&lt;:= 0; */\n"</span>;
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigLShiftAssign(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      getAnyParamToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_LT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[1], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" &lt; 0"</span>;
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_cmp(params[3], getValue(evaluatedParam, bigInteger), c_expr);
      c_expr.expr &amp;:= <span class="stri">" > 0"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigCmp("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToExpr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt; 0"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_mdiv (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">bigInteger</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: quotient <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">string</span>: bigint_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_dividend <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(dividend, BIGINTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      incr(countOptimizations);
      quotient := getValue(evaluatedDividend, bigInteger) <span class="op">mdiv</span> divisor;
      c_expr.expr &amp;:= bigIntegerLiteral(quotient);
    <span class="keywd">elsif</span> divisor = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(dividend, c_expr);
    <span class="keywd">elsif</span> divisor = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(dividend, c_dividend, c_expr);
      <span class="keywd">if</span> c_dividend.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_dividend.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_dividend.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> divisor > 0_ <span class="op">and</span> log2(divisor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(divisor)) = divisor <span class="keywd">then</span>
      incr(countOptimizations);
      process_const_big_rshift(dividend, ord(log2(divisor)), c_expr);
    <span class="keywd">elsif</span> divisor &lt; 0_ <span class="op">and</span> log2(-divisor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(-divisor)) = -divisor <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      bigint_name := defineTempVariable(<span class="stri">"bigIntType"</span>, <span class="stri">"tmp_"</span>, c_expr);
      c_expr.result_expr := <span class="stri">"(bigRShiftAssign(("</span>;
      c_expr.result_expr &amp;:= bigint_name;
      c_expr.result_expr &amp;:= <span class="stri">"="</span>;
      prepareAnyParamTemporarys(dividend, c_dividend, c_expr);
      <span class="keywd">if</span> c_dividend.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr &amp;:= <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_dividend.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr &amp;:= <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_dividend.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">"), &amp;"</span>;
      c_expr.result_expr &amp;:= bigint_name;
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      c_expr.result_expr &amp;:= integerLiteral(ord(log2(-divisor)));
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      c_expr.result_expr &amp;:= bigint_name;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMDiv("</span>;
      getAnyParamToResultExpr(dividend, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(divisor);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_MDIV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_mdiv(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMDiv("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_mod (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">bigInteger</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: modulus <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_dividend <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(dividend, BIGINTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      incr(countOptimizations);
      modulus := getValue(evaluatedDividend, bigInteger) <span class="op">mod</span> divisor;
      c_expr.expr &amp;:= bigIntegerLiteral(modulus);
    <span class="keywd">elsif</span> divisor = 1_ <span class="op">or</span> divisor = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(0_);
    <span class="keywd">elsif</span> divisor > 0_ <span class="op">and</span> log2(divisor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(divisor)) = divisor <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(dividend, c_dividend, c_expr);
      <span class="keywd">if</span> c_dividend.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigLowerBitsTemp("</span>;
        c_expr.result_expr &amp;:= c_dividend.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigLowerBits("</span>;
        c_expr.result_expr &amp;:= c_dividend.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(ord(log2(divisor)));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> divisor &lt; 0_ <span class="op">and</span> log2(-divisor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(-divisor)) = -divisor <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigNegateTemp(bigLowerBitsTemp("</span>;
      prepareAnyParamTemporarys(dividend, c_dividend, c_expr);
      <span class="keywd">if</span> c_dividend.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr &amp;:= <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_dividend.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr &amp;:= <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_dividend.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
      c_expr.result_expr &amp;:= integerLiteral(ord(log2(-divisor)));
      c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMod("</span>;
      getAnyParamToResultExpr(dividend, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(divisor);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_MOD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_mod(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMod("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_mult (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: factor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: product <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_negate_param <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(param1, BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      product := getValue(evaluatedParam, bigInteger) * factor;
      c_expr.expr &amp;:= bigIntegerLiteral(product);
    <span class="keywd">elsif</span> factor = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(param1, c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> factor = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(0_);
    <span class="keywd">elsif</span> factor = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(param1, c_expr);
    <span class="keywd">elsif</span> factor > 1_ <span class="op">and</span> log2(factor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(factor)) = factor <span class="keywd">then</span>
      incr(countOptimizations);
      process_const_big_lshift(param1, ord(log2(factor)), c_expr);
    <span class="keywd">elsif</span> factor &lt; 1_ <span class="op">and</span> log2(-factor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(-factor)) = -factor <span class="keywd">then</span>
      incr(countOptimizations);
      c_negate_param.temp_num := c_expr.temp_num;
      process_const_big_lshift(param1, ord(log2(-factor)), c_negate_param);
      c_expr.temp_num := c_negate_param.temp_num;
      prepare_bigint_result(c_expr);
      c_expr.temp_decls &amp;:= c_negate_param.temp_decls;
      c_expr.temp_assigns &amp;:= c_negate_param.temp_assigns;
      c_expr.temp_frees &amp;:= c_negate_param.temp_frees;
      c_expr.temp_to_null &amp;:= c_negate_param.temp_to_null;
      <span class="keywd">if</span> c_negate_param.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_negate_param.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_negate_param.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> abs(factor) &lt;= MAX_BIGDIGIT <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMultSignedDigit("</span>;
      getAnyParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(ord(factor));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMult("</span>;
      getAnyParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(factor);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_MULT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_mult(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_mult(params[3], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> params[1] = params[3] <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigSquare("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigMult("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_mult_assign (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: factor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> factor = -1_ <span class="keywd">then</span>
      statement.expr := <span class="stri">"("</span>;
      variable_name := getParameterAsVariable(<span class="stri">"bigIntType"</span>, <span class="stri">"tmp_"</span>, param1, statement);
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=bigNegateTemp("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> factor = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigCpy(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= bigIntegerLiteral(0_);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> factor = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore bigInteger *:= 1_; */\n"</span>;
    <span class="keywd">elsif</span> factor > 1_ <span class="op">and</span> log2(factor) &lt;= INTTYPE_MAX <span class="op">and</span>
        2_ ** ord(log2(factor)) = factor <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigLShiftAssign(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= integerLiteral(ord(log2(factor)));
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigMultAssign(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= bigIntegerLiteral(factor);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_MULT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_mult_assign(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigMultAssign(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      getAnyParamToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"!"</span>;
    process(BIG_EQ, function, params, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_NEGATE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: bigNumber <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[2], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      bigNumber := -getValue(evaluatedParam, bigInteger);
      c_expr.expr &amp;:= bigIntegerLiteral(bigNumber);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(params[2], c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigNegateTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigNegate("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ODD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bigOdd("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_big_ord_of_big_mod (<span class="op">in</span> <span class="type">reference</span>: param1,
    <span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">bigInteger</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubBigListType</span>: addSubParamList <span class="keywd">is</span> addSubBigListType.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor > 0_ <span class="op">and</span> log2(divisor) &lt;= 63_ <span class="op">and</span>
        2_ ** ord(log2(divisor)) = divisor <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"(intType)("</span>;
      <span class="keywd">if</span> evaluate_const_expr >= 2 <span class="keywd">then</span>
        generateAddSubParamList(addSubParamList, dividend);
        evaluateConstants(addSubParamList);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        optimizeAddSubList(addSubParamList, divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"bigLowerBits64("</span>;
        getAnyParamToExpr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
      c_expr.expr &amp;:= integerLiteral(ord(pred(divisor)));
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigOrd("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_ORD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> evaluate_const_expr >= 1 <span class="op">and</span>
        isActionExpression(params[1], <span class="stri">"BIG_MOD"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[1], 3),
                    BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      optimize_big_ord_of_big_mod(params[1],
          getActionParameter(params[1], 1),
          getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigOrd("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_PARSE1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigParse("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_PARSE_BASED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigParseBased("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_PLUS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_expr(params[2], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_PRED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    prepareAnyParamTemporarys(params[1], c_param1, c_expr);
    <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.result_expr := <span class="stri">"bigPredTemp("</span>;
      c_expr.result_expr &amp;:= c_param1.result_expr;
    <span class="keywd">else</span>
      c_expr.result_expr := <span class="stri">"bigPred("</span>;
      c_expr.result_expr &amp;:= c_param1.expr;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_radix, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigRadix("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", 0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_RADIX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigRadix("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", 1)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_RAND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigRand("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_rem (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">bigInteger</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: remainder <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= bigRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(dividend, BIGINTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      incr(countOptimizations);
      remainder := getValue(evaluatedDividend, bigInteger) <span class="op">rem</span> divisor;
      c_expr.expr &amp;:= bigIntegerLiteral(remainder);
    <span class="keywd">elsif</span> divisor = 1_ <span class="op">or</span> divisor = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(0_);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigRem("</span>;
      getAnyParamToResultExpr(dividend, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(divisor);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_REM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_rem(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigRem("</span>;
      getAnyParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_rshift (<span class="op">in</span> <span class="type">bigInteger</span>: number, <span class="op">in</span> <span class="type">reference</span>: param3,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">bigInteger</span>: bigNumber <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> category(param3) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(param3) <span class="keywd">then</span>
      incr(countOptimizations);
      bigNumber := number >> getValue(param3, integer);
      c_expr.expr &amp;:= bigIntegerLiteral(bigNumber);
    <span class="keywd">elsif</span> number = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(0_);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      c_expr.result_expr := <span class="stri">"bigRShift("</span>;
      c_expr.result_expr &amp;:= bigIntegerLiteral(number);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(param3, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_RSHIFT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: bigint_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_rshift(getValue(evaluatedParam, bigInteger), params[3], c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_rshift(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(params[1], c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        bigint_name := defineTempVariable(<span class="stri">"bigIntType"</span>, <span class="stri">"tmp_"</span>, c_expr);
        c_expr.result_expr := <span class="stri">"(bigRShiftAssign(("</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"="</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
        c_expr.result_expr &amp;:= <span class="stri">", &amp;"</span>;
        c_expr.result_expr &amp;:= bigint_name;
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        getStdParamToResultExpr(params[3], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
        c_expr.result_expr &amp;:= bigint_name;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigRShift("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
        c_expr.result_expr &amp;:= <span class="stri">", "</span>;
        getStdParamToResultExpr(params[3], c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_RSHIFT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore bigInteger >>:= 0; */\n"</span>;
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigRShiftAssign(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      getAnyParamToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Produces code for the big integer subtraction.
 *  If the first parameter is a temporary value the subtraction
 *  is done with bigSbtrTemp. The bigSbtrTemp function returns
 *  the first parameter as result of the subtraction. That way the
 *  temporary of the first parameter must not be freed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_SBTR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_add(params[1], -getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">elsif</span> params[1] = params[3] <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= bigIntegerLiteral(0_);
    <span class="keywd">else</span>
      prepare_bigint_result(c_expr);
      prepareAnyParamTemporarys(params[1], c_param1, c_expr);
      <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_expr := <span class="stri">"bigSbtrTemp("</span>;
        c_expr.result_expr &amp;:= c_param1.result_expr;
      <span class="keywd">else</span>
        c_expr.result_expr := <span class="stri">"bigSbtr("</span>;
        c_expr.result_expr &amp;:= c_param1.expr;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getAnyParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_big_sbtr_assign (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">bigInteger</span>: delta,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> delta = -1_ <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigIncr(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> delta = 0_ <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore bigInteger -:= 0_; */\n"</span>;
    <span class="keywd">elsif</span> delta = 1_ <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigDecr(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> abs(delta) &lt;= MAX_BIGDIGIT <span class="keywd">then</span>
      incr(countOptimizations);
      statement.expr := <span class="stri">"bigAddAssignSignedDigit(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= integerLiteral(-ord(delta));
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigSbtrAssign(&amp;("</span>;
      process_expr(param1, statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= bigIntegerLiteral(delta);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_SBTR_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_big_sbtr_assign(params[1], getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      statement.expr := <span class="stri">"bigSbtrAssign(&amp;("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"), "</span>;
      getAnyParamToExpr(params[3], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigStr("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_SUCC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    prepareAnyParamTemporarys(params[1], c_param1, c_expr);
    <span class="keywd">if</span> c_param1.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.result_expr := <span class="stri">"bigSuccTemp("</span>;
      c_expr.result_expr &amp;:= c_param1.result_expr;
    <span class="keywd">else</span>
      c_expr.result_expr := <span class="stri">"bigSucc("</span>;
      c_expr.result_expr &amp;:= c_param1.expr;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_TO_BSTRI_BE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigToBStriBe("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_TO_BSTRI_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigToBStriLe("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIG_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigValue("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
