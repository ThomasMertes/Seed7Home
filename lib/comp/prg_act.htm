<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  prg_act.s7i   Generate code for actions of the type program.    *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_BSTRI_PARSE     <span class="keywd">is</span> action <span class="stri">"PRG_BSTRI_PARSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_CPY             <span class="keywd">is</span> action <span class="stri">"PRG_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_EQ              <span class="keywd">is</span> action <span class="stri">"PRG_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_ERROR_COUNT     <span class="keywd">is</span> action <span class="stri">"PRG_ERROR_COUNT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_EVAL            <span class="keywd">is</span> action <span class="stri">"PRG_EVAL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_EXEC            <span class="keywd">is</span> action <span class="stri">"PRG_EXEC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_FIL_PARSE       <span class="keywd">is</span> action <span class="stri">"PRG_FIL_PARSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_GET_ERROR       <span class="keywd">is</span> action <span class="stri">"PRG_GET_ERROR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_GLOBAL_OBJECTS  <span class="keywd">is</span> action <span class="stri">"PRG_GLOBAL_OBJECTS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_MATCH           <span class="keywd">is</span> action <span class="stri">"PRG_MATCH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_MATCH_EXPR      <span class="keywd">is</span> action <span class="stri">"PRG_MATCH_EXPR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_NAME            <span class="keywd">is</span> action <span class="stri">"PRG_NAME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_NE              <span class="keywd">is</span> action <span class="stri">"PRG_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_OWN_NAME        <span class="keywd">is</span> action <span class="stri">"PRG_OWN_NAME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_OWN_PATH        <span class="keywd">is</span> action <span class="stri">"PRG_OWN_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_PATH            <span class="keywd">is</span> action <span class="stri">"PRG_PATH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_STR_PARSE       <span class="keywd">is</span> action <span class="stri">"PRG_STR_PARSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_SYOBJECT        <span class="keywd">is</span> action <span class="stri">"PRG_SYOBJECT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_SYSVAR          <span class="keywd">is</span> action <span class="stri">"PRG_SYSVAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: PRG_VALUE           <span class="keywd">is</span> action <span class="stri">"PRG_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: prg_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"progType    prgBStriParse (const bstriType, const const_setType, const const_arrayType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        prgCpy (progType *const, const progType);"</span>);
    declareExtern(c_prog, <span class="stri">"progType    prgCreate (const progType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        prgDestr (progType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     prgErrorCount (const const_progType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  prgEval (progType, objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        prgExec (const const_progType, const const_arrayType, const const_setType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"progType    prgFilParse (const const_striType, const const_setType, const const_arrayType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        prgGetError (const const_progType, intType, intType *, striType *, intType *, intType *, striType *, striType *);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    prgGlobalObjects (const const_progType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  prgMatch (const const_progType, listType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  prgMatchExpr (const const_progType, listType);"</span>);
    declareExtern(c_prog, <span class="stri">"const_striType prgName (const const_progType);"</span>);
    declareExtern(c_prog, <span class="stri">"const_striType prgPath (const const_progType);"</span>);
    declareExtern(c_prog, <span class="stri">"progType    prgStrParse (const const_striType, const const_setType, const const_arrayType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  prgSyobject (const progType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  prgSysvar (const const_progType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"progType    prgValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_BSTRI_PARSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    prepare_prog_result(c_expr);
    c_expr.result_expr := <span class="stri">"prgBStriParse((const bstriType)("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"), "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"progType new_prog;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_prog="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"prgDestr("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_prog;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"progType *prog_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"prgDestr(*prog_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*prog_ptr=new_prog;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"prgCpy(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_ERROR_COUNT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgErrorCount("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_EVAL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgEval("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_EXEC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgExec("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_FIL_PARSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    prepare_prog_result(c_expr);
    c_expr.result_expr := <span class="stri">"prgFilParse("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_GET_ERROR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr := <span class="stri">"prgGetError("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[5], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[7], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_GLOBAL_OBJECTS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"prgGlobalObjects("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_MATCH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgMatch("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_MATCH_EXPR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgMatchExpr("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_NAME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgName("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_OWN_NAME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"programName"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_OWN_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"programPath"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_PATH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgPath("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_STR_PARSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    prepare_prog_result(c_expr);
    c_expr.result_expr := <span class="stri">"prgStrParse("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_SYOBJECT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgSyobject("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_SYSVAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgSysvar("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (PRG_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compilerLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"prgValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
