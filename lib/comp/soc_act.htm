<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  soc_act.s7i   Generate code for actions of primitive sockets.   *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_ACCEPT           <span class="keywd">is</span> action <span class="stri">"SOC_ACCEPT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_ADDR_FAMILY      <span class="keywd">is</span> action <span class="stri">"SOC_ADDR_FAMILY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_ADDR_NUMERIC     <span class="keywd">is</span> action <span class="stri">"SOC_ADDR_NUMERIC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_ADDR_SERVICE     <span class="keywd">is</span> action <span class="stri">"SOC_ADDR_SERVICE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_BIND             <span class="keywd">is</span> action <span class="stri">"SOC_BIND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_CLOSE            <span class="keywd">is</span> action <span class="stri">"SOC_CLOSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_CONNECT          <span class="keywd">is</span> action <span class="stri">"SOC_CONNECT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_CPY              <span class="keywd">is</span> action <span class="stri">"SOC_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_EQ               <span class="keywd">is</span> action <span class="stri">"SOC_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_GETC             <span class="keywd">is</span> action <span class="stri">"SOC_GETC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_GETS             <span class="keywd">is</span> action <span class="stri">"SOC_GETS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_GET_HOSTNAME     <span class="keywd">is</span> action <span class="stri">"SOC_GET_HOSTNAME"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_GET_LOCAL_ADDR   <span class="keywd">is</span> action <span class="stri">"SOC_GET_LOCAL_ADDR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_GET_PEER_ADDR    <span class="keywd">is</span> action <span class="stri">"SOC_GET_PEER_ADDR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_HAS_NEXT         <span class="keywd">is</span> action <span class="stri">"SOC_HAS_NEXT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_INET_ADDR        <span class="keywd">is</span> action <span class="stri">"SOC_INET_ADDR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_INET_LOCAL_ADDR  <span class="keywd">is</span> action <span class="stri">"SOC_INET_LOCAL_ADDR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_INET_SERV_ADDR   <span class="keywd">is</span> action <span class="stri">"SOC_INET_SERV_ADDR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_INPUT_READY      <span class="keywd">is</span> action <span class="stri">"SOC_INPUT_READY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_LINE_READ        <span class="keywd">is</span> action <span class="stri">"SOC_LINE_READ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_LISTEN           <span class="keywd">is</span> action <span class="stri">"SOC_LISTEN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_NE               <span class="keywd">is</span> action <span class="stri">"SOC_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_ORD              <span class="keywd">is</span> action <span class="stri">"SOC_ORD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_RECV             <span class="keywd">is</span> action <span class="stri">"SOC_RECV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_SEND             <span class="keywd">is</span> action <span class="stri">"SOC_SEND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_SET_OPT_BOOL     <span class="keywd">is</span> action <span class="stri">"SOC_SET_OPT_BOOL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_SOCKET           <span class="keywd">is</span> action <span class="stri">"SOC_SOCKET"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_WORD_READ        <span class="keywd">is</span> action <span class="stri">"SOC_WORD_READ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: SOC_WRITE            <span class="keywd">is</span> action <span class="stri">"SOC_WRITE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: soc_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"socketType  socAccept (socketType, bstriType *);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     socAddrFamily (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    socAddrNumeric (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    socAddrService (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        socBind (socketType, const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        socClose (socketType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        socConnect (socketType, const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"charType    socGetc (socketType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    socGets (socketType, intType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    socGetHostname(void);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   socGetLocalAddr (socketType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   socGetPeerAddr (socketType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    socHasNext (socketType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   socInetAddr (const const_striType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   socInetLocalAddr (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   socInetServAddr (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    socInputReady (socketType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    socLineRead (socketType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        socListen (socketType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     socRecv (socketType, striType *, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     socRecvfrom (socketType, striType *, intType, intType, bstriType *);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     socSend (socketType, const_striType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     socSendto (socketType, const_striType, intType, bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        socSetOptBool (socketType, intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"socketType  socSocket (intType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    socWordRead (socketType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        socWrite (socketType, const const_striType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_ACCEPT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socAccept("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_ADDR_FAMILY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socAddrFamily("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_ADDR_NUMERIC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socAddrNumeric("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_ADDR_SERVICE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socAddrService("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_BIND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"socBind("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_CLOSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"socClose("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_CONNECT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"socConnect("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_GETC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socGetc("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_GETS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socGets("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", &amp;("</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_GET_HOSTNAME, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socGetHostname()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_GET_LOCAL_ADDR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socGetLocalAddr("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_GET_PEER_ADDR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socGetPeerAddr("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_HAS_NEXT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socHasNext("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_INET_ADDR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socInetAddr("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_INET_LOCAL_ADDR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socInetLocalAddr("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_INET_SERV_ADDR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socInetServAddr("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_INPUT_READY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socInputReady("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_LINE_READ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socLineRead("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", &amp;("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_LISTEN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"socListen("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_ORD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_RECV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socRecv("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", &amp;("</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_SEND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socSend("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_SET_OPT_BOOL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socSetOptBool("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_SOCKET, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"socSocket("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_WORD_READ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"socWordRead("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", &amp;("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (SOC_WRITE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"socWrite("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
