<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  int_act.s7i   Generate code for actions of the type integer.    *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2022  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: INT_ABS                 <span class="keywd">is</span> action <span class="stri">"INT_ABS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_ADD                 <span class="keywd">is</span> action <span class="stri">"INT_ADD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_ADD_ASSIGN          <span class="keywd">is</span> action <span class="stri">"INT_ADD_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BINOM               <span class="keywd">is</span> action <span class="stri">"INT_BINOM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BIT_LENGTH          <span class="keywd">is</span> action <span class="stri">"INT_BIT_LENGTH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_BE_2_INT      <span class="keywd">is</span> action <span class="stri">"INT_BYTES_BE_2_INT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_BE_2_UINT     <span class="keywd">is</span> action <span class="stri">"INT_BYTES_BE_2_UINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_BE_SIGNED     <span class="keywd">is</span> action <span class="stri">"INT_BYTES_BE_SIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_BE_UNSIGNED   <span class="keywd">is</span> action <span class="stri">"INT_BYTES_BE_UNSIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_LE_2_INT      <span class="keywd">is</span> action <span class="stri">"INT_BYTES_LE_2_INT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_LE_2_UINT     <span class="keywd">is</span> action <span class="stri">"INT_BYTES_LE_2_UINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_LE_SIGNED     <span class="keywd">is</span> action <span class="stri">"INT_BYTES_LE_SIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_BYTES_LE_UNSIGNED   <span class="keywd">is</span> action <span class="stri">"INT_BYTES_LE_UNSIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_CMP                 <span class="keywd">is</span> action <span class="stri">"INT_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_CPY                 <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_DECR                <span class="keywd">is</span> action <span class="stri">"INT_DECR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_DIV                 <span class="keywd">is</span> action <span class="stri">"INT_DIV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_EQ                  <span class="keywd">is</span> action <span class="stri">"INT_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_FACT                <span class="keywd">is</span> action <span class="stri">"INT_FACT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_GE                  <span class="keywd">is</span> action <span class="stri">"INT_GE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_GT                  <span class="keywd">is</span> action <span class="stri">"INT_GT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_HASHCODE            <span class="keywd">is</span> action <span class="stri">"INT_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_ICONV1              <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_ICONV3              <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_INCR                <span class="keywd">is</span> action <span class="stri">"INT_INCR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LE                  <span class="keywd">is</span> action <span class="stri">"INT_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LOG10               <span class="keywd">is</span> action <span class="stri">"INT_LOG10"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LOG2                <span class="keywd">is</span> action <span class="stri">"INT_LOG2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LOWEST_SET_BIT      <span class="keywd">is</span> action <span class="stri">"INT_LOWEST_SET_BIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LPAD0               <span class="keywd">is</span> action <span class="stri">"INT_LPAD0"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LSHIFT              <span class="keywd">is</span> action <span class="stri">"INT_LSHIFT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LSHIFT_ASSIGN       <span class="keywd">is</span> action <span class="stri">"INT_LSHIFT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_LT                  <span class="keywd">is</span> action <span class="stri">"INT_LT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_MDIV                <span class="keywd">is</span> action <span class="stri">"INT_MDIV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_MOD                 <span class="keywd">is</span> action <span class="stri">"INT_MOD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_MULT                <span class="keywd">is</span> action <span class="stri">"INT_MULT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_MULT_ASSIGN         <span class="keywd">is</span> action <span class="stri">"INT_MULT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_NE                  <span class="keywd">is</span> action <span class="stri">"INT_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_NEGATE              <span class="keywd">is</span> action <span class="stri">"INT_NEGATE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_N_BYTES_BE_SIGNED   <span class="keywd">is</span> action <span class="stri">"INT_N_BYTES_BE_SIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_N_BYTES_BE_UNSIGNED <span class="keywd">is</span> action <span class="stri">"INT_N_BYTES_BE_UNSIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_N_BYTES_LE_SIGNED   <span class="keywd">is</span> action <span class="stri">"INT_N_BYTES_LE_SIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_N_BYTES_LE_UNSIGNED <span class="keywd">is</span> action <span class="stri">"INT_N_BYTES_LE_UNSIGNED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_ODD                 <span class="keywd">is</span> action <span class="stri">"INT_ODD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_PARSE1              <span class="keywd">is</span> action <span class="stri">"INT_PARSE1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_PLUS                <span class="keywd">is</span> action <span class="stri">"INT_PLUS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_POW                 <span class="keywd">is</span> action <span class="stri">"INT_POW"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_PRED                <span class="keywd">is</span> action <span class="stri">"INT_PRED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_radix               <span class="keywd">is</span> action <span class="stri">"INT_radix"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_RADIX               <span class="keywd">is</span> action <span class="stri">"INT_RADIX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_RAND                <span class="keywd">is</span> action <span class="stri">"INT_RAND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_REM                 <span class="keywd">is</span> action <span class="stri">"INT_REM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_RSHIFT              <span class="keywd">is</span> action <span class="stri">"INT_RSHIFT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_RSHIFT_ASSIGN       <span class="keywd">is</span> action <span class="stri">"INT_RSHIFT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_SBTR                <span class="keywd">is</span> action <span class="stri">"INT_SBTR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_SBTR_ASSIGN         <span class="keywd">is</span> action <span class="stri">"INT_SBTR_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_SQRT                <span class="keywd">is</span> action <span class="stri">"INT_SQRT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_STR                 <span class="keywd">is</span> action <span class="stri">"INT_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_SUCC                <span class="keywd">is</span> action <span class="stri">"INT_SUCC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: INT_VALUE               <span class="keywd">is</span> action <span class="stri">"INT_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: int_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        setupRand (void);"</span>);
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        (ccConf.INTTYPE_SIZE = 32 <span class="op">and</span> ccConf.UINT64TYPE &lt;> <span class="stri">""</span>) <span class="op">or</span>
        (ccConf.INTTYPE_SIZE = 64 <span class="op">and</span> ccConf.UINT128TYPE &lt;> <span class="stri">""</span>) <span class="keywd">then</span>
      <span class="keywd">if</span> ccConf.INTTYPE_SIZE = 32 <span class="keywd">then</span>
        declareExtern(c_prog, ccConf.UINT64TYPE &lt;&amp; <span class="stri">" seed;"</span>);
      <span class="keywd">elsif</span> ccConf.INTTYPE_SIZE = 64 <span class="keywd">then</span>
        declareExtern(c_prog, ccConf.UINT128TYPE &lt;&amp; <span class="stri">" seed;"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      writeln(c_prog, <span class="stri">"#define            RAND_MULTIPLIER "</span> &lt;&amp; ccConf.RAND_MULTIPLIER);
      writeln(c_prog, <span class="stri">"#define            RAND_INCREMENT "</span> &lt;&amp; ccConf.RAND_INCREMENT);
      writeln(c_prog, <span class="stri">"#define            uintRand() \
                      \(seed = seed * RAND_MULTIPLIER + RAND_INCREMENT, \
                      \(uintType) (seed >> "</span> &lt;&amp;
                      ccConf.INTTYPE_SIZE &lt;&amp; <span class="stri">"))"</span>);
      writeln(c_prog, <span class="stri">"#define            uintRandMantissa() \
                      \(seed = seed * RAND_MULTIPLIER + RAND_INCREMENT, \
                      \(uintType) (seed >> "</span> &lt;&amp;
                      2 * ccConf.INTTYPE_SIZE - ccConf.FLOATTYPE_MANTISSA_BITS &lt;&amp; <span class="stri">"))"</span>);
      <span class="keywd">if</span> ccConf.STMT_BLOCK_IN_PARENTHESES_OK <span class="keywd">then</span>
        writeln(c_prog, <span class="stri">"#define            uintRandLimited(rand_max) \
                        \({uintType rand_val; \
                        \do {rand_val = uintRand();} while (rand_val > (rand_max)); \
                        \rand_val;})"</span>);
      <span class="keywd">else</span>
        declareExtern(c_prog, <span class="stri">"uintType    uintRandLimited (uintType);"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      declareExtern(c_prog, <span class="stri">"uintType    uintRand (void);"</span>);
      declareExtern(c_prog, <span class="stri">"uintType    uintRandMantissa (void);"</span>);
      declareExtern(c_prog, <span class="stri">"uintType    uintRandLimited (uintType);"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    declareExtern(c_prog, <span class="stri">"intType     intBinom (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"uintType    uintBinomNoChk (uintType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intBitLength (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intBytesBe (intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intBytesBe2Int (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intBytesBe2UInt (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intBytesLe (intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intBytesLe2Int (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intBytesLe2UInt (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intCmp (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intLog10 (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intLog2 (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intLowestSetBit (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intLpad0 (intType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intNBytesBeSigned (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intNBytesBeUnsigned (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intNBytesLeSigned (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intNBytesLeUnsigned (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intParse (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intPow (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intPowOvfChk (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intRadix (intType, intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intRadixPow2 (intType, int, int, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intRand (intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intSqrt (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intStr (intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    intStrToBuffer (intType, striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     intValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">array</span> <span class="type">integer</span>: maxExponentOfBase <span class="keywd">is</span> [-8] (
    21, 22, 24, 27, 31, 39, 63,
    integer.last, integer.last, integer.last,
    62, 39, 31, 27, 24, 22, 20);
<span class="keywd">const</span> <span class="type">array</span> <span class="type">integer</span>: minBaseOfExponent <span class="keywd">is</span> [2] (
    -3037000499, -2097152, -55108, -6208, -1448, -512, -234, -128,
    -78, -52, -38, -28, -22, -18, -15, -13, -11, -9, -8, -8, -7);
<span class="keywd">const</span> <span class="type">array</span> <span class="type">integer</span>: maxBaseOfExponent <span class="keywd">is</span> [2] (
    3037000499, 2097151, 55108, 6208, 1448, 511, 234, 127,
    78, 52, 38, 28, 22, 18, 15, 13, 11, 9, 8, 7, 7);
<span class="keywd">const</span> <span class="type">type</span>: addSubIntElementType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: doAdd <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">reference</span>: summand <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: constSummand <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;
<span class="keywd">const</span> <span class="type">type</span>: addSubIntListType <span class="keywd">is</span> <span class="type">array</span> <span class="type">addSubIntElementType</span>;


<span class="keywd">const</span> <span class="type">proc</span>: generateAddSubParamList (<span class="keywd">inout</span> <span class="type">addSubIntListType</span>: addSubParamList,
    <span class="op">in</span> <span class="keywd">var</span> <span class="type">reference</span>: leftParam) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: actionFound <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">ref_list</span>: subExprParams <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">addSubIntElementType</span>: addSubElement <span class="keywd">is</span> addSubIntElementType.value;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      actionFound := FALSE;
      <span class="keywd">if</span> category(leftParam) = CALLOBJECT <span class="keywd">then</span>
        subExprParams := getValue(leftParam, ref_list);
        <span class="keywd">if</span> category(subExprParams[1]) = ACTOBJECT <span class="keywd">then</span>
          <span class="keywd">if</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"INT_ADD"</span> <span class="keywd">then</span>
            leftParam := subExprParams[2];
            addSubElement.doAdd := TRUE;
            addSubElement.summand := subExprParams[4];
            addSubParamList := [] (addSubElement) &amp; addSubParamList;
            actionFound := TRUE;
          <span class="keywd">elsif</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"INT_SBTR"</span> <span class="keywd">then</span>
            leftParam := subExprParams[2];
            addSubElement.doAdd := FALSE;
            addSubElement.summand := subExprParams[4];
            addSubParamList := [] (addSubElement) &amp; addSubParamList;
            actionFound := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> <span class="op">not</span> actionFound;
    <span class="keywd">if</span> category(leftParam) = CALLOBJECT <span class="keywd">then</span>
      subExprParams := getValue(leftParam, ref_list);
      <span class="keywd">if</span> category(subExprParams[1]) = ACTOBJECT <span class="keywd">then</span>
        <span class="keywd">if</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"INT_SUCC"</span> <span class="keywd">then</span>
          addSubElement.doAdd := TRUE;
          addSubElement.summand := NIL;
          addSubElement.constSummand := 1;
          addSubParamList := [] (addSubElement) &amp; addSubParamList;
          generateAddSubParamList(addSubParamList, subExprParams[2]);
          actionFound := TRUE;
        <span class="keywd">elsif</span> str(getValue(subExprParams[1], ACTION)) = <span class="stri">"INT_PRED"</span> <span class="keywd">then</span>
          addSubElement.doAdd := FALSE;
          addSubElement.summand := NIL;
          addSubElement.constSummand := 1;
          addSubParamList := [] (addSubElement) &amp; addSubParamList;
          generateAddSubParamList(addSubParamList, subExprParams[2]);
          actionFound := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> actionFound <span class="keywd">then</span>
      addSubElement.doAdd := TRUE;
      addSubElement.summand := leftParam;
      addSubParamList := [] (addSubElement) &amp; addSubParamList;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">addSubIntListType</span>: getAddSubParamList (<span class="op">in</span> <span class="type">ref_list</span>: params,
    <span class="op">in</span> <span class="type">boolean</span>: doAdd) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">addSubIntListType</span>: addSubParamList <span class="keywd">is</span> 0 <span class="op">times</span> addSubIntElementType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubIntElementType</span>: addSubElement <span class="keywd">is</span> addSubIntElementType.value;
  <span class="keywd">begin</span>
    addSubElement.doAdd := doAdd;
    addSubElement.summand := params[3];
    addSubParamList := [] (addSubElement);
    generateAddSubParamList(addSubParamList, params[1]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">addSubIntListType</span>: getAddSubParamList (<span class="op">in</span> <span class="type">reference</span>: summand1,
    <span class="op">in</span> <span class="type">integer</span>: summand2) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">addSubIntListType</span>: addSubParamList <span class="keywd">is</span> 0 <span class="op">times</span> addSubIntElementType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubIntElementType</span>: addSubElement <span class="keywd">is</span> addSubIntElementType.value;
  <span class="keywd">begin</span>
    addSubElement.constSummand := summand2;
    addSubParamList := [] (addSubElement);
    generateAddSubParamList(addSubParamList, summand1);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: processNegations (<span class="keywd">inout</span> <span class="type">addSubIntListType</span>: addSubParamList,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">boolean</span>: doAdd <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">reference</span>: summand <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> addSubParamList <span class="keywd">do</span>
      <span class="keywd">if</span> index > 1 <span class="op">and</span> addSubParamList[index].summand &lt;> NIL <span class="keywd">then</span>
        doAdd := addSubParamList[index].doAdd;
        summand := addSubParamList[index].summand;
        <span class="keywd">while</span> isActionExpression(summand, <span class="stri">"INT_NEGATE"</span>) <span class="op">or</span>
              isActionExpression(summand, <span class="stri">"INT_PLUS"</span>) <span class="keywd">do</span>
          <span class="keywd">if</span> isActionExpression(summand, <span class="stri">"INT_NEGATE"</span>) <span class="keywd">then</span>
            <span class="comment"># Negate a negated value. No overflow check necessary.</span>
            countOverflowOptimizations(c_expr);
            doAdd := <span class="op">not</span> doAdd;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          summand := getActionParameter(summand, 2);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        addSubParamList[index].doAdd := doAdd;
        addSubParamList[index].summand := summand;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: summarizeConstants (<span class="keywd">inout</span> <span class="type">addSubIntListType</span>: addSubParamList) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: paramValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: bigSum <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> index &lt;= length(addSubParamList) <span class="keywd">do</span>
      <span class="keywd">if</span> addSubParamList[index].summand = NIL <span class="keywd">then</span>
        paramValue := addSubParamList[index].constSummand;
        <span class="keywd">if</span> index &lt; length(addSubParamList) <span class="op">and</span>
            addSubParamList[succ(index)].summand = NIL <span class="keywd">then</span>
          <span class="comment"># Two consecutive constant integers are added or subtracted at compile time.</span>
          <span class="keywd">if</span> addSubParamList[index].doAdd <span class="keywd">then</span>
            bigSum := bigInteger(paramValue);
          <span class="keywd">else</span>
            bigSum := -bigInteger(paramValue);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> addSubParamList[succ(index)].doAdd <span class="keywd">then</span>
            bigSum +:= bigInteger(addSubParamList[succ(index)].constSummand);
          <span class="keywd">else</span>
            bigSum -:= bigInteger(addSubParamList[succ(index)].constSummand);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> bigSum > bigInteger(integer.first) <span class="op">and</span> bigSum &lt; 0_ <span class="keywd">then</span>
            incr(countOptimizations);
            <span class="keywd">if</span> index > 1 <span class="keywd">then</span>
              addSubParamList[index].doAdd := FALSE;
              addSubParamList[index].constSummand := -ord(bigSum);
            <span class="keywd">else</span>
              addSubParamList[index].doAdd := TRUE;
              addSubParamList[index].constSummand := ord(bigSum);
            <span class="keywd">end</span> <span class="keywd">if</span>;
            ignore(remove(addSubParamList, succ(index)));
          <span class="keywd">elsif</span> bigSum > 0_ <span class="op">and</span> bigSum &lt;= bigInteger(integer.last) <span class="keywd">then</span>
            incr(countOptimizations);
            addSubParamList[index].doAdd := TRUE;
            addSubParamList[index].constSummand := ord(bigSum);
            ignore(remove(addSubParamList, succ(index)));
          <span class="keywd">elsif</span> bigSum = 0_ <span class="keywd">then</span>
            incr(countOptimizations);
            <span class="keywd">if</span> index > 1 <span class="op">or</span> length(addSubParamList) = 2 <span class="op">or</span>
                addSubParamList[3].doAdd <span class="keywd">then</span>
              ignore(remove(addSubParamList, index));
              ignore(remove(addSubParamList, index));
            <span class="keywd">else</span>
              addSubParamList[index].doAdd := TRUE;
              addSubParamList[index].constSummand := 0;
              ignore(remove(addSubParamList, succ(index)));
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> bigSum = bigInteger(integer.first) <span class="keywd">then</span>
            incr(countOptimizations);
            addSubParamList[index].doAdd := TRUE;
            addSubParamList[index].constSummand := integer.first;
            ignore(remove(addSubParamList, succ(index)));
          <span class="keywd">elsif</span> bigSum = -bigInteger(integer.first) <span class="keywd">then</span>
            incr(countOptimizations);
            <span class="keywd">if</span> index > 1 <span class="keywd">then</span>
              addSubParamList[index].doAdd := FALSE;
              addSubParamList[index].constSummand := integer.first;
              ignore(remove(addSubParamList, succ(index)));
            <span class="keywd">else</span>
              incr(index);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            incr(index);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> paramValue = 0 <span class="keywd">then</span>
          <span class="keywd">if</span> index > 1 <span class="op">or</span> index = length(addSubParamList) <span class="op">or</span>
              addSubParamList[succ(index)].doAdd <span class="keywd">then</span>
            <span class="comment"># Zero elements are removed.</span>
            incr(countOptimizations);
            ignore(remove(addSubParamList, index));
          <span class="keywd">else</span>
            incr(index);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          incr(index);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        incr(index);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: evaluateConstants (<span class="keywd">inout</span> <span class="type">addSubIntListType</span>: addSubParamList) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: paramValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> addSubParamList <span class="keywd">do</span>
      <span class="keywd">if</span> addSubParamList[index].summand &lt;> NIL <span class="keywd">then</span>
        <span class="keywd">if</span> getConstant(addSubParamList[index].summand, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
          paramValue := getValue(evaluatedParam, integer);
          addSubParamList[index].summand := NIL;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        paramValue := addSubParamList[index].constSummand;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> addSubParamList[index].summand = NIL <span class="keywd">then</span>
        <span class="keywd">if</span> index > 1 <span class="op">and</span> paramValue > integer.first <span class="op">and</span> paramValue &lt; 0 <span class="keywd">then</span>
          addSubParamList[index].doAdd := <span class="op">not</span> addSubParamList[index].doAdd;
          addSubParamList[index].constSummand := -paramValue;
        <span class="keywd">else</span>
          addSubParamList[index].constSummand := paramValue;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computeConstants (<span class="keywd">inout</span> <span class="type">addSubIntListType</span>: addSubParamList) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    summarizeConstants(addSubParamList);
    <span class="keywd">if</span> length(addSubParamList) >= 2 <span class="op">and</span>
        addSubParamList[1].doAdd <span class="op">and</span> addSubParamList[1].summand = NIL <span class="op">and</span>
        addSubParamList[2].doAdd <span class="op">and</span> addSubParamList[2].summand &lt;> NIL <span class="keywd">then</span>
      <span class="comment"># Exchange the first and the second summand.</span>
      <span class="comment"># This way constants before and after the first expression can be combined.</span>
      <span class="comment"># Other summands cannot be exchanged without changing overflow behavior.</span>
      addSubParamList[1].summand := addSubParamList[2].summand;
      addSubParamList[2].summand := NIL;
      addSubParamList[2].constSummand := addSubParamList[1].constSummand;
      summarizeConstants(addSubParamList);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkIfOutsideRange (<span class="op">in</span> <span class="type">string</span>: number_name, <span class="op">in</span> <span class="type">integer</span>: lowerBound,
    <span class="op">in</span> <span class="type">integer</span>: upperBound, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
      <span class="comment">(* Formula used: (uintType)x-l>(uintType)u-l *)</span>
      c_expr.expr &amp;:= <span class="stri">"(uintType)"</span>;
      c_expr.expr &amp;:= number_name;
      <span class="keywd">if</span> lowerBound &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"+(uintType)"</span>;
        c_expr.expr &amp;:= integerLiteral(-lowerBound);
      <span class="keywd">elsif</span> lowerBound > 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"-(uintType)"</span>;
        c_expr.expr &amp;:= integerLiteral(lowerBound);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">">(uintType)"</span>;
      c_expr.expr &amp;:= integerLiteral(upperBound - lowerBound);
    <span class="keywd">else</span>
      <span class="comment">(* Formula used: x&lt;l||x>u *)</span>
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
      c_expr.expr &amp;:= integerLiteral(lowerBound);
      c_expr.expr &amp;:= <span class="stri">"||"</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">">"</span>;
      c_expr.expr &amp;:= integerLiteral(upperBound);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: const_int_add_with_overflow_check (<span class="op">in</span> <span class="type">expr_type</span>: summand1Expr, <span class="op">in</span> <span class="type">integer</span>: summand2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: sumName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: summand1Name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> summand2 &lt;> -1 <span class="op">and</span> ccConf.BUILTIN_ADD_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      sumName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"sum_"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= ccConf.BUILTIN_ADD_OVERFLOW;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      c_expr.expr &amp;:= summand1Expr.expr;
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(summand2);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= sumName;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= sumName;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      summand1Name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"summand1_"</span>, summand1Expr, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= summand1Name;
      <span class="keywd">if</span> summand2 = -1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first);
      <span class="keywd">elsif</span> summand2 = 1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.last);
      <span class="keywd">elsif</span> summand2 &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first - summand2);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">">"</span>;
        c_expr.expr &amp;:= integerLiteral(integer.last - summand2);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= summand1Name;
      c_expr.expr &amp;:= <span class="stri">" + "</span>;
      c_expr.expr &amp;:= integerLiteral(summand2);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: const_int_sbtr_with_overflow_check (<span class="op">in</span> <span class="type">expr_type</span>: minuendExpr, <span class="op">in</span> <span class="type">integer</span>: subtrahend,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: differenceName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: minuendName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> subtrahend &lt;> 1 <span class="op">and</span> ccConf.BUILTIN_SUB_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      differenceName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"difference_"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= ccConf.BUILTIN_SUB_OVERFLOW;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      c_expr.expr &amp;:= minuendExpr.expr;
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(subtrahend);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= differenceName;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= differenceName;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      minuendName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"minuend_"</span>, minuendExpr, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= minuendName;
      <span class="keywd">if</span> subtrahend = -1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.last);
      <span class="keywd">elsif</span> subtrahend = 1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first);
      <span class="keywd">elsif</span> subtrahend &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">">"</span>;
        c_expr.expr &amp;:= integerLiteral(integer.last + subtrahend);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first + subtrahend);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= minuendName;
      c_expr.expr &amp;:= <span class="stri">" - "</span>;
      c_expr.expr &amp;:= integerLiteral(subtrahend);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: const_int_sbtr_with_overflow_check (<span class="op">in</span> <span class="type">integer</span>: minuend, <span class="op">in</span> <span class="type">expr_type</span>: subtrahendExpr,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: differenceName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: subtrahendName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.BUILTIN_SUB_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      differenceName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"difference_"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= ccConf.BUILTIN_SUB_OVERFLOW;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      c_expr.expr &amp;:= integerLiteral(minuend);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= subtrahendExpr.expr;
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= differenceName;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= differenceName;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      subtrahendName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"subtrahend_"</span>, subtrahendExpr, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= subtrahendName;
      <span class="keywd">if</span> minuend &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">">"</span>;
        c_expr.expr &amp;:= integerLiteral(-(integer.first - minuend));
      <span class="keywd">elsif</span> minuend = 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
        c_expr.expr &amp;:= integerLiteral(-(integer.last - minuend));
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      <span class="keywd">if</span> minuend &lt;> 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= integerLiteral(minuend);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">" - "</span>;
      c_expr.expr &amp;:= subtrahendName;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: int_add_with_overflow_check (<span class="op">in</span> <span class="type">expr_type</span>: summand1Expr, <span class="op">in</span> <span class="type">reference</span>: summand2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: sumName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: summand1Name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: summand2Name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.BUILTIN_ADD_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      sumName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"sum_"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= ccConf.BUILTIN_ADD_OVERFLOW;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      c_expr.expr &amp;:= summand1Expr.expr;
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(summand2, c_expr);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= sumName;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= sumName;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      summand1Name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"summand1_"</span>, summand1Expr, c_expr);
      summand2Name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"summand2_"</span>, summand2, c_expr);
      sumName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"sum_"</span>, c_expr);
      c_expr.expr &amp;:= sumName;
      c_expr.expr &amp;:= <span class="stri">"=(intType)((uintType)"</span>;
      c_expr.expr &amp;:= summand1Name;
      c_expr.expr &amp;:= <span class="stri">"+(uintType)"</span>;
      c_expr.expr &amp;:= summand2Name;
      c_expr.expr &amp;:= <span class="stri">"), "</span>;
      <span class="comment">(* Formula used: ovfChk((intType)(~(s1^s2)&amp;(sum^s1))&lt;0) *)</span>
      c_expr.expr &amp;:= <span class="stri">"ovfChk((intType)(~("</span>;
      c_expr.expr &amp;:= summand1Name;
      c_expr.expr &amp;:= <span class="stri">"^"</span>;
      c_expr.expr &amp;:= summand2Name;
      c_expr.expr &amp;:= <span class="stri">")&amp;("</span>;
      c_expr.expr &amp;:= sumName;
      c_expr.expr &amp;:= <span class="stri">"^"</span>;
      c_expr.expr &amp;:= summand1Name;
      c_expr.expr &amp;:= <span class="stri">"))&lt;0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= sumName;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: int_sbtr_with_overflow_check (<span class="op">in</span> <span class="type">expr_type</span>: minuendExpr, <span class="op">in</span> <span class="type">reference</span>: subtrahend,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: differenceName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: minuendName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: subtrahendName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.BUILTIN_SUB_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      differenceName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"difference_"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= ccConf.BUILTIN_SUB_OVERFLOW;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      c_expr.expr &amp;:= minuendExpr.expr;
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(subtrahend, c_expr);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= differenceName;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= differenceName;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      minuendName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"minuend_"</span>, minuendExpr, c_expr);
      subtrahendName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"subtrahend_"</span>, subtrahend, c_expr);
      differenceName := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"difference_"</span>, c_expr);
      c_expr.expr &amp;:= differenceName;
      c_expr.expr &amp;:= <span class="stri">"=(intType)((uintType)"</span>;
      c_expr.expr &amp;:= minuendName;
      c_expr.expr &amp;:= <span class="stri">"-(uintType)"</span>;
      c_expr.expr &amp;:= subtrahendName;
      c_expr.expr &amp;:= <span class="stri">"), "</span>;
      <span class="comment">(* Formula used: ovfChk((intType)((m^s)&amp;(d^m))&lt;0) *)</span>
      c_expr.expr &amp;:= <span class="stri">"ovfChk((intType)(("</span>;
      c_expr.expr &amp;:= minuendName;
      c_expr.expr &amp;:= <span class="stri">"^"</span>;
      c_expr.expr &amp;:= subtrahendName;
      c_expr.expr &amp;:= <span class="stri">")&amp;("</span>;
      c_expr.expr &amp;:= differenceName;
      c_expr.expr &amp;:= <span class="stri">"^"</span>;
      c_expr.expr &amp;:= minuendName;
      c_expr.expr &amp;:= <span class="stri">"))&lt;0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= differenceName;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: int_mult_with_overflow_check (<span class="op">in</span> <span class="type">reference</span>: factor1, <span class="op">in</span> <span class="type">reference</span>: factor2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: factor1_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: factor2_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: factor1_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: factor2_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: product_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.BUILTIN_MULT_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      product_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"product_"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= ccConf.BUILTIN_MULT_OVERFLOW;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(factor1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(factor2, c_expr);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= product_name;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= product_name;
    <span class="keywd">elsif</span> ccConf.INTTYPE_SIZE = 64 <span class="op">and</span> ccConf.INT128TYPE &lt;> <span class="stri">""</span> <span class="op">or</span>
          ccConf.INTTYPE_SIZE = 32 <span class="keywd">then</span>
      product_name := defineTempVariable(<span class="stri">"doubleIntType"</span>, <span class="stri">"product_"</span>, c_expr);
      c_expr.expr &amp;:= product_name;
      c_expr.expr &amp;:= <span class="stri">"=(doubleIntType)("</span>;
      process_expr(factor1, c_expr);
      c_expr.expr &amp;:= <span class="stri">") * (doubleIntType)("</span>;
      process_expr(factor2, c_expr);
      c_expr.expr &amp;:= <span class="stri">"),ovfChk(!inIntTypeRange("</span>;
      c_expr.expr &amp;:= product_name;
      c_expr.expr &amp;:= <span class="stri">"))?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":(intType)"</span>;
      c_expr.expr &amp;:= product_name;
    <span class="keywd">else</span>
      factor1_range := getIntRange(factor1);
      factor2_range := getIntRange(factor2);
      factor1_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"factor1_"</span>, factor1, c_expr);
      factor2_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"factor2_"</span>, factor2, c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      <span class="keywd">if</span> factor1_range.minValue &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= factor1_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;0?"</span>;
        <span class="keywd">if</span> factor2_range.maxValue &lt; 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor1_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.last);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor2_name;
        <span class="keywd">elsif</span> factor2_range.minValue &lt; 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
          <span class="keywd">if</span> factor2_range.minValue &lt; 0 <span class="op">and</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"?"</span>;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= factor1_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.last);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor2_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor2_range.minValue &lt; 0 <span class="op">and</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">":("</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor2_range.minValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor1_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor2_name;
        <span class="keywd">elsif</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">">0"</span>;
          c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
          c_expr.expr &amp;:= factor1_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor2_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor2_range.minValue &lt; 0 <span class="op">and</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor1_range.maxValue &lt;= 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">":0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> factor1_range.minValue &lt; 0 <span class="op">and</span> factor1_range.maxValue > 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">":("</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> factor1_range.maxValue > 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= factor1_name;
        c_expr.expr &amp;:= <span class="stri">">0?"</span>;
        <span class="keywd">if</span> factor2_range.maxValue &lt; 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor1_name;
        <span class="keywd">elsif</span> factor2_range.minValue &lt; 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
          <span class="keywd">if</span> factor2_range.minValue &lt; 0 <span class="op">and</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"?"</span>;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor1_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor2_range.minValue &lt; 0 <span class="op">and</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">":("</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor2_range.minValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">">"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.last);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor1_name;
        <span class="keywd">elsif</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">">0"</span>;
          c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
          c_expr.expr &amp;:= factor2_name;
          c_expr.expr &amp;:= <span class="stri">">"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.last);
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= factor1_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor2_range.minValue &lt; 0 <span class="op">and</span> factor2_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> factor1_range.minValue >= 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">":0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> factor1_range.minValue &lt; 0 <span class="op">and</span> factor1_range.maxValue > 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">":0)"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= factor1_name;
      c_expr.expr &amp;:= <span class="stri">" * "</span>;
      c_expr.expr &amp;:= factor2_name;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: negate (<span class="op">in</span> <span class="type">reference</span>: number, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> reduceOverflowChecks <span class="op">and</span>
        isActionExpression(number, <span class="stri">"INT_NEGATE"</span>) <span class="keywd">then</span>
      <span class="comment"># Negate a negated value. No overflow check necessary.</span>
      countOverflowOptimizations(c_expr);
      c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_negate_of_negate*/"</span>;
      process_expr(getActionParameter(number, 2), c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="op">and</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
      number_range := getIntRange(number);
      <span class="keywd">if</span> number_range.minValue >= -integer.last <span class="keywd">then</span>
        <span class="comment"># This negation cannot overflow</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_negate*/-("</span>;
        process_expr(number, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, number, c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">": -"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"-("</span>;
      process_expr(number, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_add (<span class="op">in</span> <span class="type">reference</span>: summand1, <span class="op">in</span> <span class="type">integer</span>: summand2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedSummand1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedSummand1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: summand1_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: summand1_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: summand1Expr <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> summand2 &lt; 0 <span class="keywd">then</span>
      minAllowedSummand1 := integer.first - summand2;
      maxAllowedSummand1 := integer.last;
    <span class="keywd">else</span>
      minAllowedSummand1 := integer.first;
      maxAllowedSummand1 := integer.last - summand2;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> getConstant(summand1, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      summand1_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span>  summand1_value &lt; minAllowedSummand1 <span class="op">or</span>
          summand1_value > maxAllowedSummand1 <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(summand1_value + summand2);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> summand2 = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(summand1, c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      summand1_range := getIntRange(summand1);
      <span class="keywd">if</span> summand1_range &lt;> intRange.value <span class="op">and</span>
          summand1_range.minValue >= minAllowedSummand1 <span class="op">and</span>
          summand1_range.maxValue &lt;= maxAllowedSummand1 <span class="keywd">then</span>
        <span class="comment"># This addition cannot overflow</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_add*/("</span>;
        process_expr(summand1, c_expr);
        c_expr.expr &amp;:= <span class="stri">") + "</span>;
        c_expr.expr &amp;:= integerLiteral(summand2);
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        summand1Expr.temp_num := c_expr.temp_num;
        process_expr(summand1, summand1Expr);
        c_expr.temp_num := summand1Expr.temp_num;
        c_expr.temp_decls &amp;:= summand1Expr.temp_decls;
        c_expr.temp_assigns &amp;:= summand1Expr.temp_assigns;
        c_expr.temp_frees &amp;:= summand1Expr.temp_frees;
        c_expr.temp_to_null &amp;:= summand1Expr.temp_to_null;
        const_int_add_with_overflow_check(summand1Expr, summand2, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(summand1, c_expr);
      c_expr.expr &amp;:= <span class="stri">") + "</span>;
      c_expr.expr &amp;:= integerLiteral(summand2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_int_add (<span class="op">in</span> <span class="type">reference</span>: summand1, <span class="op">in</span> <span class="type">reference</span>: summand2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: summand1_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: summand2_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedSummand2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedSummand2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: fullOverflowCheck <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">expr_type</span>: summand1Expr <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: summand1_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: summand2_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      summand1_range := getIntRange(summand1);
      summand2_range := getIntRange(summand2);
      <span class="keywd">if</span> summand1_range &lt;> intRange.value <span class="op">and</span> summand2_range &lt;> intRange.value <span class="keywd">then</span>
        <span class="keywd">if</span> summand1_range.minValue &lt; 0 <span class="keywd">then</span>
          minAllowedSummand2 := integer.first - summand1_range.minValue;
        <span class="keywd">else</span>
          minAllowedSummand2 := integer.first;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> summand1_range.maxValue > 0 <span class="keywd">then</span>
          maxAllowedSummand2 := integer.last - summand1_range.maxValue;
        <span class="keywd">else</span>
          maxAllowedSummand2 := integer.last;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span>  summand2_range.minValue >= minAllowedSummand2 <span class="op">and</span>
            summand2_range.maxValue &lt;= maxAllowedSummand2 <span class="keywd">then</span>
          <span class="comment"># This addition cannot overflow</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_add*/("</span>;
          process_expr(summand1, c_expr);
          c_expr.expr &amp;:= <span class="stri">") + ("</span>;
          process_expr(summand2, c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">elsif</span> summand2_range.minValue >= minAllowedSummand2 <span class="op">or</span>
              summand2_range.maxValue &lt;= maxAllowedSummand2 <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"/*simplified_overflow_check_add*/("</span>;
          summand1_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"summand1_"</span>, summand1, c_expr);
          summand2_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"summand2_"</span>, summand2, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= summand2_name;
          <span class="keywd">if</span> summand2_range.maxValue &lt;= maxAllowedSummand2 <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;"</span>;
            c_expr.expr &amp;:= summand1_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
            c_expr.expr &amp;:= integerLiteral(integer.first);
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">">=0&amp;&amp;"</span>;
            c_expr.expr &amp;:= summand1_name;
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= integerLiteral(integer.last);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"-"</span>;
          c_expr.expr &amp;:= summand2_name;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= summand1_name;
          c_expr.expr &amp;:= <span class="stri">" + "</span>;
          c_expr.expr &amp;:= summand2_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          fullOverflowCheck := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        fullOverflowCheck := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> fullOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        <span class="keywd">if</span> summand1 = summand2 <span class="keywd">then</span>
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          summand1_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"summand1_"</span>, summand1, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          checkIfOutsideRange(summand1_name, integer.first <span class="op">div</span> 2,
                              integer.last <span class="op">div</span> 2, c_expr);
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= summand1_name;
          c_expr.expr &amp;:= <span class="stri">" + "</span>;
          c_expr.expr &amp;:= summand1_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          summand1Expr.temp_num := c_expr.temp_num;
          process_expr(summand1, summand1Expr);
          c_expr.temp_num := summand1Expr.temp_num;
          c_expr.temp_decls &amp;:= summand1Expr.temp_decls;
          c_expr.temp_assigns &amp;:= summand1Expr.temp_assigns;
          c_expr.temp_frees &amp;:= summand1Expr.temp_frees;
          c_expr.temp_to_null &amp;:= summand1Expr.temp_to_null;
          int_add_with_overflow_check(summand1Expr, summand2, c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(summand1, c_expr);
      c_expr.expr &amp;:= <span class="stri">") + ("</span>;
      process_expr(summand2, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_sbtr (<span class="op">in</span> <span class="type">reference</span>: minuend, <span class="op">in</span> <span class="type">integer</span>: subtrahend,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedMinuend <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedMinuend <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: minuend_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: minuend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: minuendExpr <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> subtrahend &lt; 0 <span class="keywd">then</span>
      minAllowedMinuend := integer.first;
      maxAllowedMinuend := integer.last + subtrahend;
    <span class="keywd">else</span>
      minAllowedMinuend := integer.first + subtrahend;
      maxAllowedMinuend := integer.last;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> getConstant(minuend, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      minuend_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span>  minuend_value &lt; minAllowedMinuend <span class="op">or</span>
          minuend_value > maxAllowedMinuend <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(minuend_value - subtrahend);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> subtrahend = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(minuend, c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      minuend_range := getIntRange(minuend);
      <span class="keywd">if</span> minuend_range &lt;> intRange.value <span class="op">and</span>
          minuend_range.minValue >= minAllowedMinuend <span class="op">and</span>
          minuend_range.maxValue &lt;= maxAllowedMinuend <span class="keywd">then</span>
        <span class="comment"># This subtraction cannot overflow</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_sbtr*/("</span>;
        process_expr(minuend, c_expr);
        c_expr.expr &amp;:= <span class="stri">") - "</span>;
        c_expr.expr &amp;:= integerLiteral(subtrahend);
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        minuendExpr.temp_num := c_expr.temp_num;
        process_expr(minuend, minuendExpr);
        c_expr.temp_num := minuendExpr.temp_num;
        c_expr.temp_decls &amp;:= minuendExpr.temp_decls;
        c_expr.temp_assigns &amp;:= minuendExpr.temp_assigns;
        c_expr.temp_frees &amp;:= minuendExpr.temp_frees;
        c_expr.temp_to_null &amp;:= minuendExpr.temp_to_null;
        const_int_sbtr_with_overflow_check(minuendExpr, subtrahend, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(minuend, c_expr);
      c_expr.expr &amp;:= <span class="stri">") - "</span>;
      c_expr.expr &amp;:= integerLiteral(subtrahend);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_sbtr (<span class="op">in</span> <span class="type">integer</span>: minuend, <span class="op">in</span> <span class="type">reference</span>: subtrahend,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedSubtrahend <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedSubtrahend <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: subtrahend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: subtrahendExpr <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> minuend &lt; 0 <span class="keywd">then</span>
      minAllowedSubtrahend := integer.first;
      maxAllowedSubtrahend := minuend - integer.first;
    <span class="keywd">else</span>
      minAllowedSubtrahend := minuend - integer.last;
      maxAllowedSubtrahend := integer.last;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> minuend = 0 <span class="keywd">then</span>
      negate(subtrahend, c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      subtrahend_range := getIntRange(subtrahend);
      <span class="keywd">if</span> subtrahend_range &lt;> intRange.value <span class="op">and</span>
          subtrahend_range.minValue >= minAllowedSubtrahend <span class="op">and</span>
          subtrahend_range.maxValue &lt;= maxAllowedSubtrahend <span class="keywd">then</span>
        <span class="comment"># This subtraction cannot overflow</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_sbtr*/ "</span>;
        c_expr.expr &amp;:= integerLiteral(minuend);
        c_expr.expr &amp;:= <span class="stri">" - ("</span>;
        process_expr(subtrahend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        subtrahendExpr.temp_num := c_expr.temp_num;
        process_expr(subtrahend, subtrahendExpr);
        c_expr.temp_num := subtrahendExpr.temp_num;
        c_expr.temp_decls &amp;:= subtrahendExpr.temp_decls;
        c_expr.temp_assigns &amp;:= subtrahendExpr.temp_assigns;
        c_expr.temp_frees &amp;:= subtrahendExpr.temp_frees;
        c_expr.temp_to_null &amp;:= subtrahendExpr.temp_to_null;
        const_int_sbtr_with_overflow_check(minuend, subtrahendExpr, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= integerLiteral(minuend);
      c_expr.expr &amp;:= <span class="stri">" - ("</span>;
      process_expr(subtrahend, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_int_sbtr (<span class="op">in</span> <span class="type">reference</span>: minuend, <span class="op">in</span> <span class="type">reference</span>: subtrahend,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: minuend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: subtrahend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedSubtrahend <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedSubtrahend <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: fullOverflowCheck <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">expr_type</span>: minuendExpr <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: minuend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: subtrahend_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> minuend = subtrahend <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"0"</span>;
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      minuend_range := getIntRange(minuend);
      subtrahend_range := getIntRange(subtrahend);
      <span class="keywd">if</span> minuend_range &lt;> intRange.value <span class="op">and</span> subtrahend_range &lt;> intRange.value <span class="keywd">then</span>
        <span class="keywd">if</span> minuend_range.maxValue > 0 <span class="keywd">then</span>
          minAllowedSubtrahend := minuend_range.maxValue - integer.last;
        <span class="keywd">else</span>
          minAllowedSubtrahend := -integer.last;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> minuend_range.minValue &lt; 0 <span class="keywd">then</span>
          maxAllowedSubtrahend := minuend_range.minValue - integer.first;
        <span class="keywd">else</span>
          maxAllowedSubtrahend := integer.last;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span>  subtrahend_range.minValue >= minAllowedSubtrahend <span class="op">and</span>
            subtrahend_range.maxValue &lt;= maxAllowedSubtrahend <span class="keywd">then</span>
          <span class="comment"># This subtraction cannot overflow</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_sbtr*/("</span>;
          process_expr(minuend, c_expr);
          c_expr.expr &amp;:= <span class="stri">") - ("</span>;
          process_expr(subtrahend, c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">elsif</span> subtrahend_range.minValue >= minAllowedSubtrahend <span class="op">or</span>
              subtrahend_range.maxValue &lt;= maxAllowedSubtrahend <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"/*simplified_overflow_check_sbtr*/("</span>;
          minuend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"minuend_"</span>, minuend, c_expr);
          subtrahend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"subtrahend_"</span>, subtrahend, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= subtrahend_name;
          <span class="keywd">if</span> subtrahend_range.minValue >= minAllowedSubtrahend <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;"</span>;
            c_expr.expr &amp;:= minuend_name;
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= integerLiteral(integer.last);
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">">=0&amp;&amp;"</span>;
            c_expr.expr &amp;:= minuend_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
            c_expr.expr &amp;:= integerLiteral(integer.first);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"+"</span>;
          c_expr.expr &amp;:= subtrahend_name;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= minuend_name;
          c_expr.expr &amp;:= <span class="stri">" - "</span>;
          c_expr.expr &amp;:= subtrahend_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          fullOverflowCheck := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        fullOverflowCheck := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> fullOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        minuendExpr.temp_num := c_expr.temp_num;
        process_expr(minuend, minuendExpr);
        c_expr.temp_num := minuendExpr.temp_num;
        c_expr.temp_decls &amp;:= minuendExpr.temp_decls;
        c_expr.temp_assigns &amp;:= minuendExpr.temp_assigns;
        c_expr.temp_frees &amp;:= minuendExpr.temp_frees;
        c_expr.temp_to_null &amp;:= minuendExpr.temp_to_null;
        int_sbtr_with_overflow_check(minuendExpr, subtrahend, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(minuend, c_expr);
      c_expr.expr &amp;:= <span class="stri">") - ("</span>;
      process_expr(subtrahend, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_add (<span class="op">in</span> <span class="type">addSubIntElementType</span>: summand,
    <span class="keywd">inout</span> <span class="type">intRange</span>: sumRange, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> summand.summand = NIL <span class="keywd">then</span>
      <span class="keywd">if</span> summand.doAdd <span class="keywd">then</span>
        sumRange := getIntRange(summand.constSummand);
        c_expr.expr &amp;:= integerLiteral(summand.constSummand);
      <span class="keywd">else</span>
        sumRange := getIntNegateRange(getIntRange(summand.constSummand));
        <span class="keywd">if</span> summand.constSummand &lt; -integer.last <span class="keywd">then</span>
          warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        <span class="keywd">else</span>
          c_expr.expr &amp;:= integerLiteral(-summand.constSummand);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> summand.doAdd <span class="keywd">then</span>
        sumRange := getIntRange(summand.summand);
        process_expr(summand.summand, c_expr);
      <span class="keywd">else</span>
        sumRange := getIntNegateRange(getIntRange(summand.summand));
        negate(summand.summand, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_add (<span class="op">in</span> <span class="type">addSubIntListType</span>: addSubParamList,
    <span class="keywd">inout</span> <span class="type">intRange</span>: sumRange, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: summand1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: summand2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: summand1Expr <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">reference</span>: summand2Ref <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: summand2Value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: doAdd <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(addSubParamList) >= 2 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
        summand1Expr.temp_num := c_expr.temp_num;
        optimize_int_add(addSubParamList[.. pred(length(addSubParamList))], summand1Range, summand1Expr);
        c_expr.temp_num := summand1Expr.temp_num;
        c_expr.temp_decls &amp;:= summand1Expr.temp_decls;
        c_expr.temp_assigns &amp;:= summand1Expr.temp_assigns;
        c_expr.temp_frees &amp;:= summand1Expr.temp_frees;
        c_expr.temp_to_null &amp;:= summand1Expr.temp_to_null;
        doAdd := addSubParamList[length(addSubParamList)].doAdd;
        summand2Ref := addSubParamList[length(addSubParamList)].summand;
        <span class="keywd">if</span> summand2Ref = NIL <span class="keywd">then</span>
          summand2Value := addSubParamList[length(addSubParamList)].constSummand;
          <span class="keywd">if</span> summand2Value = 0 <span class="keywd">then</span>
            <span class="comment"># This should never happen because 0 should have been optimized out.</span>
            writeln(<span class="stri">" ***** Problem in optimize_int_add (1)"</span>);
            sumRange := summand1Range;
            c_expr.expr &amp;:= summand1Expr.expr;
          <span class="keywd">else</span>
            summand2Range := getIntRange(summand2Value);
            <span class="keywd">if</span> doAdd <span class="keywd">then</span>
              sumRange := getIntAddRange(summand1Range, summand2Range);
            <span class="keywd">else</span>
              sumRange := getIntSbtrRange(summand1Range, summand2Range);
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> <span class="op">not</span> sumRange.mayOverflow <span class="keywd">then</span>
              countOverflowOptimizations(c_expr);
              <span class="keywd">if</span> doAdd <span class="keywd">then</span>
                c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_add*/("</span>;
                c_expr.expr &amp;:= summand1Expr.expr;
                c_expr.expr &amp;:= <span class="stri">") + "</span>;
              <span class="keywd">else</span>
                c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_sbtr*/("</span>;
                c_expr.expr &amp;:= summand1Expr.expr;
                c_expr.expr &amp;:= <span class="stri">") - "</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              c_expr.expr &amp;:= integerLiteral(summand2Value);
            <span class="keywd">elsif</span> sumRange.minValue = 0 <span class="op">and</span> sumRange.maxValue = -1 <span class="op">and</span> sumRange.mayOverflow <span class="keywd">then</span>
              warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            <span class="keywd">else</span>
              incr(countOverflowChecks);
              <span class="keywd">if</span> doAdd <span class="keywd">then</span>
                const_int_add_with_overflow_check(summand1Expr, summand2Value, c_expr);
              <span class="keywd">else</span>
                const_int_sbtr_with_overflow_check(summand1Expr, summand2Value, c_expr);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          summand2Range := getIntRange(summand2Ref);
          <span class="keywd">if</span> doAdd <span class="keywd">then</span>
            sumRange := getIntAddRange(summand1Range, summand2Range);
          <span class="keywd">else</span>
            sumRange := getIntSbtrRange(summand1Range, summand2Range);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> <span class="op">not</span> sumRange.mayOverflow <span class="keywd">then</span>
            countOverflowOptimizations(c_expr);
            <span class="keywd">if</span> doAdd <span class="keywd">then</span>
              c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_add*/("</span>;
              c_expr.expr &amp;:= summand1Expr.expr;
              c_expr.expr &amp;:= <span class="stri">") + ("</span>;
            <span class="keywd">else</span>
              c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_sbtr*/("</span>;
              c_expr.expr &amp;:= summand1Expr.expr;
              c_expr.expr &amp;:= <span class="stri">") - ("</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            process_expr(summand2Ref, c_expr);
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">elsif</span> sumRange.minValue = 0 <span class="op">and</span> sumRange.maxValue = -1 <span class="keywd">then</span>
            warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          <span class="keywd">else</span>
            incr(countOverflowChecks);
            <span class="keywd">if</span> doAdd <span class="keywd">then</span>
              int_add_with_overflow_check(summand1Expr, summand2Ref, c_expr);
            <span class="keywd">else</span>
              int_sbtr_with_overflow_check(summand1Expr, summand2Ref, c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        optimize_int_add(addSubParamList[.. pred(length(addSubParamList))], summand1Range, c_expr);
        <span class="keywd">if</span> addSubParamList[length(addSubParamList)].doAdd <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">") + "</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">") - "</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> addSubParamList[length(addSubParamList)].summand = NIL <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(addSubParamList[length(addSubParamList)].constSummand);
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(addSubParamList[length(addSubParamList)].summand, c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> length(addSubParamList) = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      optimize_int_add(addSubParamList[1], sumRange, c_expr);
    <span class="keywd">else</span>
      incr(countOptimizations);
      sumRange := getIntRange(0);
      c_expr.expr &amp;:= integerLiteral(0);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_add (<span class="op">in</span> <span class="type">ref_list</span>: params, <span class="op">in</span> <span class="type">boolean</span>: doAdd,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubIntListType</span>: addSubParamList <span class="keywd">is</span> 0 <span class="op">times</span> addSubIntElementType.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: sumRange <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    addSubParamList := getAddSubParamList(params, doAdd);
    processNegations(addSubParamList, c_expr);
    evaluateConstants(addSubParamList);
    computeConstants(addSubParamList);
    optimize_int_add(addSubParamList, sumRange, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_add (<span class="op">in</span> <span class="type">reference</span>: summand1, <span class="op">in</span> <span class="type">integer</span>: summand2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubIntListType</span>: addSubParamList <span class="keywd">is</span> 0 <span class="op">times</span> addSubIntElementType.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: sumRange <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    addSubParamList := getAddSubParamList(summand1, summand2);
    processNegations(addSubParamList, c_expr);
    evaluateConstants(addSubParamList);
    computeConstants(addSubParamList);
    optimize_int_add(addSubParamList, sumRange, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: constValueIsEqual (<span class="op">in</span> <span class="type">reference</span>: anExpr, <span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isEqual <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: aParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> category(anExpr) = INTOBJECT <span class="op">and</span>
        <span class="op">not</span> isVar(anExpr) <span class="op">and</span>
        getValue(anExpr, integer) = number <span class="keywd">then</span>
      isEqual := TRUE;
    <span class="keywd">elsif</span> number &lt; 0 <span class="keywd">then</span>
      <span class="keywd">if</span> isActionExpression(anExpr, <span class="stri">"INT_NEGATE"</span>) <span class="keywd">then</span>
        aParam := getActionParameter(anExpr, 2);
        <span class="keywd">if</span> category(aParam) = INTOBJECT <span class="op">and</span>
            <span class="op">not</span> isVar(aParam) <span class="op">and</span>
            getValue(aParam, integer) = -number <span class="keywd">then</span>
          isEqual := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_int_str (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.ALLOW_STRITYPE_SLICES <span class="op">and</span> c_expr.demand &lt; ASSIGN_RESULT <span class="keywd">then</span>
      incr(c_expr.temp_num);
      buffer_name := <span class="stri">"buffer_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"union {\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  struct striStruct striBuf;\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  char charBuf[SIZ_STRI(INTTYPE_DECIMAL_SIZE)];\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"} "</span>;
      c_expr.temp_decls &amp;:= buffer_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"intStrToBuffer("</span>;
      process_expr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf)"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intStr("</span>;
      getStdParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_ABS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: sign_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      number := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> number = integer.first <span class="op">and</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(abs(number));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      number_range := getIntRange(params[1]);
      <span class="keywd">if</span> check_int_abs_overflow <span class="op">and</span> number_range.minValue = integer.first <span class="keywd">then</span>
        <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
          <span class="keywd">if</span> number_range.maxValue &lt;= 0 <span class="keywd">then</span>
            incr(countOptimizations);
            c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"=="</span>;
            c_expr.expr &amp;:= integerLiteral(integer.first);
            c_expr.expr &amp;:= <span class="stri">")?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">": /*abs_of_nonpositive_number*/-"</span>;
            c_expr.expr &amp;:= number_name;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;0?"</span>;
            c_expr.expr &amp;:= <span class="stri">"(ovfChk("</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"=="</span>;
            c_expr.expr &amp;:= integerLiteral(integer.first);
            c_expr.expr &amp;:= <span class="stri">")?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">": -"</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"):"</span>;
            c_expr.expr &amp;:= number_name;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          <span class="comment">(* There is a signal for integer overflow. *)</span>
          <span class="keywd">if</span> number_range.maxValue &lt;= 0 <span class="keywd">then</span>
            incr(countOptimizations);
            c_expr.expr &amp;:= <span class="stri">"/*abs_of_nonpositive_number*/-("</span>;
            process_expr(params[1], c_expr);
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">"("</span>;
            number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;0?"</span>;
            c_expr.expr &amp;:= <span class="stri">" -"</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">":"</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> check_int_abs_overflow <span class="op">and</span> check_int_arithmetic_overflow <span class="keywd">then</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number_range.minValue >= 0 <span class="keywd">then</span>
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"/*abs_of_nonnegative_number*/"</span>;
          process_expr(params[1], c_expr);
        <span class="keywd">elsif</span> number_range.maxValue &lt;= 0 <span class="keywd">then</span>
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"/*abs_of_nonpositive_number*/-("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">elsif</span> ccConf.INT_SIZE = ccConf.INTTYPE_SIZE <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"abs("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">elsif</span> ccConf.LONG_SIZE = ccConf.INTTYPE_SIZE <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"labs("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">elsif</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="op">and</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
          sign_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"sign_"</span>, c_expr);
          c_expr.expr &amp;:= sign_name;
          c_expr.expr &amp;:= <span class="stri">" = "</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">" >> "</span>;
          c_expr.expr &amp;:= str(pred(ccConf.INTTYPE_SIZE));
          c_expr.expr &amp;:= <span class="stri">", ("</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">" + "</span>;
          c_expr.expr &amp;:= sign_name;
          c_expr.expr &amp;:= <span class="stri">") ^ "</span>;
          c_expr.expr &amp;:= sign_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;0? (intType)(-(uintType)"</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">"):"</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_ADD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> callOptimizeIntAdd <span class="keywd">then</span>
      optimize_int_add(params, TRUE, c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_add(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_add(params[3], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span>
          category(params[3]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[3]) <span class="op">and</span>
          getValue(params[3], integer) = integer.first <span class="keywd">then</span>
      <span class="comment"># Special case to avoid a compiler error of icc.</span>
      process_const_int_add(params[1], integer.first, c_expr);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span>
          category(params[1]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[1]) <span class="op">and</span>
          getValue(params[1], integer) = integer.first <span class="keywd">then</span>
      <span class="comment"># Special case to avoid a compiler error of icc.</span>
      process_const_int_add(params[3], integer.first, c_expr);
    <span class="keywd">else</span>
      process_int_add(params[1], params[3], c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_add_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: delta,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> delta = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore integer +:= 0; */\n"</span>;
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, variable, statement);
      statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
      statement.expr &amp;:= variable_name;
      <span class="keywd">if</span> delta = -1 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
      <span class="keywd">elsif</span> delta = 1 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.last);
      <span class="keywd">elsif</span> delta &lt; 0 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"&lt;"</span>;
        statement.expr &amp;:= integerLiteral(integer.first - delta);
      <span class="keywd">else</span>
        statement.expr &amp;:= <span class="stri">">"</span>;
        statement.expr &amp;:= integerLiteral(integer.last - delta);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      statement.expr &amp;:= <span class="stri">")) {\n"</span>;
      statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"+="</span>;
      statement.expr &amp;:= integerLiteral(delta);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= <span class="stri">"}\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      process_expr(variable, statement);
      statement.expr &amp;:= <span class="stri">"+="</span>;
      statement.expr &amp;:= integerLiteral(delta);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_ADD_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: delta_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: deltaRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_add_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      deltaRange := getIntRange(params[3]);
      <span class="keywd">if</span> deltaRange.minValue = 0 <span class="op">and</span> deltaRange.maxValue = 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"/* ignore integer +:= 0; */\n"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, params[1], statement);
        <span class="keywd">if</span> ccConf.BUILTIN_ADD_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
          statement.expr &amp;:= ccConf.BUILTIN_ADD_OVERFLOW;
          statement.expr &amp;:= <span class="stri">"("</span>;
          statement.expr &amp;:= variable_name;
          statement.expr &amp;:= <span class="stri">", "</span>;
          process_expr(params[3], statement);
          statement.expr &amp;:= <span class="stri">", &amp;("</span>;
          statement.expr &amp;:= variable_name;
          statement.expr &amp;:= <span class="stri">")))?"</span>;
          statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          statement.expr &amp;:= <span class="stri">":0;\n"</span>;
        <span class="keywd">else</span>
          delta_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"delta_"</span>, params[3], statement);
          <span class="keywd">if</span> deltaRange.minValue &lt; 0 <span class="op">or</span> deltaRange.maxValue > 0 <span class="keywd">then</span>
            statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
            <span class="keywd">if</span> deltaRange.minValue &lt; 0 <span class="op">and</span> deltaRange.maxValue > 0 <span class="keywd">then</span>
              statement.expr &amp;:= delta_name;
              statement.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;"</span>;
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">"&lt;"</span>;
              statement.expr &amp;:= integerLiteral(integer.first);
              statement.expr &amp;:= <span class="stri">"-"</span>;
              statement.expr &amp;:= delta_name;
              statement.expr &amp;:= <span class="stri">" || "</span>;
              statement.expr &amp;:= delta_name;
              <span class="comment"># The comparison >= 0 supports optimizations by the C compiler.</span>
              statement.expr &amp;:= <span class="stri">">=0&amp;&amp;"</span>;
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">">"</span>;
              statement.expr &amp;:= integerLiteral(integer.last);
              statement.expr &amp;:= <span class="stri">"-"</span>;
              statement.expr &amp;:= delta_name;
            <span class="keywd">elsif</span> deltaRange.minValue &lt; 0 <span class="keywd">then</span>
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">"&lt;"</span>;
              statement.expr &amp;:= integerLiteral(integer.first);
              statement.expr &amp;:= <span class="stri">"-"</span>;
              statement.expr &amp;:= delta_name;
            <span class="keywd">else</span> <span class="comment"># deltaRange.maxValue > 0</span>
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">">"</span>;
              statement.expr &amp;:= integerLiteral(integer.last);
              statement.expr &amp;:= <span class="stri">"-"</span>;
              statement.expr &amp;:= delta_name;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            statement.expr &amp;:= <span class="stri">")?"</span>;
            statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            statement.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          statement.expr &amp;:= <span class="stri">"("</span>;
          statement.expr &amp;:= variable_name;
          statement.expr &amp;:= <span class="stri">"+="</span>;
          statement.expr &amp;:= delta_name;
          statement.expr &amp;:= <span class="stri">");\n"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        doLocalDeclsOfStatement(statement, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"+="</span>;
      process_expr(params[3], statement);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_binom (<span class="op">in</span> <span class="type">integer</span>: n_number, <span class="op">in</span> <span class="type">reference</span>: k_number,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: k_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(k_number, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">block</span>
        c_expr.expr &amp;:= integerLiteral(n_number ! getValue(evaluatedParam, integer));
      exception
        catch OVERFLOW_ERROR:
          warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">end</span> <span class="keywd">block</span>;
    <span class="keywd">elsif</span> n_number = -1 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      k_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"k_number_"</span>, k_number, c_expr);
      c_expr.expr &amp;:= k_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;0?0:("</span>;
      c_expr.expr &amp;:= k_name;
      c_expr.expr &amp;:= <span class="stri">"&amp;1?-1:1))"</span>;
    <span class="keywd">elsif</span> n_number = 0 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(k_number, c_expr);
      c_expr.expr &amp;:= <span class="stri">")==0?1:0"</span>;
    <span class="keywd">elsif</span> n_number = 1 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      k_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"k_number_"</span>, k_number, c_expr);
      c_expr.expr &amp;:= k_name;
      c_expr.expr &amp;:= <span class="stri">"==0||"</span>;
      c_expr.expr &amp;:= k_name;
      c_expr.expr &amp;:= <span class="stri">"==1?1:0)"</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> n_number >= 0 <span class="op">and</span>
          ((ccConf.INTTYPE_SIZE = 32 <span class="op">and</span> n_number &lt;= 30) <span class="op">or</span>
           (ccConf.INTTYPE_SIZE = 64 <span class="op">and</span> n_number &lt;= 62)) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"(intType) uintBinomNoChk((uintType) "</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"intBinom("</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= integerLiteral(n_number);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(k_number, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_binom (<span class="op">in</span> <span class="type">reference</span>: n_number, <span class="op">in</span> <span class="type">integer</span>: k_number,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> k_number &lt;= 1 <span class="keywd">then</span>
      <span class="keywd">if</span> k_number &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"/* binom(n, negative k) */ "</span>;
        c_expr.expr &amp;:= integerLiteral(0);
      <span class="keywd">elsif</span> k_number = 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"/* binom(n, 0) */ "</span>;
        c_expr.expr &amp;:= integerLiteral(1);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"/* binom(n, 1) */ "</span>;
        process_expr(n_number, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intBinom("</span>;
      process_expr(n_number, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(k_number);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BINOM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_binom(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_binom(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intBinom("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BIT_LENGTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intBitLength("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_BE_2_INT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intBytesBe2Int("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_bytes_2_uint_length_0 (<span class="op">in</span> <span class="type">reference</span>: stri,
    <span class="op">in</span> <span class="type">reference</span>: start, <span class="op">in</span> <span class="type">boolean</span>: fixedLengthSubstring,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">boolean</span>: stri_is_variable <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">string</span>: stri_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: stri_length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: stri_size <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: start_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: start_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: raisesException <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: logicalOr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    incr(countInlinedFunctions);
    start_range := getIntRange(start);
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    <span class="keywd">if</span> start_range.maxValue &lt; 1 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      raisesException := TRUE;
    <span class="keywd">elsif</span> getConstant(stri, STRIOBJECT, evaluatedParam) <span class="keywd">then</span>
      stri_is_variable := FALSE;
      stri_length := length(getValue(evaluatedParam, string));
      stri_size := memSizeLiteral(stri_length);
      <span class="keywd">if</span> start_range.minValue > stri_length <span class="keywd">then</span>
        <span class="keywd">if</span> fixedLengthSubstring <span class="keywd">then</span>
          warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
        <span class="keywd">else</span>
          warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        raisesException := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      stri_name := getParameterAsVariable(<span class="stri">"const_striType"</span>, <span class="stri">"stri_"</span>, stri, c_expr);
      stri_size := stri_name &amp; <span class="stri">"->size"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> raisesException <span class="keywd">then</span>
      <span class="keywd">if</span> getConstant(start, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
        start_name := integerLiteral(getValue(evaluatedParam, integer));
      <span class="keywd">else</span>
        start_name := getTempVariable(<span class="stri">"intType"</span>, <span class="stri">"start_"</span>, start, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> string_index_check <span class="keywd">then</span>
        <span class="keywd">if</span> start_range.minValue &lt; 1 <span class="op">or</span> (fixedLengthSubstring <span class="op">and</span>
            (stri_is_variable <span class="op">or</span> start_range.maxValue > stri_length)) <span class="keywd">then</span>
          incr(countIndexChecks);
          c_expr.expr &amp;:= <span class="stri">"idxChk("</span>;
          <span class="keywd">if</span> start_range.minValue &lt; 1 <span class="keywd">then</span>
            c_expr.expr &amp;:= start_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;1"</span>;
            logicalOr := <span class="stri">"||"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> fixedLengthSubstring <span class="op">and</span>
              (stri_is_variable <span class="op">or</span> start_range.maxValue > stri_length) <span class="keywd">then</span>
            c_expr.expr &amp;:= logicalOr;
            c_expr.expr &amp;:= start_name;
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= stri_size;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countIndexOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        incr(countSuppressedIndexChecks);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_bytes_2_uint_length_1 (<span class="op">in</span> <span class="type">reference</span>: stri,
    <span class="op">in</span> <span class="type">reference</span>: start, <span class="op">in</span> <span class="type">boolean</span>: fixedLengthSubstring,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">boolean</span>: stri_is_variable <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">string</span>: stri_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: stri_value <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: stri_length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: stri_size <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: start_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: start_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: start_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: raisesException <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: logicalOr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    incr(countInlinedFunctions);
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    <span class="keywd">if</span> getConstant(stri, STRIOBJECT, evaluatedParam) <span class="keywd">then</span>
      stri_is_variable := FALSE;
      stri_value := getValue(evaluatedParam, string);
      stri_name := <span class="stri">"("</span> &amp; stringLiteral(stri_value) &amp; <span class="stri">")"</span>;
      stri_length := length(stri_value);
      stri_size := memSizeLiteral(stri_length);
    <span class="keywd">else</span>
      stri_name := getParameterAsVariable(<span class="stri">"const_striType"</span>, <span class="stri">"stri_"</span>, stri, c_expr);
      stri_size := stri_name &amp; <span class="stri">"->size"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    start_range := getIntRange(start);
    <span class="keywd">if</span> start_range.maxValue &lt; 1 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      raisesException := TRUE;
    <span class="keywd">elsif</span> <span class="op">not</span> stri_is_variable <span class="op">and</span> start_range.minValue > stri_length <span class="keywd">then</span>
      <span class="keywd">if</span> fixedLengthSubstring <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      <span class="keywd">else</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      raisesException := TRUE;
    <span class="keywd">elsif</span> getConstant(start, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      start_value := getValue(evaluatedParam, integer);
      start_name := integerLiteral(start_value);
    <span class="keywd">else</span>
      start_name := getTempVariable(<span class="stri">"intType"</span>, <span class="stri">"start_"</span>, start, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> raisesException <span class="keywd">then</span>
      <span class="keywd">if</span> string_index_check <span class="keywd">then</span>
        <span class="keywd">if</span> start_range.minValue &lt; 1 <span class="op">or</span> (fixedLengthSubstring <span class="op">and</span>
            (stri_is_variable <span class="op">or</span> start_range.maxValue > stri_length)) <span class="keywd">then</span>
          incr(countIndexChecks);
          c_expr.expr &amp;:= <span class="stri">"idxChk("</span>;
          <span class="keywd">if</span> start_range.minValue &lt; 1 <span class="keywd">then</span>
            c_expr.expr &amp;:= start_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;1"</span>;
            logicalOr := <span class="stri">"||"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> fixedLengthSubstring <span class="op">and</span>
              (stri_is_variable <span class="op">or</span> start_range.maxValue > stri_length) <span class="keywd">then</span>
            c_expr.expr &amp;:= logicalOr;
            c_expr.expr &amp;:= start_name;
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= stri_size;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countIndexOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        incr(countSuppressedIndexChecks);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
        incr(countRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        <span class="keywd">if</span> <span class="op">not</span> fixedLengthSubstring <span class="keywd">then</span>
          c_expr.expr &amp;:= start_name;
          c_expr.expr &amp;:= <span class="stri">">"</span>;
          c_expr.expr &amp;:= stri_size;
          c_expr.expr &amp;:= <span class="stri">"||"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= start_name;
        c_expr.expr &amp;:= <span class="stri">"-1]>255)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"(intType)"</span>;
      c_expr.expr &amp;:= stri_name;
      c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
      c_expr.expr &amp;:= start_name;
      c_expr.expr &amp;:= <span class="stri">"-1])"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_bytes_be_2_uint (<span class="op">in</span> <span class="type">string</span>: stri_name, <span class="op">in</span> <span class="type">integer</span>: length,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length <span class="keywd">do</span>
      <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"|"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
        incr(countRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"(rngChk("</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]>"</span>;
        <span class="keywd">if</span> length = 8 <span class="op">and</span> index = 1 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"127"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"255"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":(intType)"</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index));
        c_expr.expr &amp;:= <span class="stri">"])"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"(intType)"</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> index &lt; length <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"&lt;&lt;"</span>;
        c_expr.expr &amp;:= integerLiteral((length - index) * 8);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_bytes_be_2_uint (<span class="op">in</span> <span class="type">reference</span>: stri, <span class="op">in</span> <span class="type">integer</span>: length,
    <span class="op">in</span> <span class="type">boolean</span>: fixedLengthSubstring, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt; 0 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
    <span class="keywd">elsif</span> length = 0 <span class="keywd">then</span>
      optimize_int_bytes_2_uint_length_0(getValue(stri, ref_list)[2],
          getValue(stri, ref_list)[4], fixedLengthSubstring, c_expr);
    <span class="keywd">elsif</span> length = 1 <span class="keywd">then</span>
      optimize_int_bytes_2_uint_length_1(getValue(stri, ref_list)[2],
          getValue(stri, ref_list)[4], fixedLengthSubstring, c_expr);
    <span class="keywd">elsif</span> length >= 2 <span class="op">and</span> length &lt;= 8 <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      stri_name := getParameterAsVariable(<span class="stri">"const_striType"</span>, <span class="stri">"stri_"</span>, stri, c_expr);
      <span class="keywd">if</span> fixedLengthSubstring <span class="keywd">then</span>
        optimize_int_bytes_be_2_uint(stri_name, length, c_expr);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->size=="</span>;
        c_expr.expr &amp;:= integerLiteral(length);
        c_expr.expr &amp;:= <span class="stri">"?("</span>;
        optimize_int_bytes_be_2_uint(stri_name, length, c_expr);
        c_expr.expr &amp;:= <span class="stri">"):intBytesBe2UInt("</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intBytesBe2UInt("</span>;
      getAnyParamToExpr(stri, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_BE_2_UINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        isActionExpression(params[1], <span class="stri">"STR_SUBSTR"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[1], 5), INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      optimize_int_bytes_be_2_uint(params[1],
          getValue(evaluatedParam, integer), FALSE, c_expr);
    <span class="keywd">elsif</span> inlineFunctions <span class="op">and</span>
        isActionExpression(params[1], <span class="stri">"STR_SUBSTR_FIXLEN"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[1], 5), INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      optimize_int_bytes_be_2_uint(params[1],
          getValue(evaluatedParam, integer), TRUE, c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intBytesBe2UInt("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_BE_SIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"intBytesBe("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", 1)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_BE_UNSIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"intBytesBe("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", 0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_LE_2_INT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intBytesLe2Int("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_bytes_le_2_uint (<span class="op">in</span> <span class="type">string</span>: stri_name, <span class="op">in</span> <span class="type">integer</span>: length,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length <span class="keywd">do</span>
      <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"|"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
        incr(countRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"(rngChk("</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]>"</span>;
        <span class="keywd">if</span> length = 8 <span class="op">and</span> index = 8 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"127"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"255"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":(intType)"</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index));
        c_expr.expr &amp;:= <span class="stri">"])"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"(intType)"</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->mem["</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"&lt;&lt;"</span>;
        c_expr.expr &amp;:= integerLiteral(pred(index) * 8);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_int_bytes_le_2_uint (<span class="op">in</span> <span class="type">reference</span>: stri, <span class="op">in</span> <span class="type">integer</span>: length,
    <span class="op">in</span> <span class="type">boolean</span>: fixedLengthSubstring, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt; 0 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
    <span class="keywd">elsif</span> length = 0 <span class="keywd">then</span>
      optimize_int_bytes_2_uint_length_0(getValue(stri, ref_list)[2],
          getValue(stri, ref_list)[4], fixedLengthSubstring, c_expr);
    <span class="keywd">elsif</span> length = 1 <span class="keywd">then</span>
      optimize_int_bytes_2_uint_length_1(getValue(stri, ref_list)[2],
          getValue(stri, ref_list)[4], fixedLengthSubstring, c_expr);
    <span class="keywd">elsif</span> length >= 2 <span class="op">and</span> length &lt;= 8 <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      stri_name := getParameterAsVariable(<span class="stri">"const_striType"</span>, <span class="stri">"stri_"</span>, stri, c_expr);
      <span class="keywd">if</span> fixedLengthSubstring <span class="keywd">then</span>
        optimize_int_bytes_le_2_uint(stri_name, length, c_expr);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">"->size=="</span>;
        c_expr.expr &amp;:= integerLiteral(length);
        c_expr.expr &amp;:= <span class="stri">"?("</span>;
        optimize_int_bytes_le_2_uint(stri_name, length, c_expr);
        c_expr.expr &amp;:= <span class="stri">"):intBytesLe2UInt("</span>;
        c_expr.expr &amp;:= stri_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intBytesLe2UInt("</span>;
      getAnyParamToExpr(stri, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_LE_2_UINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        isActionExpression(params[1], <span class="stri">"STR_SUBSTR"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[1], 5), INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      optimize_int_bytes_le_2_uint(params[1],
          getValue(evaluatedParam, integer), FALSE, c_expr);
    <span class="keywd">elsif</span> inlineFunctions <span class="op">and</span>
        isActionExpression(params[1], <span class="stri">"STR_SUBSTR_FIXLEN"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[1], 5), INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      optimize_int_bytes_le_2_uint(params[1],
          getValue(evaluatedParam, integer), TRUE, c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intBytesLe2UInt("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_LE_SIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"intBytesLe("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", 1)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_BYTES_LE_UNSIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"intBytesLe("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", 0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: number1_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: number2_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number1_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number1_"</span>, params[1], c_expr);
      number2_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number2_"</span>, params[2], c_expr);
      c_expr.expr &amp;:= number1_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
      c_expr.expr &amp;:= number2_name;
      c_expr.expr &amp;:= <span class="stri">"? -1 : "</span>;
      c_expr.expr &amp;:= number1_name;
      c_expr.expr &amp;:= <span class="stri">">"</span>;
      c_expr.expr &amp;:= number2_name;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intCmp("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
    c_expr.temp_num := statement.temp_num;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_DECR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        process_expr(params[1], c_param1);
        statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">")) {"</span>;
        statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">"} else --("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">else</span>
        incr(statement.temp_num);
        variable_name := <span class="stri">"var_"</span> &amp; str(statement.temp_num);
        statement.temp_decls &amp;:= <span class="stri">"intType *"</span>;
        statement.temp_decls &amp;:= variable_name;
        statement.temp_decls &amp;:= <span class="stri">";\n"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"=&amp;("</span>;
        process_expr(params[1], statement);
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"if (ovfChk(*"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">")) {"</span>;
        statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">"} else --(*"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"--("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_div (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">integer</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: dividend_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(dividend, INTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      incr(countOptimizations);
      dividend_value := getValue(evaluatedDividend, integer);
      <span class="keywd">if</span> divisor = -1 <span class="op">and</span> dividend_value &lt; -integer.last <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(dividend_value <span class="op">div</span> divisor);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> divisor = -1 <span class="keywd">then</span>
      <span class="comment"># Dividing by -1 is equal to changing the sign.</span>
      <span class="comment"># integer.first / -1 causes an integer overflow.</span>
      incr(countOptimizations);
      negate(dividend, c_expr);
    <span class="keywd">elsif</span> divisor > 0 <span class="op">and</span> 2 ** log2(divisor) = divisor <span class="keywd">then</span>
      <span class="comment"># Divisor is a power of two.</span>
      dividend_range := getIntRange(dividend);
      <span class="keywd">if</span> dividend_range.minValue >= 0 <span class="keywd">then</span>
        incr(countOptimizations);
        <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(dividend, c_expr);
          c_expr.expr &amp;:= <span class="stri">") >> "</span>;
          c_expr.expr &amp;:= integerLiteral(log2(divisor));
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
          doRshift(dividend_name, integerLiteral(log2(divisor)), c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">") / "</span>;
        c_expr.expr &amp;:= integerLiteral(divisor);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">") / "</span>;
      c_expr.expr &amp;:= integerLiteral(divisor);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_div (<span class="op">in</span> <span class="type">integer</span>: dividend, <span class="op">in</span> <span class="type">reference</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    divisor_range := getIntRange(divisor);
    <span class="keywd">if</span> dividend = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
        <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
            divisor_range.mayRaiseException <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
          process_expr(divisor, c_expr);
          c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":0)"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_division_overflow <span class="op">and</span> dividend = integer.first <span class="keywd">then</span>
      <span class="comment"># integer.first / -1 causes an integer overflow.</span>
      <span class="keywd">if</span> divisor_range.maxValue &lt; -1 <span class="op">or</span> divisor_range.minValue > 0 <span class="keywd">then</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        countOverflowOptimizations(c_expr);
        <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
          countDivisionOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" / ("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
        <span class="keywd">if</span> divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==-1)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
          <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" / "</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_div_by_zero <span class="keywd">then</span>
      <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
        incr(countDivisionChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" / "</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        countDivisionOptimizations(c_expr);
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" / ("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= integerLiteral(dividend);
      c_expr.expr &amp;:= <span class="stri">" / ("</span>;
      process_expr(divisor, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_DIV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_div(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_div(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span>
          category(params[3]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[3]) <span class="op">and</span>
          getValue(params[3], integer) = 0 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span> check_int_div_zero_by_zero <span class="op">and</span>
          category(params[1]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[1]) <span class="op">and</span>
          getValue(params[1], integer) = 0 <span class="keywd">then</span>
      incr(countDivisionChecks);
      c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":0)"</span>;
    <span class="keywd">else</span>
      divisor_range := getIntRange(params[3]);
      <span class="keywd">if</span> params[1] = params[3] <span class="keywd">then</span>
        <span class="comment"># C compilers are allowed to optimize variable/variable to 1.</span>
        <span class="comment"># A C compiler can assume, that an "undefined behavior", like a</span>
        <span class="comment"># division by zero will never happen. So we need to handle this case.</span>
        <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
          <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
              divisor_range.mayRaiseException <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
            process_expr(params[1], c_expr);
            c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":1)"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"1"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> check_int_division_overflow <span class="keywd">then</span>
        <span class="comment"># integer.first / -1 causes an integer overflow.</span>
        dividend_range := getIntRange(params[1]);
        <span class="keywd">if</span> (dividend_range.minValue > integer.first <span class="op">or</span>
            divisor_range.maxValue &lt; -1 <span class="op">or</span> divisor_range.minValue > -1) <span class="op">and</span>
            (<span class="op">not</span> check_int_div_by_zero <span class="op">or</span>
            divisor_range.maxValue &lt; 0 <span class="op">or</span> divisor_range.minValue > 0) <span class="keywd">then</span>
          <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
          countOverflowOptimizations(c_expr);
          <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") / ("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, params[1], c_expr);
          divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, params[3], c_expr);
          <span class="keywd">if</span> dividend_range.minValue = integer.first <span class="op">and</span>
              divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
            incr(countOverflowChecks);
            c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
            c_expr.expr &amp;:= dividend_name;
            c_expr.expr &amp;:= <span class="stri">"=="</span>;
            c_expr.expr &amp;:= integerLiteral(integer.first);
            c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"==-1"</span>;
            c_expr.expr &amp;:= <span class="stri">")?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countOverflowOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
            <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
              incr(countDivisionChecks);
              c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">":"</span>;
            <span class="keywd">else</span>
              countDivisionOptimizations(c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">" / "</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> check_int_div_by_zero <span class="keywd">then</span>
        <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") / "</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") / ("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") / ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: number2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCompare <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> optimizeComparisons <span class="keywd">then</span>
      number1Range := getIntRange(params[1]);
      number2Range := getIntRange(params[3]);
      <span class="keywd">if</span> <span class="op">not</span> number1Range.mayRaiseException <span class="op">and</span> <span class="op">not</span> number2Range.mayRaiseException <span class="keywd">then</span>
        <span class="keywd">if</span> number1Range.minValue = number1Range.maxValue <span class="op">and</span>
            number2Range.minValue = number2Range.maxValue <span class="op">and</span>
            number1Range.minValue = number2Range.minValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"="</span>, TRUE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
          doCompare := FALSE;
        <span class="keywd">elsif</span> number1Range.maxValue &lt; number2Range.minValue <span class="op">or</span>
            number1Range.minValue > number2Range.maxValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"="</span>, FALSE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
          doCompare := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> doCompare <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") == ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_FACT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: limit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[2], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      number := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> ccConf.INTTYPE_SIZE = 64 <span class="keywd">then</span>
        limit := 20;
      <span class="keywd">else</span>
        limit := 12;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> number &lt; 0 <span class="op">or</span> number > limit <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(!number);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
      checkRangeFromZero(number_name, <span class="stri">"sizeof(fact)/sizeof(intType)"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":fact["</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"])"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_GE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: number2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCompare <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> optimizeComparisons <span class="keywd">then</span>
      number1Range := getIntRange(params[1]);
      number2Range := getIntRange(params[3]);
      <span class="keywd">if</span> <span class="op">not</span> number1Range.mayRaiseException <span class="op">and</span> <span class="op">not</span> number2Range.mayRaiseException <span class="keywd">then</span>
        <span class="keywd">if</span> number1Range.minValue >= number2Range.maxValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">">="</span>, TRUE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
          doCompare := FALSE;
        <span class="keywd">elsif</span> number1Range.maxValue &lt; number2Range.minValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">">="</span>, FALSE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
          doCompare := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> doCompare <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") >= ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_GT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: number2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCompare <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> optimizeComparisons <span class="keywd">then</span>
      number1Range := getIntRange(params[1]);
      number2Range := getIntRange(params[3]);
      <span class="keywd">if</span> <span class="op">not</span> number1Range.mayRaiseException <span class="op">and</span> <span class="op">not</span> number2Range.mayRaiseException <span class="keywd">then</span>
        <span class="keywd">if</span> number1Range.minValue > number2Range.maxValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">">"</span>, TRUE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
          doCompare := FALSE;
        <span class="keywd">elsif</span> number1Range.maxValue &lt;= number2Range.minValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">">"</span>, FALSE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
          doCompare := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> doCompare <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") > ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_ICONV1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_ICONV3, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_INCR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        process_expr(params[1], c_param1);
        statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.last);
        statement.expr &amp;:= <span class="stri">")) {"</span>;
        statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">"} else ++("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">else</span>
        incr(statement.temp_num);
        variable_name := <span class="stri">"var_"</span> &amp; str(statement.temp_num);
        statement.temp_decls &amp;:= <span class="stri">"intType *"</span>;
        statement.temp_decls &amp;:= variable_name;
        statement.temp_decls &amp;:= <span class="stri">";\n"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"=&amp;("</span>;
        process_expr(params[1], statement);
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"if (ovfChk(*"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.last);
        statement.expr &amp;:= <span class="stri">")) {"</span>;
        statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">"} else ++(*"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"++("</span>;
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: number2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCompare <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> optimizeComparisons <span class="keywd">then</span>
      number1Range := getIntRange(params[1]);
      number2Range := getIntRange(params[3]);
      <span class="keywd">if</span> <span class="op">not</span> number1Range.mayRaiseException <span class="op">and</span> <span class="op">not</span> number2Range.mayRaiseException <span class="keywd">then</span>
        <span class="keywd">if</span> number1Range.maxValue &lt;= number2Range.minValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"&lt;="</span>, TRUE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
          doCompare := FALSE;
        <span class="keywd">elsif</span> number1Range.minValue > number2Range.maxValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"&lt;="</span>, FALSE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
          doCompare := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> doCompare <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;= ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LOG10, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intLog10("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LOG2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intLog2("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LOWEST_SET_BIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intLowestSetBit("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LPAD0, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="op">and</span>
        getValue(evaluatedParam, integer) &lt;= 1 <span class="keywd">then</span>
      incr(countOptimizations);
      process_int_str(params[1], c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intLpad0("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_lshift (<span class="op">in</span> <span class="type">reference</span>: number, <span class="op">in</span> <span class="type">integer</span>: lshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedNumber <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: number_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: fullOverflowCheck <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> lshift &lt; 0 <span class="op">or</span> lshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(number, INTOBJECT, evaluatedNumber) <span class="keywd">then</span>
      incr(countOptimizations);
      number_value := getValue(evaluatedNumber, integer);
      <span class="keywd">if</span> number_value &lt; integer.first >> lshift <span class="op">or</span>
          number_value > integer.last >> lshift <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(number_value &lt;&lt; lshift);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> lshift = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(number, c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      minAllowedNumber := integer.first >> lshift;
      maxAllowedNumber := integer.last >> lshift;
      number_range := getIntRange(number);
      <span class="keywd">if</span> number_range &lt;> intRange.value <span class="keywd">then</span>
        <span class="keywd">if</span>  number_range.minValue >= minAllowedNumber <span class="op">and</span>
            number_range.maxValue &lt;= maxAllowedNumber <span class="keywd">then</span>
          <span class="comment"># This lshift cannot overflow</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_lshift*/("</span>;
          process_expr(number, c_expr);
          c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
          c_expr.expr &amp;:= integerLiteral(lshift);
        <span class="keywd">elsif</span> number_range.minValue >= minAllowedNumber <span class="op">or</span>
              number_range.maxValue &lt;= maxAllowedNumber <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"/*simplified_overflow_check_lshift*/("</span>;
          number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, number, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= number_name;
          <span class="keywd">if</span> number_range.minValue >= minAllowedNumber <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= integerLiteral(maxAllowedNumber);
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
            c_expr.expr &amp;:= integerLiteral(minAllowedNumber);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">" &lt;&lt; "</span>;
          c_expr.expr &amp;:= integerLiteral(lshift);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          fullOverflowCheck := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        fullOverflowCheck := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> fullOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, number, c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkIfOutsideRange(number_name, minAllowedNumber,
                            maxAllowedNumber, c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">" &lt;&lt; "</span>;
        c_expr.expr &amp;:= integerLiteral(lshift);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(number, c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
      c_expr.expr &amp;:= integerLiteral(lshift);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_lshift (<span class="op">in</span> <span class="type">integer</span>: number, <span class="op">in</span> <span class="type">reference</span>: lshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: lshift_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: raisesException <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: doOverflowCheck <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> check_int_shift_overflow <span class="keywd">then</span>
      lshift_range := getIntRange(lshift);
      <span class="keywd">if</span> lshift_range.maxValue &lt; 0 <span class="op">or</span>
          lshift_range.minValue >= ccConf.INTTYPE_SIZE - bitLength(number) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        raisesException := TRUE;
      <span class="keywd">elsif</span> lshift_range.minValue >= 0 <span class="op">and</span>
          lshift_range.maxValue &lt; ccConf.INTTYPE_SIZE - bitLength(number) <span class="keywd">then</span>
        <span class="comment"># This lshift cannot overflow</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_lshift*/"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        doOverflowCheck := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> raisesException <span class="keywd">then</span>
      <span class="keywd">if</span> doOverflowCheck <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, lshift, c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(lshift_name,
            integerLiteral(ccConf.INTTYPE_SIZE - bitLength(number)), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">if</span> number = 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(0);
        <span class="keywd">else</span>
          c_expr.expr &amp;:= integerLiteral(number);
          c_expr.expr &amp;:= <span class="stri">" &lt;&lt; "</span>;
          c_expr.expr &amp;:= lshift_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> number = 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(0);
        <span class="keywd">else</span>
          c_expr.expr &amp;:= integerLiteral(number);
          c_expr.expr &amp;:= <span class="stri">" &lt;&lt; ("</span>;
          process_expr(lshift, c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LSHIFT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: lshift_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: fullOverflowCheck <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_lshift(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_lshift(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      number_range := getIntRange(params[1]);
      lshift_range := getIntRange(params[3]);
      <span class="keywd">if</span> lshift_range.maxValue &lt; 0 <span class="op">or</span>
          lshift_range.minValue >= ccConf.INTTYPE_SIZE <span class="op">or</span>
          (lshift_range.minValue >= 0 <span class="op">and</span>
           lshift_range.minValue &lt; ccConf.INTTYPE_SIZE <span class="op">and</span>
           (integer.first >> lshift_range.minValue > number_range.maxValue <span class="op">or</span>
            integer.last >> lshift_range.minValue &lt; number_range.minValue)) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">elsif</span> lshift_range.maxValue >= 0 <span class="op">and</span>
          lshift_range.maxValue &lt; ccConf.INTTYPE_SIZE <span class="op">and</span>
          integer.first >> lshift_range.maxValue &lt;= number_range.minValue <span class="op">and</span>
          integer.last >> lshift_range.maxValue >= number_range.maxValue <span class="keywd">then</span>
        <span class="keywd">if</span> lshift_range.minValue >= 0 <span class="keywd">then</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_lshift*/("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= lshift_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
          c_expr.expr &amp;:= lshift_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        fullOverflowCheck := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> fullOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
        lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        <span class="keywd">if</span> lshift_range.minValue &lt; 0 <span class="op">or</span>
            lshift_range.maxValue >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
          checkRangeFromZero(lshift_name, integerLiteral(ccConf.INTTYPE_SIZE), c_expr);
          c_expr.expr &amp;:= <span class="stri">"||"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
        <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">">>"</span>;
          c_expr.expr &amp;:= lshift_name;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"~(~"</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">">>"</span>;
          c_expr.expr &amp;:= lshift_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"||"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">">"</span>;
        c_expr.expr &amp;:= integerLiteral(integer.last);
        c_expr.expr &amp;:= <span class="stri">">>"</span>;
        c_expr.expr &amp;:= lshift_name;
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">" &lt;&lt; "</span>;
        c_expr.expr &amp;:= lshift_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_lshift_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: lshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> lshift &lt; 0 <span class="op">or</span> lshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      setDiagnosticLine(c_expr);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">elsif</span> lshift = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore integer &lt;&lt;:= 0; */\n"</span>;
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, variable, statement);
      statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
      checkIfOutsideRange(variable_name, integer.first >> lshift,
                          integer.last >> lshift, statement);
      statement.expr &amp;:= <span class="stri">")) {\n"</span>;
      statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"&lt;&lt;="</span>;
      statement.expr &amp;:= integerLiteral(lshift);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= <span class="stri">"}\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      process_expr(variable, statement);
      statement.expr &amp;:= <span class="stri">"&lt;&lt;="</span>;
      statement.expr &amp;:= integerLiteral(lshift);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LSHIFT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_lshift_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, params[1], statement);
      lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, params[3], statement);
      statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
      checkRangeFromZero(lshift_name, integerLiteral(ccConf.INTTYPE_SIZE), statement);
      statement.expr &amp;:= <span class="stri">"||"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"&lt;"</span>;
      <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">">>"</span>;
        statement.expr &amp;:= lshift_name;
      <span class="keywd">else</span>
        statement.expr &amp;:= <span class="stri">"~(~"</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">">>"</span>;
        statement.expr &amp;:= lshift_name;
        statement.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      statement.expr &amp;:= <span class="stri">"||"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">">"</span>;
      statement.expr &amp;:= integerLiteral(integer.last);
      statement.expr &amp;:= <span class="stri">">>"</span>;
      statement.expr &amp;:= lshift_name;
      statement.expr &amp;:= <span class="stri">")?"</span>;
      statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">":("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"&lt;&lt;="</span>;
      statement.expr &amp;:= lshift_name;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"&lt;&lt;="</span>;
      process_expr(params[3], statement);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_LT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: number2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCompare <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> optimizeComparisons <span class="keywd">then</span>
      number1Range := getIntRange(params[1]);
      number2Range := getIntRange(params[3]);
      <span class="keywd">if</span> <span class="op">not</span> number1Range.mayRaiseException <span class="op">and</span> <span class="op">not</span> number2Range.mayRaiseException <span class="keywd">then</span>
        <span class="keywd">if</span> number1Range.maxValue &lt; number2Range.minValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"&lt;"</span>, TRUE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
          doCompare := FALSE;
        <span class="keywd">elsif</span> number1Range.minValue >= number2Range.maxValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"&lt;"</span>, FALSE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
          doCompare := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> doCompare <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt; ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_mdiv (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">integer</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: dividend_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> divisor = 0 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(dividend, INTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      dividend_value := getValue(evaluatedDividend, integer);
      <span class="keywd">if</span> divisor = -1 <span class="op">and</span> dividend_value &lt; -integer.last <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(dividend_value <span class="op">mdiv</span> divisor);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor = 1 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> divisor = -1 <span class="keywd">then</span>
      <span class="comment"># Dividing by -1 is equal to changing the sign.</span>
      <span class="comment"># integer.first / -1 causes an integer overflow.</span>
      negate(dividend, c_expr);
    <span class="keywd">elsif</span> divisor > 0 <span class="op">and</span> 2 ** log2(divisor) = divisor <span class="keywd">then</span>
      <span class="comment"># Divisor is a power of two.</span>
      <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">") >> "</span>;
        c_expr.expr &amp;:= integerLiteral(log2(divisor));
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
        doRshift(dividend_name, integerLiteral(log2(divisor)), c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor &lt; 0 <span class="op">and</span> bitLength(divisor) = lowestSetBit(divisor) <span class="keywd">then</span>
      <span class="comment"># Divisor is a negative power of two.</span>
      <span class="comment"># The check above is (almost) equivalent to:</span>
      <span class="comment">#   divisor &lt; 0 and 2 ** log2(-divisor) = -divisor</span>
      <span class="comment"># The check with bitLength is used to avoid negating the divisor.</span>
      <span class="comment"># Negating the divisor would fail for the most negative integer.</span>
      dividend_range := getIntRange(dividend);
      <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
        <span class="keywd">if</span> dividend_range.minValue = integer.first <span class="keywd">then</span>
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"=="</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">"?"</span>;
          c_expr.expr &amp;:= integerLiteral(-(integer.first >> 1) >> pred(bitLength(divisor)));
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"-"</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">" >> "</span>;
          c_expr.expr &amp;:= integerLiteral(bitLength(divisor));
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"=-"</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">","</span>;
          doRshift(dividend_name, integerLiteral(bitLength(divisor)), c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"-("</span>;
          process_expr(dividend, c_expr);
          c_expr.expr &amp;:= <span class="stri">") >> "</span>;
          c_expr.expr &amp;:= integerLiteral(bitLength(divisor));
        <span class="keywd">else</span>
          dividend_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, c_expr);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"=-("</span>;
          process_expr(dividend, c_expr);
          c_expr.expr &amp;:= <span class="stri">"),"</span>;
          doRshift(dividend_name, integerLiteral(bitLength(divisor)), c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      dividend_range := getIntRange(dividend);
      <span class="keywd">if</span> divisor > 0 <span class="op">and</span> dividend_range.minValue >= 0 <span class="op">or</span>
          divisor &lt; 0 <span class="op">and</span> dividend_range.maxValue &lt;= 0 <span class="keywd">then</span>
        <span class="comment"># Dividend and divisor have the same sign.</span>
        <span class="comment"># Formula used: a/b</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")/"</span>;
        c_expr.expr &amp;:= integerLiteral(divisor);
      <span class="keywd">elsif</span> divisor > 0 <span class="op">and</span> dividend_range.maxValue &lt; 0 <span class="keywd">then</span>
        <span class="comment"># Formula used: (a+1)/b-1</span>
        c_expr.expr &amp;:= <span class="stri">"(("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")+1)/"</span>;
        c_expr.expr &amp;:= integerLiteral(divisor);
        c_expr.expr &amp;:= <span class="stri">"-1"</span>;
      <span class="keywd">elsif</span> divisor &lt; 0 <span class="op">and</span> dividend_range.minValue > 0 <span class="keywd">then</span>
        <span class="comment"># Formula used: (a-1)/b-1</span>
        c_expr.expr &amp;:= <span class="stri">"(("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1)/"</span>;
        c_expr.expr &amp;:= integerLiteral(divisor);
        c_expr.expr &amp;:= <span class="stri">"-1"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
        c_expr.expr &amp;:= dividend_name;
        <span class="keywd">if</span> divisor > 0 <span class="keywd">then</span>
          <span class="comment"># Formula used: a&lt;0?(a+1)/b-1:a/b</span>
          c_expr.expr &amp;:= <span class="stri">"&lt;0?("</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"+1)/"</span>;
          c_expr.expr &amp;:= integerLiteral(divisor);
          c_expr.expr &amp;:= <span class="stri">"-1:"</span>;
        <span class="keywd">else</span> <span class="comment"># divisor &lt; 0</span>
          <span class="comment"># Formula used: a>0?(a-1)/b-1:a/b</span>
          c_expr.expr &amp;:= <span class="stri">">0?("</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"-1)/"</span>;
          c_expr.expr &amp;:= integerLiteral(divisor);
          c_expr.expr &amp;:= <span class="stri">"-1:"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= dividend_name;
        c_expr.expr &amp;:= <span class="stri">"/"</span>;
        c_expr.expr &amp;:= integerLiteral(divisor);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_mdiv (<span class="op">in</span> <span class="type">integer</span>: dividend, <span class="op">in</span> <span class="type">reference</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    divisor_range := getIntRange(divisor);
    <span class="keywd">if</span> dividend = 0 <span class="keywd">then</span>
      <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
        <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
            divisor_range.mayRaiseException <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
          process_expr(divisor, c_expr);
          c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":0)"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_division_overflow <span class="op">and</span> dividend = integer.first <span class="keywd">then</span>
      <span class="keywd">if</span> divisor_range.maxValue &lt; -1 <span class="keywd">then</span>
        <span class="comment"># Dividend and divisor have the same sign.</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        <span class="comment"># Formula used: a/b</span>
        countOverflowOptimizations(c_expr);
        <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
          countDivisionOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"/("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">elsif</span> divisor_range.minValue > 0 <span class="keywd">then</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        <span class="comment"># Formula used: (a+1)/b-1</span>
        countOverflowOptimizations(c_expr);
        <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
          countDivisionOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(succ(dividend));
        c_expr.expr &amp;:= <span class="stri">"/("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1"</span>;
      <span class="keywd">else</span>
        <span class="comment"># Formula used: b==-1?OVERFLOW_ERROR:b>0?(a+1)/b-1:a/b</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
        <span class="keywd">if</span> divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==-1)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> divisor_range.maxValue > 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">">0?"</span>;
          c_expr.expr &amp;:= integerLiteral(succ(dividend));
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"-1:"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
          <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"/"</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> (dividend &lt;= 0 <span class="op">and</span>
          ((dividend > integer.first <span class="op">and</span> divisor_range.maxValue &lt; 0) <span class="op">or</span>
          divisor_range.maxValue &lt; -1)) <span class="op">or</span>
          (dividend >= 0 <span class="op">and</span> divisor_range.minValue > 0) <span class="keywd">then</span>
        <span class="comment"># Dividend and divisor have the same sign.</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        <span class="comment"># Formula used: a/b</span>
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"/("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">elsif</span> dividend > 0 <span class="op">and</span> divisor_range.maxValue &lt; 0 <span class="keywd">then</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        <span class="comment"># Formula used: (a-1)/b-1</span>
        c_expr.expr &amp;:= integerLiteral(pred(dividend));
        c_expr.expr &amp;:= <span class="stri">"/("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1"</span>;
      <span class="keywd">elsif</span> dividend &lt; 0 <span class="op">and</span> divisor_range.minValue > 0 <span class="keywd">then</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        <span class="comment"># Formula used: (a+1)/b-1</span>
        c_expr.expr &amp;:= integerLiteral(succ(dividend));
        c_expr.expr &amp;:= <span class="stri">"/("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
        <span class="keywd">if</span> (dividend &lt; 0 <span class="op">or</span> divisor_range.minValue &lt; 0) <span class="op">and</span>
            (dividend > 0 <span class="op">or</span> divisor_range.maxValue > 0) <span class="keywd">then</span>
          c_expr.expr &amp;:= divisor_name;
          <span class="keywd">if</span> dividend > 0 <span class="keywd">then</span>
            <span class="comment"># Formula used: b&lt;0?(a-1)/b-1:a/b</span>
            c_expr.expr &amp;:= <span class="stri">"&lt;0?"</span>;
            c_expr.expr &amp;:= integerLiteral(pred(dividend));
          <span class="keywd">else</span> <span class="comment"># dividend &lt; 0</span>
            <span class="comment"># Formula used: b>0?(a+1)/b-1:a/b</span>
            c_expr.expr &amp;:= <span class="stri">">0?"</span>;
            c_expr.expr &amp;:= integerLiteral(succ(dividend));
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"-1:"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
          <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"/"</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_MDIV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mdiv(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mdiv(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span> check_int_div_zero_by_zero <span class="op">and</span>
          category(params[1]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[1]) <span class="op">and</span>
          getValue(params[1], integer) = 0 <span class="keywd">then</span>
      incr(countDivisionChecks);
      c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":0)"</span>;
    <span class="keywd">else</span>
      divisor_range := getIntRange(params[3]);
      <span class="keywd">if</span> params[1] = params[3] <span class="keywd">then</span>
        <span class="comment"># C compilers are allowed to optimize variable/variable to 1.</span>
        <span class="comment"># A C compiler can assume, that an "undefined behavior", like a</span>
        <span class="comment"># division by zero will never happen. So we need to handle this case.</span>
        <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
          <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
              divisor_range.mayRaiseException <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
            process_expr(params[1], c_expr);
            c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":1)"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"1"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="comment"># Formula used: a>0&amp;&amp;b&lt;0?(a-1)/b-1:a&lt;0&amp;&amp;b>0?(a+1)/b-1:a/b</span>
        dividend_range := getIntRange(params[1]);
        <span class="keywd">if</span> (dividend_range.maxValue &lt;= 0 <span class="op">and</span>
            ((dividend_range.minValue > integer.first <span class="op">and</span> divisor_range.maxValue &lt; 0) <span class="op">or</span>
            divisor_range.maxValue &lt; -1)) <span class="op">or</span>
            (dividend_range.minValue >= 0 <span class="op">and</span> divisor_range.minValue > 0) <span class="keywd">then</span>
          <span class="comment"># Dividend and divisor have the same sign.</span>
          <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
          <span class="comment"># Formula used: a/b</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")/("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">elsif</span> dividend_range.minValue > 0 <span class="op">and</span> divisor_range.maxValue &lt; 0 <span class="keywd">then</span>
          <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
          <span class="comment"># Formula used: (a-1)/b-1</span>
          <span class="keywd">if</span> check_int_division_overflow <span class="keywd">then</span>
            countOverflowOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"(("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")-1)/("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")-1"</span>;
        <span class="keywd">elsif</span> dividend_range.maxValue &lt; 0 <span class="op">and</span> divisor_range.minValue > 0 <span class="keywd">then</span>
          <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
          <span class="comment"># Formula used: (a+1)/b-1</span>
          <span class="keywd">if</span> check_int_division_overflow <span class="keywd">then</span>
            countOverflowOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"(("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")+1)/("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")-1"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, params[1], c_expr);
          divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, params[3], c_expr);
          <span class="keywd">if</span> dividend_range.maxValue > 0 <span class="op">and</span> divisor_range.minValue &lt; 0 <span class="keywd">then</span>
            <span class="keywd">if</span> dividend_range.minValue &lt;= 0 <span class="keywd">then</span>
              c_expr.expr &amp;:= dividend_name;
              c_expr.expr &amp;:= <span class="stri">">0"</span>;
              <span class="keywd">if</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
                c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            c_expr.expr &amp;:= <span class="stri">"?("</span>;
            c_expr.expr &amp;:= dividend_name;
            c_expr.expr &amp;:= <span class="stri">"-1)/"</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"-1:"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> dividend_range.minValue &lt; 0 <span class="op">and</span> divisor_range.maxValue > 0 <span class="keywd">then</span>
            <span class="keywd">if</span> dividend_range.maxValue >= 0 <span class="keywd">then</span>
              c_expr.expr &amp;:= dividend_name;
              c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
              <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="keywd">then</span>
                c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="keywd">then</span>
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">">0"</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            c_expr.expr &amp;:= <span class="stri">"?("</span>;
            c_expr.expr &amp;:= dividend_name;
            c_expr.expr &amp;:= <span class="stri">"+1)/"</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"-1:"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> check_int_div_by_zero <span class="keywd">then</span>
            <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
              incr(countDivisionChecks);
              c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">":"</span>;
            <span class="keywd">else</span>
              countDivisionOptimizations(c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> check_int_division_overflow <span class="keywd">then</span>
            <span class="keywd">if</span> dividend_range.minValue = integer.first <span class="op">and</span>
                divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
              incr(countOverflowChecks);
              c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
              c_expr.expr &amp;:= dividend_name;
              c_expr.expr &amp;:= <span class="stri">"=="</span>;
              c_expr.expr &amp;:= integerLiteral(integer.first);
              c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">"==-1"</span>;
              c_expr.expr &amp;:= <span class="stri">")?"</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">":"</span>;
            <span class="keywd">else</span>
              countOverflowOptimizations(c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"/"</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_of_left_shifted_value (<span class="op">in</span> <span class="type">reference</span>: argument,
    <span class="op">in</span> <span class="type">integer</span>: lshift, <span class="op">in</span> <span class="type">integer</span>: bitsToMask, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> lshift &lt; 0 <span class="op">or</span> lshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">elsif</span> lshift >= bitsToMask <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"0"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"/*mod_of_lshift*/ (("</span>;
      process_expr(argument, c_expr);
      c_expr.expr &amp;:= <span class="stri">")&amp;"</span>;
      c_expr.expr &amp;:= integerLiteral(pred(2 ** (bitsToMask - lshift)));
      c_expr.expr &amp;:= <span class="stri">")&lt;&lt;"</span>;
      c_expr.expr &amp;:= integerLiteral(lshift);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_of_left_shifted_value (<span class="op">in</span> <span class="type">reference</span>: argument,
    <span class="op">in</span> <span class="type">reference</span>: lshift, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: lshift_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: lshift_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(lshift, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      lshift_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> lshift_value &lt; 0 <span class="op">or</span> lshift_value >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
        process_expr(argument, c_expr);
        c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
        c_expr.expr &amp;:= integerLiteral(lshift_value);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      lshift_range := getIntRange(lshift);
      <span class="keywd">if</span> lshift_range.maxValue &lt; 0 <span class="op">or</span>
          lshift_range.minValue >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">elsif</span> lshift_range.minValue >= 0 <span class="op">and</span>
          lshift_range.maxValue &lt; ccConf.INTTYPE_SIZE <span class="keywd">then</span>
        <span class="comment"># This lshift cannot overflow</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_lshift*/"</span>;
        c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
        process_expr(argument, c_expr);
        c_expr.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
        process_expr(lshift, c_expr);
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, lshift, c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(lshift_name,
            integerLiteral(ccConf.INTTYPE_SIZE), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
        process_expr(argument, c_expr);
        c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
        c_expr.expr &amp;:= lshift_name;
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
      process_expr(argument, c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
      process_expr(lshift, c_expr);
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_of_product (<span class="op">in</span> <span class="type">reference</span>: factor1,
    <span class="op">in</span> <span class="type">reference</span>: factor2, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
    process_expr(factor1, c_expr);
    c_expr.expr &amp;:= <span class="stri">")*(uintType)("</span>;
    process_expr(factor2, c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_of_sum (<span class="op">in</span> <span class="type">addSubIntListType</span>: addSubParamList,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: constSummand <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">reference</span>: summand <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> addSubParamList <span class="keywd">do</span>
      <span class="keywd">if</span> addSubParamList[index].summand = NIL <span class="keywd">then</span>
        <span class="keywd">if</span> addSubParamList[index].doAdd <span class="keywd">then</span>
          constSummand +:= bigInteger(addSubParamList[index].constSummand);
        <span class="keywd">else</span>
          constSummand -:= bigInteger(addSubParamList[index].constSummand);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    c_expr.expr &amp;:= <span class="stri">"/*mod_of_sum*/ ((intType) ("</span>;
    <span class="keywd">for</span> <span class="keywd">key</span> index <span class="keywd">range</span> addSubParamList <span class="keywd">do</span>
      <span class="keywd">if</span> addSubParamList[index].summand &lt;> NIL <span class="keywd">then</span>
        <span class="keywd">if</span> addSubParamList[index].doAdd <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"+"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"-"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        summand := addSubParamList[index].summand;
        <span class="keywd">if</span> isActionExpression(summand, <span class="stri">"INT_MULT"</span>) <span class="keywd">then</span>
          optimize_mod_of_product(getValue(summand, ref_list)[2],
              getValue(summand, ref_list)[4], c_expr);
        <span class="keywd">elsif</span> isActionExpression(summand, <span class="stri">"INT_LSHIFT"</span>) <span class="keywd">then</span>
          optimize_mod_of_left_shifted_value(getValue(summand, ref_list)[2],
              getValue(summand, ref_list)[4], c_expr);
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
          process_expr(summand, c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> constSummand >= 0_ <span class="keywd">then</span>
      constSummand := constSummand <span class="op">mod</span> (2_ ** 63);
      <span class="keywd">if</span> constSummand &lt;> 0_ <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"+(uintType)("</span>;
        c_expr.expr &amp;:= integerLiteral(ord(constSummand));
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      constSummand := -constSummand <span class="op">mod</span> (2_ ** 63);
      <span class="keywd">if</span> constSummand &lt;> 0_ <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"-(uintType)("</span>;
        c_expr.expr &amp;:= integerLiteral(ord(constSummand));
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_of_sum (<span class="op">in</span> <span class="type">ref_list</span>: params, <span class="op">in</span> <span class="type">boolean</span>: doAdd,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubIntListType</span>: addSubParamList <span class="keywd">is</span> 0 <span class="op">times</span> addSubIntElementType.value;
  <span class="keywd">begin</span>
    addSubParamList := getAddSubParamList(params, doAdd);
    evaluateConstants(addSubParamList);
    optimize_mod_of_sum(addSubParamList, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_of_sum (<span class="op">in</span> <span class="type">reference</span>: summand1, <span class="op">in</span> <span class="type">integer</span>: summand2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubIntListType</span>: addSubParamList <span class="keywd">is</span> 0 <span class="op">times</span> addSubIntElementType.value;
  <span class="keywd">begin</span>
    addSubParamList := getAddSubParamList(summand1, summand2);
    evaluateConstants(addSubParamList);
    optimize_mod_of_sum(addSubParamList, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_dividend (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> isActionExpression(dividend, <span class="stri">"INT_MULT"</span>) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"/*mod_of_product*/ ((intType) ("</span>;
      optimize_mod_of_product(getValue(dividend, ref_list)[2],
          getValue(dividend, ref_list)[4], c_expr);
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">elsif</span> isActionExpression(dividend, <span class="stri">"INT_LSHIFT"</span>) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"/*mod_of_lshift*/ ((intType) ("</span>;
      optimize_mod_of_left_shifted_value(getValue(dividend, ref_list)[2],
          getValue(dividend, ref_list)[4], c_expr);
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">elsif</span> isActionExpression(dividend, <span class="stri">"INT_ADD"</span>) <span class="keywd">then</span>
      optimize_mod_of_sum(getValue(dividend, ref_list)[2 ..], TRUE, c_expr)
    <span class="keywd">elsif</span> isActionExpression(dividend, <span class="stri">"INT_SBTR"</span>) <span class="keywd">then</span>
      optimize_mod_of_sum(getValue(dividend, ref_list)[2 ..], FALSE, c_expr)
    <span class="keywd">elsif</span> isActionExpression(dividend, <span class="stri">"INT_SUCC"</span>) <span class="keywd">then</span>
      optimize_mod_of_sum(getValue(dividend, ref_list)[2], 1, c_expr);
    <span class="keywd">elsif</span> isActionExpression(dividend, <span class="stri">"INT_PRED"</span>) <span class="keywd">then</span>
      optimize_mod_of_sum(getValue(dividend, ref_list)[2], -1, c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_mod_by_power_of_two (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">reference</span>: lshift,
    <span class="op">in</span> <span class="type">boolean</span>: powerOperator, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: lshift_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    c_expr.expr &amp;:= <span class="stri">"/*mod_by_power_of_two*/ "</span>;
    <span class="keywd">if</span> getConstant(lshift, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      lshift_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> lshift_value &lt; 0 <span class="keywd">then</span>
        <span class="keywd">if</span> powerOperator <span class="keywd">then</span>
          warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        <span class="keywd">else</span>
          warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> lshift_value >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">elsif</span> lshift_value = 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">else</span>
        optimize_mod_dividend(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
        c_expr.expr &amp;:= integerLiteral(pred(1 &lt;&lt; lshift_value));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, lshift, c_expr);
      <span class="keywd">if</span> powerOperator <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
        c_expr.expr &amp;:= lshift_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":ovfChk("</span>;
        c_expr.expr &amp;:= lshift_name;
        c_expr.expr &amp;:= <span class="stri">">="</span>;
        c_expr.expr &amp;:= integerLiteral(pred(ccConf.INTTYPE_SIZE));
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(lshift_name, integerLiteral(pred(ccConf.INTTYPE_SIZE)), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      optimize_mod_dividend(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">"&amp;(("</span>;
      c_expr.expr &amp;:= integerLiteral(1);
      c_expr.expr &amp;:= <span class="stri">"&lt;&lt;("</span>;
      c_expr.expr &amp;:= lshift_name;
      c_expr.expr &amp;:= <span class="stri">"))-1))"</span>;
    <span class="keywd">elsif</span> powerOperator <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, lshift, c_expr);
      c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
      c_expr.expr &amp;:= lshift_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      optimize_mod_dividend(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">"&amp;(("</span>;
      c_expr.expr &amp;:= integerLiteral(1);
      c_expr.expr &amp;:= <span class="stri">"&lt;&lt;("</span>;
      c_expr.expr &amp;:= lshift_name;
      c_expr.expr &amp;:= <span class="stri">"))-1))"</span>;
    <span class="keywd">else</span>
      optimize_mod_dividend(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">"&amp;(("</span>;
      c_expr.expr &amp;:= integerLiteral(1);
      c_expr.expr &amp;:= <span class="stri">"&lt;&lt;("</span>;
      process_expr(lshift, c_expr);
      c_expr.expr &amp;:= <span class="stri">"))-1)"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_mod (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">integer</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedLshift <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: dividend_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: remainder_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> divisor = 0 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> divisor = 1 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"0"</span>;
    <span class="keywd">elsif</span> getConstant(dividend, INTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      dividend_value := getValue(evaluatedDividend, integer);
      <span class="keywd">if</span> divisor = -1 <span class="op">and</span> dividend_value &lt; -integer.last <span class="keywd">then</span>
        <span class="comment"># Normally this raises OVERFLOW_ERROR, but it is not guaranteed to do so.</span>
        <span class="comment"># According to the optimization rules for overflow it is okay</span>
        <span class="comment"># to deliver the correct result instead of raising OVERFLOW_ERROR.</span>
        <span class="comment"># In case of a modulo by -1 the correct result is always 0.</span>
        <span class="keywd">if</span> reduceOverflowChecks <span class="keywd">then</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_mod*/ 0"</span>;
        <span class="keywd">else</span>
          warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(dividend_value <span class="op">mod</span> divisor);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor = -1 <span class="keywd">then</span>
      <span class="keywd">if</span> <span class="op">not</span> check_int_division_overflow <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">elsif</span> reduceOverflowChecks <span class="keywd">then</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_mod*/ 0"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        c_expr.expr &amp;:= dividend_name;
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":0)"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor > 0 <span class="op">and</span> 2 ** log2(divisor) = divisor <span class="keywd">then</span>
      <span class="comment"># Divisor is a power of two.</span>
      incr(countOptimizations);
      <span class="keywd">if</span> modDividendOptimization <span class="keywd">then</span>
        <span class="keywd">if</span> isActionExpression(dividend, <span class="stri">"INT_LSHIFT"</span>) <span class="op">and</span>
            getConstant(getActionParameter(dividend, 3), INTOBJECT, evaluatedLshift) <span class="keywd">then</span>
          optimize_mod_of_left_shifted_value(getActionParameter(dividend, 1),
              getValue(evaluatedLshift, integer), log2(divisor), c_expr);
        <span class="keywd">else</span>
          optimize_mod_dividend(dividend, c_expr);
          c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
          c_expr.expr &amp;:= integerLiteral(pred(divisor));
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
        c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
        c_expr.expr &amp;:= integerLiteral(pred(divisor));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor &lt; 0 <span class="op">and</span> bitLength(divisor) = lowestSetBit(divisor) <span class="keywd">then</span>
      <span class="comment"># Divisor is a negative power of two.</span>
      <span class="comment"># The check above is (almost) equivalent to:</span>
      <span class="comment">#   divisor &lt; 0 and 2 ** log2(-divisor) = -divisor</span>
      <span class="comment"># The check with bitLength is used to avoid negating the divisor.</span>
      <span class="comment"># Negating the divisor would fail for the most negative integer.</span>
      <span class="comment"># Below the unsigned value is negated to avoid a signed integer</span>
      <span class="comment"># overflow if the smallest signed integer is negated.</span>
      c_expr.expr &amp;:= <span class="stri">"(intType)-(-(uintType)("</span>;
      process_expr(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">")&amp;"</span>;
      c_expr.expr &amp;:= integerLiteral(-succ(divisor));
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
      remainder_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"remainder_"</span>, c_expr);
      <span class="comment"># Formula used: c=a%b,a&lt;0^b&lt;0&amp;&amp;c!=0?c+b:c</span>
      c_expr.expr &amp;:= remainder_name;
      c_expr.expr &amp;:= <span class="stri">"="</span>;
      c_expr.expr &amp;:= dividend_name;
      c_expr.expr &amp;:= <span class="stri">"%"</span>;
      c_expr.expr &amp;:= integerLiteral(divisor);
      c_expr.expr &amp;:= <span class="stri">","</span>;
      c_expr.expr &amp;:= dividend_name;
      <span class="keywd">if</span> divisor > 0 <span class="keywd">then</span>
        <span class="comment"># Formula used: c=a%b,a&lt;0&amp;&amp;c!=0?c+b:c</span>
        c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
      <span class="keywd">else</span> <span class="comment"># divisor &lt; 0</span>
        <span class="comment"># Formula used: c=a%b,a>0&amp;&amp;c!=0?c+b:c</span>
        c_expr.expr &amp;:= <span class="stri">">0"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
      c_expr.expr &amp;:= remainder_name;
      c_expr.expr &amp;:= <span class="stri">"!=0?"</span>;
      c_expr.expr &amp;:= remainder_name;
      c_expr.expr &amp;:= <span class="stri">"+"</span>;
      c_expr.expr &amp;:= integerLiteral(divisor);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= remainder_name;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_mod (<span class="op">in</span> <span class="type">integer</span>: dividend, <span class="op">in</span> <span class="type">reference</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: remainder_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    divisor_range := getIntRange(divisor);
    <span class="keywd">if</span> dividend = 0 <span class="keywd">then</span>
      <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
        <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
            divisor_range.mayRaiseException <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
          process_expr(divisor, c_expr);
          c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":0)"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> dividend = 1 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
      c_expr.expr &amp;:= divisor_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;=0?"</span>;
      <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
        <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"(divChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"+1)"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"+1"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">"+1"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">":("</span>;
      c_expr.expr &amp;:= divisor_name;
      c_expr.expr &amp;:= <span class="stri">"==1?0:1))"</span>;
    <span class="keywd">elsif</span> check_int_division_overflow <span class="op">and</span> dividend = integer.first <span class="keywd">then</span>
      <span class="comment"># integer.first % -1 causes an integer overflow.</span>
      <span class="keywd">if</span> divisor_range.maxValue &lt; -1 <span class="keywd">then</span>
        <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
        countOverflowOptimizations(c_expr);
        <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
          countDivisionOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" % ("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
        remainder_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"remainder_"</span>, c_expr);
        <span class="keywd">if</span> divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==-1)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
          <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        <span class="comment"># Formula used: c=a%b,b>0&amp;&amp;c!=0?c+b:c</span>
        c_expr.expr &amp;:= remainder_name;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"%"</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">","</span>;
        <span class="keywd">if</span> divisor_range.maxValue &lt;= 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= remainder_name;
        <span class="keywd">else</span>
          <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="keywd">then</span>
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">">0"</span>;
            c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= remainder_name;
          c_expr.expr &amp;:= <span class="stri">"!=0?"</span>;
          c_expr.expr &amp;:= remainder_name;
          c_expr.expr &amp;:= <span class="stri">"+"</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= remainder_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
      <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
        <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> (dividend >= 0 <span class="op">and</span> divisor_range.minValue >= 0) <span class="op">or</span>
          (dividend &lt;= 0 <span class="op">and</span> divisor_range.maxValue &lt;= 0) <span class="keywd">then</span>
        <span class="comment"># Formula used: a%b</span>
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"%"</span>;
        c_expr.expr &amp;:= divisor_name;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        remainder_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"remainder_"</span>, c_expr);
        <span class="comment"># Formula used: c=a%b,a&lt;0^b&lt;0&amp;&amp;c!=0?c+b:c</span>
        c_expr.expr &amp;:= remainder_name;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">"%"</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">","</span>;
        <span class="keywd">if</span> (dividend &lt; 0 <span class="op">or</span> divisor_range.maxValue >= 0) <span class="op">and</span>
            (dividend > 0 <span class="op">or</span> divisor_range.minValue &lt;= 0) <span class="keywd">then</span>
          c_expr.expr &amp;:= divisor_name;
          <span class="keywd">if</span> dividend > 0 <span class="keywd">then</span>
            <span class="comment"># Formula used: c=a%b,b&lt;0&amp;&amp;c!=0?c+b:c</span>
            c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
          <span class="keywd">else</span> <span class="comment"># dividend &lt; 0 then</span>
            <span class="comment"># Formula used: c=a%b,b>0&amp;&amp;c!=0?c+b:c</span>
            c_expr.expr &amp;:= <span class="stri">">0"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= remainder_name;
        c_expr.expr &amp;:= <span class="stri">"!=0?"</span>;
        c_expr.expr &amp;:= remainder_name;
        c_expr.expr &amp;:= <span class="stri">"+"</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= remainder_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_MOD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: remainder_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> modDividendOptimization <span class="op">and</span>
        isActionExpression(params[3], <span class="stri">"INT_LSHIFT"</span>) <span class="op">and</span>
        category(getValue(params[3], ref_list)[2]) = INTOBJECT <span class="op">and</span>
        <span class="op">not</span> isVar(getValue(params[3], ref_list)[2]) <span class="op">and</span>
        getValue(getValue(params[3], ref_list)[2], integer) = 1 <span class="keywd">then</span>
      optimize_mod_by_power_of_two(params[1], getValue(params[3], ref_list)[4],
          FALSE, c_expr);
    <span class="keywd">elsif</span> modDividendOptimization <span class="op">and</span>
        isActionExpression(params[3], <span class="stri">"INT_POW"</span>) <span class="op">and</span>
        category(getValue(params[3], ref_list)[2]) = INTOBJECT <span class="op">and</span>
        <span class="op">not</span> isVar(getValue(params[3], ref_list)[2]) <span class="op">and</span>
        getValue(getValue(params[3], ref_list)[2], integer) = 2 <span class="keywd">then</span>
      optimize_mod_by_power_of_two(params[1], getValue(params[3], ref_list)[4],
          TRUE, c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mod(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mod(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span> check_int_rem_zero_by_zero <span class="op">and</span>
          category(params[1]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[1]) <span class="op">and</span>
          getValue(params[1], integer) = 0 <span class="keywd">then</span>
      incr(countDivisionChecks);
      c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":0)"</span>;
    <span class="keywd">else</span>
      divisor_range := getIntRange(params[3]);
      <span class="keywd">if</span> params[1] = params[3] <span class="keywd">then</span>
        <span class="comment"># C compilers are allowed to optimize variable%variable to 0.</span>
        <span class="comment"># A C compiler can assume, that an "undefined behavior", like a</span>
        <span class="comment"># division by zero will never happen. So we need to handle this case.</span>
        <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
          <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
              divisor_range.mayRaiseException <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
            process_expr(params[1], c_expr);
            c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":0)"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"0"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        dividend_range := getIntRange(params[1]);
        <span class="keywd">if</span> (dividend_range.maxValue &lt;= 0 <span class="op">and</span>
            ((dividend_range.minValue > integer.first <span class="op">and</span> divisor_range.maxValue &lt; 0) <span class="op">or</span>
            divisor_range.maxValue &lt; -1)) <span class="op">or</span>
            (dividend_range.minValue >= 0 <span class="op">and</span> divisor_range.minValue > 0) <span class="keywd">then</span>
          <span class="comment"># Dividend and divisor have the same sign.</span>
          <span class="comment"># No checks for integer overflow and division by zero necessary.</span>
          <span class="comment"># Formula used: a%b</span>
          countOverflowOptimizations(c_expr);
          <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") % ("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, params[1], c_expr);
          divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, params[3], c_expr);
          <span class="keywd">if</span> check_int_division_overflow <span class="keywd">then</span>
            <span class="keywd">if</span> dividend_range.minValue = integer.first <span class="op">and</span>
                divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
              incr(countOverflowChecks);
              c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
              c_expr.expr &amp;:= dividend_name;
              c_expr.expr &amp;:= <span class="stri">"=="</span>;
              c_expr.expr &amp;:= integerLiteral(integer.first);
              c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">"==-1"</span>;
              c_expr.expr &amp;:= <span class="stri">")?"</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">":"</span>;
            <span class="keywd">else</span>
              countOverflowOptimizations(c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
            <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
              incr(countDivisionChecks);
              c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
              c_expr.expr &amp;:= divisor_name;
              c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
              c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
              c_expr.expr &amp;:= <span class="stri">":"</span>;
            <span class="keywd">else</span>
              countDivisionOptimizations(c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> (dividend_range.minValue >= 0 <span class="op">and</span> divisor_range.minValue >= 0) <span class="op">or</span>
              (dividend_range.maxValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue &lt;= 0) <span class="keywd">then</span>
            <span class="comment"># Formula used: a%b</span>
            c_expr.expr &amp;:= dividend_name;
            c_expr.expr &amp;:= <span class="stri">"%"</span>;
            c_expr.expr &amp;:= divisor_name;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">"("</span>;
            remainder_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"remainder_"</span>, c_expr);
            <span class="comment"># Formula used: c=a%b,a&lt;0^b&lt;0&amp;&amp;c!=0?c+b:c</span>
            c_expr.expr &amp;:= remainder_name;
            c_expr.expr &amp;:= <span class="stri">"="</span>;
            c_expr.expr &amp;:= dividend_name;
            c_expr.expr &amp;:= <span class="stri">"%"</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">","</span>;
            <span class="keywd">if</span> (dividend_range.maxValue >= 0 <span class="op">or</span> divisor_range.minValue &lt; 0) <span class="op">and</span>
                (dividend_range.minValue &lt; 0 <span class="op">or</span> divisor_range.maxValue >= 0) <span class="keywd">then</span>
              <span class="keywd">if</span> dividend_range.maxValue &lt; 0 <span class="keywd">then</span>
                <span class="comment"># Formula used: c=a%b,b>0&amp;&amp;c!=0?c+b:c</span>
                c_expr.expr &amp;:= divisor_name;
                c_expr.expr &amp;:= <span class="stri">">0"</span>;
              <span class="keywd">elsif</span> dividend_range.minValue >= 0 <span class="keywd">then</span>
                <span class="comment"># Formula used: c=a%b,b&lt;0&amp;&amp;c!=0?c+b:c</span>
                c_expr.expr &amp;:= divisor_name;
                c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
              <span class="keywd">elsif</span> divisor_range.minValue >= 0 <span class="keywd">then</span>
                <span class="comment"># Formula used: c=a%b,a&lt;0&amp;&amp;c!=0?c+b:c</span>
                c_expr.expr &amp;:= dividend_name;
                c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
              <span class="keywd">elsif</span> divisor_range.maxValue &lt; 0 <span class="keywd">then</span>
                <span class="comment"># Formula used: c=a%b,a>0&amp;&amp;c!=0?c+b:c</span>
                c_expr.expr &amp;:= dividend_name;
                c_expr.expr &amp;:= <span class="stri">">0"</span>;
              <span class="keywd">else</span>
                <span class="comment"># Formula used: c=a%b,a&lt;0^b&lt;0&amp;&amp;c!=0?c+b:c</span>
                c_expr.expr &amp;:= dividend_name;
                c_expr.expr &amp;:= <span class="stri">"&lt;0^"</span>;
                c_expr.expr &amp;:= divisor_name;
                c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            c_expr.expr &amp;:= remainder_name;
            c_expr.expr &amp;:= <span class="stri">"!=0?"</span>;
            c_expr.expr &amp;:= remainder_name;
            c_expr.expr &amp;:= <span class="stri">"+"</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">":"</span>;
            c_expr.expr &amp;:= remainder_name;
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_mult (<span class="op">in</span> <span class="type">reference</span>: factor1, <span class="op">in</span> <span class="type">integer</span>: factor2,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: minAllowedFactor1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxAllowedFactor1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: factor1_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: factor1_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: factor1_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: product_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: fullOverflowCheck <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> factor2 &lt; -1 <span class="keywd">then</span>
      minAllowedFactor1 := integer.last <span class="op">div</span> factor2;
      maxAllowedFactor1 := integer.first <span class="op">div</span> factor2;
    <span class="keywd">elsif</span> factor2 = -1 <span class="keywd">then</span>
      minAllowedFactor1 := -integer.last;
      maxAllowedFactor1 := integer.last;
    <span class="keywd">elsif</span> factor2 = 0 <span class="keywd">then</span>
      minAllowedFactor1 := integer.first;
      maxAllowedFactor1 := integer.last;
    <span class="keywd">elsif</span> factor2 >= 1 <span class="keywd">then</span>
      minAllowedFactor1 := integer.first <span class="op">div</span> factor2;
      maxAllowedFactor1 := integer.last <span class="op">div</span> factor2;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> getConstant(factor1, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      factor1_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span>  factor1_value &lt; minAllowedFactor1 <span class="op">or</span>
          factor1_value > maxAllowedFactor1 <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(factor1_value * factor2);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> factor2 = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"0"</span>;
    <span class="keywd">elsif</span> factor2 = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(factor1, c_expr);
    <span class="keywd">elsif</span> factor2 = -1 <span class="keywd">then</span>
      <span class="comment"># Multiplying with -1 is equal to changing the sign.</span>
      <span class="comment"># integer.first * -1 causes an integer overflow.</span>
      incr(countOptimizations);
      negate(factor1, c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      factor1_range := getIntRange(factor1);
      <span class="keywd">if</span> factor1_range &lt;> intRange.value <span class="keywd">then</span>
        <span class="keywd">if</span>  factor1_range.minValue >= minAllowedFactor1 <span class="op">and</span>
            factor1_range.maxValue &lt;= maxAllowedFactor1 <span class="keywd">then</span>
          <span class="comment"># This multiplication cannot overflow</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_mult*/("</span>;
          process_expr(factor1, c_expr);
          c_expr.expr &amp;:= <span class="stri">") * "</span>;
          c_expr.expr &amp;:= integerLiteral(factor2);
        <span class="keywd">elsif</span> factor1_range.minValue >= minAllowedFactor1 <span class="op">or</span>
              factor1_range.maxValue &lt;= maxAllowedFactor1 <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"/*simplified_overflow_check_mult*/("</span>;
          factor1_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"factor1_"</span>, factor1, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= factor1_name;
          <span class="keywd">if</span> factor1_range.minValue >= minAllowedFactor1 <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= integerLiteral(maxAllowedFactor1);
          <span class="keywd">else</span>
            c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
            c_expr.expr &amp;:= integerLiteral(minAllowedFactor1);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= factor1_name;
          c_expr.expr &amp;:= <span class="stri">" * "</span>;
          c_expr.expr &amp;:= integerLiteral(factor2);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          fullOverflowCheck := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        fullOverflowCheck := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> fullOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        <span class="keywd">if</span> ccConf.BUILTIN_MULT_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          product_name := defineTempVariable(<span class="stri">"intType"</span>, <span class="stri">"product_"</span>, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= ccConf.BUILTIN_MULT_OVERFLOW;
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(factor1, c_expr);
          c_expr.expr &amp;:= <span class="stri">", "</span>;
          c_expr.expr &amp;:= integerLiteral(factor2);
          c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
          c_expr.expr &amp;:= product_name;
          c_expr.expr &amp;:= <span class="stri">"))?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= product_name;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          factor1_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"factor1_"</span>, factor1, c_expr);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          checkIfOutsideRange(factor1_name, minAllowedFactor1,
                              maxAllowedFactor1, c_expr);
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
          c_expr.expr &amp;:= factor1_name;
          c_expr.expr &amp;:= <span class="stri">" * "</span>;
          c_expr.expr &amp;:= integerLiteral(factor2);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(factor1, c_expr);
      c_expr.expr &amp;:= <span class="stri">") * "</span>;
      c_expr.expr &amp;:= integerLiteral(factor2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_MULT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">intRange</span>: productRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doOverflowCheck <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mult(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mult(params[3], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">else</span>
      <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
        <span class="keywd">if</span> reduceOverflowChecks <span class="keywd">then</span>
          productRange := getIntMultRange(getIntRange(params[1]),
                                          getIntRange(params[3]));
          <span class="keywd">if</span> productRange.mayOverflow <span class="keywd">then</span>
            doOverflowCheck := TRUE;
          <span class="keywd">else</span>
            countOverflowOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_mult*/"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          doOverflowCheck := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> doOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        int_mult_with_overflow_check(params[1], params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") * ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_mult_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: factor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> factor = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(variable, statement);
      statement.expr &amp;:= <span class="stri">"="</span>;
      statement.expr &amp;:= integerLiteral(0);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> factor = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore integer *:= 1; */\n"</span>;
    <span class="keywd">elsif</span> factor = -1 <span class="keywd">then</span>
      <span class="keywd">if</span> check_int_arithmetic_overflow <span class="op">and</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        incr(countOverflowChecks);
        variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, variable, statement);
        statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">")) {\n"</span>;
        statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"*= -1;\n"</span>;
        statement.expr &amp;:= <span class="stri">"}\n"</span>;
      <span class="keywd">else</span>
        process_expr(variable, statement);
        statement.expr &amp;:= <span class="stri">"*= -1;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, variable, statement);
      statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
      <span class="keywd">if</span> factor &lt; 0 <span class="keywd">then</span>
        checkIfOutsideRange(variable_name, integer.last <span class="op">div</span> factor,
                            integer.first <span class="op">div</span> factor, statement);
      <span class="keywd">else</span>
        checkIfOutsideRange(variable_name, integer.first <span class="op">div</span> factor,
                            integer.last <span class="op">div</span> factor, statement);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      statement.expr &amp;:= <span class="stri">")) {\n"</span>;
      statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">" *= "</span>;
      statement.expr &amp;:= integerLiteral(factor);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= <span class="stri">"}\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      process_expr(variable, statement);
      statement.expr &amp;:= <span class="stri">"*="</span>;
      statement.expr &amp;:= integerLiteral(factor);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_MULT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: factor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: product_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_mult_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, params[1], statement);
      <span class="keywd">if</span> ccConf.BUILTIN_MULT_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
        statement.expr &amp;:= ccConf.BUILTIN_MULT_OVERFLOW;
        statement.expr &amp;:= <span class="stri">"("</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">", "</span>;
        process_expr(params[3], statement);
        statement.expr &amp;:= <span class="stri">", &amp;("</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">")))?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":0;"</span>;
      <span class="keywd">elsif</span> ccConf.INTTYPE_SIZE = 64 <span class="op">and</span> ccConf.INT128TYPE &lt;> <span class="stri">""</span> <span class="op">or</span>
          ccConf.INTTYPE_SIZE = 32 <span class="keywd">then</span>
        product_name := defineTempVariable(<span class="stri">"doubleIntType"</span>, <span class="stri">"product_"</span>, statement);
        statement.expr &amp;:= product_name;
        statement.expr &amp;:= <span class="stri">"=(doubleIntType)("</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">") * (doubleIntType)("</span>;
        process_expr(params[3], statement);
        statement.expr &amp;:= <span class="stri">"),ovfChk(!inIntTypeRange("</span>;
        statement.expr &amp;:= product_name;
        statement.expr &amp;:= <span class="stri">"))?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":("</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"=(intType)"</span>;
        statement.expr &amp;:= product_name;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">else</span>
        factor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"factor_"</span>, params[3], statement);
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;("</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"&lt;"</span>;
        statement.expr &amp;:= integerLiteral(integer.last);
        statement.expr &amp;:= <span class="stri">"/"</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">"||"</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">">0&amp;&amp;"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"&lt;"</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">"/"</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">")||"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">">0&amp;&amp;("</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;"</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">"&lt;"</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
        statement.expr &amp;:= <span class="stri">"/"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">"||"</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">">0&amp;&amp;"</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">">"</span>;
        statement.expr &amp;:= integerLiteral(integer.last);
        statement.expr &amp;:= <span class="stri">"/"</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">")?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":("</span>;
        statement.expr &amp;:= variable_name;
        statement.expr &amp;:= <span class="stri">" *= "</span>;
        statement.expr &amp;:= factor_name;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"*="</span>;
      process_expr(params[3], statement);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number1Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: number2Range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCompare <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> optimizeComparisons <span class="keywd">then</span>
      number1Range := getIntRange(params[1]);
      number2Range := getIntRange(params[3]);
      <span class="keywd">if</span> <span class="op">not</span> number1Range.mayRaiseException <span class="op">and</span> <span class="op">not</span> number2Range.mayRaiseException <span class="keywd">then</span>
        <span class="keywd">if</span> number1Range.maxValue &lt; number2Range.minValue <span class="op">or</span>
            number1Range.minValue > number2Range.maxValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"&lt;>"</span>, TRUE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"1"</span>;
          doCompare := FALSE;
        <span class="keywd">elsif</span> number1Range.minValue = number1Range.maxValue <span class="op">and</span>
            number2Range.minValue = number2Range.maxValue <span class="op">and</span>
            number1Range.minValue = number2Range.minValue <span class="keywd">then</span>
          warning(COMPARISON_RESULT_CONSTANT, <span class="stri">"&lt;>"</span>, FALSE, c_expr);
          incr(countOptimizations);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
          doCompare := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> doCompare <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") != ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_NEGATE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[2], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      number := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> number = integer.first <span class="op">and</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(-number);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      negate(params[2], c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_N_BYTES_BE_SIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"intNBytesBeSigned("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_n_bytes_be_unsigned (<span class="op">in</span> <span class="type">reference</span>: number,
    <span class="op">in</span> <span class="type">integer</span>: length, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedNumber <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: numberValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: numberRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: rangeCheckDone <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: buffer_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt;= 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(number, INTOBJECT, evaluatedNumber) <span class="keywd">then</span>
      incr(countOptimizations);
      numberValue := getValue(evaluatedNumber, integer);
      <span class="keywd">if</span> numberValue &lt; 0 <span class="op">or</span> (length &lt; 8 <span class="op">and</span> numberValue >= 2 ** (8 * length)) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= stringLiteral(bytes(numberValue, UNSIGNED, BE, length));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> ccConf.ALLOW_STRITYPE_SLICES <span class="op">and</span> length &lt;= 8 <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      incr(c_expr.temp_num);
      buffer_name := <span class="stri">"buffer_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"union {\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  struct striStruct striBuf;\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  char charBuf[SIZ_STRI("</span>;
      c_expr.temp_decls &amp;:= str(length);
      c_expr.temp_decls &amp;:= <span class="stri">")];\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"} "</span>;
      c_expr.temp_decls &amp;:= buffer_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, number, c_expr);
      <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
        numberRange := getIntRange(number);
        <span class="keywd">if</span> numberRange.minValue >= 0 <span class="op">and</span>
            (length >= 8 <span class="op">or</span> numberRange.maxValue &lt; 2 ** (8 * length)) <span class="keywd">then</span>
          <span class="comment"># This function cannot trigger a range error.</span>
          countRangeOptimizations(c_expr);
        <span class="keywd">else</span>
          incr(countRangeChecks);
          c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
          <span class="keywd">if</span> length >= 8 <span class="op">or</span> numberRange.maxValue &lt; 2 ** (8 * length) <span class="keywd">then</span>
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
          <span class="keywd">else</span>
            checkIfOutsideRange(number_name, 0, pred(2 ** (8 * length)), c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":("</span>;
          rangeCheckDone := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.size="</span>;
      c_expr.expr &amp;:= str(length);
      c_expr.expr &amp;:= <span class="stri">","</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem="</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem1,"</span>;
      <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length <span class="keywd">do</span>
        c_expr.expr &amp;:= buffer_name;
        c_expr.expr &amp;:= <span class="stri">".striBuf.mem1["</span>;
        c_expr.expr &amp;:= str(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]=(strElemType)("</span>;
        <span class="keywd">if</span> index &lt;> length <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">">>"</span>;
          c_expr.expr &amp;:= str(8 * (length - index));
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= number_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"&amp;255"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"),"</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf"</span>;
      <span class="keywd">if</span> rangeCheckDone <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intNBytesBeUnsigned("</span>;
      getStdParamToResultExpr(number, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(length);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_N_BYTES_BE_UNSIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedLength <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        getConstant(params[4], INTOBJECT, evaluatedLength) <span class="keywd">then</span>
      process_const_int_n_bytes_be_unsigned(params[1],
          getValue(evaluatedLength, integer), c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intNBytesBeUnsigned("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[4], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_N_BYTES_LE_SIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"intNBytesLeSigned("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_n_bytes_le_unsigned (<span class="op">in</span> <span class="type">reference</span>: number,
    <span class="op">in</span> <span class="type">integer</span>: length, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedNumber <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: numberValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: numberRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: rangeCheckDone <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: buffer_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt;= 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(number, INTOBJECT, evaluatedNumber) <span class="keywd">then</span>
      incr(countOptimizations);
      numberValue := getValue(evaluatedNumber, integer);
      <span class="keywd">if</span> numberValue &lt; 0 <span class="op">or</span> (length &lt; 8 <span class="op">and</span> numberValue >= 2 ** (8 * length)) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= stringLiteral(bytes(numberValue, UNSIGNED, LE, length));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> ccConf.ALLOW_STRITYPE_SLICES <span class="op">and</span> length &lt;= 8 <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      incr(c_expr.temp_num);
      buffer_name := <span class="stri">"buffer_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"union {\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  struct striStruct striBuf;\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  char charBuf[SIZ_STRI("</span>;
      c_expr.temp_decls &amp;:= str(length);
      c_expr.temp_decls &amp;:= <span class="stri">")];\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"} "</span>;
      c_expr.temp_decls &amp;:= buffer_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, number, c_expr);
      <span class="keywd">if</span> function_range_check <span class="keywd">then</span>
        numberRange := getIntRange(number);
        <span class="keywd">if</span> numberRange.minValue >= 0 <span class="op">and</span>
            (length >= 8 <span class="op">or</span> numberRange.maxValue &lt; 2 ** (8 * length)) <span class="keywd">then</span>
          <span class="comment"># This function cannot trigger a range error.</span>
          countRangeOptimizations(c_expr);
        <span class="keywd">else</span>
          incr(countRangeChecks);
          c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
          <span class="keywd">if</span> length >= 8 <span class="op">or</span> numberRange.maxValue &lt; 2 ** (8 * length) <span class="keywd">then</span>
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
          <span class="keywd">else</span>
            checkIfOutsideRange(number_name, 0, pred(2 ** (8 * length)), c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":("</span>;
          rangeCheckDone := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.size="</span>;
      c_expr.expr &amp;:= str(length);
      c_expr.expr &amp;:= <span class="stri">","</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem="</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem1,"</span>;
      <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length <span class="keywd">do</span>
        c_expr.expr &amp;:= buffer_name;
        c_expr.expr &amp;:= <span class="stri">".striBuf.mem1["</span>;
        c_expr.expr &amp;:= str(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]=(strElemType)("</span>;
        <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">">>"</span>;
          c_expr.expr &amp;:= str(8 * pred(index));
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= number_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> index &lt;> length <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"&amp;255"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"),"</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf"</span>;
      <span class="keywd">if</span> rangeCheckDone <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intNBytesLeUnsigned("</span>;
      getStdParamToResultExpr(number, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(length);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_N_BYTES_LE_UNSIGNED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedLength <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        getConstant(params[4], INTOBJECT, evaluatedLength) <span class="keywd">then</span>
      process_const_int_n_bytes_le_unsigned(params[1],
          getValue(evaluatedLength, integer), c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intNBytesLeUnsigned("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[4], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_ODD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")&amp;1"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_PARSE1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intParse("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_PLUS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_expr(params[2], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: powerOverflows (<span class="op">in</span> <span class="type">integer</span>: base, <span class="op">in</span> <span class="type">integer</span>: exponent) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: powerOverflows <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> exponent &lt; 0 <span class="keywd">then</span>
      <span class="comment"># A negative exponent raises NUMERIC_ERROR instead of OVERFLOW_ERROR.</span>
      <span class="comment"># The function powerOverflows() is never called with a negative exponent.</span>
      powerOverflows := FALSE;
    <span class="keywd">elsif</span> exponent >= minIdx(minBaseOfExponent) <span class="keywd">then</span>
      <span class="keywd">if</span> exponent &lt;= maxIdx(minBaseOfExponent) <span class="keywd">then</span>
        <span class="keywd">if</span>  base &lt; minBaseOfExponent[exponent] <span class="op">or</span>
            base > maxBaseOfExponent[exponent] <span class="keywd">then</span>
          powerOverflows := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> base &lt; minIdx(maxExponentOfBase) <span class="op">or</span>
            base > maxIdx(maxExponentOfBase) <span class="op">or</span>
            exponent > maxExponentOfBase[base] <span class="keywd">then</span>
        powerOverflows := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_pow (<span class="op">in</span> <span class="type">reference</span>: base, <span class="op">in</span> <span class="type">integer</span>: exponent,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: power <span class="keywd">is</span> [2] (
        <span class="comment">(*  2 *)</span> <span class="stri">"x*x"</span>, <span class="stri">"x*x*x"</span>, <span class="stri">"(a=x*x,a*a)"</span>, <span class="stri">"(a=x*x,a*a*x)"</span>, <span class="stri">"(a=x*x*x,a*a)"</span>,
        <span class="comment">(*  7 *)</span> <span class="stri">"(a=x*x,a*a*a*x)"</span>, <span class="stri">"(b=(a=x*x,a*a),b*b)"</span>, <span class="stri">"(b=(a=x*x,a*a),b*b*x)"</span>,
        <span class="comment">(* 10 *)</span> <span class="stri">"(b=(a=x*x,a*a*x),b*b)"</span>, <span class="stri">"(b=(a=x*x,a*a*x),b*b*x)"</span>,
        <span class="comment">(* 12 *)</span> <span class="stri">"(b=(a=x*x*x,a*a),b*b)"</span>, <span class="stri">"(b=(a=x*x,a*a),b*b*b*x)"</span>,
        <span class="comment">(* 14 *)</span> <span class="stri">"(b=(a=x*x,a*a*a*x),b*b)"</span>, <span class="stri">"(b=(a=x*x*x,a*a),b*b*a)"</span>,
        <span class="comment">(* 16 *)</span> <span class="stri">"(c=(b=(a=x*x,a*a),b*b),c*c)"</span>, <span class="stri">"(c=(b=(a=x*x,a*a),b*b),c*c*x)"</span>,
        <span class="comment">(* 18 *)</span> <span class="stri">"(c=(b=(a=x*x,a*a),b*b),c*c*a)"</span>, <span class="stri">"(c=(b=(a=x*x,a*a*x),b*a),c*c*b)"</span>,
        <span class="comment">(* 20 *)</span> <span class="stri">"(c=(b=(a=x*x,a*a*x),b*b),c*c)"</span>, <span class="stri">"(c=(b=(a=x*x,a*a*x),b*b),c*c*x)"</span>,
        <span class="comment">(* 22 *)</span> <span class="stri">"(c=(b=(a=x*x,a*a*x),b*b*x),c*c)"</span>);
    <span class="keywd">const</span> <span class="type">string</span>: variables <span class="keywd">is</span> <span class="stri">"abc"</span>;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedBase <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: baseValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: powerTemplate <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: baseRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: baseName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: variableName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: minBase <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxBase <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> exponent &lt; 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(base, INTOBJECT, evaluatedBase) <span class="keywd">then</span>
      incr(countOptimizations);
      baseValue := getValue(evaluatedBase, integer);
      <span class="keywd">if</span> powerOverflows(baseValue, exponent) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(baseValue ** exponent);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> exponent = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= integerLiteral(1);
    <span class="keywd">elsif</span> exponent = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(base, c_expr);
    <span class="keywd">elsif</span> exponent <span class="op">in</span> {2 .. maxIdx(power)} <span class="keywd">then</span>
      incr(countOptimizations);
      powerTemplate := power[exponent];
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      baseName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"base_"</span>, base, c_expr);
      <span class="keywd">if</span> check_int_arithmetic_overflow <span class="keywd">then</span>
        baseRange := getIntRange(base);
        <span class="keywd">if</span> baseRange.minValue &lt; minBaseOfExponent[exponent] <span class="op">or</span>
            baseRange.maxValue > maxBaseOfExponent[exponent] <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          checkIfOutsideRange(baseName, minBaseOfExponent[exponent],
                              maxBaseOfExponent[exponent], c_expr);
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">for</span> ch <span class="keywd">range</span> variables <span class="keywd">do</span>
        <span class="keywd">if</span> pos(powerTemplate, ch) &lt;> 0 <span class="keywd">then</span>
          variableName := defineTempVariable(<span class="stri">"intType"</span>, str(ch) &amp; <span class="stri">"_"</span>, c_expr);
          powerTemplate := replace(powerTemplate, str(ch), variableName);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= replace(powerTemplate, <span class="stri">"x"</span>, baseName);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> integer_overflow_check <span class="keywd">then</span>
      incr(countOptimizations);
      baseRange := getIntRange(base);
      minBase := minIdx(maxExponentOfBase);
      <span class="keywd">while</span> exponent > maxExponentOfBase[minBase] <span class="keywd">do</span>
        incr(minBase);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      maxBase := maxIdx(maxExponentOfBase);
      <span class="keywd">while</span> exponent > maxExponentOfBase[maxBase] <span class="keywd">do</span>
        decr(maxBase);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      baseName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"base_"</span>, base, c_expr);
      <span class="keywd">if</span> baseRange.minValue &lt; minBase <span class="op">or</span>
          baseRange.maxValue > maxBase <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkIfOutsideRange(baseName, minBase, maxBase, c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
      <span class="keywd">else</span>
        countOverflowOptimizations(c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"intPow("</span>;
      c_expr.expr &amp;:= baseName;
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(exponent);
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intPow("</span>;
      process_expr(base, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(exponent);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_pow (<span class="op">in</span> <span class="type">integer</span>: base, <span class="op">in</span> <span class="type">reference</span>: exponent,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: exponentRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: exponentName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: log2ofNegatedBase <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxExponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    exponentRange := getIntRange(exponent);
    <span class="keywd">if</span> exponentRange.maxValue &lt; 0 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> base = -1 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> integer_power_check <span class="op">and</span> exponentRange.minValue &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponentName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"exponent_"</span>, exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":1-(("</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">"&amp;1)&lt;&lt;1))"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"1-((("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")&amp;1)&lt;&lt;1)"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> integer_power_check <span class="op">and</span> exponentRange.minValue &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponentName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"exponent_"</span>, exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">"==0?"</span>;
        c_expr.expr &amp;:= integerLiteral(1);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= integerLiteral(0);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")==0?"</span>;
        c_expr.expr &amp;:= integerLiteral(1);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= integerLiteral(0);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> integer_power_check <span class="op">and</span> exponentRange.minValue &lt; 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"(numChk(("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")&lt;0)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= integerLiteral(1);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(1);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base > 0 <span class="op">and</span> 2 ** log2(base) = base <span class="keywd">then</span>
      <span class="comment"># Base is a power of two.</span>
      incr(countOptimizations);
      maxExponent := log2(integer.last) <span class="op">div</span> log2(base);
      <span class="keywd">if</span> exponentRange.minValue > maxExponent <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">elsif</span> integer_power_check <span class="op">and</span> exponentRange.minValue &lt; 0 <span class="op">or</span>
          integer_overflow_check <span class="op">and</span> exponentRange.maxValue > maxExponent <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponentName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"exponent_"</span>, exponent, c_expr);
        <span class="keywd">if</span> integer_power_check <span class="op">and</span> exponentRange.minValue &lt; 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
          c_expr.expr &amp;:= exponentName;
          c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> integer_overflow_check <span class="keywd">then</span>
          <span class="keywd">if</span> exponentRange.maxValue > maxExponent <span class="keywd">then</span>
            incr(countOverflowChecks);
            c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
            c_expr.expr &amp;:= exponentName;
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= integerLiteral(maxExponent);
            c_expr.expr &amp;:= <span class="stri">")?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countOverflowOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(1);
        c_expr.expr &amp;:= <span class="stri">"&lt;&lt;"</span>;
        <span class="keywd">if</span> base &lt;> 2 <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(log2(base));
          c_expr.expr &amp;:= <span class="stri">"*"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> integer_overflow_check <span class="keywd">then</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(1);
        c_expr.expr &amp;:= <span class="stri">"&lt;&lt;"</span>;
        <span class="keywd">if</span> base &lt;> 2 <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(log2(base));
          c_expr.expr &amp;:= <span class="stri">"*"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(exponent, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> base &lt; 0 <span class="op">and</span> bitLength(base) = lowestSetBit(base) <span class="keywd">then</span>
      <span class="comment"># Base is a negative power of two.</span>
      <span class="comment"># The check above is (almost) equivalent to:</span>
      <span class="comment">#   base &lt; 0 and 2 ** log2(-base) = -base</span>
      <span class="comment"># The check with bitLength is used to avoid negating the base.</span>
      <span class="comment"># Negating the base would fail for the most negative integer.</span>
      incr(countOptimizations);
      <span class="comment"># The following computation is done with bigInteger,</span>
      <span class="comment"># because base could be integer.first.</span>
      log2ofNegatedBase := ord(log2(-bigInteger(base)));
      maxExponent := ord(log2(-bigInteger(integer.first))) <span class="op">div</span> log2ofNegatedBase;
      <span class="keywd">if</span> <span class="op">not</span> odd(maxExponent) <span class="keywd">then</span>
        maxExponent := log2(integer.last) <span class="op">div</span> log2ofNegatedBase;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> exponentRange.minValue > maxExponent <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponentName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"exponent_"</span>, exponent, c_expr);
        <span class="keywd">if</span> integer_power_check <span class="op">and</span> exponentRange.minValue &lt; 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"numChk("</span>;
          c_expr.expr &amp;:= exponentName;
          c_expr.expr &amp;:= <span class="stri">"&lt;0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> integer_overflow_check <span class="keywd">then</span>
          <span class="keywd">if</span> exponentRange.maxValue > maxExponent <span class="keywd">then</span>
            incr(countOverflowChecks);
            c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
            c_expr.expr &amp;:= exponentName;
            c_expr.expr &amp;:= <span class="stri">">"</span>;
            c_expr.expr &amp;:= integerLiteral(maxExponent);
            c_expr.expr &amp;:= <span class="stri">")?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countOverflowOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">"&amp;1?"</span>;
        c_expr.expr &amp;:= integerLiteral(-1);
        c_expr.expr &amp;:= <span class="stri">"&lt;&lt;"</span>;
        <span class="keywd">if</span> base &lt;> -2 <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(log2ofNegatedBase);
          c_expr.expr &amp;:= <span class="stri">"*"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= integerLiteral(1);
        c_expr.expr &amp;:= <span class="stri">"&lt;&lt;"</span>;
        <span class="keywd">if</span> base &lt;> -2 <span class="keywd">then</span>
          c_expr.expr &amp;:= integerLiteral(log2ofNegatedBase);
          c_expr.expr &amp;:= <span class="stri">"*"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> integer_overflow_check <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> base >= minIdx(maxExponentOfBase) <span class="op">and</span> base &lt;= maxIdx(maxExponentOfBase) <span class="keywd">then</span>
        maxExponent := maxExponentOfBase[base];
      <span class="keywd">elsif</span> base > 0 <span class="keywd">then</span>
        maxExponent := 2;
        <span class="keywd">while</span> base &lt;= maxBaseOfExponent[maxExponent] <span class="keywd">do</span>
          incr(maxExponent);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        decr(maxExponent);
      <span class="keywd">else</span> <span class="comment"># base &lt; 0</span>
        maxExponent := 2;
        <span class="keywd">while</span> base >= minBaseOfExponent[maxExponent] <span class="keywd">do</span>
          incr(maxExponent);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        decr(maxExponent);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> exponentRange.minValue > maxExponent <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        exponentName := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"exponent_"</span>, exponent, c_expr);
        <span class="keywd">if</span> exponentRange.maxValue > maxExponent <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= exponentName;
          c_expr.expr &amp;:= <span class="stri">">"</span>;
          c_expr.expr &amp;:= integerLiteral(maxExponent);
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"intPow("</span>;
        c_expr.expr &amp;:= integerLiteral(base);
        c_expr.expr &amp;:= <span class="stri">", "</span>;
        c_expr.expr &amp;:= exponentName;
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intPow("</span>;
      c_expr.expr &amp;:= integerLiteral(base);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(exponent, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_POW, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">intRange</span>: baseRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: exponentRange <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_pow(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_pow(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">else</span>
      baseRange := getIntRange(params[1]);
      exponentRange := getIntRange(params[3]);
      <span class="keywd">if</span> exponentRange.maxValue &lt; 0 <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      <span class="keywd">else</span>
        <span class="keywd">if</span> integer_overflow_check <span class="keywd">then</span>
          <span class="keywd">if</span> exponentRange.maxValue &lt; minIdx(minBaseOfExponent) <span class="op">or</span>
              exponentRange.maxValue > maxIdx(minBaseOfExponent) <span class="op">or</span>
              baseRange.minValue &lt; minBaseOfExponent[exponentRange.maxValue] <span class="op">or</span>
              baseRange.maxValue > maxBaseOfExponent[exponentRange.maxValue] <span class="keywd">then</span>
            incr(countOverflowChecks);
            c_expr.expr &amp;:= <span class="stri">"intPowOvfChk("</span>;
          <span class="keywd">else</span>
            countOverflowOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"intPow("</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"intPow("</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">", "</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_PRED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> callOptimizeIntAdd <span class="keywd">then</span>
      optimize_int_add(params[1], -1, c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      number := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> number = integer.first <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(pred(number));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"=="</span>;
      c_expr.expr &amp;:= integerLiteral(integer.first);
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"-1)"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")-1"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_radix (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">integer</span>: base,
    <span class="op">in</span> <span class="type">boolean</span>: upperCase, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> base &lt; 2 <span class="op">or</span> base > 36 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> base = 10 <span class="keywd">then</span>
      incr(countOptimizations);
      process_int_str(param1, c_expr);
    <span class="keywd">elsif</span> 2 ** log2(base) = base <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intRadixPow2("</span>;
      getStdParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= integerLiteral(log2(base));
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= integerLiteral(pred(base));
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= str(ord(upperCase));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intRadix("</span>;
      getStdParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(base);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= str(ord(upperCase));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_int_radix (<span class="op">in</span> <span class="type">ref_list</span>: params, <span class="op">in</span> <span class="type">boolean</span>: upperCase,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_radix(params[1], getValue(evaluatedParam, integer),
          upperCase, c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"intRadix("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= str(ord(upperCase));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_radix, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_int_radix(params, FALSE, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_RADIX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_int_radix(params, TRUE, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_rand (<span class="op">in</span> <span class="type">integer</span>: lowerBound, <span class="op">in</span> <span class="type">integer</span>: upperBound,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">bigInteger</span>: UINTTYPE_MAX <span class="keywd">is</span> 18446744073709551615_;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: beyond <span class="keywd">is</span> 0_;
    <span class="keywd">var</span> <span class="type">bigInteger</span>: rand_max <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> lowerBound >= upperBound <span class="keywd">then</span>
      <span class="keywd">if</span> lowerBound = upperBound <span class="keywd">then</span>
        c_expr.expr &amp;:= integerLiteral(lowerBound);
      <span class="keywd">else</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      beyond := bigInteger(upperBound) - bigInteger(lowerBound) + 1_;
      <span class="keywd">if</span> beyond = succ(UINTTYPE_MAX) <span class="keywd">then</span>
        <span class="comment"># lowerBound must be integer.first and upperBound must be integer.last.</span>
        c_expr.expr &amp;:= <span class="stri">"(intType) uintRand()"</span>;
      <span class="keywd">elsif</span> 2_ ** ord(log2(beyond)) = beyond <span class="keywd">then</span>
        <span class="comment"># beyond is a power of two.</span>
        c_expr.expr &amp;:= <span class="stri">"(intType) ("</span>;
        <span class="keywd">if</span> lowerBound &lt;> 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"(uintType) "</span>;
          c_expr.expr &amp;:= integerLiteral(lowerBound);
          c_expr.expr &amp;:= <span class="stri">" + ("</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"uintRand() &amp; "</span>;
        c_expr.expr &amp;:= str(pred(beyond));
        c_expr.expr &amp;:= <span class="stri">"U"</span>;
        c_expr.expr &amp;:= ccConf.INTTYPE_LITERAL_SUFFIX;
        <span class="keywd">if</span> lowerBound &lt;> 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"(intType) ("</span>;
        <span class="keywd">if</span> lowerBound &lt;> 0 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"(uintType) "</span>;
          c_expr.expr &amp;:= integerLiteral(lowerBound);
          c_expr.expr &amp;:= <span class="stri">" + "</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        rand_max := UINTTYPE_MAX - (succ(UINTTYPE_MAX) <span class="op">rem</span> beyond);
        <span class="comment"># succ(UINTTYPE_MAX) is a power of two.</span>
        <span class="comment"># Therefore rand_max will always be below UINTTYPE_MAX.</span>
        c_expr.expr &amp;:= <span class="stri">"uintRandLimited("</span>;
        c_expr.expr &amp;:= str(rand_max);
        c_expr.expr &amp;:= <span class="stri">"U"</span>;
        c_expr.expr &amp;:= ccConf.INTTYPE_LITERAL_SUFFIX;
        c_expr.expr &amp;:= <span class="stri">") % "</span>;
        c_expr.expr &amp;:= str(beyond);
        c_expr.expr &amp;:= <span class="stri">"U"</span>;
        c_expr.expr &amp;:= ccConf.INTTYPE_LITERAL_SUFFIX;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_RAND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedLowerBound <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedUpperBound <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], INTOBJECT, evaluatedLowerBound) <span class="op">and</span>
        getConstant(params[2], INTOBJECT, evaluatedUpperBound) <span class="keywd">then</span>
      process_const_int_rand(getValue(evaluatedLowerBound, integer),
                             getValue(evaluatedUpperBound, integer), c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"intRand("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_rem (<span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">integer</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedDividend <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: dividend_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"NUMERIC_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
    <span class="keywd">elsif</span> divisor = 1 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"0"</span>;
    <span class="keywd">elsif</span> getConstant(dividend, INTOBJECT, evaluatedDividend) <span class="keywd">then</span>
      incr(countOptimizations);
      dividend_value := getValue(evaluatedDividend, integer);
      <span class="keywd">if</span> divisor = -1 <span class="op">and</span> dividend_value &lt; -integer.last <span class="keywd">then</span>
        <span class="comment"># Normally this raises OVERFLOW_ERROR, but it is not guaranteed to do so.</span>
        <span class="comment"># According to the optimization rules for overflow it is okay</span>
        <span class="comment"># to deliver the correct result instead of raising OVERFLOW_ERROR.</span>
        <span class="comment"># In case of a remainder by -1 the correct result is always 0.</span>
        <span class="keywd">if</span> reduceOverflowChecks <span class="keywd">then</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_rem*/ 0"</span>;
        <span class="keywd">else</span>
          warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(dividend_value <span class="op">rem</span> divisor);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor = -1 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> <span class="op">not</span> check_int_division_overflow <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">elsif</span> reduceOverflowChecks <span class="keywd">then</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_rem*/ 0"</span>;
      <span class="keywd">else</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        c_expr.expr &amp;:= dividend_name;
        c_expr.expr &amp;:= <span class="stri">"=="</span>;
        c_expr.expr &amp;:= integerLiteral(integer.first);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":0)"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> divisor > 0 <span class="op">and</span> 2 ** log2(divisor) = divisor <span class="keywd">then</span>
      <span class="comment"># Divisor is a power of two.</span>
      dividend_range := getIntRange(dividend);
      <span class="keywd">if</span> dividend_range.minValue >= 0 <span class="keywd">then</span>
        incr(countOptimizations);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
        c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
        c_expr.expr &amp;:= integerLiteral(pred(divisor));
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">") % "</span>;
        c_expr.expr &amp;:= integerLiteral(divisor);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(dividend, c_expr);
      c_expr.expr &amp;:= <span class="stri">") % "</span>;
      c_expr.expr &amp;:= integerLiteral(divisor);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_rem (<span class="op">in</span> <span class="type">integer</span>: dividend, <span class="op">in</span> <span class="type">reference</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    divisor_range := getIntRange(divisor);
    <span class="keywd">if</span> dividend = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
        <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
            divisor_range.mayRaiseException <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
          process_expr(divisor, c_expr);
          c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":0)"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_division_overflow <span class="op">and</span> dividend = integer.first <span class="keywd">then</span>
      <span class="comment"># integer.first % -1 causes an integer overflow.</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
      <span class="keywd">if</span> divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">"==-1)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
      <span class="keywd">else</span>
        countOverflowOptimizations(c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
        <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= integerLiteral(dividend);
      c_expr.expr &amp;:= <span class="stri">" % "</span>;
      c_expr.expr &amp;:= divisor_name;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">elsif</span> check_int_rem_by_zero <span class="keywd">then</span>
      <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
        incr(countDivisionChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" % "</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        countDivisionOptimizations(c_expr);
        c_expr.expr &amp;:= integerLiteral(dividend);
        c_expr.expr &amp;:= <span class="stri">" % ("</span>;
        process_expr(divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= integerLiteral(dividend);
      c_expr.expr &amp;:= <span class="stri">" % ("</span>;
      process_expr(divisor, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_REM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: dividend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: divisor_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: dividend_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">intRange</span>: divisor_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_rem(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> constValueIsEqual(params[3], -1) <span class="keywd">then</span>
      process_const_int_rem(params[1], -1, c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_rem(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">elsif</span> evaluate_const_expr = 0 <span class="op">and</span> check_int_rem_zero_by_zero <span class="op">and</span>
          category(params[1]) = INTOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[1]) <span class="op">and</span>
          getValue(params[1], integer) = 0 <span class="keywd">then</span>
      incr(countDivisionChecks);
      c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":0)"</span>;
    <span class="keywd">else</span>
      divisor_range := getIntRange(params[3]);
      <span class="keywd">if</span> params[1] = params[3] <span class="keywd">then</span>
        <span class="comment"># C compilers are allowed to optimize variable%variable to 0.</span>
        <span class="comment"># A C compiler can assume, that an "undefined behavior", like a</span>
        <span class="comment"># division by zero will never happen. So we need to handle this case.</span>
        <span class="keywd">if</span> integer_division_check <span class="keywd">then</span>
          <span class="keywd">if</span> (divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0) <span class="op">or</span>
              divisor_range.mayRaiseException <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"(divChk(("</span>;
            process_expr(params[1], c_expr);
            c_expr.expr &amp;:= <span class="stri">")==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":0)"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
            c_expr.expr &amp;:= <span class="stri">"0"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"0"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> check_int_division_overflow <span class="keywd">then</span>
        <span class="comment"># integer.first % -1 causes an integer overflow.</span>
        dividend_range := getIntRange(params[1]);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        dividend_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"dividend_"</span>, params[1], c_expr);
        divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, params[3], c_expr);
        <span class="keywd">if</span> dividend_range.minValue = integer.first <span class="op">and</span>
            divisor_range.minValue &lt;= -1 <span class="op">and</span> divisor_range.maxValue >= -1 <span class="keywd">then</span>
          incr(countOverflowChecks);
          c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
          c_expr.expr &amp;:= dividend_name;
          c_expr.expr &amp;:= <span class="stri">"=="</span>;
          c_expr.expr &amp;:= integerLiteral(integer.first);
          c_expr.expr &amp;:= <span class="stri">"&amp;&amp;"</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==-1"</span>;
          c_expr.expr &amp;:= <span class="stri">")?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":"</span>;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> check_int_rem_by_zero <span class="keywd">then</span>
          <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
            incr(countDivisionChecks);
            c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
            c_expr.expr &amp;:= divisor_name;
            c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
            c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
            c_expr.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">else</span>
            countDivisionOptimizations(c_expr);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= dividend_name;
        c_expr.expr &amp;:= <span class="stri">" % "</span>;
        c_expr.expr &amp;:= divisor_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">elsif</span> check_int_rem_by_zero <span class="keywd">then</span>
        <span class="keywd">if</span> divisor_range.minValue &lt;= 0 <span class="op">and</span> divisor_range.maxValue >= 0 <span class="keywd">then</span>
          incr(countDivisionChecks);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          divisor_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"divisor_"</span>, params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">"divChk("</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">"==0)?"</span>;
          c_expr.expr &amp;:= intRaiseError(<span class="stri">"NUMERIC_ERROR"</span>);
          c_expr.expr &amp;:= <span class="stri">":("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") % "</span>;
          c_expr.expr &amp;:= divisor_name;
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          countDivisionOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">") % ("</span>;
          process_expr(params[3], c_expr);
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") % ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_rshift (<span class="op">in</span> <span class="type">reference</span>: number, <span class="op">in</span> <span class="type">integer</span>: rshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedNumber <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rshift &lt; 0 <span class="op">or</span> rshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(number, INTOBJECT, evaluatedNumber) <span class="keywd">then</span>
      incr(countOptimizations);
      <span class="comment"># Right shift does never trigger OVERFLOW_ERROR.</span>
      c_expr.expr &amp;:= integerLiteral(getValue(evaluatedNumber, integer) >> rshift);
    <span class="keywd">elsif</span> rshift = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      process_expr(number, c_expr);
    <span class="keywd">else</span>
      <span class="keywd">if</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(number, c_expr);
        c_expr.expr &amp;:= <span class="stri">") >> "</span>;
        c_expr.expr &amp;:= integerLiteral(rshift);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, number, c_expr);
        doRshift(number_name, integerLiteral(rshift), c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_RSHIFT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: rshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: rshift_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">boolean</span>: doOverflowCheck <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_rshift(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
      <span class="keywd">if</span> check_int_shift_overflow <span class="keywd">then</span>
        rshift_range := getIntRange(params[3]);
        <span class="keywd">if</span> rshift_range.minValue &lt; 0 <span class="op">or</span>
            rshift_range.maxValue >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
          incr(countOverflowChecks);
          doOverflowCheck := TRUE;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_rshift*/"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> doOverflowCheck <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        rshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"rshift_"</span>, params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(rshift_name, integerLiteral(ccConf.INTTYPE_SIZE), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") >> "</span>;
        c_expr.expr &amp;:= rshift_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") >> ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> check_int_shift_overflow <span class="keywd">then</span>
        rshift_range := getIntRange(params[3]);
        <span class="keywd">if</span> rshift_range.minValue &lt; 0 <span class="op">or</span>
            rshift_range.maxValue >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
          incr(countOverflowChecks);
          doOverflowCheck := TRUE;
        <span class="keywd">else</span>
          countOverflowOptimizations(c_expr);
          c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_rshift*/"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> doOverflowCheck <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
        rshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"rshift_"</span>, params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(rshift_name, integerLiteral(ccConf.INTTYPE_SIZE), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        doRshift(number_name, rshift_name, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
        <span class="comment">(* Formula used: a&lt;0?~(~a>>b):a>>b *)</span>
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;0?~(~"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">" >> ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")):"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">" >> ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_rshift_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: rshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rshift &lt; 0 <span class="op">or</span> rshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      setDiagnosticLine(c_expr);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">elsif</span> rshift = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore integer >>:= 0; */\n"</span>;
    <span class="keywd">elsif</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
      process_expr(variable, statement);
      statement.expr &amp;:= <span class="stri">">>="</span>;
      statement.expr &amp;:= integerLiteral(rshift);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, variable, statement);
      <span class="comment">(* Formula used: a&lt;0?a=~(~a>>b):a>>=b; *)</span>
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"&lt;0?"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"= ~(~"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">" >> "</span>;
      statement.expr &amp;:= integerLiteral(rshift);
      statement.expr &amp;:= <span class="stri">"):("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">" >>= "</span>;
      statement.expr &amp;:= integerLiteral(rshift);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_RSHIFT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: rshift_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_rshift_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> ccConf.RSHIFT_DOES_SIGN_EXTEND <span class="keywd">then</span>
      <span class="keywd">if</span> check_int_shift_overflow <span class="keywd">then</span>
        incr(countOverflowChecks);
        rshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"rshift_"</span>, params[3], statement);
        statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(rshift_name, integerLiteral(ccConf.INTTYPE_SIZE), statement);
        statement.expr &amp;:= <span class="stri">")?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":("</span>;
        process_expr(params[1], statement);
        statement.expr &amp;:= <span class="stri">">>="</span>;
        statement.expr &amp;:= rshift_name;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
      <span class="keywd">else</span>
        process_expr(params[1], statement);
        statement.expr &amp;:= <span class="stri">">>="</span>;
        process_expr(params[3], statement);
        statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, params[1], statement);
      rshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"rshift_"</span>, params[3], statement);
      <span class="keywd">if</span> check_int_shift_overflow <span class="keywd">then</span>
        incr(countOverflowChecks);
        statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(rshift_name, integerLiteral(ccConf.INTTYPE_SIZE), statement);
        statement.expr &amp;:= <span class="stri">")?"</span>;
        statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        statement.expr &amp;:= <span class="stri">":"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="comment">(* Formula used: a&lt;0?a=~(~a>>b):a>>=b; *)</span>
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"&lt;0? "</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"= ~(~"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">" >> "</span>;
      statement.expr &amp;:= rshift_name;
      statement.expr &amp;:= <span class="stri">"):("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">" >>= "</span>;
      statement.expr &amp;:= rshift_name;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_SBTR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: minuend_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: subtrahend_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> callOptimizeIntAdd <span class="keywd">then</span>
      optimize_int_add(params, FALSE, c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_sbtr(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_sbtr(getValue(evaluatedParam, integer), params[3], c_expr);
    <span class="keywd">else</span>
      process_int_sbtr(params[1], params[3], c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_int_sbtr_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: delta,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> delta = 0 <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/* ignore integer -:= 0; */\n"</span>;
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, variable, statement);
      statement.expr &amp;:= <span class="stri">"if (ovfChk("</span>;
      statement.expr &amp;:= variable_name;
      <span class="keywd">if</span> delta = -1 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.last);
      <span class="keywd">elsif</span> delta = 1 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"=="</span>;
        statement.expr &amp;:= integerLiteral(integer.first);
      <span class="keywd">elsif</span> delta &lt; 0 <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">">"</span>;
        statement.expr &amp;:= integerLiteral(integer.last + delta);
      <span class="keywd">else</span>
        statement.expr &amp;:= <span class="stri">"&lt;"</span>;
        statement.expr &amp;:= integerLiteral(integer.first + delta);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      statement.expr &amp;:= <span class="stri">")) {\n"</span>;
      statement.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">"} else {\n"</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"-="</span>;
      statement.expr &amp;:= integerLiteral(delta);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= <span class="stri">"}\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      process_expr(variable, statement);
      statement.expr &amp;:= <span class="stri">"-="</span>;
      statement.expr &amp;:= integerLiteral(delta);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_SBTR_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: delta_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: deltaRange <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_int_sbtr_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      deltaRange := getIntRange(params[3]);
      <span class="keywd">if</span> deltaRange.minValue = 0 <span class="op">and</span> deltaRange.maxValue = 0 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"/* ignore integer -:= 0; */\n"</span>;
      <span class="keywd">else</span>
        variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"variable_"</span>, params[1], statement);
        <span class="keywd">if</span> ccConf.BUILTIN_SUB_OVERFLOW &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
          statement.expr &amp;:= ccConf.BUILTIN_SUB_OVERFLOW;
          statement.expr &amp;:= <span class="stri">"("</span>;
          statement.expr &amp;:= variable_name;
          statement.expr &amp;:= <span class="stri">", "</span>;
          process_expr(params[3], statement);
          statement.expr &amp;:= <span class="stri">", &amp;("</span>;
          statement.expr &amp;:= variable_name;
          statement.expr &amp;:= <span class="stri">")))?"</span>;
          statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
          statement.expr &amp;:= <span class="stri">":0;\n"</span>;
        <span class="keywd">else</span>
          delta_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"delta_"</span>, params[3], statement);
          <span class="keywd">if</span> deltaRange.minValue &lt; 0 <span class="op">or</span> deltaRange.maxValue > 0 <span class="keywd">then</span>
            statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
            <span class="keywd">if</span> deltaRange.minValue &lt; 0 <span class="op">and</span> deltaRange.maxValue > 0 <span class="keywd">then</span>
              statement.expr &amp;:= delta_name;
              statement.expr &amp;:= <span class="stri">"&lt;0&amp;&amp;"</span>;
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">">"</span>;
              statement.expr &amp;:= integerLiteral(integer.last);
              statement.expr &amp;:= <span class="stri">"+"</span>;
              statement.expr &amp;:= delta_name;
              statement.expr &amp;:= <span class="stri">" || "</span>;
              statement.expr &amp;:= delta_name;
              <span class="comment"># The comparison >= 0 supports optimizations by the C compiler.</span>
              statement.expr &amp;:= <span class="stri">">=0&amp;&amp;"</span>;
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">"&lt;"</span>;
              statement.expr &amp;:= integerLiteral(integer.first);
              statement.expr &amp;:= <span class="stri">"+"</span>;
              statement.expr &amp;:= delta_name;
            <span class="keywd">elsif</span> deltaRange.minValue &lt; 0 <span class="keywd">then</span>
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">">"</span>;
              statement.expr &amp;:= integerLiteral(integer.last);
              statement.expr &amp;:= <span class="stri">"+"</span>;
              statement.expr &amp;:= delta_name;
            <span class="keywd">else</span> <span class="comment"># deltaRange.maxValue > 0</span>
              statement.expr &amp;:= variable_name;
              statement.expr &amp;:= <span class="stri">"&lt;"</span>;
              statement.expr &amp;:= integerLiteral(integer.first);
              statement.expr &amp;:= <span class="stri">"+"</span>;
              statement.expr &amp;:= delta_name;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            statement.expr &amp;:= <span class="stri">")?"</span>;
            statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
            statement.expr &amp;:= <span class="stri">":"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          statement.expr &amp;:= <span class="stri">"("</span>;
          statement.expr &amp;:= variable_name;
          statement.expr &amp;:= <span class="stri">"-="</span>;
          statement.expr &amp;:= delta_name;
          statement.expr &amp;:= <span class="stri">");\n"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        doLocalDeclsOfStatement(statement, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      process_expr(params[1], statement);
      statement.expr &amp;:= <span class="stri">"-="</span>;
      process_expr(params[3], statement);
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_SQRT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intSqrt("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_int_str(params[1], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_SUCC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> callOptimizeIntAdd <span class="keywd">then</span>
      optimize_int_add(params[1], 1, c_expr);
    <span class="keywd">elsif</span> getConstant(params[1], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      number := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> number = integer.last <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= integerLiteral(succ(number));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> check_int_arithmetic_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"number_"</span>, params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"=="</span>;
      c_expr.expr &amp;:= integerLiteral(integer.last);
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"+1)"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")+1"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (INT_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
