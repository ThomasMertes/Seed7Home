<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  typ_act.s7i   Generate code for actions of the type type.       *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_CMP        <span class="keywd">is</span> action <span class="stri">"TYP_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_CPY        <span class="keywd">is</span> action <span class="stri">"TYP_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_EQ         <span class="keywd">is</span> action <span class="stri">"TYP_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_FUNC       <span class="keywd">is</span> action <span class="stri">"TYP_FUNC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_HASHCODE   <span class="keywd">is</span> action <span class="stri">"TYP_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_INTERFACES <span class="keywd">is</span> action <span class="stri">"TYP_INTERFACES"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_ISDERIVED  <span class="keywd">is</span> action <span class="stri">"TYP_ISDERIVED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_ISFUNC     <span class="keywd">is</span> action <span class="stri">"TYP_ISFUNC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_ISVARFUNC  <span class="keywd">is</span> action <span class="stri">"TYP_ISVARFUNC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_MATCHOBJ   <span class="keywd">is</span> action <span class="stri">"TYP_MATCHOBJ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_META       <span class="keywd">is</span> action <span class="stri">"TYP_META"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_NE         <span class="keywd">is</span> action <span class="stri">"TYP_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_NUM        <span class="keywd">is</span> action <span class="stri">"TYP_NUM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_RESULT     <span class="keywd">is</span> action <span class="stri">"TYP_RESULT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_STR        <span class="keywd">is</span> action <span class="stri">"TYP_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_VALUE      <span class="keywd">is</span> action <span class="stri">"TYP_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_VARCONV    <span class="keywd">is</span> action <span class="stri">"TYP_VARCONV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: TYP_VARFUNC    <span class="keywd">is</span> action <span class="stri">"TYP_VARFUNC"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: typ_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"intType     typCmp (const const_typeType, const const_typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     typCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"typeType    typFunc (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"arrayType   typInterfaces (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    typIsDerived (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    typIsFunc (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    typIsVarfunc (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  typMatchobj (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"typeType    typMeta (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     typNum (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"typeType    typResult (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    typStr (typeType);"</span>);
    declareExtern(c_prog, <span class="stri">"typeType    typValue (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"typeType    typVarfunc (typeType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"typCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_FUNC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typFunc("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)(((memSizeType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")) >> 6)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_INTERFACES, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    prepare_typed_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"typInterfaces("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_ISDERIVED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typIsDerived("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_ISFUNC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typIsFunc("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_ISVARFUNC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typIsVarfunc("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_MATCHOBJ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typMatchobj("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_META, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typMeta("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_NUM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typNum("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_RESULT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typResult("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> category(params[1]) = TYPEOBJECT <span class="op">and</span> <span class="op">not</span> isVar(params[1]) <span class="keywd">then</span>
      incr(count.optimizations);
      c_expr.expr &amp;:= stringLiteral(str(getValue(params[1], type)));
    <span class="keywd">else</span>
      programUses.compDataLibrary := TRUE;
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"typStr("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_VARCONV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (TYP_VARFUNC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    programUses.compDataLibrary := TRUE;
    c_expr.expr &amp;:= <span class="stri">"typVarfunc("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
