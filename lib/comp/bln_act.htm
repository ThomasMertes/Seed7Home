<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bln_act.s7i   Generate code for actions of the type boolean.    *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2015  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_AND     <span class="keywd">is</span> action <span class="stri">"BLN_AND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_CPY     <span class="keywd">is</span> action <span class="stri">"BLN_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_EQ      <span class="keywd">is</span> action <span class="stri">"BLN_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_GE      <span class="keywd">is</span> action <span class="stri">"BLN_GE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_GT      <span class="keywd">is</span> action <span class="stri">"BLN_GT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_ICONV1  <span class="keywd">is</span> action <span class="stri">"BLN_ICONV1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_ICONV3  <span class="keywd">is</span> action <span class="stri">"BLN_ICONV3"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_LE      <span class="keywd">is</span> action <span class="stri">"BLN_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_LT      <span class="keywd">is</span> action <span class="stri">"BLN_LT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_NE      <span class="keywd">is</span> action <span class="stri">"BLN_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_NOT     <span class="keywd">is</span> action <span class="stri">"BLN_NOT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_OR      <span class="keywd">is</span> action <span class="stri">"BLN_OR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_ORD     <span class="keywd">is</span> action <span class="stri">"BLN_ORD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_PRED    <span class="keywd">is</span> action <span class="stri">"BLN_PRED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_SUCC    <span class="keywd">is</span> action <span class="stri">"BLN_SUCC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_TERNARY <span class="keywd">is</span> action <span class="stri">"BLN_TERNARY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BLN_VALUE   <span class="keywd">is</span> action <span class="stri">"BLN_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: bln_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        blnCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    blnValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_AND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> isActionExpression(params[1], <span class="stri">"BLN_AND"</span>) <span class="keywd">then</span>
      process_expr(params[1], c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">" &amp;&amp;\n"</span>;
    <span class="keywd">if</span> category(params[3]) = MATCHOBJECT <span class="keywd">then</span>
      c_expr.expr &amp;:= diagnosticLine(params[3]);
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_call_by_name_expr(params[3], c_expr);
    <span class="keywd">if</span> endsWith(c_expr.expr, <span class="stri">"\n"</span>) <span class="keywd">then</span>
      setDiagnosticLine(c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
    c_expr.temp_num := statement.temp_num;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_GE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") >= ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_GT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") > ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_bln_iconv (<span class="op">in</span> <span class="type">reference</span>: number, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    number_range := getIntRange(number);
    <span class="keywd">if</span> number_range.minValue > 1 <span class="op">and</span> number_range.maxValue > 1 <span class="op">or</span>
        number_range.minValue &lt; 0 <span class="op">and</span> number_range.maxValue &lt; 0 <span class="keywd">then</span>
      incr(count.optimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"(boolType)"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> config.conversion_range_check <span class="keywd">then</span>
      <span class="keywd">if</span> number_range.minValue >= 0 <span class="op">and</span> number_range.maxValue &lt;= 1 <span class="keywd">then</span>
        <span class="comment"># This conversion cannot trigger a range error.</span>
        countRangeOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_range_check_conversion*/(boolType)("</span>;
        process_expr(number, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        incr(count.rangeChecks);
        c_expr.expr &amp;:= <span class="stri">"(boolType)("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, number, c_expr);
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        <span class="keywd">if</span> number_range.maxValue &lt;= 1 <span class="keywd">then</span>
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
        <span class="keywd">else</span>
          <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;0||"</span>;
            c_expr.expr &amp;:= number_name;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">">=2"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(count.noRangeChecks);
      c_expr.expr &amp;:= <span class="stri">"(boolType)("</span>;
      process_expr(number, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_ICONV1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_bln_iconv(params[1], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_ICONV3, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_bln_iconv(params[3], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") &lt;= ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_LT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") &lt; ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_NOT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"!("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_OR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> isActionExpression(params[1], <span class="stri">"BLN_OR"</span>) <span class="keywd">then</span>
      process_expr(params[1], c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">" ||\n"</span>;
    <span class="keywd">if</span> category(params[3]) = MATCHOBJECT <span class="keywd">then</span>
      c_expr.expr &amp;:= diagnosticLine(params[3]);
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_call_by_name_expr(params[3], c_expr);
    <span class="keywd">if</span> endsWith(c_expr.expr, <span class="stri">"\n"</span>) <span class="keywd">then</span>
      setDiagnosticLine(c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_ORD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_PRED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(boolType)("</span>;
    <span class="keywd">if</span> getConstant(params[1], ENUMLITERALOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(count.optimizations);
      <span class="keywd">if</span> getValue(evaluatedParam, boolean) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"0"</span>;
      <span class="keywd">else</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> config.function_range_check <span class="keywd">then</span>
        incr(count.rangeChecks);
        c_expr.expr &amp;:= <span class="stri">"rngChk(!("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">"))?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":0"</span>;
      <span class="keywd">else</span>
        incr(count.noRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_SUCC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(boolType)("</span>;
    <span class="keywd">if</span> getConstant(params[1], ENUMLITERALOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(count.optimizations);
      <span class="keywd">if</span> getValue(evaluatedParam, boolean) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"1"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> config.function_range_check <span class="keywd">then</span>
        incr(count.rangeChecks);
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":1"</span>;
      <span class="keywd">else</span>
        incr(count.noRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">")+1"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_TERNARY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: thenParam <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: elseParam <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">type</span>: resultType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], ENUMLITERALOBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(count.optimizations);
      <span class="keywd">if</span> getValue(evaluatedParam, boolean) <span class="keywd">then</span>
        process_call_by_name_expr(params[3], c_expr);
      <span class="keywd">else</span>
        process_call_by_name_expr(params[5], c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      prepareCallByNameParamTemporarys(params[3], thenParam, c_expr);
      <span class="keywd">if</span> thenParam.expr = <span class="stri">""</span> <span class="keywd">then</span>
        c_expr.result_name := thenParam.result_name;
        c_expr.result_decl := thenParam.result_decl;
        c_expr.result_free := thenParam.result_free;
        c_expr.result_to_null := thenParam.result_to_null;
        c_expr.result_intro := thenParam.result_intro;
        c_expr.result_finish := thenParam.result_finish;
        c_expr.result_expr &amp;:= <span class="stri">"(("</span>;
        getStdParamToResultExpr(params[1], c_expr);
        c_expr.result_expr &amp;:= <span class="stri">")?("</span>;
        c_expr.result_expr &amp;:= thenParam.result_expr;
        c_expr.result_expr &amp;:= <span class="stri">"):("</span>;
        elseParam.demand := REQUIRE_RESULT;
        prepareCallByNameParamTemporarys(params[5], elseParam, c_expr);
        <span class="keywd">if</span> elseParam.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          c_expr.result_expr &amp;:= elseParam.result_expr;
        <span class="keywd">else</span>
          resultType := resultType(getType(function));
          process_create_declaration(resultType, global_c_expr);
          process_create_call(resultType, elseParam.expr, c_expr.result_expr);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">else</span>
        prepareCallByNameParamTemporarys(params[5], elseParam, c_expr);
        <span class="keywd">if</span> elseParam.expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"(("</span>;
          process_expr(params[1], c_expr);
          c_expr.expr &amp;:= <span class="stri">")?("</span>;
          c_expr.expr &amp;:= thenParam.expr;
          c_expr.expr &amp;:= <span class="stri">"):("</span>;
          c_expr.expr &amp;:= elseParam.expr;
          c_expr.expr &amp;:= <span class="stri">"))"</span>;
        <span class="keywd">else</span>
          c_expr.result_name := elseParam.result_name;
          c_expr.result_decl := elseParam.result_decl;
          c_expr.result_free := elseParam.result_free;
          c_expr.result_to_null := elseParam.result_to_null;
          c_expr.result_intro := elseParam.result_intro;
          c_expr.result_finish := elseParam.result_finish;
          c_expr.result_expr &amp;:= <span class="stri">"(("</span>;
          getStdParamToResultExpr(params[1], c_expr);
          c_expr.result_expr &amp;:= <span class="stri">")?("</span>;
          resultType := resultType(getType(function));
          process_create_declaration(resultType, global_c_expr);
          process_create_call(resultType, thenParam.expr, c_expr.result_expr);
          c_expr.result_expr &amp;:= <span class="stri">"):("</span>;
          c_expr.result_expr &amp;:= elseParam.result_expr;
          c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BLN_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"blnValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
