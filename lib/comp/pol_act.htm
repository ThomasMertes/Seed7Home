<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pol_act.s7i   Generate code for actions to support poll.        *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: POL_ADD_CHECK      <span class="keywd">is</span> action <span class="stri">"POL_ADD_CHECK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_CLEAR          <span class="keywd">is</span> action <span class="stri">"POL_CLEAR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_CPY            <span class="keywd">is</span> action <span class="stri">"POL_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_GET_CHECK      <span class="keywd">is</span> action <span class="stri">"POL_GET_CHECK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_GET_FINDING    <span class="keywd">is</span> action <span class="stri">"POL_GET_FINDING"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_HAS_NEXT       <span class="keywd">is</span> action <span class="stri">"POL_HAS_NEXT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_ITER_CHECKS    <span class="keywd">is</span> action <span class="stri">"POL_ITER_CHECKS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_ITER_FINDINGS  <span class="keywd">is</span> action <span class="stri">"POL_ITER_FINDINGS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_NEXT_FILE      <span class="keywd">is</span> action <span class="stri">"POL_NEXT_FILE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_POLL           <span class="keywd">is</span> action <span class="stri">"POL_POLL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_REMOVE_CHECK   <span class="keywd">is</span> action <span class="stri">"POL_REMOVE_CHECK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: POL_VALUE          <span class="keywd">is</span> action <span class="stri">"POL_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: pol_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        polAddCheck (const pollType, const socketType, intType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polClear (const pollType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polCpy (const pollType, const const_pollType);"</span>);
    declareExtern(c_prog, <span class="stri">"pollType    polCreate (const const_pollType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polDestr (const pollType);"</span>);
    declareExtern(c_prog, <span class="stri">"pollType    polEmpty (void);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     polGetCheck (const const_pollType, const socketType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     polGetFinding (const const_pollType, const socketType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    polHasNext (const pollType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polIterChecks (const pollType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polIterFindings (const pollType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType polNextFile (const pollType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polPoll (const pollType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        polRemoveCheck (const pollType, const socketType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"pollType    polValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_ADD_CHECK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"polAddCheck("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">", (genericType)("</span>;
    process_expr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_CLEAR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"polClear("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], c_param1);
    c_param3.temp_num := c_param1.temp_num;
    process_expr(params[3], c_param3);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      setDiagnosticLine(c_expr);
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"pollType old_poll="</span>;
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">";\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"pollType *poll_ptr=&amp;("</span>;
        c_expr.expr &amp;:= c_param1.expr;
        c_expr.expr &amp;:= <span class="stri">");\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"pollType old_poll=*poll_ptr;\n"</span>;
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= <span class="stri">"*poll_ptr="</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= c_param3.result_expr;
      c_expr.expr &amp;:= <span class="stri">";\n"</span>;
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"polDestr(old_poll);\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">else</span>
      setDiagnosticLine(c_expr);
      c_expr.expr &amp;:= <span class="stri">"polCpy("</span>;
      c_expr.expr &amp;:= c_param1.expr;
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= c_param3.expr;
      c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_GET_CHECK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"polGetCheck("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_GET_FINDING, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"polGetFinding("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_HAS_NEXT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"polHasNext("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_ITER_CHECKS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"polIterChecks("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_ITER_FINDINGS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"polIterFindings("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_NEXT_FILE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"polNextFile("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", (genericType)("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_POLL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"polPoll("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_REMOVE_CHECK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"polRemoveCheck("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (POL_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"polValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
