<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  fil_act.s7i   Generate code for actions of primitive files.     *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2016  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_BIG_LNG          <span class="keywd">is</span> action <span class="stri">"FIL_BIG_LNG"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_BIG_SEEK         <span class="keywd">is</span> action <span class="stri">"FIL_BIG_SEEK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_BIG_TELL         <span class="keywd">is</span> action <span class="stri">"FIL_BIG_TELL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_CLOSE            <span class="keywd">is</span> action <span class="stri">"FIL_CLOSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_CPY              <span class="keywd">is</span> action <span class="stri">"FIL_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_EMPTY            <span class="keywd">is</span> action <span class="stri">"FIL_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_EOF              <span class="keywd">is</span> action <span class="stri">"FIL_EOF"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_EQ               <span class="keywd">is</span> action <span class="stri">"FIL_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_ERR              <span class="keywd">is</span> action <span class="stri">"FIL_ERR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_FLUSH            <span class="keywd">is</span> action <span class="stri">"FIL_FLUSH"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_GETC             <span class="keywd">is</span> action <span class="stri">"FIL_GETC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_GETS             <span class="keywd">is</span> action <span class="stri">"FIL_GETS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_HAS_NEXT         <span class="keywd">is</span> action <span class="stri">"FIL_HAS_NEXT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_IN               <span class="keywd">is</span> action <span class="stri">"FIL_IN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_INPUT_READY      <span class="keywd">is</span> action <span class="stri">"FIL_INPUT_READY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_LINE_READ        <span class="keywd">is</span> action <span class="stri">"FIL_LINE_READ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_LIT              <span class="keywd">is</span> action <span class="stri">"FIL_LIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_LNG              <span class="keywd">is</span> action <span class="stri">"FIL_LNG"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_NE               <span class="keywd">is</span> action <span class="stri">"FIL_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_OPEN             <span class="keywd">is</span> action <span class="stri">"FIL_OPEN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_OPEN_NULL_DEVICE <span class="keywd">is</span> action <span class="stri">"FIL_OPEN_NULL_DEVICE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_OUT              <span class="keywd">is</span> action <span class="stri">"FIL_OUT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_PCLOSE           <span class="keywd">is</span> action <span class="stri">"FIL_PCLOSE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_PIPE             <span class="keywd">is</span> action <span class="stri">"FIL_PIPE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_POPEN            <span class="keywd">is</span> action <span class="stri">"FIL_POPEN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_PRINT            <span class="keywd">is</span> action <span class="stri">"FIL_PRINT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_SEEK             <span class="keywd">is</span> action <span class="stri">"FIL_SEEK"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_SEEKABLE         <span class="keywd">is</span> action <span class="stri">"FIL_SEEKABLE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_SETBUF           <span class="keywd">is</span> action <span class="stri">"FIL_SETBUF"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_TELL             <span class="keywd">is</span> action <span class="stri">"FIL_TELL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_VALUE            <span class="keywd">is</span> action <span class="stri">"FIL_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_WRITE            <span class="keywd">is</span> action <span class="stri">"FIL_WRITE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: FIL_WORD_READ        <span class="keywd">is</span> action <span class="stri">"FIL_WORD_READ"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: fil_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"bigIntType  filBigLng (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filBigSeek (fileType, const const_bigIntType);"</span>);
    declareExtern(c_prog, <span class="stri">"bigIntType  filBigTell (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filClose (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filCpy (fileType *const, const fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    filCreate (const fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType filCreateGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filDestr (const fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filDestrGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    filEof (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filFlush (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"charType    filGetcChkCtrlC (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filGets (fileType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filGetsChkCtrlC (fileType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    filHasNext (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    filHasNextChkCtrlC (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    filInputReady (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filLineRead (fileType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filLineReadChkCtrlC (fileType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filLit (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     filLng (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    filOpen (const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    filOpenNullDevice (void);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filPclose (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filPipe (fileType *, fileType *);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    filPopen (const const_striType, const const_striType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filPrint (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filSeek (fileType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    filSeekable (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filSetbuf (fileType, intType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     filTell (fileType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filTruncate (fileType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filWordRead (fileType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    filWordReadChkCtrlC (fileType, charType *);"</span>);
    declareExtern(c_prog, <span class="stri">"void        filWrite (fileType, const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"fileType    filValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_BIG_LNG, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"filBigLng("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_BIG_SEEK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filBigSeek("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_BIG_TELL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"filBigTell("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_CLOSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filClose("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.temp_decls &amp;:= <span class="stri">"fileType old_file="</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">";\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"="</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"fileType old_file;\n"</span>;
        statement.temp_decls &amp;:= <span class="stri">"fileType *file_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"old_file=*file_ptr;\n"</span>;
        statement.expr &amp;:= <span class="stri">"*file_ptr="</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      statement.expr &amp;:= <span class="stri">"filDestr(old_file);\n"</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"filCpy(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_EMPTY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"&amp;nullFileRecord"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_EOF, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filEof("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_ERR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"&amp;stderrFileRecord"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_FLUSH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filFlush("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_GETC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filGetc("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_GETS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"filGets("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_HAS_NEXT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filHasNext("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_IN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"&amp;stdinFileRecord"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_INPUT_READY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filInputReady("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_LINE_READ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"filLineRead("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", &amp;("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_LIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"filLit("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_LNG, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filLng("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_OPEN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_file_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"filOpen("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_OPEN_NULL_DEVICE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_file_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"filOpenNullDevice()"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_OUT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"&amp;stdoutFileRecord"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_PCLOSE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filPclose("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_PIPE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filPipe(&amp;("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"), &amp;("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">"));\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_POPEN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_file_result(c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"filPopen("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_PRINT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filPrint("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_SEEK, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filSeek("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_SEEKABLE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filSeekable("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_SETBUF, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filSetbuf("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_TELL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filTell("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_TRUNCATE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filTruncate("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"filValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_WORD_READ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"filWordRead("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", &amp;("</span>;
    getStdParamToResultExpr(params[2], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (FIL_WRITE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"filWrite("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
