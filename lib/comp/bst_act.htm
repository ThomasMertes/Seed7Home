<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bst_act.s7i   Generate code for actions of the type bstring.    *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014, 2020  Thomas Mertes     *)</span>
<span class="comment">(*                2022  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: BST_APPEND    <span class="keywd">is</span> action <span class="stri">"BST_APPEND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_CMP       <span class="keywd">is</span> action <span class="stri">"BST_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_CPY       <span class="keywd">is</span> action <span class="stri">"BST_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_EQ        <span class="keywd">is</span> action <span class="stri">"BST_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_HASHCODE  <span class="keywd">is</span> action <span class="stri">"BST_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_IDX       <span class="keywd">is</span> action <span class="stri">"BST_IDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_LNG       <span class="keywd">is</span> action <span class="stri">"BST_LNG"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_NE        <span class="keywd">is</span> action <span class="stri">"BST_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_PARSE1    <span class="keywd">is</span> action <span class="stri">"BST_PARSE1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_STR       <span class="keywd">is</span> action <span class="stri">"BST_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BST_VALUE     <span class="keywd">is</span> action <span class="stri">"BST_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: bst_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        bstAppend (bstriType *const, const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   bstCat (const_bstriType, const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bstCmp (const const_bstriType, const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bstCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bstCpy (bstriType *const, const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bstCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   bstCreate (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType bstCreateGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bstDestr (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        bstDestrGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bstHashCode (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     bstHashCodeGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   bstParse (const const_striType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    bstStr (const const_bstriType);"</span>);
    declareExtern(c_prog, <span class="stri">"bstriType   bstValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_APPEND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], c_param1);
    c_param3.temp_num := c_param1.temp_num;
    getAnyParamToExpr(params[3], c_param3);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"bstAppend(&amp;("</span>;
    c_expr.expr &amp;:= c_param1.expr;
    c_expr.expr &amp;:= <span class="stri">"), "</span>;
    c_expr.expr &amp;:= c_param3.expr;
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bstCmp("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"bstriType new_bstri;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_bstri="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"bstDestr("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_bstri;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"bstriType *bstri_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"bstDestr(*bstri_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*bstri_ptr=new_bstri;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"bstCpy(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bstri_a_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: bstri_b_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    bstri_a_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_a_"</span>, params[1], c_expr);
    bstri_b_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_b_"</span>, params[3], c_expr);
    <span class="comment">(* Formula used: (a->size==b->size&amp;&amp;memcmp(a->mem,b->mem,
                     a->size*sizeof(unsigned char))==0) *)</span>
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size=="</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->size&amp;&amp;memcmp("</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size*sizeof(unsigned char))==0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"bstHashCode("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bst_idx (<span class="op">in</span> <span class="type">bstring</span>: bstri,
    <span class="op">in</span> <span class="type">reference</span>: index, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: index_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: index_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> getConstant(index, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      index_value := getValue(evaluatedParam, integer);
      <span class="keywd">if</span> index_value &lt; 1 <span class="op">or</span> index_value > length(bstri) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= charLiteral(bstri[index_value]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      c_expr.expr &amp;:= bstriLiteral(bstri);
      c_expr.expr &amp;:= <span class="stri">")->mem["</span>;
      <span class="keywd">if</span> bstring_index_check <span class="keywd">then</span>
        incr(countIndexChecks);
        incr(c_expr.temp_num);
        index_name := <span class="stri">"idx_"</span> &amp; str(c_expr.temp_num);
        <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
          c_expr.temp_decls &amp;:= <span class="stri">"uintType "</span>;
        <span class="keywd">else</span>
          c_expr.temp_decls &amp;:= <span class="stri">"intType "</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.temp_decls &amp;:= index_name;
        c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
        <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
          process_expr(index, c_expr);
          c_expr.expr &amp;:= <span class="stri">")-1, idxChk("</span>;
          c_expr.expr &amp;:= index_name;
          c_expr.expr &amp;:= <span class="stri">">="</span>;
        <span class="keywd">else</span>
          process_expr(index, c_expr);
          c_expr.expr &amp;:= <span class="stri">", idxChk("</span>;
          c_expr.expr &amp;:= index_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;=0 || "</span>;
          c_expr.expr &amp;:= index_name;
          c_expr.expr &amp;:= <span class="stri">">"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= integerLiteral(length(bstri));
        c_expr.expr &amp;:= <span class="stri">") ? "</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">" : "</span>;
        c_expr.expr &amp;:= index_name;
        <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"-1)"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        incr(countSuppressedIndexChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        process_expr(index, c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"]"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bst_idx (<span class="op">in</span> <span class="type">reference</span>: param1,
    <span class="op">in</span> <span class="type">integer</span>: index, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bstri_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> index &lt; 1 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
    <span class="keywd">elsif</span> bstring_index_check <span class="keywd">then</span>
      incr(countIndexChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      bstri_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_"</span>, param1, c_expr);
      c_expr.expr &amp;:= bstri_name;
      c_expr.expr &amp;:= <span class="stri">"->mem[(idxChk("</span>;
      c_expr.expr &amp;:= bstri_name;
      c_expr.expr &amp;:= <span class="stri">"->size&lt;"</span>;
      c_expr.expr &amp;:= integerLiteral(index);
      c_expr.expr &amp;:= <span class="stri">") ? "</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">" : "</span>;
      c_expr.expr &amp;:= integerLiteral(pred(index));
      c_expr.expr &amp;:= <span class="stri">")])"</span>;
    <span class="keywd">else</span>
      incr(countSuppressedIndexChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">")->mem["</span>;
      c_expr.expr &amp;:= integerLiteral(pred(index));
      c_expr.expr &amp;:= <span class="stri">"]"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_IDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: bstri_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: index_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], BSTRIOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bst_idx(getValue(evaluatedParam, bstring), params[3], c_expr);
    <span class="keywd">elsif</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bst_idx(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> bstring_index_check <span class="keywd">then</span>
      incr(countIndexChecks);
      incr(c_expr.temp_num);
      index_name := <span class="stri">"idx_"</span> &amp; str(c_expr.temp_num);
      <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        c_expr.temp_decls &amp;:= <span class="stri">"uintType "</span>;
      <span class="keywd">else</span>
        c_expr.temp_decls &amp;:= <span class="stri">"intType "</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.temp_decls &amp;:= index_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      bstri_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_"</span>, params[1], c_expr);
      c_expr.expr &amp;:= bstri_name;
      c_expr.expr &amp;:= <span class="stri">"->mem[("</span>;
      c_expr.expr &amp;:= index_name;
      c_expr.expr &amp;:= <span class="stri">"="</span>;
      <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">")-1, idxChk("</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">">="</span>;
      <span class="keywd">else</span>
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">", idxChk("</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">"&lt;=0 || "</span>;
        c_expr.expr &amp;:= index_name;
        c_expr.expr &amp;:= <span class="stri">">"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= bstri_name;
      c_expr.expr &amp;:= <span class="stri">"->size) ? "</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">" : "</span>;
      c_expr.expr &amp;:= index_name;
      <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">")])"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"-1)])"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(countSuppressedIndexChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")->mem[("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")-1]"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_LNG, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)(("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")->size)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: bstri_a_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: bstri_b_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    bstri_a_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_a_"</span>, params[1], c_expr);
    bstri_b_name := getParameterAsVariable(<span class="stri">"const_bstriType"</span>, <span class="stri">"tmp_b_"</span>, params[3], c_expr);
    <span class="comment">(* Formula used: (a->size!=b->size||memcmp(a->mem,b->mem,
                     a->size*sizeof(unsigned char))!=0) *)</span>
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size!="</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->size||memcmp("</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_b_name;
    c_expr.expr &amp;:= <span class="stri">"->mem,"</span>;
    c_expr.expr &amp;:= bstri_a_name;
    c_expr.expr &amp;:= <span class="stri">"->size*sizeof(unsigned char))!=0)"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_PARSE1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bstParse("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bstStr("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BST_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bstri_result(c_expr);
    c_expr.result_expr := <span class="stri">"bstValue("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
