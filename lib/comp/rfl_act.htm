<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  rfl_act.s7i   Generate code for actions of the type ref_list.   *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014, 2022  Thomas Mertes     *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_APPEND     <span class="keywd">is</span> action <span class="stri">"RFL_APPEND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_CAT        <span class="keywd">is</span> action <span class="stri">"RFL_CAT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_CPY        <span class="keywd">is</span> action <span class="stri">"RFL_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_ELEM       <span class="keywd">is</span> action <span class="stri">"RFL_ELEM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_ELEMCPY    <span class="keywd">is</span> action <span class="stri">"RFL_ELEMCPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_EQ         <span class="keywd">is</span> action <span class="stri">"RFL_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_FOR        <span class="keywd">is</span> action <span class="stri">"RFL_FOR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_FOR_UNTIL  <span class="keywd">is</span> action <span class="stri">"RFL_FOR_UNTIL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_HEAD       <span class="keywd">is</span> action <span class="stri">"RFL_HEAD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_IDX        <span class="keywd">is</span> action <span class="stri">"RFL_IDX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_INCL       <span class="keywd">is</span> action <span class="stri">"RFL_INCL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_IPOS       <span class="keywd">is</span> action <span class="stri">"RFL_IPOS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_LNG        <span class="keywd">is</span> action <span class="stri">"RFL_LNG"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_MKLIST     <span class="keywd">is</span> action <span class="stri">"RFL_MKLIST"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_NE         <span class="keywd">is</span> action <span class="stri">"RFL_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_NOT_ELEM   <span class="keywd">is</span> action <span class="stri">"RFL_NOT_ELEM"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_POS        <span class="keywd">is</span> action <span class="stri">"RFL_POS"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_SET_VALUE  <span class="keywd">is</span> action <span class="stri">"RFL_SET_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_TAIL       <span class="keywd">is</span> action <span class="stri">"RFL_TAIL"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: RFL_VALUE      <span class="keywd">is</span> action <span class="stri">"RFL_VALUE"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: rfl_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"void        rflAppend (listType *const, const listType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    rflCat (listType, const listType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     rflCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflCpy (listType *const, const const_listType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    rflCreate (const const_listType);"</span>);
    declareExtern(c_prog, <span class="stri">"genericType rflCreateGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflDestr (const listType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflDestrGeneric (const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    rflElem (const const_objRefType, const_listType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflElemcpy (listType, intType, objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    rflEq (const_listType, const_listType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    rflHead (const listType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"objRefType  rflIdx (const_listType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflIncl (listType *, objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     rflIpos (listType, objRefType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     rflLng (const_listType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    rflMklist (objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     rflPos (const_listType, const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        rflSetValue (objRefType, listType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    rflTail (const_listType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"listType    rflValue (const const_objRefType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_APPEND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    process_expr(params[1], c_param1);
    c_param3.temp_num := c_param1.temp_num;
    getTemporaryToResultExpr(params[3], c_param3);
    incr(c_param3.temp_num);
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param3.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param3.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"rflAppend(&amp;("</span>;
    c_expr.expr &amp;:= c_param1.expr;
    c_expr.expr &amp;:= <span class="stri">"), "</span>;
    c_expr.expr &amp;:= c_param3.result_expr;
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> has_temp_values(c_param3) <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param3.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_CAT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    prepare_list_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"rflCat("</span>;
    getTemporaryToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getTemporaryToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param3 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    statement.temp_num := c_expr.temp_num;
    prepareAnyParamTemporarys(params[1], c_param1, statement);
    c_param3.demand := ASSIGN_RESULT;
    prepareAnyParamTemporarys(params[3], c_param3, statement);
    <span class="keywd">if</span> c_param3.result_expr &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      statement.temp_decls &amp;:= <span class="stri">"listType new_rfl;\n"</span>;
      statement.expr &amp;:= <span class="stri">"new_rfl="</span>;
      statement.expr &amp;:= c_param3.result_expr;
      statement.expr &amp;:= <span class="stri">";\n"</span>;
      <span class="keywd">if</span> isNormalVariable(params[1]) <span class="keywd">then</span>
        statement.expr &amp;:= <span class="stri">"rflDestr("</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= c_param1.expr;
        statement.expr &amp;:= <span class="stri">"=new_rfl;\n"</span>;
      <span class="keywd">else</span>
        statement.temp_decls &amp;:= <span class="stri">"listType *rfl_ptr=&amp;("</span>;
        statement.temp_decls &amp;:= c_param1.expr;
        statement.temp_decls &amp;:= <span class="stri">");\n"</span>;
        statement.expr &amp;:= <span class="stri">"rflDestr(*rfl_ptr);\n"</span>;
        statement.expr &amp;:= <span class="stri">"*rfl_ptr=new_rfl;\n"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      statement.expr &amp;:= <span class="stri">"rflCpy(&amp;("</span>;
      statement.expr &amp;:= c_param1.expr;
      statement.expr &amp;:= <span class="stri">"), "</span>;
      statement.expr &amp;:= c_param3.expr;
      statement.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_ELEM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"rflElem("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_ELEMCPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param1 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param4 <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">expr_type</span>: c_param6 <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    process_expr(params[1], c_param1);
    c_param4.temp_num := c_param1.temp_num;
    process_expr(params[4], c_param4);
    c_param6.temp_num := c_param4.temp_num;
    process_expr(params[6], c_param6);
    <span class="keywd">if</span> c_param6.temp_num &lt;> 0 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
      appendWithDiagnostic(c_param1.temp_decls, c_expr);
      appendWithDiagnostic(c_param4.temp_decls, c_expr);
      appendWithDiagnostic(c_param6.temp_decls, c_expr);
      appendWithDiagnostic(c_param1.temp_assigns, c_expr);
      appendWithDiagnostic(c_param4.temp_assigns, c_expr);
      appendWithDiagnostic(c_param6.temp_assigns, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"rflElemcpy("</span>;
    c_expr.expr &amp;:= c_param1.expr;
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    c_expr.expr &amp;:= c_param4.expr;
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    c_expr.expr &amp;:= c_param6.expr;
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    <span class="keywd">if</span> c_param6.temp_num &lt;> 0 <span class="keywd">then</span>
      appendWithDiagnostic(c_param1.temp_frees, c_expr);
      appendWithDiagnostic(c_param4.temp_frees, c_expr);
      appendWithDiagnostic(c_param6.temp_frees, c_expr);
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"rflEq("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_FOR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: elem_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(c_expr.temp_num);
    elem_name := <span class="stri">"tmp_elem_"</span> &amp; str(c_expr.temp_num);
    c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"listType "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">";\n"</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"for ("</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">" = "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"; "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">" != NULL; "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">" = "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">"->next) {\n"</span>;
    setDiagnosticLine(c_expr);
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">" = "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">"->obj;\n"</span>;
    process_call_by_name_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">"}\n}\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_FOR_UNTIL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: elem_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    incr(c_expr.temp_num);
    elem_name := <span class="stri">"tmp_elem_"</span> &amp; str(c_expr.temp_num);
    c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"listType "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">";\n"</span>;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"for ("</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">" = "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">"; "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">" != NULL &amp;&amp; ("</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">" = "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">"->obj, !("</span>;
    process_call_by_name_expr(params[6], c_expr);
    c_expr.expr &amp;:= <span class="stri">")); "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">" = "</span>;
    c_expr.expr &amp;:= elem_name;
    c_expr.expr &amp;:= <span class="stri">"->next) {\n"</span>;
    process_call_by_name_expr(params[8], c_expr);
    c_expr.expr &amp;:= <span class="stri">"}\n}\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_HEAD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    prepare_list_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"rflHead("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[4], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_rfl_idx (<span class="op">in</span> <span class="type">reference</span>: param1,
    <span class="op">in</span> <span class="type">integer</span>: index, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: listName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> index &lt; 1 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"INDEX_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"INDEX_ERROR"</span>);
    <span class="keywd">elsif</span> index &lt;= 3 <span class="op">and</span> isNormalVariable(param1) <span class="op">and</span> ref_list_index_check <span class="keywd">then</span>
      incr(countIndexChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      listName := normalVariable(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">"idxChk("</span>;
      c_expr.expr &amp;:= listName;
      c_expr.expr &amp;:= <span class="stri">"==NULL"</span>;
      <span class="keywd">for</span> number <span class="keywd">range</span> 2 <span class="keywd">to</span> index <span class="keywd">do</span>
        c_expr.expr &amp;:= <span class="stri">"||"</span>;
        c_expr.expr &amp;:= listName;
        c_expr.expr &amp;:= <span class="stri">"->next"</span> <span class="op">mult</span> pred(number);
        c_expr.expr &amp;:= <span class="stri">"==NULL"</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= refRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= listName;
      c_expr.expr &amp;:= <span class="stri">"->next"</span> <span class="op">mult</span> pred(index);
      c_expr.expr &amp;:= <span class="stri">"->obj)"</span>;
    <span class="keywd">elsif</span> index &lt;= 7 <span class="op">and</span> ref_list_index_check <span class="keywd">then</span>
      incr(countIndexChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      listName := getTempVariable(<span class="stri">"const_listType"</span>, <span class="stri">"list_"</span>, param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">"idxChk("</span>;
      c_expr.expr &amp;:= listName;
      c_expr.expr &amp;:= <span class="stri">"==NULL"</span>;
      <span class="keywd">for</span> number <span class="keywd">range</span> 2 <span class="keywd">to</span> index <span class="keywd">do</span>
        c_expr.expr &amp;:= <span class="stri">"||("</span>;
        c_expr.expr &amp;:= listName;
        c_expr.expr &amp;:= <span class="stri">"="</span>;
        c_expr.expr &amp;:= listName;
        c_expr.expr &amp;:= <span class="stri">"->next)==NULL"</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= <span class="stri">")?"</span>;
      c_expr.expr &amp;:= refRaiseError(<span class="stri">"INDEX_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">":"</span>;
      c_expr.expr &amp;:= listName;
      c_expr.expr &amp;:= <span class="stri">"->obj)"</span>;
    <span class="keywd">elsif</span> index &lt;= 12 <span class="op">and</span> <span class="op">not</span> ref_list_index_check <span class="keywd">then</span>
      incr(countSuppressedIndexChecks);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
      c_expr.expr &amp;:= <span class="stri">"->next"</span> <span class="op">mult</span> pred(index);
      c_expr.expr &amp;:= <span class="stri">"->obj"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"rflIdx("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      c_expr.expr &amp;:= integerLiteral(index);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_IDX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_rfl_idx(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"rflIdx("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_INCL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    statement.expr := <span class="stri">"rflIncl(&amp;("</span>;
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"), "</span>;
    process_expr(params[2], statement);
    statement.expr &amp;:= <span class="stri">");\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_IPOS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"rflIpos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_LNG, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"rflLng("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_MKLIST, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"rflMklist("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"!rflEq("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_NOT_ELEM, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"!rflElem("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[4], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_POS, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    c_expr.expr &amp;:= <span class="stri">"rflPos("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_SET_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"rflSetValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    getAnyParamToExpr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_TAIL, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    prepare_list_result(getExprResultType(params[1]), c_expr);
    c_expr.result_expr := <span class="stri">"rflTail("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">", "</span>;
    getStdParamToResultExpr(params[3], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (RFL_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    compDataLibraryUsed := TRUE;
    prepare_list_result(resultType(getType(function)), c_expr);
    c_expr.result_expr := <span class="stri">"rflValue("</span>;
    getStdParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
