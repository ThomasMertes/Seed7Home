<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  chr_act.s7i   Generate code for actions of the type char.       *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2015  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_CLIT      <span class="keywd">is</span> action <span class="stri">"CHR_CLIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_CMP       <span class="keywd">is</span> action <span class="stri">"CHR_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_CPY       <span class="keywd">is</span> action <span class="stri">"CHR_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_EQ        <span class="keywd">is</span> action <span class="stri">"CHR_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_DECR      <span class="keywd">is</span> action <span class="stri">"CHR_DECR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_GE        <span class="keywd">is</span> action <span class="stri">"CHR_GE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_GT        <span class="keywd">is</span> action <span class="stri">"CHR_GT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_HASHCODE  <span class="keywd">is</span> action <span class="stri">"CHR_HASHCODE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_ICONV1    <span class="keywd">is</span> action <span class="stri">"CHR_ICONV1"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_ICONV3    <span class="keywd">is</span> action <span class="stri">"CHR_ICONV3"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_INCR      <span class="keywd">is</span> action <span class="stri">"CHR_INCR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_IS_LETTER <span class="keywd">is</span> action <span class="stri">"CHR_IS_LETTER"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_LE        <span class="keywd">is</span> action <span class="stri">"CHR_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_LOW       <span class="keywd">is</span> action <span class="stri">"CHR_LOW"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_LT        <span class="keywd">is</span> action <span class="stri">"CHR_LT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_NE        <span class="keywd">is</span> action <span class="stri">"CHR_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_ORD       <span class="keywd">is</span> action <span class="stri">"CHR_ORD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_PRED      <span class="keywd">is</span> action <span class="stri">"CHR_PRED"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_STR       <span class="keywd">is</span> action <span class="stri">"CHR_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_SUCC      <span class="keywd">is</span> action <span class="stri">"CHR_SUCC"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_UP        <span class="keywd">is</span> action <span class="stri">"CHR_UP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_VALUE     <span class="keywd">is</span> action <span class="stri">"CHR_VALUE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: CHR_WIDTH     <span class="keywd">is</span> action <span class="stri">"CHR_WIDTH"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: chr_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"striType    chrCLit (charType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    chrCLitToBuffer (charType, striType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     chrCmp (charType, charType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     chrCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"void        chrCpyGeneric (genericType *const, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"boolType    chrIsLetter (charType);"</span>);
    declareExtern(c_prog, <span class="stri">"charType    chrLow (charType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    chrStr (charType);"</span>);
    <span class="keywd">if</span> ccConf.ALLOW_STRITYPE_SLICES <span class="keywd">then</span>
      writeln(c_prog, <span class="stri">"#define     chrStrMacro(ch,str) (str.size=1,str.mem=str.mem1,str.mem1[0]=(strElemType)(ch),&amp;str)"</span>);
    <span class="keywd">else</span>
      writeln(c_prog, <span class="stri">"#define     chrStrMacro(ch,str) (str.size=1,str.mem[0]=(strElemType)(ch),&amp;str)"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    declareExtern(c_prog, <span class="stri">"charType    chrUp (charType);"</span>);
    declareExtern(c_prog, <span class="stri">"charType    chrValue (const const_objRefType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     chrWidth (charType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_CLIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.ALLOW_STRITYPE_SLICES <span class="op">and</span> c_expr.demand &lt; ASSIGN_RESULT <span class="keywd">then</span>
      incr(c_expr.temp_num);
      buffer_name := <span class="stri">"buffer_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"union {\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  struct striStruct striBuf;\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  char charBuf[SIZ_STRI(INTTYPE_DECIMAL_SIZE)];\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"} "</span>;
      c_expr.temp_decls &amp;:= buffer_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"chrCLitToBuffer("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", &amp;"</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf)"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"chrCLit("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"chrCmp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_DECR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"--("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_GE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") >= ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_GT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") > ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_HASHCODE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)((scharType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_chr_iconv (<span class="op">in</span> <span class="type">integer</span>: number, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    incr(countOptimizations);
    <span class="keywd">if</span> number &lt; pred(-2147483647) <span class="op">or</span> number > 2147483647 <span class="keywd">then</span>
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(charType) "</span>;
      c_expr.expr &amp;:= str(number);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_chr_iconv (<span class="op">in</span> <span class="type">reference</span>: number, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(number, INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_chr_iconv(getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> conversion_range_check <span class="op">and</span> ccConf.INTTYPE_SIZE > 32 <span class="keywd">then</span>
      number_range := getIntRange(number);
      <span class="keywd">if</span> number_range.minValue >= -2147483648 <span class="op">and</span>
          number_range.maxValue &lt;= 2147483647 <span class="keywd">then</span>
        <span class="comment"># This conversion cannot trigger a range error.</span>
        countRangeOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_range_check_conversion*/(charType)("</span>;
        process_expr(number, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        incr(countRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, number, c_expr);
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        <span class="keywd">if</span> number_range.minValue &lt; -2147483648 <span class="keywd">then</span>
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;INT32TYPE_MIN"</span>;
          <span class="keywd">if</span> number_range.maxValue > 2147483647 <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"||"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number_range.maxValue > 2147483647 <span class="keywd">then</span>
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">">INT32TYPE_MAX"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":(charType)"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> ccConf.INTTYPE_SIZE > 32 <span class="keywd">then</span>
        incr(countNoRangeChecks);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">"(charType)("</span>;
      process_expr(number, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_ICONV1, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_chr_iconv(params[1], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_ICONV3, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_chr_iconv(params[3], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_INCR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    setDiagnosticLine(c_expr);
    c_expr.expr &amp;:= <span class="stri">"++("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_IS_LETTER, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"chrIsLetter("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") &lt;= ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_LOW, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"chrLow("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_LT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") &lt; ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_ORD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"(intType)((scharType)("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">"))"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_PRED, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")-1"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: char_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: striStruct_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[1], CHAROBJECT, evaluatedParam) <span class="keywd">then</span>
      incr(countOptimizations);
      c_expr.expr &amp;:= <span class="stri">"/*chrStr*/"</span>;
      c_expr.expr &amp;:= stringLiteral(str(getValue(evaluatedParam, char)));
    <span class="keywd">elsif</span> c_expr.demand &lt; REQUIRE_RESULT <span class="keywd">then</span>
      incr(c_expr.temp_num);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      char_name := getParameterAsVariable(<span class="stri">"charType"</span>, <span class="stri">"char_"</span>, params[1], c_expr);
      striStruct_name := <span class="stri">"stri_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"struct striStruct "</span>;
      c_expr.temp_decls &amp;:= striStruct_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"chrStrMacro("</span>;
      c_expr.expr &amp;:= char_name;
      c_expr.expr &amp;:= <span class="stri">","</span>;
      c_expr.expr &amp;:= striStruct_name;
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr &amp;:= <span class="stri">"chrStr("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_SUCC, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")+1"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_UP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"chrUp("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"chrValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (CHR_WIDTH, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"chrWidth("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
