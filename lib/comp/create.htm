<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  create.s7i    Generate code for the create functions.           *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">var</span> <span class="type">typeReferenceHash</span>: createFunction <span class="keywd">is</span> typeReferenceHash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">boolean_type_hash</span>: create_declared <span class="keywd">is</span> boolean_type_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">boolean_type_hash</span>: create_prototype_declared <span class="keywd">is</span> boolean_type_hash.EMPTY_HASH;
<span class="keywd">var</span> <span class="type">string_type_hash</span>: parametersOfHshCreate <span class="keywd">is</span> string_type_hash.EMPTY_HASH;


<span class="keywd">const</span> <span class="type">proc</span>: process_create_declaration (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_create_call (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="op">in</span> <span class="type">string</span>: param_b, <span class="keywd">inout</span> <span class="type">string</span>: expr) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: process_arr_alloc (<span class="op">in</span> <span class="type">type</span>: object_type, <span class="op">in</span> <span class="type">string</span>: variableName,
    <span class="op">in</span> <span class="type">boolean</span>: useFreelist, <span class="op">in</span> <span class="type">string</span>: diagnosticLine) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: allocExpr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: maxFlistLen <span class="keywd">is</span> 1 &lt;&lt; 16;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> useFreelist <span class="keywd">then</span>
      allocExpr := diagnosticLine;
      allocExpr &amp;:= <span class="stri">"flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">" != NULL ? ("</span>;
      allocExpr &amp;:= variableName;
      allocExpr &amp;:= <span class="stri">"=("</span>;
      allocExpr &amp;:= type_name(object_type);
      allocExpr &amp;:= <span class="stri">")(flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"), "</span>;
      allocExpr &amp;:= <span class="stri">"flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"=flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"->next, "</span>;
      allocExpr &amp;:= <span class="stri">"flist_allowed_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"++, "</span>;
      allocExpr &amp;:= variableName;
      allocExpr &amp;:= <span class="stri">"->min_position="</span>;
      allocExpr &amp;:= integerLiteral(array_minIdx[object_type]);
      allocExpr &amp;:= <span class="stri">", "</span>;
      allocExpr &amp;:= variableName;
      allocExpr &amp;:= <span class="stri">"->max_position="</span>;
      allocExpr &amp;:= integerLiteral(array_maxIdx[object_type]);
      allocExpr &amp;:= <span class="stri">") : (\n"</span>;
      allocExpr &amp;:= diagnosticLine;
      allocExpr &amp;:= variableName;
      allocExpr &amp;:= <span class="stri">"=("</span>;
      allocExpr &amp;:= type_name(object_type);
      allocExpr &amp;:= <span class="stri">")arrMalloc("</span>;
      allocExpr &amp;:= integerLiteral(array_minIdx[object_type]);
      allocExpr &amp;:= <span class="stri">", "</span>;
      allocExpr &amp;:= integerLiteral(array_maxIdx[object_type]);
      allocExpr &amp;:= <span class="stri">"),\n"</span>;
      allocExpr &amp;:= diagnosticLine;
      allocExpr &amp;:= <span class="stri">"unlikely(flist_was_full_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">") ? ("</span>;
      allocExpr &amp;:= <span class="stri">"flist_was_full_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"=0, "</span>;
      allocExpr &amp;:= <span class="stri">"flist_allowed_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"&lt;"</span>;
      allocExpr &amp;:= str(maxFlistLen);
      allocExpr &amp;:= <span class="stri">" ? "</span>;
      allocExpr &amp;:= <span class="stri">"flist_allowed_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"&lt;&lt;=1 : 0) : 0)"</span>;
    <span class="keywd">else</span>
      allocExpr &amp;:= diagnosticLine;
      allocExpr &amp;:= variableName;
      allocExpr &amp;:= <span class="stri">"=("</span>;
      allocExpr &amp;:= type_name(object_type);
      allocExpr &amp;:= <span class="stri">")arrMalloc(b->min_position, b->max_position)"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_arr_create_declaration (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: select_value <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: useFreelist <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">in</span> createFunction <span class="keywd">then</span>
      diagnosticLine := diagnosticLine(createFunction[object_type]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    select_value := select_value_from_rtlObjectStruct(array_element[object_type]);
    process_create_declaration(array_element[object_type], c_expr);
    <span class="keywd">if</span> fixArrayFreelist <span class="op">and</span>
        object_type <span class="op">in</span> array_minIdx <span class="op">and</span> object_type <span class="op">in</span> array_maxIdx <span class="op">and</span>
        array_maxIdx[object_type] -
        array_minIdx[object_type] &lt; ARRAY_FREELIST_LIMIT <span class="keywd">then</span>
      useFreelist := TRUE;
      <span class="keywd">if</span> object_type <span class="op">not</span> <span class="op">in</span> flist_declared <span class="keywd">then</span>
        <span class="comment"># Free list might already be defined by the declaration of create_... .</span>
        declare_free_list(object_type, diagnosticLine, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"static "</span>;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" create_"</span>;
    c_expr.expr &amp;:= str(typeNumber(object_type));
    c_expr.expr &amp;:= <span class="stri">" (const_"</span>;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" b)\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" a;\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    define_array_size_variable(object_type, c_expr);
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= process_arr_alloc(object_type, <span class="stri">"a"</span>, useFreelist, diagnosticLine);
    c_expr.expr &amp;:= <span class="stri">";\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    <span class="keywd">if</span> array_element[object_type] <span class="op">in</span> typeCategory <span class="op">and</span>
        typeCategory[array_element[object_type]] <span class="op">in</span> simpleValueType <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"memcpy(a->arr, b->arr, size * sizeof(genericType));\n"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"while (size != 0) {\n"</span>;
      c_expr.expr &amp;:= diagnosticLine;
      c_expr.expr &amp;:= <span class="stri">"size--;\n"</span>;
      c_expr.expr &amp;:= diagnosticLine;
      c_expr.expr &amp;:= <span class="stri">"a->arr[size]"</span>;
      c_expr.expr &amp;:= select_value;
      c_expr.expr &amp;:= <span class="stri">"="</span>;
      process_create_call(array_element[object_type],
          <span class="stri">"b->arr[size]"</span> &amp; select_value, c_expr.expr);
      c_expr.expr &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= diagnosticLine;
      c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"return a;\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    c_expr.expr &amp;:= noDiagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"\n"</span>;
    create_declared @:= [object_type] TRUE;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: process_sct_alloc (<span class="op">in</span> <span class="type">type</span>: object_type, <span class="op">in</span> <span class="type">string</span>: variableName,
    <span class="op">in</span> <span class="type">integer</span>: numElements, <span class="op">in</span> <span class="type">string</span>: diagnosticLine) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: allocExpr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: maxFlistLen <span class="keywd">is</span> 1 &lt;&lt; 16;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> structFreelist <span class="keywd">then</span>
      allocExpr := diagnosticLine;
      allocExpr &amp;:= <span class="stri">"flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">" != NULL ? ("</span>;
      allocExpr &amp;:= variableName;
      allocExpr &amp;:= <span class="stri">"=("</span>;
      allocExpr &amp;:= type_name(object_type);
      allocExpr &amp;:= <span class="stri">")(flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"), "</span>;
      allocExpr &amp;:= <span class="stri">"flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"=flist_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"->next, "</span>;
      allocExpr &amp;:= <span class="stri">"flist_allowed_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"++) : (\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    allocExpr &amp;:= diagnosticLine;
    allocExpr &amp;:= variableName;
    allocExpr &amp;:= <span class="stri">"=("</span>;
    allocExpr &amp;:= type_name(object_type);
    allocExpr &amp;:= <span class="stri">")malloc(sizeof(struct rtlStructStruct) - sizeof(rtlObjectType) + "</span>;
    allocExpr &amp;:= str(numElements);
    allocExpr &amp;:= <span class="stri">" * sizeof(rtlObjectType)),\n"</span>;
    allocExpr &amp;:= diagnosticLine;
    allocExpr &amp;:= <span class="stri">"(unlikely("</span>;
    allocExpr &amp;:= variableName;
    allocExpr &amp;:= <span class="stri">" == NULL) ? "</span>;
    allocExpr &amp;:= <span class="stri">"intRaiseError(MEMORY_ERROR) "</span>;
    allocExpr &amp;:= <span class="stri">": 0)"</span>;
    <span class="keywd">if</span> structFreelist <span class="keywd">then</span>
      allocExpr &amp;:= <span class="stri">",\n"</span>;
      allocExpr &amp;:= diagnosticLine;
      allocExpr &amp;:= <span class="stri">"unlikely(flist_was_full_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">") ? ("</span>;
      allocExpr &amp;:= <span class="stri">"flist_was_full_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"=0, "</span>;
      allocExpr &amp;:= <span class="stri">"flist_allowed_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"&lt;"</span>;
      allocExpr &amp;:= str(maxFlistLen);
      allocExpr &amp;:= <span class="stri">" ? "</span>;
      allocExpr &amp;:= <span class="stri">"flist_allowed_"</span>;
      allocExpr &amp;:= str(typeNumber(object_type));
      allocExpr &amp;:= <span class="stri">"&lt;&lt;=1 : 0) : 0)"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_sct_create_declaration (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: structSize <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: elementIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: select_value <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">in</span> createFunction <span class="keywd">then</span>
      diagnosticLine := diagnosticLine(createFunction[object_type]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> object_type <span class="op">in</span> struct_size <span class="keywd">then</span>
      structSize := struct_size[object_type];
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">for</span> elementIndex <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(structSize) <span class="keywd">do</span>
      process_create_declaration(struct_element_type[object_type][elementIndex], c_expr);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> structFreelist <span class="op">and</span> object_type <span class="op">not</span> <span class="op">in</span> flist_declared <span class="keywd">then</span>
      <span class="comment"># Free list might already be defined by the declaration of destr_... .</span>
      declare_free_list(object_type, diagnosticLine, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"static "</span>;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" create_"</span>;
    c_expr.expr &amp;:= str(typeNumber(object_type));
    c_expr.expr &amp;:= <span class="stri">" (const_"</span>;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" b)\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" a;\n"</span>;
    c_expr.expr &amp;:= process_sct_alloc(object_type, <span class="stri">"a"</span>, structSize, diagnosticLine);
    c_expr.expr &amp;:= <span class="stri">";\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"a->usage_count = 1;\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"a->type_num = b->type_num;\n"</span>;
    <span class="keywd">for</span> elementIndex <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(structSize) <span class="keywd">do</span>
      select_value := select_value_from_rtlObjectStruct(struct_element_type[object_type][elementIndex]);
      c_expr.expr &amp;:= diagnosticLine;
      c_expr.expr &amp;:= <span class="stri">"a->stru["</span> &amp; str(elementIndex) &amp; <span class="stri">"]"</span> &amp; select_value &amp; <span class="stri">"="</span>;
      process_create_call(struct_element_type[object_type][elementIndex],
          <span class="stri">"b->stru["</span> &amp; str(elementIndex) &amp; <span class="stri">"]"</span> &amp; select_value, c_expr.expr);
      c_expr.expr &amp;:= <span class="stri">";\n"</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"return a;\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    c_expr.expr &amp;:= noDiagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"\n"</span>;
    create_declared @:= [object_type] TRUE;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_hsh_create_declaration (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">in</span> createFunction <span class="keywd">then</span>
      diagnosticLine := diagnosticLine(createFunction[object_type]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"static "</span>;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" create_"</span>;
    c_expr.expr &amp;:= str(typeNumber(object_type));
    c_expr.expr &amp;:= <span class="stri">" (const_"</span>;
    c_expr.expr &amp;:= type_name(object_type);
    c_expr.expr &amp;:= <span class="stri">" b)\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"{\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"return hshCreate(b"</span>;
    c_expr.expr &amp;:= parametersOfHshCreate[object_type];
    c_expr.expr &amp;:= <span class="stri">");\n"</span>;
    c_expr.expr &amp;:= diagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"}\n"</span>;
    c_expr.expr &amp;:= noDiagnosticLine;
    c_expr.expr &amp;:= <span class="stri">"\n"</span>;
    create_declared @:= [object_type] TRUE;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: declare_create_prototype (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">not</span> <span class="op">in</span> create_prototype_declared <span class="keywd">then</span>
      declare_type_if_necessary(object_type, c_expr);
      c_expr.expr &amp;:= <span class="stri">"static "</span>;
      c_expr.expr &amp;:= type_name(object_type);
      c_expr.expr &amp;:= <span class="stri">" create_"</span>;
      c_expr.expr &amp;:= str(typeNumber(object_type));
      c_expr.expr &amp;:= <span class="stri">" ("</span>;
      <span class="keywd">if</span> useConstPrefix(object_type) <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"const_"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= type_name(object_type);
      c_expr.expr &amp;:= <span class="stri">");\n\n"</span>;
      create_prototype_declared @:= [object_type] TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_create_declaration (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">not</span> <span class="op">in</span> create_declared <span class="keywd">then</span>
      <span class="keywd">if</span> object_type <span class="op">in</span> typeCategory <span class="keywd">then</span>
        <span class="keywd">case</span> typeCategory[object_type] <span class="keywd">of</span>
          <span class="keywd">when</span> {ARRAYOBJECT}:
            <span class="keywd">if</span> object_type <span class="op">in</span> array_element <span class="keywd">then</span>
              process_arr_create_declaration(object_type, c_expr);
            <span class="keywd">else</span>
              declare_create_prototype(object_type, c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {STRUCTOBJECT}:
            process_sct_create_declaration(object_type, c_expr);
          <span class="keywd">when</span> {HASHOBJECT}:
            <span class="keywd">if</span> object_type <span class="op">in</span> parametersOfHshCreate <span class="keywd">then</span>
              process_hsh_create_declaration(object_type, c_expr);
            <span class="keywd">else</span>
              declare_create_prototype(object_type, c_expr);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">otherwise</span>:
            create_declared @:= [object_type] TRUE;
        <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">else</span>
        declare_create_prototype(object_type, c_expr);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: declare_missing_create_declarations (<span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: object_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> <span class="keywd">key</span> object_type <span class="keywd">range</span> create_prototype_declared <span class="keywd">do</span>
      process_create_declaration(object_type, c_expr);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_create_call (<span class="op">in</span> <span class="type">type</span>: object_type,
    <span class="op">in</span> <span class="type">string</span>: param_b, <span class="keywd">inout</span> <span class="type">string</span>: expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> object_type <span class="op">in</span> typeCategory <span class="keywd">then</span>
      <span class="keywd">case</span> typeCategory[object_type] <span class="keywd">of</span>
        <span class="keywd">when</span> simpleValueType:   expr &amp;:= param_b;
        <span class="keywd">when</span> {BIGINTOBJECT}:    expr &amp;:= <span class="stri">"bigCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {STRIOBJECT}:      expr &amp;:= <span class="stri">"strCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {BSTRIOBJECT}:     expr &amp;:= <span class="stri">"bstCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {FILEOBJECT}:      expr &amp;:= <span class="stri">"filCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {SETOBJECT}:       expr &amp;:= <span class="stri">"setCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {POLLOBJECT}:      expr &amp;:= <span class="stri">"polCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {REFLISTOBJECT}:   expr &amp;:= <span class="stri">"rflCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {WINOBJECT}:       expr &amp;:= <span class="stri">"drwCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {POINTLISTOBJECT}: expr &amp;:= <span class="stri">"bstCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {PROCESSOBJECT}:   expr &amp;:= <span class="stri">"pcsCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {PROGOBJECT}:      expr &amp;:= <span class="stri">"prgCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {DATABASEOBJECT}:  expr &amp;:= <span class="stri">"sqlCreateDb("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {SQLSTMTOBJECT}:   expr &amp;:= <span class="stri">"sqlCreateStmt("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {INTERFACEOBJECT}: expr &amp;:= <span class="stri">"itfCreate("</span> &amp; param_b &amp; <span class="stri">")"</span>;
        <span class="keywd">when</span> {ARRAYOBJECT, HASHOBJECT, STRUCTOBJECT}:
          expr &amp;:= <span class="stri">"create_"</span>;
          expr &amp;:= str(typeNumber(object_type));
          expr &amp;:= <span class="stri">"("</span>;
          expr &amp;:= param_b;
          expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">else</span>
      expr &amp;:= <span class="stri">"create_"</span>;
      expr &amp;:= str(typeNumber(object_type));
      expr &amp;:= <span class="stri">"(("</span>;
      expr &amp;:= type_name(object_type);
      expr &amp;:= <span class="stri">")("</span>;
      expr &amp;:= param_b;
      expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
