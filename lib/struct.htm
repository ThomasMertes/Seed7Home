<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  struct.s7i    Struct support library                            *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2025  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/struct_elem.htm">struct_elem.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">type</span>: STRUCT <span class="keywd">is</span> newtype;

IN_PARAM_IS_REFERENCE(STRUCT);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">STRUCT</span>: dest) ::= (<span class="op">in</span> <span class="type">STRUCT</span>: source)              <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">STRUCT</span>: aValue)                            <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">STRUCT</span>: dest) := (<span class="op">in</span> <span class="type">STRUCT</span>: source)             <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct)                     <span class="keywd">is</span> action <span class="stri">"SCT_LNG"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (<span class="op">in</span> <span class="type">STRUCT</span>: struct1) &amp; (<span class="op">in</span> <span class="type">STRUCT</span>: struct2)      <span class="keywd">is</span> action <span class="stri">"SCT_CAT"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: incl (<span class="keywd">inout</span> <span class="type">STRUCT</span>: aStruct, <span class="op">in</span> <span class="type">reference</span>: anElem)      <span class="keywd">is</span> action <span class="stri">"SCT_INCL"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: empty (attr STRUCT)                              <span class="keywd">is</span> action <span class="stri">"SCT_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: declare_elements (<span class="keywd">ref</span> <span class="type">proc</span>: elem_decl)         <span class="keywd">is</span> action <span class="stri">"DCL_ELEMENTS"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: new <span class="keywd">struct</span> (<span class="keywd">ref</span> <span class="type">proc</span>: elem_decl) <span class="keywd">end</span> <span class="keywd">struct</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: structType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: ptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: varptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">ref_list</span>: elem_list <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">STRUCT</span>: struct_value <span class="keywd">is</span> empty(STRUCT);
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: elem_obj <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> structElementArray: structElems <span class="keywd">is</span> structElementArray.value;
  <span class="keywd">begin</span>
    global
    structType := newtype;
    IN_PARAM_IS_REFERENCE(structType);
    ptrType := ptr structType;
    CURR_STRUCT_PTR := ptrType;
    varptrType := varptr structType;
    elem_list := declare_elements(elem_decl);
    <span class="keywd">const</span> <span class="type">boolean</span>: isStructType (attr structType)                      <span class="keywd">is</span> TRUE;
    <span class="keywd">const</span> <span class="type">type</span>: base_type (attr structType)                            <span class="keywd">is</span> void;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">structType</span>: dest) ::= (<span class="op">in</span> <span class="type">structType</span>: source)     <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">structType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structType</span>: dest) := (<span class="op">in</span> <span class="type">structType</span>: source)    <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">ptrType</span>: alloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)                 <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">varptrType</span>: varalloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)           <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">structType</span>: (attr structType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct) <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (attr STRUCT) <span class="op">conv</span> (<span class="op">in</span> <span class="type">structType</span>: aStruct)     <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(elem_list) <span class="keywd">do</span>
      elem_obj := elem_list[number];
      <span class="keywd">if</span> is_symb(elem_obj) <span class="keywd">then</span>
        <span class="comment">(* TRACE(elem_obj); PRINT("\n"); *)</span>
        incl(struct_value, elem_obj);
        <span class="keywd">const</span> <span class="type">func</span>    getType(elem_obj):    (<span class="op">in</span> <span class="type">structType</span>: aStruct) .  (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"SCT_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">varfunc</span> getType(elem_obj): (<span class="keywd">inout</span> <span class="type">structType</span>: aStruct) .  (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"SCT_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">func</span>    getType(elem_obj):    (<span class="op">in</span> <span class="type">ptrType</span>:    aPtr)    -> (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">varfunc</span> getType(elem_obj):    (<span class="op">in</span> <span class="type">varptrType</span>: aStruct) -> (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
        structElems &amp;:= structElement(elem_obj);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">const</span> structElementArray: elements (attr structType)               <span class="keywd">is</span> structElems;
    <span class="keywd">const</span> <span class="type">structType</span>: (attr structType) . value                        <span class="keywd">is</span> structType <span class="op">conv</span> struct_value;
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: new <span class="keywd">struct</span> <span class="keywd">end</span> <span class="keywd">struct</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: structType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: ptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: varptrType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    global
    structType := newtype;
    IN_PARAM_IS_REFERENCE(structType);
    ptrType := ptr structType;
    varptrType := varptr structType;
    <span class="keywd">const</span> <span class="type">boolean</span>: isStructType (attr structType)                      <span class="keywd">is</span> TRUE;
    <span class="keywd">const</span> <span class="type">type</span>: base_type (attr structType)                            <span class="keywd">is</span> void;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">structType</span>: dest) ::= (<span class="op">in</span> <span class="type">structType</span>: source)     <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">structType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structType</span>: dest) := (<span class="op">in</span> <span class="type">structType</span>: source)    <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">ptrType</span>: alloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)                 <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">varptrType</span>: varalloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)           <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">structType</span>: (attr structType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct) <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (attr STRUCT) <span class="op">conv</span> (<span class="op">in</span> <span class="type">structType</span>: aStruct)     <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> structElementArray: elements (attr structType)               <span class="keywd">is</span> structElementArray.value;
    <span class="keywd">const</span> <span class="type">structType</span>: (attr structType) . value                        <span class="keywd">is</span> structType <span class="op">conv</span> empty(STRUCT);
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: new (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">struct</span> (<span class="keywd">ref</span> <span class="type">proc</span>: elem_decl) <span class="keywd">end</span> <span class="keywd">struct</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: structType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: ptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: varptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">ref_list</span>: elem_list <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">STRUCT</span>: struct_value <span class="keywd">is</span> empty(STRUCT);
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: elem_obj <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> structElementArray: structElems <span class="keywd">is</span> structElementArray.value;
  <span class="keywd">begin</span>
    global
    structType := subtype baseType;
    IN_PARAM_IS_REFERENCE(structType);
    ptrType := ptr structType;
    varptrType := varptr structType;
    elem_list := declare_elements(elem_decl);
    <span class="keywd">const</span> <span class="type">boolean</span>: isStructType (attr structType)                      <span class="keywd">is</span> TRUE;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">structType</span>: dest) ::= (<span class="op">in</span> <span class="type">structType</span>: source)     <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">structType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structType</span>: dest) := (<span class="op">in</span> <span class="type">structType</span>: source)    <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">ptrType</span>: alloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)                 <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">varptrType</span>: varalloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)           <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">structType</span>: (attr structType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct) <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (attr STRUCT) <span class="op">conv</span> (<span class="op">in</span> <span class="type">structType</span>: aStruct)     <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(elem_list) <span class="keywd">do</span>
      elem_obj := elem_list[number];
      <span class="keywd">if</span> is_symb(elem_obj) <span class="keywd">then</span>
        incl(struct_value, elem_obj);
        <span class="keywd">const</span> <span class="type">func</span>    getType(elem_obj):    (<span class="op">in</span> <span class="type">structType</span>: aStruct) .  (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"SCT_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">varfunc</span> getType(elem_obj): (<span class="keywd">inout</span> <span class="type">structType</span>: aStruct) .  (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"SCT_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">func</span>    getType(elem_obj):    (<span class="op">in</span> <span class="type">ptrType</span>:    aPtr)    -> (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">varfunc</span> getType(elem_obj):    (<span class="op">in</span> <span class="type">varptrType</span>: aStruct) -> (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
        structElems &amp;:= structElement(elem_obj);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">const</span> structElementArray: elements (attr structType)               <span class="keywd">is</span> structElems;
    <span class="keywd">const</span> <span class="type">structType</span>: (attr structType) . value                        <span class="keywd">is</span> structType <span class="op">conv</span> struct_value;
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: new (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">struct</span> <span class="keywd">end</span> <span class="keywd">struct</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: structType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: ptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: varptrType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    global
    structType := subtype baseType;
    IN_PARAM_IS_REFERENCE(structType);
    ptrType := ptr structType;
    varptrType := varptr structType;
    <span class="keywd">const</span> <span class="type">boolean</span>: isStructType (attr structType)                      <span class="keywd">is</span> TRUE;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">structType</span>: dest) ::= (<span class="op">in</span> <span class="type">structType</span>: source)     <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">structType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structType</span>: dest) := (<span class="op">in</span> <span class="type">structType</span>: source)    <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">ptrType</span>: alloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)                 <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">varptrType</span>: varalloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)           <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">structType</span>: (attr structType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct) <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (attr STRUCT) <span class="op">conv</span> (<span class="op">in</span> <span class="type">structType</span>: aStruct)     <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> structElementArray: elements (attr structType)               <span class="keywd">is</span> structElementArray.value;
    <span class="keywd">const</span> <span class="type">structType</span>: (attr structType) . value                        <span class="keywd">is</span> structType <span class="op">conv</span> empty(STRUCT);
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: sub (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">struct</span> (<span class="keywd">ref</span> <span class="type">proc</span>: elem_decl) <span class="keywd">end</span> <span class="keywd">struct</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: structType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: ptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: varptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">ref_list</span>: elem_list <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">STRUCT</span>: struct_value <span class="keywd">is</span> empty(STRUCT);
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: elem_obj <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> structElementArray: structElems <span class="keywd">is</span> structElementArray.value;
  <span class="keywd">begin</span>
    global
    structType := subtype baseType;
    IN_PARAM_IS_REFERENCE(structType);
    ptrType := ptr structType;
    varptrType := varptr structType;
    elem_list := declare_elements(elem_decl);
    <span class="keywd">const</span> <span class="type">boolean</span>: isStructType (attr structType)                      <span class="keywd">is</span> TRUE;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">structType</span>: dest) ::= (<span class="op">in</span> <span class="type">structType</span>: source)     <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">structType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structType</span>: dest) := (<span class="op">in</span> <span class="type">structType</span>: source)    <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">ptrType</span>: alloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)                 <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">varptrType</span>: varalloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)           <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">structType</span>: (attr structType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct) <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (attr STRUCT) <span class="op">conv</span> (<span class="op">in</span> <span class="type">structType</span>: aStruct)     <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(elem_list) <span class="keywd">do</span>
      elem_obj := elem_list[number];
      <span class="keywd">if</span> is_symb(elem_obj) <span class="keywd">then</span>
        incl(struct_value, elem_obj);
        <span class="keywd">const</span> <span class="type">func</span>    getType(elem_obj):    (<span class="op">in</span> <span class="type">structType</span>: aStruct) .  (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"SCT_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">varfunc</span> getType(elem_obj): (<span class="keywd">inout</span> <span class="type">structType</span>: aStruct) .  (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"SCT_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">func</span>    getType(elem_obj):    (<span class="op">in</span> <span class="type">ptrType</span>:    aPtr)    -> (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
        <span class="keywd">const</span> <span class="type">varfunc</span> getType(elem_obj):    (<span class="op">in</span> <span class="type">varptrType</span>: aStruct) -> (symb elem_obj) <span class="keywd">is</span> action <span class="stri">"REF_SELECT"</span>;
        structElems &amp;:= structElement(elem_obj);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">const</span> structElementArray: elements (attr structType)               <span class="keywd">is</span> elements(baseType) &amp; structElems;
    <span class="keywd">const</span> <span class="type">structType</span>: (attr structType) . value                        <span class="keywd">is</span> structType <span class="op">conv</span> (STRUCT <span class="op">conv</span> (baseType.value) &amp; struct_value);
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: sub (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">struct</span> <span class="keywd">end</span> <span class="keywd">struct</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: structType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: ptrType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: varptrType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    global
    structType := subtype baseType;
    IN_PARAM_IS_REFERENCE(structType);
    ptrType := ptr structType;
    varptrType := varptr structType;
    <span class="keywd">const</span> <span class="type">boolean</span>: isStructType (attr structType)                      <span class="keywd">is</span> TRUE;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">structType</span>: dest) ::= (<span class="op">in</span> <span class="type">structType</span>: source)     <span class="keywd">is</span> action <span class="stri">"SCT_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">structType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"SCT_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">structType</span>: dest) := (<span class="op">in</span> <span class="type">structType</span>: source)    <span class="keywd">is</span> action <span class="stri">"SCT_CPY"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">ptrType</span>: alloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)                 <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">varptrType</span>: varalloc (<span class="op">in</span> <span class="type">structType</span>: aStruct)           <span class="keywd">is</span> action <span class="stri">"SCT_ALLOC"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">structType</span>: (attr structType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">STRUCT</span>: aStruct) <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">STRUCT</span>: (attr STRUCT) <span class="op">conv</span> (<span class="op">in</span> <span class="type">structType</span>: aStruct)     <span class="keywd">is</span> action <span class="stri">"SCT_CONV"</span>;
    <span class="keywd">const</span> structElementArray: elements (attr structType)               <span class="keywd">is</span> elements(baseType);
    <span class="keywd">const</span> <span class="type">structType</span>: (attr structType) . value                        <span class="keywd">is</span> structType <span class="op">conv</span> (STRUCT <span class="op">conv</span> (baseType.value));
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
