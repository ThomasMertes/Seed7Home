<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  echo.s7i      Filter file which generates an echo of the input  *)</span>
<span class="comment">(*  Copyright (C) 1992, 1993, 1994, 2005  Thomas Mertes             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  [[file|File]] implementation type which generates an echo of the input.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: echoFile <span class="keywd">is</span> <span class="keywd">sub</span> null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">file</span>: inFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">file</span>: outFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: inPos <span class="keywd">is</span> 1;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Open a file that echoes characters read from ''inFile'' to ''outFile''.
 *  Reading operations are forwarded to ''inFile''. All normal characters
 *  that are read from ''inFile'' are also written to ''outFile''.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openEcho (<span class="op">in</span> <span class="type">file</span>: inFile, <span class="op">in</span> <span class="type">file</span>: outFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">echoFile</span>: new_echoFile <span class="keywd">is</span> echoFile.value;
  <span class="keywd">begin</span>
    new_echoFile.inFile := inFile;
    new_echoFile.outFile := outFile;
    new_echoFile.inPos := 1;
    newFile := toInterface(new_echoFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a character from an echoFile.
 *  The request is forwarded to ''inFile''. The character read from
 *  ''inFile'' is written (echoed) to ''outFile''. Ctrl-C and ctrl-T
 *  are handled special, as they can be used to terminate the
 *  program. The user is asked for confirmation before the program
 *  is terminated.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">echoFile</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: charRead <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      flush(inFile.outFile);
<span class="comment">(*    cursor_on(inFile.outFile); *)</span>
      charRead := getc(inFile.inFile);
<span class="comment">(*    cursor_off(inFile.outFile); *)</span>
      <span class="keywd">if</span> charRead >= <span class="stri">' '</span> <span class="op">and</span> charRead &lt;= <span class="stri">'~'</span> <span class="keywd">then</span>
        incr(inFile.inPos);
        write(inFile.outFile, charRead);
      <span class="keywd">elsif</span> charRead = <span class="stri">'\n'</span> <span class="keywd">then</span>
        inFile.inPos := 1;
        writeln(inFile.outFile);
      <span class="keywd">elsif</span> charRead = <span class="stri">'\b'</span> <span class="keywd">then</span>
        <span class="keywd">if</span> inFile.inPos > 1 <span class="keywd">then</span>
          decr(inFile.inPos);
          backSpace(inFile.outFile, <span class="stri">" "</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> charRead = <span class="stri">'\C'</span> <span class="op">or</span> charRead = <span class="stri">'\T'</span> <span class="keywd">then</span>
        write(inFile.outFile, <span class="stri">" terminate (y/n)? "</span>);
        flush(inFile.outFile);
        <span class="keywd">if</span> lower(getc(inFile.inFile)) = <span class="stri">'y'</span> <span class="keywd">then</span>
          writeln(inFile.outFile, <span class="stri">"yes"</span>);
          writeln(inFile.outFile);
          writeln(inFile.outFile, <span class="stri">"*** PROGRAM TERMINATED BY USER"</span>);
          exit(PROGRAM);
        <span class="keywd">else</span>
          backSpace(inFile.outFile, <span class="stri">" terminate (y/n)? "</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> charRead &lt;> EOF <span class="keywd">then</span>
        incr(inFile.inPos);
        write(inFile.outFile, <span class="stri">'?'</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> charRead &lt;> <span class="stri">'\C'</span> <span class="op">and</span> charRead &lt;> <span class="stri">'\T'</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a string with a maximum length from an echoFile.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="keywd">inout</span> <span class="type">echoFile</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> maxLength &lt; 0 <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">else</span>
      <span class="keywd">while</span> number &lt;= maxLength <span class="op">and</span> ch &lt;> EOF <span class="keywd">do</span>
        ch := getc(inFile);
        <span class="keywd">if</span> ch &lt;> EOF <span class="keywd">then</span>
          striRead &amp;:= str(ch);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        incr(number);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
