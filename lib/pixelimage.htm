<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pixelimage.s7i  Support for pixelImage (2D array of pixels)     *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">type</span>: pixelArray <span class="keywd">is</span> <span class="type">array</span> <span class="type">[</span>1 ..] pixel;


<span class="comment">(**
 *  Two dimensional array of pixels.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: pixelImage <span class="keywd">is</span> <span class="type">array</span> <span class="type">[</span>1 ..] pixelArray;


<span class="comment">(**
 *  Set pixels in an image line.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPixels (<span class="keywd">inout</span> <span class="type">pixelArray</span>: imageLine, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="op">in</span> <span class="type">integer</span>: stopColumn, <span class="op">in</span> <span class="type">pixel</span>: currentPixel) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> stopColumn <span class="keywd">do</span>
      imageLine[column] := currentPixel;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a new pixmap from a two-dimensional array of pixels.
 *  The array of pixels might come from a image file.
 *  @param image Pixel array with lines from top downward and columns from left to right.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="keywd">ref</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXMAP_FROM_PIXELS"</span>;


<span class="comment">(**
 *  Get a two-dimensional array of pixels from ''aWindow''.
 *  The array of pixels can be used to write the image to a file.
 *  This is used by the function str(aWindow, PPM):
 *   image := getPixelImage(pixmap);
 *   for line range 1 to height do
 *     for pix range image[line] do
 *       col := pixelToColor(pix);
 *       stri &amp;:= chr(col.redLight   mdiv 256);
 *       stri &amp;:= chr(col.greenLight mdiv 256);
 *       stri &amp;:= chr(col.blueLight  mdiv 256);
 *     end for;
 *   end for;
 *  @param aWindow Window or pixmap source to create the array of pixels.
 *  @return a pixel array with lines from top downward and columns from left to right.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixelImage</span>: getPixelImage (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_ARRAY"</span>;


<span class="comment">(**
 *  Return ''image'' rotated by 90 degrees counterclockwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixelImage</span>: getRotated90 (<span class="op">in</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixelImage</span>: rotatedImage <span class="keywd">is</span> pixelImage.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: firstDestLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    rotatedImage := pixelImage[.. length(image[1])] <span class="op">times</span>
                    pixelArray[.. length(image)] <span class="op">times</span> pixel.value;
    firstDestLine := length(image[1]);
    lastSrcColumn := length(image[1]);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> length(image) <span class="keywd">do</span>
      destLine := firstDestLine;
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        rotatedImage[destLine][destColumn] := image[srcLine][srcColumn];
        decr(destLine);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      incr(destColumn);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Rotate the given ''image'' by 90 degrees counterclockwise.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rotate90 (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    image := getRotated90(image);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Return ''image'' rotated by 180 degrees.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixelImage</span>: getRotated180 (<span class="op">in</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixelImage</span>: rotatedImage <span class="keywd">is</span> pixelImage.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: firstDestColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    rotatedImage := pixelImage[.. length(image)] <span class="op">times</span>
                    pixelArray[.. length(image[1])] <span class="op">times</span> pixel.value;
    destLine := length(image);
    lastSrcColumn := length(image[1]);
    firstDestColumn := length(image[1]);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> succ(length(image)) <span class="op">div</span> 2 <span class="keywd">do</span>
      destColumn := firstDestColumn;
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        rotatedImage[destLine][destColumn] := image[srcLine][srcColumn];
        decr(destColumn);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      decr(destLine);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Rotate the given ''image'' by 180 degrees.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rotate180 (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: firstDestColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">pixel</span>: aPixel <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    destLine := length(image);
    lastSrcColumn := length(image[1]);
    firstDestColumn := length(image[1]);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> succ(length(image)) <span class="op">div</span> 2 <span class="keywd">do</span>
      destColumn := firstDestColumn;
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        aPixel := image[srcLine][srcColumn];
        image[srcLine][srcColumn] := image[destLine][destColumn];
        image[destLine][destColumn] := aPixel;
        decr(destColumn);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      decr(destLine);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Return ''image'' rotated by 270 degrees counterclockwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixelImage</span>: getRotated270 (<span class="op">in</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixelImage</span>: rotatedImage <span class="keywd">is</span> pixelImage.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    rotatedImage := pixelImage[.. length(image[1])] <span class="op">times</span>
                    pixelArray[.. length(image)] <span class="op">times</span> pixel.value;
    lastSrcColumn := length(image[1]);
    destColumn := length(image);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> length(image) <span class="keywd">do</span>
      destLine := 1;
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        rotatedImage[srcColumn][destColumn] := image[srcLine][srcColumn];
      <span class="keywd">end</span> <span class="keywd">for</span>;
      decr(destColumn);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Rotate the given ''image'' by 270 degrees counterclockwise.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rotate270 (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    image := getRotated270(image);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Mirror the given ''image'' horizontally.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: mirrorHorizontally (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: firstDestColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">pixel</span>: aPixel <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    lastSrcColumn := succ(length(image[1])) <span class="op">div</span> 2;
    firstDestColumn := length(image[1]);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> length(image) <span class="keywd">do</span>
      destColumn := firstDestColumn;
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        aPixel := image[srcLine][srcColumn];
        image[srcLine][srcColumn] := image[srcLine][destColumn];
        image[srcLine][destColumn] := aPixel;
        decr(destColumn);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Mirror the given ''image'' vertically.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: mirrorVertically (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">pixel</span>: aPixel <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    destLine := length(image);
    lastSrcColumn := length(image[1]);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> succ(length(image)) <span class="op">div</span> 2 <span class="keywd">do</span>
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        aPixel := image[srcLine][srcColumn];
        image[srcLine][srcColumn] := image[destLine][srcColumn];
        image[destLine][srcColumn] := aPixel;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      decr(destLine);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Return ''image'' rotated by 90 degrees counterclockwise and mirrored horizontally.
 *  This is the same as mirroring vertically and rotating by 90 degrees conterclockwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixelImage</span>: getRotated90AndMirroredHorizontally (<span class="op">in</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixelImage</span>: destImage <span class="keywd">is</span> pixelImage.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: firstDestLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    destImage := pixelImage[.. length(image[1])] <span class="op">times</span>
                 pixelArray[.. length(image)] <span class="op">times</span> pixel.value;
    firstDestLine := length(image[1]);
    lastSrcColumn := length(image[1]);
    destColumn := length(image);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> length(image) <span class="keywd">do</span>
      destLine := firstDestLine;
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        destImage[destLine][destColumn] := image[srcLine][srcColumn];
        decr(destLine);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      decr(destColumn);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Return ''image'' rotated by 270 degrees counterclockwise and mirrored horizontally.
 *  This is the same as mirroring vertically and rotating by 270 degrees conterclockwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixelImage</span>: getRotated270AndMirroredHorizontally (<span class="op">in</span> <span class="type">pixelImage</span>: image) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixelImage</span>: destImage <span class="keywd">is</span> pixelImage.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: srcLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: srcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastSrcColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destColumn <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    destImage := pixelImage[.. length(image[1])] <span class="op">times</span>
                 pixelArray[.. length(image)] <span class="op">times</span> pixel.value;
    lastSrcColumn := length(image[1]);
    <span class="keywd">for</span> srcLine <span class="keywd">range</span> 1 <span class="keywd">to</span> length(image) <span class="keywd">do</span>
      <span class="keywd">for</span> srcColumn <span class="keywd">range</span> 1 <span class="keywd">to</span> lastSrcColumn <span class="keywd">do</span>
        destImage[srcColumn][destColumn] := image[srcLine][srcColumn];
      <span class="keywd">end</span> <span class="keywd">for</span>;
      incr(destColumn);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
