<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  deflate.s7i   Deflate compression algorithm                     *)</span>
<span class="comment">(*  Copyright (C) 2013, 2015, 2020, 2023, 2024  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bitdata.htm">bitdata.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: putLiteralOrLength (<span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: literalOrLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> literalOrLength &lt;= 143 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[8][literalOrLength + 2#00110000], 8);
    <span class="keywd">elsif</span> literalOrLength &lt;= 255 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[9][literalOrLength + 2#110010000 - 144], 9);
    <span class="keywd">elsif</span> literalOrLength &lt;= 279 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[7][literalOrLength - 256], 7);
    <span class="keywd">else</span>
      putBits(compressedStream, reverseBits[8][literalOrLength + 2#11000000 - 280], 8);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: putLength (<span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt;= 10 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 254 + length);
    <span class="keywd">elsif</span> length &lt;= 18 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 265 + ((length - 11) >> 1));
      putBit(compressedStream, (length - 11) <span class="op">mod</span> 2);
    <span class="keywd">elsif</span> length &lt;= 34 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 269 + ((length - 19) >> 2));
      putBits(compressedStream, (length - 19) <span class="op">mod</span> 4, 2);
    <span class="keywd">elsif</span> length &lt;= 66 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 273 + ((length - 35) >> 3));
      putBits(compressedStream, (length - 35) <span class="op">mod</span> 8, 3);
    <span class="keywd">elsif</span> length &lt;= 130 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 277 + ((length - 67) >> 4));
      putBits(compressedStream, (length - 67) <span class="op">mod</span> 16, 4);
    <span class="keywd">elsif</span> length &lt;= 257 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 281 + ((length - 131) >> 5));
      putBits(compressedStream, (length - 131) <span class="op">mod</span> 32, 5);
    <span class="keywd">elsif</span> length = 258 <span class="keywd">then</span>
      putLiteralOrLength(compressedStream, 285);
    <span class="keywd">else</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: putDistance (<span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream,
    <span class="op">in</span> <span class="type">integer</span>: distance) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> distance &lt;= 4 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][pred(distance)], 5);
    <span class="keywd">elsif</span> distance &lt;= 8 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][4 + ((distance - 5) >> 1)], 5);
      putBit(compressedStream, (distance - 5) <span class="op">mod</span> 2);
    <span class="keywd">elsif</span> distance &lt;= 16 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][6 + ((distance - 9) >> 2)], 5);
      putBits(compressedStream, (distance - 9) <span class="op">mod</span> 4, 2);
    <span class="keywd">elsif</span> distance &lt;= 32 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][8 + ((distance - 17) >> 3)], 5);
      putBits(compressedStream, (distance - 17) <span class="op">mod</span> 8, 3);
    <span class="keywd">elsif</span> distance &lt;= 64 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][10 + ((distance - 33) >> 4)], 5);
      putBits(compressedStream, (distance - 33) <span class="op">mod</span> 16, 4);
    <span class="keywd">elsif</span> distance &lt;= 128 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][12 + ((distance - 65) >> 5)], 5);
      putBits(compressedStream, (distance - 65) <span class="op">mod</span> 32, 5);
    <span class="keywd">elsif</span> distance &lt;= 256 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][14 + ((distance - 129) >> 6)], 5);
      putBits(compressedStream, (distance - 129) <span class="op">mod</span> 64, 6);
    <span class="keywd">elsif</span> distance &lt;= 512 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][16 + ((distance - 257) >> 7)], 5);
      putBits(compressedStream, (distance - 257) <span class="op">mod</span> 128, 7);
    <span class="keywd">elsif</span> distance &lt;= 1024 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][18 + ((distance - 513) >> 8)], 5);
      putBits(compressedStream, (distance - 513) <span class="op">mod</span> 256, 8);
    <span class="keywd">elsif</span> distance &lt;= 2048 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][20 + ((distance - 1025) >> 9)], 5);
      putBits(compressedStream, (distance - 1025) <span class="op">mod</span> 512, 9);
    <span class="keywd">elsif</span> distance &lt;= 4096 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][22 + ((distance - 2049) >> 10)], 5);
      putBits(compressedStream, (distance - 2049) <span class="op">mod</span> 1024, 10);
    <span class="keywd">elsif</span> distance &lt;= 8192 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][24 + ((distance - 4097) >> 11)], 5);
      putBits(compressedStream, (distance - 4097) <span class="op">mod</span> 2048, 11);
    <span class="keywd">elsif</span> distance &lt;= 16384 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][26 + ((distance - 8193) >> 12)], 5);
      putBits(compressedStream, (distance - 8193) <span class="op">mod</span> 4096, 12);
    <span class="keywd">elsif</span> distance &lt;= 32768 <span class="keywd">then</span>
      putBits(compressedStream, reverseBits[5][28 + ((distance - 16385) >> 13)], 5);
      putBits(compressedStream, (distance - 16385) <span class="op">mod</span> 8192, 13);
    <span class="keywd">else</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">type</span>: lookupDict <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>;
<span class="keywd">const</span> <span class="type">type</span>: slidingWindowType <span class="keywd">is</span> <span class="type">array</span> <span class="type">[</span>0 .. 32767] integer;

<span class="keywd">const</span> <span class="type">type</span>: deflateData <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: uPos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">lookupDict</span>: dictionary <span class="keywd">is</span> lookupDict.value;
    <span class="keywd">var</span> <span class="type">slidingWindowType</span>: slidingWindow <span class="keywd">is</span> slidingWindowType <span class="op">times</span> -32768;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">proc</span>: deflate (<span class="keywd">inout</span> <span class="type">deflateData</span>: deflateState, <span class="op">in</span> <span class="type">string</span>: uncompressed,
    <span class="op">in</span> <span class="type">integer</span>: limit, <span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: threeChars <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: posFound <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: dictionaryPosFound <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maxLength <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: nextPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    pos := deflateState.uPos;
    <span class="keywd">while</span> pos &lt;= limit <span class="keywd">do</span>
      <span class="keywd">if</span> pos &lt; pred(length(uncompressed)) <span class="keywd">then</span>
        posFound := update(deflateState.dictionary, uncompressed[pos fixLen 3], pos);
        <span class="keywd">if</span> posFound &lt;> pos <span class="op">and</span> posFound >= pos - 32768 <span class="keywd">then</span>
          maxLength := 258;
          <span class="keywd">if</span> length(uncompressed) - pos &lt; maxLength <span class="keywd">then</span>
            maxLength := length(uncompressed) - pos;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          length := 3;
          <span class="keywd">while</span> length &lt; maxLength <span class="op">and</span>
                uncompressed[pos + length] = uncompressed[posFound + length] <span class="keywd">do</span>
            incr(length);
          <span class="keywd">end</span> <span class="keywd">while</span>;
          dictionaryPosFound := posFound;
          nextPos := deflateState.slidingWindow[posFound <span class="op">mod</span> 32768];
          <span class="keywd">while</span> nextPos >= pos - 32768 <span class="op">and</span> length &lt; maxLength <span class="keywd">do</span>
            <span class="keywd">if</span> uncompressed[nextPos + 3 fixLen length - 2] = uncompressed[pos + 3 fixLen length - 2] <span class="keywd">then</span>
              incr(length);
              posFound := nextPos;
              <span class="keywd">while</span> length &lt; maxLength <span class="op">and</span>
                    uncompressed[pos + length] = uncompressed[posFound + length] <span class="keywd">do</span>
                incr(length);
              <span class="keywd">end</span> <span class="keywd">while</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            nextPos := deflateState.slidingWindow[nextPos <span class="op">mod</span> 32768];
          <span class="keywd">end</span> <span class="keywd">while</span>;
          deflateState.slidingWindow[pos <span class="op">mod</span> 32768] := dictionaryPosFound;
          <span class="keywd">if</span> length > 3 <span class="op">or</span> pos - posFound &lt;= 4096 <span class="keywd">then</span>
            putLength(compressedStream, length);
            putDistance(compressedStream, pos - posFound);
            nextPos := pos + length;
            incr(pos);
            <span class="keywd">while</span> pos &lt; nextPos <span class="keywd">do</span>
              <span class="keywd">if</span> pos &lt; pred(length(uncompressed)) <span class="keywd">then</span>
                posFound := update(deflateState.dictionary, uncompressed[pos fixLen 3], pos);
                <span class="keywd">if</span> posFound &lt;> pos <span class="keywd">then</span>
                  deflateState.slidingWindow[pos <span class="op">mod</span> 32768] := posFound;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              incr(pos);
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">else</span>
            putLiteralOrLength(compressedStream, ord(uncompressed[pos]));
            incr(pos);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          <span class="comment"># Not necessary to update slidingWindow, since it is already outdated.</span>
          putLiteralOrLength(compressedStream, ord(uncompressed[pos]));
          incr(pos);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        putLiteralOrLength(compressedStream, ord(uncompressed[pos]));
        incr(pos);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    deflateState.uPos := pos;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: beginDeflateBlock (<span class="keywd">inout</span> <span class="type">deflateData</span>: deflateState,
    <span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream, <span class="op">in</span> <span class="type">boolean</span>: bfinal) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    putBit(compressedStream, ord(bfinal));
    putBits(compressedStream, 1, 2);       <span class="comment"># btype:  Fixed Huffman codes</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: endDeflateBlock (<span class="keywd">inout</span> <span class="type">deflateData</span>: deflateState,
    <span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    putLiteralOrLength(compressedStream, 256);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: closeDeflateBlock (<span class="keywd">inout</span> <span class="type">deflateData</span>: deflateState, <span class="op">in</span> <span class="type">string</span>: uncompressed,
    <span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    deflate(deflateState, uncompressed, length(uncompressed), compressedStream);
    endDeflateBlock(deflateState, compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compress a string with the DEFLATE algorithm.
 *  DEFLATE is a compression algorithm that uses a combination of
 *  the LZ77 algorithm and Huffman coding.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: deflateBlock (<span class="op">in</span> <span class="type">string</span>: uncompressed,
    <span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream, <span class="op">in</span> <span class="type">boolean</span>: bfinal) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">deflateData</span>: deflateState <span class="keywd">is</span> deflateData.value;
  <span class="keywd">begin</span>
    beginDeflateBlock(deflateState, compressedStream, bfinal);
    deflate(deflateState, uncompressed, length(uncompressed), compressedStream);
    endDeflateBlock(deflateState, compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: deflateBlock (<span class="keywd">inout</span> <span class="type">file</span>: inFile,
    <span class="keywd">inout</span> <span class="type">lsbOutputBitStream</span>: compressedStream, <span class="op">in</span> <span class="type">boolean</span>: bfinal) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">deflateData</span>: deflateState <span class="keywd">is</span> deflateData.value;
    <span class="keywd">var</span> <span class="type">string</span>: uncompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    beginDeflateBlock(deflateState, compressedStream, bfinal);
    uncompressed := gets(inFile, 4096);
    <span class="keywd">while</span> hasNext(inFile) <span class="keywd">do</span>
      deflate(deflateState, uncompressed, length(uncompressed) - 258, compressedStream);
      uncompressed &amp;:= gets(inFile, 4096);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    deflate(deflateState, uncompressed, length(uncompressed), compressedStream);
    endDeflateBlock(deflateState, compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: deflate (<span class="op">in</span> <span class="type">string</span>: uncompressed) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: compressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">lsbOutputBitStream</span>: compressedStream <span class="keywd">is</span> lsbOutputBitStream.value;
  <span class="keywd">begin</span>
    deflateBlock(uncompressed, compressedStream, TRUE);
    flush(compressedStream);
    compressed := getBytes(compressedStream);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
