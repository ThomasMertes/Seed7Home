<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  fileutil.s7i  File utility functions.                           *)</span>
<span class="comment">(*  Copyright (C) 2019, 2020  Thomas Mertes                         *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Copy a file from source to destination.
 *  The ''source'' file is copied to ''dest'' until end-of-file
 *  is reached.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: copyFile (<span class="keywd">inout</span> <span class="type">file</span>: source, <span class="keywd">inout</span> <span class="type">file</span>: dest) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
   <span class="keywd">begin</span>
    buffer := gets(source, 1000000);
    <span class="keywd">while</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      write(dest, buffer);
      buffer := gets(source, 1000000);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Copy at most ''numChars'' bytes from ''source'' to ''dest''.
 *  The ''source'' file is copied to ''dest'' until '''numChars'' bytes
 *  are copied or end-of-file is reached.
 *  @return the number of bytes copied (which is less or equal ''numChars'').
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: copyFile (<span class="keywd">inout</span> <span class="type">file</span>: source, <span class="keywd">inout</span> <span class="type">file</span>: dest,
    <span class="op">in</span> <span class="type">integer</span>: numChars) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: charsCopied <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    buffer := gets(source, min(numChars, 1000000));
    <span class="keywd">while</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      charsCopied +:= length(buffer);
      write(dest, buffer);
      buffer := gets(source, min(numChars - charsCopied, 1000000));
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Insert an area of ''numChars'' chars beginning at ''insertPos'' into ''aFile''.
 *  @exception RANGE_ERROR If ''insertPos'' is negative or zero, or
 *             if ''numChars'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: insertArea (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: insertPos, <span class="op">in</span> <span class="type">integer</span>: numChars) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: bufferSize <span class="keywd">is</span> 2 ** 20;
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: bytesMissing <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("insertArea: " &lt;&amp; insertPos &lt;&amp; ", " &lt;&amp; numChars);</span>
    <span class="keywd">if</span> insertPos &lt;= 0 <span class="op">or</span> numChars &lt; 0 <span class="keywd">then</span>
      raise RANGE_ERROR
    <span class="keywd">else</span>
      length := length(aFile);
      <span class="comment"># writeln("length: " &lt;&amp; length);</span>
      <span class="keywd">if</span> insertPos &lt;= length <span class="op">and</span> numChars &lt;> 0 <span class="keywd">then</span>
        pos := length - bufferSize + 1;
        <span class="keywd">while</span> pos > insertPos <span class="keywd">do</span>
          seek(aFile, pos);
          buffer := gets(aFile, bufferSize);
          seek(aFile, pos + numChars);
          write(aFile, buffer);
          pos -:= bufferSize;
        <span class="keywd">end</span> <span class="keywd">while</span>;
        bytesMissing := bufferSize - (insertPos - pos);
        seek(aFile, insertPos);
        buffer := gets(aFile, bytesMissing);
        seek(aFile, insertPos + numChars);
        write(aFile, buffer);
        <span class="comment"># Fill inserted area with spaces:</span>
        <span class="comment"># seek(aFile, insertPos);</span>
        <span class="comment"># write(aFile, " " mult numChars);</span>
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Delete an area of ''numChars'' chars beginning at ''deletePos'' from ''aFile''.
 *  @exception RANGE_ERROR If ''deletePos'' is negative or zero, or
 *             if ''numChars'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: deleteArea (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: deletePos, <span class="op">in</span> <span class="type">integer</span>: numChars) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: bufferSize <span class="keywd">is</span> 2 ** 20;
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("deleteArea: " &lt;&amp; deletePos &lt;&amp; ", " &lt;&amp; numChars);</span>
    <span class="keywd">if</span> deletePos &lt;= 0 <span class="op">or</span> numChars &lt; 0 <span class="keywd">then</span>
      raise RANGE_ERROR
    <span class="keywd">else</span>
      length := length(aFile);
      <span class="comment"># writeln("length: " &lt;&amp; length);</span>
      <span class="keywd">if</span> deletePos &lt;= length <span class="op">and</span> numChars &lt;> 0 <span class="keywd">then</span>
        pos := deletePos + numChars;
        <span class="keywd">while</span> pos &lt;= length <span class="keywd">do</span>
          seek(aFile, pos);
          buffer := gets(aFile, bufferSize);
          seek(aFile, pos - numChars);
          write(aFile, buffer);
          pos +:= bufferSize;
        <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">if</span> length - numChars >= pred(deletePos) <span class="keywd">then</span>
          truncate(aFile, length - numChars);
        <span class="keywd">else</span>
          truncate(aFile, pred(deletePos));
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
