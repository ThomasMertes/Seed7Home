<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  shell.s7i     Support for shell commands                        *)</span>
<span class="comment">(*  Copyright (C) 2009 - 2011  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/utf8.htm">utf8.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/scanstri.htm">scanstri.s7i</a>"</span>;


<span class="comment">(**
 *  Use the shell to execute a ''command'' with ''parameters''.
 *  Parameters which contain a space must be enclosed in double
 *  quotes (E.g.: shell("aCommand", "\"par 1\" par2"); ). The
 *  commands supported and the format of the ''parameters'' are not
 *  covered by the description of the ''shell'' function. Due to the
 *  usage of the operating system shell and external programs, it is
 *  hard to write portable programs, which use the ''shell'' function.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param parameters Space separated list of parameters for the
 *         ''command'', or "" if there are no parameters.
 *  @return the return code of the executed command or of the shell.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: shell (<span class="op">in</span> <span class="type">string</span>: command,
                           <span class="op">in</span> <span class="type">string</span>: parameters) <span class="keywd">is</span> action <span class="stri">"CMD_SHELL"</span>;


<span class="comment">(**
 *  Use the shell to execute a ''command'' with ''parameters''.
 *  Parameters which contain a space must be enclosed in double
 *  quotes (E.g.: shellCmd("aCommand", "\"par 1\" par2"); ). The
 *  commands supported and the format of the ''parameters'' are not
 *  covered by the description of the ''shellCmd'' function. Due to the
 *  usage of the operating system shell and external programs, it is
 *  hard to write portable programs, which use the ''shellCmd'' function.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param parameters Space separated list of parameters for the
 *         ''command'', or "" if there are no parameters.
 *  @exception FILE_ERROR The shell command returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: shellCmd (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">string</span>: parameters) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> shell(command, parameters) &lt;> 0 <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The function cmd_sh() is deprecated. Use shellCmd() instead.</span>
<span class="keywd">const</span> <span class="type">proc</span>: cmd_sh (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">string</span>: parameters) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ignore(shell(command, parameters));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Executes a command using the shell of the operating system.
 *  The command path must use the standard path representation.
 *  Spaces in the command must be preceded by a backslash
 *  (E.g.: shell("do\\ it"); ). Alternatively the command can
 *  be enclosed in double quotes (E.g.: shell("\"do it\""); ).
 *  Command parameters containing a space must be enclosed in double
 *  quotes (E.g.: shell("do_it \"par 1\" par2"); ). The commands
 *  supported and the format of the ''parameters'' are not covered
 *  by the description of the ''shell'' function. Due to the usage
 *  of the operating system shell and external programs, it is hard
 *  to write portable programs, which use the ''shell'' function.
 *  @param cmdAndParams Command to be executed and optional space
 *         separated list of parameters. Command and parameters
 *         must be space separated.
 *  @return the return code of the executed command or of the shell.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: shell (<span class="op">in</span> <span class="type">string</span>: cmdAndParams) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: returnCode <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: parameters <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    parameters := cmdAndParams;
    command := getCommandLineWord(parameters);
    returnCode := shell(command, parameters);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Executes a command using the shell of the operating system.
 *  The command path must use the standard path representation.
 *  Spaces in the command must be preceded by a backslash
 *  (E.g.: shellCmd("do\\ it"); ). Alternatively the command can
 *  be enclosed in double quotes (E.g.: shellCmd("\"do it\""); ).
 *  Command parameters containing a space must be enclosed in double
 *  quotes (E.g.: shellCmd("do_it \"par 1\" par2"); ). The commands
 *  supported and the format of the ''parameters'' are not covered
 *  by the description of the ''shellCmd'' function. Due to the usage
 *  of the operating system shell and external programs, it is hard
 *  to write portable programs, which use the ''shellCmd'' function.
 *  @param cmdAndParams Command to be executed and optional space
 *         separated list of parameters. Command and parameters
 *         must be space separated.
 *  @exception FILE_ERROR The shell command returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: shellCmd (<span class="op">in</span> <span class="type">string</span>: cmdAndParams) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> shell(cmdAndParams) &lt;> 0 <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The function cmd_sh() is deprecated. Use shellCmd() instead.</span>
<span class="keywd">const</span> <span class="type">proc</span>: cmd_sh (<span class="op">in</span> <span class="type">string</span>: cmdAndParams) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ignore(shell(cmdAndParams));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a [[string]], such that it can be used as shell parameter.
 *  The function adds escape characters or quotations to a string.
 *  The result is useable as parameter for the functions ''shell'',
 *  ''shellCmd'', ''popen'' and ''popen8''. Shell parameters must be
 *  escaped individually. Afterwards escaped parameters are
 *  joined to a space separated list of parameters.
 *  @return a string which can be used as shell parameter.
 *  @exception MEMORY_ERROR Not enough memory to convert 'stri'.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: shellEscape (<span class="op">in</span> <span class="type">string</span>: stri)   <span class="keywd">is</span> action <span class="stri">"CMD_SHELL_ESCAPE"</span>;


<span class="comment">(**
 *  Convert a standard path to the path of the operating system.
 *  The result must be escaped with ''shellEscape'' to be useable as
 *  parameter for the functions ''shell'', ''shellCmd'', ''popen'' and
 *  ''popen8''.
 *  @param standardPath Path in the standard path representation.
 *  @return a string containing an operating system path.
 *  @exception MEMORY_ERROR Not enough memory to convert ''standardPath''.
 *  @exception RANGE_ERROR ''standardPath'' is not representable as operating
 *             system path.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toOsPath (<span class="op">in</span> <span class="type">string</span>: standardPath)   <span class="keywd">is</span> action <span class="stri">"CMD_TO_OS_PATH"</span>;


<span class="comment">(**
 *  Convert a standard path such that it can be used as shell parameter.
 *  The result is useable as parameter for the functions ''shell'',
 *  ''shellCmd'', ''popen'' and ''popen8''. Shell parameters must be
 *  converted individually. Afterwards converted parameters are
 *  joined to a space separated list of parameters.
 *  @param standardPath Path in the standard path representation.
 *  @return a string containing an escaped operating system path.
 *  @exception MEMORY_ERROR Not enough memory to convert ''standardPath''.
 *  @exception RANGE_ERROR ''standardPath'' is not representable as operating
 *             system path.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toShellPath (<span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span>
  <span class="keywd">return</span> shellEscape(toOsPath(path));


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: shellParameters (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: paramList) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: parameters <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: parameter <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> parameter <span class="keywd">range</span> paramList <span class="keywd">do</span>
      <span class="keywd">if</span> parameters &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        parameters &amp;:= <span class="stri">" "</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      parameters &amp;:= shellEscape(parameter);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: shell (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: paramList) <span class="keywd">is</span>
  <span class="keywd">return</span> shell(command, shellParameters(paramList));


<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: popenClibFile (<span class="op">in</span> <span class="type">string</span>: command,
    <span class="op">in</span> <span class="type">string</span>: parameters, <span class="op">in</span> <span class="type">string</span>: mode)       <span class="keywd">is</span> action <span class="stri">"FIL_POPEN"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: pclose (<span class="op">in</span> <span class="type">clib_file</span>: fileToClose)    <span class="keywd">is</span> action <span class="stri">"FIL_PCLOSE"</span>;


<span class="comment">(**
 *  [[file|File]] implementation type for operating system pipes.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: popenFile <span class="keywd">is</span> <span class="keywd">sub</span> external_file <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(popenFile, file);


<span class="comment">(**
 *  Open a pipe to a shell ''command'' with ''parameters''.
 *  The command reads, respectively writes with Latin-1 encoding.
 *  Parameters which contain a space must be enclosed in double
 *  quotes (E.g.: popen("aCommand", "\"par 1\" par2", "r"); ). The
 *  function [[#shellEscape(in_string)|shellEscape]] converts a
 *  [[string]], such that it can be used as parameter for ''popen''
 *  (E.g.: popen("aCmd", shellEscape("par 1") &amp; " par2", "r"); ). The
 *  commands supported and the format of the ''parameters'' are not
 *  covered by the description of the ''popen'' function. Due to the
 *  usage of the operating system shell and external programs, it is
 *  hard to write portable programs, which use the ''popen'' function.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param parameters Space separated list of parameters for
 *         the ''command'', or "" if there are no parameters.
 *  @param mode A pipe can be opened with the binary modes
 *         "r" (read) and "w" (write) or with the text modes
 *         "rt" (read) and "wt" (write).
 *  @return the pipe file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception RANGE_ERROR ''command'' is not representable as
 *             operating system path, or ''mode'' is illegal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: popen (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">string</span>: parameters,
    <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newPipe <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: open_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">popenFile</span>: new_file <span class="keywd">is</span> popenFile.value;
  <span class="keywd">begin</span>
    open_file := popenClibFile(command, parameters, mode);
    <span class="keywd">if</span> open_file &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_file.ext_file := open_file;
      new_file.name := command;
      newPipe := toInterface(new_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a pipe to a shell command.
 *  The command reads, respectively writes with Latin-1 encoding.
 *  Spaces in the command must be preceded by a backslash
 *  (E.g.: popen("do\\ it"); ). Alternatively the command can
 *  be enclosed in double quotes (E.g.: popen("\"do it\""); ).
 *  Command parameters containing a space must be enclosed in
 *  double quotes (E.g.: popen("do_it \"par 1\" par2"); ).
 *  The commands supported and the format of the ''parameters''
 *  are not covered by the description of the ''popen'' function.
 *  Due to the usage of the operating system shell and external
 *  programs, it is hard to write portable programs, which use the
 *  ''popen'' function.
 *  @param cmdAndParams Command to be executed and optional space
 *         separated list of parameters. Command and parameters
 *         must be space separated.
 *  @param mode A pipe can be opened with the binary modes
 *         "r" (read) and "w" (write) or with the text modes
 *         "rt" (read) and "wt" (write).
 *  @return the pipe file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception RANGE_ERROR The command is not representable as
 *             operating system path, or ''mode'' is illegal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: popen (<span class="op">in</span> <span class="type">string</span>: cmdAndParams, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newPipe <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: parameters <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    parameters := cmdAndParams;
    command := getCommandLineWord(parameters);
    newPipe := popen(command, parameters, mode);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a pipe to a shell ''command'' with a ''paramList''.
 *  The command reads, respectively writes with Latin-1 encoding.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param paramList Array of argument strings passed to the command.
 *         It is not necessary to quote the parameters, since this
 *         function takes care of that.
 *  @param mode A pipe can be opened with the binary modes
 *         "r" (read) and "w" (write) or with the text modes
 *         "rt" (read) and "wt" (write).
 *  @return the pipe file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception RANGE_ERROR ''command'' is not representable as
 *             operating system path, or ''mode'' is illegal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: popen (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: paramList,
    <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newPipe <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: parameter <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: parameters <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> parameter <span class="keywd">range</span> paramList <span class="keywd">do</span>
      <span class="keywd">if</span> parameters &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        parameters &amp;:= <span class="stri">" "</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      parameters &amp;:= shellEscape(parameter);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    newPipe := popen(command, parameters, mode);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Wait for the process associated with aPipe to terminate.
 *  @param aFile Pipe to be closed (created by 'popen').
 *  @exception FILE_ERROR A system function returned an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="op">in</span> <span class="type">popenFile</span>: aPipe) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    pclose(aPipe.ext_file);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  [[file|File]] implementation type for UTF-8 encoded operating system pipes.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: popen8File <span class="keywd">is</span> <span class="keywd">sub</span> utf8File <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(popen8File, file);


<span class="comment">(**
 *  Open an UTF-8 encoded pipe to a shell ''command'' with ''parameters''.
 *  The command reads, respectively writes with UTF-8 encoding.
 *  Parameters which contain a space must be enclosed in double
 *  quotes (E.g.: popen8("aCommand", "\"par 1\" par2", "r"); ). The
 *  function [[#shellEscape(in_string)|shellEscape]] converts a
 *  [[string]], such that it can be used as parameter for ''popen''
 *  (E.g.: popen8("aCmd", shellEscape("par 1") &amp; " par2", "r"); ). The
 *  commands supported and the format of the ''parameters'' are not
 *  covered by the description of the ''popen8'' function. Due to the
 *  usage of the operating system shell and external programs, it is
 *  hard to write portable programs, which use the ''popen8'' function.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param parameters Space separated list of parameters for
 *         the ''command'', or "" if there are no parameters.
 *  @param mode A pipe can be opened with the binary modes
 *         "r" (read) and "w" (write) or with the text modes
 *         "rt" (read) and "wt" (write).
 *  @return the pipe file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception RANGE_ERROR ''command'' is not representable as
 *             operating system path, or ''mode'' is illegal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: popen8 (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">string</span>: parameters,
    <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newPipe <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: open_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">popen8File</span>: new_file <span class="keywd">is</span> popen8File.value;
  <span class="keywd">begin</span>
    open_file := popenClibFile(command, parameters, mode);
    <span class="keywd">if</span> open_file &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      new_file.ext_file := open_file;
      new_file.name := command;
      newPipe := toInterface(new_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open an UTF-8 encoded pipe to a shell command.
 *  The command reads, respectively writes with UTF-8 encoding.
 *  Spaces in the command must be preceded by a backslash
 *  (E.g.: popen8("do\\ it"); ). Alternatively the command can
 *  be enclosed in double quotes (E.g.: popen8("\"do it\""); ).
 *  Command parameters containing a space must be enclosed in
 *  double quotes (E.g.: popen8("do_it \"par 1\" par2"); ).
 *  The commands supported and the format of the ''parameters''
 *  are not covered by the description of the ''popen8'' function.
 *  Due to the usage of the operating system shell and external
 *  programs, it is hard to write portable programs, which use the
 *  ''popen8'' function.
 *  @param cmdAndParams Command to be executed and optional space
 *         separated list of parameters. Command and parameters
 *         must be space separated.
 *  @param mode A pipe can be opened with the binary modes
 *         "r" (read) and "w" (write) or with the text modes
 *         "rt" (read) and "wt" (write).
 *  @return the pipe file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception RANGE_ERROR The command is not representable as
 *             operating system path, or ''mode'' is illegal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: popen8 (<span class="op">in</span> <span class="type">string</span>: cmdAndParams, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newPipe <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: parameters <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    parameters := cmdAndParams;
    command := getCommandLineWord(parameters);
    newPipe := popen8(command, parameters, mode);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open an UTF-8 encoded pipe to a shell ''command'' with a ''paramList''.
 *  The command reads, respectively writes with UTF-8 encoding.
 *  @param command Name of the command to be executed. A path must
 *         use the standard path representation.
 *  @param paramList Array of argument strings passed to the command.
 *         It is not necessary to quote the parameters, since this
 *         function takes care of that.
 *  @param mode A pipe can be opened with the binary modes
 *         "r" (read) and "w" (write) or with the text modes
 *         "rt" (read) and "wt" (write).
 *  @return the pipe file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception RANGE_ERROR ''command'' is not representable as
 *             operating system path, or ''mode'' is illegal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: popen8 (<span class="op">in</span> <span class="type">string</span>: command, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: paramList,
    <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newPipe <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: parameter <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: parameters <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> parameter <span class="keywd">range</span> paramList <span class="keywd">do</span>
      <span class="keywd">if</span> parameters &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        parameters &amp;:= <span class="stri">" "</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      parameters &amp;:= shellEscape(parameter);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    newPipe := popen8(command, parameters, mode);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Wait for the process associated with aPipe to terminate.
 *  @param aPipe UTF-8 encoded pipe to be closed (created by 'popen8').
 *  @exception FILE_ERROR A system function returned an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="op">in</span> <span class="type">popen8File</span>: aPipe) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    pclose(aPipe.ext_file);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
