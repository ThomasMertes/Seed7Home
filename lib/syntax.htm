<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  syntax.s7i    Syntax definition of the standard Seed7 library   *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2005, 2008, 2014, 2017  Thomas Mertes      *)</span>
<span class="comment">(*                2020 - 2022, 2024  Thomas Mertes                  *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">const</span> $ <span class="type">type</span>: type   <span class="keywd">is</span> $ newtype;

$ <span class="keywd">const</span> <span class="type">type</span>: void     <span class="keywd">is</span> $ newtype;
$ <span class="keywd">const</span> <span class="type">type</span>: proc     <span class="keywd">is</span> $ <span class="type">func</span> void;
$ <span class="keywd">const</span> <span class="type">void</span>: empty    <span class="keywd">is</span> $ enumlit;

$ <span class="keywd">const</span> <span class="type">type</span>: expr     <span class="keywd">is</span> $ newtype;
$ <span class="keywd">const</span> <span class="type">type</span>: object   <span class="keywd">is</span> $ newtype;
$ <span class="keywd">const</span> <span class="type">type</span>: string   <span class="keywd">is</span> $ subtype object;
$ <span class="keywd">const</span> <span class="type">type</span>: ACTION   <span class="keywd">is</span> $ newtype;
$ <span class="keywd">const</span> <span class="type">type</span>: f_param  <span class="keywd">is</span> $ newtype;

$ <span class="keywd">system</span> <span class="stri">"expr"</span>         <span class="keywd">is</span> expr;
$ <span class="keywd">system</span> <span class="stri">"string"</span>       <span class="keywd">is</span> string;
$ <span class="keywd">system</span> <span class="stri">"empty"</span>        <span class="keywd">is</span> empty;
<span class="comment"># $ system "true"         is TRUE;</span>
<span class="comment"># $ system "false"        is FALSE;</span>
<span class="comment"># $ system "integer"      is integer;</span>
<span class="comment"># $ system "char"         is char;</span>
<span class="comment"># $ system "string"       is string;</span>
$ <span class="keywd">system</span> <span class="stri">"proc"</span>         <span class="keywd">is</span> proc;
$ <span class="keywd">system</span> <span class="stri">"assign"</span>       <span class="keywd">is</span> := ;
$ <span class="keywd">system</span> <span class="stri">"create"</span>       <span class="keywd">is</span> ::= ;
$ <span class="keywd">system</span> <span class="stri">"destroy"</span>      <span class="keywd">is</span> destroy;
$ <span class="keywd">system</span> <span class="stri">"ord"</span>          <span class="keywd">is</span> ord;
$ <span class="keywd">system</span> <span class="stri">"in"</span>           <span class="keywd">is</span> <span class="op">in</span>;
$ <span class="keywd">system</span> <span class="stri">"dot"</span>          <span class="keywd">is</span> . ;
$ <span class="keywd">system</span> <span class="stri">"value"</span>        <span class="keywd">is</span> value;
$ <span class="keywd">system</span> <span class="stri">"prot_outfile"</span> <span class="keywd">is</span> PROT_OUTFILE;
$ <span class="keywd">system</span> <span class="stri">"flush"</span>        <span class="keywd">is</span> flush;
$ <span class="keywd">system</span> <span class="stri">"write"</span>        <span class="keywd">is</span> write;
$ <span class="keywd">system</span> <span class="stri">"writeln"</span>      <span class="keywd">is</span> writeln;
<span class="comment"># $ system "main"         is main;</span>

<span class="comment">(* OPERATORS *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . { . }                       <span class="keywd">is</span>  ->  1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . { .(). }                    <span class="keywd">is</span>  ->  1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . { .(). .. .(). }            <span class="keywd">is</span>  ->  1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">conv</span>.()                   <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">varConv</span>.()                <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().cast.()                   <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().value.()                  <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">parse</span>.()                  <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .getfunc.(expr)               <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .getobj.(expr)                <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . [ . ] .()                   <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . [ .(). ] .()                <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . [ .(). .. .(). ]            <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . [ .(). len .(). ]           <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . [ .(). : .(). ]             <span class="keywd">is</span> &lt;-   1;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). . .()                    <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ . ] .()                <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ .(). ]                 <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ .(). default .(). ]    <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ .(). .. . ]            <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ . .. .(). ]            <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ .(). .. .(). ]         <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ .(). len .(). ]        <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). [ .(). fixLen .(). ]     <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ^                        <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). -> .()                   <span class="keywd">is</span>  ->  2;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . &amp; .()                       <span class="keywd">is</span>  ->  3;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ** .()                   <span class="keywd">is</span> &lt;-   4;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ! .()                    <span class="keywd">is</span>  ->  4;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . ! .()                       <span class="keywd">is</span>  ->  4;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . + .()                       <span class="keywd">is</span> &lt;-   5;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . - .()                       <span class="keywd">is</span> &lt;-   5;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . ~ .()                       <span class="keywd">is</span> &lt;-   5;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . conj .()                    <span class="keywd">is</span> &lt;-   5;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). * .()                    <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). / .()                    <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">div</span>.()                    <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">rem</span>.()                    <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().divRem.()                 <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">mdiv</span>.()                   <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">mod</span>.()                    <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &lt;&lt; .()                   <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). >> .()                   <span class="keywd">is</span>  ->  6;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). + .()                    <span class="keywd">is</span>  ->  7;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). - .()                    <span class="keywd">is</span>  ->  7;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">times</span>.()                  <span class="keywd">is</span> &lt;-   8;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">mult</span>.()                   <span class="keywd">is</span>  ->  8;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().find.()                   <span class="keywd">is</span>  ->  8;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &amp; .()                    <span class="keywd">is</span>  -> 10;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). >&lt; .()                   <span class="keywd">is</span>  -> 11;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). | .()                    <span class="keywd">is</span>  -> 11;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). = .()                    <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &lt;> .()                   <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). > .()                    <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). >= .()                   <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &lt; .()                    <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &lt;= .()                   <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">in</span>.()                     <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">not</span>.<span class="op">in</span>.()                 <span class="keywd">is</span> &lt;-> 12;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="op">not</span>.()                       <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .subtype.()                   <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .subrange.(). .. .()          <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .forward_ptr.(expr)           <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .ptr.()                       <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .varptr.()                    <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .tuple.()                     <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">set</span>.<span class="keywd">of</span>.()                    <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">array</span><span class="type">.</span>()                     <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">array</span><span class="type">.</span> [ .(). ] .()          <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">array</span><span class="type">.</span> [ .(). .. . ] .()     <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">array</span><span class="type">.</span> [ .(). .. .(). ] .()  <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">hash</span>. [ .(). ] .()           <span class="keywd">is</span> &lt;-  13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.<span class="keywd">enum</span>.(expr).<span class="keywd">end</span>.<span class="keywd">enum</span>     <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.<span class="keywd">enum</span>.<span class="keywd">end</span>.<span class="keywd">enum</span>            <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.<span class="keywd">interface</span>                <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .sub.().<span class="keywd">interface</span>             <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.struct2.().<span class="keywd">end</span>.<span class="keywd">struct</span>    <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.<span class="keywd">struct</span>.().<span class="keywd">end</span>.<span class="keywd">struct</span>     <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.<span class="keywd">struct</span>.<span class="keywd">end</span>.<span class="keywd">struct</span>        <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.().<span class="keywd">struct</span>.().<span class="keywd">end</span>.<span class="keywd">struct</span>  <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.().<span class="keywd">struct</span>.<span class="keywd">end</span>.<span class="keywd">struct</span>     <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .sub.().<span class="keywd">struct</span>.().<span class="keywd">end</span>.<span class="keywd">struct</span>  <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .sub.().<span class="keywd">struct</span>.<span class="keywd">end</span>.<span class="keywd">struct</span>     <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.class.().<span class="keywd">end</span>.class       <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.class.<span class="keywd">end</span>.class          <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.().class.().<span class="keywd">end</span>.class    <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .new.().class.<span class="keywd">end</span>.class       <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .sub.().class.().<span class="keywd">end</span>.class    <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .sub.().class.<span class="keywd">end</span>.class       <span class="keywd">is</span>  -> 13;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">and</span>.()                    <span class="keywd">is</span>  -> 14;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">or</span>.()                     <span class="keywd">is</span>  -> 15;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="keywd">val</span>.()                    <span class="keywd">is</span>  -> 16;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().radix.()                  <span class="keywd">is</span>  -> 16;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().RADIX.()                  <span class="keywd">is</span>  -> 16;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">digits</span>.()                 <span class="keywd">is</span>  -> 16;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">sci</span>.()                    <span class="keywd">is</span>  -> 16;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ? .(). : .()             <span class="keywd">is</span>  &lt;- 16;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">exp</span>.()                    <span class="keywd">is</span>  -> 17;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">lpad</span>.()                   <span class="keywd">is</span>  -> 17;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">rpad</span>.()                   <span class="keywd">is</span>  -> 17;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="op">lpad0</span>.()                  <span class="keywd">is</span>  -> 17;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &lt;&amp; .()                   <span class="keywd">is</span>  -> 18;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). := .()                   <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). +:= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). -:= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). *:= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). /:= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &lt;&lt;:= .()                 <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). >>:= .()                 <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). &amp;:= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). >&lt;:= .()                 <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). |:= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). @:= . [ .(). ] .()       <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ::= .()                  <span class="keywd">is</span> &lt;-> 20;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). :- .()                   <span class="keywd">is</span> &lt;-> 20;

<span class="comment">(* ASSOCIATIVITY *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . -> .()     <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . &lt;- .()     <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . &lt;-> .()    <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: . ->&lt;- .()   <span class="keywd">is</span>  -> 25;

<span class="comment">(* STATEMENTS *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">while</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">while</span>                         <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">while</span>.().<span class="keywd">do</span>.<span class="keywd">end</span>.<span class="keywd">while</span>                            <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">repeat</span>.().<span class="keywd">until</span>.()                               <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">repeat</span>.<span class="keywd">until</span>.()                                  <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">to</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>              <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">downto</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>          <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">to</span>.().<span class="keywd">until</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>     <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">downto</span>.().<span class="keywd">until</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span> <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">to</span>.().step.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>      <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">downto</span>.().step.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>  <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>                    <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">range</span>.().<span class="keywd">until</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>           <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">key</span>.().<span class="keywd">range</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>             <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">key</span>.().<span class="keywd">range</span>.().<span class="keywd">until</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>    <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.<span class="keywd">key</span>.().<span class="keywd">range</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>                <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.<span class="keywd">key</span>.().<span class="keywd">range</span>.().<span class="keywd">until</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>       <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">for</span>.().<span class="keywd">do</span>.().<span class="keywd">end</span>.<span class="keywd">for</span>                             <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">if</span>.().<span class="keywd">then</span>.<span class="keywd">end</span>.<span class="keywd">if</span>                                <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">if</span>.().<span class="keywd">then</span>.().<span class="keywd">end</span>.<span class="keywd">if</span>                             <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">if</span>.().<span class="keywd">then</span>.().().<span class="keywd">end</span>.<span class="keywd">if</span>                          <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">case</span>.().<span class="keywd">of</span>.().<span class="keywd">end</span>.<span class="keywd">case</span>                           <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">case</span>.().<span class="keywd">of</span>.().<span class="keywd">otherwise</span>. : .().<span class="keywd">end</span>.<span class="keywd">case</span>          <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">case</span>.().<span class="keywd">of</span>.<span class="keywd">otherwise</span>. : .().<span class="keywd">end</span>.<span class="keywd">case</span>             <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">case</span>.().<span class="keywd">of</span>.<span class="keywd">end</span>.<span class="keywd">case</span>                              <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">block</span>.().exception.().<span class="keywd">end</span>.<span class="keywd">block</span>                  <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">block</span>.().exception.().<span class="keywd">otherwise</span>. : .().<span class="keywd">end</span>.<span class="keywd">block</span> <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">block</span>.().exception.<span class="keywd">otherwise</span>. : .().<span class="keywd">end</span>.<span class="keywd">block</span>    <span class="keywd">is</span>  -> 25;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">block</span>.().exception.<span class="keywd">end</span>.<span class="keywd">block</span>                     <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .global.().<span class="keywd">end</span>.global                             <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .raise.()                                         <span class="keywd">is</span>  -> 25;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">func</span>.()      <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">varfunc</span>.()   <span class="keywd">is</span> &lt;-  30;

<span class="comment">(* PROCEDURE BODY *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">func</span>.<span class="keywd">local</span>.().<span class="keywd">begin</span>.(expr).<span class="keywd">end</span>.<span class="type">func</span>                                <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">func</span>.<span class="keywd">begin</span>.(expr).<span class="keywd">end</span>.<span class="type">func</span>                                         <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">func</span>.<span class="keywd">begin</span>.<span class="keywd">end</span>.<span class="type">func</span>                                                <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">func</span>.result.<span class="keywd">var</span>.(). : .(expr).<span class="keywd">is</span>.().<span class="keywd">begin</span>.(expr).<span class="keywd">end</span>.<span class="type">func</span>          <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">func</span>.result.<span class="keywd">var</span>.(). : .(expr).<span class="keywd">is</span>.().<span class="keywd">local</span>.().<span class="keywd">begin</span>.(expr).<span class="keywd">end</span>.<span class="type">func</span> <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="type">varfunc</span>.<span class="keywd">return</span>.().().<span class="keywd">end</span>.<span class="type">varfunc</span>                                   <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">return</span>.()                                                          <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">return</span>.<span class="keywd">var</span>.()                                                      <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="keywd">return</span>.()                                                       <span class="keywd">is</span> &lt;-  30;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .().<span class="keywd">return</span>.<span class="keywd">var</span>.()                                                   <span class="keywd">is</span> &lt;-  30;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: .action.()                      <span class="keywd">is</span>  -> 30;

$ <span class="keywd">syntax</span> <span class="type">expr</span>: . $ .()                         <span class="keywd">is</span>  -> 35;

<span class="comment">(* PARAMETER *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">val</span>.().<span class="keywd">param</span>                   <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">val</span>.(). : .(expr)              <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="op">in</span>.().<span class="keywd">param</span>                    <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="op">in</span>.(). : .(expr)               <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="op">in</span>.<span class="keywd">var</span>.().<span class="keywd">param</span>                <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="op">in</span>.<span class="keywd">var</span>.(). : .(expr)           <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">inout</span>.().<span class="keywd">param</span>                 <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">inout</span>.(). : .(expr)            <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">ref</span>.().<span class="keywd">param</span>                   <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">ref</span>.(). : .(expr)              <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .symb.()                        <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .attr.()                        <span class="keywd">is</span> &lt;-  40;

<span class="comment">(* DECLARATORS *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">syntax</span>.(). : .().<span class="keywd">is</span>.(expr)     <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">const</span>.(). : .(expr).<span class="keywd">is</span>.(expr)  <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">const</span>.(). : .(expr).<span class="keywd">is</span>.<span class="keywd">forward</span> <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">var</span>.(). : .(expr).<span class="keywd">is</span>.(expr)    <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">var</span>.(). : .(expr).<span class="keywd">is</span>.default   <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">var</span>.(). : .(expr).<span class="keywd">is</span>.<span class="keywd">forward</span>   <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">include</span>.()                     <span class="keywd">is</span>  -> 40;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .elem.(). : .(expr).<span class="keywd">is</span>.(expr)   <span class="keywd">is</span>  -> 40;

<span class="comment">(* system VARIABLES *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">system</span>.().<span class="keywd">is</span>.()                <span class="keywd">is</span>  -> 40;

<span class="comment">(* SEMICOLON *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ; .()                      <span class="keywd">is</span> &lt;-  50;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). ;                          <span class="keywd">is</span> &lt;-  50[1];

<span class="comment">(* WHEN *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">when</span>.(). : .().()              <span class="keywd">is</span> &lt;-  60;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">when</span>.(). : .()                 <span class="keywd">is</span> &lt;-  60;

<span class="comment">(* ELSIF *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">elsif</span>.().<span class="keywd">then</span>.()               <span class="keywd">is</span> &lt;-  60;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">elsif</span>.().<span class="keywd">then</span>.().()            <span class="keywd">is</span> &lt;-  60;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .<span class="keywd">else</span>.()                        <span class="keywd">is</span> &lt;-  60;

<span class="comment">(* EXCEPTION *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .catch.(). : .().()             <span class="keywd">is</span> &lt;-  60;
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .catch.(). : .()                <span class="keywd">is</span> &lt;-  60;

<span class="comment">(* COMMA *)</span>
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .(). , .()                      <span class="keywd">is</span>  -> 100;
<span class="comment"># $ syntax expr: . )                             is &lt;-  100;</span>
</pre>
</body>
</html>
