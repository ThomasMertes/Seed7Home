<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  inifile.s7i   Read key value pairs from an INI file             *)</span>
<span class="comment">(*  Copyright (C) 2009  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/scanfile.htm">scanfile.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">type</span>: iniKeyValueType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">string</span>;
<span class="keywd">const</span> <span class="type">type</span>: iniDataType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">iniKeyValueType</span>;


<span class="comment">(**
 *  Returns a property value whose section and property name were given.
 *  Returns "", if the section or the property name do not exist.
 *  @return a property value or "", if section or property don't exist.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getParamValue (<span class="op">in</span> <span class="type">iniDataType</span>: iniData,
    <span class="op">in</span> <span class="type">string</span>: sectionName, <span class="op">in</span> <span class="type">string</span>: propertyName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: propertyValue <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> sectionName <span class="op">in</span> iniData <span class="keywd">then</span>
      <span class="keywd">if</span> propertyName <span class="op">in</span> iniData[sectionName] <span class="keywd">then</span>
        propertyValue := iniData[sectionName][propertyName];
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: getKeyValuePair (<span class="keywd">inout</span> <span class="type">file</span>: inFile,
    <span class="keywd">inout</span> <span class="type">string</span>: propertyName, <span class="keywd">inout</span> <span class="type">string</span>: propertyValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    skipWhiteSpace(inFile);
    propertyName := getName(inFile);
    skipWhiteSpace(inFile);
    <span class="keywd">if</span> inFile.bufferChar = <span class="stri">'='</span> <span class="keywd">then</span>
      inFile.bufferChar := getc(inFile);
      propertyValue := getLine(inFile);
    <span class="keywd">else</span>
      propertyValue := <span class="stri">""</span>;
      skipLine(inFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getIniSection (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: symbol <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      inFile.bufferChar := getc(inFile);
    <span class="keywd">until</span> inFile.bufferChar <span class="op">not</span> <span class="op">in</span> space_or_tab;
    <span class="keywd">while</span> inFile.bufferChar &lt;> <span class="stri">']'</span> <span class="op">and</span> inFile.bufferChar &lt;> <span class="stri">'\n'</span> <span class="op">and</span> inFile.bufferChar &lt;> EOF <span class="keywd">do</span>
      symbol &amp;:= str(inFile.bufferChar);
      inFile.bufferChar := getc(inFile);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    symbol := trim(symbol);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads from the open INI file 'inFile' and returns its iniDataType value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">iniDataType</span>: readIniFile (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">iniDataType</span>: iniData <span class="keywd">is</span> iniDataType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: sectionName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: propertyName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: propertyValue <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    inFile.bufferChar := getc(inFile);
    <span class="keywd">while</span> inFile.bufferChar &lt;> EOF <span class="keywd">do</span>
      skipWhiteSpace(inFile);
      <span class="keywd">if</span> inFile.bufferChar = <span class="stri">'['</span> <span class="keywd">then</span>
        sectionName := getIniSection(inFile);
        skipLine(inFile);
      <span class="keywd">elsif</span> inFile.bufferChar = <span class="stri">';'</span> <span class="keywd">then</span>
        skipLineComment(inFile);
      <span class="keywd">elsif</span> inFile.bufferChar &lt;> EOF <span class="keywd">then</span>
        getKeyValuePair(inFile, propertyName, propertyValue);
        <span class="keywd">if</span> sectionName <span class="op">not</span> <span class="op">in</span> iniData <span class="keywd">then</span>
          iniData @:= [sectionName] iniKeyValueType.value;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        iniData[sectionName] @:= [propertyName] propertyValue;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads an INI file with the given name and returns its iniDataType value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">iniDataType</span>: readIniFile (<span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">iniDataType</span>: iniData <span class="keywd">is</span> iniDataType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: inFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    inFile := open(fileName, <span class="stri">"r"</span>);
    <span class="keywd">if</span> inFile &lt;> STD_NULL <span class="keywd">then</span>
      iniData := readIniFile(inFile);
      close(inFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
