<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  exif.s7i      Support for the exchangeable image file format    *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pixelimage.htm">pixelimage.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">string</span>: EXIF_MAGIC <span class="keywd">is</span> <span class="stri">"Exif"</span>;
<span class="keywd">const</span> <span class="type">string</span>: EXIF_TIFF_MAGIC_LE <span class="keywd">is</span> <span class="stri">"II\42;\0;"</span>;
<span class="keywd">const</span> <span class="type">string</span>: EXIF_TIFF_MAGIC_BE <span class="keywd">is</span> <span class="stri">"MM\0;\42;"</span>;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_THUMBNAIL_WIDTH   <span class="keywd">is</span> 16#0100;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_IMAGE_DESCRIPTION <span class="keywd">is</span> 16#010e;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_MANUFACTURER      <span class="keywd">is</span> 16#010f;  <span class="comment"># Manufacturer of digicam</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_MODEL             <span class="keywd">is</span> 16#0110;  <span class="comment"># Model number of digicam</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION       <span class="keywd">is</span> 16#0112;  <span class="comment"># Image orientation defined by the EXIF_ORIENTATION_... constants</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_X_RESOLUTION      <span class="keywd">is</span> 16#011a;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_Y_RESOLUTION      <span class="keywd">is</span> 16#011b;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_RESOLUTION_UNIT   <span class="keywd">is</span> 16#0128;  <span class="comment"># Unit of X and Y resolution (1=no-unit, 2=inch, 3=centimeter)</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_SOFTWARE          <span class="keywd">is</span> 16#0131;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_DATE_TIME         <span class="keywd">is</span> 16#0132;  <span class="comment"># Modification date/time of image (format: "YYYY:MM:DD HH:MM:SS\0;", total 20bytes)</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_YCBCR_POSITIONING <span class="keywd">is</span> 16#0213;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_OFFSET            <span class="keywd">is</span> 16#8769;

<span class="keywd">const</span> <span class="type">integer</span>: EXIF_UNSIGNED_BYTE_TYPE     <span class="keywd">is</span>  1;  <span class="comment"># Size 1</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ASCII_STRINGS_TYPE     <span class="keywd">is</span>  2;  <span class="comment"># Size 1</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_UNSIGNED_SHORT_TYPE    <span class="keywd">is</span>  3;  <span class="comment"># Size 2</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_UNSIGNED_LONG_TYPE     <span class="keywd">is</span>  4;  <span class="comment"># Size 4</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_UNSIGNED_RATIONAL_TYPE <span class="keywd">is</span>  5;  <span class="comment"># Size 8</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_SIGNED_BYTE_TYPE       <span class="keywd">is</span>  6;  <span class="comment"># Size 1</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_UNDEFINED_TYPE         <span class="keywd">is</span>  7;  <span class="comment"># Size 1</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_SIGNED_SHORT_TYPE      <span class="keywd">is</span>  8;  <span class="comment"># Size 2</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_SIGNED_LONG_TYPE       <span class="keywd">is</span>  9;  <span class="comment"># Size 4</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_SIGNED_RATIONAL_TYPE   <span class="keywd">is</span> 10;  <span class="comment"># Size 8</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_SINGLE_FLOAT_TYPE      <span class="keywd">is</span> 11;  <span class="comment"># Size 4</span>
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_DOUBLE_FLOAT_TYPE      <span class="keywd">is</span> 12;  <span class="comment"># Size 8</span>

<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_DEFAULT           <span class="keywd">is</span> 0;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_NORMAL            <span class="keywd">is</span> 1;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_MIRROR_HORIZONTAL <span class="keywd">is</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_ROTATE_180        <span class="keywd">is</span> 3;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_MIRROR_VERTICAL   <span class="keywd">is</span> 4;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_MIRROR_ROTATE_90  <span class="keywd">is</span> 5;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_ROTATE_90         <span class="keywd">is</span> 6;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_MIRROR_ROTATE_270 <span class="keywd">is</span> 7;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_ROTATE_270        <span class="keywd">is</span> 8;
<span class="keywd">const</span> <span class="type">integer</span>: EXIF_ORIENTATION_UNDEFINED         <span class="keywd">is</span> 9;


<span class="keywd">const</span> <span class="type">type</span>: exifDataType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: orientation <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Read Exif data from the given [[string]] ''stri''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readExifData (<span class="op">in</span> <span class="type">string</span>: stri, <span class="keywd">inout</span> <span class="type">exifDataType</span>: exifData) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: offsetToFirstIfd <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: numberOfDirectoryEntries <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: tagNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: format <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: numberOfComponents <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri[7 fixLen 4] = EXIF_TIFF_MAGIC_LE <span class="keywd">then</span>
      offsetToFirstIfd := bytes2Int(stri[11 fixLen 4], UNSIGNED, LE);
      pos := 7 + offsetToFirstIfd;
      numberOfDirectoryEntries := bytes2Int(stri[pos fixLen 2], UNSIGNED, LE);
      pos +:= 2;
      <span class="keywd">while</span> numberOfDirectoryEntries > 0 <span class="keywd">do</span>
        tagNumber          :=  bytes2Int(stri[pos     fixLen 2], UNSIGNED, LE);
        format             :=  bytes2Int(stri[pos + 2 fixLen 2], UNSIGNED, LE);
        numberOfComponents :=  bytes2Int(stri[pos + 4 fixLen 4], UNSIGNED, LE);
        <span class="comment"># Offset or value:               stri[pos + 8 fixLen 4]</span>
        <span class="comment"># writeln("LE: " &lt;&amp; tagNumber radix 16 lpad0 4 &lt;&amp; " " &lt;&amp; format &lt;&amp; " " &lt;&amp;</span>
        <span class="comment">#     numberOfComponents &lt;&amp; " " &lt;&amp; literal(stri[pos + 8 fixLen 4]));</span>
        <span class="keywd">if</span> tagNumber = EXIF_ORIENTATION <span class="op">and</span> format = EXIF_UNSIGNED_SHORT_TYPE <span class="keywd">then</span>
          exifData.orientation := bytes2Int(stri[pos + 8 fixLen 2], UNSIGNED, LE);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        pos +:= 12;
        decr(numberOfDirectoryEntries);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">elsif</span> stri[7 fixLen 4] = EXIF_TIFF_MAGIC_BE <span class="keywd">then</span>
      offsetToFirstIfd := bytes2Int(stri[11 fixLen 4], UNSIGNED, BE);
      pos := 7 + offsetToFirstIfd;
      numberOfDirectoryEntries := bytes2Int(stri[pos fixLen 2], UNSIGNED, BE);
      pos +:= 2;
      <span class="keywd">while</span> numberOfDirectoryEntries > 0 <span class="keywd">do</span>
        tagNumber          :=  bytes2Int(stri[pos     fixLen 2], UNSIGNED, BE);
        format             :=  bytes2Int(stri[pos + 2 fixLen 2], UNSIGNED, BE);
        numberOfComponents :=  bytes2Int(stri[pos + 4 fixLen 4], UNSIGNED, BE);
        <span class="comment"># Offset or value:               stri[pos + 8 fixLen 4]</span>
        <span class="comment"># writeln("BE: " &lt;&amp; tagNumber radix 16 lpad0 4 &lt;&amp; " " &lt;&amp; format &lt;&amp; " " &lt;&amp;</span>
        <span class="comment">#     numberOfComponents &lt;&amp; " " &lt;&amp; literal(stri[pos + 8 fixLen 4]));</span>
        <span class="keywd">if</span> tagNumber = EXIF_ORIENTATION <span class="op">and</span> format = EXIF_UNSIGNED_SHORT_TYPE <span class="keywd">then</span>
          exifData.orientation := bytes2Int(stri[pos + 8 fixLen 2], UNSIGNED, BE);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        pos +:= 12;
        decr(numberOfDirectoryEntries);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Change the ''image'' orientation according to the Exif ''orientation''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: changeOrientation (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image, <span class="op">in</span> <span class="type">integer</span>: orientation) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">case</span> orientation <span class="keywd">of</span>
      <span class="keywd">when</span> {EXIF_ORIENTATION_MIRROR_HORIZONTAL}:
        mirrorHorizontally(image);
      <span class="keywd">when</span> {EXIF_ORIENTATION_ROTATE_180}:
        rotate180(image);
      <span class="keywd">when</span> {EXIF_ORIENTATION_MIRROR_VERTICAL}:
        mirrorVertically(image);
      <span class="keywd">when</span> {EXIF_ORIENTATION_MIRROR_ROTATE_90}:
        image := getRotated270AndMirroredHorizontally(image);
      <span class="keywd">when</span> {EXIF_ORIENTATION_ROTATE_90}:
        rotate270(image);
      <span class="keywd">when</span> {EXIF_ORIENTATION_MIRROR_ROTATE_270}:
        image := getRotated90AndMirroredHorizontally(image);
      <span class="keywd">when</span> {EXIF_ORIENTATION_ROTATE_270}:
        rotate90(image);
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
