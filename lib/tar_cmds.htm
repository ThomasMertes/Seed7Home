<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  tar_cmds.s7   Commands of the tar program.                      *)</span>
<span class="comment">(*  Copyright (C) 1994, 2004, 2005, 2010, 2014, 2017  Thomas Mertes *)</span>
<span class="comment">(*  Copyright (C) 2019, 2023 Thomas Mertes                          *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/tar.htm">tar.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/fileutil.htm">fileutil.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/gzip.htm">gzip.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/lzma.htm">lzma.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/xz.htm">xz.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/zstd.htm">zstd.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setUpHead (<span class="op">in</span> <span class="type">string</span>: basePath, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">string</span>: filePathSuffix, <span class="keywd">inout</span> tarHeader: header) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    header.name     := (filePath &amp; filePathSuffix)[.. 100];
    header.mode     := fileMode(basePath &amp; filePath);
    header.uid      := 100;
    header.gid      := 100;
    header.fileSize := 0;
    header.mtime    := timestamp1970(getMTime(basePath &amp; filePath));
    header.chksum   := 0;  <span class="comment"># Filled later</span>
    header.typeflag := REGTYPE;
    header.linkname := <span class="stri">""</span>;
    header.magic    := TAR_MAGIC;
    header.version  := <span class="stri">"  "</span>;
    header.uname    := <span class="stri">""</span>;
    header.gname    := <span class="stri">""</span>;
    header.devmajor := 0;
    header.devminor := 0;
    header.prefix   := <span class="stri">""</span>;
    header.filePath := filePath;
    header.filePathSuffix := filePathSuffix;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openTarFileWithMagic (<span class="op">in</span> <span class="type">string</span>: inFileName, <span class="op">in</span> <span class="type">boolean</span>: doUncompress) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: inFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: magicBytes <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    inFile := open(inFileName, <span class="stri">"r"</span>);
    <span class="keywd">if</span> inFile &lt;> STD_NULL <span class="keywd">then</span>
      magicBytes := gets(inFile, length(GZIP_MAGIC));
      <span class="keywd">if</span> magicBytes = GZIP_MAGIC <span class="keywd">then</span>
        seek(inFile, 1);
        inFile := openGzipFile(inFile, READ);
      <span class="keywd">else</span>
        magicBytes &amp;:= gets(inFile, length(ZSTD_MAGIC) - length(GZIP_MAGIC));
        <span class="keywd">if</span> magicBytes = ZSTD_MAGIC <span class="keywd">then</span>
          seek(inFile, 1);
          inFile := openZstdFile(inFile);
        <span class="keywd">else</span>
          magicBytes &amp;:= gets(inFile, length(XZ_MAGIC) - length(ZSTD_MAGIC));
          seek(inFile, 1);
          <span class="keywd">if</span> magicBytes = XZ_MAGIC <span class="keywd">then</span>
            inFile := openXzFile(inFile);
          <span class="keywd">elsif</span> endsWith(inFileName, <span class="stri">".lzma"</span>) <span class="keywd">then</span>
            inFile := openLzmaFile(inFile);
          <span class="keywd">elsif</span> doUncompress <span class="keywd">then</span>
            write(<span class="stri">"tar7: File \""</span>);
            write(inFileName);
            writeln(<span class="stri">"\" not in gzip, xz, zstd or lzma format."</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: filePathIsInTarMemberList (<span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: memberList) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isInMemberList <span class="keywd">is</span> TRUE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: member <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(memberList) &lt;> 0 <span class="keywd">then</span>
      isInMemberList := FALSE;
      <span class="keywd">for</span> member <span class="keywd">range</span> memberList <span class="keywd">until</span> isInMemberList <span class="keywd">do</span>
        <span class="keywd">if</span> filePath = member <span class="op">or</span>
            (startsWith(filePath, member) <span class="op">and</span> filePath[succ(length(member))] = <span class="stri">'/'</span>) <span class="keywd">then</span>
          isInMemberList := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  List the files in the TAR achive ''inFile''.
 *  This function is used by the ''tar7'' program. In other application areas the
 *  [[tar]] file system might be more convenient.
 *  @param inFile File in TAR format.
 *  @param memberList List of archive members that should be listed.
 *                    If ''memberList'' is empty all files in the archive are listed.
 *  @param doView TRUE show details of the files in the archive,
 *                FALSE only write the names of the files in the archive.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: tarTell (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: memberList,
    <span class="op">in</span> <span class="type">boolean</span>: doView) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> tarHeader: header <span class="keywd">is</span> tarHeader.value;
    <span class="keywd">var</span> <span class="type">time</span>: modTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    readHead(inFile, header);
    <span class="keywd">while</span> header.filePath &lt;> <span class="stri">""</span> <span class="op">and</span> (header.magic = TAR_MAGIC <span class="op">or</span> header.magic = TAR_NOMAGIC) <span class="keywd">do</span>
      <span class="keywd">if</span> filePathIsInTarMemberList(header.filePath, memberList) <span class="keywd">then</span>
        <span class="keywd">if</span> doView <span class="keywd">then</span>
          <span class="keywd">if</span> header.typeflag = DIRTYPE <span class="keywd">then</span>
            write(<span class="stri">"d"</span>);
          <span class="keywd">else</span>
            write(<span class="stri">"-"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          write(header.mode);
          write(<span class="stri">" "</span>);
          <span class="keywd">if</span> header.uname &lt;> <span class="stri">""</span> <span class="keywd">then</span>
            write(header.uname);
          <span class="keywd">else</span>
            write(header.uid);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          write(<span class="stri">"/"</span>);
          <span class="keywd">if</span> header.gname &lt;> <span class="stri">""</span> <span class="keywd">then</span>
            write(header.gname);
          <span class="keywd">else</span>
            write(header.gid);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          write(header.fileSize <span class="op">lpad</span> 14);
          write(<span class="stri">" "</span>);
          modTime := timestamp1970ToTime(header.mtime);
          write(strDate(modTime));
          write(<span class="stri">" "</span>);
          write(str_hh_mm(modTime, <span class="stri">":"</span>));
          write(<span class="stri">" "</span>);
          <span class="comment"># write(strTimeZone(modTime) rpad 12);</span>
        <span class="keywd">end</span> <span class="keywd">if</span>;
        writeln(header.filePath &lt;&amp; header.filePathSuffix);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> header.fileSize &lt;> 0 <span class="keywd">then</span>
        seek(inFile, tell(inFile) + succ(pred(header.fileSize) <span class="op">mdiv</span> TAR_BLOCK_SIZE) * TAR_BLOCK_SIZE);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      readHead(inFile, header);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  List files in the TAR achive named ''inFileName''.
 *  This function is used by the ''tar7'' program. In other application areas the
 *  [[tar]] file system might be more convenient.
 *  @param inFileName Name of the TAR archive.
 *  @param memberList List of archive members that should be listed.
 *                    If ''memberList'' is empty all files in the archive are listed.
 *  @param doView TRUE show details of the files in the archive,
 *                FALSE only write the names of the files in the archive.
 *  @param doUncompress TRUE if the archive is compressed with gzip, xz, zstd or lzma.
 *                      FALSE if the archive is not compressed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: tarTell (<span class="op">in</span> <span class="type">string</span>: inFileName, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: memberList,
    <span class="op">in</span> <span class="type">boolean</span>: doView, <span class="op">in</span> <span class="type">boolean</span>: doUncompress) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: inFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    inFile := openTarFileWithMagic(inFileName, doUncompress);
    <span class="keywd">if</span> inFile &lt;> STD_NULL <span class="keywd">then</span>
      tarTell(inFile, memberList, doView);
    <span class="keywd">else</span>
      write(<span class="stri">"tar7: Cannot open \""</span>);
      write(inFileName);
      writeln(<span class="stri">"\"."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Extract files from the TAR achive ''inFile''.
 *  This function is used by the ''tar7'' program. In other application areas the
 *  [[tar]] file system might be more convenient.
 *  @param inFile File in TAR format.
 *  @param memberList List of archive members that should be extracted.
 *                    If ''memberList'' is empty all files in the archive are extracted.
 *  @param doView TRUE write the names of the extracted files,
 *                FALSE extract quietly.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: tarXtract (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: memberList,
    <span class="op">in</span> <span class="type">boolean</span>: doView) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> tarHeader: header <span class="keywd">is</span> tarHeader.value;
    <span class="keywd">var</span> <span class="type">file</span>: aFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: bytesCopied <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">time</span>: modTime <span class="keywd">is</span> time.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">tarHeader</span>: dirHeaderList <span class="keywd">is</span> 0 <span class="op">times</span> tarHeader.value;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: okay <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    readHead(inFile, header);
    <span class="keywd">while</span> header.filePath &lt;> <span class="stri">""</span> <span class="op">and</span> (header.magic = TAR_MAGIC <span class="op">or</span> header.magic = TAR_NOMAGIC) <span class="op">and</span> okay <span class="keywd">do</span>
      <span class="keywd">if</span> filePathIsInTarMemberList(header.filePath, memberList) <span class="keywd">then</span>
        <span class="keywd">if</span> doView <span class="keywd">then</span>
          write(<span class="stri">"x "</span>);
          writeln(header.filePath &lt;&amp; header.filePathSuffix);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> header.typeflag = DIRTYPE <span class="keywd">then</span>
          <span class="keywd">if</span> fileType(header.filePath) = FILE_DIR <span class="keywd">then</span>
            dirHeaderList &amp;:= [] (header);
          <span class="keywd">elsif</span> fileType(header.filePath) = FILE_ABSENT <span class="keywd">then</span>
            makeParentDirs(header.filePath);
            mkdir(header.filePath);
            dirHeaderList &amp;:= [] (header);
          <span class="keywd">else</span>
            writeln(<span class="stri">"*** The file "</span> &lt;&amp; literal(header.filePath) &lt;&amp; <span class="stri">" exists, but is not a directory"</span>);
            okay := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> header.typeflag = REGTYPE <span class="op">or</span> header.typeflag = AREGTYPE <span class="keywd">then</span>
          <span class="keywd">if</span> fileType(header.filePath) = FILE_REGULAR <span class="keywd">then</span>
            removeFile(header.filePath);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> fileType(header.filePath) = FILE_ABSENT <span class="keywd">then</span>
            aFile  := open(header.filePath, <span class="stri">"w"</span>);
            <span class="keywd">if</span> aFile &lt;> STD_NULL <span class="keywd">then</span>
              bytesCopied := copyFile(inFile, aFile, header.fileSize);
              close(aFile);
              <span class="comment"># Just take the permission bits of the file mode.</span>
              setFileMode(header.filePath, fileMode(integer(header.mode) <span class="op">mod</span> 8#1000));
              modTime := timestamp1970ToTime(header.mtime);
              setMTime(header.filePath, modTime);
              <span class="comment"># Skip bytes up to header.fileSize and then up to a multiple of TAR_BLOCK_SIZE.</span>
              skip(inFile, header.fileSize - bytesCopied +
                   pred(TAR_BLOCK_SIZE) - pred(header.fileSize) <span class="op">mod</span> TAR_BLOCK_SIZE);
            <span class="keywd">else</span>
              skip(inFile, succ(pred(header.fileSize) <span class="op">mdiv</span> TAR_BLOCK_SIZE) * TAR_BLOCK_SIZE);
              writeln(<span class="stri">"*** Cannot create file "</span> &lt;&amp; literal(header.filePath));
              okay := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            skip(inFile, succ(pred(header.fileSize) <span class="op">mdiv</span> TAR_BLOCK_SIZE) * TAR_BLOCK_SIZE);
            writeln(<span class="stri">"*** The file "</span> &lt;&amp; literal(header.filePath) &lt;&amp; <span class="stri">" exists, but is not a regular file"</span>);
            okay := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      readHead(inFile, header);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">for</span> index <span class="keywd">range</span> length(dirHeaderList) <span class="keywd">downto</span> 1 <span class="keywd">do</span>
      <span class="comment"># Just take the permission bits of the file mode.</span>
      setFileMode(dirHeaderList[index].filePath, fileMode(integer(dirHeaderList[index].mode) <span class="op">mod</span> 8#1000));
      modTime := timestamp1970ToTime(dirHeaderList[index].mtime);
      setMTime(dirHeaderList[index].filePath, modTime);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Extract files from the TAR achive named ''inFileName''.
 *  This function is used by the ''tar7'' program. In other application areas the
 *  [[tar]] file system might be more convenient.
 *  @param inFileName Name of the TAR archive.
 *  @param memberList List of archive members that should be extracted.
 *                    If ''memberList'' is empty all files in the archive are extracted.
 *  @param doView TRUE write the names of the extracted files,
 *                FALSE extract quietly.
 *  @param doUncompress TRUE if the archive is compressed with gzip, xz, zstd or lzma.
 *                      FALSE if the archive is not compressed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: tarXtract (<span class="op">in</span> <span class="type">string</span>: inFileName, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: memberList,
    <span class="op">in</span> <span class="type">boolean</span>: doView, <span class="op">in</span> <span class="type">boolean</span>: doUncompress) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: inFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    inFile := openTarFileWithMagic(inFileName, doUncompress);
    <span class="keywd">if</span> inFile &lt;> STD_NULL <span class="keywd">then</span>
      tarXtract(inFile, memberList, doView);
    <span class="keywd">else</span>
      write(<span class="stri">"tar7: Cannot open \""</span>);
      write(inFileName);
      writeln(<span class="stri">"\"."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: tarXtract (<span class="op">in</span> <span class="type">string</span>: inFileName, <span class="op">in</span> <span class="type">boolean</span>: doView) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    tarXtract(inFileName, 0 <span class="op">times</span> <span class="stri">""</span>, doView, FALSE);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: tarXtract (<span class="op">in</span> <span class="type">string</span>: inFileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    tarXtract(inFileName, 0 <span class="op">times</span> <span class="stri">""</span>, FALSE, FALSE);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a TAR archive to ''outFile'' with the files listed in ''fileList''.
 *  This function is used by the ''tar7'' program. In other application areas the
 *  [[tar]] file system might be more convenient.
 *  @param outFile Destination for the crated TAR file.
 *  @param fileList List of file paths to be put into the created tar archive.
 *  @param doView TRUE write the names of the processed files,
 *                FALSE work quietly.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: tarCreate (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: basePath, <span class="op">in</span> <span class="type">string</span>: pathFromBase,
    <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: fileList, <span class="op">in</span> <span class="type">boolean</span>: doView) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: dirContent <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">file</span>: aFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: bytesCopied <span class="keywd">is</span> 0;
    <span class="keywd">var</span> tarHeader: header <span class="keywd">is</span> tarHeader.value;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> name <span class="keywd">range</span> fileList <span class="keywd">do</span>
      name := pathFromBase &amp; name;
      <span class="keywd">if</span> fileType(basePath &amp; name) = FILE_ABSENT <span class="keywd">then</span>
        writeln(<span class="stri">"*** The file "</span> &lt;&amp; literal(basePath &amp; name) &lt;&amp; <span class="stri">" does not exist."</span>);
      <span class="keywd">else</span>
        <span class="keywd">if</span> doView <span class="keywd">then</span>
          write(<span class="stri">"c "</span>);
          writeln(name);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> fileType(basePath &amp; name) = FILE_DIR <span class="keywd">then</span>
          dirContent := readDir(basePath &amp; name);
          setUpHead(basePath, name, <span class="stri">"/"</span>, header);
          header.typeflag := DIRTYPE;
          writeHead(outFile, header);
          tarCreate(outFile, basePath, name &amp; <span class="stri">"/"</span>, dirContent, doView);
        <span class="keywd">else</span>
          setUpHead(basePath, name, <span class="stri">""</span>, header);
          aFile := open(basePath &amp; name, <span class="stri">"r"</span>);
          <span class="keywd">if</span> aFile &lt;> STD_NULL <span class="keywd">then</span>
            header.fileSize := length(aFile);
            writeHead(outFile, header);
            bytesCopied := copyFile(aFile, outFile, header.fileSize);
            <span class="comment"># Fill with '\0;' up to header.fileSize and then up to a multiple of TAR_BLOCK_SIZE.</span>
            write(outFile, <span class="stri">"\0;"</span> <span class="op">mult</span> header.fileSize - bytesCopied +
                  pred(TAR_BLOCK_SIZE) - pred(header.fileSize) <span class="op">mod</span> TAR_BLOCK_SIZE);
            close(aFile);
          <span class="keywd">else</span>
            writeHead(outFile, header);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create the TAR file ''outFileName'' with the files listed in ''fileList''.
 *  This function is used by the ''tar7'' program. In other application areas the
 *  [[tar]] file system might be more convenient.
 *  @param outFileName Name of the TAR archive to be created.
 *  @param fileList List of file paths to be put into the created tar archive.
 *  @param doView TRUE to log a line for every processed file,
 *                FALSE if nothing should be logged.
 *  @param doZip  TRUE if the TAR archive should be compressed with ZIP,
 *                FALSE if the TAR achive should be uncompressed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: tarCreate (<span class="op">in</span> <span class="type">string</span>: outFileName, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: fileList,
    <span class="op">in</span> <span class="type">boolean</span>: doView, <span class="op">in</span> <span class="type">boolean</span>: doZip) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: outFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">file</span>: compressedFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: uncompressed <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    outFile := open(outFileName, <span class="stri">"w"</span>);
    <span class="keywd">if</span> outFile &lt;> STD_NULL <span class="op">and</span> doZip <span class="keywd">then</span>
      compressedFile := outFile;
      outFile := openGzipFile(compressedFile, WRITE);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> outFile &lt;> STD_NULL <span class="keywd">then</span>
      <span class="keywd">for</span> name <span class="keywd">range</span> fileList <span class="keywd">do</span>
        tarCreate(outFile, <span class="stri">""</span>, <span class="stri">""</span>, [] name, doView);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      close(outFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> compressedFile &lt;> STD_NULL <span class="keywd">then</span>
      close(compressedFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: tarCreate (<span class="op">in</span> <span class="type">string</span>: outFileName, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: fileList,
    <span class="op">in</span> <span class="type">boolean</span>: doView) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    tarCreate(outFileName, fileList, doView, FALSE);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: tarCreate (<span class="op">in</span> <span class="type">string</span>: outFileName, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: fileList) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    tarCreate(outFileName, fileList, FALSE, FALSE);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
