<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  color.s7i     Functions for color processing                    *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2011  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Describes colors with red, green and blue colors of light.
 *  The range of ''redLight'', ''greenLight'' and ''blueLight'' is from 0 to 65535.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: color <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: redLight <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: greenLight <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: blueLight <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Check if two color values are equal.
 *  @return TRUE if both values are equal, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">color</span>: col1) = (<span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span>
  <span class="keywd">return</span> col1.redLight = col2.redLight <span class="op">and</span>
         col1.greenLight = col2.greenLight <span class="op">and</span>
         col1.blueLight = col2.blueLight;


<span class="comment">(**
 *  Check if two color values are not equal.
 *  @return FALSE if both values are equal, TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">color</span>: col1) &lt;> (<span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span>
  <span class="keywd">return</span> col1.redLight &lt;> col2.redLight <span class="op">or</span>
         col1.greenLight &lt;> col2.greenLight <span class="op">or</span>
         col1.blueLight &lt;> col2.blueLight;


<span class="comment">(**
 *  Add two colors in an additive color system.
 *  @return the sum of the two colors.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: (<span class="op">in</span> <span class="type">color</span>: col1) + (<span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: sum <span class="keywd">is</span> color.value;
  <span class="keywd">begin</span>
    sum.redLight :=   (col1.redLight   + col2.redLight)   <span class="op">mdiv</span> 2;
    sum.greenLight := (col1.greenLight + col2.greenLight) <span class="op">mdiv</span> 2;
    sum.blueLight :=  (col1.blueLight  + col2.blueLight)  <span class="op">mdiv</span> 2;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a color value from the ''red'', ''green'' and ''blue'' colors of light.
 *  The range for ''red'', ''green'' and ''blue'' is from 0 to 65535.
 *  @return the created color value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: color (<span class="op">in</span> <span class="type">integer</span>: red, <span class="op">in</span> <span class="type">integer</span>: green, <span class="op">in</span> <span class="type">integer</span>: blue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: aColor <span class="keywd">is</span> color.value;
  <span class="keywd">begin</span>
    aColor.redLight := red;
    aColor.greenLight := green;
    aColor.blueLight := blue;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a gray color value from the ''brightness''.
 *  The range for ''brightness'' is from 0 to 65535.
 *  @return the created color value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: gray (<span class="op">in</span> <span class="type">integer</span>: brightness) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: aColor <span class="keywd">is</span> color.value;
  <span class="keywd">begin</span>
    aColor.redLight := brightness;
    aColor.greenLight := brightness;
    aColor.blueLight := brightness;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compares two colors.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">color</span>: col1, <span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: signumValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> col1.redLight &lt; col2.redLight <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> col1.redLight > col2.redLight <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> col1.greenLight &lt; col2.greenLight <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> col1.greenLight > col2.greenLight <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> col1.blueLight &lt; col2.blueLight <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> col1.blueLight > col2.blueLight <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the hash value of a color.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span>
  <span class="keywd">return</span> col.redLight + col.greenLight + col.blueLight;


DECLARE_TERNARY(color);


<span class="keywd">const</span> <span class="type">color</span>: black         <span class="keywd">is</span> color(0, 0, 0);             <span class="comment">(* Black     *)</span>
<span class="keywd">const</span> <span class="type">color</span>: dark_red      <span class="keywd">is</span> color(32768, 0, 0);         <span class="comment">(* Maroon  r *)</span>
<span class="keywd">const</span> <span class="type">color</span>: dark_green    <span class="keywd">is</span> color(0, 32768, 0);         <span class="comment">(* Green   g *)</span>
<span class="keywd">const</span> <span class="type">color</span>: brown         <span class="keywd">is</span> color(32768, 16384, 0);     <span class="comment">(*         b *)</span>
<span class="keywd">const</span> <span class="type">color</span>: dark_blue     <span class="keywd">is</span> color(0, 0, 32768);         <span class="comment">(* Navy    N *)</span>
<span class="keywd">const</span> <span class="type">color</span>: dark_magenta  <span class="keywd">is</span> color(32768, 0, 32768);     <span class="comment">(* Purple    *)</span>
<span class="keywd">const</span> <span class="type">color</span>: dark_cyan     <span class="keywd">is</span> color(0, 65535, 65535);     <span class="comment">(* Aqua      *)</span>
<span class="keywd">const</span> <span class="type">color</span>: light_gray    <span class="keywd">is</span> color(49152, 49152, 49152); <span class="comment">(* Silver  x *)</span>
<span class="keywd">const</span> <span class="type">color</span>: middle_gray   <span class="keywd">is</span> color(32768, 32768, 32768);
<span class="keywd">const</span> <span class="type">color</span>: dark_gray     <span class="keywd">is</span> color(16384, 16384, 16384);
<span class="keywd">const</span> <span class="type">color</span>: light_red     <span class="keywd">is</span> color(65535, 0, 0);         <span class="comment">(* Red     R *)</span>
<span class="keywd">const</span> <span class="type">color</span>: light_green   <span class="keywd">is</span> color(0, 65535, 0);         <span class="comment">(* Lime    G *)</span>
<span class="keywd">const</span> <span class="type">color</span>: yellow        <span class="keywd">is</span> color(65535, 65535, 0);     <span class="comment">(* Yellow  Y *)</span>
<span class="keywd">const</span> <span class="type">color</span>: light_blue    <span class="keywd">is</span> color(0, 0, 65535);         <span class="comment">(* Blue    B *)</span>
<span class="keywd">const</span> <span class="type">color</span>: light_magenta <span class="keywd">is</span> color(65535, 0, 65535);     <span class="comment">(* Fuchsia M *)</span>
<span class="keywd">const</span> <span class="type">color</span>: light_cyan    <span class="keywd">is</span> color(32768, 65535, 65535); <span class="comment">(*         c *)</span>
<span class="keywd">const</span> <span class="type">color</span>: lavender      <span class="keywd">is</span> color(32768, 32768, 65535);
<span class="keywd">const</span> <span class="type">color</span>: white         <span class="keywd">is</span> color(65535, 65535, 65535); <span class="comment">(* White   X *)</span>
<span class="keywd">const</span> <span class="type">color</span>: orange        <span class="keywd">is</span> color(65535, 32768, 0);     <span class="comment">(*         O *)</span>
<span class="keywd">const</span> <span class="type">color</span>: amber         <span class="keywd">is</span> color(49152, 32768, 16384);
<span class="keywd">const</span> <span class="type">color</span>: pink          <span class="keywd">is</span> color(65535, 32768, 32768);
<span class="keywd">const</span> <span class="type">color</span>: light_pink    <span class="keywd">is</span> color(65535, 32768, 65535);
<span class="keywd">const</span> <span class="type">color</span>: mint          <span class="keywd">is</span> color(21845, 57343, 21845);
<span class="keywd">const</span> <span class="type">color</span>: forestgreen   <span class="keywd">is</span> color(8704, 35584, 8704);
<span class="keywd">const</span> <span class="type">color</span>: middle_blue   <span class="keywd">is</span> color(0, 0, 43008);

<span class="comment">(* Basic HTML colors: *)</span>

<span class="keywd">const</span> <span class="type">color</span>: Black         <span class="keywd">is</span> color(0, 0, 0);
<span class="keywd">const</span> <span class="type">color</span>: Maroon        <span class="keywd">is</span> color(32768, 0, 0);
<span class="keywd">const</span> <span class="type">color</span>: Green         <span class="keywd">is</span> color(0, 32768, 0);
<span class="keywd">const</span> <span class="type">color</span>: Navy          <span class="keywd">is</span> color(0, 0, 32768);
<span class="keywd">const</span> <span class="type">color</span>: Silver        <span class="keywd">is</span> color(49152, 49152, 49152);
<span class="keywd">const</span> <span class="type">color</span>: Red           <span class="keywd">is</span> color(65535, 0, 0);
<span class="keywd">const</span> <span class="type">color</span>: Lime          <span class="keywd">is</span> color(0, 65535, 0);
<span class="keywd">const</span> <span class="type">color</span>: Blue          <span class="keywd">is</span> color(0, 0, 65535);
<span class="keywd">const</span> <span class="type">color</span>: Gray          <span class="keywd">is</span> color(32768, 32768, 32768);
<span class="keywd">const</span> <span class="type">color</span>: Purple        <span class="keywd">is</span> color(32768, 0, 32768);
<span class="keywd">const</span> <span class="type">color</span>: Olive         <span class="keywd">is</span> color(32768, 32768, 0);
<span class="keywd">const</span> <span class="type">color</span>: Teal          <span class="keywd">is</span> color(0, 32768, 32768);
<span class="keywd">const</span> <span class="type">color</span>: White         <span class="keywd">is</span> color(65535, 65535, 65535);
<span class="keywd">const</span> <span class="type">color</span>: Fuchsia       <span class="keywd">is</span> color(65535, 0, 65535);
<span class="keywd">const</span> <span class="type">color</span>: Yellow        <span class="keywd">is</span> color(65535, 65535, 0);
<span class="keywd">const</span> <span class="type">color</span>: Aqua          <span class="keywd">is</span> color(0, 65535, 65535);
</pre>
</body>
</html>
