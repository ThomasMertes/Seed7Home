<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  draw.s7i      Portable graphic library                          *)</span>
<span class="comment">(*  Copyright (C) 2001, 2005, 2007, 2011  Thomas Mertes             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/stdio.htm">stdio.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/graph.htm">graph.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bytedata.htm">bytedata.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/color.htm">color.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/math.htm">math.s7i</a>"</span>;


<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: curr_win <span class="keywd">is</span> PRIMITIVE_WINDOW.value;

<span class="keywd">const</span> <span class="type">type</span>: pixelArray2d <span class="keywd">is</span> <span class="type">array</span> <span class="type">array</span> pixel;


<span class="comment">(**
 *  Convert a [[color]] to a pixel.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> pixel: colorPixel (<span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span>
  <span class="keywd">return</span> rgbPixel(col.redLight, col.greenLight, col.blueLight);


<span class="comment">(**
 *  Convert a pixel to a [[color]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: pixelToColor (<span class="op">in</span> pixel: pix) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: col <span class="keywd">is</span> color.value;
  <span class="keywd">begin</span>
    DRAW_PIXEL_TO_RGB(pix, col.redLight, col.greenLight, col.blueLight);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open the default window (''curr_win'') with the given ''width'' and ''height''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: screen (<span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    curr_win := PRIMITIVE_GRAPHIC_OPEN(0, 0, width, height, name(PROGRAM));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    SET_COLOR(colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="op">in</span> <span class="type">color</span>: col1, <span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    SET_COLOR(colorPixel(col1));
    SET_BACKGROUND(colorPixel(col2));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a point with the color ''col'' to the window ''win'' at the
 *  position (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: point (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PPOINT(win, x, y, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a point with the color ''col'' to the current window ''curr_win''
 *  at the position (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: point (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PPOINT(curr_win, x, y, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a line with the color ''col'' to the window ''win''.
 *  The line starts at (x, y) and ends at (delta_x, delta_y).
 *  The coordinates of the endpoint are measured relative to x, y.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: line (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: delta_x, <span class="op">in</span> <span class="type">integer</span>: delta_y, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(win, x, y, x + delta_x, y + delta_y, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a line with the color ''col'' to the current window ''curr_win''.
 *  The line starts at (x, y) and ends at (delta_x, delta_y).
 *  The coordinates of the endpoint are measured relative to x, y.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: line (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: delta_x, <span class="op">in</span> <span class="type">integer</span>: delta_y, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(curr_win, x, y, x + delta_x, y + delta_y, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a line with the color ''col'' to the window ''win''.
 *  The line starts at (x1, y1) and ends at (x2, y2).
 *  The coordinates of the endpoint are measured in absolute
 *  window coordinates.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: lineTo (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(win, x1, y1, x2, y2, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a line with the color ''col'' to the current window ''curr_win''.
 *  The line starts at (x1, y1) and ends at (x2, y2).
 *  The coordinates of the endpoint are measured in absolute
 *  window coordinates.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: lineTo (<span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(curr_win, x1, y1, x2, y2, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a line with the color ''col'' to the window ''win''.
 *  The line starts at (x, y), has the given ''length'' and extends
 *  in the given ''angle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: lineToAngle (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: length, <span class="op">in</span> <span class="type">float</span>: angle, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(win, x, y,
        x + round(flt(length) * sin(angle)),
        y + round(flt(length) * -cos(angle)), colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a line with the color ''col'' to the current window ''curr_win''.
 *  The line starts at (x, y), has the given ''length'' and extends
 *  in the given ''angle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: lineToAngle (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: length, <span class="op">in</span> <span class="type">float</span>: angle, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(curr_win, x, y,
        x + round(flt(length) * sin(angle)),
        y + round(flt(length) * -cos(angle)), colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: hline (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(win, x1, y1, x2, y1, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: hline (<span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(curr_win, x1, y1, x2, y1, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: vline (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(win, x1, y1, x1, y2, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: vline (<span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PLINE(curr_win, x1, y1, x1, y2, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled rectangle with the color ''col'' to the window ''win''.
 *  The top left edge of the rectangle is at (x1, y1). The size of the
 *  rectangle is specified with ''width'' and ''height''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rect (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PRECT(win, x1, y1, width, height, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled rectangle with the color ''col'' to the current window ''curr_win''.
 *  The top left edge of the rectangle is at (x, y). The size of the
 *  rectangle is specified with ''width'' and ''height''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rect (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PRECT(curr_win, x, y, width, height, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: rect (<span class="keywd">inout</span> <span class="type">array</span> <span class="type">array</span> pixel: image,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    pix := colorPixel(col);
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
        image[y1 + line][x1 + column] := pix;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled rectangle with the color ''col'' to the window ''win''.
 *  The top left edge of the rectangle is at (x1, y1) and the lower right
 *  edge is at (x2, y2).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rectTo (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PRECT(win, x1, y1, x2 - x1 + 1, y2 - y1 + 1, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled rectangle with the color ''col'' to the current window ''curr_win''.
 *  The top left edge of the rectangle is at (x1, y1) and the lower right
 *  edge is at (x2, y2).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rectTo (<span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_PRECT(curr_win, x1, y1, x2 - x1 + 1, y2 - y1 + 1, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an empty rectangle with the color ''col'' to the window ''win''.
 *  The top left edge of the rectangle is at (x, y). The size of the
 *  rectangle is specified with ''width'' and ''height''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: box (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    pix := colorPixel(col);
    DRAW_PLINE(win, x, y, pred(x + width), y, pix);
    DRAW_PLINE(win, pred(x + width), y, pred(x + width), pred(y + height), pix);
    DRAW_PLINE(win, pred(x + width), pred(y + height), x, pred(y + height), pix);
    DRAW_PLINE(win, x, pred(y + height), x, y, pix);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an empty rectangle with the color ''col'' to the current window ''curr_win''.
 *  The top left edge of the rectangle is at (x, y). The size of the
 *  rectangle is specified with ''width'' and ''height''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: box (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    pix := colorPixel(col);
    DRAW_PLINE(curr_win, x, y, pred(x + width), y, pix);
    DRAW_PLINE(curr_win, pred(x + width), y, pred(x + width), pred(y + height), pix);
    DRAW_PLINE(curr_win, pred(x + width), pred(y + height), x, pred(y + height), pix);
    DRAW_PLINE(curr_win, x, pred(y + height), x, y, pix);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an empty rectangle with the color ''col'' to the window ''win''.
 *  The top left edge of the rectangle is at (x1, y1) and the lower right
 *  edge is at (x2, y2).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: boxTo (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    pix := colorPixel(col);
    DRAW_PLINE(win, x1, y1, x2, y1, pix);
    DRAW_PLINE(win, x2, y1, x2, y2, pix);
    DRAW_PLINE(win, x2, y2, x1, y2, pix);
    DRAW_PLINE(win, x1, y2, x1, y1, pix);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an empty rectangle with the color ''col'' to the current window ''curr_win''.
 *  The top left edge of the rectangle is at (x1, y1) and the lower right
 *  edge is at (x2, y2).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: boxTo (<span class="op">in</span> <span class="type">integer</span>: x1, <span class="op">in</span> <span class="type">integer</span>: y1,
    <span class="op">in</span> <span class="type">integer</span>: x2, <span class="op">in</span> <span class="type">integer</span>: y2, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    pix := colorPixel(col);
    DRAW_PLINE(curr_win, x1, y1, x2, y1, pix);
    DRAW_PLINE(curr_win, x2, y1, x2, y2, pix);
    DRAW_PLINE(curr_win, x2, y2, x1, y2, pix);
    DRAW_PLINE(curr_win, x1, y2, x1, y1, pix);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a circle with the color ''col'' to the window ''win''.
 *  The circle has the given ''radius'' and its center is at (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: circle (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_CIRCLE(win, x, y, radius, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a circle with the color ''col'' to the current window ''curr_win''.
 *  The circle has the given ''radius'' and its center is at (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: circle (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_CIRCLE(curr_win, x, y, radius, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled circle with the color ''col'' to the window ''win''.
 *  The circle has the given ''radius'' and its center is at (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: fcircle (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_CIRCLE(win, x, y, radius, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled circle with the color ''col'' to the current window ''curr_win''.
 *  The circle has the given ''radius'' and its center is at (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: fcircle (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_CIRCLE(curr_win, x, y, radius, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an arc with the color ''col'' to the window ''win''.
 *  The arc has the given ''radius'' and its center is at (x, y).
 *  The arc begins at ''startAngle'' and spans over ''sweepAngle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: arc (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_ARC(win, x, y, radius, startAngle, sweepAngle, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an arc with the color ''col'' to the current window ''curr_win''.
 *  The arc has the given ''radius'' and its center is at (x, y).
 *  The arc begins at ''startAngle'' and spans over ''sweepAngle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: arc (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_ARC(curr_win, x, y, radius, startAngle, sweepAngle, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an arc with the color ''col'' to the window ''win''.
 *  The arc has the given ''radius'' and its center is at (x, y).
 *  The arc begins at ''startAngle'' and spans over ''sweepAngle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: arc (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle, <span class="op">in</span> <span class="type">integer</span>: width,
    <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_ARC(win, x, y, radius, startAngle, sweepAngle, width, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws an arc with the color ''col'' to the current window ''curr_win''.
 *  The arc has the given ''radius'' and its center is at (x, y).
 *  The arc begins at ''startAngle'' and spans over ''sweepAngle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: arc (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle, <span class="op">in</span> <span class="type">integer</span>: width,
    <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_ARC(curr_win, x, y, radius, startAngle, sweepAngle, width, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: chord (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_ARCCHORD(curr_win, x, y, radius, startAngle, sweepAngle, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled sector with color ''col'' to ''curr_win''.
 *  The sector has the given ''radius'' and its center is at (x, y).
 *  The sector begins at ''startAngle'' and spans over ''sweepAngle''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: pieslice (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: radius,
    <span class="op">in</span> <span class="type">float</span>: startAngle, <span class="op">in</span> <span class="type">float</span>: sweepAngle, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_ARCPIESLICE(curr_win, x, y, radius, startAngle, sweepAngle, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: fellipse (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_ELLIPSE(win, x, y, width, height, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: fellipse (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_ELLIPSE(curr_win, x, y, width, height, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Clears the window ''win'' with the color ''col''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_CLEAR(win, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Clears the window ''win'' with the color black.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_CLEAR(win, colorPixel(black));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Clears the current window ''curr_win'' with the color ''col''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_CLEAR(curr_win, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws lines with the color ''col'' to the window ''win''.
 *  The lines connect the ''points'' and are drawn at the position (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: polyLine (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> pointList: points, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_POLYLINE(win, x, y, points, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws lines with the color ''col'' to the current window ''curr_win''.
 *  The lines connect the ''points'' and are drawn at the position (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: polyLine (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> pointList: points, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    DRAW_POLYLINE(curr_win, x, y, points, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled polygon with the color ''col'' to the window ''win''.
 *  The corners of the polygon are given with ''points''.
 *  The polygon is drawn at the position (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: fpolyLine (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> pointList: points, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_POLYLINE(win, x, y, points, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a filled polygon with the color ''col'' to the current window ''curr_win''.
 *  The corners of the polygon are given with ''points''.
 *  The polygon is drawn at the position (x, y).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: fpolyLine (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> pointList: points, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    FILL_POLYLINE(curr_win, x, y, points, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: paint (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y, <span class="op">in</span> <span class="type">integer</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(<span class="stri">"PAINT"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Put ''pixmap'' to the given position at ''destWindow''.
 *  The top left edge of ''pixmap'' is put at (''xDest'', ''yDest'').
 *  @param destWindow Destination Window.
 *  @param xDest X-coordinate of the destination position.
 *  @param yDest Y-coordinate of the destination position.
 *  @param pixmap Source window to be put to the destination.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: destWindow, <span class="op">in</span> <span class="type">integer</span>: xDest,
    <span class="op">in</span> <span class="type">integer</span>: yDest, <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap) <span class="keywd">is</span> action <span class="stri">"DRW_PUT"</span>;


<span class="comment">(**
 *  Put ''pixmap'' to the given position at the current window 'curr_win'.
 *  The top left edge of ''pixmap'' is put at (''xDest'', ''yDest'').
 *  @param xDest X-coordinate of the destination position.
 *  @param yDest Y-coordinate of the destination position.
 *  @param pixmap Source window to be put to the destination.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="op">in</span> <span class="type">integer</span>: xDest, <span class="op">in</span> <span class="type">integer</span>: yDest,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(curr_win, xDest, yDest, pixmap);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The put() function with PSET as parameter is deprecated. Use the one without PSET.</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, PSET) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(win, x, y, pixmap);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The put() function with XOR as parameter is deprecated. Use the one without XOR.</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, XOR) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(win, x, y, pixmap);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The put() function with PSET as parameter is deprecated. Use the one without PSET.</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, PSET) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(curr_win, x, y, pixmap);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The put() function with XOR as parameter is deprecated. Use the one without XOR.</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, XOR) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(curr_win, x, y, pixmap);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Put a scaled ''pixmap'' to the given rectangle at ''destWindow''.
 *  The top left edge of the destination rectangle is at (''xDest'', ''yDest'').
 *  @param destWindow Destination Window.
 *  @param xDest X-coordinate of the destination rectangle.
 *  @param yDest Y-coordinate of the destination rectangle.
 *  @param width Width of the destination rectangle.
 *  @param height Height of the destination rectangle.
 *  @param pixmap Source window to be scaled to the rectangle.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: destWindow, <span class="op">in</span> <span class="type">integer</span>: xDest,
    <span class="op">in</span> <span class="type">integer</span>: yDest, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height,
    <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap) <span class="keywd">is</span> action <span class="stri">"DRW_PUT_SCALED"</span>;


<span class="comment">(**
 *  Create a new pixmap with the given ''width'' and ''height''.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: newPixmap (<span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height) <span class="keywd">is</span> action <span class="stri">"DRW_NEW_PIXMAP"</span>;


<span class="comment">(**
 *  Create a new pixmap with the given ''width'' and ''height'' from ''sourceWin''.
 *  A rectangle with the upper left corner at (''left'', ''upper'') and the given
 *  ''width'' and ''height'' is copied from ''sourceWin'' to the new pixmap.
 *  The rectangle may extend to areas outside of ''sourceWin''. The rectangle
 *  areas outside of ''sourceWin'' are colored with black.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceWin,
    <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height) <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXMAP"</span>;


<span class="comment">(**
 *  Create a new pixmap with the given ''width'' and ''height'' from ''curr_win''.
 *  A rectangle with the upper left corner at (''left'', ''upper'') and the given
 *  ''width'' and ''height'' is copied from ''curr_win'' to the new pixmap.
 *  The rectangle may extend to areas outside of ''sourceWin''. The rectangle
 *  areas outside of ''sourceWin'' are colored with black.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: upper,
    <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height) <span class="keywd">is</span>
  <span class="keywd">return</span> getPixmap(curr_win, left, upper, width, height);


<span class="comment">(**
 *  Create a new pixmap with the contents of ''sourceWin''.
 *  The content of ''sourceWin'' is copied the new pixmap.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceWin) <span class="keywd">is</span>
  <span class="keywd">return</span> getPixmap(sourceWin, 0, 0, width(sourceWin), height(sourceWin));


<span class="comment">(**
 *  Create a new pixmap with the given ''width'' and ''height'' from ''sourceWin''.
 *  A rectangle with the upper left corner at (''left'', ''upper'') and the given
 *  ''width'' and ''height'' is copied from ''sourceWin'' to the new pixmap.
 *  The rectangle may extend to areas outside of ''sourceWin''. The rectangle
 *  areas outside of ''sourceWin'' are colored with the given ''background'' color.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceWin,
    <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height,
    <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: sourceLeft <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: sourceUpper <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: copyWidth <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: copyHeight <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLeft <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destUpper <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceToCopy <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">begin</span>
    pixmap := newPixmap(width, height);
    <span class="keywd">if</span> left + width &lt;= 0 <span class="op">or</span> left >= width(sourceWin) <span class="op">or</span>
        upper + height &lt;= 0 <span class="op">or</span> upper >= height(sourceWin) <span class="keywd">then</span>
      clear(pixmap, background);
    <span class="keywd">else</span>
      sourceLeft := left;
      copyWidth := width;
      <span class="keywd">if</span> left &lt; 0 <span class="keywd">then</span>
        rect(pixmap, 0, 0, -left, height, background);
        sourceLeft := 0;
        copyWidth +:= left;
        destLeft := -left;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> left + width > width(sourceWin) <span class="keywd">then</span>
        rect(pixmap, width(sourceWin) - left, 0, left + width - width(sourceWin), height, background);
        copyWidth -:= left + width - width(sourceWin);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      sourceUpper := upper;
      copyHeight := height;
      <span class="keywd">if</span> upper &lt; 0 <span class="keywd">then</span>
        rect(pixmap, 0, 0, width, -upper, background);
        sourceUpper := 0;
        copyHeight +:= upper;
        destUpper := -upper;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> upper + height > height(sourceWin) <span class="keywd">then</span>
        rect(pixmap, 0, height(sourceWin) - upper, width, upper + height - height(sourceWin), background);
        copyHeight -:= upper + height - height(sourceWin);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      sourceToCopy := getPixmap(sourceWin, sourceLeft, sourceUpper, copyWidth, copyHeight);
      put(pixmap, destLeft, destUpper, sourceToCopy);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a new pixmap with the given ''resultWidth'' and ''resultHeight'' from ''sourceWin''.
 *  A rectangle with the upper left corner at (''left'', ''upper'') and the given
 *  ''width'' and ''height'' is copied from ''sourceWin''. The rectangle may extend
 *  to areas outside of ''sourceWin''. The rectangle areas outside of ''sourceWin'' are
 *  colored with the given ''background'' color. The copied rectangle is
 *  scaled to ''resultWidth'' and ''resultHeight'' and returned as new pixmap.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceWin,
    <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: height,
    <span class="op">in</span> <span class="type">integer</span>: resultWidth, <span class="op">in</span> <span class="type">integer</span>: resultHeight, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: sourceLeft <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: sourceUpper <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: copyWidth <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: copyHeight <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destLeft <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: destUpper <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: sourceToCopy <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">begin</span>
    pixmap := newPixmap(resultWidth, resultHeight);
    clear(pixmap, background);
    <span class="keywd">if</span> left + width > 0 <span class="op">and</span> left &lt; width(sourceWin) <span class="op">and</span>
        upper + height > 0 <span class="op">and</span> upper &lt; height(sourceWin) <span class="keywd">then</span>
      sourceLeft := left;
      copyWidth := width;
      <span class="keywd">if</span> left &lt; 0 <span class="keywd">then</span>
        sourceLeft := 0;
        copyWidth +:= left;
        destLeft := -left;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> left + width > width(sourceWin) <span class="keywd">then</span>
        copyWidth -:= left + width - width(sourceWin);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      sourceUpper := upper;
      copyHeight := height;
      <span class="keywd">if</span> upper &lt; 0 <span class="keywd">then</span>
        sourceUpper := 0;
        copyHeight +:= upper;
        destUpper := -upper;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> upper + height > height(sourceWin) <span class="keywd">then</span>
        copyHeight -:= upper + height - height(sourceWin);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      sourceToCopy := getPixmap(sourceWin, sourceLeft, sourceUpper, copyWidth, copyHeight);
      put(pixmap, destLeft * resultWidth <span class="op">mdiv</span> width, destUpper * resultHeight <span class="op">mdiv</span> height,
          copyWidth * resultWidth <span class="op">mdiv</span> width, copyHeight * resultHeight <span class="op">mdiv</span> height, sourceToCopy);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a new pixmap from a two-dimensional array of pixels.
 *  The array of pixels might come from a image file.
 *  @param image Pixel array with lines from top downward and columns from left to right.
 *  @return the created pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="keywd">ref</span> <span class="type">array</span> <span class="type">array</span> pixel: image) <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXMAP_FROM_PIXELS"</span>;


<span class="comment">(**
 *  Get a two-dimensional array of pixels from ''aWindow''.
 *  The array of pixels can be used to write the image to a file.
 *  This is used by the function str(aWindow, PPM):
 *   image := getPixelArray(pixmap);
 *   for line range 1 to height do
 *     for pix range image[line] do
 *       col := pixelToColor(pix);
 *       stri &amp;:= chr(col.redLight   mdiv 256);
 *       stri &amp;:= chr(col.greenLight mdiv 256);
 *       stri &amp;:= chr(col.blueLight  mdiv 256);
 *     end for;
 *   end for;
 *  @param aWindow Window or pixmap source to create the array of pixels.
 *  @return a pixel array with lines from top downward and columns from left to right.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">array</span> pixel: getPixelArray (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow) <span class="keywd">is</span> action <span class="stri">"DRW_GET_PIXEL_ARRAY"</span>;


<span class="comment">(**
 *  Sets the transparent color of a pixmap.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setTransparentColor (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    SET_TRANSPARENTCOLOR(pixmap, colorPixel(col));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Retrieve the color at pixel position (''x'', ''y'') from ''aWindow''.
 *  @return the pixel color at position (''x'', ''y'').
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: getPixelColor (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: aWindow,
    <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: col <span class="keywd">is</span> color.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    pix := getPixel(aWindow, x, y);
    DRAW_PIXEL_TO_RGB(pix, col.redLight, col.greenLight, col.blueLight);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: getPixelColor (<span class="op">in</span> <span class="type">bstring</span>: bImage, <span class="op">in</span> <span class="type">integer</span>: width,
    <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">integer</span>: x, <span class="op">in</span> <span class="type">integer</span>: y) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: col <span class="keywd">is</span> color.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> pixel: pix <span class="keywd">is</span> pixel.value;
  <span class="keywd">begin</span>
    pix := getPixel(bImage, width, height, x, y);
    DRAW_PIXEL_TO_RGB(pix, col.redLight, col.greenLight, col.blueLight);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: palette (<span class="op">in</span> <span class="type">integer</span>: col, <span class="op">in</span> <span class="type">integer</span>: pal) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(<span class="stri">"PALETTE"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: palette <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(<span class="stri">"PALETTE"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: sound (<span class="op">in</span> <span class="type">integer</span>: freq, <span class="op">in</span> <span class="type">integer</span>: dur) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(<span class="stri">"SOUND"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
