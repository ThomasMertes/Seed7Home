<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  ftp.s7i       Support for FTP (file transfer protocol)          *)</span>
<span class="comment">(*  Copyright (C) 2011, 2014, 2017, 2022, 2023  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/socket.htm">socket.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/listener.htm">listener.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/unicode.htm">unicode.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bigint.htm">bigint.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/time.htm">time.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">integer</span>: defaultFtpControlPort <span class="keywd">is</span> 21;


<span class="comment">(**
 *  Extended [[filesys#fileSys|FileSys]] interface type for FTP file systems.
 *  This interface type allows access to FTP specific methods:
 *  [[#listDir(inout_ftpConnection,in_string)| listDir]],
 *  [[#getActiveMode(in_ftpConnection)|getActiveMode]],
 *  [[#setActiveMode(inout_ftpConnection,in_boolean)|setActiveMode]],
 *  [[#getAsciiTransfer(in_ftpConnection)|getAsciiTransfer]],
 *  [[#setAsciiTransfer(inout_ftpConnection,in_boolean)|setAsciiTransfer]].
 *  If this methods are not needed the interface type fileSys
 *  can be used instead.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: ftpFileSys <span class="keywd">is</span> <span class="keywd">sub</span> fileSys <span class="keywd">interface</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: listDir (<span class="keywd">inout</span> <span class="type">ftpFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: dirPath) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: getActiveMode (<span class="op">in</span> <span class="type">ftpFileSys</span>: fileSystem) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">proc</span>: setActiveMode (<span class="keywd">inout</span> <span class="type">ftpFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">boolean</span>: active) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: getAsciiTransfer (<span class="op">in</span> <span class="type">ftpFileSys</span>: fileSystem) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">proc</span>: setAsciiTransfer (<span class="keywd">inout</span> <span class="type">ftpFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">boolean</span>: asciiTransfer) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">proc</span>: closeFtpData (<span class="keywd">inout</span> <span class="type">ftpFileSys</span>: fileSystem) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">proc</span>: ftpResponse (<span class="keywd">inout</span> <span class="type">ftpFileSys</span>: fileSystem) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  [[#ftpFileSys|ftpFileSys]] implementation type for a connection to a FTP server.
 *  The file system methods trigger requests to the FTP server.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: ftpConnection <span class="keywd">is</span> <span class="keywd">sub</span> emptyFileSys <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">file</span>: control <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">file</span>: data <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: response <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: responseContent <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: mlstCommandAvailable <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">string</span>: ownIpAddress <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: activeMode <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: asciiTransfer <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: openDataSucceeded <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">listener</span>: dataPortListener <span class="keywd">is</span> listener.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(ftpConnection, ftpFileSys);


<span class="keywd">const</span> <span class="type">proc</span>: ftpCommand (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="comment"># writeln("&lt;- " &lt;&amp; command);</span>
    write(ftp.control, command &lt;&amp; <span class="stri">"\r\n"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: ftpResponse (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: responseCode <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    ftp.response := getln(ftp.control);
    <span class="keywd">if</span> ftp.response[4 len 1] = <span class="stri">"-"</span> <span class="keywd">then</span>
      responseCode := ftp.response[.. 3] &amp; <span class="stri">" "</span>;
      <span class="comment"># writeln("-> " &lt;&amp; ftp.response);</span>
      ftp.responseContent := <span class="stri">""</span>;
      ftp.response := getln(ftp.control);
      <span class="keywd">while</span> <span class="op">not</span> startsWith(ftp.response, responseCode) <span class="keywd">do</span>
        <span class="comment"># writeln("-> " &lt;&amp; ftp.response);</span>
        ftp.responseContent &amp;:= ftp.response;
        ftp.responseContent &amp;:= <span class="stri">'\n'</span>;
        ftp.response := getln(ftp.control);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="comment"># writeln("-> " &lt;&amp; ftp.response);</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: allowUtf8 (<span class="op">in</span> <span class="type">string</span>: inStri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: outStri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    outStri := inStri;
    <span class="keywd">block</span>
      outStri := fromUtf8(outStri);
    exception
      catch RANGE_ERROR:
        noop;
    <span class="keywd">end</span> <span class="keywd">block</span>;
    <span class="comment"># writeln("allowUtf8(" &lt;&amp; literal(inStri) &lt;&amp; ") -> " &lt;&amp; literal(outStri));</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a FTP file system at the specified host, user and port.
 *  @param hostName Either a host name ("e.g.: "www.example.org"),
 *                  or an IPv4 address in standard dot notation
 *                  (e.g.: "192.0.2.235"), or an IPv6 address in
 *                  colon notation.
 *  @param user Username to be used for the login.
 *  @param password Password to be used for the login.
 *  @param ftpControlPort Port to be used for the control connection.
 *                        FTP usually uses the port 21, but other
 *                        ports can also be specified.
 *  @return a file system that uses the FTP connection, or
 *          fileSys.value if the connection to the remote host
 *          could not be established.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ftpFileSys</span>: openFtp (<span class="op">in</span> <span class="type">string</span>: hostName, <span class="op">in</span> <span class="type">string</span>: user,
    <span class="op">in</span> <span class="type">string</span>: password, <span class="op">in</span> <span class="type">integer</span>: ftpControlPort) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">ftpFileSys</span>: newFileSys <span class="keywd">is</span> fileSys.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ftpConnection</span>: ftp <span class="keywd">is</span> ftpConnection.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ftpControlPort >= 0 <span class="op">and</span> ftpControlPort &lt;= 65535 <span class="keywd">then</span>
      ftp.control := openInetSocket(hostName, ftpControlPort);
      <span class="keywd">if</span> ftp.control &lt;> STD_NULL <span class="keywd">then</span>
        ftp.ownIpAddress := numericAddress(inetSocketAddress(getHostname, 1024));
        ftpResponse(ftp);
        <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"220"</span>) <span class="keywd">then</span>
          ftpCommand(ftp, <span class="stri">"USER "</span> &lt;&amp; user);
          ftpResponse(ftp);
          <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"331"</span>) <span class="keywd">then</span>
            ftpCommand(ftp, <span class="stri">"PASS "</span> &lt;&amp; password);
            ftpResponse(ftp);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"230"</span>) <span class="keywd">then</span>
            ftpCommand(ftp, <span class="stri">"TYPE I"</span>);
            ftpResponse(ftp);
            <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"200"</span>) <span class="keywd">then</span>
              newFileSys := toInterface(ftp);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> newFileSys = fileSys.value <span class="keywd">then</span>
          close(ftp.control);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a FTP file system at the specified host and user.
 *  This function uses port 21.
 *  @param hostName Either a host name ("e.g.: "www.example.org"),
 *                  or an IPv4 address in standard dot notation
 *                  (e.g.: "192.0.2.235"), or an IPv6 address in
 *                  colon notation.
 *  @param user Username to be used for the login.
 *  @param password Password to be used for the login.
 *  @return a file system that uses the FTP connection, or
 *          fileSys.value if the connection to the remote host
 *          could not be established.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ftpFileSys</span>: openFtp (<span class="op">in</span> <span class="type">string</span>: hostName,
    <span class="op">in</span> <span class="type">string</span>: user, <span class="op">in</span> <span class="type">string</span>: password) <span class="keywd">is</span>
  <span class="keywd">return</span> openFtp(hostName, user, password, defaultFtpControlPort);


<span class="comment">(**
 *  Open a FTP file system with the specified ''connectStri'' and port.
 *  The ''connectStri'' should be in the form
 *   user:password@hostName
 *  to specify user and password. If no password is specified the
 *  password "anonymous" is used instead:
 *   user@hostName
 *  If no user and password are specified the user "anonymous" is
 *  used together with the password "anonymous":
 *   hostName
 *  The ''hostName'' is either a host name ("e.g.: "www.example.org"),
 *  or an IPv4 address in standard dot notation (e.g.: "192.0.2.235").
 *  Operating systems supporting IPv6 may also accept an IPv6 address
 *  in colon notation.
 *  @param connectStri Connection string in one of the forms
 *         user:password@hostName user@hostName or hostName
 *         If no user is specified the user "anonymous" is used.
 *         If no password is specified the password "anonymous" is used.
 *  @return a file system that uses the FTP connection, or
 *          fileSys.value if the connection to the remote host
 *          could not be established.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ftpFileSys</span>: openFtp (<span class="op">in</span> <span class="type">string</span>: connectStri, <span class="op">in</span> <span class="type">integer</span>: ftpControlPort) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">ftpFileSys</span>: ftp <span class="keywd">is</span> fileSys.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: hostName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: user <span class="keywd">is</span> <span class="stri">"anonymous"</span>;
    <span class="keywd">var</span> <span class="type">string</span>: password <span class="keywd">is</span> <span class="stri">"anonymous"</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: atPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: colonPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    atPos := pos(connectStri, <span class="stri">'@'</span>);
    <span class="keywd">if</span> atPos &lt;> 0 <span class="keywd">then</span>
      user := connectStri[.. pred(atPos)];
      colonPos := pos(user, <span class="stri">':'</span>);
      <span class="keywd">if</span> colonPos &lt;> 0 <span class="keywd">then</span>
        password := user[succ(colonPos) ..];
        user := user[.. pred(colonPos)];
      <span class="keywd">end</span> <span class="keywd">if</span>;
      hostName := connectStri[succ(atPos) ..];
    <span class="keywd">else</span>
      hostName := connectStri;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="comment"># writeln("hostName: " &lt;&amp; hostName);</span>
    <span class="comment"># writeln("user: " &lt;&amp; user);</span>
    <span class="comment"># writeln("password: " &lt;&amp; password);</span>
    ftp := openFtp(hostName, user, password, ftpControlPort);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a FTP file system with the specified ''connectStri''.
 *  The ''connectStri'' should be in the form
 *   user:password@hostName
 *  to specify user and password. If no password is specified the
 *  password "anonymous" is used instead:
 *   user@hostName
 *  If no user and password are specified the user "anonymous" is
 *  used together with the password "anonymous":
 *   hostName
 *  This function uses the port 21 (defined as defaultFtpControlPort).
 *  The ''hostName'' is either a host name ("e.g.: "www.example.org"),
 *  or an IPv4 address in standard dot notation (e.g.: "192.0.2.235").
 *  Operating systems supporting IPv6 may also accept an IPv6 address
 *  in colon notation.
 *  @param connectStri Connection string in one of the forms
 *         user:password@hostName user@hostName or hostName
 *         If no user is specified the user "anomymous" is used.
 *         If no password is specified the password "anomymous" is used.
 *  @return a file system that uses the FTP connection, or
 *          fileSys.value if the connection to the remote host
 *          could not be established.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ftpFileSys</span>: openFtp (<span class="op">in</span> <span class="type">string</span>: connectStri) <span class="keywd">is</span>
  <span class="keywd">return</span> openFtp(connectStri, defaultFtpControlPort);


<span class="comment">(**
 *  Close a FTP connection.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"QUIT"</span>);
    ftpResponse(ftp);
    <span class="comment"># while TRUE do</span>
    <span class="comment">#   writeln(getln(ftp.control));</span>
    <span class="comment"># end while;</span>
    close(ftp.control);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: openActiveFtpData (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: dataPort <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    dataPort := rand(1024, 65535);
    ftp.dataPortListener := openInetListener(dataPort);
    listen(ftp.dataPortListener, 1);
    <span class="comment"># writeln(dataPort);</span>
    ftpCommand(ftp, <span class="stri">"PORT "</span> &lt;&amp; replace(ftp.ownIpAddress, <span class="stri">"."</span>, <span class="stri">","</span>) &lt;&amp; <span class="stri">","</span> &lt;&amp;
                         dataPort <span class="op">mdiv</span> 256 &lt;&amp; <span class="stri">","</span> &lt;&amp; dataPort <span class="op">mod</span> 256);
    ftpResponse(ftp);
    ftp.openDataSucceeded := startsWith(ftp.response, <span class="stri">"200"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: openPassiveFtpData (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: leftParenPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: rightParenPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: addrAndPort <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: dataPort <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"PASV"</span>);
    ftpResponse(ftp);
    <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"227"</span>) <span class="keywd">then</span>
      leftParenPos := pos(ftp.response, <span class="stri">"("</span>);
      rightParenPos := pos(ftp.response, <span class="stri">")"</span>);
      <span class="keywd">if</span> leftParenPos &lt;> 0 <span class="op">and</span> rightParenPos &lt;> 0 <span class="keywd">then</span>
        addrAndPort := split(ftp.response[succ(leftParenPos) .. pred(rightParenPos)], <span class="stri">","</span>);
        <span class="keywd">if</span> length(addrAndPort) = 6 <span class="keywd">then</span>
          dataPort := integer(addrAndPort[5]) * 256 + integer(addrAndPort[6]);
          <span class="comment"># writeln(dataPort);</span>
          ftp.data := openInetSocket(join(addrAndPort[ .. 4], <span class="stri">"."</span>), dataPort);
          ftp.openDataSucceeded := ftp.data &lt;> STD_NULL;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: openFtpData (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ftp.activeMode <span class="keywd">then</span>
      openActiveFtpData(ftp);
    <span class="keywd">else</span>
      openPassiveFtpData(ftp);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: prepareFtpDataCommunication (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ftp.activeMode <span class="keywd">then</span>
      <span class="comment"># writeln("wwwwwww");</span>
      ftp.data := accept(ftp.dataPortListener);
      <span class="comment"># writeln("xxxxxxx");</span>
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: closeFtpData (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ftp.activeMode <span class="keywd">then</span>
      close(ftp.dataPortListener);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    close(ftp.data);
    ftp.data := STD_NULL;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the filenames in a directory, using a FTP connection.
 *  @return an array with the file names.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: readDir (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: dirPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: fileNames <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: line <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    openFtpData(ftp);
    <span class="keywd">if</span> ftp.openDataSucceeded <span class="keywd">then</span>
      <span class="keywd">if</span> dirPath = <span class="stri">"."</span> <span class="keywd">then</span>
        ftpCommand(ftp, <span class="stri">"NLST"</span>);
      <span class="keywd">else</span>
        ftpCommand(ftp, <span class="stri">"NLST "</span> &lt;&amp; toUtf8(dirPath));
      <span class="keywd">end</span> <span class="keywd">if</span>;
      ftpResponse(ftp);
      <span class="keywd">if</span>  startsWith(ftp.response, <span class="stri">"125"</span>) <span class="op">or</span>
          startsWith(ftp.response, <span class="stri">"150"</span>) <span class="keywd">then</span>
        prepareFtpDataCommunication(ftp);
        line := allowUtf8(getln(ftp.data));
        <span class="keywd">while</span> line &lt;> <span class="stri">""</span> <span class="keywd">do</span>
          <span class="comment"># writeln(line);</span>
          fileNames &amp;:= line;
          line := allowUtf8(getln(ftp.data));
        <span class="keywd">end</span> <span class="keywd">while</span>;
        closeFtpData(ftp);
        ftpResponse(ftp);
        <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"226"</span>) <span class="keywd">then</span>
          raise FILE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> startsWith(ftp.response, <span class="stri">"500"</span>) <span class="keywd">then</span>
        ftpCommand(ftp, <span class="stri">"LIST"</span>);
        ftpResponse(ftp);
        <span class="keywd">if</span>  startsWith(ftp.response, <span class="stri">"125"</span>) <span class="op">or</span>
            startsWith(ftp.response, <span class="stri">"150"</span>) <span class="keywd">then</span>
          prepareFtpDataCommunication(ftp);
          line := allowUtf8(getln(ftp.data));
          <span class="keywd">while</span> line &lt;> <span class="stri">""</span> <span class="keywd">do</span>
            <span class="comment"># writeln(line);</span>
            fileNames &amp;:= line;
            line := allowUtf8(getln(ftp.data));
          <span class="keywd">end</span> <span class="keywd">while</span>;
          closeFtpData(ftp);
          ftpResponse(ftp);
          <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"226"</span>) <span class="keywd">then</span>
            raise FILE_ERROR;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          closeFtpData(ftp);
          raise FILE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        closeFtpData(ftp);
        raise FILE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get a directory listing, using a FTP connection.
 *  @return an array with the file names.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: listDir (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: dirPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: directoryListing <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: line <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    openFtpData(ftp);
    <span class="keywd">if</span> ftp.openDataSucceeded <span class="keywd">then</span>
      <span class="keywd">if</span> dirPath = <span class="stri">"."</span> <span class="keywd">then</span>
        ftpCommand(ftp, <span class="stri">"LIST"</span>);
      <span class="keywd">else</span>
        ftpCommand(ftp, <span class="stri">"LIST "</span> &lt;&amp; toUtf8(dirPath));
      <span class="keywd">end</span> <span class="keywd">if</span>;
      ftpResponse(ftp);
      <span class="keywd">if</span>  startsWith(ftp.response, <span class="stri">"125"</span>) <span class="op">or</span>
          startsWith(ftp.response, <span class="stri">"150"</span>) <span class="keywd">then</span>
        prepareFtpDataCommunication(ftp);
        line := allowUtf8(getln(ftp.data));
        <span class="keywd">while</span> line &lt;> <span class="stri">""</span> <span class="keywd">do</span>
          <span class="comment"># writeln(line);</span>
          directoryListing &amp;:= line;
          line := allowUtf8(getln(ftp.data));
        <span class="keywd">end</span> <span class="keywd">while</span>;
        closeFtpData(ftp);
        ftpResponse(ftp);
        <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"226"</span>) <span class="keywd">then</span>
          raise FILE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        closeFtpData(ftp);
        raise FILE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Change the current working directory of a FTP connection.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: chdir (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: dirName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> dirName = <span class="stri">".."</span> <span class="keywd">then</span>
      ftpCommand(ftp, <span class="stri">"CDUP"</span>);
    <span class="keywd">else</span>
      ftpCommand(ftp, <span class="stri">"CWD "</span> &lt;&amp; toUtf8(dirName));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    ftpResponse(ftp);
    <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"250"</span>) <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the current working directory of a FTP connection.
 *  @return the current working directory as absolute path.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getcwd (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: currentWorkingDir <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: firstQuotePos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lastQuotePos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"PWD"</span>);
    ftpResponse(ftp);
    <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"257"</span>) <span class="keywd">then</span>
      firstQuotePos := pos(ftp.response, <span class="stri">'"'</span>);
      lastQuotePos := rpos(ftp.response, <span class="stri">'"'</span>);
      <span class="keywd">if</span> firstQuotePos &lt;> 0 <span class="op">and</span> lastQuotePos &lt;> 0 <span class="keywd">then</span>
        currentWorkingDir := ftp.response[succ(firstQuotePos) .. pred(lastQuotePos)];
        currentWorkingDir := replace(allowUtf8(currentWorkingDir), <span class="stri">"\"\""</span>, <span class="stri">"\""</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the type of a file.
 *  The function does follow symbolic links. Therefore it never
 *  returns ''FILE_SYMLINK''. A return value of ''FILE_ABSENT'' does
 *  not imply that a file with this name can be created, since missing
 *  directories and invalid file names cause also ''FILE_ABSENT''.
 *  @return the type of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">fileType</span>: fileType (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">fileType</span>: aFileType <span class="keywd">is</span> FILE_ABSENT;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: lowerCaseReponseContent <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: workingDir <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ftp.mlstCommandAvailable <span class="keywd">then</span>
      ftpCommand(ftp, <span class="stri">"MLST "</span> &lt;&amp; toUtf8(fileName));
      ftpResponse(ftp);
      <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"250"</span>) <span class="keywd">then</span>
        lowerCaseReponseContent := lower(ftp.responseContent);
        <span class="keywd">if</span> pos(lowerCaseReponseContent, <span class="stri">"type=dir"</span>) &lt;> 0 <span class="keywd">then</span>
          aFileType := FILE_DIR;
        <span class="keywd">elsif</span> pos(lowerCaseReponseContent, <span class="stri">"type=file"</span>) &lt;> 0 <span class="keywd">then</span>
          aFileType := FILE_REGULAR;
        <span class="keywd">else</span>
          aFileType := FILE_UNKNOWN;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> startsWith(ftp.response, <span class="stri">"500"</span>) <span class="keywd">then</span>
        ftp.mlstCommandAvailable := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> ftp.mlstCommandAvailable <span class="keywd">then</span>
      ftpCommand(ftp, <span class="stri">"SIZE "</span> &lt;&amp; toUtf8(fileName));
      ftpResponse(ftp);
      <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"213"</span>) <span class="keywd">then</span>
        aFileType := FILE_REGULAR;
      <span class="keywd">else</span>
        workingDir := getcwd(ftp);
        ftpCommand(ftp, <span class="stri">"CWD "</span> &lt;&amp; toUtf8(fileName));
        ftpResponse(ftp);
        <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"250"</span>) <span class="keywd">then</span>
          aFileType := FILE_DIR;
          ftpCommand(ftp, <span class="stri">"CWD "</span> &lt;&amp; toUtf8(workingDir));
          ftpResponse(ftp);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the type of a file.
 *  Since in FTP symbolic links are not defined this function is
 *  identical to fileType.
 *  @return the type of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">fileType</span>: fileTypeSL (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span>
  <span class="keywd">return</span> fileType(ftp, fileName);


<span class="comment">(**
 *  Determine the file size of a file.
 *  The file size is measured in bytes.
 *  @return the size of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: fileSize (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: size <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"SIZE "</span> &lt;&amp; toUtf8(fileName));
    ftpResponse(ftp);
    <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"213"</span>) <span class="keywd">then</span>
      size := integer(trim(ftp.response[4 ..]));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the file size of a file.
 *  The file size is measured in bytes.
 *  @return the size of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: bigFileSize (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">bigInteger</span>: size <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"SIZE "</span> &lt;&amp; toUtf8(fileName));
    ftpResponse(ftp);
    <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"213"</span>) <span class="keywd">then</span>
      size := bigInteger(trim(ftp.response[4 ..]));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the modification time of a file.
 *  @return the modification time of the file.
 *  @exception RANGE_ERROR the modification time is not representable
 *             in the type ''time''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: getMTime (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">time</span>: modificationTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"MDTM "</span> &lt;&amp; toUtf8(fileName));
    ftpResponse(ftp);
    <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"213"</span>) <span class="op">and</span> isDigitString(ftp.response[5 fixLen 14]) <span class="keywd">then</span>
      modificationTime.year   := integer(trim(ftp.response[ 5 fixLen 4]));
      modificationTime.month  := integer(trim(ftp.response[ 9 fixLen 2]));
      modificationTime.day    := integer(trim(ftp.response[11 fixLen 2]));
      modificationTime.hour   := integer(trim(ftp.response[13 fixLen 2]));
      modificationTime.minute := integer(trim(ftp.response[15 fixLen 2]));
      modificationTime.second := integer(trim(ftp.response[17 fixLen 2]));
      modificationTime.micro_second := 0;
      <span class="keywd">if</span> modificationTime.month &lt; 1 <span class="op">or</span> modificationTime.month > 12 <span class="op">or</span>
          modificationTime.day &lt; 1 <span class="op">or</span> modificationTime.day >
          daysInMonth(modificationTime.year, modificationTime.month) <span class="op">or</span>
          modificationTime.hour &lt; 0 <span class="op">or</span> modificationTime.hour > 23 <span class="op">or</span>
          modificationTime.minute &lt; 0 <span class="op">or</span> modificationTime.minute > 59 <span class="op">or</span>
          modificationTime.second &lt; 0 <span class="op">or</span> modificationTime.second > 59 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">else</span>
        modificationTime := setLocalTZ(modificationTime);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the data transfer mode.
 *  @return TRUE, if the transfer mode is active, or
 *          FALSE, if the transfer mode is passive.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: getActiveMode (<span class="op">in</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span>
  <span class="keywd">return</span> ftp.activeMode;


<span class="comment">(**
 *  Set the data transfer mode to active (=TRUE) or passive (=FALSE).
 *  By default passive mode is used.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setActiveMode (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">boolean</span>: activeMode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ftp.activeMode := activeMode;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the file transfer type.
 *  @return TRUE, if the file transfer type is ASCII, or
 *          FALSE, if the file transfer type is BINARY.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: getAsciiTransfer (<span class="op">in</span> <span class="type">ftpConnection</span>: ftp) <span class="keywd">is</span>
  <span class="keywd">return</span> ftp.asciiTransfer;


<span class="comment">(**
 *  Set the file transfer type to ASCII (=TRUE) or BINARY (=FALSE).
 *  By default binary transfer is used.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setAsciiTransfer (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">boolean</span>: asciiTransfer) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> asciiTransfer <span class="keywd">then</span>
      <span class="keywd">if</span> <span class="op">not</span> ftp.asciiTransfer <span class="keywd">then</span>
        ftpCommand(ftp, <span class="stri">"TYPE A"</span>);
        ftpResponse(ftp);
        <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"200"</span>) <span class="keywd">then</span>
          ftp.asciiTransfer := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="keywd">if</span> ftp.asciiTransfer <span class="keywd">then</span>
        ftpCommand(ftp, <span class="stri">"TYPE I"</span>);
        ftpResponse(ftp);
        <span class="keywd">if</span> startsWith(ftp.response, <span class="stri">"200"</span>) <span class="keywd">then</span>
          ftp.asciiTransfer := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">type</span>: ftpDataFile <span class="keywd">is</span> <span class="keywd">sub</span> socket <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">ftpFileSys</span>: ftp <span class="keywd">is</span> ftpFileSys.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">ftpDataFile</span>: ftpDataFile (<span class="op">in</span> <span class="type">socket</span>: aSocket) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">ftpDataFile</span>: dataFile <span class="keywd">is</span> ftpDataFile.value;
  <span class="keywd">begin</span>
    dataFile.sock         := aSocket.sock;
    dataFile.addr         := aSocket.addr;
    dataFile.service      := aSocket.service;
    dataFile.acceptedFrom := aSocket.acceptedFrom;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="keywd">inout</span> <span class="type">ftpDataFile</span>: dataFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    closeFtpData(dataFile.ftp);
    ftpResponse(dataFile.ftp);
    <span class="keywd">if</span> <span class="op">not</span> startsWith(ftpConnection <span class="op">conv</span> (dataFile.ftp).response, <span class="stri">"226"</span>) <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Open a file with ''filePath'' and ''mode'' using a FTP connection.
 *  There are text modes and binary modes:
 *  *Binary modes:
 *  ** "r"   Open file for reading.
 *  ** "w"   Truncate to zero length or create file for writing.
 *  *Text modes:
 *  ** "rt"  Open file for reading.
 *  ** "wt"  Truncate to zero length or create file for writing.
 *  No other FTP functions can be used while reading and writing
 *  this file is going on. After this file has been closed other
 *  FTP functions can be used.
 *  @exception RANGE_ERROR The ''mode'' is not one of the allowed
 *             values or ''path'' does not use the standard path
 *             representation
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: open (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: dataFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: textMode <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: openForReading <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">ftpDataFile</span>: new_file <span class="keywd">is</span> ftpDataFile.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> filePath &lt;> <span class="stri">"/"</span> <span class="op">and</span> endsWith(filePath, <span class="stri">"/"</span>) <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">else</span>
      <span class="keywd">if</span> mode = <span class="stri">"r"</span> <span class="keywd">then</span>
        noop;
      <span class="keywd">elsif</span> mode = <span class="stri">"w"</span> <span class="keywd">then</span>
        openForReading := FALSE;
      <span class="keywd">elsif</span> mode = <span class="stri">"rt"</span> <span class="keywd">then</span>
        textMode := TRUE;
      <span class="keywd">elsif</span> mode = <span class="stri">"wt"</span> <span class="keywd">then</span>
        textMode := TRUE;
        openForReading := FALSE;
      <span class="keywd">else</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      setAsciiTransfer(ftp, textMode);
      openFtpData(ftp);
      <span class="keywd">if</span> ftp.openDataSucceeded <span class="keywd">then</span>
        <span class="keywd">if</span> openForReading <span class="keywd">then</span>
          ftpCommand(ftp, <span class="stri">"RETR "</span> &lt;&amp; toUtf8(filePath));
        <span class="keywd">else</span>
          ftpCommand(ftp, <span class="stri">"STOR "</span> &lt;&amp; toUtf8(filePath));
        <span class="keywd">end</span> <span class="keywd">if</span>;
        ftpResponse(ftp);
        <span class="keywd">if</span>  startsWith(ftp.response, <span class="stri">"125"</span>) <span class="op">or</span>
            startsWith(ftp.response, <span class="stri">"150"</span>) <span class="keywd">then</span>
          prepareFtpDataCommunication(ftp);
          new_file := ftpDataFile(socket <span class="op">conv</span> (ftp.data));
          new_file.ftp := ftp;
          dataFile := toInterface(new_file);
        <span class="keywd">else</span>
          closeFtpData(ftp);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the contents of file ''filePath'' using a FTP connection.
 *  @return the specified file as string.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getFile (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: fileContent <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    setAsciiTransfer(ftp, FALSE);
    openFtpData(ftp);
    <span class="keywd">if</span> ftp.openDataSucceeded <span class="keywd">then</span>
      ftpCommand(ftp, <span class="stri">"RETR "</span> &lt;&amp; toUtf8(filePath));
      ftpResponse(ftp);
      <span class="keywd">if</span>  startsWith(ftp.response, <span class="stri">"125"</span>) <span class="op">or</span>
          startsWith(ftp.response, <span class="stri">"150"</span>) <span class="keywd">then</span>
        prepareFtpDataCommunication(ftp);
        buffer := gets(ftp.data, 1000000);
        <span class="keywd">while</span> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
          <span class="comment"># writeln(literal(buffer));</span>
          <span class="comment"># writeln(length(buffer));</span>
          fileContent &amp;:= buffer;
          buffer := gets(ftp.data, 1000000);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="comment"># writeln(literal(fileContent));</span>
        <span class="comment"># writeln(length(fileContent));</span>
        closeFtpData(ftp);
        ftpResponse(ftp);
        <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"226"</span>) <span class="keywd">then</span>
          raise FILE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        closeFtpData(ftp);
        raise FILE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write ''stri'' to remote file ''filePath'' using a FTP connection.
 *  If the file exists already, it is overwritten.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: putFile (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setAsciiTransfer(ftp, FALSE);
    openFtpData(ftp);
    <span class="keywd">if</span> ftp.openDataSucceeded <span class="keywd">then</span>
      ftpCommand(ftp, <span class="stri">"STOR "</span> &lt;&amp; toUtf8(filePath));
      ftpResponse(ftp);
      <span class="keywd">if</span>  startsWith(ftp.response, <span class="stri">"125"</span>) <span class="op">or</span>
          startsWith(ftp.response, <span class="stri">"150"</span>) <span class="keywd">then</span>
        prepareFtpDataCommunication(ftp);
        write(ftp.data, stri);
        closeFtpData(ftp);
        ftpResponse(ftp);
        <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"226"</span>) <span class="keywd">then</span>
          raise FILE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        closeFtpData(ftp);
        raise FILE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Remove a file using a FTP connection.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: removeFile (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"DELE "</span> &lt;&amp; toUtf8(fileName));
    ftpResponse(ftp);
    <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"257"</span>) <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Rename a file using a FTP connection.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: moveFile (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"RNFR "</span> &lt;&amp; toUtf8(sourcePath));
    ftpResponse(ftp);
    <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"350"</span>) <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">else</span>
      ftpCommand(ftp, <span class="stri">"RNTO "</span> &lt;&amp; toUtf8(destPath));
      ftpResponse(ftp);
      <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"250"</span>) <span class="keywd">then</span>
        raise FILE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Creates a directory on a remote host using a FTP connection.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: makeDir (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: dirName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"MKD "</span> &lt;&amp; toUtf8(dirName));
    ftpResponse(ftp);
    <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"257"</span>) <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Deletes an empty directory using a FTP connection.
 *  @exception FILE_ERROR The remote host returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: rmdir (<span class="keywd">inout</span> <span class="type">ftpConnection</span>: ftp, <span class="op">in</span> <span class="type">string</span>: dirName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    ftpCommand(ftp, <span class="stri">"RMD "</span> &lt;&amp; toUtf8(dirName));
    ftpResponse(ftp);
    <span class="keywd">if</span> <span class="op">not</span> startsWith(ftp.response, <span class="stri">"257"</span>) <span class="keywd">then</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: splitFtpLocation (<span class="op">in</span> <span class="type">string</span>: location, <span class="keywd">inout</span> <span class="type">string</span>: connectStri,
    <span class="keywd">inout</span> <span class="type">integer</span>: portNumber, <span class="keywd">inout</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: colonPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("splitFtpLocation: " &lt;&amp; location);</span>
    slashPos := pos(location, <span class="stri">"/"</span>);
    <span class="keywd">if</span> slashPos = 0 <span class="keywd">then</span>
      connectStri := location;
      path     := <span class="stri">""</span>;
    <span class="keywd">else</span>
      connectStri := location[.. pred(slashPos)];
      path := location[succ(slashPos) ..];
    <span class="keywd">end</span> <span class="keywd">if</span>;
    colonPos := pos(connectStri, <span class="stri">":"</span>);
    <span class="keywd">if</span> colonPos &lt;> 0 <span class="op">and</span> isDigitString(connectStri[succ(colonPos) ..]) <span class="keywd">then</span>
      portNumber := integer(connectStri[succ(colonPos) ..]);
      connectStri := connectStri[.. pred(colonPos)];
    <span class="keywd">else</span>
      portNumber := defaultFtpControlPort;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getFtp (<span class="op">in</span> <span class="type">string</span>: connectStri, <span class="op">in</span> <span class="type">integer</span>: portNumber, <span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: fileContent <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ftpFileSys</span>: ftp <span class="keywd">is</span> fileSys.value;
  <span class="keywd">begin</span>
    ftp := openFtp(connectStri, portNumber);
    <span class="keywd">if</span> ftp &lt;> fileSys.value <span class="keywd">then</span>
      fileContent := getFile(ftp, path);
      close(ftp);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get data specified by a ''location'' using the FTP protocol.
 *  The contents of the file "/Public/UNIDATA/UnicodeData.txt" can be
 *  obtained from the computer ''ftp.unicode.org'' with:
 *   getFtp("ftp.unicode.org/Public/UNIDATA/UnicodeData.txt")
 *  User and password can be specified with:
 *   getFtp("user:password@www.example.org/pub/read_me.txt")
 *  @param location Url without ftp:// at the beginning.
 *  @return the string of data found, or "" if nothing was found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getFtp (<span class="op">in</span> <span class="type">string</span>: location) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: fileContent <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: connectStri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: portNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: path <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    splitFtpLocation(location, connectStri, portNumber, path);
    fileContent := getFtp(connectStri, portNumber, path);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
