<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pgm.s7i       Support for PGM (portable graymap) image format   *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/scanfile.htm">scanfile.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bytedata.htm">bytedata.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/keybd.htm">keybd.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pixelimage.htm">pixelimage.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">string</span>: PGM_ASCII_MAGIC  <span class="keywd">is</span> <span class="stri">"P2"</span>;
<span class="keywd">const</span> <span class="type">string</span>: PGM_BINARY_MAGIC <span class="keywd">is</span> <span class="stri">"P5"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: readPgmAsciiImage (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image,
    <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: maximumColorValue,
    <span class="keywd">inout</span> <span class="type">file</span>: pgmFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: factor <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: luminance <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    factor := pred(2 ** 16) <span class="op">div</span> maximumColorValue;
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
        skipWhiteSpace(pgmFile);
        luminance := integer(getDigits(pgmFile)) * factor;
        image[line][column] := rgbPixel(luminance, luminance, luminance);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: readPgmBinaryImage (<span class="keywd">inout</span> <span class="type">pixelImage</span>: image,
    <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">integer</span>: width, <span class="op">in</span> <span class="type">integer</span>: maximumColorValue,
    <span class="keywd">inout</span> <span class="type">file</span>: pgmFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: factor <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: pixelData <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: byteIndex <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: luminance <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    factor := pred(2 ** 16) <span class="op">div</span> maximumColorValue;
    <span class="keywd">if</span> maximumColorValue &lt;= 255 <span class="keywd">then</span>
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="keywd">do</span>
        pixelData := gets(pgmFile, width);
        byteIndex := 1;
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
          luminance := ord(pixelData[byteIndex]) * factor;
          image[line][column] := rgbPixel(luminance, luminance, luminance);
          incr(byteIndex);
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">else</span>
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="keywd">do</span>
        pixelData := gets(pgmFile, width * 2);
        byteIndex := 1;
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
          luminance :=
              bytes2Int(pixelData[byteIndex fixLen 2], UNSIGNED, BE) * factor;
          image[line][column] := rgbPixel(luminance, luminance, luminance);
          byteIndex +:= 2;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads a PGM (portable graymap) image file into a pixmap.
 *  @param pgmFile File that contains a PGM image.
 *  @return A pixmap with the PGM image, or
 *          PRIMITIVE_WINDOW.value if the file does
 *          not contain a PGM magic number.
 *  @exception RANGE_ERROR The file is not in the PGM file format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: readPgm (<span class="keywd">inout</span> <span class="type">file</span>: pgmFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: magic <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: maximumColorValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">pixelImage</span>: image <span class="keywd">is</span> pixelImage.value;
  <span class="keywd">begin</span>
    magic := gets(pgmFile, length(PGM_ASCII_MAGIC));
    <span class="keywd">if</span> magic = PGM_ASCII_MAGIC <span class="op">or</span> magic = PGM_BINARY_MAGIC <span class="keywd">then</span>
      pgmFile.bufferChar := getc(pgmFile);
      skipWhiteSpace(pgmFile);
      <span class="keywd">while</span> pgmFile.bufferChar = <span class="stri">'#'</span> <span class="keywd">do</span>
        skipLineComment(pgmFile);
        pgmFile.bufferChar := getc(pgmFile);
        skipWhiteSpace(pgmFile);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      width := integer(getDigits(pgmFile));
      skipWhiteSpace(pgmFile);
      <span class="keywd">while</span> pgmFile.bufferChar = <span class="stri">'#'</span> <span class="keywd">do</span>
        skipLineComment(pgmFile);
        pgmFile.bufferChar := getc(pgmFile);
        skipWhiteSpace(pgmFile);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      height := integer(getDigits(pgmFile));
      skipWhiteSpace(pgmFile);
      <span class="keywd">while</span> pgmFile.bufferChar = <span class="stri">'#'</span> <span class="keywd">do</span>
        skipLineComment(pgmFile);
        pgmFile.bufferChar := getc(pgmFile);
        skipWhiteSpace(pgmFile);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      maximumColorValue := integer(getDigits(pgmFile));
      image := pixelImage[.. height] <span class="op">times</span>
               pixelArray[.. width] <span class="op">times</span> pixel.value;
      <span class="keywd">if</span> magic = PGM_ASCII_MAGIC <span class="keywd">then</span>
        readPgmAsciiImage(image, height, width, maximumColorValue,
                          pgmFile);
      <span class="keywd">else</span>
        readPgmBinaryImage(image, height, width, maximumColorValue,
                           pgmFile);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      pixmap := getPixmap(image);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads a PGM file with the given ''pgmFileName'' into a pixmap.
 *  @param pgmFileName Name of the PGM file.
 *  @return A pixmap with the PGM image, or
 *          PRIMITIVE_WINDOW.value if the file cannot be opened or
 *          does not contain a PGM magic number.
 *  @exception RANGE_ERROR The file is not in the PGM file format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: readPgm (<span class="op">in</span> <span class="type">string</span>: pgmFileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: pgmFile <span class="keywd">is</span> STD_NULL;
   <span class="keywd">begin</span>
    pgmFile := open(pgmFileName, <span class="stri">"r"</span>);
    <span class="keywd">if</span> pgmFile &lt;> STD_NULL <span class="keywd">then</span>
      pixmap := readPgm(pgmFile);
      close(pgmFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Converts a pixmap into a string in PGM format.
 *  @param pixmap Pixmap to be converted.
 *  @return a string with data in PGM format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, PGM) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> PGM_BINARY_MAGIC;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">pixelImage</span>: image <span class="keywd">is</span> pixelImage.value;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">pixel</span>: pix <span class="keywd">is</span> pixel.value;
    <span class="keywd">var</span> <span class="type">color</span>: col <span class="keywd">is</span> color.value;
    <span class="keywd">var</span> <span class="type">integer</span>: luminance <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    height := height(pixmap);
    width := width(pixmap);
    stri &amp;:= <span class="stri">"\n"</span> &lt;&amp; width &lt;&amp; <span class="stri">" "</span> &lt;&amp; height &lt;&amp; <span class="stri">"\n255\n"</span>;
    image := getPixelImage(pixmap);
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="keywd">do</span>
      <span class="keywd">for</span> pix <span class="keywd">range</span> image[line] <span class="keywd">do</span>
        col := pixelToColor(pix);
        luminance := round(0.299 * float(col.redLight) +
                           0.587 * float(col.greenLight) +
                           0.114 * float(col.blueLight));
        luminance := luminance &lt; 0 ? 0 :
                     luminance > 65535 ? 65535 : luminance;
        stri &amp;:= chr(luminance <span class="op">mdiv</span> 256);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writePgm (<span class="op">in</span> <span class="type">string</span>: pgmFileName, <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: pgmFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    pgmFile := open(pgmFileName, <span class="stri">"w"</span>);
    <span class="keywd">if</span> pgmFile &lt;> STD_NULL <span class="keywd">then</span>
      write(pgmFile, str(pixmap, PGM));
      close(pgmFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
