<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pic_util.s7i  Picture utility functions                         *)</span>
<span class="comment">(*  Copyright (C) 2013  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;


<span class="comment">(**
 *  Map a character to a pixel color.
 *  This is used for picture patterns, a simple way to describe graphic
 *  images as readable text.
 *  @return the color that corresponds to the given character ch.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>: charColor (<span class="op">in</span> <span class="type">char</span>: ch, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">color</span>: col <span class="keywd">is</span> black;
  <span class="keywd">begin</span>
    <span class="keywd">case</span> ch <span class="keywd">of</span>
      <span class="keywd">when</span> {<span class="stri">' '</span>}: col := background;
      <span class="keywd">when</span> {<span class="stri">'R'</span>}: col := light_red;
      <span class="keywd">when</span> {<span class="stri">'G'</span>}: col := light_green;
      <span class="keywd">when</span> {<span class="stri">'B'</span>}: col := light_blue;
      <span class="keywd">when</span> {<span class="stri">'Y'</span>}: col := yellow;
      <span class="keywd">when</span> {<span class="stri">'M'</span>}: col := light_magenta;
      <span class="keywd">when</span> {<span class="stri">'O'</span>}: col := orange;
      <span class="keywd">when</span> {<span class="stri">'r'</span>}: col := dark_red;
      <span class="keywd">when</span> {<span class="stri">'g'</span>}: col := dark_green;
      <span class="keywd">when</span> {<span class="stri">'n'</span>}: col := dark_blue;
      <span class="keywd">when</span> {<span class="stri">'m'</span>}: col := dark_magenta;
      <span class="keywd">when</span> {<span class="stri">'c'</span>}: col := light_cyan;
      <span class="keywd">when</span> {<span class="stri">'L'</span>}: col := lavender;
      <span class="keywd">when</span> {<span class="stri">'W'</span>}: col := white;
      <span class="keywd">when</span> {<span class="stri">'X'</span>}: col := black;
      <span class="keywd">when</span> {<span class="stri">'x'</span>}: col := light_gray;
      <span class="keywd">when</span> {<span class="stri">'y'</span>}: col := middle_gray;
      <span class="keywd">when</span> {<span class="stri">'d'</span>}: col := dark_gray;
      <span class="keywd">when</span> {<span class="stri">'b'</span>}: col := brown;
      <span class="keywd">when</span> {<span class="stri">'p'</span>}: col := pink;
      <span class="keywd">when</span> {<span class="stri">'P'</span>}: col := light_pink;
      <span class="keywd">when</span> {<span class="stri">'i'</span>}: col := mint;
      <span class="keywd">when</span> {<span class="stri">'f'</span>}: col := forestgreen;
      <span class="keywd">when</span> {<span class="stri">'l'</span>}: col := middle_blue;
      <span class="keywd">otherwise</span>:  col := black;
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a picture pattern into a pixmap.
 *  A picture pattern is a simple way to describe graphic images as
 *  readable text. It is an array of strings,  where every character
 *  describes the color of a pixel.
 *  @return the result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: createPixmap (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: pattern,
    <span class="op">in</span> <span class="type">integer</span>: scale, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    height := length(pattern);
    width := length(pattern[1]);
    pixmap := newPixmap(width * scale, height * scale);
    clear(pixmap, background);
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
        rect(pixmap, pred(column) * scale, pred(line) * scale,
            scale, scale, charColor(pattern[line][column], background));
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Draws a scaled pattern to a position at a window.
 *  The upper left corner of the pattern is drawn to (xPos, yPos).
 *  The pattern is drawn in horizontal lines from the middle upward
 *  and downward. This is done for better appearance at slow
 *  computers.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: drawPattern (<span class="keywd">inout</span> <span class="type">PRIMITIVE_WINDOW</span>: win, <span class="op">in</span> <span class="type">integer</span>: xPos,
    <span class="op">in</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: pattern, <span class="op">in</span> <span class="type">integer</span>: scale,
    <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lin <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: xPosition <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPosition1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPosition2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    height := length(pattern);
    width := length(pattern[1]);
    <span class="keywd">for</span> lin <span class="keywd">range</span> 1 <span class="keywd">to</span> height <span class="op">mdiv</span> 2 <span class="keywd">do</span>
      xPosition := xPos;
      yPosition1 := yPos + (height <span class="op">mdiv</span> 2 - lin) * scale;
      yPosition2 := yPos + pred(height <span class="op">mdiv</span> 2 + lin) * scale;
      line1 := succ(height <span class="op">mdiv</span> 2 - lin);
      line2 := height <span class="op">mdiv</span> 2 + lin;
      <span class="keywd">for</span> col <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
        rect(win, xPosition,
            yPosition1,
            scale, scale,
            charColor(pattern[line1][col], background));
        rect(win, xPosition,
            yPosition2,
            scale, scale,
            charColor(pattern[line2][col], background));
        xPosition +:= scale;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
