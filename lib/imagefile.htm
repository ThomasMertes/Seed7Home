<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  imagefile.s7i  Support for various image file formats.          *)</span>
<span class="comment">(*  Copyright (C) 2021, 2022  Thomas Mertes                         *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/png.htm">png.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/gif.htm">gif.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/jpeg.htm">jpeg.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bmp.htm">bmp.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/ico.htm">ico.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/ppm.htm">ppm.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/tiff.htm">tiff.s7i</a>"</span>;


<span class="comment">(**
 *  Determine if ''fileName'' uses an image extension.
 *  Image extensions are .png, .gif, .jpeg, .jpg, .ppm, .bpm, .ico .tiff and .tif.
 *  @param imageFileName Name of the image file.
 *  @return TRUE if ''fileName'' ends with an image extension,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasImageExtension (<span class="op">in</span> <span class="keywd">var</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: hasImageExtension <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    fileName := lower(fileName);
    hasImageExtension := endsWith(fileName, <span class="stri">".png"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".gif"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".jpeg"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".jpg"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".ppm"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".bmp"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".ico"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".tiff"</span>) <span class="op">or</span>
                         endsWith(fileName, <span class="stri">".tif"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads an image file into a pixmap.
 *  [[bmp|BMP]], [[gif|GIF]], [[ico|ICO]], [[jpeg|JPEG]],
 *  [[png|PNG]], [[ppm|PPM]] and [[tiff|TIFF]] images are supported.
 *  The file is checked for magic numbers and the corresponding read
 *  function is used, to read the actual image.
 *  @param imageFile File that contains an image.
 *  @return A pixmap with the image, or
 *          PRIMITIVE_WINDOW.value if the file is not in a valid
 *          image file format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: readImage (<span class="keywd">inout</span> <span class="type">file</span>: imageFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: magic <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">block</span>
      magic := gets(imageFile, length(PPM_MAGIC));
      <span class="keywd">if</span> magic = BMP_MAGIC <span class="keywd">then</span>
        seek(imageFile, 1);
        pixmap := readBmp(imageFile);
      <span class="keywd">elsif</span> magic = PPM_MAGIC <span class="keywd">then</span>
        seek(imageFile, 1);
        pixmap := readPpm(imageFile);
      <span class="keywd">else</span>
        magic &amp;:= gets(imageFile, length(JPEG_MAGIC) - length(PPM_MAGIC));
        <span class="keywd">if</span> magic = JPEG_MAGIC <span class="keywd">then</span>
          seek(imageFile, 1);
          pixmap := readJpeg(imageFile);
        <span class="keywd">else</span>
          magic &amp;:= gets(imageFile, length(ICO_MAGIC) - length(JPEG_MAGIC));
          <span class="keywd">if</span> magic = ICO_MAGIC <span class="keywd">then</span>
            seek(imageFile, 1);
            pixmap := readIco(imageFile);
          <span class="keywd">elsif</span> magic = TIFF_MAGIC_LE <span class="op">or</span> magic = TIFF_MAGIC_BE <span class="keywd">then</span>
            seek(imageFile, 1);
            pixmap := readTiff(imageFile);
          <span class="keywd">else</span>
            magic &amp;:= gets(imageFile, length(GIF_MAGIC_87) - length(ICO_MAGIC));
            <span class="keywd">if</span> magic = GIF_MAGIC_87 <span class="op">or</span> magic = GIF_MAGIC_89 <span class="keywd">then</span>
              seek(imageFile, 1);
              pixmap := readGif(imageFile);
            <span class="keywd">else</span>
              magic &amp;:= gets(imageFile, length(PNG_MAGIC) - length(GIF_MAGIC_87));
              <span class="keywd">if</span> magic = PNG_MAGIC <span class="keywd">then</span>
                seek(imageFile, 1);
                pixmap := readPng(imageFile);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    exception
      <span class="keywd">otherwise</span>: noop;
    <span class="keywd">end</span> <span class="keywd">block</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads an image file with the given ''imageFileName'' into a pixmap.
 *  [[bmp|BMP]], [[gif|GIF]], [[ico|ICO]], [[jpeg|JPEG]],
 *  [[png|PNG]], [[ppm|PPM]] and [[tiff|TIFF]] images are supported.
 *  The file is checked for magic numbers and the corresponding read
 *  function is used, to read the actual image. The file extension of
 *  ''imageFileName'' is not used to decide about the image file type.
 *  @param imageFileName Name of the image file.
 *  @return A pixmap with the image, or
 *          PRIMITIVE_WINDOW.value if the file cannot be opened or
 *          is not in a valid image file format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: readImage (<span class="op">in</span> <span class="type">string</span>: imageFileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: imageFile <span class="keywd">is</span> STD_NULL;
   <span class="keywd">begin</span>
    imageFile := open(imageFileName, <span class="stri">"r"</span>);
    <span class="keywd">if</span> imageFile &lt;> STD_NULL <span class="keywd">then</span>
      pixmap := readImage(imageFile);
      close(imageFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
