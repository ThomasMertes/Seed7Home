<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  reference.s7i   Reference to object support library             *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  The type ''reference'' describes a reference to any object.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: reference <span class="keywd">is</span> subtype object;


IN_PARAM_IS_VALUE(reference);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">reference</span>: dest) ::= (<span class="op">in</span> <span class="type">reference</span>: source)           <span class="keywd">is</span> action <span class="stri">"REF_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">reference</span>: aValue)                            <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">reference</span>: dest) := (<span class="op">in</span> <span class="type">reference</span>: source)          <span class="keywd">is</span> action <span class="stri">"REF_CPY"</span>;
<span class="comment">(* Deactivated since it allows 'reference' := anything which is against type checking *)</span>
<span class="comment">(* const proc: (inout reference: dest) := (in object: source)          is action "REF_MKREF"; *)</span>

<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: _GENERATE_NIL                                    <span class="keywd">is</span> action <span class="stri">"REF_NIL"</span>;


<span class="comment">(**
 *  Reference to no element.
 *)</span>
<span class="keywd">const</span> <span class="type">reference</span>: NIL                                                   <span class="keywd">is</span> _GENERATE_NIL;


<span class="comment">(**
 *  Default value of ''reference'' (NIL).
 *)</span>
<span class="keywd">const</span> <span class="type">reference</span>: (attr reference) . value                              <span class="keywd">is</span> NIL;


<span class="comment">(**
 *  Check if two references are equal.
 *  @return TRUE if both references are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">reference</span>: ref1) = (<span class="op">in</span> <span class="type">reference</span>: ref2)        <span class="keywd">is</span> action <span class="stri">"REF_EQ"</span>;


<span class="comment">(**
 *  Check if two references are equal.
 *  @return FALSE if both references are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">reference</span>: ref1) &lt;> (<span class="op">in</span> <span class="type">reference</span>: ref2)       <span class="keywd">is</span> action <span class="stri">"REF_NE"</span>;


<span class="comment">(**
 *  Compare two references.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">reference</span>: ref1, <span class="op">in</span> <span class="type">reference</span>: ref2)   <span class="keywd">is</span> action <span class="stri">"REF_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a ''reference''.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">reference</span>: aReference)                <span class="keywd">is</span> action <span class="stri">"REF_HASHCODE"</span>;


<span class="comment">(**
 *  Convert a ''reference'' to a [[string]].
 *  @return the [[string]] result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="keywd">ref</span> <span class="type">reference</span>: aReference)                     <span class="keywd">is</span> action <span class="stri">"REF_STR"</span>;


<span class="comment">(**
 *  Get the type of the referenced object.
 *  @return the type of the object referenced by ''aReference''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: getType (<span class="op">in</span> <span class="type">reference</span>: aReference)                    <span class="keywd">is</span> action <span class="stri">"REF_TYPE"</span>;


<span class="comment">(**
 *  Set the type of the object 'aReference' to 'aType'.
 *  @exception RANGE_ERROR If 'aReference' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setType (<span class="op">in</span> <span class="type">reference</span>: aReference, <span class="op">in</span> <span class="type">type</span>: aType)         <span class="keywd">is</span> action <span class="stri">"REF_SETTYPE"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: is_symb (<span class="op">in</span> <span class="type">reference</span>: aReference)                 <span class="keywd">is</span> action <span class="stri">"REF_ISSYMB"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">f_param</span>: symb (<span class="op">in</span> <span class="type">reference</span>: aReference)                    <span class="keywd">is</span> action <span class="stri">"REF_SYMB"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr type)        <span class="keywd">is</span> action <span class="stri">"TYP_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: getfunc (<span class="op">in</span> <span class="type">expr</span> <span class="keywd">param</span>)                          <span class="keywd">is</span> action <span class="stri">"DCL_GETFUNC"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: getobj (<span class="op">in</span> <span class="type">expr</span> <span class="keywd">param</span>)                           <span class="keywd">is</span> action <span class="stri">"DCL_GETOBJ"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: TRACE_REF (<span class="op">in</span> <span class="type">reference</span>: aReference) <span class="keywd">is</span>  action <span class="stri">"REF_TRACE"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: get_type (<span class="op">in</span> <span class="type">reference</span>: type_ref) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: aType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> type_ref &lt;> NIL <span class="op">and</span> getType(type_ref) = type <span class="keywd">then</span>
      aType := getValue(type_ref, type);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
