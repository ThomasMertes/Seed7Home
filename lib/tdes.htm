<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  tdes.s7i      TDES (Triple DES) cipher support.                 *)</span>
<span class="comment">(*  Copyright (C) 2014, 2015, 2023  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bin32.htm">bin32.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/cipher.htm">cipher.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/des.htm">des.s7i</a>"</span>;


<span class="comment">(**
 *  [[cipher|cipherState]] implementation type describing the state of a TDES cipher.
 *  The data is encrypted / decrypted with the TDES (Triple DES)
 *  block cipher.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: tdesState <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">bin32</span>: encryptionSubKey1 <span class="keywd">is</span> 0 <span class="op">times</span> bin32.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">bin32</span>: encryptionSubKey2 <span class="keywd">is</span> 0 <span class="op">times</span> bin32.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">bin32</span>: encryptionSubKey3 <span class="keywd">is</span> 0 <span class="op">times</span> bin32.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">bin32</span>: decryptionSubKey1 <span class="keywd">is</span> 0 <span class="op">times</span> bin32.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">bin32</span>: decryptionSubKey2 <span class="keywd">is</span> 0 <span class="op">times</span> bin32.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">bin32</span>: decryptionSubKey3 <span class="keywd">is</span> 0 <span class="op">times</span> bin32.value;
    <span class="keywd">var</span> <span class="type">string</span>: cipherBlock <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(tdesState, cipherState);


<span class="comment">(**
 *  Block size used by the TDES (Triple DES) block cipher.
 *  @return the block size used by the TDES cipher.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: blockSize (TDES) <span class="keywd">is</span> 8;


<span class="comment">(**
 *  Set key and initialization vector for the TDES (Triple DES) block cipher.
 *  @param desKey The key to be used for TDES.
 *  @param initializationVector The initialisation vector (IV) for TDES.
 *  @return the TDES (Triple DES) cipher state.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">tdesState</span>: setTdesKey (<span class="op">in</span> <span class="type">string</span>: desKey, <span class="op">in</span> <span class="type">string</span>: initializationVector) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">tdesState</span>: state <span class="keywd">is</span> tdesState.value;
  <span class="keywd">begin</span>
    state.encryptionSubKey1 := setDesKey(desKey[1 fixLen 8]);
    state.decryptionSubKey1 := reverseKeyScheduleOrder(state.encryptionSubKey1);
    state.encryptionSubKey2 := setDesKey(desKey[9 fixLen 8]);
    state.decryptionSubKey2 := reverseKeyScheduleOrder(state.encryptionSubKey2);
    state.encryptionSubKey3 := setDesKey(desKey[17 fixLen 8]);
    state.decryptionSubKey3 := reverseKeyScheduleOrder(state.encryptionSubKey3);
    state.cipherBlock := initializationVector;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set key and initialization vector for the TDES (Triple DES) block cipher.
 *  @param cipherKey The key to be used for TDES.
 *  @param initializationVector The initialisation vector (IV) for TDES.
 *  @return the initial ''cipherState'' of a TDES cipher.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">cipherState</span>: setCipherKey (TDES, <span class="op">in</span> <span class="type">string</span>: cipherKey,
    <span class="op">in</span> <span class="type">string</span>: initializationVector) <span class="keywd">is</span>
  <span class="keywd">return</span> toInterface(setTdesKey(cipherKey, initializationVector));


<span class="comment">(**
 *  Encode a string with the TDES (Triple DES) block cipher.
 *  @return the encoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encode (<span class="keywd">inout</span> <span class="type">tdesState</span>: state, <span class="op">in</span> <span class="type">string</span>: plaintext) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: encoded <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: subIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: dataBlock <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: cipherBlock <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(plaintext) step blockSize(TDES) <span class="keywd">do</span>
      dataBlock := <span class="stri">""</span>;
      <span class="keywd">for</span> subIndex <span class="keywd">range</span> 1 <span class="keywd">to</span> blockSize(TDES) <span class="keywd">do</span>
        dataBlock &amp;:= chr(ord(bin32(plaintext[pred(index + subIndex)]) >&lt;
                              bin32(state.cipherBlock[subIndex])));
      <span class="keywd">end</span> <span class="keywd">for</span>;
      cipherBlock := processDesBlock(state.encryptionSubKey3,
                     processDesBlock(state.decryptionSubKey2,
                     processDesBlock(state.encryptionSubKey1, dataBlock)));
      state.cipherBlock := cipherBlock;
      encoded &amp;:= cipherBlock;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decode a string with the TDES (Triple DES) block cipher.
 *  @return the decoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: decode (<span class="keywd">inout</span> <span class="type">tdesState</span>: state, <span class="op">in</span> <span class="type">string</span>: encoded) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: plaintext <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: subIndex <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: cipherBlock <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: dataBlock <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: plainBlock <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(encoded) step blockSize(TDES) <span class="keywd">do</span>
      cipherBlock := encoded[index fixLen blockSize(TDES)];
      dataBlock := processDesBlock(state.decryptionSubKey1,
                   processDesBlock(state.encryptionSubKey2,
                   processDesBlock(state.decryptionSubKey3, cipherBlock)));
      <span class="keywd">for</span> subIndex <span class="keywd">range</span> 1 <span class="keywd">to</span> blockSize(TDES) <span class="keywd">do</span>
        plaintext &amp;:= chr(ord(bin32(dataBlock[subIndex]) >&lt;
                              bin32(state.cipherBlock[subIndex])));
      <span class="keywd">end</span> <span class="keywd">for</span>;
      state.cipherBlock := cipherBlock;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
