<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  gethttps.s7i  Support to get data with the HTTPS protocol       *)</span>
<span class="comment">(*  Copyright (C) 2013  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/gethttp.htm">gethttp.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/tls.htm">tls.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openHttps (<span class="op">in</span> <span class="type">httpLocation</span>: locationData) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("openHttps: " &lt;&amp; literal(locationData.serverName) &lt;&amp; " " &lt;&amp; locationData.portNumber);</span>
    <span class="comment"># writeln(locationData.hostName &lt;&amp; ":" &lt;&amp; locationData.portNumber &lt;&amp; "/" &lt;&amp; locationData.path);</span>
    <span class="comment"># writeln("params=" &lt;&amp; locationData.params);</span>
    <span class="keywd">if</span> locationData.httpsProtocol <span class="keywd">then</span>
      sock := openTlsSocket(locationData.serverName, locationData.portNumber);
    <span class="keywd">else</span>
      sock := openInetSocket(locationData.serverName, locationData.portNumber);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> sock &lt;> STD_NULL <span class="keywd">then</span>
      sendGet(sock, locationData);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openHttps (<span class="op">in</span> <span class="type">string</span>: serverName, <span class="op">in</span> <span class="type">integer</span>: serverPortNumber,
    <span class="op">in</span> <span class="type">string</span>: location) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">httpLocation</span>: locationData <span class="keywd">is</span> httpLocation.value;
  <span class="keywd">begin</span>
    locationData := getHttpLocation(location, httpsDefaultPort);
    locationData.httpsProtocol := TRUE;
    locationData.serverName := serverName;
    locationData.portNumber := serverPortNumber;
    sock := openHttps(locationData);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openHttps (<span class="op">in</span> <span class="type">string</span>: location) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">httpLocation</span>: locationData <span class="keywd">is</span> httpLocation.value;
  <span class="keywd">begin</span>
    locationData := getHttpLocation(location, httpsDefaultPort);
    locationData.httpsProtocol := TRUE;
    <span class="keywd">if</span> proxyServer &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      locationData.serverName := proxyServer;
      locationData.portNumber := proxyHttpPort;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    sock := openHttps(locationData);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getHttps (<span class="op">in</span> <span class="type">string</span>: serverName, <span class="op">in</span> <span class="type">integer</span>: portNumber, <span class="op">in</span> <span class="type">string</span>: url) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: data <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">httpLocation</span>: locationData <span class="keywd">is</span> httpLocation.value;
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: statusCode <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: okay <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: repeatCount <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    locationData := getHttpLocation(url, httpDefaultPort);
    locationData.httpsProtocol := TRUE;
    locationData.serverName := serverName;
    locationData.portNumber := portNumber;
    <span class="keywd">repeat</span>
      okay := TRUE;
      sock := openHttps(locationData);
      <span class="keywd">if</span> sock &lt;> STD_NULL <span class="keywd">then</span>
        statusCode := getHttpStatusCode(sock);
        <span class="comment"># writeln("statusCode: " &lt;&amp; statusCode);</span>
        <span class="keywd">if</span> statusCode = <span class="stri">"301"</span> <span class="op">or</span> statusCode = <span class="stri">"302"</span> <span class="op">or</span>
            statusCode = <span class="stri">"303"</span> <span class="op">or</span> statusCode = <span class="stri">"307"</span> <span class="keywd">then</span>
          locationData := getHttpLocation(locationData, sock);
          close(sock);
          sock := STD_NULL;
          okay := FALSE;
          incr(repeatCount);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> okay <span class="op">or</span> repeatCount > 5;
    <span class="keywd">if</span> sock &lt;> STD_NULL <span class="keywd">then</span>
      data := getHttp(sock);
      close(sock);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get data specified by an URL using the HTTPS protocol.
 *  @return the string of data found, or "" if nothing was found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getHttps (<span class="op">in</span> <span class="type">string</span>: url) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: data <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">httpLocation</span>: locationData <span class="keywd">is</span> httpLocation.value;
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: statusCode <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: okay <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: repeatCount <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    locationData := getHttpLocation(url, httpsDefaultPort);
    locationData.httpsProtocol := TRUE;
    <span class="keywd">if</span> proxyServer &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      locationData.serverName := proxyServer;
      locationData.portNumber := proxyHttpPort;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">repeat</span>
      okay := TRUE;
      sock := openHttps(locationData);
      <span class="keywd">if</span> sock &lt;> STD_NULL <span class="keywd">then</span>
        statusCode := getHttpStatusCode(sock);
        <span class="comment"># writeln("statusCode: " &lt;&amp; statusCode);</span>
        <span class="keywd">if</span> statusCode = <span class="stri">"301"</span> <span class="op">or</span> statusCode = <span class="stri">"302"</span> <span class="op">or</span>
            statusCode = <span class="stri">"303"</span> <span class="op">or</span> statusCode = <span class="stri">"307"</span> <span class="keywd">then</span>
          locationData := getHttpLocation(locationData, sock);
          close(sock);
          sock := STD_NULL;
          okay := FALSE;
          incr(repeatCount);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> okay <span class="op">or</span> repeatCount > 5;
    <span class="keywd">if</span> sock &lt;> STD_NULL <span class="keywd">then</span>
      data := getHttp(sock);
      close(sock);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
