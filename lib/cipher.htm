<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  cipher.s7i    Generic support for TLS bulk cipher algorithms.   *)</span>
<span class="comment">(*  Copyright (C) 2013  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Enumeration of cipher algorithms.
 *  Currently the ciphers NO_CIPHER, RC4, DES, TDES, BLOWFISH and
 *  AES are supported.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: cipherAlgorithm <span class="keywd">is</span> new <span class="keywd">enum</span>
    NO_CIPHER, RC4, DES, TDES, BLOWFISH, AES
  <span class="keywd">end</span> <span class="keywd">enum</span>;


<span class="comment">(**
 *  Interface type for the internal state of a cipher.
 *  The cipherState interface is implemented with [[arc4]], [[des]],
 *  [[tdes]], [[blowfish]], [[aes]] and [[#noCipherState|noCipher]] (no encryption).
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: cipherState <span class="keywd">is</span> sub object interface;



<span class="comment">(**
 *  Block size used by the given [[cipher#cipherAlgorithm|cipherAlgorithm]].
 *  Stream ciphers have a block size of 0.
 *  @return the block size used by the ''cipherAlgorithm''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: blockSize (<span class="op">in</span> <span class="type">cipherAlgorithm</span>: cipherAlg) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Set key and initialization vector for the given [[cipher#cipherAlgorithm|cipherAlgorithm]].
 *  @param cipherAlg The [[cipher#cipherAlgorithm|cipherAlgorithm]] to be used.
 *  @return the ''cipherState'' of the ''cipherAlgorithm''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">cipherState</span>: setCipherKey (<span class="op">in</span> <span class="type">cipherAlgorithm</span>: cipherAlg,
    <span class="op">in</span> <span class="type">string</span>: cipherKey, <span class="op">in</span> <span class="type">string</span>: initializationVector) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Encode a string with the ''state'' of the selected cipher algorithm.
 *  @return the encoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encode (<span class="keywd">inout</span> <span class="type">cipherState</span>: state, <span class="op">in</span> <span class="type">string</span>: plaintext) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Decode a string with the ''state'' of the selected cipher algorithm.
 *  @return the decoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: decode (<span class="keywd">inout</span> <span class="type">cipherState</span>: state, <span class="op">in</span> <span class="type">string</span>: encoded) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(* NO_CIPHER *)</span>


<span class="comment">(**
 *  [[cipher|cipherState]] implementation type describing the state if no cipher is used.
 *  The data remains unencrypted if NO_CIPHER is used.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: noCipherState <span class="keywd">is</span> new <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(noCipherState, cipherState);


<span class="keywd">const</span> <span class="type">cipherState</span>: (attr cipherState) . value <span class="keywd">is</span> noCipherState.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: blockSize (NO_CIPHER) <span class="keywd">is</span> 0;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">cipherState</span>: setCipherKey (NO_CIPHER, <span class="op">in</span> <span class="type">string</span>: cipherKey,
    <span class="op">in</span> <span class="type">string</span>: initializationVector) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">cipherState</span>: state <span class="keywd">is</span> cipherState.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">noCipherState</span>: new_state <span class="keywd">is</span> noCipherState.value;
  <span class="keywd">begin</span>
    state := toInterface(new_state);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encode (<span class="keywd">inout</span> <span class="type">noCipherState</span>: state, <span class="op">in</span> <span class="type">string</span>: plaintext) <span class="keywd">is</span>
  <span class="keywd">return</span> plaintext;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: decode (<span class="keywd">inout</span> <span class="type">noCipherState</span>: state, <span class="op">in</span> <span class="type">string</span>: encoded) <span class="keywd">is</span>
  <span class="keywd">return</span> encoded;
</pre>
</body>
</html>
