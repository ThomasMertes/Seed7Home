<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bin64.s7i     64-bit binary value support library               *)</span>
<span class="comment">(*  Copyright (C) 2015 - 2020  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bigint.htm">bigint.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;


<span class="comment">(**
 *  Binary values with 64 bits.
 *  This type supports bitwise operations but no integer arithmetic.
 *  The internal representation is the same as for integer.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: bin64 <span class="keywd">is</span> subtype object;

<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">bin64</span>: aValue)                        <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">bin64</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">bin64</span>: source)          <span class="keywd">is</span> action <span class="stri">"INT_CREATE"</span>;
IN_PARAM_IS_VALUE(bin64);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin64</span>: dest) := (<span class="op">in</span> <span class="type">bin64</span>: source)          <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;


<span class="comment">(**
 *  Convert to bin64.
 *  @return the unchanged value as bin64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: bin64 (<span class="op">in</span> <span class="type">integer</span>: number)                   <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Default value of ''bin64'' (bin64(0)).
 *)</span>
<span class="keywd">const</span> <span class="type">bin64</span>: (attr bin64) . value   <span class="keywd">is</span> bin64(0);


<span class="comment">(**
 *  Convert to bin64.
 *  @return the unchanged value as bin64.
 *  @exception RANGE_ERROR The number is negative or too big to fit
 *             into a bin64 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: bin64 (<span class="op">in</span> <span class="type">bigInteger</span>: number)                <span class="keywd">is</span> action <span class="stri">"BIN_BINARY"</span>;


<span class="comment">(**
 *  Convert to bin64.
 *  @return the unchanged value as bin64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: bin64 (<span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span>
  <span class="keywd">return</span> bin64(ord(ch));


<span class="comment">(**
 *  Get bits in IEEE 754 double-precision representation from a float.
 *  IEEE 754 is a standard for floating point arithmetic.
 *  The double-precision format of IEEE 754 has a sign bit,
 *  an 11 bit exponent, and a 52 bit mantissa.
 *   bin64(1.0)  returns  bin64(16#3ff0000000000000)
 *  @param number Float value to be converted to bin64.
 *  @return 64 bits in IEEE 754 double-precision float representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: bin64 (<span class="op">in</span> <span class="type">float</span>: number)                     <span class="keywd">is</span> action <span class="stri">"FLT_DOUBLE2BITS"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged value as integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">conv</span> (<span class="op">in</span> <span class="type">bin64</span>: bits)       <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;


<span class="comment">(**
 *  Convert to bin64.
 *  @return the unchanged value as bin64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: (attr bin64) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: anInt)        <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged value as integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">bin64</span>: bits)                       <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged value as integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">bin64</span>: bits)                   <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Convert to bigInteger.
 *  @return the unchanged value as integer.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: big (<span class="op">in</span> <span class="type">bin64</span>: bits)                    <span class="keywd">is</span> action <span class="stri">"BIN_BIG"</span>;


<span class="comment">(**
 *  Convert to bigInteger.
 *  @return the unchanged value as integer.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: bigInteger (<span class="op">in</span> <span class="type">bin64</span>: bits)             <span class="keywd">is</span> action <span class="stri">"BIN_BIG"</span>;


<span class="comment">(**
 *  Get a float from bits in IEEE 754 double-precision representation.
 *  IEEE 754 is a standard for floating point arithmetic.
 *  The double-precision format of IEEE 754 has a sign bit,
 *  an 11 bit exponent, and a 52 bit mantissa.
 *   float(bin64(16#3ff0000000000000))  returns  1.0
 *  @param bits Bits to be converted to a float.
 *  @return a float from bits in double-precision float representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: float (<span class="op">in</span> <span class="type">bin64</span>: bits)                       <span class="keywd">is</span> action <span class="stri">"FLT_BITS2DOUBLE"</span>;


<span class="comment">(**
 *  Compare two bin64 values.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">bin64</span>: bits1, <span class="op">in</span> <span class="type">bin64</span>: bits2) <span class="keywd">is</span> action <span class="stri">"BIN_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a bin64 value.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">bin64</span>: bits)                  <span class="keywd">is</span> action <span class="stri">"INT_HASHCODE"</span>;


<span class="comment">(**
 *  Compute pseudo-random bin64 value.
 *  The random values are uniform distributed.
 *  @return a random bin64 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: rand (attr bin64) <span class="keywd">is</span>
  <span class="keywd">return</span> bin64(rand(integer.first, integer.last));


<span class="comment">(**
 *  Convert an ''bin64'' value to a [[string]].
 *  The values is converted to a string with decimal representation.
 *  The conversion interprets the ''bin64'' value as unsigned.
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">bin64</span>: bits)                        <span class="keywd">is</span> action <span class="stri">"BIN_STR"</span>;


<span class="comment">(**
 *  Convert a ''bin64'' value to a [[string]] using a radix.
 *  The conversion uses the numeral system with the given ''base''.
 *  Digit values from 10 upward are encoded with lower case letters.
 *  E.g.: 10 is encoded with a, 11 with b, etc.
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits) radix (<span class="op">in</span> <span class="type">integer</span>: base)   <span class="keywd">is</span> action <span class="stri">"BIN_radix"</span>;


<span class="comment">(**
 *  Convert a ''bin64'' value to a [[string]] using a radix.
 *  The conversion uses the numeral system with the given ''base''.
 *  Digit values from 10 upward are encoded with upper case letters.
 *  E.g.: 10 is encoded with A, 11 with B, etc.
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits) RADIX (<span class="op">in</span> <span class="type">integer</span>: base)   <span class="keywd">is</span> action <span class="stri">"BIN_RADIX"</span>;


<span class="comment">(**
 *  Convert a ''bin64'' into a [[string]] of bytes with big-endian encoding.
 *  The result uses binary representation with a base of 256.
 *  The result contains chars (bytes) with an ordinal &lt;= 255.
 *  @param bits Bin64 to be converted.
 *  @param length Determines the length of the result string.
 *  @return a string of ''length'' bytes with the unsigned binary
 *          representation of ''bits''.
 *  @exception RANGE_ERROR If ''length'' is negative or zero, or
 *                         if the result would not fit in ''length'' bytes.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bytes (<span class="op">in</span> <span class="type">bin64</span>: bits, BE, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> action <span class="stri">"BIN_N_BYTES_BE"</span>;


<span class="comment">(**
 *  Convert a ''bin64'' into a [[string]] of bytes with little-endian encoding.
 *  The result uses binary representation with a base of 256.
 *  The result contains chars (bytes) with an ordinal &lt;= 255.
 *  @param bits Bin64 to be converted.
 *  @param length Determines the length of the result string.
 *  @return a string of ''length'' bytes with the unsigned binary
 *          representation of ''bits''.
 *  @exception RANGE_ERROR If ''length'' is negative or zero, or
 *                         if the result would not fit in ''length'' bytes.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bytes (<span class="op">in</span> <span class="type">bin64</span>: bits, LE, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> action <span class="stri">"BIN_N_BYTES_LE"</span>;


<span class="comment">(**
 *  Check if two bin64 values are equal.
 *  @return TRUE if the two values are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits1) = (<span class="op">in</span> <span class="type">bin64</span>: bits2)      <span class="keywd">is</span> action <span class="stri">"INT_EQ"</span>;


<span class="comment">(**
 *  Check if two bin64 values are not equal.
 *  @return FALSE if both values are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits1) &lt;> (<span class="op">in</span> <span class="type">bin64</span>: bits2)     <span class="keywd">is</span> action <span class="stri">"INT_NE"</span>;


<span class="comment">(**
 *  Compute a bitwise ''and'' of two bin64 values.
 *  @return the bitwise ''and'' of the two values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits1) &amp; (<span class="op">in</span> <span class="type">bin64</span>: bits2)        <span class="keywd">is</span> action <span class="stri">"BIN_AND"</span>;


<span class="comment">(**
 *  Compute a bitwise inclusive ''or'' of two bin64 values.
 *  @return the bitwise inclusive ''or'' of the two values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits1) | (<span class="op">in</span> <span class="type">bin64</span>: bits2)        <span class="keywd">is</span> action <span class="stri">"BIN_OR"</span>;


<span class="comment">(**
 *  Compute a bitwise exclusive or (''xor'') of two bin64 values.
 *  @return the bitwise ''xor'' of the two values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits1) >&lt; (<span class="op">in</span> <span class="type">bin64</span>: bits2)       <span class="keywd">is</span> action <span class="stri">"BIN_XOR"</span>;


<span class="comment">(**
 *  Compute a bitwise ''not'' of a bin64 value.
 *  @return the bitwise ''not'' of the value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: ~ (<span class="op">in</span> <span class="type">bin64</span>: bits) <span class="keywd">is</span>
  <span class="keywd">return</span> bits >&lt; bin64(16#ffffffffffffffff_);


<span class="comment">(**
 *  Shift a bin64 value left by lshift bits.
 *  Bits shifted beyond the highest bit position are lost.
 *   bin64(16#1234567890abcde0) &lt;&lt; 4  returns  bin64(16#234567890abcde00)
 *  @return the left shifted value.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits) &lt;&lt; (<span class="op">in</span> <span class="type">integer</span>: lshift)     <span class="keywd">is</span> action <span class="stri">"BIN_LSHIFT"</span>;


<span class="comment">(**
 *  Shift a bin64 value right by rshift bits.
 *  Bits shifted beyond the lowest bit position are lost.
 *   bin64(16#1234567890abcde0) >> 4  returns  bin64(16#1234567890abcde)
 *  @return the right shifted value.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: (<span class="op">in</span> <span class="type">bin64</span>: bits) >> (<span class="op">in</span> <span class="type">integer</span>: lshift)     <span class="keywd">is</span> action <span class="stri">"BIN_RSHIFT"</span>;


<span class="comment">(**
 *  Shift a bin64 value left by lshift bits and assign the result back to ''bits''.
 *  Bits shifted beyond the highest bit position are lost.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin64</span>: bits) &lt;&lt;:= (<span class="op">in</span> <span class="type">integer</span>: lshift)      <span class="keywd">is</span> action <span class="stri">"BIN_LSHIFT_ASSIGN"</span>;


<span class="comment">(**
 *  Shift a bin64 value right by rshift bits and assign the result back to ''bits''.
 *  Bits shifted beyond the lowest bit position are lost.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin64</span>: bits) >>:= (<span class="op">in</span> <span class="type">integer</span>: rshift)      <span class="keywd">is</span> action <span class="stri">"BIN_RSHIFT_ASSIGN"</span>;


<span class="comment">(**
 *  Compute a bitwise ''and'' and assign the result back to ''bits1''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin64</span>: bits1) &amp;:= (<span class="op">in</span> <span class="type">bin64</span>: bits2)         <span class="keywd">is</span> action <span class="stri">"BIN_AND_ASSIGN"</span>;


<span class="comment">(**
 *  Compute a bitwise inclusive ''or'' and assign the result back to ''bits1''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin64</span>: bits1) |:= (<span class="op">in</span> <span class="type">bin64</span>: bits2)         <span class="keywd">is</span> action <span class="stri">"BIN_OR_ASSIGN"</span>;


<span class="comment">(**
 *  Compute a bitwise exclusive or (''xor'') and assign the result back to ''bits1''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin64</span>: bits1) >&lt;:= (<span class="op">in</span> <span class="type">bin64</span>: bits2)        <span class="keywd">is</span> action <span class="stri">"BIN_XOR_ASSIGN"</span>;


<span class="comment">(**
 *  Rotate the bits of a bin64 value left by shiftCount bits.
 *  The vacant bit positions at the right side are filled in with
 *  the bits that are shifted out at the left side.
 *   rotLeft(bin64(16#76543210fedcba98), 12)  returns  bin64(16#43210fedcba98765)
 *  @return the left rotated value.
 *  @exception OVERFLOW_ERROR If the shift amount is negative
 *             or greater than 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: rotLeft (<span class="op">in</span> <span class="type">bin64</span>: x, <span class="op">in</span> <span class="type">integer</span>: shiftCount) <span class="keywd">is</span>
  <span class="keywd">return</span> (x &lt;&lt; shiftCount | x >> (64 - shiftCount));


<span class="comment">(**
 *  Rotate the bits of a bin64 value right by shiftCount bits.
 *  The vacant bit positions at the left side are filled in with
 *  the bits that are shifted out at the right side.
 *   rotRight(bin64(16#76543210fedcba98), 40)  returns  bin64(16#10fedcba98765432)
 *  @return the right rotated value.
 *  @exception OVERFLOW_ERROR If the shift amount is negative
 *             or greater than 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: rotRight (<span class="op">in</span> <span class="type">bin64</span>: x, <span class="op">in</span> <span class="type">integer</span>: shiftCount) <span class="keywd">is</span>
  <span class="keywd">return</span> (x >> shiftCount | x &lt;&lt; (64 - shiftCount));


<span class="comment">(**
 *  Get 64 bits from a bitset starting with ''lowestBitNum''.
 *  @return a bit pattern with 64 bits from ''set1''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: getBinary (<span class="op">in</span> <span class="type">bitset</span>: set1,
                             <span class="op">in</span> <span class="type">integer</span>: lowestBitNum)         <span class="keywd">is</span> action <span class="stri">"BIN_GET_BINARY_FROM_SET"</span>;


<span class="comment">(**
 *  Get bits in MBF double-precision representation from a float.
 *  Microsoft Binary Format (MBF) is a format for floating point numbers.
 *  The double-precision version of MBF has a 8 bit exponent, a sign bit
 *  and a 55 bit mantissa.
 *   float2MbfBits(1.0, DOUBLE)  returns  bin64(16#8100000000000000_)
 *  @param number Float value to be converted to bin64.
 *  @return 64 bits in MBF double-precision float representation.
 *  @exception RANGE_ERROR If number is not representable in MBF.
 *             NaN, Infinity and -Infinity are not representable
 *             in MBF. Numbers with an absolute value larger than
 *             1.7014118346046921e+38 are also not representable
 *             in MBF.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: float2MbfBits (<span class="op">in</span> <span class="type">float</span>: number, DOUBLE) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">bin64</span>: bits <span class="keywd">is</span> bin64(0);
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: ieeeExponentBits <span class="keywd">is</span> 11;
    <span class="keywd">const</span> <span class="type">integer</span>: ieeeMantissaBits <span class="keywd">is</span> 52;
    <span class="keywd">const</span> <span class="type">bin64</span>: ieeeSignMask <span class="keywd">is</span> bin64(1) &lt;&lt; (ieeeExponentBits + ieeeMantissaBits);
    <span class="keywd">const</span> <span class="type">bin64</span>: ieeeMantissaMask <span class="keywd">is</span> bin64(pred(1 &lt;&lt; ieeeMantissaBits));
    <span class="keywd">const</span> <span class="type">integer</span>: mbfExponentBits <span class="keywd">is</span> 8;
    <span class="keywd">const</span> <span class="type">integer</span>: mbfMantissaBits <span class="keywd">is</span> 55;
    <span class="keywd">const</span> <span class="type">integer</span>: mbfMaxExponent <span class="keywd">is</span> pred(2 ** mbfExponentBits);
    <span class="keywd">const</span> <span class="type">integer</span>: mbfExponentBias <span class="keywd">is</span> 129;
    <span class="keywd">var</span> <span class="type">floatElements</span>: ieeeElements <span class="keywd">is</span> floatElements.value;
    <span class="keywd">var</span> <span class="type">bin64</span>: fractionBits <span class="keywd">is</span> bin64(0);
    <span class="keywd">var</span> <span class="type">integer</span>: mbfExponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> isNaN(number) <span class="op">or</span> abs(number) = Infinity <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">elsif</span> number &lt;> 0.0 <span class="keywd">then</span>
      ieeeElements := decompose(number);
      fractionBits := bin64(ieeeElements.fraction);
      mbfExponent := ieeeElements.exponent - 1 + mbfExponentBias;
      <span class="keywd">if</span> mbfExponent > mbfMaxExponent <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">elsif</span> mbfExponent > 0 <span class="keywd">then</span>
        bits := (bin64(mbfExponent) &lt;&lt; succ(mbfMantissaBits)) |
                ((fractionBits &amp; ieeeSignMask) >> mbfExponentBits) |
                ((fractionBits &amp; ieeeMantissaMask) &lt;&lt; (mbfMantissaBits - ieeeMantissaBits));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get a float from bits in MBF double-precision representation.
 *  Microsoft Binary Format (MBF) is a format for floating point numbers.
 *  The double-precision version of MBF has a 8 bit exponent, a sign bit
 *  and a 55 bit mantissa.
 *   mbfBits2Float(bin64(16#8100000000000000_))  returns  1.0
 *  @param bits Bits to be converted to a float.
 *  @return a float from bits in double-precision float representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: mbfBits2Float (<span class="op">in</span> <span class="type">bin64</span>: bits) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">float</span>: aFloat <span class="keywd">is</span> 0.0;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: mantissaBits <span class="keywd">is</span> 55;
    <span class="keywd">const</span> <span class="type">bin64</span>: mantissaMask <span class="keywd">is</span> bin64(pred(1 &lt;&lt; mantissaBits));
    <span class="keywd">const</span> <span class="type">bin64</span>: mantissaSign <span class="keywd">is</span> bin64(1 &lt;&lt; mantissaBits);
    <span class="keywd">const</span> <span class="type">integer</span>: exponentBias <span class="keywd">is</span> 129;
    <span class="keywd">var</span> <span class="type">integer</span>: exponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    exponent := ord(bits >> succ(mantissaBits));
    <span class="keywd">if</span> exponent &lt;> 0 <span class="keywd">then</span>
      <span class="comment"># Ignore sign bit and set implicit leading one bit of mantissa instead.</span>
      aFloat := flt(ord(mantissaSign | bits &amp; mantissaMask));
      <span class="comment"># Check sign bit.</span>
      <span class="keywd">if</span> ord(bits &amp; mantissaSign) &lt;> 0 <span class="keywd">then</span>
        aFloat := -aFloat;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      aFloat := aFloat * 2.0 ** (exponent - exponentBias - mantissaBits);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a string of eight little-endian bytes to a bin64 value.
 *  @return the bin64 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: bin64 (<span class="op">in</span> <span class="type">string</span>: eightBytes, LE) <span class="keywd">is</span>
  <span class="keywd">return</span> bin64(eightBytes[1])       |
         bin64(eightBytes[2]) &lt;&lt;  8 |
         bin64(eightBytes[3]) &lt;&lt; 16 |
         bin64(eightBytes[4]) &lt;&lt; 24 |
         bin64(eightBytes[5]) &lt;&lt; 32 |
         bin64(eightBytes[6]) &lt;&lt; 40 |
         bin64(eightBytes[7]) &lt;&lt; 48 |
         bin64(eightBytes[8]) &lt;&lt; 56;


<span class="comment">(**
 *  Convert a string of eight big-endian bytes to a bin64 value.
 *  @return the bin64 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin64</span>: bin64 (<span class="op">in</span> <span class="type">string</span>: eightBytes, BE) <span class="keywd">is</span>
  <span class="keywd">return</span> bin64(eightBytes[1]) &lt;&lt; 56 |
         bin64(eightBytes[2]) &lt;&lt; 48 |
         bin64(eightBytes[3]) &lt;&lt; 40 |
         bin64(eightBytes[4]) &lt;&lt; 32 |
         bin64(eightBytes[5]) &lt;&lt; 24 |
         bin64(eightBytes[6]) &lt;&lt; 16 |
         bin64(eightBytes[7]) &lt;&lt;  8 |
         bin64(eightBytes[8]);


<span class="comment"># Allows 'array bin64' everywhere without extra type definition.</span>
<span class="keywd">const</span> <span class="type">type</span>: _bin64Array <span class="keywd">is</span> <span class="type">array</span> <span class="type">bin64</span>;


enable_output(bin64);

CASE_DECLS(bin64);
DECLARE_TERNARY(bin64);
</pre>
</body>
</html>
