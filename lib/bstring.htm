<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bstring.s7i   Byte string support library                       *)</span>
<span class="comment">(*  Copyright (C) 1991 - 1994, 2004, 2005, 2012  Thomas Mertes      *)</span>
<span class="comment">(*                2014, 2018, 2019, 2021, 2022  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bigint.htm">bigint.s7i</a>"</span>;


<span class="comment">(**
 *  Type for byte strings.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: bstring <span class="keywd">is</span> newtype;


IN_PARAM_IS_REFERENCE(bstring);

<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">bstring</span>: aValue)                               <span class="keywd">is</span> action <span class="stri">"BST_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">bstring</span>: dest) ::= (<span class="op">in</span> <span class="type">bstring</span>: source)                <span class="keywd">is</span> action <span class="stri">"BST_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bstring</span>: dest) := (<span class="op">in</span> <span class="type">bstring</span>: source)               <span class="keywd">is</span> action <span class="stri">"BST_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: _GENERATE_EMPTY_BSTRING                             <span class="keywd">is</span> action <span class="stri">"BST_EMPTY"</span>;


<span class="comment">(**
 *  Default value of ''bstring'' (bstring("")).
 *)</span>
<span class="keywd">const</span> <span class="type">bstring</span>: (attr bstring) . value                                   <span class="keywd">is</span> _GENERATE_EMPTY_BSTRING;


<span class="comment">(**
 *  Convert a ''bstring'' value to a [[string]].
 *  @return the [[string]] result of the conversion.
 *  @exception MEMORY_ERROR  Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">bstring</span>: bstri)                              <span class="keywd">is</span> action <span class="stri">"BST_STR"</span>;


<span class="comment">(**
 *  Convert a ''bstring'' value to a ''bstring'' literal.
 *  @return the ''bstring'' literal.
 *  @exception MEMORY_ERROR  Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">bstring</span>: bstri) <span class="keywd">is</span>
    <span class="keywd">return</span> <span class="stri">"bstring("</span> &amp; literal(str(bstri)) &amp; <span class="stri">")"</span>;


<span class="comment">(**
 *  Convert a ''bstring'' value to a [[string]].
 *  @return the [[string]] result of the conversion.
 *  @exception MEMORY_ERROR  Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: string (<span class="op">in</span> <span class="type">bstring</span>: bstri)                           <span class="keywd">is</span> action <span class="stri">"BST_STR"</span>;


<span class="comment">(**
 *  Convert a [[string]] to a ''bstring'' value.
 *  @return the ''bstring'' result of the conversion.
 *  @exception RANGE_ERROR If characters beyond '\255;' are present.
 *  @exception MEMORY_ERROR  Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: bstring (<span class="op">in</span> <span class="type">string</span>: stri)                           <span class="keywd">is</span> action <span class="stri">"BST_PARSE1"</span>;


<span class="comment">(**
 *  Convert a [[string]] to a ''bstring'' value.
 *  @return the ''bstring'' result of the conversion.
 *  @exception RANGE_ERROR If characters beyond '\255;' are present.
 *  @exception MEMORY_ERROR  Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: (attr bstring) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> bstring(stri);


<span class="comment">(**
 *  Get a character, identified by an index, from a ''bstring''.
 *  The first character has the index 1.
 *  @return the character specified with the index.
 *  @exception INDEX_ERROR If the index is less than 1 or
 *             greater than the length of the ''bstring''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: (<span class="op">in</span> <span class="type">bstring</span>: bstri) [ (<span class="op">in</span> <span class="type">integer</span>: index) ]            <span class="keywd">is</span> action <span class="stri">"BST_IDX"</span>;


<span class="comment">(**
 *  Determine the length of a ''bstring''.
 *  @return the length of the ''bstring''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">bstring</span>: bstri)                          <span class="keywd">is</span> action <span class="stri">"BST_LNG"</span>;


<span class="comment">(**
 *  Check if two bstrings are equal.
 *  @return TRUE if both bstrings are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bstring</span>: bstri1) = (<span class="op">in</span> <span class="type">bstring</span>: bstri2)         <span class="keywd">is</span> action <span class="stri">"BST_EQ"</span>;


<span class="comment">(**
 *  Check if two bstrings are not equal.
 *  @return FALSE if both bstrings are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bstring</span>: bstri1) &lt;> (<span class="op">in</span> <span class="type">bstring</span>: bstri2)        <span class="keywd">is</span> action <span class="stri">"BST_NE"</span>;


<span class="comment">(**
 *  Compare two bstrings.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">bstring</span>: bstri1, <span class="op">in</span> <span class="type">bstring</span>: bstri2)    <span class="keywd">is</span> action <span class="stri">"BST_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a ''bstring''.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">bstring</span>: bstri)                        <span class="keywd">is</span> action <span class="stri">"BST_HASHCODE"</span>;


<span class="comment">(**
 *  For-loop which loops over the [[char|characters]] of a ''bstring''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">bstring</span>: bstri) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(bstri) <span class="keywd">do</span>
      forVar := bstri[number];
      statements;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a [[bstring]] (interpreted as big-endian) to a [[bigint|bigInteger]].
 *  @param bstri Bstring to be converted. The bytes are interpreted
 *         as binary big-endian representation with a base of 256.
 *  @param isSigned Defines if ''bstri'' is interpreted as signed value.
 *         If ''isSigned'' is TRUE the twos-complement representation
 *         is used. In this case the result is negative if the most
 *         significant byte (the first byte) has an ordinal >= 128.
 *  @return a bigInteger created from the big-endian bytes.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: bStriBe2BigInt (<span class="op">in</span> <span class="type">bstring</span>: bstri,
    <span class="op">in</span> <span class="type">boolean</span>: isSigned)                                     <span class="keywd">is</span> action <span class="stri">"BIG_FROM_BSTRI_BE"</span>;


<span class="comment">(**
 *  Convert a [[bstring]] (interpreted as little-endian) to a [[bigint|bigInteger]].
 *  @param bstri Bstring to be converted. The bytes are interpreted
 *         as binary little-endian representation with a base of 256.
 *  @param isSigned Defines if ''bstri'' is interpreted as signed value.
 *         If ''isSigned'' is TRUE the twos-complement representation
 *         is used. In this case the result is negative if the most
 *         significant byte (the last byte) has an ordinal >= 128.
 *  @return a bigInteger created from the little-endian bytes.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: bStriLe2BigInt (<span class="op">in</span> <span class="type">bstring</span>: bstri,
    <span class="op">in</span> <span class="type">boolean</span>: isSigned)                                     <span class="keywd">is</span> action <span class="stri">"BIG_FROM_BSTRI_LE"</span>;


<span class="comment">(**
 *  Convert a [[bigint|bigInteger]] into a big-endian [[bstring]].
 *  The result uses binary representation with a base of 256.
 *  @param number BigInteger number to be converted.
 *  @param isSigned Determines the signedness of the result.
 *         If ''isSigned'' is TRUE the result is encoded with the
 *         twos-complement representation. In this case a negative
 *         ''number'' is converted to a result where the most significant
 *         byte (the first byte) has an ordinal >= 128.
 *  @return a bstring with the big-endian representation.
 *  @exception RANGE_ERROR If ''number'' is negative and ''isSigned'' is FALSE.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: bStriBe (<span class="op">in</span> <span class="type">bigInteger</span>: number,
    <span class="op">in</span> <span class="type">boolean</span>: isSigned)                                     <span class="keywd">is</span> action <span class="stri">"BIG_TO_BSTRI_BE"</span>;


<span class="comment">(**
 *  Convert a [[bigint|bigInteger]] into a little-endian [[bstring]].
 *  The result uses binary representation with a base of 256.
 *  @param number BigInteger number to be converted.
 *  @param isSigned Determines the signedness of the result.
 *         If ''isSigned'' is TRUE the result is encoded with the
 *         twos-complement representation. In this case a negative
 *         ''number'' is converted to a result where the most significant
 *         byte (the last byte) has an ordinal >= 128.
 *  @return a bstring with the little-endian representation.
 *  @exception RANGE_ERROR If ''number'' is negative and ''isSigned'' is FALSE.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: bStriLe (<span class="op">in</span> <span class="type">bigInteger</span>: number,
    <span class="op">in</span> <span class="type">boolean</span>: isSigned)                                     <span class="keywd">is</span> action <span class="stri">"BIG_TO_BSTRI_LE"</span>;


enable_io(bstring);
DECLARE_TERNARY(bstring);
</pre>
</body>
</html>
