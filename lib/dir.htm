<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  dir.s7i       Implementation type to read directories as files  *)</span>
<span class="comment">(*  Copyright (C) 1994, 2005  Thomas Mertes                         *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/null_file.htm">null_file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;


<span class="comment">(**
 *  [[file|File]] to read the contents of a directory.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: dirFile <span class="keywd">is</span> <span class="keywd">sub</span> null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: path <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: dirArray <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: currLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: currColumn <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Open a ''dirFile''.
 *  @return the ''dirFile'' opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system path type.
 *  @exception RANGE_ERROR 'path' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openDir (<span class="op">in</span> <span class="type">string</span>: directoryPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">dirFile</span>: new_file <span class="keywd">is</span> dirFile.value;
  <span class="keywd">begin</span>
    new_file.path := <span class="stri">""</span>;
    new_file.currLine := 1;
    new_file.currColumn := 1;
    <span class="keywd">block</span>
      new_file.dirArray := readDir(directoryPath);
      newFile := toInterface(new_file);
    exception
      catch FILE_ERROR:
        newFile := STD_NULL;
    <span class="keywd">end</span> <span class="keywd">block</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openDirPath (<span class="op">in</span> <span class="type">string</span>: directoryPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">dirFile</span>: new_file <span class="keywd">is</span> dirFile.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> directoryPath[length(directoryPath)] &lt;> <span class="stri">'/'</span> <span class="keywd">then</span>
      new_file.path := directoryPath &amp; <span class="stri">"/"</span>;
    <span class="keywd">else</span>
      new_file.path := directoryPath;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    new_file.currLine := 1;
    new_file.currColumn := 1;
    <span class="keywd">block</span>
      new_file.dirArray := readDir(directoryPath);
      newFile := toInterface(new_file);
    exception
      catch FILE_ERROR:
        newFile := STD_NULL;
    <span class="keywd">end</span> <span class="keywd">block</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a file name from a ''dirFile''.
 *  When the function is left dirFile.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the file name.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">dirFile</span>: aFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aFile.currLine &lt;= length(aFile.dirArray) <span class="keywd">then</span>
      stri := aFile.path &amp;
          aFile.dirArray[aFile.currLine][aFile.currColumn .. ];
      incr(aFile.currLine);
      aFile.currColumn := 1;
      aFile.bufferChar := <span class="stri">'\n'</span>;
    <span class="keywd">else</span>
      aFile.bufferChar := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a file name from a ''dirFile''.
 *  When the function is left dirFile.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the file name.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">dirFile</span>: aFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aFile.currLine &lt;= length(aFile.dirArray) <span class="keywd">then</span>
      stri := aFile.path &amp;
          aFile.dirArray[aFile.currLine][aFile.currColumn .. ];
      incr(aFile.currLine);
      aFile.currColumn := 1;
      aFile.bufferChar := <span class="stri">'\n'</span>;
    <span class="keywd">else</span>
      aFile.bufferChar := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">dirFile</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  @return TRUE if the end-of-file indicator is set, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">dirFile</span>: aFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aFile.currLine > length(aFile.dirArray);


<span class="comment">(**
 *  Determine if another filename can be read successfully.
 *  This function allows a file to be handled like an iterator.
 *  @return FALSE if 'getln' would return "", TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">dirFile</span>: aFile) <span class="keywd">is</span>
  <span class="keywd">return</span> aFile.currLine &lt;= length(aFile.dirArray);
</pre>
</body>
</html>
