<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bin32.s7i     32-bit binary value support library               *)</span>
<span class="comment">(*  Copyright (C) 2013 - 2024  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;


<span class="comment">(**
 *  Binary values with 32 bits.
 *  This type supports bitwise operations but no integer arithmetic.
 *  The internal representation is the same as for integer.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: bin32 <span class="keywd">is</span> subtype object;

<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">bin32</span>: aValue)                        <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">bin32</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">bin32</span>: source)          <span class="keywd">is</span> action <span class="stri">"INT_CREATE"</span>;
IN_PARAM_IS_VALUE(bin32);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin32</span>: dest) := (<span class="op">in</span> <span class="type">bin32</span>: source)          <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;


<span class="comment">(**
 *  Convert to bin32.
 *  @return the unchanged value as bin32.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: bin32 (<span class="op">in</span> <span class="type">integer</span>: number)                   <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Default value of ''bin32'' (bin32(0)).
 *)</span>
<span class="keywd">const</span> <span class="type">bin32</span>: (attr bin32) . value   <span class="keywd">is</span> bin32(0);


<span class="comment">(**
 *  Convert to bin32.
 *  @return the unchanged value as bin32.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: bin32 (<span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span>
  <span class="keywd">return</span> bin32(ord(ch));


<span class="comment">(**
 *  Get bits in IEEE 754 single-precision representation from a float.
 *  IEEE 754 is a standard for floating point arithmetic.
 *  The single-precision format of IEEE 754 has a sign bit, an 8 bit
 *  exponent, and a 23 bit mantissa.
 *   bin32(1.0)  returns  bin32(16#3f800000)
 *  @param number Float value to be converted to bin32.
 *  @return 32 bits in IEEE 754 single-precision float representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: bin32 (<span class="op">in</span> <span class="type">float</span>: number)                     <span class="keywd">is</span> action <span class="stri">"FLT_SINGLE2BITS"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged value as integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">conv</span> (<span class="op">in</span> <span class="type">bin32</span>: bits)       <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;


<span class="comment">(**
 *  Convert to bin32.
 *  @return the unchanged value as bin32.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: (attr bin32) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: anInt)        <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged value as integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">bin32</span>: bits)                       <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged value as integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">bin32</span>: bits)                   <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Get a float from bits in IEEE 754 single-precision representation.
 *  IEEE 754 is a standard for floating point arithmetic.
 *  The single-precision format of IEEE 754 has a sign bit, an 8 bit
 *  exponent, and a 23 bit mantissa.
 *   float(bin32(16#3f800000))  returns  1.0
 *  @param bits Bits to be converted to a float.
 *  @return a float from bits in single-precision float representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: float (<span class="op">in</span> <span class="type">bin32</span>: bits)                       <span class="keywd">is</span> action <span class="stri">"FLT_BITS2SINGLE"</span>;


<span class="comment">(**
 *  Compare two bin32 values.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">bin32</span>: bits1, <span class="op">in</span> <span class="type">bin32</span>: bits2) <span class="keywd">is</span> action <span class="stri">"BIN_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a bin32 value.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">bin32</span>: bits)                  <span class="keywd">is</span> action <span class="stri">"INT_HASHCODE"</span>;


<span class="comment">(**
 *  Compute pseudo-random bin32 value.
 *  The random values are uniform distributed.
 *  @return a random bin32 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: rand (attr bin32) <span class="keywd">is</span>
  <span class="keywd">return</span> bin32(rand(0, 4294967295));


<span class="comment">(**
 *  Number of bits in the minimum binary representation.
 *  Leading zero bits are not part of the minimum binary representation.
 *   bitLength(bin32(0))  returns 0
 *   bitLength(bin32(1))  returns 1
 *   bitLength(bin32(4))  returns 3
 *  @return the number of bits.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: bitLength (<span class="op">in</span> <span class="type">bin32</span>: bits)                 <span class="keywd">is</span> action <span class="stri">"BIN_BIT_LENGTH"</span>;


<span class="comment">(**
 *  Number of lowest-order zero bits in the binary representation.
 *  This is equal to the index of the lowest-order one bit (indices start with 0).
 *  If there are only zero bits (''bits'' is bin32(0)) the result is -1.
 *   lowestSetBit(bin32(0))  returns -1
 *   lowestSetBit(bin32(1))  returns  0
 *   lowestSetBit(bin32(4))  returns  2
 *  @return the number of lowest-order zero bits or -1 for lowestSetBit(bin32(0)).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: lowestSetBit (<span class="op">in</span> <span class="type">bin32</span>: bits)              <span class="keywd">is</span> action <span class="stri">"BIN_LOWEST_SET_BIT"</span>;


<span class="comment">(**
 *  Convert an ''bin32'' value to a [[string]].
 *  The values is converted to a string with decimal representation.
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">bin32</span>: bits)                        <span class="keywd">is</span> action <span class="stri">"BIN_STR"</span>;


<span class="comment">(**
 *  Convert a ''bin32'' value to a [[string]] using a radix.
 *  The conversion uses the numeral system with the given ''base''.
 *  Digit values from 10 upward are encoded with lower case letters.
 *  E.g.: 10 is encoded with a, 11 with b, etc.
 *   bin32(48879) radix 16   returns "beef"
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits) radix (<span class="op">in</span> <span class="type">integer</span>: base)   <span class="keywd">is</span> action <span class="stri">"BIN_radix"</span>;


<span class="comment">(**
 *  Convert a ''bin32'' value to a [[string]] using a radix.
 *  The conversion uses the numeral system with the given ''base''.
 *  Digit values from 10 upward are encoded with upper case letters.
 *  E.g.: 10 is encoded with A, 11 with B, etc.
 *   bin64(48879) RADIX 16   returns "BEEF"
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits) RADIX (<span class="op">in</span> <span class="type">integer</span>: base)   <span class="keywd">is</span> action <span class="stri">"BIN_RADIX"</span>;


<span class="comment">(**
 *  Convert a ''bin32'' into a [[string]] of bytes with big-endian encoding.
 *  The result uses binary representation with a base of 256.
 *  The result contains chars (bytes) with an ordinal &lt;= 255.
 *   bytes(bin32(1413829460), BE, 5)  returns "\0;TEST"
 *   bytes(bin32(1413829460), BE, 4)  returns "TEST"
 *   bytes(bin32(1413829460), BE, 3)  raises RANGE_ERROR
 *  @param bits Bin32 to be converted.
 *  @param length Determines the length of the result string.
 *  @return a string of ''length'' bytes with the unsigned binary
 *          representation of ''bits''.
 *  @exception RANGE_ERROR If ''length'' is negative or zero, or
 *                         if the result would not fit in ''length'' bytes.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bytes (<span class="op">in</span> <span class="type">bin32</span>: bits, BE, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> action <span class="stri">"BIN_N_BYTES_BE"</span>;


<span class="comment">(**
 *  Convert a ''bin32'' into a [[string]] of bytes with little-endian encoding.
 *  The result uses binary representation with a base of 256.
 *  The result contains chars (bytes) with an ordinal &lt;= 255.
 *   bytes(bin32(1413829460), LE, 5)  returns "TEST\0;"
 *   bytes(bin32(1413829460), LE, 4)  returns "TEST"
 *   bytes(bin32(1413829460), LE, 3)  raises RANGE_ERROR
 *  @param bits Bin32 to be converted.
 *  @param length Determines the length of the result string.
 *  @return a string of ''length'' bytes with the unsigned binary
 *          representation of ''bits''.
 *  @exception RANGE_ERROR If ''length'' is negative or zero, or
 *                         if the result would not fit in ''length'' bytes.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bytes (<span class="op">in</span> <span class="type">bin32</span>: bits, LE, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> action <span class="stri">"BIN_N_BYTES_LE"</span>;


<span class="comment">(**
 *  Check if two bin32 values are equal.
 *  @return TRUE if the two values are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits1) = (<span class="op">in</span> <span class="type">bin32</span>: bits2)      <span class="keywd">is</span> action <span class="stri">"INT_EQ"</span>;


<span class="comment">(**
 *  Check if two bin32 values are not equal.
 *  @return FALSE if both values are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits1) &lt;> (<span class="op">in</span> <span class="type">bin32</span>: bits2)     <span class="keywd">is</span> action <span class="stri">"INT_NE"</span>;


<span class="comment">(**
 *  Compute a bitwise ''and'' of two bin32 values.
 *   bin32(2#1100) &amp; bin32(2#1010)  returns  bin32(2#1000)
 *  @return the bitwise ''and'' of the two values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits1) &amp; (<span class="op">in</span> <span class="type">bin32</span>: bits2)        <span class="keywd">is</span> action <span class="stri">"BIN_AND"</span>;


<span class="comment">(**
 *  Compute a bitwise inclusive ''or'' of two bin32 values.
 *   bin32(2#1100) | bin32(2#1010)  returns  bin32(2#1110)
 *  @return the bitwise inclusive ''or'' of the two values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits1) | (<span class="op">in</span> <span class="type">bin32</span>: bits2)        <span class="keywd">is</span> action <span class="stri">"BIN_OR"</span>;


<span class="comment">(**
 *  Compute a bitwise exclusive or (''xor'') of two bin32 values.
 *   bin32(2#1100) >&lt; bin32(2#1010)  returns  bin32(2#0110)
 *  @return the bitwise ''xor'' of the two values.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits1) >&lt; (<span class="op">in</span> <span class="type">bin32</span>: bits2)       <span class="keywd">is</span> action <span class="stri">"BIN_XOR"</span>;


<span class="comment">(**
 *  Compute a bitwise ''not'' of a bin32 value.
 *   ~bin32(2#1)  returns  bin32(16#fffffffe)
 *  @return the bitwise ''not'' of the value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: ~ (<span class="op">in</span> <span class="type">bin32</span>: bits) <span class="keywd">is</span>
  <span class="keywd">return</span> bits >&lt; bin32(16#ffffffff);


<span class="comment">(**
 *  Compute ''bits'' logically left shifted by ''lshift''.
 *   bin32(16#abcdef) &lt;&lt; 4  returns  bin32(16#abcdef0)
 *   bin32(1) &lt;&lt; 64         raises OVERFLOW_ERROR
 *  @return the left shifted value.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits) &lt;&lt; (<span class="op">in</span> <span class="type">integer</span>: lshift)     <span class="keywd">is</span> action <span class="stri">"BIN_LSHIFT"</span>;


<span class="comment">(**
 *  Compute ''bits'' logically right shifted by ''rshift''.
 *  Bits shifted beyond the lowest bit position are lost.
 *   bin32(16#abcdef) >> 4  returns  bin32(16#abcde)
 *  @return the right shifted value.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: (<span class="op">in</span> <span class="type">bin32</span>: bits) >> (<span class="op">in</span> <span class="type">integer</span>: rshift)     <span class="keywd">is</span> action <span class="stri">"BIN_RSHIFT"</span>;


<span class="comment">(**
 *  Logical left shift ''bits'' by ''lshift'' and assign the result back to ''bits''.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin32</span>: bits) &lt;&lt;:= (<span class="op">in</span> <span class="type">integer</span>: lshift)      <span class="keywd">is</span> action <span class="stri">"BIN_LSHIFT_ASSIGN"</span>;


<span class="comment">(**
 *  Logical right shift ''bits'' by ''rshift'' and assign the result back to ''bits''.
 *  Bits shifted beyond the lowest bit position are lost.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin32</span>: bits) >>:= (<span class="op">in</span> <span class="type">integer</span>: rshift)      <span class="keywd">is</span> action <span class="stri">"BIN_RSHIFT_ASSIGN"</span>;


<span class="comment">(**
 *  Compute a bitwise ''and'' and assign the result back to ''bits1''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin32</span>: bits1) &amp;:= (<span class="op">in</span> <span class="type">bin32</span>: bits2)         <span class="keywd">is</span> action <span class="stri">"BIN_AND_ASSIGN"</span>;


<span class="comment">(**
 *  Compute a bitwise inclusive ''or'' and assign the result back to ''bits1''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin32</span>: bits1) |:= (<span class="op">in</span> <span class="type">bin32</span>: bits2)         <span class="keywd">is</span> action <span class="stri">"BIN_OR_ASSIGN"</span>;


<span class="comment">(**
 *  Compute a bitwise exclusive or (''xor'') and assign the result back to ''bits1''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bin32</span>: bits1) >&lt;:= (<span class="op">in</span> <span class="type">bin32</span>: bits2)        <span class="keywd">is</span> action <span class="stri">"BIN_XOR_ASSIGN"</span>;


<span class="comment">(**
 *  Rotate the bits of a bin32 value left by shiftCount bits.
 *  The vacant bit positions at the right side are filled in with
 *  the bits that are shifted out at the left side.
 *   rotLeft(bin32(16#12345678), 8)  returns  bin32(16#34567812)
 *  @return the left rotated value.
 *  @exception OVERFLOW_ERROR If the shift amount is negative
 *             or greater than 32.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: rotLeft (<span class="op">in</span> <span class="type">bin32</span>: x, <span class="op">in</span> <span class="type">integer</span>: shiftCount) <span class="keywd">is</span>
  <span class="keywd">return</span> (x &lt;&lt; shiftCount | x >> (32 - shiftCount)) &amp; bin32(16#ffffffff);


<span class="comment">(**
 *  Rotate the bits of a bin32 value right by shiftCount bits.
 *  The vacant bit positions at the left side are filled in with
 *  the bits that are shifted out at the right side.
 *   rotRight(bin32(16#12345678), 8)  returns  bin32(16#78123456)
 *  @return the right rotated value.
 *  @exception OVERFLOW_ERROR If the shift amount is negative
 *             or greater than 32.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: rotRight (<span class="op">in</span> <span class="type">bin32</span>: x, <span class="op">in</span> <span class="type">integer</span>: shiftCount) <span class="keywd">is</span>
  <span class="keywd">return</span> (x >> shiftCount | x &lt;&lt; (32 - shiftCount)) &amp; bin32(16#ffffffff);


<span class="comment">(**
 *  Get bits in MBF single-precision representation from a float.
 *  Microsoft Binary Format (MBF) is a format for floating point numbers.
 *  The single-precision version of MBF has a 8 bit exponent, a sign bit
 *  and a 23 bit mantissa.
 *   float2MbfBits(1.0, SINGLE)  returns  bin32(16#81000000)
 *  @param number Float value to be converted to bin32.
 *  @return 32 bits in MBF single-precision float representation.
 *  @exception RANGE_ERROR If number is not representable in MBF.
 *             NaN, Infinity and -Infinity are not representable
 *             in MBF. Numbers with an absolute value larger than
 *             1.7014117331926443e+38 are also not representable
 *             in MBF.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: float2MbfBits (<span class="op">in</span> <span class="type">float</span>: number, SINGLE) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">bin32</span>: bits <span class="keywd">is</span> bin32(0);
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: exponentBits <span class="keywd">is</span> 8;
    <span class="keywd">const</span> <span class="type">integer</span>: mantissaBits <span class="keywd">is</span> 23;
    <span class="keywd">const</span> <span class="type">bin32</span>: ieeeSignMask <span class="keywd">is</span> bin32(1) &lt;&lt; (exponentBits + mantissaBits);
    <span class="keywd">const</span> <span class="type">bin32</span>: mantissaMask <span class="keywd">is</span> bin32(pred(1 &lt;&lt; mantissaBits));
    <span class="keywd">const</span> <span class="type">integer</span>: maxExponent <span class="keywd">is</span> pred(2 ** exponentBits);
    <span class="keywd">const</span> <span class="type">integer</span>: mbfExponentBias <span class="keywd">is</span> 129;
    <span class="keywd">var</span> <span class="type">floatElements</span>: ieeeElements <span class="keywd">is</span> floatElements.value;
    <span class="keywd">var</span> <span class="type">bin32</span>: fractionBits <span class="keywd">is</span> bin32(0);
    <span class="keywd">var</span> <span class="type">integer</span>: mbfExponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> isNaN(number) <span class="op">or</span> abs(number) = Infinity <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">elsif</span> number &lt;> 0.0 <span class="keywd">then</span>
      ieeeElements := decompose(number);
      fractionBits := bin32(ieeeElements.fraction);
      <span class="keywd">if</span> abs(float(fractionBits)) = 1.0 <span class="keywd">then</span>
        <span class="comment"># Because of the rounding to single the fraction could be 1.0.</span>
        incr(ieeeElements.exponent);
        <span class="comment"># Interpret the mantissa as 0.5.</span>
      <span class="keywd">end</span> <span class="keywd">if</span>;
      mbfExponent := ieeeElements.exponent - 1 + mbfExponentBias;
      <span class="keywd">if</span> mbfExponent > maxExponent <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">elsif</span> mbfExponent > 0 <span class="keywd">then</span>
        bits := (bin32(mbfExponent) &lt;&lt; succ(mantissaBits)) |
                ((fractionBits &amp; ieeeSignMask) >> exponentBits) |
                fractionBits &amp; mantissaMask;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get a float from bits in MBF single-precision representation.
 *  Microsoft Binary Format (MBF) is a format for floating point numbers.
 *  The single-precision version of MBF has a 8 bit exponent, a sign bit
 *  and a 23 bit mantissa.
 *   mbfBits2Float(bin32(16#81000000))  returns  1.0
 *  @param bits Bits to be converted to a float.
 *  @return a float from bits in MBF single-precision float representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: mbfBits2Float (<span class="op">in</span> <span class="type">bin32</span>: bits) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">float</span>: aFloat <span class="keywd">is</span> 0.0;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: mantissaBits <span class="keywd">is</span> 23;
    <span class="keywd">const</span> <span class="type">bin32</span>: mantissaMask <span class="keywd">is</span> bin32(pred(1 &lt;&lt; mantissaBits));
    <span class="keywd">const</span> <span class="type">bin32</span>: mantissaSign <span class="keywd">is</span> bin32(1 &lt;&lt; mantissaBits);
    <span class="keywd">const</span> <span class="type">integer</span>: exponentBias <span class="keywd">is</span> 129;
    <span class="keywd">var</span> <span class="type">integer</span>: exponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    exponent := ord(bits >> succ(mantissaBits));
    <span class="keywd">if</span> exponent &lt;> 0 <span class="keywd">then</span>
      <span class="comment"># Ignore sign bit and set implicit leading one bit of mantissa instead.</span>
      aFloat := float(ord(mantissaSign | bits &amp; mantissaMask));
      <span class="comment"># Check sign bit.</span>
      <span class="keywd">if</span> ord(bits &amp; mantissaSign) &lt;> 0 <span class="keywd">then</span>
        aFloat := -aFloat;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      aFloat := aFloat * 2.0 ** (exponent - exponentBias - mantissaBits);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a string of four little-endian bytes to a bin32 value.
 *  @return the bin32 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: bin32 (<span class="op">in</span> <span class="type">string</span>: fourBytes, LE) <span class="keywd">is</span>
  <span class="keywd">return</span> bin32(fourBytes[1])       |
         bin32(fourBytes[2]) &lt;&lt;  8 |
         bin32(fourBytes[3]) &lt;&lt; 16 |
         bin32(fourBytes[4]) &lt;&lt; 24;


<span class="comment">(**
 *  Convert a string of four big-endian bytes to a bin32 value.
 *  @return the bin32 value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bin32</span>: bin32 (<span class="op">in</span> <span class="type">string</span>: fourBytes, BE) <span class="keywd">is</span>
  <span class="keywd">return</span> bin32(fourBytes[1]) &lt;&lt; 24 |
         bin32(fourBytes[2]) &lt;&lt; 16 |
         bin32(fourBytes[3]) &lt;&lt;  8 |
         bin32(fourBytes[4]);


<span class="comment"># Allows 'array bin32' everywhere without extra type definition.</span>
<span class="keywd">const</span> <span class="type">type</span>: _bin32Array <span class="keywd">is</span> <span class="type">array</span> <span class="type">bin32</span>;


enable_output(bin32);

CASE_DECLS(bin32);
DECLARE_TERNARY(bin32);
</pre>
</body>
</html>
