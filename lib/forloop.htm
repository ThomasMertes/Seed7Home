<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  forloop.s7i   For-loop and templates to define for-loop         *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2015, 2017, 2019, 2021  Thomas Mertes      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  [[integer|Integer]] for-loop, looping from ''lowerLimit'' upward to ''upperLimit''.
 *  The variable ''aVar'' is initialized with ''lowerLimit''. The
 *  ''statements'' are executed repeatedly. After each repetition the
 *  variable ''aVar'' is incremented. After the ''statements'' were
 *  executed with ''upperLimit'' the for-loop is terminated. If
 *  ''lowerLimit'' is greater than ''upperLimit'' the ''statements'' are
 *  not executed at all.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: aVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">integer</span>: lowerLimit) <span class="keywd">to</span> (<span class="op">in</span> <span class="type">integer</span>: upperLimit) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"PRC_FOR_TO"</span>;


<span class="comment">(**
 *  [[integer|Integer]] for-loop, looping from ''upperLimit'' downward to ''lowerLimit''.
 *  The variable ''aVar'' is initialized with ''upperLimit''. The
 *  ''statements'' are executed repeatedly. After each repetition the
 *  variable ''aVar'' is decremented. After the ''statements'' were
 *  executed with ''lowerLimit'' the for-loop is terminated. If
 *  ''upperLimit'' is less than ''lowerLimit'' the ''statements'' are
 *  not executed at all.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: aVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">integer</span>: upperLimit) <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">integer</span>: lowerLimit) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"PRC_FOR_DOWNTO"</span>;


<span class="comment">(**
 *  [[integer|Integer]] for-loop, looping upward and incrementing by ''incr_step''.
 *  The variable ''aVar'' is initialized with ''lowerLimit''. The
 *  ''statements'' are executed repeatedly. After each repetition the
 *  variable ''aVar'' is incremented by ''incr_step''. After the
 *  ''statements'' were executed with ''upperLimit'' the for-loop is
 *  terminated. If ''lowerLimit'' is greater than ''upperLimit'' the
 *  ''statements'' are not executed at all.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">integer</span>: lowerLimit) <span class="keywd">to</span> (<span class="op">in</span> <span class="type">integer</span>: upperLimit)
                step (<span class="op">in</span> <span class="type">integer</span>: incr_step) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"PRC_FOR_TO_STEP"</span>;


<span class="comment">(**
 *  [[integer|Integer]] for-loop, looping downward and decrementing by ''incr_step''.
 *  The variable ''aVar'' is initialized with ''upperLimit''. The
 *  ''statements'' are executed repeatedly. After each repetition the
 *  variable ''aVar'' is decremented by ''incr_step''. After the
 *  ''statements'' were executed with ''lowerLimit'' the for-loop is
 *  terminated. If ''upperLimit'' is less than ''lowerLimit'' the
 *  ''statements'' are not executed at all.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">integer</span>: upperLimit) <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">integer</span>: lowerLimit)
                step (<span class="op">in</span> <span class="type">integer</span>: decr_step) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"PRC_FOR_DOWNTO_STEP"</span>;


<span class="comment">(**
 *  Template function to define for-loops with step for ''aType''.
 *  Defines an upward and a downward counting for-loop which
 *  increments/decrements the loop variable with ''incr_step''
 *  respectively ''decr_step''. The for-loops are only defined,
 *  if ''aType'' supports the +:= respectively -:= operator.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: FOR_STEP_DECLS (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getobj((<span class="keywd">inout</span> <span class="type">aType</span>: variable) +:= (<span class="op">in</span> <span class="type">integer</span>: delta)) &lt;> NIL <span class="keywd">then</span>

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit) <span class="keywd">to</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit)
          step (<span class="op">in</span> <span class="type">integer</span>: incr_step) <span class="keywd">do</span>
          (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          variable := lowerLimit;
          <span class="keywd">while</span> variable &lt;= upperLimit <span class="keywd">do</span>
            statements;
            variable +:= incr_step;
          <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> getobj((<span class="keywd">inout</span> <span class="type">aType</span>: variable) -:= (<span class="op">in</span> <span class="type">integer</span>: delta)) &lt;> NIL <span class="keywd">then</span>

      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit) <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit)
          step (<span class="op">in</span> <span class="type">integer</span>: decr_step) <span class="keywd">do</span>
          (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          variable := upperLimit;
          <span class="keywd">while</span> variable >= lowerLimit <span class="keywd">do</span>
            statements;
            variable -:= decr_step;
          <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Template function to define for-loops for ''aType'' with a ''condition''.
 *  Defines an upward and a downward counting for-loop which
 *  increments/decrements the loop variable. The loop is terminated if
 *  either the last value has been processed or if the ''condition'' is TRUE.
 *  The ''condition'' is checked before the statements in the loop body are
 *  executed. The loop variable never gets a value below ''lowerLimit''
 *  or above ''upperLimit''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: FOR_UNTIL_DECLS (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable)
                <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit)
                <span class="keywd">to</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit)
                <span class="keywd">until</span> (<span class="op">in</span> <span class="type">func</span> <span class="type">boolean</span>: condition)
                <span class="keywd">do</span> (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: continue <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        variable := lowerLimit;
        continue := variable &lt;= upperLimit;
        <span class="keywd">while</span> continue <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
          statements;
          <span class="keywd">if</span> variable &lt; upperLimit <span class="keywd">then</span>
            incr(variable);
          <span class="keywd">else</span>
            continue := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable)
                <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit)
                <span class="keywd">to</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit)
                <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition)
                <span class="keywd">do</span> (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: continue <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        variable := lowerLimit;
        continue := variable &lt;= upperLimit;
        <span class="keywd">while</span> continue <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
          statements;
          <span class="keywd">if</span> variable &lt; upperLimit <span class="keywd">then</span>
            incr(variable);
          <span class="keywd">else</span>
            continue := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable)
                <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit)
                <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit)
                <span class="keywd">until</span> (<span class="op">in</span> <span class="type">func</span> <span class="type">boolean</span>: condition)
                <span class="keywd">do</span> (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: continue <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        variable := upperLimit;
        continue := variable >= lowerLimit;
        <span class="keywd">while</span> continue <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
          statements;
          <span class="keywd">if</span> variable > lowerLimit <span class="keywd">then</span>
            decr(variable);
          <span class="keywd">else</span>
            continue := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable)
                <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit)
                <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit)
                <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition)
                <span class="keywd">do</span> (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: continue <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        variable := upperLimit;
        continue := variable >= lowerLimit;
        <span class="keywd">while</span> continue <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
          statements;
          <span class="keywd">if</span> variable > lowerLimit <span class="keywd">then</span>
            decr(variable);
          <span class="keywd">else</span>
            continue := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Template function to define all for-loops for ''aType''.
 *  Defines upward and downward counting for-loops which
 *  increment/decrement the loop variable with 1 or with a given step value.
 *  In normal for-loops and in for-until-loops the loop variable never gets
 *  a value below ''lowerLimit'' or above ''upperLimit''. The for-loops with
 *  step value are defined with the ''FOR_STEP_DECLS'' template.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: FOR_DECLS (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>

    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit) <span class="keywd">to</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit) <span class="keywd">do</span>
        (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: continue <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        variable := lowerLimit;
        continue := variable &lt;= upperLimit;
        <span class="keywd">while</span> continue <span class="keywd">do</span>
          statements;
          <span class="keywd">if</span> variable &lt; upperLimit <span class="keywd">then</span>
            incr(variable);
          <span class="keywd">else</span>
            continue := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">aType</span>: upperLimit) <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">aType</span>: lowerLimit) <span class="keywd">do</span>
        (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">local</span>
        <span class="keywd">var</span> <span class="type">boolean</span>: continue <span class="keywd">is</span> FALSE;
      <span class="keywd">begin</span>
        variable := upperLimit;
        continue := variable >= lowerLimit;
        <span class="keywd">while</span> continue <span class="keywd">do</span>
          statements;
          <span class="keywd">if</span> variable > lowerLimit <span class="keywd">then</span>
            decr(variable);
          <span class="keywd">else</span>
            continue := FALSE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    FOR_UNTIL_DECLS(aType);
    FOR_STEP_DECLS(aType);
  <span class="keywd">end</span> <span class="keywd">func</span>;


FOR_UNTIL_DECLS(integer);
FOR_DECLS(char);
FOR_DECLS(boolean);


<span class="keywd">const</span> <span class="type">proc</span>: FOR_ENUM_DECLS (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>

    <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">aType</span>: variable) <span class="keywd">range</span> (attr aType) <span class="keywd">do</span>
        (<span class="op">in</span> <span class="type">proc</span>: statements) <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        <span class="keywd">for</span> variable <span class="keywd">range</span> aType.first <span class="keywd">to</span> aType.last <span class="keywd">do</span>
          statements;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  For-loop which loops a given number of times.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="op">in</span> <span class="type">integer</span>: numRepeats) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: count <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> count <span class="keywd">range</span> numRepeats <span class="keywd">downto</span> 1 <span class="keywd">do</span>
      statements;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  For-loop which loops over the [[char|characters]] of a [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"STR_FOR"</span>;


<span class="comment">(**
 *  For-loop which loops over the keys (indices) of a [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"STR_FOR_KEY"</span>;


<span class="comment">(**
 *  For-loop which loops over [[char|characters]] and keys (indices) of a [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar) <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: keyVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span>                                                      action <span class="stri">"STR_FOR_VAR_KEY"</span>;


<span class="comment">(**
 *  For-loop which loops over the [[char|characters]] of a [[string]]
 *  Additionally a ''condition'' is checked before the statements in
 *  the loop body are executed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar)
            <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri)
            <span class="keywd">until</span> (<span class="op">in</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      forVar := stri[1];
      <span class="keywd">while</span> number &lt;= length(stri) <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
        statements;
        incr(number);
        <span class="keywd">if</span> number &lt;= length(stri) <span class="keywd">then</span>
          forVar := stri[number];
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar)
            <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri)
            <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      forVar := stri[1];
      <span class="keywd">while</span> number &lt;= length(stri) <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
        statements;
        incr(number);
        <span class="keywd">if</span> number &lt;= length(stri) <span class="keywd">then</span>
          forVar := stri[number];
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  For-loop which loops over the keys (indices) of a [[string]].
 *  Additionally a ''condition'' is checked before the statements in
 *  the loop body are executed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: number)
            <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri)
            <span class="keywd">until</span> (<span class="op">in</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="keywd">until</span> condition <span class="keywd">do</span>
      statements;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: number)
            <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri)
            <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="keywd">until</span> condition <span class="keywd">do</span>
      statements;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  For-loop which loops over [[char|characters]] and keys (indices) of a [[string]].
 *  Additionally a ''condition'' is checked before the statements in
 *  the loop body are executed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar)
            <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: number)
            <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri)
            <span class="keywd">until</span> (<span class="op">in</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      forVar := stri[1];
      <span class="keywd">while</span> number &lt;= length(stri) <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
        statements;
        incr(number);
        <span class="keywd">if</span> number &lt;= length(stri) <span class="keywd">then</span>
          forVar := stri[number];
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">char</span>: forVar)
            <span class="keywd">key</span> (<span class="keywd">inout</span> <span class="type">integer</span>: number)
            <span class="keywd">range</span> (<span class="op">in</span> <span class="type">string</span>: stri)
            <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      forVar := stri[1];
      <span class="keywd">while</span> number &lt;= length(stri) <span class="op">and</span> <span class="op">not</span> condition <span class="keywd">do</span>
        statements;
        incr(number);
        <span class="keywd">if</span> number &lt;= length(stri) <span class="keywd">then</span>
          forVar := stri[number];
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
