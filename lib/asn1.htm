<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  asn1.s7i      Support for Abstract Syntax Notation One (ASN.1). *)</span>
<span class="comment">(*  Copyright (C) 2013, 2022, 2023  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bytedata.htm">bytedata.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/unicode.htm">unicode.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: classTagName <span class="keywd">is</span> [0] (
    <span class="stri">"EOC (End-of-Content)"</span>,
    <span class="stri">"BOOLEAN"</span>,
    <span class="stri">"INTEGER"</span>,
    <span class="stri">"BIT STRING"</span>,
    <span class="stri">"OCTET STRING"</span>,
    <span class="stri">"NULL"</span>,
    <span class="stri">"OBJECT IDENTIFIER"</span>,
    <span class="stri">"Object Descriptor"</span>,
    <span class="stri">"EXTERNAL"</span>,
    <span class="stri">"REAL (float)"</span>,
    <span class="stri">"ENUMERATED"</span>,
    <span class="stri">"EMBEDDED PDV"</span>,
    <span class="stri">"UTF8String"</span>,
    <span class="stri">"RELATIVE-OID"</span>,
    <span class="stri">"(reserved 14)"</span>,
    <span class="stri">"(reserved 15)"</span>,
    <span class="stri">"SEQUENCE"</span>,
    <span class="stri">"SET"</span>,
    <span class="stri">"NumericString"</span>,
    <span class="stri">"PrintableString"</span>,
    <span class="stri">"T61String"</span>,
    <span class="stri">"VideotexString"</span>,
    <span class="stri">"IA5String"</span>,
    <span class="stri">"UTCTime"</span>,
    <span class="stri">"GeneralizedTime"</span>,
    <span class="stri">"GraphicString"</span>,
    <span class="stri">"VisibleString"</span>,
    <span class="stri">"GeneralString"</span>,
    <span class="stri">"UniversalString"</span>,
    <span class="stri">"CHARACTER STRING"</span>,
    <span class="stri">"BMPString"</span>,
    <span class="stri">"(use long-form)"</span>
  );

<span class="comment">(**
 *  Tag type used by ASN.1/BER data elements.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: asn1TagType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    tagEndOfContent,
    tagBoolean,
    tagInteger,
    tagBitString,
    tagOctetString,
    tagNull,
    tagObjectIdentifier,
    tagObjectDescriptor,
    tagExternal,
    tagReal,
    tagEnumerated,
    tagEmbeddedPdv,
    tagUTF8String,
    tagRelativeOid,
    tagReserved14,
    tagReserved15,
    tagSequence,
    tagSet,
    tagNumericString,
    tagPrintableString,
    tagT61String,
    tagVideotexString,
    tagIA5String,
    tagUTCTime,
    tagGeneralizedTime,
    tagGraphicString,
    tagVisibleString,
    tagGeneralString,
    tagUniversalString,
    tagCharacterString,
    tagBMPString,
    tagUseLongForm
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">type</span>: asn1TagClass <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    universalTagClass, applicationTagClass, contextSpecificTagClass, privateTagClass
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="comment">(**
 *  ASN.1/BER data element.
 *  This type is used for reading ASN.1/BER data.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: asn1DataElement <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">asn1TagClass</span>: tagClass <span class="keywd">is</span> universalTagClass;
    <span class="keywd">var</span> <span class="type">boolean</span>: constructed <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">asn1TagType</span>: tagType <span class="keywd">is</span> tagEndOfContent;
    <span class="keywd">var</span> <span class="type">boolean</span>: indefinite <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: dataStart <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment"># The element tagCategory is deprecated. Use tagType instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">asn1TagType</span>: (<span class="op">in</span> <span class="type">asn1DataElement</span>: dataElem) . tagCategory <span class="keywd">is</span>
    <span class="keywd">return</span> dataElem.tagType;
<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">asn1TagType</span>: (<span class="keywd">inout</span> <span class="type">asn1DataElement</span>: dataElem) . tagCategory <span class="keywd">is</span>
    <span class="keywd">return</span> <span class="keywd">var</span> dataElem.tagType;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encodeObjectIdentifier (<span class="op">in</span> <span class="type">array</span> <span class="type">integer</span>: oid) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: encodedOid <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 3;
    <span class="keywd">var</span> <span class="type">integer</span>: subId <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: subIdStri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    encodedOid := str(chr(oid[1] * 40 + oid[2]));
    <span class="keywd">while</span> pos &lt;= length(oid) <span class="keywd">do</span>
      subId := oid[pos];
      <span class="keywd">if</span> subId &lt; 0 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">elsif</span> subId &lt;= 127 <span class="keywd">then</span>
        <span class="comment"># Encode in one byte</span>
        encodedOid &amp;:= chr(subId);
      <span class="keywd">else</span>
        subIdStri := str(chr(subId <span class="op">mod</span> 128));
        subId := subId <span class="op">mdiv</span> 128;
        <span class="keywd">repeat</span>
          subIdStri := str(chr(subId <span class="op">mod</span> 128 + 128)) &amp; subIdStri;
          subId := subId <span class="op">mdiv</span> 128;
        <span class="keywd">until</span> subId = 0;
        encodedOid &amp;:= subIdStri;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      incr(pos);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">integer</span>: decodeObjectIdentifier (<span class="op">in</span> <span class="type">string</span>: encodedOid) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: oid <span class="keywd">is</span> 0 <span class="op">times</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 2;
    <span class="keywd">var</span> <span class="type">integer</span>: subId <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: highBitClear <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    oid &amp;:= ord(encodedOid[1]) <span class="op">mdiv</span> 40;
    oid &amp;:= ord(encodedOid[1]) <span class="op">mod</span> 40;
    <span class="keywd">while</span> pos &lt;= length(encodedOid) <span class="keywd">do</span>
      subId := 0;
      <span class="keywd">repeat</span>
        subId *:= 128;
        subId +:= ord(encodedOid[pos]) <span class="op">mod</span> 128;
        highBitClear := ord(encodedOid[pos]) &lt;= 127;
        incr(pos);
      <span class="keywd">until</span> highBitClear;
      oid &amp;:= subId;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: objectIdentifier (<span class="op">in</span> <span class="type">string</span>: encodedOid) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 2;
    <span class="keywd">var</span> <span class="type">integer</span>: subId <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: highBitClear <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    stri := str(ord(encodedOid[1]) <span class="op">mdiv</span> 40);
    stri &amp;:= <span class="stri">" "</span> &amp; str(ord(encodedOid[1]) <span class="op">mod</span> 40);
    <span class="keywd">while</span> pos &lt;= length(encodedOid) <span class="keywd">do</span>
      subId := 0;
      <span class="keywd">repeat</span>
        subId *:= 128;
        subId +:= ord(encodedOid[pos]) <span class="op">mod</span> 128;
        highBitClear := ord(encodedOid[pos]) &lt;= 127;
        incr(pos);
      <span class="keywd">until</span> highBitClear;
      stri &amp;:= <span class="stri">" "</span> &amp; str(subId);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read the header of an ASN.1/BER data element, from ''stri''.
 *  It is assumed that the data element header starts at position ''pos''.
 *  The function advances ''pos'' beyond the header to the actual data.
 *  The actual data can be read afterwards, with the function ''getData''.
 *   dataElem := getAsn1DataElement(asn1, pos);
 *   if dataElem.tagType = tagObjectIdentifier then
 *     contentType := getData(asn1, pos, dataElem);
 *     ...
 *  @return the header of an ASN.1/BER data element.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">asn1DataElement</span>: getAsn1DataElement (<span class="op">in</span> <span class="type">string</span>: stri, <span class="keywd">inout</span> <span class="type">integer</span>: pos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">asn1DataElement</span>: dataElement <span class="keywd">is</span> asn1DataElement.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: classTag <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: eocPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: numOctets <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    classTag := ord(stri[pos]);
    incr(pos);
    length := ord(stri[pos]);
    incr(pos);
    dataElement.tagClass := asn1TagClass <span class="op">conv</span> (classTag >> 6);
    dataElement.constructed := (classTag >> 5) <span class="op">mod</span> 2 &lt;> 0;
    dataElement.tagType := asn1TagType <span class="op">conv</span> (classTag <span class="op">mod</span> 32);
    <span class="keywd">if</span> length &lt;= 127 <span class="keywd">then</span>
      <span class="comment"># Short form</span>
      <span class="comment"># writeln("Short form: length=" &lt;&amp; length &lt;&amp; ", pos=" &lt;&amp; pos);</span>
      dataElement.length := length;
    <span class="keywd">elsif</span> length = 128 <span class="keywd">then</span>
      <span class="comment"># Indefinite form</span>
      <span class="comment"># writeln(" *** indefinite form ***");</span>
      dataElement.indefinite := TRUE;
      eocPos := pos(stri, <span class="stri">"\0;\0;"</span>, pos);
      <span class="keywd">if</span> eocPos &lt;> 0 <span class="keywd">then</span>
        dataElement.length := eocPos - pos;
      <span class="keywd">else</span>
        dataElement.length := length(stri) + 1 - pos;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="comment"># Long form</span>
      numOctets := length <span class="op">mod</span> 128;
      dataElement.length := bytes2Int(stri[pos fixLen numOctets], UNSIGNED, BE);
      pos +:= numOctets;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    dataElement.dataStart := pos;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read the data of a given ASN.1/BER ''dataElement'', from ''stri''.
 *  It is assumed that the actual data starts at position ''pos''.
 *  The function advances ''pos'' beyond the ''dataElement'' data.
 *  @return the data of the ASN.1/BER ''dataElement''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getData (<span class="op">in</span> <span class="type">string</span>: stri, <span class="keywd">inout</span> <span class="type">integer</span>: pos,
    <span class="op">in</span> <span class="type">asn1DataElement</span>: dataElement) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: data <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    data := stri[dataElement.dataStart len dataElement.length];
    pos +:= dataElement.length;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Skip the data of a given ASN.1/BER ''dataElement'', from ''stri''.
 *  It is assumed that the actual data starts at position ''pos''.
 *  The function advances ''pos'' beyond the ''dataElement'' data.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: skipData (<span class="keywd">inout</span> <span class="type">integer</span>: pos, <span class="op">in</span> <span class="type">asn1DataElement</span>: dataElement) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    pos +:= dataElement.length;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genAsn1Length (<span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: lengthAsBytes <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt;= 127 <span class="keywd">then</span>
      <span class="comment"># Short form</span>
      asn1 &amp;:= chr(length);
    <span class="keywd">else</span>
      <span class="comment"># Long form</span>
      lengthAsBytes := bytes(length, UNSIGNED, BE);
      asn1 &amp;:= chr(128 + length(lengthAsBytes));
      asn1 &amp;:= lengthAsBytes;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">asn1TagType</span>: asn1TagTypeOfString (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">asn1TagType</span>: tagType <span class="keywd">is</span> tagEndOfContent;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: visibleChar <span class="keywd">is</span> {<span class="stri">' '</span> .. <span class="stri">'~'</span>};  <span class="comment"># ASCII without control chars</span>
    <span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: printableChar <span class="keywd">is</span>
        {<span class="stri">'A'</span> .. <span class="stri">'Z'</span>} | {<span class="stri">'a'</span> .. <span class="stri">'z'</span>} | {<span class="stri">'0'</span> .. <span class="stri">'9'</span>} |
        {<span class="stri">' '</span>, <span class="stri">'''</span>, <span class="stri">'('</span>, <span class="stri">')'</span>, <span class="stri">'+'</span>, <span class="stri">','</span>, <span class="stri">'-'</span>, <span class="stri">'.'</span>, <span class="stri">'/'</span>, <span class="stri">':'</span>, <span class="stri">'='</span>, <span class="stri">'?'</span>};
    <span class="keywd">var</span> <span class="type">boolean</span>: isPrintableString <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">boolean</span>: isVisibleString <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> stri <span class="keywd">until</span> <span class="op">not</span> isPrintableString <span class="keywd">do</span>
      <span class="keywd">if</span> ch <span class="op">not</span> <span class="op">in</span> printableChar <span class="keywd">then</span>
        isPrintableString := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> ch <span class="op">not</span> <span class="op">in</span> visibleChar <span class="keywd">then</span>
        isVisibleString := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> isPrintableString <span class="keywd">then</span>
      tagType := tagPrintableString;
    <span class="keywd">elsif</span> isVisibleString <span class="keywd">then</span>
      tagType := tagVisibleString;
    <span class="keywd">else</span>
      tagType := tagUTF8String;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create an ASN.1/BER data element from ''tagType'' and ''data''.
 *  @return the ASN.1/BER data element as [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genAsn1Element (<span class="op">in</span> <span class="type">asn1TagType</span>: tagType, <span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    asn1 &amp;:= chr(ord(tagType));
    asn1 &amp;:= genAsn1Length(length(data));
    asn1 &amp;:= data;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create an integer ASN.1/BER data element from ''data''.
 *  The tag type of the generated data element is tagInteger.
 *   genAsn1Integer(bytes(123, SIGNED, BE))  returns  "\2;\1;{"
 *  @return the integer ASN.1/BER data element as [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genAsn1Integer (<span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    asn1 &amp;:= chr(ord(tagInteger));
    asn1 &amp;:= genAsn1Length(length(data));
    asn1 &amp;:= data;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a string ASN.1/BER data element from ''data''.
 *  Depending on ''data'' the tag type of the generated data element
 *  is tagPrintableString, tagVisibleString or tagUTF8String.
 *   genAsn1String("abc")  returns  "\19;\3;abc"
 *   genAsn1String("#%&amp;")  returns  "\26;\3;#%&amp;"
 *   genAsn1String("€")    returns  "\f\3;â\130;¬"
 *  @return the string ASN.1/BER data element as [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genAsn1String (<span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">asn1TagType</span>: tagType <span class="keywd">is</span> tagEndOfContent;
  <span class="keywd">begin</span>
    tagType := asn1TagTypeOfString(data);
    <span class="keywd">if</span> tagType = tagUTF8String <span class="keywd">then</span>
      asn1 := genAsn1Element(tagUTF8String, toUtf8(data));
    <span class="keywd">else</span>
      asn1 := genAsn1Element(tagType, data);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a sequence ASN.1/BER data element from ''data''.
 *  The tag type of the generated data element is tagSequence.
 *  @return the sequence ASN.1/BER data element as [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genAsn1Sequence (<span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="comment"># A sequence is universal (0) and constructed (32).</span>
    asn1 &amp;:= chr(ord(tagSequence) + 32);
    asn1 &amp;:= genAsn1Length(length(data));
    asn1 &amp;:= data;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a set ASN.1/BER data element from ''data''.
 *  The tag type of the generated data element is tagSet.
 *  @return the set ASN.1/BER data element as [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genAsn1Set (<span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="comment"># A set is universal (0) and constructed (32).</span>
    asn1 &amp;:= chr(ord(tagSet) + 32);
    asn1 &amp;:= genAsn1Length(length(data));
    asn1 &amp;:= data;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create an explicit ASN.1/BER tag with ''tagNumber'' from ''data''.
 *  @return the explicit ASN.1/BER tag as [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: genExplicitAsn1Tag (<span class="op">in</span> <span class="type">integer</span>: tagNumber, <span class="op">in</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: asn1 <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="comment"># A tag is context-specific (128) and constructed (32).</span>
    asn1 &amp;:= chr(tagNumber + 160);
    asn1 &amp;:= genAsn1Length(length(data));
    asn1 &amp;:= data;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: printAsn1 (<span class="op">in</span> <span class="type">string</span>: stri, <span class="keywd">inout</span> <span class="type">integer</span>: pos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: startPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: constructed <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: classTag <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">asn1TagType</span>: tagType <span class="keywd">is</span> tagEndOfContent;
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: numOctets <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: contents <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: posAfterwards <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: subId <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    startPos := pos;
    write(pos <span class="op">lpad</span> 5 &lt;&amp; <span class="stri">": "</span>);
    classTag := ord(stri[pos]);
    incr(pos);
    length := ord(stri[pos]);
    incr(pos);
    write(classTag radix 16 <span class="op">lpad0</span> 2 &lt;&amp; <span class="stri">" "</span>);
    write(<span class="stri">"UACP"</span>[(classTag >> 6) + 1]);
    constructed := (classTag >> 5) <span class="op">mod</span> 2 &lt;> 0;
    write(<span class="stri">"PC"</span>[succ(ord(constructed))]);
    tagType := asn1TagType <span class="op">conv</span> (classTag <span class="op">mod</span> 32);
    write(<span class="stri">" "</span> &lt;&amp; length radix 16 <span class="op">lpad0</span> 2);
    <span class="keywd">if</span> classTag <span class="op">mod</span> 32 = 31 <span class="keywd">then</span>
      writeln(<span class="stri">" *** long form *** "</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> length &lt;= 127 <span class="keywd">then</span>
      <span class="comment"># Short form</span>
      <span class="comment"># writeln("Short form: length=" &lt;&amp; length &lt;&amp; ", pos=" &lt;&amp; pos);</span>
      contents := stri[pos len length];
      posAfterwards := pos + length;
    <span class="keywd">elsif</span> length = 128 <span class="keywd">then</span>
      <span class="comment"># Indefinite form</span>
      writeln(<span class="stri">" *** indefinite form ***"</span>);
      posAfterwards := pos;
      contents := getAsciiz(stri, posAfterwards);
      <span class="keywd">if</span> pos &lt;= length(stri) <span class="op">and</span> stri[pos] = <span class="stri">'\0;'</span> <span class="keywd">then</span>
        incr(pos);
      <span class="keywd">else</span>
        writeln(<span class="stri">" *** Second byte of EOC (End-of-Content) not 0"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      <span class="comment"># Long form</span>
      numOctets := length <span class="op">mod</span> 128;
      <span class="keywd">if</span> numOctets &lt;= 7 <span class="keywd">then</span>
        length := bytes2Int(stri[pos fixLen numOctets], UNSIGNED, BE);
        <span class="comment"># writeln("Long form: numOctets=" &lt;&amp; numOctets &lt;&amp; ", length=" &lt;&amp; length);</span>
      <span class="keywd">else</span>
        writeln(<span class="stri">" *** numOctets ("</span> &lt;&amp; numOctets &lt;&amp; <span class="stri">") too big."</span>);
        length := 0;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      pos +:= numOctets;
      contents := stri[pos len length];
      posAfterwards := pos + length;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    write(<span class="stri">" "</span> &lt;&amp; length <span class="op">lpad</span> 4);
    <span class="keywd">if</span> (classTag >> 6) = 2 <span class="keywd">then</span>
      write(<span class="stri">" EXPLICIT TAG ["</span> &lt;&amp; ord(tagType) &lt;&amp; <span class="stri">"]"</span>);
    <span class="keywd">else</span>
      write(<span class="stri">" "</span> &lt;&amp; classTagName[ord(tagType)]);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> tagType = tagObjectIdentifier <span class="keywd">then</span>
      write(<span class="stri">":"</span>);
      <span class="keywd">for</span> subId <span class="keywd">range</span> decodeObjectIdentifier(contents) <span class="keywd">do</span>
        write(<span class="stri">" "</span> &lt;&amp; subId);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      writeln(<span class="stri">" ("</span> &lt;&amp; literal(contents) &lt;&amp; <span class="stri">")"</span>);
    <span class="keywd">else</span>
      writeln(<span class="stri">": "</span> &lt;&amp; literal(contents));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> constructed <span class="keywd">then</span>
      <span class="keywd">while</span> pos &lt; posAfterwards <span class="keywd">do</span>
        printAsn1(stri, pos);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">if</span> pos &lt;> posAfterwards <span class="keywd">then</span>
        writeln(<span class="stri">"strange things happen "</span> &lt;&amp; pos &lt;&amp; <span class="stri">" "</span> &lt;&amp; posAfterwards);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      writeln(<span class="stri">"Leaving construct started at "</span> &lt;&amp; startPos);
    <span class="keywd">else</span>
      <span class="keywd">if</span> posAfterwards > succ(length(stri)) <span class="keywd">then</span>
        writeln(<span class="stri">"strange things happen "</span> &lt;&amp; posAfterwards &lt;&amp; <span class="stri">" "</span> &lt;&amp; succ(length(stri)));
      <span class="keywd">end</span> <span class="keywd">if</span>;
      pos := posAfterwards;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: printAsn1 (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> pos &lt; length(stri) <span class="keywd">do</span>
      printAsn1(stri, pos);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: searchLengthByte (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">integer</span>: pos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: testPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: printPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> testPos <span class="keywd">range</span> pred(pos) <span class="keywd">downto</span> 2 <span class="keywd">do</span>
      <span class="keywd">if</span> ord(stri[testPos]) = pred(pos - testPos) <span class="keywd">then</span>
        printPos := pred(testPos);
        printAsn1(stri, printPos);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
