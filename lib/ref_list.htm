<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  ref_list.s7i  Reference list support library                    *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Type to describe a list of ''reference'' objects.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: ref_list <span class="keywd">is</span> subtype object;


IN_PARAM_IS_REFERENCE(ref_list);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">ref_list</span>: dest) ::= (<span class="op">in</span> <span class="type">ref_list</span>: source)               <span class="keywd">is</span> action <span class="stri">"RFL_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">ref_list</span>: aValue)                               <span class="keywd">is</span> action <span class="stri">"RFL_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">ref_list</span>: dest) := (<span class="op">in</span> <span class="type">ref_list</span>: source)              <span class="keywd">is</span> action <span class="stri">"RFL_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: _GENERATE_EMPTY_REFLIST                             <span class="keywd">is</span> action <span class="stri">"RFL_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">ref_list</span>: (attr ref_list) . EMPTY                                  <span class="keywd">is</span> _GENERATE_EMPTY_REFLIST;


<span class="comment">(**
 *  Default value of ''ref_list'' (ref_list.EMPTY).
 *)</span>
<span class="keywd">const</span> <span class="type">ref_list</span>: (attr ref_list) . value                                  <span class="keywd">is</span> ref_list.EMPTY;


<span class="comment">(**
 *  Append the ref_list ''extension'' to ''dest''.
 *  @exception MEMORY_ERROR Not enough memory for the concatenated
 *             ref_list.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">ref_list</span>: dest) &amp;:= (<span class="op">in</span> <span class="type">ref_list</span>: extension)          <span class="keywd">is</span> action <span class="stri">"RFL_APPEND"</span>;


<span class="comment">(**
 *  Assign reference ''source'' to the ''position'' of the ''dest''.
 *   A @:= [B] C;
 *  is equivalent to
 *   A := A[..pred(B)] &amp; make_list(C) &amp; A[succ(B)..];
 *  @exception INDEX_ERROR If ''position'' is negative or zero, or
 *             an element beyond ''dest'' would be overwritten
 *             (''position'' > length(''dest'') holds).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">ref_list</span>: dest) @:=
             [ (<span class="op">in</span> <span class="type">integer</span>: position) ] (<span class="op">in</span> <span class="type">reference</span>: source)           <span class="keywd">is</span> action <span class="stri">"RFL_ELEMCPY"</span>;


<span class="comment">(**
 *  Create ref_list with the given ''element''.
 *  @return a ''ref_list'' of length 1 with the given element.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: make_list (<span class="op">in</span> <span class="type">reference</span>: element)                   <span class="keywd">is</span> action <span class="stri">"RFL_MKLIST"</span>;


<span class="comment">(**
 *  Check if two ref_lists are equal.
 *  @return TRUE if both ref_lists are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">ref_list</span>: refList1) = (<span class="op">in</span> <span class="type">ref_list</span>: refList2)    <span class="keywd">is</span> action <span class="stri">"RFL_EQ"</span>;


<span class="comment">(**
 *  Check if two ref_lists are not equal.
 *  @return FALSE if both ref_lists are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">ref_list</span>: refList1) &lt;> (<span class="op">in</span> <span class="type">ref_list</span>: refList2)   <span class="keywd">is</span> action <span class="stri">"RFL_NE"</span>;


<span class="comment">(**
 *  Access one element from the ''ref_list'' ''aRefList''.
 *  @return the element with the specified ''index'' from ''aRefList''.
 *  @exception INDEX_ERROR If the index is less than 1 or
 *             greater than the length of the ''ref_list''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) [ (<span class="op">in</span> <span class="type">integer</span>: index) ]    <span class="keywd">is</span> action <span class="stri">"RFL_IDX"</span>;


<span class="comment">(**
 *  Get a sublist from ''aRefList'' beginning at a ''start'' position.
 *  The first element in a ''ref_list'' has the position 1.
 *  @return the sublist beginning at the ''start'' position.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) [ (<span class="op">in</span> <span class="type">integer</span>: start) .. ]  <span class="keywd">is</span> action <span class="stri">"RFL_TAIL"</span>;


<span class="comment">(**
 *  Get a sublist from ''aRefList'' ending at a ''stop'' position.
 *  The first element in a ''ref_list'' has the position 1.
 *  @return the substring ending at the ''stop'' position.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) [ .. (<span class="op">in</span> <span class="type">integer</span>: stop) ]   <span class="keywd">is</span> action <span class="stri">"RFL_HEAD"</span>;


<span class="comment">(**
 *  Get a sublist from a ''start'' position to a ''stop'' position.
 *  The first element in a ''ref_list'' has the position 1.
 *  @return the substring from position start to stop.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) [ (<span class="op">in</span> <span class="type">integer</span>: start) ..
                                               (<span class="op">in</span> <span class="type">integer</span>: stop) ]      <span class="keywd">is</span> action <span class="stri">"RFL_RANGE"</span>;


<span class="comment">(**
 *  Concatenate two ref_lists.
 *  @return the result of the concatenation.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: (<span class="op">in</span> <span class="type">ref_list</span>: refList1) &amp; (<span class="op">in</span> <span class="type">ref_list</span>: refList2)   <span class="keywd">is</span> action <span class="stri">"RFL_CAT"</span>;


<span class="comment">(**
 *  Membership test for a ''ref_list''.
 *  Determine if ''aRefList'' contains ''element''.
 *  @return TRUE if ''element'' is a member of  ''aRefList'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">reference</span>: element) <span class="op">in</span> (<span class="op">in</span> <span class="type">ref_list</span>: aRefList)   <span class="keywd">is</span> action <span class="stri">"RFL_ELEM"</span>;


<span class="comment">(**
 *  Negated membership test for a ''ref_list''.
 *  Determine if ''aRefList'' does not contain ''element''.
 *  @return FALSE if ''element'' is a member of  ''aRefList'',
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">reference</span>: element) <span class="op">not</span> <span class="op">in</span> (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) <span class="keywd">is</span> action <span class="stri">"RFL_NOT_ELEM"</span>;


<span class="comment">(**
 *  Search for the first occurrence of ''searched'' in ''main''.
 *  The first element in a ''ref_list'' has the position 1.
 *  @return the position of ''searched'' or 0 if ''main''
 *          does not contain ''searched''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: pos (<span class="op">in</span> <span class="type">ref_list</span>: main, <span class="op">in</span> <span class="type">reference</span>: searched)      <span class="keywd">is</span> action <span class="stri">"RFL_POS"</span>;


<span class="comment">(**
 *  Search for ''searched'' in ''main'' at or after ''start''.
 *  The search begins at position ''start'' and proceeds to the
 *  end. The first element in a ''ref_list'' has the position 1.
 *  The pos function is designed to allow loops like:
 *
 *   index := pos(aList, aReference);
 *   while index &lt;> 0 do
 *     # Do something with index
 *     index := pos(aList, aReference, succ(index));
 *   end while;
 *
 *  @return the position of ''searched'' or 0 if ''main''
 *          does not contain ''searched'' at or after ''start''.
 *  @exception RANGE_ERROR ''start'' &lt;= 0 holds.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: pos (<span class="op">in</span> <span class="type">ref_list</span>: main, <span class="op">in</span> <span class="type">reference</span>: searched,
                         <span class="op">in</span> <span class="type">integer</span>: start)                              <span class="keywd">is</span> action <span class="stri">"RFL_IPOS"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: incl (<span class="op">in</span> <span class="type">ref_list</span>: aRefList, <span class="op">in</span> <span class="type">reference</span>: element)          <span class="keywd">is</span> action <span class="stri">"RFL_INCL"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: excl (<span class="op">in</span> <span class="type">ref_list</span>: aRefList, <span class="op">in</span> <span class="type">reference</span>: element)          <span class="keywd">is</span> action <span class="stri">"RFL_EXCL"</span>;


<span class="comment">(**
 *  Determine the length of a ''ref_list''.
 *  @return the length of the ''ref_list''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">ref_list</span>: aRefList)                       <span class="keywd">is</span> action <span class="stri">"RFL_LNG"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: TRACE_LIST (<span class="op">in</span> <span class="type">ref_list</span>: aRefList)                           <span class="keywd">is</span> action <span class="stri">"RFL_TRACE"</span>;


<span class="comment">(**
 *  For-loop where ''forVar'' loops over the elements of ''aRefList''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">reference</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statement)
            <span class="keywd">end</span> <span class="keywd">for</span>                                                      <span class="keywd">is</span> action <span class="stri">"RFL_FOR"</span>;


<span class="comment">(**
 *  For-loop where ''forVar'' loops over the elements of ''aRefList''.
 *  Additionally a ''condition'' is checked before the statements in
 *  the loop body are executed.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">reference</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statement)
            <span class="keywd">end</span> <span class="keywd">for</span>                                                      <span class="keywd">is</span> action <span class="stri">"RFL_FOR_UNTIL"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">reference</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">varfunc</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statement)
            <span class="keywd">end</span> <span class="keywd">for</span>                                                      <span class="keywd">is</span> action <span class="stri">"RFL_FOR_UNTIL"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">reference</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">ref_list</span>: aRefList) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statement)
            <span class="keywd">end</span> <span class="keywd">for</span>                                                      <span class="keywd">is</span> action <span class="stri">"RFL_FOR_UNTIL"</span>;
</pre>
</body>
</html>
