<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  html_ent.s7i  HTML entity handling library                      *)</span>
<span class="comment">(*  Copyright (C) 2008  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">type</span>: htmlEntityType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: entityName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">char</span>: charValue <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">htmlEntityType</span>: genHtmlEntity (<span class="op">in</span> <span class="type">string</span>: entityName, <span class="op">in</span> <span class="type">integer</span>: charOrdNum) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">htmlEntityType</span>: entity <span class="keywd">is</span> htmlEntityType.value;
  <span class="keywd">begin</span>
    entity.entityName := entityName;
    entity.charValue := char(charOrdNum);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">array</span> <span class="type">htmlEntityType</span>: htmlEntityList <span class="keywd">is</span> [] (
  <span class="comment">(* Latin 1 *)</span>
    genHtmlEntity(<span class="stri">"nbsp"</span>,     160),
    genHtmlEntity(<span class="stri">"iexcl"</span>,    161),
    genHtmlEntity(<span class="stri">"cent"</span>,     162),
    genHtmlEntity(<span class="stri">"pound"</span>,    163),
    genHtmlEntity(<span class="stri">"curren"</span>,   164),
    genHtmlEntity(<span class="stri">"yen"</span>,      165),
    genHtmlEntity(<span class="stri">"brvbar"</span>,   166),
    genHtmlEntity(<span class="stri">"sect"</span>,     167),
    genHtmlEntity(<span class="stri">"uml"</span>,      168),
    genHtmlEntity(<span class="stri">"copy"</span>,     169),
    genHtmlEntity(<span class="stri">"ordf"</span>,     170),
    genHtmlEntity(<span class="stri">"laquo"</span>,    171),
    genHtmlEntity(<span class="stri">"not"</span>,      172),
    genHtmlEntity(<span class="stri">"shy"</span>,      173),
    genHtmlEntity(<span class="stri">"reg"</span>,      174),
    genHtmlEntity(<span class="stri">"macr"</span>,     175),
    genHtmlEntity(<span class="stri">"deg"</span>,      176),
    genHtmlEntity(<span class="stri">"plusmn"</span>,   177),
    genHtmlEntity(<span class="stri">"sup2"</span>,     178),
    genHtmlEntity(<span class="stri">"sup3"</span>,     179),
    genHtmlEntity(<span class="stri">"acute"</span>,    180),
    genHtmlEntity(<span class="stri">"micro"</span>,    181),
    genHtmlEntity(<span class="stri">"para"</span>,     182),
    genHtmlEntity(<span class="stri">"middot"</span>,   183),
    genHtmlEntity(<span class="stri">"cedil"</span>,    184),
    genHtmlEntity(<span class="stri">"sup1"</span>,     185),
    genHtmlEntity(<span class="stri">"ordm"</span>,     186),
    genHtmlEntity(<span class="stri">"raquo"</span>,    187),
    genHtmlEntity(<span class="stri">"frac14"</span>,   188),
    genHtmlEntity(<span class="stri">"frac12"</span>,   189),
    genHtmlEntity(<span class="stri">"frac34"</span>,   190),
    genHtmlEntity(<span class="stri">"iquest"</span>,   191),
    genHtmlEntity(<span class="stri">"Agrave"</span>,   192),
    genHtmlEntity(<span class="stri">"Aacute"</span>,   193),
    genHtmlEntity(<span class="stri">"Acirc"</span>,    194),
    genHtmlEntity(<span class="stri">"Atilde"</span>,   195),
    genHtmlEntity(<span class="stri">"Auml"</span>,     196),
    genHtmlEntity(<span class="stri">"Aring"</span>,    197),
    genHtmlEntity(<span class="stri">"AElig"</span>,    198),
    genHtmlEntity(<span class="stri">"Ccedil"</span>,   199),
    genHtmlEntity(<span class="stri">"Egrave"</span>,   200),
    genHtmlEntity(<span class="stri">"Eacute"</span>,   201),
    genHtmlEntity(<span class="stri">"Ecirc"</span>,    202),
    genHtmlEntity(<span class="stri">"Euml"</span>,     203),
    genHtmlEntity(<span class="stri">"Igrave"</span>,   204),
    genHtmlEntity(<span class="stri">"Iacute"</span>,   205),
    genHtmlEntity(<span class="stri">"Icirc"</span>,    206),
    genHtmlEntity(<span class="stri">"Iuml"</span>,     207),
    genHtmlEntity(<span class="stri">"ETH"</span>,      208),
    genHtmlEntity(<span class="stri">"Ntilde"</span>,   209),
    genHtmlEntity(<span class="stri">"Ograve"</span>,   210),
    genHtmlEntity(<span class="stri">"Oacute"</span>,   211),
    genHtmlEntity(<span class="stri">"Ocirc"</span>,    212),
    genHtmlEntity(<span class="stri">"Otilde"</span>,   213),
    genHtmlEntity(<span class="stri">"Ouml"</span>,     214),
    genHtmlEntity(<span class="stri">"times"</span>,    215),
    genHtmlEntity(<span class="stri">"Oslash"</span>,   216),
    genHtmlEntity(<span class="stri">"Ugrave"</span>,   217),
    genHtmlEntity(<span class="stri">"Uacute"</span>,   218),
    genHtmlEntity(<span class="stri">"Ucirc"</span>,    219),
    genHtmlEntity(<span class="stri">"Uuml"</span>,     220),
    genHtmlEntity(<span class="stri">"Yacute"</span>,   221),
    genHtmlEntity(<span class="stri">"THORN"</span>,    222),
    genHtmlEntity(<span class="stri">"szlig"</span>,    223),
    genHtmlEntity(<span class="stri">"agrave"</span>,   224),
    genHtmlEntity(<span class="stri">"aacute"</span>,   225),
    genHtmlEntity(<span class="stri">"acirc"</span>,    226),
    genHtmlEntity(<span class="stri">"atilde"</span>,   227),
    genHtmlEntity(<span class="stri">"auml"</span>,     228),
    genHtmlEntity(<span class="stri">"aring"</span>,    229),
    genHtmlEntity(<span class="stri">"aelig"</span>,    230),
    genHtmlEntity(<span class="stri">"ccedil"</span>,   231),
    genHtmlEntity(<span class="stri">"egrave"</span>,   232),
    genHtmlEntity(<span class="stri">"eacute"</span>,   233),
    genHtmlEntity(<span class="stri">"ecirc"</span>,    234),
    genHtmlEntity(<span class="stri">"euml"</span>,     235),
    genHtmlEntity(<span class="stri">"igrave"</span>,   236),
    genHtmlEntity(<span class="stri">"iacute"</span>,   237),
    genHtmlEntity(<span class="stri">"icirc"</span>,    238),
    genHtmlEntity(<span class="stri">"iuml"</span>,     239),
    genHtmlEntity(<span class="stri">"eth"</span>,      240),
    genHtmlEntity(<span class="stri">"ntilde"</span>,   241),
    genHtmlEntity(<span class="stri">"ograve"</span>,   242),
    genHtmlEntity(<span class="stri">"oacute"</span>,   243),
    genHtmlEntity(<span class="stri">"ocirc"</span>,    244),
    genHtmlEntity(<span class="stri">"otilde"</span>,   245),
    genHtmlEntity(<span class="stri">"ouml"</span>,     246),
    genHtmlEntity(<span class="stri">"divide"</span>,   247),
    genHtmlEntity(<span class="stri">"oslash"</span>,   248),
    genHtmlEntity(<span class="stri">"ugrave"</span>,   249),
    genHtmlEntity(<span class="stri">"uacute"</span>,   250),
    genHtmlEntity(<span class="stri">"ucirc"</span>,    251),
    genHtmlEntity(<span class="stri">"uuml"</span>,     252),
    genHtmlEntity(<span class="stri">"yacute"</span>,   253),
    genHtmlEntity(<span class="stri">"thorn"</span>,    254),
    genHtmlEntity(<span class="stri">"yuml"</span>,     255),
  <span class="comment">(* Latin Extended-B *)</span>
    genHtmlEntity(<span class="stri">"fnof"</span>,     402),
  <span class="comment">(* Greek *)</span>
    genHtmlEntity(<span class="stri">"Alpha"</span>,    913),
    genHtmlEntity(<span class="stri">"Beta"</span>,     914),
    genHtmlEntity(<span class="stri">"Gamma"</span>,    915),
    genHtmlEntity(<span class="stri">"Delta"</span>,    916),
    genHtmlEntity(<span class="stri">"Epsilon"</span>,  917),
    genHtmlEntity(<span class="stri">"Zeta"</span>,     918),
    genHtmlEntity(<span class="stri">"Eta"</span>,      919),
    genHtmlEntity(<span class="stri">"Theta"</span>,    920),
    genHtmlEntity(<span class="stri">"Iota"</span>,     921),
    genHtmlEntity(<span class="stri">"Kappa"</span>,    922),
    genHtmlEntity(<span class="stri">"Lambda"</span>,   923),
    genHtmlEntity(<span class="stri">"Mu"</span>,       924),
    genHtmlEntity(<span class="stri">"Nu"</span>,       925),
    genHtmlEntity(<span class="stri">"Xi"</span>,       926),
    genHtmlEntity(<span class="stri">"Omicron"</span>,  927),
    genHtmlEntity(<span class="stri">"Pi"</span>,       928),
    genHtmlEntity(<span class="stri">"Rho"</span>,      929),
    genHtmlEntity(<span class="stri">"Sigma"</span>,    931),
    genHtmlEntity(<span class="stri">"Tau"</span>,      932),
    genHtmlEntity(<span class="stri">"Upsilon"</span>,  933),
    genHtmlEntity(<span class="stri">"Phi"</span>,      934),
    genHtmlEntity(<span class="stri">"Chi"</span>,      935),
    genHtmlEntity(<span class="stri">"Psi"</span>,      936),
    genHtmlEntity(<span class="stri">"Omega"</span>,    937),
    genHtmlEntity(<span class="stri">"alpha"</span>,    945),
    genHtmlEntity(<span class="stri">"beta"</span>,     946),
    genHtmlEntity(<span class="stri">"gamma"</span>,    947),
    genHtmlEntity(<span class="stri">"delta"</span>,    948),
    genHtmlEntity(<span class="stri">"epsilon"</span>,  949),
    genHtmlEntity(<span class="stri">"zeta"</span>,     950),
    genHtmlEntity(<span class="stri">"eta"</span>,      951),
    genHtmlEntity(<span class="stri">"theta"</span>,    952),
    genHtmlEntity(<span class="stri">"iota"</span>,     953),
    genHtmlEntity(<span class="stri">"kappa"</span>,    954),
    genHtmlEntity(<span class="stri">"lambda"</span>,   955),
    genHtmlEntity(<span class="stri">"mu"</span>,       956),
    genHtmlEntity(<span class="stri">"nu"</span>,       957),
    genHtmlEntity(<span class="stri">"xi"</span>,       958),
    genHtmlEntity(<span class="stri">"omicron"</span>,  959),
    genHtmlEntity(<span class="stri">"pi"</span>,       960),
    genHtmlEntity(<span class="stri">"rho"</span>,      961),
    genHtmlEntity(<span class="stri">"sigmaf"</span>,   962),
    genHtmlEntity(<span class="stri">"sigma"</span>,    963),
    genHtmlEntity(<span class="stri">"tau"</span>,      964),
    genHtmlEntity(<span class="stri">"upsilon"</span>,  965),
    genHtmlEntity(<span class="stri">"phi"</span>,      966),
    genHtmlEntity(<span class="stri">"chi"</span>,      967),
    genHtmlEntity(<span class="stri">"psi"</span>,      968),
    genHtmlEntity(<span class="stri">"omega"</span>,    969),
    genHtmlEntity(<span class="stri">"thetasym"</span>, 977),
    genHtmlEntity(<span class="stri">"upsih"</span>,    978),
    genHtmlEntity(<span class="stri">"piv"</span>,      982),
  <span class="comment">(* General Punctuation *)</span>
    genHtmlEntity(<span class="stri">"bull"</span>,    8226),
    genHtmlEntity(<span class="stri">"hellip"</span>,  8230),
    genHtmlEntity(<span class="stri">"prime"</span>,   8242),
    genHtmlEntity(<span class="stri">"Prime"</span>,   8243),
    genHtmlEntity(<span class="stri">"oline"</span>,   8254),
    genHtmlEntity(<span class="stri">"frasl"</span>,   8260),
  <span class="comment">(* Letterlike Symbols *)</span>
    genHtmlEntity(<span class="stri">"weierp"</span>,  8472),
    genHtmlEntity(<span class="stri">"image"</span>,   8465),
    genHtmlEntity(<span class="stri">"real"</span>,    8476),
    genHtmlEntity(<span class="stri">"trade"</span>,   8482),
    genHtmlEntity(<span class="stri">"alefsym"</span>, 8501),
  <span class="comment">(* Arrows *)</span>
    genHtmlEntity(<span class="stri">"larr"</span>,    8592),
    genHtmlEntity(<span class="stri">"uarr"</span>,    8593),
    genHtmlEntity(<span class="stri">"rarr"</span>,    8594),
    genHtmlEntity(<span class="stri">"darr"</span>,    8595),
    genHtmlEntity(<span class="stri">"harr"</span>,    8596),
    genHtmlEntity(<span class="stri">"crarr"</span>,   8629),
    genHtmlEntity(<span class="stri">"lArr"</span>,    8656),
    genHtmlEntity(<span class="stri">"uArr"</span>,    8657),
    genHtmlEntity(<span class="stri">"rArr"</span>,    8658),
    genHtmlEntity(<span class="stri">"dArr"</span>,    8659),
    genHtmlEntity(<span class="stri">"hArr"</span>,    8660),
  <span class="comment">(* Mathematical Operators *)</span>
    genHtmlEntity(<span class="stri">"forall"</span>,  8704),
    genHtmlEntity(<span class="stri">"part"</span>,    8706),
    genHtmlEntity(<span class="stri">"exist"</span>,   8707),
    genHtmlEntity(<span class="stri">"empty"</span>,   8709),
    genHtmlEntity(<span class="stri">"nabla"</span>,   8711),
    genHtmlEntity(<span class="stri">"isin"</span>,    8712),
    genHtmlEntity(<span class="stri">"notin"</span>,   8713),
    genHtmlEntity(<span class="stri">"ni"</span>,      8715),
    genHtmlEntity(<span class="stri">"prod"</span>,    8719),
    genHtmlEntity(<span class="stri">"sum"</span>,     8721),
    genHtmlEntity(<span class="stri">"minus"</span>,   8722),
    genHtmlEntity(<span class="stri">"lowast"</span>,  8727),
    genHtmlEntity(<span class="stri">"radic"</span>,   8730),
    genHtmlEntity(<span class="stri">"prop"</span>,    8733),
    genHtmlEntity(<span class="stri">"infin"</span>,   8734),
    genHtmlEntity(<span class="stri">"ang"</span>,     8736),
    genHtmlEntity(<span class="stri">"and"</span>,     8743),
    genHtmlEntity(<span class="stri">"or"</span>,      8744),
    genHtmlEntity(<span class="stri">"cap"</span>,     8745),
    genHtmlEntity(<span class="stri">"cup"</span>,     8746),
    genHtmlEntity(<span class="stri">"int"</span>,     8747),
    genHtmlEntity(<span class="stri">"there4"</span>,  8756),
    genHtmlEntity(<span class="stri">"sim"</span>,     8764),
    genHtmlEntity(<span class="stri">"cong"</span>,    8773),
    genHtmlEntity(<span class="stri">"asymp"</span>,   8776),
    genHtmlEntity(<span class="stri">"ne"</span>,      8800),
    genHtmlEntity(<span class="stri">"equiv"</span>,   8801),
    genHtmlEntity(<span class="stri">"le"</span>,      8804),
    genHtmlEntity(<span class="stri">"ge"</span>,      8805),
    genHtmlEntity(<span class="stri">"sub"</span>,     8834),
    genHtmlEntity(<span class="stri">"sup"</span>,     8835),
    genHtmlEntity(<span class="stri">"nsub"</span>,    8836),
    genHtmlEntity(<span class="stri">"sube"</span>,    8838),
    genHtmlEntity(<span class="stri">"supe"</span>,    8839),
    genHtmlEntity(<span class="stri">"oplus"</span>,   8853),
    genHtmlEntity(<span class="stri">"otimes"</span>,  8855),
    genHtmlEntity(<span class="stri">"perp"</span>,    8869),
    genHtmlEntity(<span class="stri">"sdot"</span>,    8901),
  <span class="comment">(* Miscellaneous Technical *)</span>
    genHtmlEntity(<span class="stri">"lceil"</span>,   8968),
    genHtmlEntity(<span class="stri">"rceil"</span>,   8969),
    genHtmlEntity(<span class="stri">"lfloor"</span>,  8970),
    genHtmlEntity(<span class="stri">"rfloor"</span>,  8971),
    genHtmlEntity(<span class="stri">"lang"</span>,    9001),
    genHtmlEntity(<span class="stri">"rang"</span>,    9002),
  <span class="comment">(* Geometric Shapes *)</span>
    genHtmlEntity(<span class="stri">"loz"</span>,     9674),
  <span class="comment">(* Miscellaneous Symbols *)</span>
    genHtmlEntity(<span class="stri">"spades"</span>,  9824),
    genHtmlEntity(<span class="stri">"clubs"</span>,   9827),
    genHtmlEntity(<span class="stri">"hearts"</span>,  9829),
    genHtmlEntity(<span class="stri">"diams"</span>,   9830),
  <span class="comment">(* Basic Latin *)</span>
    genHtmlEntity(<span class="stri">"quot"</span>,      34),
    genHtmlEntity(<span class="stri">"amp"</span>,       38),
    genHtmlEntity(<span class="stri">"lt"</span>,        60),
    genHtmlEntity(<span class="stri">"gt"</span>,        62),
  <span class="comment">(* Latin Extended-A *)</span>
    genHtmlEntity(<span class="stri">"OElig"</span>,    338),
    genHtmlEntity(<span class="stri">"oelig"</span>,    339),
    genHtmlEntity(<span class="stri">"Scaron"</span>,   352),
    genHtmlEntity(<span class="stri">"scaron"</span>,   353),
    genHtmlEntity(<span class="stri">"Yuml"</span>,     376),
  <span class="comment">(* Spacing Modifier Letters *)</span>
    genHtmlEntity(<span class="stri">"circ"</span>,     710),
    genHtmlEntity(<span class="stri">"tilde"</span>,    732),
  <span class="comment">(* General Punctuation *)</span>
    genHtmlEntity(<span class="stri">"ensp"</span>,    8194),
    genHtmlEntity(<span class="stri">"emsp"</span>,    8195),
    genHtmlEntity(<span class="stri">"thinsp"</span>,  8201),
    genHtmlEntity(<span class="stri">"zwnj"</span>,    8204),
    genHtmlEntity(<span class="stri">"zwj"</span>,     8205),
    genHtmlEntity(<span class="stri">"lrm"</span>,     8206),
    genHtmlEntity(<span class="stri">"rlm"</span>,     8207),
    genHtmlEntity(<span class="stri">"ndash"</span>,   8211),
    genHtmlEntity(<span class="stri">"mdash"</span>,   8212),
    genHtmlEntity(<span class="stri">"lsquo"</span>,   8216),
    genHtmlEntity(<span class="stri">"rsquo"</span>,   8217),
    genHtmlEntity(<span class="stri">"sbquo"</span>,   8218),
    genHtmlEntity(<span class="stri">"ldquo"</span>,   8220),
    genHtmlEntity(<span class="stri">"rdquo"</span>,   8221),
    genHtmlEntity(<span class="stri">"bdquo"</span>,   8222),
    genHtmlEntity(<span class="stri">"dagger"</span>,  8224),
    genHtmlEntity(<span class="stri">"Dagger"</span>,  8225),
    genHtmlEntity(<span class="stri">"permil"</span>,  8240),
    genHtmlEntity(<span class="stri">"lsaquo"</span>,  8249),
    genHtmlEntity(<span class="stri">"rsaquo"</span>,  8250),
    genHtmlEntity(<span class="stri">"euro"</span>,    8364));

<span class="keywd">const</span> <span class="type">type</span>: htmlEntityHashType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">char</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">htmlEntityHashType</span>: genHtmlEntityHash (<span class="op">in</span> <span class="type">array</span> <span class="type">htmlEntityType</span>: htmlEntityList) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">htmlEntityHashType</span>: entityHash <span class="keywd">is</span> htmlEntityHashType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(htmlEntityList) <span class="keywd">do</span>
      entityHash @:= [htmlEntityList[number].entityName] htmlEntityList[number].charValue;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">htmlEntityHashType</span>: htmlEntityHash <span class="keywd">is</span> genHtmlEntityHash(htmlEntityList);

<span class="keywd">const</span> <span class="type">type</span>: htmlCharNameHashType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">char</span><span class="type">]</span> <span class="type">string</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">htmlCharNameHashType</span>: genHtmlCharNameHash (<span class="op">in</span> <span class="type">array</span> <span class="type">htmlEntityType</span>: htmlEntityList) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">htmlCharNameHashType</span>: charNameHash <span class="keywd">is</span> htmlCharNameHashType.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(htmlEntityList) <span class="keywd">do</span>
      charNameHash @:= [htmlEntityList[number].charValue] htmlEntityList[number].entityName;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">htmlCharNameHashType</span>: htmlCharNameHash <span class="keywd">is</span> genHtmlCharNameHash(htmlEntityList);


<span class="comment">(**
 *  Decode a string, which contains HTML entities.
 *  @return a string were all HTML entities are replaced by
 *          the corresponding characters.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: decodeHtmlEntities (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: decoded <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: old_pos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: new_pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: semicol_pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: entityName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">char</span>: charValue <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    new_pos := pos(stri, <span class="stri">'&amp;'</span>);
    <span class="keywd">while</span> new_pos &lt;> 0 <span class="keywd">do</span>
      semicol_pos := pos(stri, <span class="stri">';'</span>, succ(new_pos));
      <span class="keywd">if</span> semicol_pos &lt;> 0 <span class="keywd">then</span>
        entityName := stri[succ(new_pos) .. pred(semicol_pos)];
        <span class="keywd">if</span> length(entityName) >= 2 <span class="op">and</span> entityName[1] = <span class="stri">'#'</span> <span class="op">and</span>
            isDigitString(entityName[2 ..]) <span class="keywd">then</span>
          charValue := char(integer(entityName[2 ..]));
          decoded &amp;:= stri[old_pos .. pred(new_pos)];
          decoded &amp;:= str(charValue);
          old_pos := succ(semicol_pos);
        <span class="keywd">elsif</span> entityName <span class="op">in</span> htmlEntityHash <span class="keywd">then</span>
          charValue := htmlEntityHash[entityName];
          decoded &amp;:= stri[old_pos .. pred(new_pos)];
          decoded &amp;:= str(charValue);
          old_pos := succ(semicol_pos);
        <span class="keywd">else</span>
          decoded &amp;:= stri[old_pos .. new_pos];
          old_pos := succ(new_pos);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        decoded &amp;:= stri[old_pos .. new_pos];
        old_pos := succ(new_pos);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      new_pos := pos(stri, <span class="stri">'&amp;'</span>, old_pos);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    decoded &amp;:= stri[old_pos ..];
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Encode a string with HTML entities.
 *  This function encodes all characters, which can be described
 *  as HTML entities.
 *  @return a string were characters are replaced by the
 *          corresponding HTML entity.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encodeHtmlEntities (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: encoded <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: old_pos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="keywd">do</span>
      ch := stri[index];
      <span class="keywd">if</span> ch <span class="op">in</span> htmlCharNameHash <span class="keywd">then</span>
        encoded &amp;:= stri[old_pos .. pred(index)];
        encoded &amp;:= <span class="stri">"&amp;"</span> &amp; htmlCharNameHash[ch] &amp; <span class="stri">";"</span>;
        old_pos := succ(index);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    encoded &amp;:= stri[old_pos ..];
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Encode a string, such that it can be used as HTML content.
 *  HTML content is the text between HTML start tag and end tag.
 *  In HTML content only the characters '&amp;' and '&lt;' must be encoded.
 *  @return a string were &amp; and &lt; are encoded as HTML entities.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encodeHtmlContent (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: encoded <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: old_pos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="keywd">do</span>
      ch := stri[index];
      <span class="keywd">if</span> ch = <span class="stri">'&amp;'</span> <span class="keywd">then</span>
        encoded &amp;:= stri[old_pos .. pred(index)];
        encoded &amp;:= <span class="stri">"&amp;amp;"</span>;
        old_pos := succ(index);
      <span class="keywd">elsif</span> ch = <span class="stri">'&lt;'</span> <span class="keywd">then</span>
        encoded &amp;:= stri[old_pos .. pred(index)];
        encoded &amp;:= <span class="stri">"&amp;lt;"</span>;
        old_pos := succ(index);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    encoded &amp;:= stri[old_pos ..];
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Encode and quote a string, such that it can be used as HTML attribute value.
 *  HTML attribute values are used in HTML start tags.
 *  This function quotes an HTML attribute value with double quotes (").
 *  The characters '&lt;', '>', '\"' and '&amp;' are encoded with the predefined
 *  HTML entities ''&amp;amp;lt;'', ''&amp;amp;gt;'', ''&amp;amp;quot;'' and ''&amp;amp;amp;''.
 *  @return a quoted string were &lt; > " and &amp; are encoded as HTML entities.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: quoteHtmlAttrValue (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: quoted <span class="keywd">is</span> <span class="stri">"\""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: old_pos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="keywd">do</span>
      ch := stri[index];
      <span class="keywd">if</span> ch = <span class="stri">'\"'</span> <span class="op">or</span> ch = <span class="stri">'&amp;'</span> <span class="op">or</span> ch = <span class="stri">'&lt;'</span> <span class="op">or</span> ch = <span class="stri">'>'</span> <span class="keywd">then</span>
        quoted &amp;:= stri[old_pos .. pred(index)];
        quoted &amp;:= <span class="stri">"&amp;"</span> &amp; htmlCharNameHash[ch] &amp; <span class="stri">";"</span>;
        old_pos := succ(index);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    quoted &amp;:= stri[old_pos ..];
    quoted &amp;:= <span class="stri">"\""</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
