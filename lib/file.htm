<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  file.s7i      Interface type describing sequential files.       *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2013, 2019  Thomas Mertes                  *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Interface type for sequential files.
 *  The file interface is implemented with [[null_file]],
 *  [[external_file]], [[utf8|utf8File]], [[utf16|utf16File]],
 *  [[socket]], [[echo|echoFile]], [[line|lineFile]],
 *  [[dir|dirFile]] and many other types.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: file <span class="keywd">is</span> <span class="keywd">sub</span> object <span class="keywd">interface</span>;


<span class="comment">(**
 *  Write a [[string]] to a file.
 *  @exception RANGE_ERROR - The string contains a character that
 *             does not fit into the file specific representation
 *             (e.g.: A byte-file allows just chars from '\0;' to '\255;').
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri)     <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Write end-of-line to a file.
 *  The implementation function decides how writing end-of-line is
 *  done. It can be done by writing '\n', but other solutions are also
 *  possible.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">file</span>: outFile)                    <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Write a [[string]] followed by end-of-line to a file.
 *  The implementation function decides how writing end-of-line is
 *  done. It can be done by writing '\n', but other solutions are also
 *  possible.
 *  @exception RANGE_ERROR - The string contains a character that
 *             does not fit into the file specific representation
 *             (e.g.: A byte-file allows just chars from '\0;' to '\255;').
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri)   <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">proc</span>: moveLeft (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri)  <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">proc</span>: erase (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri)     <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">proc</span>: backSpace (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    moveLeft(outFile, stri);
    erase(outFile, stri);
    moveLeft(outFile, stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cursorOn (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">proc</span>: cursorOff (<span class="keywd">inout</span> <span class="type">file</span>: outFile, <span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Close a file.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="keywd">inout</span> <span class="type">file</span>: aFile)                        <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Forces that all buffered data of ''outFile'' is sent to its destination.
 *  Depending on the implementation type this causes data to be sent
 *  to the file system, screen, network or other destination.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="keywd">inout</span> <span class="type">file</span>: outFile)                      <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Read a character from a file.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">file</span>: inFile)                   <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Read a [[string]] with a maximum length from a file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Read a [[string]] from ''inFile'' until the ''terminator'' character is found.
 *  If a ''terminator'' is found the string before the ''terminator'' is
 *  returned and the ''terminator'' character is assigned to inFile.bufferChar.
 *  The file position is advanced after the ''terminator'' character.
 *  If no ''terminator'' is found the rest of ''inFile'' is returned and
 *  [[char#EOF|EOF]] is assigned to the inFile.bufferChar. When the function
 *  is left inFile.bufferChar contains either ''terminator'' or [[char#EOF|EOF]].
 *  @param inFile File from which the string is read.
 *  @param terminator Character which terminates the string.
 *  @return the string read without the ''terminator'' or the rest of the
 *          file if no ''terminator'' is found.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getTerminatedString (<span class="keywd">inout</span> <span class="type">file</span>: inFile,
                                        <span class="op">in</span> <span class="type">char</span>: terminator) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Read a word from a file.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  When the function is left inFile.bufferChar contains the
 *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
 *  @return the word read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">file</span>: inFile)                <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Read a line from a file.
 *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  When the function is left inFile.bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">file</span>: inFile)                <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getk (<span class="op">in</span> <span class="type">file</span>: inFile)                    <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eoln (<span class="op">in</span> <span class="type">file</span>: inFile)                   <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  The end-of-file indicator is set if at least one request to read
 *  from the file failed.
 *  @return TRUE if the end-of-file indicator is set, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">file</span>: inFile)                    <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Determine if at least one character can be read successfully.
 *  This function allows a file to be handled like an iterator.
 *  @return FALSE if ''getc'' would return [[char#EOF|EOF]],
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="keywd">inout</span> <span class="type">file</span>: inFile)             <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Determine if at least one character can be read without blocking.
 *  Blocking means that ''getc'' would wait until a character is
 *  received. Blocking can last for a period of unspecified length.
 *  Regular files do not block.
 *  @return TRUE if ''getc'' would not block, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: inputReady (<span class="op">in</span> <span class="type">file</span>: inFile)             <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Obtain the length of a file.
 *  The file length is measured in bytes.
 *  @return the length of a file.
 *  @exception RANGE_ERROR The file length does not fit into
 *             an integer value.
 *  @exception FILE_ERROR The implementation type of ''aFile'' is
 *             not seekable or a system function returns an error
 *             or the file length reported by the system is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="keywd">inout</span> <span class="type">file</span>: aFile)               <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Truncate ''aFile'' to the given ''length''.
 *  If the file previously was larger than ''length'', the extra data is lost.
 *  If the file previously was shorter, it is extended, and the extended
 *  part is filled with null bytes ('\0;').
 *  @param aFile File to be truncated.
 *  @param length Requested length of ''aFile'' in bytes.
 *  @exception RANGE_ERROR The requested length is negative or
 *             the length is not representable in the type
 *             used by the system function.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: truncate (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Determine if the file ''aFile'' is seekable.
 *  If a file is seekable the functions ''seek'' and ''tell''
 *  can be used to set and and obtain the current file position.
 *  @return TRUE, if ''aFile'' is seekable, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: seekable (<span class="op">in</span> <span class="type">file</span>: aFile)                <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Set the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  @exception RANGE_ERROR The file position is negative or zero or
 *             the file position is not representable in the system
 *             file position type.
 *  @exception FILE_ERROR The implementation type of ''aFile'' is
 *             not seekable or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="keywd">inout</span> <span class="type">file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: position)   <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Obtain the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  @return the current file position.
 *  @exception RANGE_ERROR The file position does not fit into
 *             an integer value.
 *  @exception FILE_ERROR The implementation type of ''aFile'' is
 *             not seekable or a system function returns an error
 *             or the file position reported by the system is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: tell (<span class="op">in</span> <span class="type">file</span>: aFile)                    <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Compare two file values.
 *  This function does neither compare file contents nor file names.
 *  The order of two files is determined by comparing the memory
 *  positions of their internal data representation. Therefore the
 *  result of ''compare'' is arbitrary and may change if the
 *  program is executed again. Inside a program the result of
 *  ''compare'' is consistent and can be used to maintain hash
 *  tables.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">file</span>: file1, <span class="op">in</span> <span class="type">file</span>: file2) <span class="keywd">is</span> action <span class="stri">"ITF_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a file.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">file</span>: aFile)                <span class="keywd">is</span> action <span class="stri">"ITF_HASHCODE"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: (<span class="op">in</span> <span class="type">file</span>: aFile).bufferChar          <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">char</span>: (<span class="keywd">inout</span> <span class="type">file</span>: aFile).bufferChar    <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Read a word from ''inFile'' into ''aVar''.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
 *  The word ending character is not copied into the string.
 *  When the function is left inFile.bufferChar contains the
 *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">string</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aVar := getwd(inFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from ''inFile'' into ''aVar'' or use ''defaultValue''.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
 *  If the word is empty ''defaultValue'' is assigned to ''aVar''.
 *  The word ending character is not copied into the string.
 *  When the function is left inFile.bufferChar contains the
 *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">string</span>: aVar,
    <span class="op">in</span> <span class="type">string</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aVar := getwd(inFile);
    <span class="keywd">if</span> aVar = <span class="stri">""</span> <span class="keywd">then</span>
      aVar := defaultValue;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from ''inFile'' into ''aVar''.
 *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
 *  The line ending character is not copied into the string.
 *  When the function is left inFile.bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">string</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aVar := getln(inFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from ''inFile'' into ''aVar'' or use ''defaultValue''.
 *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
 *  If the line is empty ''defaultValue'' is assigned to ''aVar''.
 *  The line ending character is not copied into the string.
 *  When the function is left inFile.bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="keywd">inout</span> <span class="type">string</span>: aVar,
    <span class="op">in</span> <span class="type">string</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aVar := getln(inFile);
    <span class="keywd">if</span> aVar = <span class="stri">""</span> <span class="keywd">then</span>
      aVar := defaultValue;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Discard a line from a file.
 *  The function discards characters up to end-of-line or [[char#EOF|EOF]].
 *  When the function is left inFile.bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">file</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := getln(inFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Skip ''numChars'' characters from ''inFile''.
 *  When the function is left ''numChars'' have been skipped from
 *  ''inFile'' or [[char#EOF|EOF]] has been reached.
 *  @exception RANGE_ERROR The parameter ''numChars'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: skip (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: numChars) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: skipped <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> numChars &lt;> 0 <span class="keywd">then</span>
      <span class="keywd">repeat</span>
        skipped := length(gets(inFile, min(numChars, 1000000)));
        numChars -:= skipped;
      <span class="keywd">until</span> numChars = 0 <span class="op">or</span> skipped = 0;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
