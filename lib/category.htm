<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  category.s7i  Category support library                          *)</span>
<span class="comment">(*  Copyright (C) 1991 - 1994, 2004, 2005, 2012  Thomas Mertes      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Describes the category of a ''reference''.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: category <span class="keywd">is</span> newtype;


IN_PARAM_IS_VALUE(category);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">category</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">category</span>: source)     <span class="keywd">is</span> action <span class="stri">"INT_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">category</span>: aValue)                      <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">category</span>: dest) := (<span class="op">in</span> <span class="type">category</span>: source)     <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;


<span class="comment">(**
 *  Convert a [[string]] to a ''category''.
 *  @param catName Name of a category to be converted.
 *  @return the ''category'' result fo the conversion.
 *  @exception RANGE_ERROR If there is no corresponding ''category''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">category</span>: category (<span class="op">in</span> <span class="type">string</span>: catName)              <span class="keywd">is</span> action <span class="stri">"REF_CAT_PARSE"</span>;


<span class="comment">(**
 *  Default value of ''category'' (SYMBOLOBJECT).
 *)</span>
<span class="keywd">const</span> <span class="type">category</span>: (attr category) . value <span class="keywd">is</span> category(<span class="stri">"SYMBOLOBJECT"</span>);


<span class="comment">(**
 *  Check if two ''category'' values are equal.
 *  @return TRUE if both values are equal, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">category</span>: cat1) = (<span class="op">in</span> <span class="type">category</span>: cat2)   <span class="keywd">is</span> action <span class="stri">"INT_EQ"</span>;


<span class="comment">(**
 *  Check if two ''category'' values are not equal.
 *  @return FALSE if both values are equal, TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">category</span>: cat1) &lt;> (<span class="op">in</span> <span class="type">category</span>: cat2)  <span class="keywd">is</span> action <span class="stri">"INT_NE"</span>;


<span class="comment">(**
 *  Determine the ordinal number of a ''category''.
 *  @return a small [[integer]] which corresponds to ''aCategory''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">category</span>: aCategory)                <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to ''category''.
 *  @return the ''category'' result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">category</span>: (attr category) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number)  <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to ''category''.
 *  @return the ''category'' result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">category</span>: category (<span class="op">in</span> <span class="type">integer</span>: number)              <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Convert a ''category'' to a [[string]].
 *  @param aCategory Category to be converted.
 *  @return the [[string]] result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">category</span>: aCategory)                 <span class="keywd">is</span> action <span class="stri">"REF_CAT_STR"</span>;


<span class="comment">(**
 *  Convert a [[string]] to a ''category''.
 *  @param catName Name of a category to be converted.
 *  @return the ''category'' result fo the conversion.
 *  @exception RANGE_ERROR If there is no corresponding ''category''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">category</span>: (attr category) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: catName) <span class="keywd">is</span>
    <span class="keywd">return</span> category(catName);


<span class="keywd">const</span> <span class="type">category</span>: SYMBOLOBJECT      <span class="keywd">is</span> category(<span class="stri">"SYMBOLOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: DECLAREDOBJECT    <span class="keywd">is</span> category(<span class="stri">"DECLAREDOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: FORWARDOBJECT     <span class="keywd">is</span> category(<span class="stri">"FORWARDOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: FWDREFOBJECT      <span class="keywd">is</span> category(<span class="stri">"FWDREFOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: BLOCKOBJECT       <span class="keywd">is</span> category(<span class="stri">"BLOCKOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: CALLOBJECT        <span class="keywd">is</span> category(<span class="stri">"CALLOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: MATCHOBJECT       <span class="keywd">is</span> category(<span class="stri">"MATCHOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: TYPEOBJECT        <span class="keywd">is</span> category(<span class="stri">"TYPEOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: FORMPARAMOBJECT   <span class="keywd">is</span> category(<span class="stri">"FORMPARAMOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: INTOBJECT         <span class="keywd">is</span> category(<span class="stri">"INTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: BIGINTOBJECT      <span class="keywd">is</span> category(<span class="stri">"BIGINTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: CHAROBJECT        <span class="keywd">is</span> category(<span class="stri">"CHAROBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: STRIOBJECT        <span class="keywd">is</span> category(<span class="stri">"STRIOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: BSTRIOBJECT       <span class="keywd">is</span> category(<span class="stri">"BSTRIOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: ARRAYOBJECT       <span class="keywd">is</span> category(<span class="stri">"ARRAYOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: HASHOBJECT        <span class="keywd">is</span> category(<span class="stri">"HASHOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: HASHELEMOBJECT    <span class="keywd">is</span> category(<span class="stri">"HASHELEMOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: STRUCTOBJECT      <span class="keywd">is</span> category(<span class="stri">"STRUCTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: CLASSOBJECT       <span class="keywd">is</span> category(<span class="stri">"CLASSOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: INTERFACEOBJECT   <span class="keywd">is</span> category(<span class="stri">"INTERFACEOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: SETOBJECT         <span class="keywd">is</span> category(<span class="stri">"SETOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: FILEOBJECT        <span class="keywd">is</span> category(<span class="stri">"FILEOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: SOCKETOBJECT      <span class="keywd">is</span> category(<span class="stri">"SOCKETOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: POLLOBJECT        <span class="keywd">is</span> category(<span class="stri">"POLLOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: LISTOBJECT        <span class="keywd">is</span> category(<span class="stri">"LISTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: FLOATOBJECT       <span class="keywd">is</span> category(<span class="stri">"FLOATOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: WINOBJECT         <span class="keywd">is</span> category(<span class="stri">"WINOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: POINTLISTOBJECT   <span class="keywd">is</span> category(<span class="stri">"POINTLISTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: PROCESSOBJECT     <span class="keywd">is</span> category(<span class="stri">"PROCESSOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: ENUMLITERALOBJECT <span class="keywd">is</span> category(<span class="stri">"ENUMLITERALOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: CONSTENUMOBJECT   <span class="keywd">is</span> category(<span class="stri">"CONSTENUMOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: VARENUMOBJECT     <span class="keywd">is</span> category(<span class="stri">"VARENUMOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: REFOBJECT         <span class="keywd">is</span> category(<span class="stri">"REFOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: REFLISTOBJECT     <span class="keywd">is</span> category(<span class="stri">"REFLISTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: EXPROBJECT        <span class="keywd">is</span> category(<span class="stri">"EXPROBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: ACTOBJECT         <span class="keywd">is</span> category(<span class="stri">"ACTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: VALUEPARAMOBJECT  <span class="keywd">is</span> category(<span class="stri">"VALUEPARAMOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: REFPARAMOBJECT    <span class="keywd">is</span> category(<span class="stri">"REFPARAMOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: RESULTOBJECT      <span class="keywd">is</span> category(<span class="stri">"RESULTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: LOCALVOBJECT      <span class="keywd">is</span> category(<span class="stri">"LOCALVOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: DATABASEOBJECT    <span class="keywd">is</span> category(<span class="stri">"DATABASEOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: SQLSTMTOBJECT     <span class="keywd">is</span> category(<span class="stri">"SQLSTMTOBJECT"</span>);
<span class="keywd">const</span> <span class="type">category</span>: PROGOBJECT        <span class="keywd">is</span> category(<span class="stri">"PROGOBJECT"</span>);


<span class="comment">(**
 *  [[category|Category]] for-loop, looping from ''startValue'' upward to ''endValue''.
 *  The variable ''forVar'' is initialized with ''startValue''. The
 *  ''statements'' are executed repeatedly. After each repetition the
 *  variable ''forVar'' is incremented with ''forVar := category(succ(ord(forVar)))''.
 *  After the ''statements'' were executed with ''endValue'' the for-loop is
 *  terminated. If ''ord(startValue)'' is greater than ''ord(endValue)'' the
 *  ''statements'' are not executed at all.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">category</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">category</span>: startValue) <span class="keywd">to</span> (<span class="op">in</span> <span class="type">category</span>: endValue) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span>                                                     <span class="keywd">is</span> action <span class="stri">"PRC_FOR_TO"</span>;


<span class="comment">(**
 *  [[category|Category]] for-loop, looping from ''startValue'' downward to ''endValue''.
 *  The variable ''forVar'' is initialized with ''startValue''. The
 *  ''statements'' are executed repeatedly. After each repetition the
 *  variable ''forVar'' is decremented with ''forVar := category(pred(ord(forVar)))''.
 *  After the ''statements'' were executed with ''endValue'' the for-loop is
 *  terminated. If ''ord(startValue)'' is greater than ''ord(endValue)'' the
 *  ''statements'' are not executed at all.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">category</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">category</span>: startValue) <span class="keywd">downto</span> (<span class="op">in</span> <span class="type">category</span>: endValue) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span>                                                     <span class="keywd">is</span> action <span class="stri">"PRC_FOR_DOWNTO"</span>;


DECLARE_TERNARY(category);
CASE_DECLS(category);
</pre>
</body>
</html>
