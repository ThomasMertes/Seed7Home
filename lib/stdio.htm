<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  stdio.s7i     Standard input and output via files               *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2011  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/file.htm">file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/null_file.htm">null_file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/external_file.htm">external_file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/enable_io.htm">enable_io.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">func</span> external_file: INIT_STD_FILE (<span class="keywd">ref</span> <span class="type">clib_file</span>: primitive_file,
    <span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> external_file: standardFile <span class="keywd">is</span> external_file.value;
  <span class="keywd">begin</span>
    standardFile.ext_file := primitive_file;
    standardFile.name := fileName;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Standard input file of the operating system.
 *  The file IN is initialized with STD_IN.
 *)</span>
<span class="keywd">var</span> external_file: STD_IN <span class="keywd">is</span>  INIT_STD_FILE(CLIB_INPUT,  <span class="stri">"STD_IN"</span>);


<span class="comment">(**
 *  Standard output file of the operating system.
 *  The file OUT is initialized with STD_OUT.
 *)</span>
<span class="keywd">var</span> external_file: STD_OUT <span class="keywd">is</span> INIT_STD_FILE(CLIB_OUTPUT, <span class="stri">"STD_OUT"</span>);


<span class="comment">(**
 *  Standard error file of the operating system.
 *)</span>
<span class="keywd">var</span> external_file: STD_ERR <span class="keywd">is</span> INIT_STD_FILE(CLIB_ERROR,  <span class="stri">"STD_ERR"</span>);


<span class="comment">(**
 *  Standard input file used by read and readln.
 *  Assigning a file to ''IN'' changes the source of the functions
 *  [[#read(inout_string)|read]] and [[#readln|readln]].
 *)</span>
<span class="keywd">var</span> <span class="type">file</span>: IN <span class="keywd">is</span> STD_IN;


<span class="comment">(**
 *  Standard output file used by write and writeln.
 *  Assigning a file to OUT changes the destination fo the
 *  functions [[#write(in_string)|write]] and [[#writeln|writeln]].
 *)</span>
<span class="keywd">var</span> <span class="type">file</span>: OUT <span class="keywd">is</span> STD_OUT;


<span class="keywd">var</span> <span class="type">file</span>: PROT_OUTFILE <span class="keywd">is</span> STD_OUT;


<span class="comment">(* Set of operations for IN and OUT *)</span>


<span class="comment">(**
 *  Write a string to the standard output file ([[#OUT|OUT]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(OUT, stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write end-of-line to the standard output file.
 *  The file type of [[#OUT|OUT]] decides how writing end-of-line is done.
 *  It can be done by writing '\n', but other solutions are also
 *  possible.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(OUT);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string followed by end-of-line to the standard output.
 *  The file type of [[#OUT|OUT]] decides how writing end-of-line is done.
 *  It can be done by writing '\n', but other solutions are also
 *  possible.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(OUT, stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from the standard input file ([[#IN|IN]]).
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  When the function is left [[#IN|IN]].bufferChar contains the
 *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">string</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    read(IN, aVar);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a word from the standard input file ([[#IN|IN]]) or use ''defaultValue''.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", end-of-line or [[char#EOF|EOF]].
 *  If the word is empty ''defaultValue'' is assigned to ''aVar''.
 *  The word ending characters are not copied into the string.
 *  When the function is left [[#IN|IN]].bufferChar contains the
 *  word ending character (' ', '\t', '\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: read (<span class="keywd">inout</span> <span class="type">string</span>: aVar, <span class="op">in</span> <span class="type">string</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    read(IN, aVar, defaultValue);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from the standard input file ([[#IN|IN]]).
 *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  When the function is left [[#IN|IN]].bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">string</span>: aVar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    readln(IN, aVar);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from the standard input file ([[#IN|IN]]) or use ''defaultValue''.
 *  The function reads a string up to end-of-line or [[char#EOF|EOF]].
 *  If the line is empty ''defaultValue'' is assigned to ''aVar''.
 *  The line ending characters are not copied into the string.
 *  When the function is left [[#IN|IN]].bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readln (<span class="keywd">inout</span> <span class="type">string</span>: aVar, <span class="op">in</span> <span class="type">string</span>: defaultValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    readln(IN, aVar, defaultValue);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Discard a line from the standard input file ([[#IN|IN]]).
 *  The function discards characters up to end-of-line or [[char#EOF|EOF]].
 *  When the function is left [[#IN|IN]].bufferChar contains the
 *  line ending character ('\n' or [[char#EOF|EOF]]).
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: readln <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := getln(IN);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
