<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  hashsetof.s7i  Support for hashsets of a base type              *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Abstract data type, describing sets of ''baseType'' values.
 *  This abstract data type uses hash maps to represent a set.
 *  Therefore it can be used if ''baseType'' values cannot be
 *  mapped to [[integer]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: hashset (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: setType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: tupleType <span class="keywd">is</span> void;
    <span class="keywd">var</span> <span class="type">type</span>: array_type <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    setType := get_type(getfunc(hashset(attr baseType)));
    <span class="keywd">if</span> setType = void <span class="keywd">then</span>
      global
      setType := newtype;
      IN_PARAM_IS_REFERENCE(setType);
      <span class="keywd">const</span> <span class="type">type</span>: hashset (attr baseType)     <span class="keywd">is</span> setType;
      <span class="keywd">const</span> <span class="type">type</span>: base_type (attr setType)    <span class="keywd">is</span> baseType;

      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . keyCreate   <span class="keywd">is</span> getfunc((<span class="keywd">ref</span> <span class="type">baseType</span>: dest) ::= (<span class="op">in</span> <span class="type">baseType</span>: source));
      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . keyDestroy  <span class="keywd">is</span> getfunc(destroy(<span class="keywd">ref</span> <span class="type">baseType</span>: aValue));
      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . keyCopy     <span class="keywd">is</span> getfunc((<span class="keywd">inout</span> <span class="type">baseType</span>: dest) := (<span class="op">in</span> <span class="type">baseType</span>: source));
      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . keyCompare  <span class="keywd">is</span> getfunc(compare(<span class="op">in</span> <span class="type">baseType</span>: key1, <span class="op">in</span> <span class="type">baseType</span>: key2));
      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . dataCreate  <span class="keywd">is</span> getfunc((<span class="keywd">ref</span> <span class="type">boolean</span>: dest) ::= (<span class="op">in</span> <span class="type">boolean</span>: source));
      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . dataDestroy <span class="keywd">is</span> getfunc(destroy(<span class="keywd">ref</span> <span class="type">boolean</span>: aValue));
      <span class="keywd">const</span> <span class="type">reference</span>: (attr setType) . dataCopy    <span class="keywd">is</span> getfunc((<span class="keywd">inout</span> <span class="type">boolean</span>: dest) := (<span class="op">in</span> <span class="type">boolean</span>:source));

      <span class="keywd">const</span> <span class="type">proc</span>: CREATE (<span class="keywd">ref</span> <span class="type">setType</span>: dest, <span class="op">in</span> <span class="type">setType</span>: source,
                          <span class="op">in</span> <span class="type">reference</span>: keyCreate, <span class="op">in</span> <span class="type">reference</span>: keyDestroy,
                          <span class="op">in</span> <span class="type">reference</span>: dataCreate, <span class="op">in</span> <span class="type">reference</span>: dataDestroy) <span class="keywd">is</span> action <span class="stri">"HSH_CREATE"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: DESTROY (<span class="keywd">ref</span> <span class="type">setType</span>: oldSet, <span class="op">in</span> <span class="type">reference</span>: keyDestroy,
                           <span class="op">in</span> <span class="type">reference</span>: dataDestroy)                          <span class="keywd">is</span> action <span class="stri">"HSH_DESTR"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: COPY (<span class="keywd">inout</span> <span class="type">setType</span>: dest, <span class="op">in</span> <span class="type">setType</span>: source,
                        <span class="op">in</span> <span class="type">reference</span>: keyCreate, <span class="op">in</span> <span class="type">reference</span>: keyDestroy,
                        <span class="op">in</span> <span class="type">reference</span>: dataCreate, <span class="op">in</span> <span class="type">reference</span>: dataDestroy)   <span class="keywd">is</span> action <span class="stri">"HSH_CPY"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: FOR_KEY (<span class="keywd">inout</span> <span class="type">baseType</span>: variable, <span class="op">in</span> <span class="type">setType</span>: aSet,
                           <span class="op">in</span> <span class="type">proc</span>: statements, <span class="op">in</span> <span class="type">reference</span>: keyCopy)         <span class="keywd">is</span> action <span class="stri">"HSH_FOR_KEY"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">baseType</span>: KEYS (<span class="op">in</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">reference</span>: keyCreate,
                                       <span class="op">in</span> <span class="type">reference</span>: keyDestroy)               <span class="keywd">is</span> action <span class="stri">"HSH_KEYS"</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">setType</span>: dest) ::= (<span class="op">in</span> <span class="type">setType</span>: source) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          CREATE(dest, source, setType.keyCreate, setType.keyDestroy,
              setType.dataCreate, setType.dataDestroy);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">setType</span>: oldSet) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          DESTROY(oldSet, setType.keyDestroy, setType.dataDestroy);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) := (<span class="op">in</span> <span class="type">setType</span>: source) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          COPY(dest, source, setType.keyCreate, setType.keyDestroy,
              setType.dataCreate, setType.dataDestroy);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">boolean</span>: isBitset (attr setType)                                   <span class="keywd">is</span> FALSE;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (attr setType) . _GENERATE_EMPTY_SET                 <span class="keywd">is</span> action <span class="stri">"HSH_EMPTY"</span>;
      <span class="keywd">const</span> <span class="type">setType</span>: (attr setType) . EMPTY_SET                                <span class="keywd">is</span> setType._GENERATE_EMPTY_SET;

      <span class="comment">(**
       *  Default value of ''setType'' ({}).
       *)</span>
      <span class="keywd">const</span> <span class="type">setType</span>: (attr setType) . value                                    <span class="keywd">is</span> setType._GENERATE_EMPTY_SET;

      <span class="comment">(**
       *  Compute the cardinality of a set.
       *   card({"one", "two", "three"})  returns  3
       *  @return the number of elements in ''aSet''.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: card (<span class="op">in</span> <span class="type">setType</span>: aSet)                              <span class="keywd">is</span> action <span class="stri">"HSH_LNG"</span>;

      <span class="comment">(**
       *  Compute pseudo-random element from ''aSet''.
       *  The random values are uniform distributed.
       *  @return a random element such that rand(aSet) in aSet holds.
       *  @exception RANGE_ERROR If ''aSet'' is empty.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: rand (<span class="op">in</span> <span class="type">setType</span>: aSet)                             <span class="keywd">is</span> action <span class="stri">"HSH_RAND_KEY"</span>;

      <span class="keywd">const</span> <span class="type">proc</span>: INCL (<span class="keywd">inout</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: hashKey,
                        <span class="op">in</span> <span class="type">boolean</span>: data, <span class="op">in</span> <span class="type">integer</span>: hashCode,
                        <span class="op">in</span> <span class="type">reference</span>: keyCompare, <span class="op">in</span> <span class="type">reference</span>: keyCreate,
                        <span class="op">in</span> <span class="type">reference</span>: dataCreate, <span class="op">in</span> <span class="type">reference</span>: dataCopy)      <span class="keywd">is</span> action <span class="stri">"HSH_INCL"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: EXCL (<span class="keywd">inout</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: hashKey,
                        <span class="op">in</span> <span class="type">integer</span>: hashCode, <span class="op">in</span> <span class="type">reference</span>: keyCompare,
                        <span class="op">in</span> <span class="type">reference</span>: keyDestroy, <span class="op">in</span> <span class="type">reference</span>: dataDestroy)   <span class="keywd">is</span> action <span class="stri">"HSH_EXCL"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: CONTAINS (<span class="op">in</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: hashKey,
                                    <span class="op">in</span> <span class="type">integer</span>: hashCode,
                                    <span class="op">in</span> <span class="type">reference</span>: keyCompare)                  <span class="keywd">is</span> action <span class="stri">"HSH_CONTAINS"</span>;

      <span class="comment">(**
       *  Set membership test.
       *  Determine if ''aValue'' is a member of the set ''aSet''.
       *   "one" in {"one", "three"})  returns  TRUE
       *   "two" in {"one", "three"})  returns  FALSE
       *  @return TRUE if ''aValue'' is a member of  ''aSet'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="op">in</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> CONTAINS(aSet, aValue, hashCode(aValue), setType.keyCompare);

      <span class="comment">(**
       *  Negated set membership test.
       *  Determine if ''aValue'' is not a member of the set ''aSet''.
       *   "one" not in {"one", "three"})  returns  FALSE
       *   "two" not in {"one", "three"})  returns  TRUE
       *  @return FALSE if ''aValue'' is a member of  ''aSet'',
       *          TRUE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="op">not</span> <span class="op">in</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> <span class="op">not</span> CONTAINS(aSet, aValue, hashCode(aValue), setType.keyCompare);

      <span class="comment">(**
       *  Add ''aValue'' to the set ''aSet''.
       *  If ''aValue'' is already in ''aSet'' then ''aSet'' stays unchanged.
       *  @exception MEMORY_ERROR If there is not enough memory.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: incl (<span class="keywd">inout</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          INCL(aSet, aValue, TRUE, hashCode(aValue), setType.keyCompare,
              setType.keyCreate, setType.dataCreate, setType.dataCopy);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Remove ''aValue'' from the set ''aSet''.
       *  If ''aValue'' is not element of ''aSet'' then ''aSet'' stays unchanged.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: excl (<span class="keywd">inout</span> <span class="type">setType</span>: aSet, <span class="op">in</span> <span class="type">baseType</span>: aValue) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          EXCL(aSet, aValue, hashCode(aValue), setType.keyCompare,
              setType.keyDestroy, setType.dataDestroy);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Add or remove ''aValue'' to respectively from ''sSet''.
       *  Adding an existing value or remove a non-existing value
       *  leaves ''aSet'' unchanged.
       *  @exception MEMORY_ERROR If there is not enough memory.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: aSet) @:= [ (<span class="op">in</span> <span class="type">baseType</span>: aValue) ] (<span class="op">in</span> <span class="type">boolean</span>: isElement) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          <span class="keywd">if</span> isElement <span class="keywd">then</span>
            INCL(aSet, aValue, TRUE, hashCode(aValue), setType.keyCompare,
                setType.keyCreate, setType.dataCreate, setType.dataCopy);
          <span class="keywd">else</span>
            EXCL(aSet, aValue, hashCode(aValue), setType.keyCompare,
                setType.keyDestroy, setType.dataDestroy);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  For-loop where ''variable'' loops over the elements of the set ''aSet''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">baseType</span>: variable) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">do</span>
                    (<span class="op">in</span> <span class="type">proc</span>: statements)
                  <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">begin</span>
          FOR_KEY(variable, aSet, statements, setType.keyCopy);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Obtain an array containing all the values in ''aSet''.
       *  @return all the values from ''aSet''.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">baseType</span>: toArray (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span>
        <span class="keywd">return</span> KEYS(aSet, setType.keyCreate, setType.keyDestroy);

      <span class="comment">(**
       *  Union of two sets.
       *   {"one", "two"} | {"one", "three"}  returns  {"one", "two", "three"}
       *  @return the union of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) | (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: union <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          union := set1;
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            incl(union, element);
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Intersection of two sets.
       *   {"one", "two"} &amp; {"one", "three"}  returns  {"one"}
       *  @return the intersection of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &amp; (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: intersection <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set1 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">in</span> set2 <span class="keywd">then</span>
              incl(intersection, element);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Symmetric difference of two sets.
       *   {"one", "two"} >&lt; {"one", "three"}  returns  {"two", "three"}
       *  @return the symmetric difference of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) >&lt; (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: difference <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set1 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set2 <span class="keywd">then</span>
              incl(difference, element);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set1 <span class="keywd">then</span>
              incl(difference, element);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Difference of two sets.
       *   {"one", "two"} - {"one", "three"}  returns  {"two"}
       *  @return the difference of the two sets.
       *  @exception MEMORY_ERROR Not enough memory for the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) - (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: difference <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          difference := set1;
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            excl(difference, element);
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Assign the union of ''dest'' and ''set2'' to ''dest''.
       *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) |:= (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            incl(dest, element);
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Assign the intersection of ''dest'' and ''set2'' to ''dest''.
       *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) &amp;:= (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">setType</span>: intersection <span class="keywd">is</span> setType.EMPTY_SET;
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> dest <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">in</span> set2 <span class="keywd">then</span>
              incl(intersection, element);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          dest := intersection;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Assign the difference of ''dest'' and ''set2'' to ''dest''.
       *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
       *)</span>
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">setType</span>: dest) -:= (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            excl(dest, element);
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Check if two sets are equal.
       *  @return TRUE if the two sets are equal,
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) = (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">boolean</span>: isEqual <span class="keywd">is</span> TRUE;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set1 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set2 <span class="keywd">then</span>
              isEqual := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set1 <span class="keywd">then</span>
              isEqual := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Check if two sets are not equal.
       *  @return FALSE if the two sets are equal,
       *          TRUE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &lt;> (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span>
        <span class="keywd">return</span> <span class="op">not</span> set1 = set2;

      <span class="comment">(**
       *  Determine if ''set1'' is a proper subset of ''set2''.
       *  ''set1'' is a proper subset of ''set2'' if
       *   set1 &lt;= set2 and set1 &lt;> set2
       *  holds.
       *  @return TRUE if ''set1'' is a proper subset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &lt; (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">boolean</span>: isProperSubset <span class="keywd">is</span> TRUE;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
          <span class="keywd">var</span> <span class="type">boolean</span>: isEqual <span class="keywd">is</span> TRUE;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set1 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set2 <span class="keywd">then</span>
              isProperSubset := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set1 <span class="keywd">then</span>
              isEqual := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          isProperSubset := isProperSubset <span class="op">and</span> <span class="op">not</span> isEqual;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a proper superset of ''set2''.
       *  ''set1'' is a proper superset of ''set2'' if
       *   set1 >= set2 and set1 &lt;> set2
       *  holds.
       *  @return TRUE if ''set1'' is a proper superset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) > (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">boolean</span>: isProperSuperset <span class="keywd">is</span> TRUE;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
          <span class="keywd">var</span> <span class="type">boolean</span>: isEqual <span class="keywd">is</span> TRUE;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set1 <span class="keywd">then</span>
              isProperSuperset := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">for</span> element <span class="keywd">range</span> set1 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set2 <span class="keywd">then</span>
              isEqual := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          isProperSuperset := isProperSuperset <span class="op">and</span> <span class="op">not</span> isEqual;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a subset of ''set2''.
       *  ''set1'' is a subset of ''set2'' if no element X exists for which
       *   X in set1 and X not in set2
       *  holds.
       *  @return TRUE if ''set1'' is a subset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) &lt;= (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">boolean</span>: isSubset <span class="keywd">is</span> TRUE;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set1 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set2 <span class="keywd">then</span>
              isSubset := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="comment">(**
       *  Determine if ''set1'' is a superset of ''set2''.
       *  ''set1'' is a superset of ''set2'' if no element X exists for which
       *   X in set2 and X not in set1
       *  holds.
       *  @return TRUE if ''set1'' is a superset of ''set2'',
       *          FALSE otherwise.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">setType</span>: set1) >= (<span class="op">in</span> <span class="type">setType</span>: set2) <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">boolean</span>: isSuperset <span class="keywd">is</span> TRUE;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">baseType</span>: element <span class="keywd">is</span> baseType.value;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> element <span class="keywd">range</span> set2 <span class="keywd">do</span>
            <span class="keywd">if</span> element <span class="op">not</span> <span class="op">in</span> set1 <span class="keywd">then</span>
              isSuperset := FALSE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: { (<span class="op">in</span> <span class="type">baseType</span>: value) } <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: aSet <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">begin</span>
          incl(aSet, value);
        <span class="keywd">end</span> <span class="keywd">func</span>;

      tupleType := tuple baseType;
      array_type := <span class="type">array</span> <span class="type">baseType</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">setType</span>: { (<span class="op">in</span> <span class="type">tupleType</span>: value) } <span class="keywd">is</span> <span class="keywd">func</span>
        <span class="keywd">result</span>
          <span class="keywd">var</span> <span class="type">setType</span>: aSet <span class="keywd">is</span> setType.EMPTY_SET;
        <span class="keywd">local</span>
          <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
        <span class="keywd">begin</span>
          <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length([] value) <span class="keywd">do</span>
            incl(aSet, ([] value)[number]);
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">if</span> getobj(str(<span class="keywd">ref</span> <span class="type">baseType</span>: setElement)) &lt;> NIL <span class="keywd">then</span>
        <span class="comment">(**
         *  Convert a set to a [[string]].
         *  @return the string result of the conversion.
         *  @exception MEMORY_ERROR Not enough memory to represent the result.
         *)</span>
        <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">setType</span>: aSet) <span class="keywd">is</span> <span class="keywd">func</span>
          <span class="keywd">result</span>
            <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">"{"</span>;
          <span class="keywd">local</span>
            <span class="keywd">var</span> <span class="type">baseType</span>: setElement <span class="keywd">is</span> baseType.value;
          <span class="keywd">begin</span>
            <span class="keywd">for</span> setElement <span class="keywd">range</span> aSet <span class="keywd">do</span>
              <span class="keywd">if</span> stri &lt;> <span class="stri">"{"</span> <span class="keywd">then</span>
                stri &amp;:= <span class="stri">", "</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              stri &amp;:= str(setElement);
            <span class="keywd">end</span> <span class="keywd">for</span>;
            stri &amp;:= <span class="stri">"}"</span>;
          <span class="keywd">end</span> <span class="keywd">func</span>;

      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> global;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
