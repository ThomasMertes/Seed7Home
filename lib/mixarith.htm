<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  mixarith.s7i  Support to mix arithmetic between numeric types.  *)</span>
<span class="comment">(*  Copyright (C) 2019  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/rational.htm">rational.s7i</a>"</span>;


<span class="comment">(**
 *  Add an [[integer]] and a [[float]] number.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">integer</span>: summand1) + (<span class="op">in</span> <span class="type">float</span>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> float(summand1) + summand2;


<span class="comment">(**
 *  Add a [[float]] and an [[integer]] number.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: summand1) + (<span class="op">in</span> <span class="type">integer</span>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> summand1 + float(summand2);


<span class="comment">(**
 *  Subtract a [[float]] from an [[integer]] number.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">integer</span>: minuend) - (<span class="op">in</span> <span class="type">float</span>: subtrahend) <span class="keywd">is</span>
    <span class="keywd">return</span> float(minuend) - subtrahend;


<span class="comment">(**
 *  Subtract an [[integer]] from a [[float]] number.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: minuend) - (<span class="op">in</span> <span class="type">integer</span>: subtrahend) <span class="keywd">is</span>
    <span class="keywd">return</span> minuend - float(subtrahend);


<span class="comment">(**
 *  Multiply an [[integer]] by a [[float]] number.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">integer</span>: factor1) * (<span class="op">in</span> <span class="type">float</span>: factor2) <span class="keywd">is</span>
    <span class="keywd">return</span> float(factor1) * factor2;


<span class="comment">(**
 *  Multiply a [[float]] by an [[integer] number.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: factor1) * (<span class="op">in</span> <span class="type">integer</span>: factor2) <span class="keywd">is</span>
    <span class="keywd">return</span> factor1 * float(factor2);


<span class="comment">(**
 *  Divide an [[integer]] by a [[float]] number.
 *   A / 0.0  returns  Infinity  for A > 0
 *   A / 0.0  returns -Infinity  for A &amp;lt; 0
 *   0 / 0.0  returns NaN
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">integer</span>: dividend) / (<span class="op">in</span> <span class="type">float</span>: divisor) <span class="keywd">is</span>
    <span class="keywd">return</span> float(dividend) / divisor;


<span class="comment">(**
 *  Divide a [[float]] by an [[integer]] number.
 *   A / 0    returns  Infinity  for A > 0.0
 *   A / 0    returns -Infinity  for A &amp;lt; 0.0
 *   0.0 / 0  returns NaN
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: dividend) / (<span class="op">in</span> <span class="type">integer</span>: divisor) <span class="keywd">is</span>
    <span class="keywd">return</span> dividend / float(divisor);


<span class="comment">(**
 *  Add an [[integer]] and a [[rational]] number.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">integer</span>: summand1) + (<span class="op">in</span> <span class="type">rational</span>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> rational(summand1) + summand2;


<span class="comment">(**
 *  Add a [[rational]] and an [[integer]] number.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">rational</span>: summand1) + (<span class="op">in</span> <span class="type">integer</span>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> summand1 + rational(summand2);


<span class="comment">(**
 *  Subtract a [[rational]] from an [[integer]] number.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">integer</span>: minuend) - (<span class="op">in</span> <span class="type">rational</span>: subtrahend) <span class="keywd">is</span>
    <span class="keywd">return</span> rational(minuend) - subtrahend;


<span class="comment">(**
 *  Subtract an [[integer]] from a [[rational]] number.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">rational</span>: minuend) - (<span class="op">in</span> <span class="type">integer</span>: subtrahend) <span class="keywd">is</span>
    <span class="keywd">return</span> minuend - rational(subtrahend);


<span class="comment">(**
 *  Multiply an [[integer]] by a [[rational]] number.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">integer</span>: factor1) * (<span class="op">in</span> <span class="type">rational</span>: factor2) <span class="keywd">is</span>
    <span class="keywd">return</span> rational(factor1) * factor2;


<span class="comment">(**
 *  Multiply a [[rational]] by an [[integer] number.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">rational</span>: factor1) * (<span class="op">in</span> <span class="type">integer</span>: factor2) <span class="keywd">is</span>
    <span class="keywd">return</span> factor1 * rational(factor2);


<span class="comment">(**
 *  Divide an [[integer]] by a [[rational]] number.
 *   A / 0.0  returns  Infinity  for A > 0
 *   A / 0.0  returns -Infinity  for A &amp;lt; 0
 *   0 / 0.0  returns NaN
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">integer</span>: dividend) / (<span class="op">in</span> <span class="type">rational</span>: divisor) <span class="keywd">is</span>
    <span class="keywd">return</span> rational(dividend) / divisor;


<span class="comment">(**
 *  Divide a [[rational]] by an [[integer]] number.
 *   A / 0    returns  Infinity  for A > 0.0
 *   A / 0    returns -Infinity  for A &amp;lt; 0.0
 *   0.0 / 0  returns NaN
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">rational</span>: (<span class="op">in</span> <span class="type">rational</span>: dividend) / (<span class="op">in</span> <span class="type">integer</span>: divisor) <span class="keywd">is</span>
    <span class="keywd">return</span> dividend / rational(divisor);


<span class="comment">(**
 *  Convert a [[rational]] to a [[float]].
 *  @return the float result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: float (<span class="op">in</span> <span class="type">rational</span>: aRational) <span class="keywd">is</span>
    <span class="keywd">return</span> float(aRational.numerator) / float(aRational.denominator);


<span class="comment">(**
 *  Add a [[rational]] and a [[float]] number.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">rational</span>: summand1) + (<span class="op">in</span> <span class="type">float</span>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> float(summand1) + summand2;


<span class="comment">(**
 *  Add a [[float]] and a [[rational]] number.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: summand1) + (<span class="op">in</span> <span class="type">rational</span>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> summand1 + float(summand2);


<span class="comment">(**
 *  Subtract a [[float]] from a [[rational]] number.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">rational</span>: minuend) - (<span class="op">in</span> <span class="type">float</span>: subtrahend) <span class="keywd">is</span>
    <span class="keywd">return</span> float(minuend) - subtrahend;


<span class="comment">(**
 *  Subtract a [[rational]] from a [[float]] number.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: minuend) - (<span class="op">in</span> <span class="type">rational</span>: subtrahend) <span class="keywd">is</span>
    <span class="keywd">return</span> minuend - float(subtrahend);


<span class="comment">(**
 *  Multiply a [[rational]] by a [[float]] number.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">rational</span>: factor1) * (<span class="op">in</span> <span class="type">float</span>: factor2) <span class="keywd">is</span>
    <span class="keywd">return</span> float(factor1) * factor2;


<span class="comment">(**
 *  Multiply a [[float]] by a [[rational] number.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: factor1) * (<span class="op">in</span> <span class="type">rational</span>: factor2) <span class="keywd">is</span>
    <span class="keywd">return</span> factor1 * float(factor2);


<span class="comment">(**
 *  Divide a [[rational]] by a [[float]] number.
 *   A / 0.0        returns  Infinity  for A > 0 / 1
 *   A / 0.0        returns -Infinity  for A &amp;lt; 0 / 1
 *   (0 / 1) / 0.0  returns NaN
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">rational</span>: dividend) / (<span class="op">in</span> <span class="type">float</span>: divisor) <span class="keywd">is</span>
    <span class="keywd">return</span> float(dividend) / divisor;


<span class="comment">(**
 *  Divide a [[float]] by a [[rational]] number.
 *   A / (0 / 1)    returns  Infinity  for A > 0.0
 *   A / (0 / 1)    returns -Infinity  for A &amp;lt; 0.0
 *   0.0 / (0 / 1)  returns NaN
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: (<span class="op">in</span> <span class="type">float</span>: dividend) / (<span class="op">in</span> <span class="type">rational</span>: divisor) <span class="keywd">is</span>
    <span class="keywd">return</span> dividend / float(divisor);
</pre>
</body>
</html>
