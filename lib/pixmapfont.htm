<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pixmapfont.s7i  Defines pixmapFontType and the font cache       *)</span>
<span class="comment">(*  Copyright (C) 2010 - 2013  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">type</span>: pixmapHashType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">char</span><span class="type">]</span> <span class="type">PRIMITIVE_WINDOW</span>;

<span class="keywd">const</span> <span class="type">type</span>: activeFont <span class="keywd">is</span> sub object interface;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">font</span>:              (<span class="op">in</span> <span class="type">activeFont</span>: actFont).baseFont         <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">font</span>:           (<span class="keywd">inout</span> <span class="type">activeFont</span>: actFont).baseFont      <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixmapHashType</span>:    (<span class="op">in</span> <span class="type">activeFont</span>: actFont).pixmap           <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">pixmapHashType</span>: (<span class="keywd">inout</span> <span class="type">activeFont</span>: actFont).pixmap        <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>:           fontSize (<span class="op">in</span> <span class="type">activeFont</span>: actFont)         <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>:           scale (<span class="op">in</span> <span class="type">activeFont</span>: actFont)            <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>:             foreground (<span class="op">in</span> <span class="type">activeFont</span>: actFont)       <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>:             background (<span class="op">in</span> <span class="type">activeFont</span>: actFont)       <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>:           baseLineDelta (<span class="op">in</span> <span class="type">activeFont</span>: actFont)    <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>:           line_delta (<span class="op">in</span> <span class="type">activeFont</span>: actFont)       <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>:           column_delta (<span class="op">in</span> <span class="type">activeFont</span>: actFont)     <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>:           characterSpacing (<span class="op">in</span> <span class="type">activeFont</span>: actFont) <span class="keywd">is</span> DYNAMIC;

<span class="comment">(**
 *  Type to describe a font, based on pixmap images.
 *  Pixmap images are rectangular off screen windows, which are
 *  supported by the graphic system of the operating system.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: pixmapFontType <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">pixmapHashType</span>: pixmap <span class="keywd">is</span> pixmapHashType.value;
    <span class="keywd">var</span> <span class="type">font</span>: baseFont <span class="keywd">is</span> emptyFont.value;
    <span class="keywd">var</span> <span class="type">integer</span>: fontSize <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: scale <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">color</span>: foreground <span class="keywd">is</span> white;
    <span class="keywd">var</span> <span class="type">color</span>: background <span class="keywd">is</span> black;
    <span class="keywd">var</span> <span class="type">integer</span>: baseLineDelta <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line_delta <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column_delta <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: characterSpacing <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(pixmapFontType, activeFont);

<span class="keywd">const</span> <span class="type">activeFont</span>: (attr activeFont).value <span class="keywd">is</span> pixmapFontType.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixmapFontType</span>: genPixmapFont (<span class="op">in</span> <span class="type">font</span>: aFont,
    <span class="op">in</span> <span class="type">integer</span>: fontSize, <span class="op">in</span> <span class="type">integer</span>: scale,
    <span class="op">in</span> <span class="type">color</span>: foreground, <span class="op">in</span> <span class="type">color</span>: background)                     <span class="keywd">is</span> DYNAMIC;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getFontCharPixmap (<span class="op">in</span> <span class="type">font</span>: aFont,
    <span class="keywd">inout</span> <span class="type">activeFont</span>: actFont, <span class="op">in</span> <span class="type">char</span>: ch)                         <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: fontSize (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)         <span class="keywd">is</span> <span class="keywd">return</span> actFont.fontSize;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: scale (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)            <span class="keywd">is</span> <span class="keywd">return</span> actFont.scale;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>:   foreground (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)       <span class="keywd">is</span> <span class="keywd">return</span> actFont.foreground;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">color</span>:   background (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)       <span class="keywd">is</span> <span class="keywd">return</span> actFont.background;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: baseLineDelta (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)    <span class="keywd">is</span> <span class="keywd">return</span> actFont.baseLineDelta ;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: line_delta (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)       <span class="keywd">is</span> <span class="keywd">return</span> actFont.line_delta;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: column_delta (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont)     <span class="keywd">is</span> <span class="keywd">return</span> actFont.column_delta;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: characterSpacing (<span class="op">in</span> <span class="type">pixmapFontType</span>: actFont) <span class="keywd">is</span> <span class="keywd">return</span> actFont.characterSpacing;


<span class="comment">#</span>
<span class="comment"># Font cache</span>
<span class="comment">#</span>


<span class="comment">(**
 *  Type used as key for the font cache.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: fontKeyType <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">font</span>: baseFont <span class="keywd">is</span> emptyFont.value;
    <span class="keywd">var</span> <span class="type">integer</span>: fontSize <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: scale <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">color</span>: foreground <span class="keywd">is</span> white;
    <span class="keywd">var</span> <span class="type">color</span>: background <span class="keywd">is</span> black;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">fontKeyType</span>: fontKey) <span class="keywd">is</span>
  <span class="keywd">return</span> hashCode(fontKey.baseFont) + hashCode(fontKey.fontSize) + hashCode(fontKey.scale) +
      hashCode(fontKey.foreground) + hashCode(fontKey.background);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">fontKeyType</span>: fontKey1, <span class="op">in</span> <span class="type">fontKeyType</span>: fontKey2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: signumValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    signumValue := compare(fontKey1.baseFont, fontKey2.baseFont);
    <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
      signumValue := compare(fontKey1.fontSize, fontKey2.fontSize);
      <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
        signumValue := compare(fontKey1.scale, fontKey2.scale);
        <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
          signumValue := compare(fontKey1.foreground, fontKey2.foreground);
          <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
            signumValue := compare(fontKey1.background, fontKey2.background);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="comment">(**
 *  Type of the font cache.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: fontCacheType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">fontKeyType</span><span class="type">]</span> <span class="type">activeFont</span>;

<span class="keywd">var</span> <span class="type">fontCacheType</span>: fontCache <span class="keywd">is</span> fontCacheType.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">pixmapFontType</span>: genPixmapFont (<span class="op">in</span> <span class="type">fontProperties</span>: properties,
    <span class="op">in</span> <span class="type">integer</span>: fontSize, <span class="op">in</span> <span class="type">integer</span>: scale,
    <span class="op">in</span> <span class="type">color</span>: foreground, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">pixmapFontType</span>: pixmapFont <span class="keywd">is</span> pixmapFontType.value;
  <span class="keywd">begin</span>
    incl(pixmapFont.pixmap, <span class="stri">' '</span>, PRIMITIVE_WINDOW.value);
    pixmapFont.baseFont := properties;
    pixmapFont.fontSize := fontSize;
    pixmapFont.scale := scale;
    pixmapFont.foreground := foreground;
    pixmapFont.background := background;
    pixmapFont.baseLineDelta := baseLineDelta(properties) * scale;
    pixmapFont.line_delta := lineHeight(properties) * scale;
    pixmapFont.column_delta := columnWidth(properties) * scale;
    pixmapFont.characterSpacing := characterSpacing(properties) * scale;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the specified font, either from the font cache or create it.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">activeFont</span>: getFont (<span class="op">in</span> <span class="type">font</span>: baseFont, <span class="op">in</span> <span class="type">integer</span>: fontSize,
    <span class="op">in</span> <span class="type">integer</span>: scale, <span class="op">in</span> <span class="type">color</span>: foreground, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">activeFont</span>: selectedFont <span class="keywd">is</span> activeFont.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">fontKeyType</span>: fontKey <span class="keywd">is</span> fontKeyType.value;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("getFont(bmpFont, " &lt;&amp; fontSize &lt;&amp; ", " &lt;&amp; scale &lt;&amp; ")");</span>
    fontKey.baseFont := baseFont;
    fontKey.fontSize := fontSize;
    fontKey.scale := scale;
    fontKey.foreground := foreground;
    fontKey.background := background;
    <span class="keywd">if</span> fontKey <span class="op">in</span> fontCache <span class="keywd">then</span>
      selectedFont := fontCache[fontKey];
    <span class="keywd">else</span>
      selectedFont := genPixmapFont(baseFont, fontSize, scale, foreground, background);
      fontCache @:= [fontKey] selectedFont;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getFontCharPixmap (
    <span class="keywd">inout</span> <span class="type">activeFont</span>: actFont, <span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span>
  <span class="keywd">return</span> getFontCharPixmap(actFont.baseFont, actFont, ch);
</pre>
</body>
</html>
