<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  getf.s7i      Read and write whole files into and from strings  *)</span>
<span class="comment">(*  Copyright (C) 1993, 1994, 2005  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/stdio.htm">stdio.s7i</a>"</span>;


<span class="comment">(**
 *  Read the file with the given 'file_name' into a string.
 *  Getf returns all bytes of a file without any change.
 *  @return a string with the file content, or "" if no file exists.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getf (<span class="op">in</span> <span class="type">string</span>: file_name) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: data <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: work_file <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    work_file := open(file_name, <span class="stri">"r"</span>);
    <span class="keywd">if</span> work_file &lt;> STD_NULL <span class="keywd">then</span>
      data := gets(work_file, length(work_file));
      close(work_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write the string 'stri' to the file with the name 'file_name'.
 *  If the file exists already, it is overwritten.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: putf (<span class="op">in</span> <span class="type">string</span>: file_name, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: work_file <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      work_file := open(file_name, <span class="stri">"w"</span>);
      <span class="keywd">if</span> work_file &lt;> STD_NULL <span class="keywd">then</span>
        write(work_file, stri);
        close(work_file);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read the file with the name 'file_name' into an array of strings.
 *  The function accepts lines ending with LF or with CR LF. The line
 *  endings are not copied into the strings. The last line of the
 *  file needs not to be terminated with a LF.
 *  @return a string array with the file content, or an empty array if no file exists.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: readf (<span class="op">in</span> <span class="type">string</span>: file_name) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: data <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: contents <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    contents := replace(getf(file_name), <span class="stri">"\r\n"</span>, <span class="stri">"\n"</span>);
    <span class="keywd">if</span> contents &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      <span class="keywd">if</span> endsWith(contents, <span class="stri">"\n"</span>) <span class="keywd">then</span>
        data := split(contents[.. pred(length(contents))], <span class="stri">"\n"</span>);
      <span class="keywd">else</span>
        data := split(contents, <span class="stri">"\n"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write the string array 'data' to the file with the name 'file_name'.
 *  The elements of the array are written as lines to the file. The
 *  function uses LF as line ending and the last line is also
 *  terminated with a LF. If the file exists already, it is
 *  overwritten.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writef (<span class="op">in</span> <span class="type">string</span>: file_name, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: data) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: work_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(data) &lt;> 0 <span class="keywd">then</span>
      work_file := open(file_name, <span class="stri">"w"</span>);
      <span class="keywd">if</span> work_file &lt;> STD_NULL <span class="keywd">then</span>
        <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(data) <span class="keywd">do</span>
          writeln(work_file, data[line]);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        close(work_file);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
