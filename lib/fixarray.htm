<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  fixarray.s7i  Support for arrays with a fixed size              *)</span>
<span class="comment">(*  Copyright (C) 2024  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Abstract data type, describing fixed size arrays with [[integer]] index.
 *  A fixed size array type defines the minimum and maximum allowed indices.
 *  All arrays declared with this type have the same length and the same
 *  minimum and maximum indices. All abstract fixed size array types are
 *  incompatible to each other. A type declaration is needed to use the
 *  same fixed size array type at several places. E.g.:
 *    const type: dataBlockType is array [1 .. 64] integer;
 *  afterwards ''dataBlockType'' can be used in declarations. E.g.:
 *    var dataBlockType: aDataBlock is dataBlockType.value;
 *  @param minIdx Minimum index of the array type.
 *  @param maxIdx Maximum index of the array type.
 *  @param baseType Type of the array elements.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: <span class="type">array</span> <span class="type">[</span> (<span class="op">in</span> <span class="type">integer</span>: minIdx) .. (<span class="op">in</span> <span class="type">integer</span>: maxIdx) ] (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: arrayType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    global
      arrayType := newtype;
      IN_PARAM_IS_REFERENCE(arrayType);

      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">arrayType</span>: dest) ::= (<span class="op">in</span> <span class="type">arrayType</span>: source)            <span class="keywd">is</span> action <span class="stri">"ARR_CREATE"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">arrayType</span>: aValue)                             <span class="keywd">is</span> action <span class="stri">"ARR_DESTR"</span>;
      <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: dest) := (<span class="op">in</span> <span class="type">arrayType</span>: source)           <span class="keywd">is</span> action <span class="stri">"ARR_CPY"</span>;

      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: SET_MIN_IDX (paren1, <span class="op">in</span> <span class="type">integer</span>: start, paren2,
                                         <span class="op">in</span> <span class="type">arrayType</span>: arr)                   <span class="keywd">is</span> action <span class="stri">"ARR_ARRLIT2"</span>;
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: TIMES (<span class="op">in</span> <span class="type">integer</span>: factor, <span class="op">times</span>,
                                   <span class="op">in</span> <span class="type">baseType</span>: element, attr arrayType)      <span class="keywd">is</span> action <span class="stri">"ARR_TIMES"</span>;

      <span class="keywd">const</span> <span class="type">arrayType</span>: (attr arrayType) . value <span class="keywd">is</span>
          SET_MIN_IDX(paren1, minIdx, paren2,
                      TIMES(succ(maxIdx - minIdx), <span class="op">times</span>, baseType.value, arrayType));

      <span class="comment">(**
       *  Generate an ''arrayType'' array filled with ''elements''.
       *  @return a fixed size array filled with ''elements''.
       *  @exception MEMORY_ERROR Not enough memory to represent the result.
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">arrayType</span>: (attr arrayType) <span class="op">times</span> (<span class="op">in</span> <span class="type">baseType</span>: element) <span class="keywd">is</span>
          <span class="keywd">return</span> SET_MIN_IDX(paren1, minIdx, paren2,
                             TIMES(succ(maxIdx - minIdx), <span class="op">times</span>, element, arrayType));

      <span class="comment">(**
       *  Length of all arrays declared with ''arrayType''.
       *  All arrays declared with ''arrayType'' have this length.
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: length (attr arrayType) <span class="keywd">is</span> succ(maxIdx - minIdx);

      <span class="comment">(**
       *  Minimum index of all arrays declared with ''arrayType''.
       *  All arrays declared with ''arrayType'' have this minimum index.
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: minIdx (attr arrayType) <span class="keywd">is</span> minIdx;

      <span class="comment">(**
       *  Maximum index of all arrays declared with ''arrayType''.
       *  All arrays declared with ''arrayType'' have this maximum index.
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: maxIdx (attr arrayType) <span class="keywd">is</span> maxIdx;

      <span class="comment">(**
       *  Length of the array ''arr''.
       *  The length of a fixed size array does not depend on the value.
       *  @return the length of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span> succ(maxIdx - minIdx);

      <span class="comment">(**
       *  Minimum index of array ''arr''.
       *  The minimum index of a fixed size array does not depend on the value.
       *  @return the minimum index of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: minIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span> minIdx;

      <span class="comment">(**
       *  Maximum index of array ''arr''.
       *  The maximum index of a fixed size array does not depend on the value.
       *  @return the maximum index of the array.
       *)</span>
      <span class="keywd">const</span> <span class="type">integer</span>: maxIdx (<span class="op">in</span> <span class="type">arrayType</span>: arr) <span class="keywd">is</span> maxIdx;

      <span class="comment">(**
       *  Access one element from the fixed size array ''arr''.
       *  @return the element with the specified ''index'' from ''arr''.
       *  @exception INDEX_ERROR If ''index'' is less than [[#minIdx(attr_arrayType)|minIdx]](arrayType) or
       *                         greater than [[#maxIdx(attr_arrayType)|maxIdx]](arrayType)
       *)</span>
      <span class="keywd">const</span> <span class="type">func</span> <span class="type">baseType</span>: (<span class="op">in</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: index) ]        <span class="keywd">is</span> action <span class="stri">"ARR_IDX"</span>;

      <span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">baseType</span>: (<span class="keywd">inout</span> <span class="type">arrayType</span>: arr) [ (<span class="op">in</span> <span class="type">integer</span>: index) ]  <span class="keywd">is</span> action <span class="stri">"ARR_IDX"</span>;

    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Abstract data type for fixed size arrays with minimum index of 1.
 *  A fixed size array type defines the minimum and maximum allowed indices.
 *  All arrays declared with this type have the same length and the same
 *  minimum and maximum indices. All abstract fixed size array types are
 *  incompatible to each other. A type declaration is needed to use the
 *  same fixed size array type at several places. E.g.:
 *    const type: dataBlockType is array [64] integer;
 *  afterwards ''dataBlockType'' can be used in declarations. E.g.:
 *    var dataBlockType: aDataBlock is dataBlockType.value;
 *  @param maxIdx Maximum index of the array type.
 *  @param baseType Type of the array elements.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: <span class="type">array</span> <span class="type">[</span> (<span class="op">in</span> <span class="type">integer</span>: maxIdx) ] (<span class="op">in</span> <span class="type">type</span>: baseType) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="type">array</span><span class="type">[</span>1 .. maxIdx] baseType;
</pre>
</body>
</html>
