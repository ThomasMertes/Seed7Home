<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  progs.s7i     Program handling support library                  *)</span>
<span class="comment">(*  Copyright (C) 1991 - 1994, 2004 - 2015  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/category.htm">category.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bstring.htm">bstring.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bigint.htm">bigint.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/external_file.htm">external_file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/graph.htm">graph.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/poll.htm">poll.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/process.htm">process.s7i</a>"</span>;


<span class="comment">(**
 *  Type to describe a Seed7 program.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: program <span class="keywd">is</span> subtype object;


IN_PARAM_IS_REFERENCE(program);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">program</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">program</span>: source)                <span class="keywd">is</span> action <span class="stri">"PRG_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">program</span>: aValue)                                <span class="keywd">is</span> action <span class="stri">"PRG_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">program</span>: dest) := (<span class="keywd">ref</span> <span class="type">program</span>: source)               <span class="keywd">is</span> action <span class="stri">"PRG_CPY"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: _GENERATE_EMPTY_PROG                                 <span class="keywd">is</span> action <span class="stri">"PRG_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">program</span>: (attr program) . EMPTY                                    <span class="keywd">is</span> _GENERATE_EMPTY_PROG;


<span class="comment">(**
 *  Default value of ''program'' (program.EMPTY).
 *)</span>
<span class="keywd">const</span> <span class="type">program</span>: (attr program) . value                                    <span class="keywd">is</span> program.EMPTY;


<span class="comment">(**
 *  Check if two ''program'' values are equal.
 *  @return TRUE if both values are equal, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">program</span>: prog1) = (<span class="op">in</span> <span class="type">program</span>: prog2)            <span class="keywd">is</span> action <span class="stri">"PRG_EQ"</span>;


<span class="comment">(**
 *  Check if two ''program'' values are not equal.
 *  @return FALSE if both values are equal, TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">program</span>: prog1) &lt;> (<span class="op">in</span> <span class="type">program</span>: prog2)           <span class="keywd">is</span> action <span class="stri">"PRG_NE"</span>;


<span class="comment">(**
 *  Returns the name of ''aProgram'' without path and extension.
 *  This function does not follow symbolic links.
 *  It determines, with which name a program was called.
 *  If a symbolic link refers to a program, the name of
 *  the symbolic link is returned.
 *  @return the name of the program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: name (<span class="op">in</span> <span class="type">program</span>: aProgram)                           <span class="keywd">is</span> action <span class="stri">"PRG_NAME"</span>;


<span class="comment">(**
 *  Return the absolute path of the program ''aProgram''.
 *  This function does follow symbolic links.
 *  @return the absolute path of the program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: path (<span class="op">in</span> <span class="type">program</span>: aProgram)                           <span class="keywd">is</span> action <span class="stri">"PRG_PATH"</span>;


<span class="keywd">const</span> <span class="type">type</span>: singleParseOption <span class="keywd">is</span> new <span class="keywd">enum</span>
    TRACE_ACTIONS,         <span class="comment"># Trace primitive actions</span>
    TRACE_DO_ACTION_CHECK, <span class="comment"># Do action check</span>
    TRACE_DYNAMIC_CALLS,   <span class="comment"># Trace dynamic calls</span>
    TRACE_EXCEPTIONS,      <span class="comment"># Trace exceptions and handlers</span>
    TRACE_HEAP_SIZE,       <span class="comment"># Trace heap size</span>
    TRACE_MATCH,           <span class="comment"># Trace matching expressions</span>
    TRACE_EXECUTIL,        <span class="comment"># Trace exec utility functions</span>
    WRITE_LIBRARY_NAMES,   <span class="comment"># Write a list of include libraries</span>
    WRITE_LINE_NUMBERS,    <span class="comment"># Write line numbers, while analyzing</span>
    SHOW_IDENT_TABLE,      <span class="comment"># Show the identifier table after the analyzing phase</span>
    SHOW_STATISTICS        <span class="comment"># Show compilation statistics</span>
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">type</span>: parseOptions <span class="keywd">is</span> <span class="type">set</span> <span class="type">of</span> <span class="type">singleParseOption</span>;


<span class="comment">(**
 *  Parse the file with the given ''fileName'', ''options'', ''libraryDirs'' and ''protFileName''.
 *  @return the parsed program.
 *  @exception RANGE_ERROR ''fileName'' does not use the standard path
 *             representation or ''fileName'' is not representable in
 *             the system path type.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseFile (<span class="op">in</span> <span class="type">string</span>: fileName, <span class="op">in</span> <span class="type">parseOptions</span>: options,
                               <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: libraryDirs,
                               <span class="op">in</span> <span class="type">string</span>: protFileName)                  <span class="keywd">is</span> action <span class="stri">"PRG_FIL_PARSE"</span>;


<span class="comment">(**
 *  Parse the file with the given ''fileName'', ''options'' and ''libraryDirs''.
 *  @return the parsed program.
 *  @exception RANGE_ERROR ''fileName'' does not use the standard path
 *             representation or ''fileName'' is not representable in
 *             the system path type.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseFile (<span class="op">in</span> <span class="type">string</span>: fileName, <span class="op">in</span> <span class="type">parseOptions</span>: options,
                               <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: libraryDirs) <span class="keywd">is</span>
  <span class="keywd">return</span> parseFile(fileName, options, libraryDirs, <span class="stri">""</span>);


<span class="comment">(**
 *  Parse the file with the given ''fileName'' and ''options''.
 *  @return the parsed program.
 *  @exception RANGE_ERROR ''fileName'' does not use the standard path
 *             representation or ''fileName'' is not representable in
 *             the system path type.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseFile (<span class="op">in</span> <span class="type">string</span>: fileName, <span class="op">in</span> <span class="type">parseOptions</span>: options) <span class="keywd">is</span>
  <span class="keywd">return</span> parseFile(fileName, options, 0 <span class="op">times</span> <span class="stri">""</span>, <span class="stri">""</span>);


<span class="comment">(**
 *  Parse the file with the given ''fileName''.
 *  @return the parsed program.
 *  @exception RANGE_ERROR ''fileName'' does not use the standard path
 *             representation or ''fileName'' is not representable in
 *             the system path type.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseFile (<span class="op">in</span> <span class="type">string</span>: fileName) <span class="keywd">is</span>
  <span class="keywd">return</span> parseFile(fileName, parseOptions.value, 0 <span class="op">times</span> <span class="stri">""</span>, <span class="stri">""</span>);


<span class="comment">(**
 *  Parse the given ''string'' with ''options', ''libraryDirs'' and ''protFileName''.
 *  @return the parsed program.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseStri (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">parseOptions</span>: options,
                               <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: libraryDirs,
                               <span class="op">in</span> <span class="type">string</span>: protFileName)                  <span class="keywd">is</span> action <span class="stri">"PRG_STR_PARSE"</span>;


<span class="comment">(**
 *  Parse the given ''string'' with ''options' and ''libraryDirs''.
 *  @return the parsed program.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseStri (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">parseOptions</span>: options,
                               <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: libraryDirs) <span class="keywd">is</span>
  <span class="keywd">return</span> parseStri(stri, options, libraryDirs, <span class="stri">""</span>);


<span class="comment">(**
 *  Parse the given ''string'' with ''options'.
 *  @return the parsed program.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseStri (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">parseOptions</span>: options) <span class="keywd">is</span>
  <span class="keywd">return</span> parseStri(stri, options, 0 <span class="op">times</span> <span class="stri">""</span>, <span class="stri">""</span>);


<span class="comment">(**
 *  Parse the given ''string''.
 *  @return the parsed program.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: parseStri (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
  <span class="keywd">return</span> parseStri(stri, parseOptions.value, 0 <span class="op">times</span> <span class="stri">""</span>, <span class="stri">""</span>);


<span class="comment">(**
 *  Evaluate ''anExpression'' which is part of ''aProgram''.
 *  @return the result of the evaluation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: evaluate (<span class="op">in</span> <span class="type">program</span>: aProgram,
                                <span class="op">in</span> <span class="type">reference</span>: anExpression)              <span class="keywd">is</span> action <span class="stri">"PRG_EVAL"</span>;


<span class="comment">(**
 *  Execute ''aProgram'' with the given ''parameters'', ''options'' and ''protFileName''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: execute (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
                     <span class="op">in</span> <span class="type">parseOptions</span>: options,
                     <span class="op">in</span> <span class="type">string</span>: protFileName)                            <span class="keywd">is</span> action <span class="stri">"PRG_EXEC"</span>;


<span class="comment">(**
 *  Execute ''aProgram'' with the given ''parameters'' and ''options''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: execute (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters,
                     <span class="op">in</span> <span class="type">parseOptions</span>: options) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    execute(aProgram, parameters, options, <span class="stri">""</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Execute ''aProgram'' with the given ''parameters''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: execute (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: parameters) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    execute(aProgram, parameters, parseOptions.value, <span class="stri">""</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Execute ''aProgram'' with an empty parameter list.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: execute (<span class="op">in</span> <span class="type">program</span>: aProgram) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    execute(aProgram, 0 <span class="op">times</span> <span class="stri">""</span>, parseOptions.value, <span class="stri">""</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the value of the system variable ''name'' in ''aProgram''.
 *  @return a reference to the value of the system variable or
 *          NIL if no system variable ''name'' exists.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: sysVar (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">string</span>: name)     <span class="keywd">is</span> action <span class="stri">"PRG_SYSVAR"</span>;


<span class="comment">(**
 *  Determine the number of errors in ''aProgram''.
 *  @return the number of errors.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: errorCount (<span class="op">in</span> <span class="type">program</span>: aProgram)                    <span class="keywd">is</span> action <span class="stri">"PRG_ERROR_COUNT"</span>;


<span class="comment">(**
 *  Determine the list of global defined objects in ''aProgram''.
 *  The returned list contains constant and variable objects
 *  in the same order as the definitions of the source program.
 *  Literal objects and local objects are not part of this list.
 *  @return the list of global defined objects.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: globalObjects (<span class="op">in</span> <span class="type">program</span>: aProgram)                <span class="keywd">is</span> action <span class="stri">"PRG_GLOBAL_OBJECTS"</span>;


<span class="comment">(**
 *  Determine object with ''name'' from program ''aProgram''.
 *  @return a reference to the object or NIL if no object ''name'' exists.
 *  @exception MEMORY_ERROR If ''name'' cannot be converted to
 *             the internal representation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: syobject (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">string</span>: name)   <span class="keywd">is</span> action <span class="stri">"PRG_SYOBJECT"</span>;


<span class="comment">(**
 *  Determine object from program ''aProgram'' which matches ''expression''.
 *  @return object from program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: match (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">ref_list</span>: expression) <span class="keywd">is</span> action <span class="stri">"PRG_MATCH"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: matchExpr (<span class="op">in</span> <span class="type">program</span>: aProgram, <span class="op">in</span> <span class="type">ref_list</span>: expression)  <span class="keywd">is</span> action <span class="stri">"PRG_MATCH_EXPR"</span>;
<span class="comment"># const func program: get (PROGRAM)                                      is action "PRG_PROG";</span>


<span class="comment">(**
 *  Determine if the referenced object is temporary.
 *  @return TRUE if ''aReference'' is temporary, FALSE otherwise.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isTemp (<span class="op">in</span> <span class="type">reference</span>: aReference)                    <span class="keywd">is</span> action <span class="stri">"REF_ISTEMP"</span>;


<span class="comment">(**
 *  Determine if the referenced object is variable.
 *  @return TRUE if ''aReference'' is a variable, FALSE otherwise.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isVar (<span class="op">in</span> <span class="type">reference</span>: aReference)                     <span class="keywd">is</span> action <span class="stri">"REF_ISVAR"</span>;


<span class="comment">(**
 *  Set var flag of a referenced object.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setVar (<span class="op">in</span> <span class="type">reference</span>: aReference, <span class="op">in</span> <span class="type">boolean</span>: isVariable)    <span class="keywd">is</span> action <span class="stri">"REF_SETVAR"</span>;


<span class="comment">(**
 *  Get the category of a referenced object.
 *  @return the category of the referenced object.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> category: category (<span class="op">in</span> <span class="type">reference</span>: aReference)                 <span class="keywd">is</span> action <span class="stri">"REF_CATEGORY"</span>;


<span class="comment">(**
 *  Set the category of ''aReference'' to ''aCategory''.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setCategory (<span class="op">in</span> <span class="type">reference</span>: aReference,
                         <span class="op">in</span> category: aCategory)                         <span class="keywd">is</span> action <span class="stri">"REF_SETCATEGORY"</span>;


<span class="comment">(**
 *  Get the formal parameters of the function referenced by ''funcRef''.
 *  For objects without parameters an empty list is returned.
 *  @return the formal parameters as [[ref_list]].
 *  @exception RANGE_ERROR If ''funcRef'' is NIL.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: formalParams (<span class="op">in</span> <span class="type">reference</span>: funcRef)                <span class="keywd">is</span> action <span class="stri">"REF_PARAMS"</span>;


<span class="comment">(**
 *  Set the formal parameters of ''funcRef'' to ''params''.
 *  @exception RANGE_ERROR If ''funcRef'' is NIL.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setFormalParams (<span class="op">in</span> <span class="type">reference</span>: funcRef, <span class="op">in</span> <span class="type">ref_list</span>: params) <span class="keywd">is</span> action <span class="stri">"REF_SETPARAMS"</span>;


<span class="comment">(**
 *  Gets the result variable of ''funcRef''.
 *  @return a [[reference]] to the result variable.
 *  @exception RANGE_ERROR If ''funcRef'' is NIL or
 *                         category(funcRef) &lt;> BLOCKOBJECT holds.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: resultVar (<span class="op">in</span> <span class="type">reference</span>: funcRef)                  <span class="keywd">is</span> action <span class="stri">"REF_RESULT"</span>;


<span class="comment">(**
 *  Gets the initialization value of the result variable of ''funcRef''.
 *  @return a [[reference]] to the initialization value.
 *  @exception RANGE_ERROR If ''funcRef'' is NIL or
 *                         category(funcRef) &lt;> BLOCKOBJECT holds.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: resultInitValue (<span class="op">in</span> <span class="type">reference</span>: funcRef)            <span class="keywd">is</span> action <span class="stri">"REF_RESINI"</span>;


<span class="comment">(**
 *  Gets the local constants of ''funcRef''.
 *  @return the local constants as [[ref_list]].
 *  @exception RANGE_ERROR If ''funcRef'' is NIL or
 *                         category(funcRef) &lt;> BLOCKOBJECT holds.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: localConsts (<span class="op">in</span> <span class="type">reference</span>: funcRef)                 <span class="keywd">is</span> action <span class="stri">"REF_LOCAL_CONSTS"</span>;


<span class="comment">(**
 *  Gets the local variables of ''funcRef''.
 *  @return the local variables as [[ref_list]].
 *  @exception RANGE_ERROR If ''funcRef'' is NIL or
 *                         category(funcRef) &lt;> BLOCKOBJECT holds.
 *  @exception MEMORY_ERROR An out of memory situation occurred.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: localVars (<span class="op">in</span> <span class="type">reference</span>: funcRef)                   <span class="keywd">is</span> action <span class="stri">"REF_LOCAL_VARS"</span>;


<span class="comment">(**
 *  Gets the body of the function referenced by ''funcRef''.
 *  @return the body expression of ''funcRef''.
 *  @exception RANGE_ERROR If ''funcRef'' is NIL or
 *                         category(funcRef) &lt;> BLOCKOBJECT holds.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: body (<span class="op">in</span> <span class="type">reference</span>: funcRef)                       <span class="keywd">is</span> action <span class="stri">"REF_BODY"</span>;


<span class="comment">(**
 *  Obtain the minimum index of the array referenced by 'arrayRef'.
 *  @param arrayRef Reference to an array object.
 *  @return the minimum index of the array.
 *  @exception RANGE_ERROR If 'arrayRef' does not refer to an array.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: arrayMinIdx (<span class="op">in</span> <span class="type">reference</span>: arrayRef)                 <span class="keywd">is</span> action <span class="stri">"REF_ARRMINIDX"</span>;


<span class="comment">(**
 *  Obtain the maximum index of the array referenced by 'arrayRef'.
 *  @param arrayRef Reference to an array object.
 *  @return the maximum index of the array.
 *  @exception RANGE_ERROR If 'arrayRef' does not refer to an array.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: arrayMaxIdx (<span class="op">in</span> <span class="type">reference</span>: arrayRef)                 <span class="keywd">is</span> action <span class="stri">"REF_ARRMAXIDX"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: arrayToList (<span class="op">in</span> <span class="type">reference</span>: arrayRef)                <span class="keywd">is</span> action <span class="stri">"REF_ARRTOLIST"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: structToList (<span class="op">in</span> <span class="type">reference</span>: structRef)              <span class="keywd">is</span> action <span class="stri">"REF_SCTTOLIST"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: hashDataToList (<span class="op">in</span> <span class="type">reference</span>: hashRef)              <span class="keywd">is</span> action <span class="stri">"REF_HSHDATATOLIST"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: hashKeysToList (<span class="op">in</span> <span class="type">reference</span>: hashRef)              <span class="keywd">is</span> action <span class="stri">"REF_HSHKEYSTOLIST"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashLength (<span class="op">in</span> <span class="type">reference</span>: hashRef)                   <span class="keywd">is</span> action <span class="stri">"REF_HSHLENGTH"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: interfaceToStruct (<span class="op">in</span> <span class="type">reference</span>: interfaceRef)     <span class="keywd">is</span> action <span class="stri">"REF_ITFTOSCT"</span>;


<span class="comment">(**
 *  Determine the file name of a referenced object.
 *  @return the file name of the referenced object.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: file (<span class="op">in</span> <span class="type">reference</span>: aReference)                     <span class="keywd">is</span> action <span class="stri">"REF_FILE"</span>;


<span class="comment">(**
 *  Determine the line number of a referenced object.
 *  @return the line number of the referenced object.
 *  @exception RANGE_ERROR If ''aReference'' is NIL.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: line (<span class="op">in</span> <span class="type">reference</span>: aReference)                    <span class="keywd">is</span> action <span class="stri">"REF_LINE"</span>;


<span class="comment">(**
 *  Delivers an unique number for each object
 *  @return a unique object number.
 *  @exception MEMORY_ERROR Not enough memory to maintain the object table.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: objNumber (<span class="op">in</span> <span class="type">reference</span>: aReference)               <span class="keywd">is</span> action <span class="stri">"REF_NUM"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: alloc (<span class="op">in</span> <span class="type">reference</span>: aReference)                 <span class="keywd">is</span> action <span class="stri">"REF_ALLOC"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: alloc (<span class="op">in</span> <span class="type">boolean</span>: isVar, <span class="op">in</span> <span class="type">type</span>: aType, <span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> action <span class="stri">"REF_ALLOC_INT"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: alloc (<span class="op">in</span> <span class="type">boolean</span>: isVar, <span class="op">in</span> <span class="type">type</span>: aType, <span class="op">in</span> <span class="type">string</span>: stri)    <span class="keywd">is</span> action <span class="stri">"REF_ALLOC_STRI"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: allocVar (<span class="op">in</span> <span class="type">type</span>: aType, <span class="op">in</span> category: aCategory)      <span class="keywd">is</span> action <span class="stri">"REF_ALLOC_VAR"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr boolean)        <span class="keywd">is</span> action <span class="stri">"BLN_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr integer)        <span class="keywd">is</span> action <span class="stri">"INT_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr char)              <span class="keywd">is</span> action <span class="stri">"CHR_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr string)          <span class="keywd">is</span> action <span class="stri">"STR_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bstring</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr bstring)        <span class="keywd">is</span> action <span class="stri">"BST_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr bitset)          <span class="keywd">is</span> action <span class="stri">"SET_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">pollData</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr pollData)      <span class="keywd">is</span> action <span class="stri">"POL_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">program</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr program)        <span class="keywd">is</span> action <span class="stri">"PRG_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ACTION</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr ACTION)          <span class="keywd">is</span> action <span class="stri">"ACT_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr clib_file)    <span class="keywd">is</span> action <span class="stri">"FIL_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr ref_list)      <span class="keywd">is</span> action <span class="stri">"RFL_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr bigInteger)  <span class="keywd">is</span> action <span class="stri">"BIG_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr float)            <span class="keywd">is</span> action <span class="stri">"FLT_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr reference)    <span class="keywd">is</span> action <span class="stri">"REF_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference,
                                       attr PRIMITIVE_WINDOW)                <span class="keywd">is</span> action <span class="stri">"DRW_VALUE"</span>;
<span class="keywd">const</span> <span class="type">func</span> process: getValue (<span class="op">in</span> <span class="type">reference</span>: aReference, attr process)        <span class="keywd">is</span> action <span class="stri">"PCS_VALUE"</span>;
<span class="comment"># const func type: getValue (in reference: aReference, attr type)            is action "TYP_VALUE";</span>

<span class="keywd">const</span> <span class="type">proc</span>: setValue(<span class="keywd">inout</span> <span class="type">reference</span>: listRef, <span class="op">in</span> <span class="type">ref_list</span>: list)      <span class="keywd">is</span> action <span class="stri">"RFL_SET_VALUE"</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: typeNumber  (<span class="op">in</span> <span class="type">type</span>: aType)                       <span class="keywd">is</span> action <span class="stri">"TYP_NUM"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">reference</span>: typeObject (<span class="op">in</span> <span class="type">type</span>: aType)                      <span class="keywd">is</span> action <span class="stri">"TYP_MATCHOBJ"</span>;
</pre>
</body>
</html>
