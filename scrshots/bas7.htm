<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Program: Basic</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Programs</big></a>
<a class="menu" href="panic.htm">Panic</a>
<a class="menu" href="mandelbr.htm">Mandelbr</a>
<a class="menu" href="planets.htm">Planets</a>
<a class="menu" href="comanche.htm">Comanche</a>
<a class="menu" href="calc7.htm">Calc7</a>
<a class="menu" href="savehd7.htm">Savehd7</a>
<a class="menu" href="s7c.htm">Compiler</a>
<a class="menu" href="db7.htm">Db7</a>
<a class="menu" href="ide7.htm">Ide7</a>
<a class="menu" href="klondike.htm">Klondike</a>
<a class="menu" href="dnafight.htm">Dnafight</a>
<a class="menu" href="sudoku7.htm">Sudoku</a>
<a class="menu" href="wator.htm">Wator</a>
<a class="menu" href="tar7.htm">Tar7</a>
<a class="menu" href="sydir7.htm">Sydir7</a>
<a class="menu" href="ftp7.htm">Ftp7</a>
<a class="menu" href="castle.htm">Castle</a>
<a class="menu" href="tetg.htm">Tetris</a>
<a class="menu" href="make7.htm">Make7</a>
<a class="menu" href="ftpserv.htm">Ftpserv</a>
<a class="menu" href="bas7.htm">Basic</a>
<a class="menu" href="gkbd.htm">Gkbd</a>
<a class="menu" href="pairs.htm">Pairs</a>
<a class="menu" href="shisen.htm">Shisen</a>
<a class="menu" href="eliza.htm">Eliza</a>
<a class="menu" href="../algorith/graphic.htm#dragon_curve">Dragon</a>
<a class="menu" href="../images/testfont1.png">Fonts</a>
<a class="menu" href="toutf8.htm">Toutf8</a>
<a class="menu" href="lander.htm">Lander</a>
<a class="menu" href="wiz.htm">Wiz</a>
<a class="menu" href="startrek.htm">Startrek</a>
<a class="menu" href="../images/dirx1.png">Directory</a>
<a class="menu" href="../algorith/graphic.htm#bifurk">Bifurc</a>
<a class="menu" href="mahjong.htm">Mahjong</a>
<a class="menu" href="../images/rever1.png">Reversi</a>
<a class="menu" href="sokoban.htm">Sokoban</a>
<a class="menu" href="../algorith/graphic.htm#cellauto">Cellauto</a>
<a class="menu" href="sl.htm">Life</a>
<a class="menu" href="../images/snake1.png">Snake</a>
<a class="menu" href="self.htm">Self</a>
<a class="menu" href="../images/carddemo1.png">Cards</a>
<a class="menu" href="../images/ms1.png">Mines</a>
<a class="menu" href="../images/pac1.png">Pacman</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Programs</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Basic</big></b></td>
<td align="right"><a class="link" href="../prg/bas7.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../scrshots/ftpserv.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/gkbd.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<br />
<table cellspacing="0" border="0">
<tr valign="top">
<td align="left" width="100%">

<p>
Bas7 is a BASIC interpreter which is compatible to GW-BASIC
and other old BASIC dialects.
</p><p>
Bas7 is designed to interpret programs from the line number era of BASIC.
Structured <tt>'IF'</tt>, <tt>'DO'</tt> and <tt>'SELECT'</tt> statements
and programs without line numbers are also supported. Unlike many other
BASIC interpreters it does not try to introduce incompatible features.
Bas7 concentrates on backward compatibility instead. Bas7 can be used to
analyze spaghetti code. The option <tt>-l</tt> causes the generation of
a log file. Since spaghetti code is very common in old BASIC programs,
logging can be very useful. As porting tool Bas7 hopefully helps to port
historic programs to modern programming languages like Seed7.
Bas7 can be called from the command line:
</p><pre class="indent">
tm@penguin:~/seed7_5/prg$ ls -l hello.bas
-rw-r--r-- 1 tm tm 66 2008-01-17 08:54 hello.bas
tm@penguin:~/seed7_5/prg$ cat hello.bas
100 PRINT "Hello, world!"
110 INPUT "Press return to continue",a$
tm@penguin:~/seed7_5/prg$ s7 bas7 -l hello
</pre><p>
The command window is cleared and contains:
</p><pre class="indent">
Hello, world!
Press return to continue
</pre><p>
After pressing return the program is finished. The log can be found in the file bas7.log:
</p><pre class="indent">
tm@penguin:~/seed7_5/prg$ cat bas7.log
  100 PRINT "Hello, world!"
  110 INPUT "Press return to continue",a$

load_prog finished
100 PRINT "Hello, world!"
110 INPUT "Press return to continue"
110 INPUT A$ &lt;- ""
END OF PROGRAM REACHED
tm@penguin:~/seed7_5/prg$
</pre><p>
To avoid adding an <tt>'INPUT'</tt> statement at the end of a program it is
possible to call bas7 with the -p option:
</p><pre class="indent">
s7 bas7 -p foo.bas
</pre><p>
That way bas7 asks for a confirmation at the end of the program:
</p><pre class="indent">
=== Program finished ===
Press return to continue
</pre><p>
The following options are supported by bas7:
</p><table border="0" cellspacing="0">
<tr><td width="20"></td> <td>-p</td> <td>&nbsp;&nbsp;</td> <td>Ask for a prompt at the end of the program</td></tr>
<tr><td width="20"></td> <td>-l</td> <td>&nbsp;&nbsp;</td> <td>List program and write log of executed statements</td></tr>
</table><p>
The Bas7 interpreter implements the following functions and
statements ( ** means recognized but not implemented):
</p><p>
ABS, ASC, ATN, **BEEP, BLOAD, **CALL, CASE, CDBL, CHAIN, CHR$,
CINT, **CIRCLE, CLEAR, CLNG, CLOSE, CLS, **COLOR, **COMMON,
CONST, COS, CSNG, CSRLIN, CVD, CVDMBF, CVI, CVL, CVS, CVSMBF,
DATA, DATE$, **DECLARE, DECR, DEF FN, **DEF SEG, DEFDBL,
DEFINT, DEFLNG, DEFSNG, DEFSTR, DELAY, DIM, DISPLAY, DO,
DO UNTIL, DO WHILE, **DRAW, ELSE, ELSEIF, END, ENDIF, EOF,
**ERASE, ERR, ERROR, EXIT DO, EXIT FOR, EXP, FIELD, FIX,
**FLASH, FOR, FRE, FREEFILE, **FUNCTION, GET, GET#, GOSUB,
GOSUB OF, GOTO, GOTO OF, GR, HEX$, HGR, HOME, HPLOT, HTAB,
IF THEN, IF GOSUB, IF GOTO, INCR, INKEY$, **INP, INPUT, INPUT#,
INPUT$, INSTR, INT, **INVERSE, **KEY, LBOUND, LCASE$, LEFT$,
LEN, LET, LINE INPUT, LINE INPUT#, LINPUT, LINPUT# LOCATE, LOF,
LOG, LOOP, LOOP UNTIL, LOOP WHILE, LSET, LTRIM$, MID$, MKD$,
MKDMBF$, MKI$, MKL$, MKS$, MKSMBF$, NEXT, **NORMAL, OCT$,
ON ERROR, ON GOSUB, ON GOTO, **ON KEY, **ON TIMER, OPEN,
OPTION BASE, **OUT, **PAINT, **PALETTE, **PEEK, **PLAY, PLOT,
**POINT, **POKE, POS, PRESET, PRINT, PRINT#, PRINT USING,
**PR#, PSET, PUT, PUT#, RANDOMIZE, READ, REDIM, REM, RESET,
RESTORE, RESUME, RETURN, RIGHT$, RND, RPT$, RSET, RTRIM$,
**RUN, SCREEN, SEEK#, SEG$, SELECT, SGN, SIN, SLEEP, **SOUND,
SPACE$, SPC, SQR, STOP, STR$, **STRIG, STRING$, **SUB, SWAP,
SYSTEM, TAB, TAN, TEXT, TIME$, TIMER, **TYPE, UBOUND, UCASE$,
VAL, VTAB, WEND, WHILE, WRITE, WRITE#
</p>

<div><h3>Operation method</h3>
<p>
The interpreter reads the lines of the source file into an array of strings.
There is no internal representation of the program.
The interpreter uses several approaches to support various BASIC dialects.
</p></div>

<div><h4>General</h4>
<p>
</p><ul>
<li>There is no limit for the length of: A line, a string, a variable name or a line number.</li>
<li>Line numbers can contain a decimal point and the line number 0 is allowed.</li>
<li>Lines without line number are allowed.</li>
<li>The operators <tt>&lt;=</tt>, <tt>&gt;=</tt> and <tt>&lt;&gt;</tt> can also be written as <tt>=&lt;</tt>, <tt>=&gt;</tt> and <tt>&gt;&lt;</tt> .</li>
<li>Hexadecimal numbers can be introduced with <tt>'&amp;H'</tt> or <tt>'&amp;h'</tt> and
    octal numbers with <tt>'&amp;O'</tt> or <tt>'&amp;o'</tt>.</li>
<li>The BASIC program can contain garbage. As long as the garbage is not executed, it does not hurt.</li>
<li>It is not necessary to declare arrays with a <tt>'DIM'</tt> statement.</li>
<li>A <tt>'DIM'</tt> statement initializes arrays such that
    <tt>'LBOUND'</tt> and <tt>'UBOUND'</tt> work.</li>
<li>Array subscripts can be written with parenthesis (E.g.: <tt>'A(10)'</tt>) or
    brackets (E.g.: <tt>'A[10]'</tt>).</li>
<li>In <tt>'PRINT'</tt> statements it is possible to omit the <tt>';'</tt>.</li>
<li>In <tt>'PRINT'</tt> statements it is allowed that <tt>'USING'</tt>
    clauses come later in the parameter list. E.g.
    <tt>'100&nbsp;PRINT"The&nbsp;amount&nbsp;is&nbsp;"&nbsp;USING&nbsp;"##.##";XC'</tt></li>
<li>Some keywords such as <tt>'DO'</tt>, <tt>'GO'</tt>, <tt>'DELAY'</tt>, <tt>'INCR'</tt> and
    <tt>'DECR'</tt> can be used as variables. E.g.: <tt>'DO=5'</tt></li>
<li>Labels and variables can have the same name.
    A statement like <tt>'A:IF&nbsp;B=0&nbsp;THEN&nbsp;A&nbsp;=&nbsp;5'</tt> does not introduce an infinite loop.</li>
<li>When a file is opened (with <tt>'OPEN'</tt>, <tt>'CHAIN'</tt> or <tt>'INCLUDE'</tt>) the file name is
    searched with a case insensitive search.</li>
<li><tt>'REM'</tt> can not only be used as statement, but also at places where <tt>'</tt> is allowed.</li>
<li>The <tt>'END'</tt> statement is allowed to appear in the middle of a program and its
    execution stops the program (It works just like a <tt>'STOP'</tt> statement).</li>
<li>In a BASIC source file control-Z is interpreted as end of file.</li>
</ul><p></p></div>

<div><h4>Spacing</h4>
<p>
Bas7 supports the spacing rules used by old BASIC dialects. This rules can be
quite different to the ones used is used in newer BASIC dialects:
</p><ul>
<li>Line numbers can be written adjacent to the rest of the line. E.g.: <tt>'50GOSUB&nbsp;500'</tt>
<li>Keywords can be written adjacent to numbers. E.g.: <tt>'IF&nbsp;I=0THEN&nbsp;120ELSE&nbsp;150'</tt></li>
<li>Strings and parenthesis can be written adjacent to keywords. E.g.: <tt>'IF"ASD"=MID$(A$,I,3)THEN'</tt></li>
<li>If a statement is starting with the letters of a keyword and cannot
    be recognized as <tt>'LET'</tt> statement it is handled as if a space is inserted
    after the keyword. E.g.: <tt>'GOTO250'</tt> is equivalent to <tt>'GOTO&nbsp;250'</tt> and
    <tt>'100&nbsp;REMARKABLY GOOD'</tt> is a comment line.</li>
<li>If a certain keyword like <tt>'THEN'</tt> or <tt>'TO'</tt> is expected and the current
    symbol starts with the letters of this keyword a space is silently inserted
    after the keyword. E.g.: <tt>'IF I=5 THENI=2'</tt> is interpreted as <tt>'IF I=5 THEN I=2'</tt>.</li>
<li>If a <tt>'LET'</tt> statement starts with the letters <tt>'IF'</tt> and
    the statement is followed by the letters <tt>'THEN'</tt> it is interpreted as
    <tt>'IF'</tt> statement instead. E.g.: <tt>'IFI3=5*J THEN 100'</tt> is interpreted
    as <tt>'IF I3=5*J THEN 100'</tt></li>
<li>If a <tt>'LET'</tt> statement starts with the letters <tt>'FOR'</tt> and
    the statement is followed by the letters <tt>'TO'</tt> it is interpreted as
    <tt>'FOR'</tt> statement instead. E.g.: <tt>'FORJ1=3*I TO 7*I'</tt> is interpreted
    as <tt>'FOR J1=3*I TO 7*I'</tt></li>
<li>In a <tt>'FIELD'</tt> statement it is allowed that the keyword
    <tt>'AS'</tt> is directly followed by a variable without an intermediate
    space. E.g. <tt>'100&nbsp;FIELD#1,128ASDX$'</tt>
<li>Data statements which start with a hex or oct number without
  a space as in <tt>'500&nbsp;DATA&amp;Habcd'</tt> are recognized correctly.</li>
</ul><p>
Old BASIC dialects offer the possibility to add whitespace
at places where modern BASIC dialects forbid them:
</p><ul>
<li>Instead of <tt>'GOTO'</tt> it is possible to write <tt>'GO&nbsp;TO'</tt>.</li>
<li>Operators can be written with two symbols. E.g.: <tt>&lt;</tt> <tt>=</tt> and <tt>&gt;</tt> <tt>&lt;</tt> instead of <tt>&lt;=</tt> and <tt>&gt;&lt;</tt> .</li>
<li>Functions defined with <tt>'DEF FN*'</tt> can be called also if
    there is a space between <tt>'FN'</tt> and the rest of the name.
    E.g. After the line <tt>'100&nbsp;DEF&nbsp;FNB(C)=-C'</tt> the function
    <tt>'FNB'</tt> can be called with <tt>'110&nbsp;A=FN&nbsp;B(35)'</tt>.</li>
</ul><p></p></div>

<div><h4>DATA Statements</h4>
<p>
</p><ul>
<li>It is not necessary to put double quotation marks around string constants in
    <tt>'DATA'</tt> statements, unless they contain commas, colons, or significant
    leading or trailing spaces.</li>
<li>Commas at the end of a <tt>'DATA'</tt> line are <tt>'READ'</tt> as an empty string.</li>
<li>Empty <tt>'DATA'</tt> fields can be read as 0.0.</li>
</ul><p></p></div>

<div><h4>FOR ... NEXT Statements</h4>
<p>
  In modern BASIC dialects every <tt>'FOR'</tt> statement is grouped with exactly
  one <tt>'NEXT'</tt> statement at compile time. There are also strict compile time
  rules how <tt>'FOR ... NEXT'</tt> loops can nest. In old BASIC dialects there
  are no compile time restrictions and corresponding <tt>'FOR'</tt> and <tt>'NEXT'</tt>
  statements are determined at runtime. Bas7 spares no effort to support both
  older and newer style <tt>'FOR'</tt> loops at the same time:
</p><ul>
<li>When executing a <tt>'FOR'</tt> statement the matching <tt>'NEXT'</tt> statement is
    determined at runtime. If a <tt>'FOR'</tt> loop is not entered a statically matching
    <tt>'NEXT'</tt> statement is searched. If a <tt>'FOR'</tt> loop is entered the
    statements following the <tt>'FOR'</tt> statement are executed until a corresponding <tt>'NEXT'</tt>
    statement is encountered.</li>
<li>A corresponding <tt>'NEXT'</tt> statement can be located inside another statement
    (e.g.: <tt>'IF'</tt> or <tt>'DO'</tt>) and even before the <tt>'FOR'</tt> statement.</li>
<li>A <tt>'FOR'</tt> statement can use several corresponding <tt>'NEXT'</tt> statements.
    E.g.: <tt>'FOR&nbsp;I=1&nbsp;TO&nbsp;9:IF&nbsp;A(I)=3&nbsp;THEN&nbsp;N=1:NEXT:ELSE:NEXT'</tt></li>
<li>A <tt>'NEXT'</tt> statement can be shared by several <tt>'FOR'</tt> loops.</li>
<li>A <tt>'NEXT'</tt> statement with a variable like <tt>'NEXT&nbsp;I'</tt> is responsible
    for any <tt>'FOR'</tt> loop which uses the variable (e.g.: <tt>'FOR&nbsp;I'</tt>).
<li>A <tt>'NEXT'</tt> statement with a list of variables like <tt>'NEXT&nbsp;X,Y,Z'</tt>
    is responsible for <tt>'FOR'</tt> loops which use one of these variables.
    It is not necessary that the variables in the <tt>'NEXT'</tt> statement are
    ordered. E.g.: <tt>'FOR&nbsp;A=1&nbsp;TO&nbsp;5:FOR&nbsp;B=1&nbsp;TO&nbsp;5:FOR&nbsp;C=1&nbsp;TO&nbsp;5:NEXT&nbsp;A,C,B'</tt></li>
<li>If the <tt>'NEXT&nbsp;I,J,K'</tt> statement causes the end of a <tt>'FOR&nbsp;J'</tt> loop the
    interpreter looks if the next active <tt>'FOR'</tt> loop uses a remaining variable (<tt>'I,K'</tt>).
    In this case the next active <tt>'FOR'</tt> loop is processed also. This processing continues
    until a <tt>'FOR'</tt> loop is not left or no matching <tt>'FOR'</tt> loop is found.</li>
<li>A <tt>'NEXT'</tt> statement without a variable is responsible for the innermost active
    <tt>'FOR'</tt> loop. If a <tt>'NEXT'</tt> statement without a variable causes the end
    of a <tt>'FOR'</tt> loop the execution always continues with the next statement
    (there is no search for another active <tt>'FOR'</tt> loop).</li>
<li>A <tt>'NEXT'</tt> statement with a variable like <tt>'NEXT&nbsp;A'</tt> causes inner <tt>'FOR'</tt>
    loops with other variables like <tt>'FOR&nbsp;I'</tt> to be left automatically. An example using
    this feature is <tt>'FOR&nbsp;A=B&nbsp;TO&nbsp;C:FOR&nbsp;D=E&nbsp;TO&nbsp;F:IF&nbsp;G(D)&nbsp;THEN&nbsp;NEXT&nbsp;ELSE&nbsp;NEXT&nbsp;A'</tt>.</li>
<li>Unfinished <tt>'FOR'</tt>, <tt>'WHILE'</tt> and <tt>'DO'</tt> loops in a subprogram are left
    when the <tt>'RETURN'</tt>, <tt>'END&nbsp;SUB'</tt> or <tt>'EXIT&nbsp;SUB'</tt> statement is executed.
    Therefore statements like <tt>'FOR&nbsp;A=B&nbsp;TO&nbsp;C:IF&nbsp;D(A)&nbsp;THEN&nbsp;NEXT:RETURN&nbsp;ELSE&nbsp;RETURN'</tt> work.</li>
<li>If a <tt>'NEXT'</tt> statement decides to leave a <tt>'FOR'</tt> loop the loop variable keeps
    the last value. This means that after <tt>'FOR&nbsp;N=1&nbsp;TO&nbsp;8:NEXT'</tt> the variable <tt>'N'</tt> has
    the value <tt>'8'</tt>.
</ul><p></p></div>

<div><h4>GOTO and GOSUB</h4>
<p>
</p><ul>
<li>A <tt>'GOTO'</tt> to a non-existing line is recognized and the next existing line is used instead.</li>
<li>Computed gotos can be written in two forms. As <tt>'ON&nbsp;...&nbsp;GOTO&nbsp;labels'</tt> and
    as <tt>'GOTO&nbsp;...&nbsp;OF&nbsp;labels'</tt>.
<li>Computed gosubs can be written in two forms. As <tt>'ON&nbsp;...&nbsp;GOSUB&nbsp;labels'</tt> and
    as <tt>'GOSUB&nbsp;...&nbsp;OF&nbsp;labels'</tt>.
<li>A <tt>'GOTO'</tt> into a <tt>'DO'</tt> loop is allowed.</li>
</ul><p></p></div>

<div><h4>IF ... THEN Statements</h4>
<p>
  Bas7 supports two versions of the <tt>'IF'</tt> statement. The older one-line
  <tt>'IF'</tt> statement and the newer block-structured <tt>'IF'</tt> statement.
  In a block-structured <tt>'IF'</tt> statement the keyword <tt>'THEN'</tt> is at
  the end of a line or it is followed by a comment. In a one-line <tt>'IF'</tt>
  statement something else such as a line number, label or statement follows the
  keyword <tt>'THEN'</tt>. Besides the features above there are others things
  that support <tt>'THEN'</tt> statements in old BASIC dialects:
</p><ul>
<li>A <tt>':'</tt> after a <tt>'THEN'</tt> is silently ignored. E.g.: <tt>'IF&nbsp;A$="Y"&nbsp;THEN&nbsp;:&nbsp;OK=1'</tt> is executed as <tt>'IF&nbsp;A$="Y"&nbsp;THEN&nbsp;OK=1'</tt></li>
<li>A <tt>':'</tt> between label/line number and <tt>'ELSE'</tt> is silently ignored. E.g.: <tt>'IF&nbsp;A=13&nbsp;THEN&nbsp;340&nbsp;:&nbsp;ELSE&nbsp;CLS'</tt> is executed as <tt>'IF&nbsp;A=13&nbsp;THEN&nbsp;340&nbsp;ELSE&nbsp;CLS'</tt></li>
<li>Statements like <tt>'IF&nbsp;A=0&nbsp;THEN&nbsp;100:PRINT'</tt> are executed as <tt>'IF&nbsp;A=0&nbsp;THEN&nbsp;100&nbsp;ELSE&nbsp;PRINT'</tt>.</li>
<li>An <tt>'ELSE'</tt> can directly follow a <tt>'THEN'</tt>. E.g.: <tt>'IF&nbsp;C=1&nbsp;THEN&nbsp;ELSE&nbsp;GOTO&nbsp;230'</tt></li>
<li>Instead of <tt>'THEN'</tt> the keyword <tt>'GOTO'</tt> can be used without changing the meaning. E.g.: <tt>'IF&nbsp;D=1&nbsp;GOTO&nbsp;240'</tt></li>
<li>Instead of <tt>'THEN'</tt> the keyword <tt>'GOSUB'</tt> can be used. E.g.: <tt>'IF&nbsp;E=1&nbsp;GOSUB&nbsp;250'</tt> is executed as <tt>'IF&nbsp;E=1&nbsp;THEN&nbsp;GOSUB&nbsp;250'</tt></li>
</ul><p></p></div>
</td>
<td>
<table width="10">
</table>
</td>
<td>
<table cellspacing="0" cellpadding="0" border="0">
<tbody>
<tr valign="top" align="center">
<td><a href="../images/bas7_0.png"><img src="../images/bas7_0m.png" border="0" /></a><br />Bas7 interpreter starting info</td></tr>
<tr height="20"><td></td></tr>
<tr valign="top" align="center">
<td><a href="../images/bas7_1.png"><img src="../images/bas7_1m.png" border="0" /></a><br />Bas7 interpreter executing hamurabi</td></tr>
<tr height="20"><td></td></tr>
<tr valign="top" align="center">
<td><a href="../images/bas7_2.png"><img src="../images/bas7_2m.png" border="0" /></a><br />Bas7 interpreter executing startrek</td></tr>
<tr height="20"><td></td></tr>
</tbody>
</table>
</td>
</tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td><img src="../images/bas7.png" border="0" /></td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../scrshots/ftpserv.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/gkbd.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
