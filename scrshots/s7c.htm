<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Program: Compiler</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Programs</big></a>
<a class="menu" href="panic.htm">Panic</a>
<a class="menu" href="mandelbr.htm">Mandelbr</a>
<a class="menu" href="planets.htm">Planets</a>
<a class="menu" href="comanche.htm">Comanche</a>
<a class="menu" href="calc7.htm">Calc7</a>
<a class="menu" href="savehd7.htm">Savehd7</a>
<a class="menu" href="s7c.htm">Compiler</a>
<a class="menu" href="db7.htm">Db7</a>
<a class="menu" href="ide7.htm">Ide7</a>
<a class="menu" href="klondike.htm">Klondike</a>
<a class="menu" href="dnafight.htm">Dnafight</a>
<a class="menu" href="sudoku7.htm">Sudoku</a>
<a class="menu" href="wator.htm">Wator</a>
<a class="menu" href="tar7.htm">Tar7</a>
<a class="menu" href="sydir7.htm">Sydir7</a>
<a class="menu" href="ftp7.htm">Ftp7</a>
<a class="menu" href="castle.htm">Castle</a>
<a class="menu" href="tetg.htm">Tetris</a>
<a class="menu" href="make7.htm">Make7</a>
<a class="menu" href="ftpserv.htm">Ftpserv</a>
<a class="menu" href="bas7.htm">Basic</a>
<a class="menu" href="gkbd.htm">Gkbd</a>
<a class="menu" href="pairs.htm">Pairs</a>
<a class="menu" href="shisen.htm">Shisen</a>
<a class="menu" href="eliza.htm">Eliza</a>
<a class="menu" href="../algorith/graphic.htm#dragon_curve">Dragon</a>
<a class="menu" href="../images/testfont1.png">Fonts</a>
<a class="menu" href="toutf8.htm">Toutf8</a>
<a class="menu" href="lander.htm">Lander</a>
<a class="menu" href="wiz.htm">Wiz</a>
<a class="menu" href="startrek.htm">Startrek</a>
<a class="menu" href="../images/dirx1.png">Directory</a>
<a class="menu" href="../algorith/graphic.htm#bifurk">Bifurc</a>
<a class="menu" href="mahjong.htm">Mahjong</a>
<a class="menu" href="../images/rever1.png">Reversi</a>
<a class="menu" href="sokoban.htm">Sokoban</a>
<a class="menu" href="../algorith/graphic.htm#cellauto">Cellauto</a>
<a class="menu" href="sl.htm">Life</a>
<a class="menu" href="../images/snake1.png">Snake</a>
<a class="menu" href="self.htm">Self</a>
<a class="menu" href="../images/carddemo1.png">Cards</a>
<a class="menu" href="../images/ms1.png">Mines</a>
<a class="menu" href="../images/pac1.png">Pacman</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Programs</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Compiler</big></b></td>
<td align="right"><a class="link" href="../prg/s7c.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../scrshots/savehd7.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/db7.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<br />
<table cellspacing="0" border="0">
<tr valign="top">
<td align="left" width="100%">

<p>
S7c is the Seed7 compiler.
</p><p>
S7c is written in Seed7 and compiles Seed7 programs to efficient machine code.
It uses the analyze phase of the interpreter to convert a program from Seed7
to call-code. Call-code consists of values and function calls and is just handled
in memory. Then it uses the call-code to generate a corresponding C program.
This C program is compiled and linked with the Seed7 runtime library afterwards.
The intermediate C code is viewed as portable assembler. It is not intended for
human readers.
</p>

<div><a name="usage"><h3>Usage</h3></a>
<p>
</p><pre class="indent">
s7c [ options ] source
</pre><p>
Possible options are
</p><ul>
<li><b>-?</b>   Write Seed7 compiler usage.</li>
<li><a name="compiler_option-O"><b>-O</b></a><span class="keywd">n</span></a>  Tell the C compiler to optimize with level <span class="keywd">n</span> (<span class="keywd">n</span> is between 1 and 3).</li>
<li><b>-O</b>   Equivalent to <b>-O1</b></li>
<li><a name="compiler_option-S"><b>-S</b></a>   Specify the stack size of the executable (e.g.: -S 16777216).</li>
<li><a name="compiler_option-b"><b>-b</b></a>   Specify the directory of the Seed7 runtime libraries (e.g.: <b>-b</b><tt> <span class="lib">../bin</span></tt>).</li>
<li><a name="compiler_option-c"><b>-c</b></a>   Specify configuration (C compiler, etc.) to be used (e.g.: <b>-c</b><tt> <span class="lib">emcc</span></tt>).</li>
<li><a name="compiler_option-e"><b>-e</b></a>   Generate code which sends a signal, if an uncaught exception occurs.
     This option allows debuggers to handle uncaught Seed7 exceptions.</li>
<li><a name="compiler_option-flto"><b>-flto</b></a> Enable <a class="link" href="../faq.htm#lto">link time optimization</a>.</li>
<li><a name="compiler_option-g"><b>-g</b></a>   Tell the C compiler to generate an executable with debug information.
     This way the debugger will refer to Seed7 source files and line numbers.
     To generate debug information which refers to the temporary C program
     the option <b>-g-debug_c</b> can be used.</li>
<li><a name="compiler_option-l"><b>-l</b></a>   Add a directory to the include library search path (e.g.: <b>-l</b><tt> <span class="lib">../lib</span></tt>).</li>
<li><a name="compiler_option-oc"><b>-oc</b><span class="keywd">n</span></a> Optimize generated C code with level <span class="keywd">n</span>. E.g.: <b>-oc3</b>
     The level <span class="keywd">n</span> is a digit between 0 and 3:<ul>
       <li><a name="compiler_option-oc0"><b>0</b></a> Do no optimizations with constants.</li>
       <li><a name="compiler_option-oc1"><b>1</b></a> Use literals and named constants to simplify expressions (default).</li>
       <li><a name="compiler_option-oc2"><b>2</b></a> Evaluate constant parameter expressions to simplify expressions.</li>
       <li><a name="compiler_option-oc3"><b>3</b></a> Like <b>-oc2</b> and additionally evaluate all constant expressions.</li></ul></li>
<li><a name="compiler_option-p"><b>-p</b></a>   Activate simple function profiling.</li>
<li><a name="compiler_option-s"><b>-s</b><span class="keywd">x</span></a>  <a class="link" href="../manual/errors.htm#Suppressing_exception_checks">Suppress checks</a> specified with <span class="keywd">x</span>. E.g.: <b>-sr</b> or <b>-sro</b>
     The checks <span class="keywd">x</span> are specified with letters from the following list:<ul>
       <li><b>d</b> Suppress the generation of checks for <a class="link" href="../manual/errors.htm#NUMERIC_ERROR">integer division by zero</a>.</li>
       <li><b>i</b> Suppress the generation of <a class="link" href="../manual/errors.htm#INDEX_ERROR">index checks</a> (e.g. string, array).</li>
       <li><b>o</b> Suppress the generation of <a class="link" href="../manual/errors.htm#OVERFLOW_ERROR">integer overflow</a> checks.</li>
       <li><b>r</b> Suppress the generation of range checks.</li></ul></li>
<li><a name="compiler_option-t"><b>-t</b><span class="keywd">x</span></a>  Set runtime trace level to <span class="keywd">x</span>. Where <span class="keywd">x</span> is a string consisting
     of the following characters:<ul>
       <li><b>e</b> Trace exceptions and handlers</li>
       <li><b>f</b> Trace functions</li>
       <li><b>s</b> Trace signals</li></ul></li>
<li><a name="compiler_option-w"><b>-w</b><span class="keywd">n</span></a>  Specify warning level n. E.g.: <b>-w2</b>
     The level <span class="keywd">n</span> is a digit between 0 and 2:<ul>
       <li><b>0</b> Omit warnings.</li>
       <li><b>1</b> Write normal warnings (default).</li>
       <li><b>2</b> Write warnings for raised exceptions.</li></ul></li>
</ul></div>

<div><a name="profiling"><h3>Profiling</h3></a>
<p>
The Seed7 compiler supports simple function profiling. The program must be
compiled with the option <a class="link" href="#compiler_option-p"><tt><b>-p</b></tt></a>. If the program is executed it writes profiling
data to the file <tt>profile_out</tt>, when it is finished. The file "profile_out"
contains a tab-separated table with microseconds, number of calls, place
of the function and function name.
</p</div>

<div><a name="reflection"><h3>Reflection</h3></a>
<p>
The Seed7 reflection provides access to the internal data structures of the interpreter.
Specially the call-code of a program can be accessed with the reflection.
This makes it suitable for compiling seed7.
There are several types on which the reflection is based:
</p><dl>
<dt><tt><a class="type" href="../manual/types.htm#program">program</a></tt></dt>
    <dd>Describes a program and is the entry point to the reflection for the compiler.</dd>
<dt><tt><a class="type" href="../manual/types.htm#reference">reference</a></tt></dt>
    <dd>Reference to an object (plain old data types count also as object here).</dd>
<dt><tt><a class="type" href="../manual/types.htm#ref_list">ref_list</a></tt></dt>
    <dd>List of referenced objects.</dd>
<dt><tt><a class="type" href="../manual/types.htm#type">type</a></tt></dt>
    <dd>Describes a type (the types of the compiled program have their own type namespace).</dd>
</dl><p>
The definitions for <tt><a class="type" href="../manual/types.htm#reference">reference</a></tt>, <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt> and
<tt><a class="type" href="../manual/types.htm#type">type</a></tt> are in the
<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a> library.
The advanced features of the reflection and the definition for the type <tt><a class="type" href="../manual/types.htm#program">program</a></tt>
can be found in the
<a class="lib" href="../libraries/progs.htm">progs.s7i</a> library.
</p></div>

<div><a name="back_ends"><h3>C compiler back end</h3></a>
<p>
The Seed7 compiler is capable to use different C compilers and C runtime libraries
as back end. The program chkccomp.c <a class="link" href="../faq.htm#cmd_config_value">determines the properties</a> of the back end.
This is done when Seed7 interpreter and runtime library are compiled.
The properties of the back end are available in Seed7 via the library <a class="lib" href="../libraries/cc_conf.htm">cc_conf.s7i</a>.
This library defines <tt><a class="func" href="../libraries/cc_conf.htm#ccConf">ccConf</a></tt>, which is a constant of type <tt><a class="type" href="../libraries/cc_conf.htm#ccConfigType">ccConfigType</a></tt>.
The type <tt><a class="type" href="../libraries/cc_conf.htm#ccConfigType">ccConfigType</a></tt> contains elements to descibe the properties:
</p><table border="1" cellspacing="0" cellpadding="5">
<tr><th>Type</th>
    <th>Name</th>
    <th>Description</th></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#WITH_STRI_CAPACITY">WITH_STRI_CAPACITY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the Seed7 runtime library uses strings with capacity.
        The capacity of a string can be larger than its size.
        Strings with capacity can be enlarged without calling realloc().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#ALLOW_STRITYPE_SLICES">ALLOW_STRITYPE_SLICES</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the actual characters of a string can be stored elsewhere.
        This allows string slices without the need to copy characters.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#ALLOW_BSTRITYPE_SLICES">ALLOW_BSTRITYPE_SLICES</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the actual characters of a bstring can be stored elsewhere.
        This allows bstring slices without the need to copy characters.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#RSHIFT_DOES_SIGN_EXTEND">RSHIFT_DOES_SIGN_EXTEND</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the sign of negative signed integers is preserved with a
        right shift. The C standard specifies that the right shift of signed integers is
        implementation defined, if the shifted values are negative.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#TWOS_COMPLEMENT_INTTYPE">TWOS_COMPLEMENT_INTTYPE</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if signed integers are represented as twos complement
        numbers. This allows some simplified range checks in compiled
        programs.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#LITTLE_ENDIAN_INTTYPE">LITTLE_ENDIAN_INTTYPE</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the byte ordering of integers is little endian.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FLOAT_COMPARISON_OKAY">FLOAT_COMPARISON_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if <tt><a class="type" href="../manual/types.htm#float">float</a></tt> comparisons with <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt> and negative zero work okay.
        A comparison between <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt> and any other value should return <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt>.
        Negative zero should be considered as identical to positive zero.
        Comparison refers to comparisons with  <tt><span class="op">==</span></tt>  <tt><span class="op">&lt;</span></tt>  <tt><span class="op">></span></tt>  <tt><span class="op">&lt;=</span></tt>  or  <tt><span class="op">>=</span></tt> .
        If <a class="link" href="../libraries/cc_conf.htm#FLOAT_COMPARISON_OKAY">FLOAT_COMPARISON_OKAY</a> is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltEq(), fltLt(), fltGt(), fltLe()
        and fltGe() should be used to do comparisons of <tt><a class="type" href="../manual/types.htm#float">float</a></tt> values.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#POW_FUNCTION_OKAY">POW_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if pow() works okay for a base of zero, one or <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltPow() should be used instead of pow().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FMOD_FUNCTION_OKAY">FMOD_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if fmod() works okay for <tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt>, <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt> and zero.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltRem() should be used instead of fmod().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#SQRT_FUNCTION_OKAY">SQRT_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if sqrt() works okay for a negative argument.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltSqrt() should be used instead of sqrt().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#EXP_FUNCTION_OKAY">EXP_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if exp() works okay for <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltExp() should be used instead of exp().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#LOG_FUNCTION_OKAY">LOG_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if log() works okay for zero, a negative values and <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltLog() should be used instead of log().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#LOG10_FUNCTION_OKAY">LOG10_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if log10() works okay for zero, a negative values and <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltLog10() should be used instead of log10().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#LOG1P_FUNCTION_OKAY">LOG1P_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if log1p() works okay for -1.0, values < -1.0 and <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltLog1p() should be used instead of log1p().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#LOG2_FUNCTION_OKAY">LOG2_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if log2() works okay for zero, a negative values and <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltLog2() should be used instead of log2().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#LDEXP_FUNCTION_OKAY">LDEXP_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if ldexp() works okay for <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltLdexp() should be used instead of lsexp().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="..//libraries/cc_conf.htm#FREXP_FUNCTION_OKAY">FREXP_FUNCTION_OKAY</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if frexp() works okay for <tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt>, <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt> and subnormal numbers.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> fltDecompose() should be used instead of frexp().</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#HAS_SIGSETJMP">HAS_SIGSETJMP</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the functions sigsetjmp() and siglongjmp() are available.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> the functions setjmp() and longjmp() must be used instead.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#CHECK_INT_DIV_BY_ZERO">CHECK_INT_DIV_BY_ZERO</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt> if integer divisions must be checked for a division by zero.
        This applies to the division operations <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> and <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a></tt>.
        The generated C code should, if a division by zero occurs,
        raise the exception <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> instead of doing the
        illegal divide operation. If <a class="link" href="../libraries/cc_conf.htm#CHECK_INT_DIV_BY_ZERO">CHECK_INT_DIV_BY_ZERO</a> is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt>
        a division by zero always triggers <a class="exception" href="../manual/errors.htm#SIGFPE">SIGFPE</a>. <a class="exception" href="../manual/errors.htm#SIGFPE">SIGFPE</a> is caught
        by the Seed7 run-time library and triggers a <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#CHECK_INT_DIV_ZERO_BY_ZERO">CHECK_INT_DIV_ZERO_BY_ZERO</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt> if the C expression 0/0 might not trigger <a class="exception" href="../manual/errors.htm#SIGFPE">SIGFPE</a>.
        C compilers assume that so called "undefined behavior" will
        not happen. According to the C standard a division by 0
        triggers undefined behavior. This way a C compiler is allowed
        to optimize the expressions 0/0 and 0/variable to 0. Likewise
        the expression variable/variable can be optimized to 1.
        In Seed7 a division by zero is defined behavior, since it
        raises the exception <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>. This configuration
        setting applies to the division operations <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> and <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a></tt>.
        The generated C code should, if a division by zero occurs,
        raise the exception <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> instead of allowing the
        C compiler to do its optimization.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#CHECK_INT_REM_BY_ZERO">CHECK_INT_REM_BY_ZERO</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt> if integer remainder must be checked for a division by zero.
        This applies to the division operations <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a></tt> and <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a></tt>.
        The generated C code should, if a remainder by zero occurs,
        raise the exception <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> instead of doing the
        illegal divide operation. If <a class="link" href="../libraries/cc_conf.htm#CHECK_INT_REM_BY_ZERO">CHECK_INT_REM_BY_ZERO</a> is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt>
        a remainder by zero always triggers <a class="exception" href="../manual/errors.htm#SIGFPE">SIGFPE</a>. <a class="exception" href="../manual/errors.htm#SIGFPE">SIGFPE</a> is caught
        by the Seed7 run-time library and triggers a <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#CHECK_INT_REM_ZERO_BY_ZERO">CHECK_INT_REM_ZERO_BY_ZERO</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt> if the C expression 0%0 might not trigger <a class="exception" href="../manual/errors.htm#SIGFPE">SIGFPE</a>.
        C compilers assume that so called "undefined behavior" will
        not happen. According to the C standard a division by 0
        triggers undefined behavior. This way a C compiler is allowed
        to optimize the expressions 0%0 and 0%variable to 0. Likewise
        the expression variable%variable can be optimized to 0.
        In Seed7 a division by zero is defined behavior, since it
        raises the exception <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>. This configuration
        setting applies to the division operations <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a></tt> and <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a></tt>.
        The generated C code should, if a division by zero occurs,
        raise the exception <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> instead of allowing the
        C compiler to do its optimization.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FLOAT_ZERO_DIV_ERROR">FLOAT_ZERO_DIV_ERROR</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C compiler classifies a floating point division by zero as fatal error.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#CHECK_FLOAT_DIV_BY_ZERO">CHECK_FLOAT_DIV_BY_ZERO</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if a C floating point division by zero does not return the IEEE 754
        values <tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt>, -<tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt> or <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt>. In this case the interpreter checks all
        float divisions and returns the correct result. Additionally the Seed7 to C
        compiler generates C code, which checks all float divisions ( <tt><a class="op" href="../libraries/float.htm#(in_float)/(in_float)">/</a></tt> and <tt><a class="op" href="../libraries/float.htm#(inout_float)/:=(in_float)">/:=</a></tt> ) for
        division by zero. The generated C code should return <tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt>,
        -<tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt> or <tt><a class="var" href="../libraries/float.htm#NaN">NaN</a></tt> instead of doing the divide operation.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#HAS_EXP2">HAS_EXP2</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C function exp2() is present.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#HAS_EXP10">HAS_EXP10</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C function exp10() is present.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#HAS_EXPM1">HAS_EXPM1</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C function expm1() is present.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#HAS_CBRT">HAS_CBRT</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C function cbrt() is present.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#LIMITED_CSTRI_LITERAL_LEN">LIMITED_CSTRI_LITERAL_LEN</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C compiler limits the length of string literals.
        Some C compilers limit the maximum string literal length.
        There are limits of 2,048 bytes and 16,384 (16K) bytes.
        The actual limit is not interesting, but the fact that
        a limit exists or does not exist.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#SWITCH_WORKS_FOR_INT64TYPE">SWITCH_WORKS_FOR_INT64TYPE</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if switch statements work with 64-bit values.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#STMT_BLOCK_IN_PARENTHESES_OK">STMT_BLOCK_IN_PARENTHESES_OK</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if a compound statement is allowed in a parentesized expression.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#CC_SOURCE_UTF8">CC_SOURCE_UTF8</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the C compiler accepts UTF-8 encoded file names in #line directives.
        The file names from #line directives are used by the debugger to
        allow source code debugging.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#USE_WMAIN">USE_WMAIN</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the main function is named <tt>wmain</tt>.
        This is a way to support Unicode command line
        arguments under Windows. An alternate way to
        support Unicode command line arguments under
        Windows uses the functions getUtf16Argv() and
        freeUtf16Argv() (both defined in "cmd_win.c").</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#USE_WINMAIN">USE_WINMAIN</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the main function is named <tt>WinMain</tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#USE_DO_EXIT">USE_DO_EXIT</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the main function must be terminated with <tt>doExit()</tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#boolean">boolean</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FLOATTYPE_DOUBLE">FLOATTYPE_DOUBLE</a></td>
    <td><tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the type <tt><a class="type" href="../manual/ffi.htm#floatType">floatType</a></tt> is <tt><span class="type">double</span></tt>.
        If it is <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> <tt><a class="type" href="../manual/ffi.htm#floatType">floatType</a></tt> is <tt><span class="type">float</span></tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INTTYPE_SIZE">INTTYPE_SIZE</a></td>
    <td>Size of the type <tt><a class="type" href="../manual/ffi.htm#intType">intType</a></tt> in bits (either 32 or 64).</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FLOATTYPE_SIZE">FLOATTYPE_SIZE</a></td>
    <td>Size of the type <tt><a class="type" href="../manual/ffi.htm#floatType">floatType</a></tt> in bits (either FLOAT_SIZE or DOUBLE_SIZE).</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#POINTER_SIZE">POINTER_SIZE</a></td>
    <td>Size of a pointer in bits.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#GENERIC_SIZE">GENERIC_SIZE</a></td>
    <td>The maximum of INTTYPE_SIZE, FLOATTYPE_SIZE and POINTER_SIZE.
        This is also the size in bits of the types rtlValueunion,
        rtlObjecttype and generictype (defined in data_rtl.h).</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT_SIZE">INT_SIZE</a></td>
    <td>Size of the type <tt><span class="type">int</span></tt> in bits.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT_MIN">INT_MIN</a></td>
    <td> Minimum value of the type <tt><span class="type">int</span></tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT_MAX">INT_MAX</a></td>
    <td>Maximum value of the type <tt><span class="type">int</span></tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#LONG_SIZE">LONG_SIZE</a></td>
    <td>Size of the type <tt><span class="type">long</span></tt> in bits.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FLOATTYPE_MANTISSA_BITS">FLOATTYPE_MANTISSA_BITS</a></td>
    <td>Number of mantissa bits in the binary <tt><a class="type" href="../manual/ffi.htm#floatType">floatType</a></tt> representation.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#FLOATTYPE_EXPONENT_OFFSET">FLOATTYPE_EXPONENT_OFFSET</a></td>
    <td>Exponent offset in the binary <tt><a class="type" href="../manual/ffi.htm#floatType">floatType</a></tt> representation. To get the actual exponent the offset must be subtracted.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT_RANGE_IN_FLOATTYPE_MAX">INT_RANGE_IN_FLOATTYPE_MAX</a></td>
    <td>Maximum from the continuous range of integers that map to floats.
        All integers from -<a class="link" href="../libraries/cc_conf.htm#INT_RANGE_IN_FLOATTYPE_MAX">INT_RANGE_IN_FLOATTYPE_MAX</a> to
        <a class="link" href="../libraries/cc_conf.htm#INT_RANGE_IN_FLOATTYPE_MAX">INT_RANGE_IN_FLOATTYPE_MAX</a> can be converted to <tt><a class="type" href="../manual/ffi.htm#floatType">floatType</a></tt>
        and back to <tt><a class="type" href="../manual/ffi.htm#intType">intType</a></tt> without loss.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#MINIMUM_TRUNC_ARGUMENT">MINIMUM_TRUNC_ARGUMENT</a></td>
    <td>Minimum value that <tt><a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>()</tt> or <tt><a class="func" href="../libraries/float.htm#round(in_float)">round</a>()</tt> can convert.
        Values below <a class="link" href="../libraries/cc_conf.htm#MINIMUM_TRUNC_ARGUMENT">MINIMUM_TRUNC_ARGUMENT</a> raise <a class="exception" href="../manual/errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
        if <tt><a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>()</tt> or <tt><a class="func" href="../libraries/float.htm#round(in_float)">round</a>()</tt> is applied to them.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#MAXIMUM_TRUNC_ARGUMENT">MAXIMUM_TRUNC_ARGUMENT</a></td>
    <td>Maximum value that <tt><a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>()</tt> or <tt><a class="func" href="../libraries/float.htm#round(in_float)">round</a>()</tt> can convert.
        Values above <a class="link" href="../libraries/cc_conf.htm#MAXIMUM_TRUNC_ARGUMENT">MAXIMUM_TRUNC_ARGUMENT</a> raise <a class="exception" href="../manual/errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
        if <tt><a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>()</tt> or <tt><a class="func" href="../libraries/float.htm#round(in_float)">round</a>()</tt> is applied to them.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#PIXEL_RED_MASK">PIXEL_RED_MASK</a></td>
    <td>Mask for the red color in a pixel. 0 if there is no mapping and drwRgbColor() should be used.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#PIXEL_GREEN_MASK">PIXEL_GREEN_MASK</a></td>
    <td>Mask for the green color in a pixel. 0 if there is no mapping and drwRgbColor() should be used.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#PIXEL_BLUE_MASK">PIXEL_BLUE_MASK</a></td>
    <td>Mask for the blue color in a pixel. 0 if there is no mapping and drwRgbColor() should be used.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#RGB_TO_PIXEL_FLAG_NAME">RGB_TO_PIXEL_FLAG_NAME</a></td>
    <td>Name of the variable deciding between macro and drwRgbColor(). "" if no variable needs to be checked.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#RAND_MULTIPLIER">RAND_MULTIPLIER</a></td>
    <td>Multiplier for the linear congruential generator. A well known pseudorandom number generator algorithm.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#integer">integer</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#RAND_INCREMENT">RAND_INCREMENT</a></td>
    <td>Increment for the linear congruential generator. A well known pseudorandom number generator algorithm.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#BOOLTYPE">BOOLTYPE</a></td>
    <td>Name of a type for the boolean values 0 and 1.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#boolType">boolType</a></tt> with BOOLTYPE.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT32TYPE">INT32TYPE</a></td>
    <td>Name of a signed integer type that is 32 bits wide.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#int32Type">int32Type</a></tt> with INT32TYPE.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#UINT32TYPE">UINT32TYPE</a></td>
    <td>Name of an unsigned integer type that is 32 bits wide.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#uint32Type">uint32Type</a></tt> with UINT32TYPE.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT64TYPE">INT64TYPE</a></td>
    <td>Name of a signed integer type that is 64 bits wide.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#int64Type">int64Type</a></tt> with INT64TYPE.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#UINT64TYPE">UINT64TYPE</a></td>
    <td>Name of an unsigned integer type that is 64 bits wide.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#uint64Type">uint64Type</a></tt> with UINT64TYPE.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT128TYPE">INT128TYPE</a></td>
    <td>Name of a signed integer type that is 128 bits wide.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#int128Type">int128Type</a></tt> with INT128TYPE. Empty string if
        there is no 128-bit signed integer type.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#UINT128TYPE">UINT128TYPE</a></td>
    <td>Name of an unsigned integer type that is 128 bits wide.
        The runtime library and the compiler use a typedef to define
        the type <tt><a class="type" href="../manual/ffi.htm#uint128Type">uint128Type</a></tt> with UINT128TYPE. Empty string if
        there is no 128-bit unsigned integer type.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT32TYPE_LITERAL_SUFFIX">INT32TYPE_LITERAL_SUFFIX</a></td>
    <td>The suffix used by the literals of the type <tt><a class="type" href="../manual/ffi.htm#int32Type">int32Type</a></tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#INT64TYPE_LITERAL_SUFFIX">INT64TYPE_LITERAL_SUFFIX</a></td>
    <td>The suffix used by the literals of the type <tt><a class="type" href="../manual/ffi.htm#int64Type">int64Type</a></tt>.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#MACRO_DEFS">MACRO_DEFS</a></td>
    <td>Definition of several macros (likely, unlikely, noreturn).</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#OVERFLOW_SIGNAL">OVERFLOW_SIGNAL</a></td>
    <td>Name of the signal that is raised if an integer overflow
        occurs. Empty string if integer overflow does not raise
        a signal.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#BUILTIN_ADD_OVERFLOW">BUILTIN_ADD_OVERFLOW</a></td>
    <td>Name of a C compiler builtin function to add with overflow check.
        Empty string if there is no such builtin function.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#BUILTIN_SUB_OVERFLOW">BUILTIN_SUB_OVERFLOW</a></td>
    <td>Name of a C compiler builtin function to subtract with overflow check.
        Empty string if there is no such builtin function.</td></tr>
<tr><td><tt><a class="type" href="../manual/types.htm#string">string</a></tt></td>
    <td><a class="link" href="../libraries/cc_conf.htm#BUILTIN_MULT_OVERFLOW">BUILTIN_MULT_OVERFLOW</a></td>
    <td>Name of a C compiler builtin function to multiply with overflow check.
        Empty string if there is no such builtin function.</td></tr>
</table><p>
</p></div>

<div><a name="optimizations"><h3>Optimizations</h3></a>
<p>
The Seed7 compiler supports low level optimizations (option <a class="link" href="#compiler_option-O"><b>-O</b></a>),
which are done by the C compiler. Additionally s7c does several
high level optimizations (option <a class="link" href="#compiler_option-oc"><b>-oc</b><span class="keywd">n</span></a>) that the C compiler cannot do,
because C compilers don't know Seed7.
</p></div>

<div><h4>Use special case functions</h4>
<p>
For certain constant values some function calls are replaced by corresponding calls of special case functions:
</p><ul>
<li><p>The <tt><a class="type" href="../manual/types.htm#string">string</a></tt> comparisons <tt><a class="func" href="../libraries/string.htm#(in_string)=(in_string)">=</a></tt> and <tt><a class="func" href="../libraries/string.htm#(in_string)<>(in_string)">&lt;></a></tt>
    (primitive actions <tt>'STR_EQ'</tt> and <tt>'STR_NE'</tt>) are simplified if
    one or both parameters are constant strings.</p></li>
<li><p>The <tt><a class="type" href="../manual/types.htm#string">string</a></tt> indexing like <tt>stri<a class="keywd" href="../libraries/string.htm#(in_string)[(in_integer)]">[</a>num]</tt>
    (primitive action <tt>'STR_IDX'</tt>) is simplified if
    the string or the index are constant.</p></li>
<li><p>The <tt><a class="type" href="../manual/types.htm#array">array</a></tt> indexing like <tt>anArray<a class="keywd" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>num]</tt>
    (primitive action <tt>'ARR_IDX'</tt>) is simplified if
    the array or the index are constant.</p></li>
<li><p>Searches and splits with string constant of length 1 are replaced by
    equivalent functions which use a character instead:
    </p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Function call</th>
        <th>replaced by</th>
        <th>C function</th>
        <th>replacement C function</th></tr>
    <tr><td><tt><a class="func" href="../libraries/string.htm#pos(in_string,in_string)">pos</a>(stri, <span class="stri">"a"</span>)</tt></td>
        <td><tt><a class="func" href="../libraries/string.htm#pos(in_string,in_char)">pos</a>(stri, <span class="stri">'a'</span>)</tt></td>
        <td><tt>'strPos'</tt></td>
        <td><tt>'strChPos'</tt></td></tr>
    <tr><td><tt><a class="func" href="../libraries/string.htm#rpos(in_string,in_string)">rpos</a>(stri, <span class="stri">"a"</span>)</tt></td>
        <td><tt><a class="func" href="../libraries/string.htm#rpos(in_string,in_char)">rpos</a>(stri, <span class="stri">'a'</span>)</tt></td>
        <td><tt>'strRpos'</tt></td>
        <td><tt>'strRChPos'</tt></td></tr>
    <tr><td><tt><a class="func" href="../libraries/string.htm#pos(in_string,in_string,__in_integer)">pos</a>(stri, <span class="stri">"a"</span>, start)</tt></td>
        <td><tt><a class="func" href="../libraries/string.htm#pos(in_string,in_char,__in_integer)">pos</a>(stri, <span class="stri">'a'</span>, start)</tt></td>
        <td><tt>'strIpos'</tt></td>
        <td><tt>'strChIpos'</tt></td></tr>
    <tr><td><tt><a class="func" href="../libraries/string.htm#rpos(in_string,in_string,__in_integer)">rpos</a>(stri, <span class="stri">"a"</span>, start)</tt></td>
        <td><tt><a class="func" href="../libraries/string.htm#rpos(in_string,in_char,__in_integer)">rpos</a>(stri, <span class="stri">'a'</span>, start)</tt></td>
        <td><tt>'strRIPos'</tt></td>
        <td><tt>'strRChIPos'</tt></td></tr>
    <tr><td><tt><a class="func" href="../libraries/string.htm#replace(in_string,in_string,in_string)">replace</a>(stri, <span class="stri">"a"</span>, repl)</tt></td>
        <td>-</td>
        <td><tt>'strRepl'</tt></td>
        <td><tt>'strChRepl'</tt></td></tr>
    <tr><td><tt><a class="func" href="../libraries/string.htm#replace(in_string,in_string,in_string)">replace</a>(stri, <span class="stri">"a"</span>, <span class="stri">"b"</span>)</tt></td>
        <td>-</td>
        <td><tt>'strRepl'</tt></td>
        <td><tt>'strChChRepl'</tt></td></tr>
    <tr><td><tt>split(stri, <span class="stri">"a"</span>)</tt></td>
        <td><tt>split(stri, <span class="stri">'a'</span>)</tt></td>
        <td><tt>'strSplit'</tt></td>
        <td><tt>'strChSplit'</tt></td></tr>
    <tr><td><tt><span class="stri">"a"</span> <a class="op" href="../libraries/string.htm#(in_string)mult(in_integer)">mult</a> n</tt></td>
        <td>-</td>
        <td><tt>'strMult'</tt></td>
        <td><tt>'strChMult'</tt></td></tr>
    </table></li>
<li><p>Initializations of string variables are optimized if an empty string
    or a string with length 1 is used:
    </p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 variable declaration</th>
        <th>C declaration</th>
        <th>C initialization</th>
        <th>replacement C initialization</th></tr>
    <tr><td><tt><span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;</tt></td>
        <td><tt><a class="type" href="../manual/ffi.htm#striType">striType</a> o_123&#8203;<span class="comment">/*stri*/</span>;</tt></td>
        <td><tt>o_123<span class="comment">/*stri*/</span> = strCreate(<span class="stri">""</span>);</tt></td>
        <td><tt>o_123<span class="comment">/*stri*/</span> = strEmpty(); <span class="comment">/*&nbsp;""&nbsp;*/</span></tt></td></tr>
    <tr><td><tt><span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">"a"</span>;</tt></td>
        <td><tt><a class="type" href="../manual/ffi.htm#striType">striType</a> o_123&#8203;<span class="comment">/*stri*/</span>;</tt></td>
        <td><tt>o_123<span class="comment">/*stri*/</span> = strCreate(<span class="stri">"a"</span>);</tt></td>
        <td><tt>o_123<span class="comment">/*stri*/</span> = chrStr(<span class="stri">'a'</span>); <span class="comment">/*&nbsp;"a"&nbsp;*/</span></tt></td></tr>
    </table></li>
<li><p>The compiler optimizes <tt><a class="type" href="../manual/types.htm#integer">integer</a></tt> divisions in the following way:
    </p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 expression</th>
        <th>C expression</th></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> b</tt></td>
        <td><tt>a/b</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 0</tt></td>
        <td><tt>(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 1</tt></td>
        <td><tt>a</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> -1</tt></td>
        <td><tt>-a</tt></td></tr>
    <tr><td><tt>0 <a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> b</tt></td>
        <td><tt>(b==0?(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0):0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> b</tt></td>
        <td><tt>a%b</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> 0</tt></td>
        <td><tt>(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> 1</tt></td>
        <td><tt>0</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> -1</tt></td>
        <td><tt>0</tt></td></tr>
    <tr><td><tt>0 <a class="keywd" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> b</tt></td>
        <td><tt>(b==0?(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0):0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> b</tt></td>
        <td><tt>(a>0&amp;&amp;b&lt;0 ? (a-1)/b-1 : a&lt;0&amp;&amp;b>0 ? (a+1)/b-1 : a/b)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 0</tt></td>
        <td><tt>(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 1</tt></td>
        <td><tt>a</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> -1</tt></td>
        <td><tt>-a</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 8</tt></td>
        <td><tt>a>>3  or, if >> does not sign extend:  a&lt;0?~(~a>>b):a>>b</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> -8</tt></td>
        <td><tt>-a>>3  or, if >> does not sign extend:  a=-a, a&lt;0?~(~a>>b):a>>b</tt></td></tr>
    <tr><td><tt>0 <a class="keywd" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> b</tt></td>
        <td><tt>(b==0?(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0):0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> b</tt></td>
        <td><tt>(c=a%b, a&lt;0^b&lt;0 &amp;&amp; c!=0 ? c+b : c)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 0</tt></td>
        <td><tt>(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0)</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 1</tt></td>
        <td><tt>0</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> -1</tt></td>
        <td><tt>0</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 8</tt></td>
        <td><tt>a&amp;7</tt></td></tr>
    <tr><td><tt>a <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> -8</tt></td>
        <td><tt>-(-a&amp;7)</tt></td></tr>
    <tr><td><tt>0 <a class="keywd" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> b</tt></td>
        <td><tt>(b==0?(raise_error(<a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>),0):0)</tt></td></tr>
    </table></li>
<li><p>Operations with <tt><a class="type" href="../manual/types.htm#integer">bigInteger</a></tt> values are optimized, if a cheaper function can be used:
    </p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Original expression</th>
        <th>Optimized expression</th>
        <th>Original C function</th>
        <th>Optimized C function</th></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)+(in_bigInteger)">+</a> 0_</tt></td>
        <td><tt>num</tt></td>
        <td><tt>bigAdd</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)+(in_bigInteger)">+</a> 1_</tt></td>
        <td><tt><a class="func" href="../libraries/bigint.htm#succ(in_bigInteger)">succ</a>(num)</tt></td>
        <td><tt>bigAdd</tt></td>
        <td><tt>bigSucc</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)+(in_bigInteger)">+</a> num</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 1</tt></td>
        <td><tt>bigAdd</tt></td>
        <td><tt>bigLShift</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)-(in_bigInteger)">-</a> 1_</tt></td>
        <td><tt><a class="func" href="../libraries/bigint.htm#pred(in_bigInteger)">pred</a>(num)</tt></td>
        <td><tt>bigAdd</tt></td>
        <td><tt>bigPred</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> -8_</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>(num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 3)</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigNegateTemp(<wbr>bigLShift ...</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> -1_</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>num</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigNegate</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> 0_</tt></td>
        <td><tt>0_</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> 1_</tt></td>
        <td><tt>num</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> 2_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 1</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigLShift</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> 8_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 3</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigLShift</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> 2</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigSquare</tt></td></tr>
    <tr><td><tt>-8_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>(num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 3)</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigNegateTemp(<wbr>bigLShift ...</tt></td></tr>
    <tr><td><tt>-1_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>num</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigNegate</tt></td></tr>
    <tr><td><tt>0_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt>0</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>1_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt>num</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>2_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 1</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigLShift</tt></td></tr>
    <tr><td><tt>8_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 3</tt></td>
        <td><tt>bigMult</tt></td>
        <td><tt>bigLShift</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> (-1)</tt></td>
        <td><tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> 0</tt></td>
        <td><tt>1</tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> 1</tt></td>
        <td><tt>num</tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> 2</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a> num</tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>bigSquare</tt></td></tr>
    <tr><td><tt>1_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> num</tt></td>
        <td><tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> for num&lt;0</tt> or <tt>1_</tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>2_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> num</tt></td>
        <td><tt>1_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> num</tt> or <tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> for num&lt;0</tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>bigLog2BaseIPow</tt></td></tr>
    <tr><td><tt>8_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> num</tt></td>
        <td><tt>1_ <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 3 * num</tt> or <tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> for num&lt;0</tt></td>
        <td><tt>bigIPow</tt></td>
        <td><tt>bigLog2BaseIPow</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> -1_</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>num</tt></td>
        <td><tt>bigDiv</tt></td>
        <td><tt>bigNegate</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> 0_</tt></td>
        <td><tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></tt></td>
        <td><tt>bigDiv</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> 1_</tt></td>
        <td><tt>num</tt></td>
        <td><tt>bigDiv</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> -2_</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)>>(in_integer)">>></a> 1</tt></td>
        <td><tt>bigMDiv</tt></td>
        <td><tt>bigRShiftAssign(<wbr>bigNegate ...</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> -1_</tt></td>
        <td><tt><a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>num</tt></td>
        <td><tt>bigMDiv</tt></td>
        <td><tt>bigNegate</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 0_</tt></td>
        <td><tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></tt></td>
        <td><tt>bigMDiv</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 1_</tt></td>
        <td><tt>num</tt></td>
        <td><tt>bigMDiv</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 2_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)>>(in_integer)">>></a> 1</tt></td>
        <td><tt>bigMDiv</tt></td>
        <td><tt>bigRShift</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 8_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)>>(in_integer)">>></a> 3</tt></td>
        <td><tt>bigMDiv</tt></td>
        <td><tt>bigRShift</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> -2_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)+(in_bigInteger)">+</a> ((<a class="keywd" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)>>(in_integer)">>></a> 1) <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 1)</tt></td>
        <td><tt>bigMod</tt></td>
        <td><tt>bigNegateTemp(<wbr>bigLowerBitsTemp(<wbr>bigNegate ...</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> -1_</tt></td>
        <td><tt>0</tt></td>
        <td><tt>bigMod</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> 0_</tt></td>
        <td><tt>raise <a class="exception" href="../manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></tt></td>
        <td><tt>bigMod</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> 1_</tt></td>
        <td><tt>0</tt></td>
        <td><tt>bigMod</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> 2_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)-(in_bigInteger)">-</a> ((num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)>>(in_integer)">>></a> 1) <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 1)</tt></td>
        <td><tt>bigMod</tt></td>
        <td><tt>bigLowerBits</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> 8_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)-(in_bigInteger)">-</a> ((num <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)>>(in_integer)">>></a> 3) <a class="keywd" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> 3)</tt></td>
        <td><tt>bigMod</tt></td>
        <td><tt>bigLowerBits</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)+:=(in_bigInteger)">+:=</a> 0_</tt></td>
        <td><tt>noop</tt></td>
        <td><tt>bigGrow</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)+:=(in_bigInteger)">+:=</a> 1_</tt></td>
        <td><tt><a class="func" href="../libraries/bigint.htm#incr(inout_bigInteger)">incr</a>(num)</tt></td>
        <td><tt>bigGrow</tt></td>
        <td><tt>bigIncr</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)+:=(in_bigInteger)">+:=</a> -1_</tt></td>
        <td><tt><a class="func" href="../libraries/bigint.htm#decr(inout_bigInteger)">decr</a>(num)</tt></td>
        <td><tt>bigGrow</tt></td>
        <td><tt>bigDecr</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)-:=(in_bigInteger)">-:=</a> 0_</tt></td>
        <td><tt>noop</tt></td>
        <td><tt>bigShrink</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)-:=(in_bigInteger)">-:=</a> 1_</tt></td>
        <td><tt><a class="func" href="../libraries/bigint.htm#decr(inout_bigInteger)">decr</a>(num)</tt></td>
        <td><tt>bigShrink</tt></td>
        <td><tt>bigDecr</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)-:=(in_bigInteger)">-:=</a> -1_</tt></td>
        <td><tt><a class="func" href="../libraries/bigint.htm#incr(inout_bigInteger)">incr</a>(num)</tt></td>
        <td><tt>bigShrink</tt></td>
        <td><tt>bigIncr</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)*:=(in_bigInteger)">*:=</a> 0_</tt></td>
        <td><tt>num := 0_</tt></td>
        <td><tt>bigMultAssign</tt></td>
        <td><tt>bigCpy</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)*:=(in_bigInteger)">*:=</a> 1_</tt></td>
        <td><tt>noop</tt></td>
        <td><tt>bigMultAssign</tt></td>
        <td><tt>-</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)*:=(in_bigInteger)">*:=</a> 2_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)<<:=(in_integer)">&lt;&lt;:=</a><tt> 1</tt></td>
        <td><tt>bigMultAssign</tt></td>
        <td><tt>bigLShiftAssign</tt></td></tr>
    <tr><td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)*:=(in_bigInteger)">*:=</a> 4_</tt></td>
        <td><tt>num <a class="keywd" href="../libraries/bigint.htm#(inout_bigInteger)<<:=(in_integer)">&lt;&lt;:=</a><tt> 2</tt></td>
        <td><tt>bigMultAssign</tt></td>
        <td><tt>bigLShiftAssign</tt></td></tr>
    </table></li>
</ul></div>

<div><h4>Manage temporary values</h4>
<p>
A temporary expression which would be freed after the return from a function can be used
by special case functions. That way it is not necessary to free the temporary value afterwards:
</p><table border="1" cellspacing="0" cellpadding="5">
<tr><th>Normal function</th>
    <th>Function using temporary</th>
    <th>Comment</th></tr>
<tr><td><tt>arrHead</tt></td>
    <td><tt>arrHeadTemp</tt></td>
    <td>Splits the array into the head which is returned and an unused part which is freed later.</td></tr>
<tr><td><tt>arrRange</tt></td>
    <td><tt>arrRangeTemp</tt></td>
    <td>Splits the array into the range which is returned and an unused part which is freed later.</td></tr>
<tr><td><tt>arrSubarr</tt></td>
    <td><tt>arrSubarrTemp</tt></td>
    <td>Splits the array into the sub array which is returned and an unused part which is freed later.</td></tr>
<tr><td><tt>arrTail</tt></td>
    <td><tt>arrTailTemp</tt></td>
    <td>Splits the array into the tail which is returned and an unused part which is freed later.</td></tr>
<tr><td><tt>strConcat</tt></td>
    <td><tt>strConcatTemp</tt></td>
    <td>Resizes the temorary and returns it after concatenating the second parameter.</td></tr>
<tr><td><tt>strAppend</tt></td>
    <td><tt>strAppendTemp</tt></td>
    <td>Resizes the temorary and concatenates it to a variable.</td></tr>
<tr><td><tt>strHead</tt></td>
    <td><tt>strHeadTemp</tt></td>
    <td>Resizes the temorary to the requested size and returns it.</td></tr>
<tr><td><tt>strTail</tt></td>
    <td><tt>strTailTemp</tt></td>
    <td>Moves the characters, resizes the temorary to the requested size and returns it.</td></tr>
<tr><td><tt>strUp</tt></td>
    <td><tt>strUpTemp</tt></td>
    <td>Converts the parameter to upper case and returns it.</td></tr>
<tr><td><tt>strLow</tt></td>
    <td><tt>strLowTemp</tt></td>
    <td>Converts the parameter to lower case and returns it.</td></tr>
<tr><td><tt>strLpad0</tt></td>
    <td><tt>strLpad0Temp</tt></td>
    <td>Resizes the temorary, adds leading zeros and returns it.</td></tr>
<tr><td><tt>bigNegate</tt></td>
    <td><tt>bigNegateTemp</tt></td>
    <td>Negates the parameter and returns it.</td></tr>
<tr><td><tt>bigLowerBits</tt></td>
    <td><tt>bigLowerBitsTemp</tt></td>
    <td>Take the lower bits of the parameter and returns it.</td></tr>
<tr><td><tt>bigSucc</tt></td>
    <td><tt>bigSuccTemp</tt></td>
    <td>Increments the parameter and returns it.</td></tr>
<tr><td><tt>bigPred</tt></td>
    <td><tt>bigPredTemp</tt></td>
    <td>Decrements the parameter and returns it.</td></tr>
<tr><td><tt>bigAdd</tt></td>
    <td><tt>bigAddTemp</tt></td>
    <td>Adds a value to the parameter and returns it.</td></tr>
<tr><td><tt>bigSbtr</tt></td>
    <td><tt>bigSbtrTemp</tt></td>
    <td>Subtracts a value from the parameter and returns it.</td></tr>
</table><p></p></div>
</td>
<td>
<table width="10">
</table>
</td>
<td>
<table cellspacing="0" cellpadding="0" border="0">
<tbody>
<tr valign="top" align="center">
<td><a href="../images/s7c_1.png"><img src="../images/s7c_1m.png" width="200" height="200" border="0" /></a><br />Compiling chkint</td></tr>
<tr height="20"><td></td></tr>
<tr valign="top" align="center">
<td><a href="../images/s7c_2.png"><img src="../images/s7c_2m.png" width="200" height="156" border="0" /></a><br />Speed improvement<br />with compiled program</td></tr>
<tr height="20"><td></td></tr>
</tbody>
</table>
</td>
</tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../scrshots/savehd7.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../scrshots/db7.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
