<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Algorithms: Searching</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Algorithms</big></a>
<a class="menu" href="sorting.htm">Sorting</a>
<a class="menu" href="search.htm">Searching</a>
<a class="menu" href="date.htm">Date&nbsp;&&nbsp;Time</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="math.htm">Mathematics</a>
<a class="menu" href="msgdigest.htm">Message&nbsp;digest</a>
<a class="menu" href="graphic.htm">Graphics</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="puzzles.htm">Puzzles</a>
<a class="menu" href="others.htm">Others</a>
</div>
<div class="content">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Algorithms</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Searching</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../algorith/sorting.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/date.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
</p>

<div><a name="binarySearch"><h3>Recursive binary search in an array</h3></a>
<p>
A binary search locates an element in a sorted <a class="type" href="../manual/types.htm#array">array</a> by comparing the
searched <tt>'key'</tt> with the element in the middle of the array. Either the element
is found or the process must be repeated for the first or second half
of the array. The repetition of the search process is done with a
recursive call. The binary search algorithm executes in O(log n) time.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: binarySearch (<span class="keywd">in</span> <span class="type">array elemType</span>: arr, <span class="keywd">in</span> <span class="type">elemType</span>: aKey, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: low, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: high) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> low &lt;= high <span class="keywd">then</span>
      index := (low + high) <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 2;
      <span class="keywd">if</span> aKey &lt; arr[index] <span class="keywd">then</span>
        index := binarySearch(arr, aKey, low, pred(index)); <span class="comment"># search left</span>
      <span class="keywd">elsif</span> aKey > arr[index] <span class="keywd">then</span>
        index := binarySearch(arr, aKey, succ(index), high); <span class="comment"># search right</span>
      <span class="keywd">end if</span>;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: binarySearch (<span class="keywd">in</span> <span class="type">array elemType</span>: arr, <span class="keywd">in</span> <span class="type">elemType</span>: aKey) <span class="keywd">is</span>
  <span class="keywd">return</span> binarySearch(arr, aKey, 1, length(arr));
</pre></div>

<div><a name="binarySearch2"><h3>Iterative binary search in an array</h3></a>
<p>
This algorithm implements <a class="link" href="#binarySearch">binary search</a> without recursive
call. Instead the repetition of the search process is done in a loop.
The binary search algorithm executes in O(log n) time.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: binarySearch2 (<span class="keywd">in</span> <span class="type">array elemType</span>: arr, <span class="keywd">in</span> <span class="type">elemType</span>: aKey) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: low <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: high <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: middle <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    high := length(arr);
    <span class="keywd">while</span> index = 0 <span class="op">and</span> low &lt;= high <span class="keywd">do</span>
      middle := (low + high) <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 2;
      <span class="keywd">if</span> aKey &lt; arr[middle] <span class="keywd">then</span>
        high := pred(middle);
      <span class="keywd">elsif</span> aKey > arr[middle] <span class="keywd">then</span>
        low := succ(middle);
      <span class="keywd">else</span>
        index := middle;
      <span class="keywd">end if</span>;
    <span class="keywd">end while</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="linearSearch"><h3>Linear search in an array</h3></a>
<p>
A linear or sequential search can be used to locate an element in
an unsorted <a class="type" href="../manual/types.htm#array">array</a>. The elements are checked in sequence,
until the desired one is found. The function below returns the
index of the element found. If no element is found it returns 0.
The linear search algorithm executes in O(n) time.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: linearSearch (<span class="keywd">in</span> <span class="type">array elemType</span>: arr, <span class="keywd">in</span> <span class="type">elemType</span>: aKey) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    index := length(arr);
    <span class="keywd">while</span> index >= 1 <span class="op">and</span> arr[index] &lt;> aKey <span class="keywd">do</span>
      decr(index);
    <span class="keywd">end while</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="findMinIndex"><h3>Find the minimum element in an array</h3></a>
<p>
The function below returns the index of the minimum element in
an <a class="type" href="../manual/types.htm#array">array</a>. For an empry array it returns 0. Since it is necessary
to search the whole array it
executes in O(n) time.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: findMinIndex (<span class="keywd">in</span> <span class="type">array elemType</span>: arr) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: minIndex <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">elemType</span>: minValue <span class="keywd">is</span> <span class="type">elemType</span>.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(arr) &lt;> 0 <span class="keywd">then</span>
      minIndex := 1;
      minValue := arr[1];
      <span class="keywd">for</span> index <span class="keywd">range</span> 2 <span class="keywd">to</span> length(arr) <span class="keywd">do</span>
        <span class="keywd">if</span> arr[index] &lt; minValue <span class="keywd">then</span>
          minIndex := index;
          minValue := arr[index];
        <span class="keywd">end if</span>;
      <span class="keywd">end for</span>;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="findMaxIndex"><h3>Find the maximum element in an array</h3></a>
<p>
The function below returns the index of the maximum element in
an <a class="type" href="../manual/types.htm#array">array</a>. For an empry array it returns 0. Since it is necessary
to search the whole array it
executes in O(n) time.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: findMaxIndex (<span class="keywd">in</span> <span class="type">array elemType</span>: arr) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: maxIndex <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">elemType</span>: maxValue <span class="keywd">is</span> <span class="type">elemType</span>.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(arr) &lt;> 0 <span class="keywd">then</span>
      maxIndex := 1;
      maxValue := arr[1];
      <span class="keywd">for</span> index <span class="keywd">range</span> 2 <span class="keywd">to</span> length(arr) <span class="keywd">do</span>
        <span class="keywd">if</span> arr[index] > maxValue <span class="keywd">then</span>
          maxIndex := index;
          maxValue := arr[index];
        <span class="keywd">end if</span>;
      <span class="keywd">end for</span>;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../algorith/sorting.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/date.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
  </body>
</html>
