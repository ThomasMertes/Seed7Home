<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Algorithms: Float</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Algorithms</big></a>
<a class="menu" href="sorting.htm">Sorting</a>
<a class="menu" href="search.htm">Searching</a>
<a class="menu" href="date.htm">Date&nbsp;&&nbsp;Time</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="math.htm">Mathematics</a>
<a class="menu" href="msgdigest.htm">Message&nbsp;digest</a>
<a class="menu" href="graphic.htm">Graphics</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="puzzles.htm">Puzzles</a>
<a class="menu" href="others.htm">Others</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Algorithms</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Float</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/string.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/math.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
The type <tt><a class="type" href="../manual/types.htm#float">float</a></tt> uses IEEE 754 double precision floating point numbers.
The standard defines exactly how floating point numbers are represented.
There is one sign bit 11 exponent bits and 52 fraction bits.
To access the bits of a <tt><a class="type" href="../manual/types.htm#float">float</a></tt> the value must
be converted (with <tt><a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(x)</tt>) to a <tt><a class="type" href="../libraries/bin64.htm">bin64</a></tt> value.
This allows that float functions can be based on manipulating
the binary representation instead of using CPU float instructions.
</p>

<div><a name="fabs"><h3>Absolute value</h3></a>
<p>
The function <tt><a class="func" href="../libraries/float.htm#abs(in_float)">abs</a></tt>
is part of the <span class="stri">"<a class="lib" href="../libraries/float.htm">float.s7i</a>"</span> library.
This function computes the absolute value of a <tt><a class="type" href="../manual/types.htm#float">float</a></tt>
by clearing the sign bit.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bin64.htm">bin64.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#float">float</a>: fabs (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: number) <span class="keywd">is</span>
  <span class="keywd">return</span> <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(number) &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7fffffffffffffff));
</pre></div>

<div><a name="decompose"><h3>Decompose float into fraction and exponent</h3></a>
<p>
The function <tt><a class="func" href="../libraries/float.htm#decompose(in_float)">decompose</a></tt>
is part of the <span class="stri">"<a class="lib" href="../libraries/float.htm">float.s7i</a>"</span> library.
This function decomposes a <tt><a class="type" href="../manual/types.htm#float">float</a></tt>
into a normalized fraction and an integral exponent for 2.
If the argument is 0.0, -0.0, Infinity, -Infinity or NaN the
fraction is set to the argument and the exponent is set to 0.
For all other arguments the fraction is set to an absolute value
between 0.5(included) and 1.0(excluded).
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bin64.htm">bin64.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <span class="type">floatElements</span>: decompose (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: number) <span class="keywd">is</span> func

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">floatElements</span>: elements <span class="keywd">is</span> <span class="type">floatElements</span>.value;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#float">float</a>: twoPower64 <span class="keywd">is</span> 2.0 ** 64;
    <span class="keywd">var</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: binNumber <span class="keywd">is</span> <a class="type" href="../libraries/bin64.htm">bin64</a>.value;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: exponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    binNumber :=  <a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(number);
    exponent := <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(binNumber <a class="keywd" href="../libraries/bin64.htm#(in_bin64)>>(in_integer)">&gt;&gt;</a> DBL_FRACBITS &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7ff));
    <span class="keywd">if</span> exponent = 0 <span class="keywd">then</span>
      <span class="keywd">if</span> number &lt;> 0.0 <span class="keywd">then</span>
        elements := decompose(number * twoPower64);
        elements.exponent -:= 64;
      <span class="keywd">else</span>
        elements.fraction := number;
      <span class="keywd">end if</span>;
    <span class="keywd">elsif</span> exponent = 16#7ff <span class="keywd">then</span>
      elements.fraction := number;
    <span class="keywd">else</span>
      elements.fraction := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#800fffffffffffff_) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#3fe0000000000000));
      elements.exponent := exponent - 16#3fe;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="ldexp"><h3>Multiply or divide with a power of two</h3></a>
<p>
The type <tt><a class="type" href="../manual/types.htm#float">float</a></tt> defines a shift operator which
can be called with <tt>'number <a class="keywd" href="../libraries/float.htm#(in_float)<<(in_integer)">&lt;&lt;</a> shift'</tt>.
The function below shows how the shift operator for float works.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bin64.htm">bin64.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: DBL_FRACBITS <span class="keywd">is</span> 52;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: DBL_EXPONENT_BIAS <span class="keywd">is</span> 1023;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: DBL_EXPONENT_MAX <span class="keywd">is</span> 1023;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#float">float</a>: ldexp (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: number, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: exp) <span class="keywd">is func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#float">float</a>: res <span class="keywd">is</span> 0.0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: oldexp <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: newexp <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: binNumber <span class="keywd">is</span> <a class="type" href="../libraries/bin64.htm">bin64</a>.value;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: intNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: sign <span class="keywd">is</span> <a class="type" href="../libraries/bin64.htm">bin64</a>.value;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#float">float</a>: factor <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    binNumber := <a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(number);
    oldexp := <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(binNumber <a class="keywd" href="../libraries/bin64.htm#(in_bin64)>>(in_integer)">&gt;&gt;</a> DBL_FRACBITS &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7ff));
    <span class="keywd">if</span> number = 0.0 <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> exp = 0 <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> oldexp = 16#7ff <span class="keywd">then</span>
      <span class="comment"># For zero, Infinity and NaN, or if there is no change return number.</span>
      res := number;
    <span class="keywd">elsif</span> exp >= 16#7fe + DBL_FRACBITS <span class="keywd">then</span>
      <span class="comment"># The result exponent is not representable: Overflow</span>
      <span class="comment"># Return infinite with original sign.</span>
      res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#8000000000000000_) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7ff0000000000000));
    <span class="keywd">else</span>
      <span class="comment"># Compute new exponent and check for over- / underflow.</span>
      newexp := oldexp + exp;
      <span class="keywd">if</span> newexp &lt;= 0 <span class="keywd">then</span>
        <span class="comment"># The result is denormal or there is an underflow.</span>
        <span class="keywd">if</span> newexp &lt; -DBL_FRACBITS <span class="keywd">then</span>
          <span class="comment"># Underflow: Return zero with original sign.</span>
          res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#8000000000000000_));
        <span class="keywd">elsif</span> oldexp = 0 <span class="keywd">then</span>
          <span class="comment"># Number is denormal and the result stays denormal.</span>
          sign := binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#8000000000000000_);
          intNumber := <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#000fffffffffffff));
          <span class="comment"># Exact middle values are rounded to even.</span>
          <span class="keywd">if</span> odd(intNumber <a class="keywd" href="../libraries/integer.htm#(in_integer)>>(in_integer)">&gt;&gt;</a> -newexp) <span class="keywd">then</span>
            res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(sign | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>((intNumber + (1 <a class="keywd" href="../libraries/integer.htm#(in_integer)<<(in_integer)">&lt;&lt;</a> (-1 - newexp))) <a class="keywd" href="../libraries/integer.htm#(in_integer)>>(in_integer)">&gt;&gt;</a> -newexp));
          <span class="keywd">else</span>
            res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(sign | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>((intNumber + (1 <a class="keywd" href="../libraries/integer.htm#(in_integer)<<(in_integer)">&lt;&lt;</a> (-1 - newexp)) - 1) <a class="keywd" href="../libraries/integer.htm#(in_integer)>>(in_integer)">&gt;&gt;</a> -newexp));
          <span class="keywd">end if</span>;
        <span class="keywd">else</span>
          <span class="comment"># Number is normal and the result becomes denormal.</span>
          sign := binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#8000000000000000_);
          intNumber := <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#000fffffffffffff) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#0010000000000000));
          <span class="comment"># Exact middle values are rounded to even.</span>
          <span class="keywd">if</span> odd(intNumber <a class="keywd" href="../libraries/integer.htm#(in_integer)>>(in_integer)">&gt;&gt;</a> (1 - newexp)) <span class="keywd">then</span>
            res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(sign | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>((intNumber + (1 <a class="keywd" href="../libraries/integer.htm#(in_integer)<<(in_integer)">&lt;&lt;</a> -newexp)) <a class="keywd" href="../libraries/integer.htm#(in_integer)>>(in_integer)">&gt;&gt;</a> (1 - newexp)));
          <span class="keywd">else</span>
            res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(sign | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>((intNumber + (1 <a class="keywd" href="../libraries/integer.htm#(in_integer)<<(in_integer)">&lt;&lt;</a> -newexp) - 1) <a class="keywd" href="../libraries/integer.htm#(in_integer)>>(in_integer)">&gt;&gt;</a> (1 - newexp)));
          <span class="keywd">end if</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">else</span>
        <span class="comment"># The result is normal or there is an overflow.</span>
        <span class="keywd">if</span> oldexp = 0 <span class="keywd">then</span>
          <span class="comment"># Number is denormal. Just adjusting the exponent will not work.</span>
          <span class="keywd">if</span> exp &lt;= DBL_EXPONENT_MAX <span class="keywd">then</span>
            <span class="comment"># Multiply number with 2**exp and we are done.</span>
            factor := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(DBL_EXPONENT_BIAS + exp) <a class="keywd" href="../libraries/bin64.htm#(in_bin64)<<(in_integer)">&lt;&lt;</a> DBL_FRACBITS);
            res := number * factor;
          <span class="keywd">else</span>
            <span class="comment"># Multiply number with 2**DBL_EXPONENT_MAX.</span>
            <span class="comment"># We cannot multiply by more, but we can adjust the exponent later.</span>
            factor := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(DBL_EXPONENT_BIAS + DBL_EXPONENT_MAX) <a class="keywd" href="../libraries/bin64.htm#(in_bin64)<<(in_integer)">&lt;&lt;</a> DBL_FRACBITS);
            binNumber := <a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(number * factor);
            <span class="comment"># Recalculate oldexp as if number would be normal.</span>
            <span class="comment"># This oldexp is negative but the new calculated newexp is still positive.</span>
            oldexp := <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(binNumber <a class="keywd" href="../libraries/bin64.htm#(in_bin64)>>(in_integer)">&gt;&gt;</a> DBL_FRACBITS &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7ff)) - DBL_EXPONENT_MAX;
            newexp := oldexp + exp;
            <span class="keywd">if</span> newexp >= 16#7ff <span class="keywd">then</span>
              <span class="comment"># The result exponent is not representable: Overflow</span>
              <span class="comment"># Return infinite with original sign.</span>
              res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#8000000000000000_) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7ff0000000000000));
            <span class="keywd">else</span>
              <span class="comment"># Now binNumber is normalized so adjusting the exponent will work.</span>
              res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#800fffffffffffff_) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(newexp) <a class="keywd" href="../libraries/bin64.htm#(in_bin64)<<(in_integer)">&lt;&lt;</a> DBL_FRACBITS);
            <span class="keywd">end if</span>;
          <span class="keywd">end if</span>;
        <span class="keywd">else</span>
          <span class="comment"># Number is normal.</span>
          <span class="keywd">if</span> newexp >= 16#7ff <span class="keywd">then</span>
            <span class="comment"># The result exponent is not representable: Overflow</span>
            <span class="comment"># Return infinite with original sign.</span>
            res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#8000000000000000_) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#7ff0000000000000));
          <span class="keywd">else</span>
            <span class="comment"># Both number and result are normal: Adjusting the exponent works.</span>
            <span class="comment"># Replace the old exponent with the new one.</span>
            res := <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(binNumber &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#800fffffffffffff_) | <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(newexp) <a class="keywd" href="../libraries/bin64.htm#(in_bin64)<<(in_integer)">&lt;&lt;</a> DBL_FRACBITS);
          <span class="keywd">end if</span>;
        <span class="keywd">end if</span>;
      <span class="keywd">end if</span>;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="float2MbfBits"><h3>Convert a float to Microsoft Binary Format</h3></a>
<p>
The function <tt><a class="func" href="../libraries/bin64.htm#float2MbfBits(in_float,DOUBLE)">float2MbfBits</a></tt>
is part of the <span class="stri">"<a class="lib" href="../libraries/bin64.htm">bin64.s7i</a>"</span> library.
This function converts a <tt><a class="type" href="../manual/types.htm#float">float</a></tt>
into a <tt><a class="type" href="../libraries/bin64.htm">bin64</a></tt> value
in the MBF double-precision representation.
Microsoft Binary Format (MBF) is a format for floating point numbers.
The double-precision version of MBF has a 8 bit exponent, a sign bit
and a 55 bit mantissa.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../libraries/bin64.htm">bin64</a>: float2MbfBits (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: number, DOUBLE) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: bits <span class="keywd">is</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(0);
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: ieeeExponentBits <span class="keywd">is</span> 11;
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: ieeeMantissaBits <span class="keywd">is</span> 52;
    <span class="keywd">const</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: ieeeSignMask <span class="keywd">is</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(1) << (ieeeExponentBits + ieeeMantissaBits);
    <span class="keywd">const</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: ieeeMantissaMask <span class="keywd">is</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(<a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(1 << ieeeMantissaBits));
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: mbfExponentBits <span class="keywd">is</span> 8;
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: mbfMantissaBits <span class="keywd">is</span> 55;
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: mbfMaxExponent <span class="keywd">is</span> <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(2 ** mbfExponentBits);
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: mbfExponentBias <span class="keywd">is</span> 129;
    <span class="keywd">var</span> <span class="type">floatElements</span>: ieeeElements <span class="keywd">is</span> <span class="type">floatElements</span>.value;
    <span class="keywd">var</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: fractionBits <span class="keywd">is</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(0);
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: mbfExponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> <a class="func" href="../libraries/float.htm#isNaN(in_float)">isNaN</a>(number) <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> <a class="func" href="../libraries/float.htm#abs(in_float)">abs</a>(number) = <a class="var" href="../libraries/float.htm#Infinity">Infinity</a> <span class="keywd">then</span>
      <span class="keywd">raise</span> RANGE_ERROR;
    <span class="keywd">elsif</span> number &lt;> 0.0 <span class="keywd">then</span>
      ieeeElements := <a class="func" href="../libraries/float.htm#decompose(in_float)">decompose</a>(number);
      fractionBits := <a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(ieeeElements.fraction);
      mbfExponent := ieeeElements.exponent - 1 + mbfExponentBias;
      <span class="keywd">if</span> mbfExponent > mbfMaxExponent <span class="keywd">then</span>
        <span class="keywd">raise</span> RANGE_ERROR;
      <span class="keywd">elsif</span> mbfExponent > 0 <span class="keywd">then</span>
        bits := (<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(mbfExponent) << <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(mbfMantissaBits)) |
                ((fractionBits &amp; ieeeSignMask) >> mbfExponentBits) |
                ((fractionBits &amp; ieeeMantissaMask) << (mbfMantissaBits - ieeeMantissaBits));
      <span class="keywd">end if</span>;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="mbfBits2Float"><h3>Get a float from bits in Microsoft Binary Format</h3></a>
<p>
The function <tt><a class="func" href="../libraries/bin64.htm#mbfBits2Float(in_bin64)">mbfBits2Float</a></tt>
is part of the <span class="stri">"<a class="lib" href="../libraries/bin64.htm">bin64.s7i</a>"</span> library.
This function gets a <tt><a class="type" href="../manual/types.htm#float">float</a></tt>
from a <tt><a class="type" href="../libraries/bin64.htm">bin64</a></tt> value
in the MBF double-precision representation.
Microsoft Binary Format (MBF) is a format for floating point numbers.
The double-precision version of MBF has a 8 bit exponent, a sign bit
and a 55 bit mantissa.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#float">float</a>: mbfBits2Float (<span class="keywd">in</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: bits) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#float">float</a>: aFloat <span class="keywd">is</span> 0.0;
  local
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: mantissaBits <span class="keywd">is</span> 55;
    <span class="keywd">const</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: mantissaMask <span class="keywd">is</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(pred(1 << mantissaBits));
    <span class="keywd">const</span> <a class="type" href="../libraries/bin64.htm">bin64</a>: mantissaSign <span class="keywd">is</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(1 << mantissaBits);
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: exponentBias <span class="keywd">is</span> 129;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: exponent <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    exponent := <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(bits >> <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(mantissaBits));
    <span class="keywd">if</span> exponent &lt;> 0 <span class="keywd">then</span>
      <span class="comment"># Ignore sign bit and set implicit leading one bit of mantissa instead.</span>
      aFloat := <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(<a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(mantissaSign | bits &amp; mantissaMask));
      <span class="comment"># Check sign bit.</span>
      <span class="keywd">if</span> <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(bits &amp; mantissaSign) &lt;> 0 <span class="keywd">then</span>
        aFloat := -aFloat;
      <span class="keywd">end if</span>;
      aFloat := aFloat * 2.0 ** (exponent - exponentBias - mantissaBits);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/string.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/math.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
