<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Algorithms: Graphics</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Algorithms</big></a>
<a class="menu" href="sorting.htm">Sorting</a>
<a class="menu" href="search.htm">Searching</a>
<a class="menu" href="date.htm">Date&nbsp;&&nbsp;Time</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="math.htm">Mathematics</a>
<a class="menu" href="msgdigest.htm">Message&nbsp;digest</a>
<a class="menu" href="graphic.htm">Graphics</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="puzzles.htm">Puzzles</a>
<a class="menu" href="others.htm">Others</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Algorithms</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Graphics</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/msgdigest.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/file.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
</p>

<div><a name="dragon_curve"><h3>Draw a dragon curve</h3></a>
<p>
The output of this program is shown <a class="link" href="../images/dragon1.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/math.htm">math.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="keywd">var</span> <a class="type" href="../manual/types.htm#float">float</a>: angle <span class="keywd">is</span> 0.0;
<span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x <span class="keywd">is</span> 220;
<span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y <span class="keywd">is</span> 220;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: turn (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: degrees) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    angle +:= <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(degrees) * <a class="var" href="../libraries/math.htm#PI">PI</a> / 180.0
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: forward (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: length) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y2 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    x2 := x + <a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>(<a class="func" href="../libraries/math.htm#cos(in_float)">cos</a>(angle) * length);
    y2 := y + <a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>(<a class="func" href="../libraries/math.htm#sin(in_float)">sin</a>(angle) * length);
    lineTo(x, y, x2, y2, black);
    x := x2;
    y := y2;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: dragon (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: length, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: split, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: direct) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> split = 0 <span class="keywd">then</span>
      forward(length);
    <span class="keywd">else</span>
      turn(direct * 45);
      dragon(length/1.4142136, pred(split), 1);
      turn(-direct * 90);
      dragon(length/1.4142136, pred(split), -1);
      turn(direct * 45);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    screen(976, 654);
    clear(curr_win, white);
    KEYBOARD := GRAPH_KEYBOARD;
    dragon(768.0, 14, 1);
    ignore(getc(KEYBOARD));
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="bifurk"><h3>Display the bifurcation diagram</h3></a>
<p>
The output of this program is shown <a class="link" href="../images/bifurk1.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: DRAW_START <span class="keywd">is</span> 100;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: DRAW_END <span class="keywd">is</span> 200;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#float">float</a>: G_MIN <span class="keywd">is</span> 0.0;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#float">float</a>: G_MAX <span class="keywd">is</span> 4.0;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#float">float</a>: KRES <span class="keywd">is</span> (G_MAX - G_MIN) / 1000.0;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#float">float</a>: XSTART <span class="keywd">is</span> 0.5;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: bifurk <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#float">float</a>: k <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#float">float</a>: x <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: i <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: xPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    k := G_MIN;
    <span class="keywd">while</span> k &lt; G_MAX <span class="keywd">do</span>
      x := XSTART;
      <span class="keywd">for</span> i <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(DRAW_START) <span class="keywd">do</span>
        x := k * x * (1.0 - x);
      <span class="keywd">end for</span>;
      xPos := <a class="func" href="../libraries/float.htm#round(in_float)">round</a>(k * 250.0);
      <span class="keywd">for</span> i <span class="keywd">range</span> DRAW_START <span class="keywd">to</span> DRAW_END <span class="keywd">do</span>
        x := k * x * (1.0 - x);
        point(xPos, <a class="func" href="../libraries/float.htm#round(in_float)">round</a>(x * 700.0), black);
      <span class="keywd">end for</span>;
      k +:= KRES;
    <span class="keywd">end while</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    screen(1024, 768);
    clear(curr_win, white);
    KEYBOARD := GRAPH_KEYBOARD;
    bifurk;
    <a class="func" href="../libraries/graph.htm#flushGraphic">flushGraphic</a>;
    ignore(getc(KEYBOARD));
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="cellauto"><h3>Simulate a one-dimensional cellular automaton</h3></a>
<p>
This program simulates one-dimensional cellular automata, with two possible states per cell.
The output of this program is shown <a class="link" href="../images/cellauto1.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#type">type</a>: generationType <span class="keywd">is</span> <a class="type" href="../manual/types.htm#array">array</a> <a class="type" href="../manual/types.htm#boolean">boolean</a>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <span class="type">generationType</span>: nextGeneration (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#set">bitset</a>: rule,
    <span class="keywd">in</span> <span class="type">generationType</span>: currGeneration) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">generationType</span>: nextGeneration <span class="keywd">is</span> 0 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: pattern <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    nextGeneration := length(currGeneration) <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> FALSE;
    <span class="keywd">for</span> index <span class="keywd">range</span> 2 <span class="keywd">to</span> pred(length(currGeneration)) <span class="keywd">do</span>
      pattern := ord(currGeneration[pred(index)]) * 4 +
                 ord(currGeneration[index])       * 2 +
                 ord(currGeneration[succ(index)]);
      nextGeneration[index] := pattern <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> rule;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: drawGeneration (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: generationNumber,
    <span class="keywd">in</span> <span class="type">generationType</span>: currentGeneration) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(currentGeneration) <span class="keywd">do</span>
      <span class="keywd">if</span> currentGeneration[index] <span class="keywd">then</span>
        point(index, generationNumber, black);
      <span class="keywd">end if</span>;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#set">bitset</a>: rule30 <span class="keywd">is</span> <a class="type" href="../manual/types.htm#set">bitset</a> <a class="op" href="../libraries/bitset.htm#(attr_bitset)conv(in_integer)">conv</a> 30;
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#set">bitset</a>: rule110 <span class="keywd">is</span> <a class="type" href="../manual/types.htm#set">bitset</a> <a class="op" href="../libraries/bitset.htm#(attr_bitset)conv(in_integer)">conv</a> 110;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#text">text</a>: win <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: generationNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">generationType</span>: currentGeneration <span class="keywd">is</span> 0 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> FALSE;
  <span class="keywd">begin</span>
    screen(1024, 768);
    clear(white);
    KEYBOARD := GRAPH_KEYBOARD;
    win := open(curr_win);
    currentGeneration := 1024 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> FALSE;
    currentGeneration[512] := TRUE;
    drawGeneration(generationNumber, currentGeneration);
    <span class="keywd">for</span> generationNumber <span class="keywd">range</span> 1 <span class="keywd">to</span> 500 <span class="keywd">do</span>
      currentGeneration := nextGeneration(rule30, currentGeneration);
      drawGeneration(generationNumber, currentGeneration);
    <span class="keywd">end for</span>;
    <a class="func" href="../libraries/graph.htm#flushGraphic">flushGraphic</a>;
    readln(KEYBOARD);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="fractree"><h3>Draw a fractal tree</h3></a>
<p>
The output of this program is shown <a class="link" href="../images/fractree1.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/math.htm">math.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#float">float</a>: DEG_TO_RAD <span class="keywd">is</span> <a class="var" href="../libraries/math.htm#PI">PI</a> / 180.0;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: drawTree (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x1, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y1, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: angle, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: depth) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y2 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> depth &lt;> 0 <span class="keywd">then</span>
      x2 := x1 + <a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>(<a class="func" href="../libraries/math.htm#cos(in_float)">cos</a>(angle * DEG_TO_RAD) * <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(depth * 10));
      y2 := y1 + <a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>(<a class="func" href="../libraries/math.htm#sin(in_float)">sin</a>(angle * DEG_TO_RAD) * <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(depth * 10));
      lineTo(x1, y1, x2, y2, white);
      drawTree(x2, y2, angle - 20.0, depth - 1);
      drawTree(x2, y2, angle + 20.0, depth - 1);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    screen(600, 500);
    clear(curr_win, black);
    KEYBOARD := GRAPH_KEYBOARD;
    drawTree(300, 470, -90.0, 9);
    ignore(getc(KEYBOARD));
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="sierpinski"><h3>Display a sierpinski triangle</h3></a>
<p>
The output of this program is shown <a class="link" href="../images/sierpinski1.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bin64.htm">bin64.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: order <span class="keywd">is</span> 8;
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: width <span class="keywd">is</span> 1 &lt;&lt; order;
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: margin <span class="keywd">is</span> 10;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    screen(width + 2 * margin, width + 2 * margin);
    clear(curr_win, white);
    KEYBOARD := GRAPH_KEYBOARD;
    <span class="keywd">for</span> y <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(width) <span class="keywd">do</span>
      <span class="keywd">for</span> x <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(width) <span class="keywd">do</span>
        <span class="keywd">if</span> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(x) &amp; <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(y) = <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(0) <span class="keywd">then</span>
          point(margin + x, margin + y, black);
        <span class="keywd">end if</span>;
      <span class="keywd">end for</span>;
    <span class="keywd">end for</span>;
    ignore(getc(KEYBOARD));
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="voronoi"><h3>Display a voronoi diagram</h3></a>
<p>
In a Voronoi diagram space is divided into a number of regions. A set of seed points is given and
all points closer to a seed point than to any other belong to a region.
The voronoi program below uses random seed points in a 2 dimensional area.
A sample output of the program is shown <a class="link" href="../images/voronoi1.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="keywd">const</span> type: point <span class="keywd">is new struct</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#color">color</a>: col <span class="keywd">is</span> black;
  <span class="keywd">end struct</span>;

<span class="keywd">const</span> proc: generateVoronoiDiagram (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: width, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: height, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: numCells) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#array">array</a> <span class="type">point</span>: points <span class="keywd">is</span> 0 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> point.value;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: distSquare <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: minDistSquare <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: indexOfNearest <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    screen(width, height);
    points := numCells <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> point.value;
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> numCells <span class="keywd">do</span>
      points[index].xPos := rand(0, width);
      points[index].yPos := rand(0, height);
      points[index].col := <a class="func" href="../libraries/color.htm#color(in_integer,in_integer,in_integer)">color</a>(rand(0, 65535), rand(0, 65535), rand(0, 65535));
    <span class="keywd">end for</span>;
    <span class="keywd">for</span> y <span class="keywd">range</span> 0 <span class="keywd">to</span> height <span class="keywd">do</span>
      <span class="keywd">for</span> x <span class="keywd">range</span> 0 <span class="keywd">to</span> width <span class="keywd">do</span>
        minDistSquare := width ** 2 + height ** 2;
        <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> numCells <span class="keywd">do</span>
          distSquare := (points[index].xPos - x) ** 2 + (points[index].yPos - y) ** 2;
          <span class="keywd">if</span> distSquare &lt; minDistSquare <span class="keywd">then</span>
            minDistSquare := distSquare;
            indexOfNearest := index;
          <span class="keywd">end if</span>;
        <span class="keywd">end for</span>;
        point(x, y, points[indexOfNearest].col);
      <span class="keywd">end for</span>;
    <span class="keywd">end for</span>;
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> numCells <span class="keywd">do</span>
      line(points[index].xPos - 2, points[index].yPos, 4, 0, black);
      line(points[index].xPos, points[index].yPos - 2, 0, 4, black);
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> proc: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    generateVoronoiDiagram(500, 500, 25);
    KEYBOARD := GRAPH_KEYBOARD;
    readln(KEYBOARD);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="mandelbr"><h3>Display the Mandelbrot set</h3></a>
<p>
A mandelbrot program which is able to zoom can be found <a class="link" href="../scrshots/mandelbr.htm">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/complex.htm">complex.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="comment"># Display the Mandelbrot set, that are points z[0] in the complex plane</span>
<span class="comment"># for which the sequence z[n+1] := z[n] ** 2 + z[0] (n >= 0) is bounded.</span>
<span class="comment"># Since this program is computing intensive it should be compiled with</span>
<span class="comment"># s7c -O2 mandelbr</span>

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: pix <span class="keywd">is</span> 200;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: max_iter <span class="keywd">is</span> 256;

<span class="keywd">var</span> <a class="type" href="../manual/types.htm#array">array</a> <span class="type">color</span>: colorTable <span class="keywd">is</span> max_iter <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> black;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: iterate (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#complex">complex</a>: z0) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: iter <span class="keywd">is</span> 1;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#complex">complex</a>: z <span class="keywd">is</span> <a class="type" href="../manual/types.htm#complex">complex</a>.value;
  <span class="keywd">begin</span>
    z := z0;
    <span class="keywd">while</span> <a class="func" href="../libraries/complex.htm#sqrAbs(in_complex)">sqrAbs</a>(z) &lt; 4.0 <span class="op">and</span>  <span class="comment"># not diverged</span>
        iter &lt; max_iter <span class="keywd">do</span>     <span class="comment"># not converged</span>
      z *:= z;
      z +:= z0;
      incr(iter);
    <span class="keywd">end while</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: displayMandelbrotSet (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#complex">complex</a>: center, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#float">float</a>: zoom) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: y <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#complex">complex</a>: z0 <span class="keywd">is</span> <a class="type" href="../manual/types.htm#complex">complex</a>.value;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> x <span class="keywd">range</span> -pix <span class="keywd">to</span> pix <span class="keywd">do</span>
      <span class="keywd">for</span> y <span class="keywd">range</span> -pix <span class="keywd">to</span> pix <span class="keywd">do</span>
        z0 := center + <a class="func" href="../libraries/complex.htm#complex(in_float,in_float)">complex</a>(<a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(x) * zoom, <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(y) * zoom);
        point(x + pix, y + pix, colorTable[iterate(z0)]);
      <span class="keywd">end for</span>;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: num_pix <span class="keywd">is</span> 2 * pix + 1;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: col <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    screen(num_pix, num_pix);
    clear(curr_win, black);
    KEYBOARD := GRAPH_KEYBOARD;
    <span class="keywd">for</span> col <span class="keywd">range</span> 1 <span class="keywd">to</span> pred(max_iter) <span class="keywd">do</span>
      colorTable[col] := <a class="func" href="../libraries/color.htm#color(in_integer,in_integer,in_integer)">color</a>(65535 - (col * 5003) <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 65535,
                                       (col * 257)  <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 65535,
                                       (col * 2609) <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 65535);
    <span class="keywd">end for</span>;
    displayMandelbrotSet(<a class="func" href="../libraries/complex.htm#complex(in_float,in_float)">complex</a>(-0.75, 0.0), 1.3 / <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(pix));
    <a class="func" href="../libraries/graph.htm#flushGraphic">flushGraphic</a>;
    readln(KEYBOARD);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="brownian_tree"><h3>Display a brownian tree</h3></a>
<p>
A Brownian tree is built with these steps:
</p><ol>
<li>A seed particle is placed somewhere on the window.</li>
<li>Another particle is placed in a random position on the window,
    and moved randomly until it bumps against the seed. The particle is left there.</li>
<li>Another particle is placed in a random position and moved
    until it bumps against the seed or any previous particle, and so on.</li>
</ol><p>
The output of the program below is shown <a class="link" href="../images/browniantree.png">here</a>.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: SIZE <span class="keywd">is</span> 300;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#integer">integer</a>: SCALE <span class="keywd">is</span> 1;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: genBrownianTree (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: fieldSize, <span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: numParticles) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#array">array</a> <a class="type" href="../manual/types.htm#array">array</a> <a class="type" href="../manual/types.htm#integer">integer</a>: world <span class="keywd">is</span> 0 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> 0 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: px <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: py <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: dx <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: dy <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: i <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#boolean">boolean</a>: bumped <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    world := fieldSize <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> fieldSize <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> 0;
    world[rand(1, fieldSize)][rand(1, fieldSize)] := 1;  <span class="comment"># Set the seed</span>
    <span class="keywd">for</span> i <span class="keywd">range</span> 1 <span class="keywd">to</span> numParticles <span class="keywd">do</span>
      <span class="comment"># Set particle's initial position</span>
      px := rand(1, fieldSize);
      py := rand(1, fieldSize);
      bumped := FALSE;
      <span class="keywd">repeat</span>
        <span class="comment"># Randomly choose a direction</span>
        dx := rand(-1, 1);
        dy := rand(-1, 1);
        <span class="keywd">if</span> dx + px &lt; 1 <span class="op">or</span> dx + px > fieldSize <span class="op">or</span> dy + py &lt; 1 <span class="op">or</span> dy + py > fieldSize <span class="keywd">then</span>
          <span class="comment"># Plop the particle into some other random location</span>
          px := rand(1, fieldSize);
          py := rand(1, fieldSize);
        <span class="keywd">elsif</span> world[py + dy][px + dx] &lt;> 0 <span class="keywd">then</span>
          <span class="comment"># Bumped into something</span>
          world[py][px] := 1;
          rect(SCALE * pred(px), SCALE * pred(py), SCALE, SCALE, white);
          <a class="func" href="../libraries/graph.htm#flushGraphic">flushGraphic</a>;
          bumped := TRUE;
        <span class="keywd">else</span>
          py +:= dy;
          px +:= dx;
        <span class="keywd">end if</span>;
      <span class="keywd">until</span> bumped;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    screen(SIZE * SCALE, SIZE * SCALE);
    KEYBOARD := GRAPH_KEYBOARD;
    genBrownianTree(SIZE, 20000);
    readln(KEYBOARD);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="readBmp"><h3>Read a bitmap file into a pixmap</h3></a>
<p>
The function below reads the most common BMP file format. A more general
version of <a class="func" href="../libraries/bmp.htm#readBmp(in_string)">readBmp</a> is defined in the <span class="stri">"<a class="lib" href="../libraries/bmp.htm">bmp.s7i</a>"</span> library.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <span class="type">PRIMITIVE_WINDOW</span>: readBmp (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#string">string</a>: file_name) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: image <span class="keywd">is</span> <span class="type">PRIMITIVE_WINDOW</span>.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#file">file</a>: bmp_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: size <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: offset <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: planes <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: bits <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: padding <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    bmp_file := open(file_name, <span class="stri">"r"</span>);
    <span class="keywd">if</span> bmp_file &lt;> STD_NULL <span class="keywd">then</span>
      stri := gets(bmp_file, 2);
      <span class="keywd">if</span> stri = <span class="stri">"BM"</span> <span class="keywd">then</span>
        size :=   getUInt32Le(bmp_file);
        stri :=   gets(bmp_file, 4);        (* reserved1, reserved2 *)
        offset := getUInt32Le(bmp_file);
        stri :=   gets(bmp_file, 4);        (* header size *)
        width :=  getUInt32Le(bmp_file);
        height := getUInt32Le(bmp_file);
        planes := getUInt16Le(bmp_file);
        bits :=   getUInt16Le(bmp_file);
        stri :=   gets(bmp_file, 26);
        padding := -(3 * width) <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 4;
        image := newPixmap(width, height);
        seek(bmp_file, offset + 1);
        <span class="keywd">for</span> line <span class="keywd">range</span> pred(height) <span class="keywd">downto</span> 0 <span class="keywd">do</span>
          <span class="keywd">for</span> column <span class="keywd">range</span> 0 <span class="keywd">to</span> pred(width) <span class="keywd">do</span>
            stri := gets(bmp_file, 3);
            DRAW_PPOINT(image, column, line,
                rgbPixel(ord(stri[3]) * 256, ord(stri[2]) * 256, ord(stri[1]) * 256));
          <span class="keywd">end for</span>;
          ignore(gets(bmp_file, padding));
        <span class="keywd">end for</span>;
      <span class="keywd">end if</span>;
      close(bmp_file);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/msgdigest.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/file.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
