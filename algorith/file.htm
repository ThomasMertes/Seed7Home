<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Algorithms: File</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Algorithms</big></a>
<a class="menu" href="sorting.htm">Sorting</a>
<a class="menu" href="search.htm">Searching</a>
<a class="menu" href="date.htm">Date&nbsp;&&nbsp;Time</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="math.htm">Mathematics</a>
<a class="menu" href="msgdigest.htm">Message&nbsp;digest</a>
<a class="menu" href="graphic.htm">Graphics</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="puzzles.htm">Puzzles</a>
<a class="menu" href="others.htm">Others</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Algorithms</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>File</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/graphic.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/puzzles.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
</p>

<div><a name="file_exists"><h3>Check if a file exists</h3></a>
<p>
The <span class="stri">"<a class="lib" href="../libraries/osfiles.htm">osfiles.s7i</a>"</span> library defines
the function <tt><a class="func" href="../manual/os.htm#fileType">fileType</a></tt> which can be used to determine if a <tt><a class="type" href="../manual/types.htm#file">file</a></tt> exists.
</p><pre class="indent">
<span class="keywd">if</span> fileType(<span class="stri">"/foo/bar"</span>) &lt;> <a class="var" href="../manual/os.htm#FILE_ABSENT">FILE_ABSENT</a> <span class="keywd">then</span>
  writeln(<span class="stri">"file exists"</span>);
<span class="keywd">end if</span>;
</pre></div>

<div><a name="file_is_directory"><h3>Check if a file is a directory</h3></a>
<p>
The <span class="stri">"<a class="lib" href="../libraries/osfiles.htm">osfiles.s7i</a>"</span> library defines
the function <tt><a class="func" href="../manual/os.htm#fileType">fileType</a></tt> which can be used to determine the type of a <tt><a class="type" href="../manual/types.htm#file">file</a></tt>.
</p><pre class="indent">
<span class="keywd">if</span> fileType(<span class="stri">"/foo/bar"</span>) = <a class="var" href="../manual/os.htm#FILE_DIR">FILE_DIR</a> <span class="keywd">then</span>
  writeln(<span class="stri">"file is directory"</span>);
<span class="keywd">end if</span>;
</pre></div>

<div><a name="file_is_regular"><h3>Check if a file is a regular file</h3></a>
<p>
The <span class="stri">"<a class="lib" href="../libraries/osfiles.htm">osfiles.s7i</a>"</span> library defines
the function <tt><a class="func" href="../manual/os.htm#fileType">fileType</a></tt> which can be used to determine the type of a <tt><a class="type" href="../manual/types.htm#file">file</a></tt>.
</p><pre class="indent">
<span class="keywd">if</span> fileType(<span class="stri">"/foo/bar"</span>) = <a class="var" href="../manual/os.htm#FILE_REGULAR">FILE_REGULAR</a> <span class="keywd">then</span>
  writeln(<span class="stri">"file is regular file"</span>);
<span class="keywd">end if</span>;
</pre></div>

<div><a name="copy_directory"><h3>Copy a directory and all its files to a new directory</h3></a>
<p>
The <span class="stri">"<a class="lib" href="../libraries/osfiles.htm">osfiles.s7i</a>"</span> library defines
the function <tt><a class="func" href="../manual/os.htm#copyFile">copyFile</a></tt>, which copies whole directory hierarchies.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    copyFile(argv(PROGRAM)[1], argv(PROGRAM)[2]);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="move_file"><h3>Move or rename a file</h3></a>
<p>
The <span class="stri">"<a class="lib" href="../libraries/osfiles.htm">osfiles.s7i</a>"</span> library defines
the function <tt><a class="func" href="../manual/os.htm#moveFile">moveFile</a></tt>, which moves or renames a <tt><a class="type" href="../manual/types.htm#file">file</a></tt>. Since a directory
is also a <tt><a class="type" href="../manual/types.htm#file">file</a></tt> this function can also move or rename directories.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    moveFile(argv(PROGRAM)[1], argv(PROGRAM)[2]);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="replace_cr"><h3>Convert files from windows to unix format</h3></a>
<p>
This is done by replacing CR LF with LF.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/getf.htm">getf.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: file_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> file_name <span class="keywd">range</span> argv(PROGRAM) <span class="keywd">do</span>
      putf(file_name, replace(getf(file_name, <span class="stri">"\r\n"</span>, <span class="stri">"\n"</span>)));
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="replace_lf"><h3>Convert files from unix to windows format</h3></a>
<p>
This is done by replacing LF with CR LF.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/getf.htm">getf.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: file_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> file_name <span class="keywd">range</span> argv(PROGRAM) <span class="keywd">do</span>
      putf(file_name, replace(getf(file_name, <span class="stri">"\n"</span>, <span class="stri">"\r\n"</span>)));
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="getUInt16Le"><h3>Read a 16 bit little endian integer from a file</h3></a>
<p>
The function <tt><a class="func" href="../libraries/bytedata.htm#getUInt16Le(inout_file)">getUInt16Le</a></tt> is part of the <span class="stri">"<a class="lib" href="../libraries/bytedata.htm">bytedata.s7i</a>"</span> library.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: getUInt16Le (<a class="keywd_no_ul" href="../manual/params.htm#inout_parameter">inout</a> <a class="type" href="../manual/types.htm#file">file</a>: in_file) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := gets(in_file, 2);
    number := ord(stri[1]) +
              ord(stri[2]) * 256;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="getUInt32Le"><h3>Read a 32 bit little endian integer from a file</h3></a>
<p>
The function <tt><a class="func" href="../libraries/bytedata.htm#getUInt32Le(inout_file)">getUInt32Le</a></tt> is part of the <span class="stri">"<a class="lib" href="../libraries/bytedata.htm">bytedata.s7i</a>"</span> library.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: getUInt32Le (<a class="keywd_no_ul" href="../manual/params.htm#inout_parameter">inout</a> <a class="type" href="../manual/types.htm#file">file</a>: in_file) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := gets(in_file, 4);
    number := ord(stri[1]) +
              ord(stri[2]) * 256 +
              ord(stri[3]) * 65536 +
              ord(stri[4]) * 16777216;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="getUInt16Be"><h3>Read a 16 bit big endian integer from a file</h3></a>
<p>
The function <tt><a class="func" href="../libraries/bytedata.htm#getUInt16Be(inout_file)">getUInt16Be</a></tt> is part of the <span class="stri">"<a class="lib" href="../libraries/bytedata.htm">bytedata.s7i</a>"</span> library.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: getUInt16Be (<a class="keywd_no_ul" href="../manual/params.htm#inout_parameter">inout</a> <a class="type" href="../manual/types.htm#file">file</a>: in_file) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := gets(in_file, 2);
    number := ord(stri[1]) * 256 +
              ord(stri[2]);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="getUInt32Be"><h3>Read a 32 bit big endian integer from a file</h3></a>
<p>
The function <tt><a class="func" href="../libraries/bytedata.htm#getUInt32Be(inout_file)">getUInt32Be</a></tt> is part of the <span class="stri">"<a class="lib" href="../libraries/bytedata.htm">bytedata.s7i</a>"</span> library.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: getUInt32Be (<a class="keywd_no_ul" href="../manual/params.htm#inout_parameter">inout</a> <a class="type" href="../manual/types.htm#file">file</a>: in_file) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := gets(in_file, 4);
    number := ord(stri[1]) * 16777216 +
              ord(stri[2]) * 65536 +
              ord(stri[3]) * 256 +
              ord(stri[4]);
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="rot13_program"><h3>Program that encodes and decodes with rot13</h3></a>
<p>
This rot13 program reads from standard input and writes to standard output.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#char">char</a>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    ch := getc(IN);
    <span class="keywd">while</span> <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> eof(IN) <span class="keywd">do</span>
      <span class="keywd">if</span> (ch >= <span class="stri">'a'</span> <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> ch &lt;= <span class="stri">'m'</span>) <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> (ch >= <span class="stri">'A'</span> <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> ch &lt;= <span class="stri">'M'</span>) <span class="keywd">then</span>
        ch := chr(ord(ch) + 13);
      <span class="keywd">elsif</span> (ch >= <span class="stri">'n'</span> <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> ch &lt;= <span class="stri">'z'</span>) <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> (ch >= <span class="stri">'N'</span> <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> ch &lt;= <span class="stri">'Z'</span>) <span class="keywd">then</span>
        ch := chr(ord(ch) - 13);
      <span class="keywd">end if</span>;
      write(ch);
      ch := getc(IN);
    <span class="keywd">end while</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="remove_empty_lines"><h3>Remove empty lines</h3></a>
<p>
The program copies from standard input to standard output,
except for empty lines, which are ommitted from the output.
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#char">char</a>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#char">char</a>: lastChar <span class="keywd">is</span> <span class="stri">'\n'</span>;
  <span class="keywd">begin</span>
    ch := getc(IN);
    <span class="keywd">while</span> ch &lt;> <a class="var" href="../libraries/char.htm#EOF">EOF</a> <span class="keywd">do</span>
      <span class="keywd">if</span> ch &lt;> <span class="stri">'\n'</span> <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> lastChar &lt;> <span class="stri">'\n'</span> <span class="keywd">then</span>
        write(OUT, ch);
      <span class="keywd">end if</span>;
      lastChar := ch;
      ch := getc(IN);
    <span class="keywd">end while</span>;
  <span class="keywd">end func</span>;
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/graphic.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/puzzles.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
