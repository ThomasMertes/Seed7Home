<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Algorithms: Puzzles</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Algorithms</big></a>
<a class="menu" href="sorting.htm">Sorting</a>
<a class="menu" href="search.htm">Searching</a>
<a class="menu" href="date.htm">Date&nbsp;&&nbsp;Time</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="math.htm">Mathematics</a>
<a class="menu" href="msgdigest.htm">Message&nbsp;digest</a>
<a class="menu" href="graphic.htm">Graphics</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="puzzles.htm">Puzzles</a>
<a class="menu" href="others.htm">Others</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Algorithms</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Puzzles</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/file.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/others.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
</p>

<div><a name="self"><h3>A program that writes itself</h3></a>
<p>
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#array">array</a> <a class="type" href="../manual/types.htm#string">string</a>: prog <span class="keywd">is</span> [](
<span class="stri">"$ include \"seed7_05.s7i\";"</span>,
<span class="stri">"const array string: prog is []("</span>,
<span class="stri">"const proc: main is func"</span>,
<span class="stri">"  local var integer: number is 0;"</span>,
<span class="stri">"  begin"</span>,
<span class="stri">"    for number range 1 to 2 do writeln(prog[number]); end for;"</span>,
<span class="stri">"    for number range 1 to 11 do"</span>,
<span class="stri">"      writeln(literal(prog[number]) &lt;&amp; \",\");"</span>,
<span class="stri">"    end for;"</span>,
<span class="stri">"    writeln(literal(prog[12]) &lt;&amp; \");\");"</span>,
<span class="stri">"    for number range 3 to 12 do writeln(prog[number]); end for;"</span>,
<span class="stri">"  end func;"</span>);
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span> <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 2 <span class="keywd">do</span> writeln(prog[number]); <span class="keywd">end for</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 11 <span class="keywd">do</span>
      writeln(literal(prog[number]) &lt;&amp; <span class="stri">","</span>);
    <span class="keywd">end for</span>;
    writeln(literal(prog[12]) &lt;&amp; <span class="stri">");"</span>);
    <span class="keywd">for</span> number <span class="keywd">range</span> 3 <span class="keywd">to</span> 12 <span class="keywd">do</span> writeln(prog[number]); <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="brainf7"><h3>Brainfuck interpreter</h3></a>
<p>
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/getf.htm">getf.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: brainF (<a class="keywd_no_ul" href="../manual/params.htm#in_parameter">in</a> <a class="type" href="../manual/types.htm#string">string</a>: source, <span class="keywd">inout</span> <a class="type" href="../manual/types.htm#file">file</a>: input, <span class="keywd">inout</span> <a class="type" href="../manual/types.htm#file">file</a>: output) <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#array">array</a> <a class="type" href="../manual/types.htm#char">char</a>: memory <span class="keywd">is</span> 100000 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <span class="stri">'\0;'</span>;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: dataPointer <span class="keywd">is</span> 50000;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: instructionPointer <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: nestingLevel <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> instructionPointer &lt;= length(source) <span class="keywd">do</span>
      <span class="keywd">case</span> source[instructionPointer] <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'>'</span>}: incr(dataPointer);
        <span class="keywd">when</span> {<span class="stri">'<'</span>}: decr(dataPointer);
        <span class="keywd">when</span> {<span class="stri">'+'</span>}: incr(memory[dataPointer]);
        <span class="keywd">when</span> {<span class="stri">'-'</span>}: decr(memory[dataPointer]);
        <span class="keywd">when</span> {<span class="stri">'.'</span>}: write(output, memory[dataPointer]);
        <span class="keywd">when</span> {<span class="stri">','</span>}: memory[dataPointer] := getc(input);
        <span class="keywd">when</span> {<span class="stri">'['</span>}: <span class="comment"># Forward if zero at dataPointer</span>
          <span class="keywd">if</span> memory[dataPointer] = <span class="stri">'\0;'</span> <span class="keywd">then</span>
            nestingLevel := 1;
            <span class="keywd">repeat</span>
              incr(instructionPointer);
              <span class="keywd">case</span> source[instructionPointer] <span class="keywd">of</span>
                <span class="keywd">when</span> {<span class="stri">'['</span>}: incr(nestingLevel);
                <span class="keywd">when</span> {<span class="stri">']'</span>}: decr(nestingLevel);
              <span class="keywd">end case</span>;
            <span class="keywd">until</span> nestingLevel = 0;
          <span class="keywd">end if</span>;
        <span class="keywd">when</span> {<span class="stri">']'</span>}: <span class="comment"># Backward if non-zero at dataPointer</span>
          <span class="keywd">if</span> memory[dataPointer] &lt;> <span class="stri">'\0;'</span> <span class="keywd">then</span>
            nestingLevel := 1;
            <span class="keywd">repeat</span>
              decr(instructionPointer);
              <span class="keywd">case</span> source[instructionPointer] <span class="keywd">of</span>
                <span class="keywd">when</span> {<span class="stri">'['</span>}: decr(nestingLevel);
                <span class="keywd">when</span> {<span class="stri">']'</span>}: incr(nestingLevel);
              <span class="keywd">end case</span>;
            <span class="keywd">until</span> nestingLevel = 0;
          <span class="keywd">end if</span>;
      <span class="keywd">end case</span>;
      incr(instructionPointer);
    <span class="keywd">end while</span>;
  <span class="keywd">end fun</span>c;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#string">string</a>: source <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(argv(PROGRAM)) &lt;> 1 <span class="keywd">then</span>
      writeln(<span class="stri">"usage: brainf7 source"</span>);
    <span class="keywd">else</span>
      source := convDosPath(argv(PROGRAM)[1]);
      <span class="keywd">if</span> fileType(source) &lt;> FILE_REGULAR <span class="keywd">then</span>
        writeln(<span class="stri">" *** File "</span> &lt;&amp; literal(source) &lt;&amp; <span class="stri">" not found"</span>);
      <span class="keywd">else</span>
        brainF(getf(source), IN, OUT);
      <span class="keywd">end if</span>;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="hanoi"><h3>Function to solve the Towers of Hanoi problem</h3></a>
<p>
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: hanoi (<a class="keywd_no_ul" href="../manual/params.htm#in_parameter">in</a> <a class="type" href="../manual/types.htm#integer">integer</a>: disk, <a class="keywd_no_ul" href="../manual/params.htm#in_parameter">in</a> <a class="type" href="../manual/types.htm#string">string</a>: source, <a class="keywd_no_ul" href="../manual/params.htm#in_parameter">in</a> <a class="type" href="../manual/types.htm#string">string</a>: dest, <a class="keywd_no_ul" href="../manual/params.htm#in_parameter">in</a> <a class="type" href="../manual/types.htm#string">string</a>: via) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> disk > 0 <span class="keywd">then</span>
      hanoi(pred(disk), source, via, dest);
      writeln(<span class="stri">"Move disk "</span> &lt;&amp; disk &lt;&amp; <span class="stri">" from "</span> &lt;&amp; source &lt;&amp; <span class="stri">" to "</span> &lt;&amp; dest);
      hanoi(pred(disk), via, dest, source);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="reciprocal_values"><h3>Write reciprocal values of the natural numbers from 1 to 20 with 60 digits</h3></a>
<p>
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bigint.htm">bigint.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bigrat.htm">bigrat.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#bigInteger">bigInteger</a>: number <span class="keywd">is</span> 0_;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1_ <span class="keywd">to</span> 20_ <span class="keywd">do</span>
      writeln(1_/number <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 60);
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="roman_numerals"><h3>Write the numbers between 1 and 3999 as roman numerals</h3></a>
<p>
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/stdio.htm">stdio.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/wrinum.htm">wrinum.s7i</a>"</span>;


<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 3999 <span class="keywd">do</span>
      writeln(str(ROMAN, number));
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre></div>

<div><a name="decode_roman_numerals"><h3>Decode roman numerals</h3></a>
<p>
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#integer">integer</a>: ROMAN parse (<a class="keywd_no_ul" href="../manual/params.htm#in_parameter">in</a> <a class="type" href="../manual/types.htm#string">string</a>: roman) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: arabic <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: lastval <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> length(roman) <span class="keywd">downto</span> 1 <span class="keywd">do</span>
      <span class="keywd">case</span> roman[index] <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'M'</span>, <span class="stri">'m'</span>}: number := 1000;
        <span class="keywd">when</span> {<span class="stri">'D'</span>, <span class="stri">'d'</span>}: number :=  500;
        <span class="keywd">when</span> {<span class="stri">'C'</span>, <span class="stri">'c'</span>}: number :=  100;
        <span class="keywd">when</span> {<span class="stri">'L'</span>, <span class="stri">'l'</span>}: number :=   50;
        <span class="keywd">when</span> {<span class="stri">'X'</span>, <span class="stri">'x'</span>}: number :=   10;
        <span class="keywd">when</span> {<span class="stri">'V'</span>, <span class="stri">'v'</span>}: number :=    5;
        <span class="keywd">when</span> {<span class="stri">'I'</span>, <span class="stri">'i'</span>}: number :=    1;
        <span class="keywd">otherwise</span>:       <span class="keywd">raise</span> RANGE_ERROR;
      <span class="keywd">end case</span>;
      <span class="keywd">if</span> number &lt; lastval <span class="keywd">then</span>
        arabic -:= number;
      <span class="keywd">else</span>
        arabic +:= number;
      <span class="keywd">end if</span>;
      lastval := number;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../algorith/file.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../algorith/others.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
