<html>
<head>
<meta charset="utf-8" />
<title>
Subject index</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="index.htm"><big>Seed7</big></a>
<a class="menu" href="faq.htm">FAQ</a>
<a class="menu" href="manual/index.htm">Manual</a>
<a class="menu" href="scrshots/index.htm">Programs</a>
<a class="menu" href="examples/index.htm">Examples</a>
<a class="menu" href="libraries/index.htm">Libraries</a>
<a class="menu" href="algorith/index.htm">Algorithms</a>
<a class="menu" href="benchmks/index.htm">Benchmarks</a>
<a class="menu" href="subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="build.htm">Build Seed7</a>
<a class="menu" href="links.htm">Links</a>

</div>
<div class="content">
<div style="padding-right:20;">
<p></p><hr /><h1 align="center">
Subject index
</h1><hr />
<p></p>

<h3>!</h3>
<ul>
<li><a href="libraries/bigint.htm#!(in_bigInteger)">const func bigInteger: <b>!</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigint.htm#(in_bigInteger)!(in_var_bigInteger)">const func bigInteger: (in bigInteger: n) <b>!</b> (in var bigInteger: k)</a></li>
<li><a href="libraries/integer.htm#!(in_integer)">const func integer: <b>!</b> (in integer: number)</a></li>
<li><a href="libraries/integer.htm#(in_integer)!(in_integer)">const func integer: (in integer: n) <b>!</b> (in integer: k)</a></li>
</ul>
<h3>&amp;</h3>
<ul>
<li><a href="libraries/array.htm#(in_arrayType)&amp;(in_arrayType)">const func arrayType: (in arrayType: arr1) <b>&amp;</b> (in arrayType: arr2)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)&amp;(in_bin32)">const func bin32: (in bin32: bits1) <b>&amp;</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)&amp;(in_bin64)">const func bin64: (in bin64: bits1) <b>&amp;</b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)&amp;(in_bitset)">const func bitset: (in bitset: set1) <b>&amp;</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)&amp;(in_setType)">const func setType: (in setType: set1) <b>&amp;</b> (in setType: set2)</a></li>
<li><a href="libraries/cgidialog.htm#(in_dialogElement)&amp;(in_dialogElement)">const func dialogSequenceBase: (in dialogElement: element1) <b>&amp;</b> (in dialogElement: element2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)&amp;(in_setType)">const func setType: (in setType: set1) <b>&amp;</b> (in setType: set2)</a></li>
<li><a href="libraries/idxarray.htm#(in_arrayType)&amp;(in_arrayType)">const func arrayType: (in arrayType: arr1) <b>&amp;</b> (in arrayType: arr2)</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)&amp;(in_ref_list)">const func ref_list: (in ref_list: refList1) <b>&amp;</b> (in ref_list: refList2)</a></li>
<li><a href="libraries/string.htm#(in_string)&amp;(in_string)">const func string: (in string: stri1) <b>&amp;</b> (in string: stri2)</a></li>
</ul>
<h3>&amp;:=</h3>
<ul>
<li><a href="libraries/array.htm#(inout_arrayType)&amp;:=(in_arrayType)">const proc: (inout arrayType: arr) <b>&amp;:=</b> (in arrayType: extension)</a></li>
<li><a href="libraries/array.htm#(inout_arrayType)&amp;:=(in_baseType)">const proc: (inout arrayType: arr) <b>&amp;:=</b> (in baseType: element)</a></li>
<li><a href="libraries/bin32.htm#(inout_bin32)&amp;:=(in_bin32)">const proc: (inout bin32: bits1) <b>&amp;:=</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(inout_bin64)&amp;:=(in_bin64)">const proc: (inout bin64: bits1) <b>&amp;:=</b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(inout_bitset)&amp;:=(in_bitset)">const proc: (inout bitset: dest) <b>&amp;:=</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(inout_setType)&amp;:=(in_setType)">const proc: (inout setType: dest) <b>&amp;:=</b> (in setType: set2)</a></li>
<li><a href="libraries/hashsetof.htm#(inout_setType)&amp;:=(in_setType)">const proc: (inout setType: dest) <b>&amp;:=</b> (in setType: set2)</a></li>
<li><a href="libraries/idxarray.htm#(inout_arrayType)&amp;:=(in_arrayType)">const proc: (inout arrayType: arr) <b>&amp;:=</b> (in arrayType: extension)</a></li>
<li><a href="libraries/idxarray.htm#(inout_arrayType)&amp;:=(in_baseType)">const proc: (inout arrayType: arr) <b>&amp;:=</b> (in baseType: element)</a></li>
<li><a href="libraries/ref_list.htm#(inout_ref_list)&amp;:=(in_ref_list)">const proc: (inout ref_list: dest) <b>&amp;:=</b> (in ref_list: extension)</a></li>
<li><a href="libraries/string.htm#(inout_string)&amp;:=(in_string)">const proc: (inout string: destination) <b>&amp;:=</b> (in string: extension)</a></li>
<li><a href="libraries/string.htm#(inout_string)&amp;:=(in_char)">const proc: (inout string: destination) <b>&amp;:=</b> (in char: extension)</a></li>
</ul>
<h3>'attr' parameter</h3>
<ul>
<li><a href="manual/params.htm#attr_parameter">'attr' parameter</a></li>
</ul>
<h3>'in var' parameter</h3>
<ul>
<li><a href="manual/params.htm#in_var_parameter">'in var' parameter</a></li>
</ul>
<h3>'in' parameter</h3>
<ul>
<li><a href="manual/params.htm#in_parameter">'in' parameter</a></li>
</ul>
<h3>'inout' parameter</h3>
<ul>
<li><a href="manual/params.htm#inout_parameter">'inout' parameter</a></li>
</ul>
<h3>'ref' parameter</h3>
<ul>
<li><a href="manual/params.htm#ref_parameter">'ref' parameter</a></li>
</ul>
<h3>'val' parameter</h3>
<ul>
<li><a href="manual/params.htm#val_parameter">'val' parameter</a></li>
</ul>
<h3>*</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">const func bigInteger: (in bigInteger: factor1) <b>*</b> (in bigInteger: factor2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)*(in_bigRational)">const func bigRational: (in bigRational: factor1) <b>*</b> (in bigRational: factor2)</a></li>
<li><a href="libraries/complex.htm#(in_complex)*(in_complex)">const func complex: (in complex: factor1) <b>*</b> (in complex: factor2)</a></li>
<li><a href="libraries/duration.htm#(in_integer)*(in_duration)">const func duration: (in integer: number) <b>*</b> (in duration: aDuration)</a></li>
<li><a href="libraries/duration.htm#(in_duration)*(in_integer)">const func duration: (in duration: aDuration) <b>*</b> (in integer: number)</a></li>
<li><a href="libraries/float.htm#(in_float)*(in_float)">const func float: (in float: factor1) <b>*</b> (in float: factor2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)*(in_integer)">const func integer: (in integer: factor1) <b>*</b> (in integer: factor2)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)*(in_float)">const func float: (in integer: factor1) <b>*</b> (in float: factor2)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)*(in_integer)">const func float: (in float: factor1) <b>*</b> (in integer: factor2)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)*(in_rational)">const func rational: (in integer: factor1) <b>*</b> (in rational: factor2)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)*(in_integer)">const func rational: (in rational: factor1) <b>*</b> (in integer: factor2)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)*(in_float)">const func float: (in rational: factor1) <b>*</b> (in float: factor2)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)*(in_rational)">const func float: (in float: factor1) <b>*</b> (in rational: factor2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)*(in_rational)">const func rational: (in rational: factor1) <b>*</b> (in rational: factor2)</a></li>
<li><a href="libraries/vector3d.htm#(in_vector3d)*(in_float)">const func vector3d: (in vector3d: v) <b>*</b> (in float: num)</a></li>
</ul>
<h3>**</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)**(in_integer)">const func bigInteger: (in bigInteger: base) <b>**</b> (in integer: exponent)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)**(in_integer)">const func bigRational: (in bigRational: base) <b>**</b> (in integer: exponent)</a></li>
<li><a href="libraries/complex.htm#(in_complex)**(in_integer)">const func complex: (in complex: base) <b>**</b> (in integer: exponent)</a></li>
<li><a href="libraries/float.htm#(in_float)**(in_integer)">const func float: (in float: base) <b>**</b> (in integer: exponent)</a></li>
<li><a href="libraries/float.htm#(in_float)**(in_float)">const func float: (in float: base) <b>**</b> (in float: exponent)</a></li>
<li><a href="libraries/integer.htm#(in_integer)**(in_integer)">const func integer: (in integer: base) <b>**</b> (in integer: exponent)</a></li>
<li><a href="libraries/rational.htm#(in_rational)**(in_integer)">const func rational: (in rational: base) <b>**</b> (in integer: exponent)</a></li>
</ul>
<h3>*:=</h3>
<ul>
<li><a href="libraries/bigint.htm#(inout_bigInteger)*:=(in_bigInteger)">const proc: (inout bigInteger: number) <b>*:=</b> (in bigInteger: factor)</a></li>
<li><a href="libraries/bigrat.htm#(inout_bigRational)*:=(in_bigRational)">const proc: (inout bigRational: number) <b>*:=</b> (in bigRational: factor)</a></li>
<li><a href="libraries/complex.htm#(inout_complex)*:=(in_complex)">const proc: (inout complex: number) <b>*:=</b> (in complex: factor)</a></li>
<li><a href="libraries/float.htm#(inout_float)*:=(in_float)">const proc: (inout float: number) <b>*:=</b> (in float: factor)</a></li>
<li><a href="libraries/integer.htm#(inout_integer)*:=(in_integer)">const proc: (inout integer: number) <b>*:=</b> (in integer: factor)</a></li>
<li><a href="libraries/rational.htm#(inout_rational)*:=(in_rational)">const proc: (inout rational: number) <b>*:=</b> (in rational: factor)</a></li>
<li><a href="libraries/vector3d.htm#(inout_vector3d)*:=(in_float)">const proc: (inout vector3d: vect) <b>*:=</b> (in float: number)</a></li>
</ul>
<h3>+</h3>
<ul>
<li><a href="libraries/bigint.htm#+(in_bigInteger)">const func bigInteger: <b>+</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigint.htm#(in_bigInteger)+(in_bigInteger)">const func bigInteger: (in bigInteger: summand1) <b>+</b> (in bigInteger: summand2)</a></li>
<li><a href="libraries/bigrat.htm#+(in_bigRational)">const func bigRational: <b>+</b> (in bigRational: number)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)+(in_bigRational)">const func bigRational: (in bigRational: summand1) <b>+</b> (in bigRational: summand2)</a></li>
<li><a href="libraries/color.htm#(in_color)+(in_color)">const func color: (in color: col1) <b>+</b> (in color: col2)</a></li>
<li><a href="libraries/complex.htm#+(in_complex)">const func complex: <b>+</b> (in complex: number)</a></li>
<li><a href="libraries/complex.htm#(in_complex)+(in_complex)">const func complex: (in complex: summand1) <b>+</b> (in complex: summand2)</a></li>
<li><a href="libraries/duration.htm#+(in_duration)">const func duration: <b>+</b> (in duration: aDuration)</a></li>
<li><a href="libraries/duration.htm#(in_duration)+(in_duration)">const func duration: (in duration: aDuration1) <b>+</b> (in duration: aDuration2)</a></li>
<li><a href="libraries/duration.htm#(in_time)+(in_duration)">const func time: (in time: tim) <b>+</b> (in duration: aDuration)</a></li>
<li><a href="libraries/float.htm#+(in_float)">const func float: <b>+</b> (in float: number)</a></li>
<li><a href="libraries/float.htm#(in_float)+(in_float)">const func float: (in float: summand1) <b>+</b> (in float: summand2)</a></li>
<li><a href="libraries/integer.htm#+(in_integer)">const func integer: <b>+</b> (in integer: number)</a></li>
<li><a href="libraries/integer.htm#(in_integer)+(in_integer)">const func integer: (in integer: summand1) <b>+</b> (in integer: summand2)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)+(in_float)">const func float: (in integer: summand1) <b>+</b> (in float: summand2)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)+(in_integer)">const func float: (in float: summand1) <b>+</b> (in integer: summand2)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)+(in_rational)">const func rational: (in integer: summand1) <b>+</b> (in rational: summand2)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)+(in_integer)">const func rational: (in rational: summand1) <b>+</b> (in integer: summand2)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)+(in_float)">const func float: (in rational: summand1) <b>+</b> (in float: summand2)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)+(in_rational)">const func float: (in float: summand1) <b>+</b> (in rational: summand2)</a></li>
<li><a href="libraries/rational.htm#+(in_rational)">const func rational: <b>+</b> (in rational: number)</a></li>
<li><a href="libraries/rational.htm#(in_rational)+(in_rational)">const func rational: (in rational: summand1) <b>+</b> (in rational: summand2)</a></li>
<li><a href="libraries/vector3d.htm#(in_vector3d)+(in_vector3d)">const func vector3d: (in vector3d: a) <b>+</b> (in vector3d: b)</a></li>
</ul>
<h3>+:=</h3>
<ul>
<li><a href="libraries/bigint.htm#(inout_bigInteger)+:=(in_bigInteger)">const proc: (inout bigInteger: number) <b>+:=</b> (in bigInteger: delta)</a></li>
<li><a href="libraries/bigrat.htm#(inout_bigRational)+:=(in_bigRational)">const proc: (inout bigRational: number) <b>+:=</b> (in bigRational: delta)</a></li>
<li><a href="libraries/complex.htm#(inout_complex)+:=(in_complex)">const proc: (inout complex: number) <b>+:=</b> (in complex: delta)</a></li>
<li><a href="libraries/duration.htm#(inout_duration)+:=(in_duration)">const proc: (inout duration: aDuration) <b>+:=</b> (in duration: delta)</a></li>
<li><a href="libraries/duration.htm#(inout_time)+:=(in_duration)">const proc: (inout time: tim) <b>+:=</b> (in duration: aDuration)</a></li>
<li><a href="libraries/float.htm#(inout_float)+:=(in_float)">const proc: (inout float: number) <b>+:=</b> (in float: delta)</a></li>
<li><a href="libraries/integer.htm#(inout_integer)+:=(in_integer)">const proc: (inout integer: number) <b>+:=</b> (in integer: delta)</a></li>
<li><a href="libraries/rational.htm#(inout_rational)+:=(in_rational)">const proc: (inout rational: number) <b>+:=</b> (in rational: delta)</a></li>
<li><a href="libraries/vector3d.htm#(inout_vector3d)+:=(in_float)">const proc: (inout vector3d: vect) <b>+:=</b> (in float: delta)</a></li>
</ul>
<h3>-</h3>
<ul>
<li><a href="libraries/bigint.htm#-(in_bigInteger)">const func bigInteger: <b>-</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigint.htm#(in_bigInteger)-(in_bigInteger)">const func bigInteger: (in bigInteger: minuend) <b>-</b> (in bigInteger: subtrahend)</a></li>
<li><a href="libraries/bigrat.htm#-(in_bigRational)">const func bigRational: <b>-</b> (in bigRational: number)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)-(in_bigRational)">const func bigRational: (in bigRational: minuend) <b>-</b> (in bigRational: subtrahend)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)-(in_bitset)">const func bitset: (in bitset: set1) <b>-</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)-(in_setType)">const func setType: (in setType: set1) <b>-</b> (in setType: set2)</a></li>
<li><a href="libraries/complex.htm#-(in_complex)">const func complex: <b>-</b> (in complex: number)</a></li>
<li><a href="libraries/complex.htm#(in_complex)-(in_complex)">const func complex: (in complex: minuend) <b>-</b> (in complex: subtrahend)</a></li>
<li><a href="libraries/duration.htm#-(in_duration)">const func duration: <b>-</b> (in duration: aDuration)</a></li>
<li><a href="libraries/duration.htm#(in_duration)-(in_duration)">const func duration: (in duration: aDuration1) <b>-</b> (in duration: aDuration2)</a></li>
<li><a href="libraries/duration.htm#(in_time)-(in_duration)">const func time: (in time: tim) <b>-</b> (in duration: aDuration)</a></li>
<li><a href="libraries/duration.htm#(in_time)-(in_time)">const func duration: (in time: tim1) <b>-</b> (in time: tim2)</a></li>
<li><a href="libraries/float.htm#-(in_float)">const func float: <b>-</b> (in float: number)</a></li>
<li><a href="libraries/float.htm#(in_float)-(in_float)">const func float: (in float: minuend) <b>-</b> (in float: subtrahend)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)-(in_setType)">const func setType: (in setType: set1) <b>-</b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#-(in_integer)">const func integer: <b>-</b> (in integer: number)</a></li>
<li><a href="libraries/integer.htm#(in_integer)-(in_integer)">const func integer: (in integer: minuend) <b>-</b> (in integer: subtrahend)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)-(in_float)">const func float: (in integer: minuend) <b>-</b> (in float: subtrahend)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)-(in_integer)">const func float: (in float: minuend) <b>-</b> (in integer: subtrahend)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)-(in_rational)">const func rational: (in integer: minuend) <b>-</b> (in rational: subtrahend)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)-(in_integer)">const func rational: (in rational: minuend) <b>-</b> (in integer: subtrahend)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)-(in_float)">const func float: (in rational: minuend) <b>-</b> (in float: subtrahend)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)-(in_rational)">const func float: (in float: minuend) <b>-</b> (in rational: subtrahend)</a></li>
<li><a href="libraries/rational.htm#-(in_rational)">const func rational: <b>-</b> (in rational: number)</a></li>
<li><a href="libraries/rational.htm#(in_rational)-(in_rational)">const func rational: (in rational: minuend) <b>-</b> (in rational: subtrahend)</a></li>
<li><a href="libraries/vector3d.htm#-(in_vector3d)">const func vector3d: <b>-</b> (in vector3d: a)</a></li>
<li><a href="libraries/vector3d.htm#(in_vector3d)-(in_vector3d)">const func vector3d: (in vector3d: a) <b>-</b> (in vector3d: b)</a></li>
</ul>
<h3>-:=</h3>
<ul>
<li><a href="libraries/bigint.htm#(inout_bigInteger)-:=(in_bigInteger)">const proc: (inout bigInteger: number) <b>-:=</b> (in bigInteger: delta)</a></li>
<li><a href="libraries/bigrat.htm#(inout_bigRational)-:=(in_bigRational)">const proc: (inout bigRational: number) <b>-:=</b> (in bigRational: delta)</a></li>
<li><a href="libraries/bitset.htm#(inout_bitset)-:=(in_bitset)">const proc: (inout bitset: dest) <b>-:=</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(inout_setType)-:=(in_setType)">const proc: (inout setType: dest) <b>-:=</b> (in setType: set2)</a></li>
<li><a href="libraries/complex.htm#(inout_complex)-:=(in_complex)">const proc: (inout complex: number) <b>-:=</b> (in complex: delta)</a></li>
<li><a href="libraries/duration.htm#(inout_duration)-:=(in_duration)">const proc: (inout duration: aDuration) <b>-:=</b> (in duration: delta)</a></li>
<li><a href="libraries/duration.htm#(inout_time)-:=(in_duration)">const proc: (inout time: tim) <b>-:=</b> (in duration: aDuration)</a></li>
<li><a href="libraries/float.htm#(inout_float)-:=(in_float)">const proc: (inout float: number) <b>-:=</b> (in float: delta)</a></li>
<li><a href="libraries/hashsetof.htm#(inout_setType)-:=(in_setType)">const proc: (inout setType: dest) <b>-:=</b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(inout_integer)-:=(in_integer)">const proc: (inout integer: number) <b>-:=</b> (in integer: delta)</a></li>
<li><a href="libraries/rational.htm#(inout_rational)-:=(in_rational)">const proc: (inout rational: number) <b>-:=</b> (in rational: delta)</a></li>
<li><a href="libraries/vector3d.htm#(inout_vector3d)-:=(in_float)">const proc: (inout vector3d: vect) <b>-:=</b> (in float: delta)</a></li>
</ul>
<h3>. first</h3>
<ul>
<li><a href="libraries/boolean.htm#(attr_boolean)._first">const boolean: (attr boolean) <b>. first</b></a></li>
<li><a href="libraries/char.htm#(attr_char)._first">const char: (attr char) <b>. first</b></a></li>
<li><a href="libraries/enumeration.htm#(attr_enumType)._first">const enumType: (attr enumType) <b>. first</b></a></li>
<li><a href="libraries/integer.htm#(attr_integer)._first">const integer: (attr integer) <b>. first</b></a></li>
<li><a href="libraries/subrange.htm#(attr_subrangeType)._first">const subrangeType: (attr subrangeType) <b>. first</b></a></li>
</ul>
<h3>. last</h3>
<ul>
<li><a href="libraries/boolean.htm#(attr_boolean)._last">const boolean: (attr boolean) <b>. last</b></a></li>
<li><a href="libraries/char.htm#(attr_char)._last">const char: (attr char) <b>. last</b></a></li>
<li><a href="libraries/enumeration.htm#(attr_enumType)._last">const enumType: (attr enumType) <b>. last</b></a></li>
<li><a href="libraries/integer.htm#(attr_integer)._last">const integer: (attr integer) <b>. last</b></a></li>
<li><a href="libraries/subrange.htm#(attr_subrangeType)._last">const subrangeType: (attr subrangeType) <b>. last</b></a></li>
</ul>
<h3>. value</h3>
<ul>
<li><a href="libraries/bigint.htm#(attr_bigInteger)._value">const bigInteger: (attr bigInteger) <b>. value</b></a></li>
<li><a href="libraries/bin32.htm#(attr_bin32)._value">const bin32: (attr bin32) <b>. value</b></a></li>
<li><a href="libraries/bin64.htm#(attr_bin64)._value">const bin64: (attr bin64) <b>. value</b></a></li>
<li><a href="libraries/bitset.htm#(attr_bitset)._value">const bitset: (attr bitset) <b>. value</b></a></li>
<li><a href="libraries/bitsetof.htm#(attr_setType)._value">const setType: (attr setType) <b>. value</b></a></li>
<li><a href="libraries/boolean.htm#(attr_boolean)._value">const boolean: (attr boolean) <b>. value</b></a></li>
<li><a href="libraries/bstring.htm#(attr_bstring)._value">const bstring: (attr bstring) <b>. value</b></a></li>
<li><a href="libraries/category.htm#(attr_category)._value">const category: (attr category) <b>. value</b></a></li>
<li><a href="libraries/char.htm#(attr_char)._value">const char: (attr char) <b>. value</b></a></li>
<li><a href="libraries/enumeration.htm#(attr_enumType)._value">const enumType: (attr enumType) <b>. value</b></a></li>
<li><a href="libraries/filesys.htm#(attr_fileSys)._value">const fileSys: (attr fileSys) <b>. value</b></a></li>
<li><a href="libraries/float.htm#(attr_float)._value">const float: (attr float) <b>. value</b></a></li>
<li><a href="libraries/hashsetof.htm#(attr_setType)._value">const setType: (attr setType) <b>. value</b></a></li>
<li><a href="libraries/integer.htm#(attr_integer)._value">const integer: (attr integer) <b>. value</b></a></li>
<li><a href="libraries/null_file.htm#(attr_file)._value">const file: (attr file) <b>. value</b></a></li>
<li><a href="libraries/process.htm#(attr_process)._value">const process: (attr process) <b>. value</b></a></li>
<li><a href="libraries/progs.htm#(attr_program)._value">const program: (attr program) <b>. value</b></a></li>
<li><a href="libraries/reference.htm#(attr_reference)._value">const reference: (attr reference) <b>. value</b></a></li>
<li><a href="libraries/ref_list.htm#(attr_ref_list)._value">const ref_list: (attr ref_list) <b>. value</b></a></li>
<li><a href="libraries/sql_base.htm#(attr_database)._value">const database: (attr database) <b>. value</b></a></li>
<li><a href="libraries/sql_base.htm#(attr_sqlStatement)._value">const sqlStatement: (attr sqlStatement) <b>. value</b></a></li>
<li><a href="libraries/string.htm#(attr_string)._value">const string: (attr string) <b>. value</b></a></li>
</ul>
<h3>/</h3>
<ul>
<li><a href="libraries/bigrat.htm#(in_bigInteger)/(in_bigInteger)">const func bigRational: (in bigInteger: numerator) <b>/</b> (in bigInteger: denominator)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)/(in_bigRational)">const func bigRational: (in bigRational: dividend) <b>/</b> (in bigRational: divisor)</a></li>
<li><a href="libraries/complex.htm#(in_complex)/(in_complex)">const func complex: (in complex: dividend) <b>/</b> (in complex: divisor)</a></li>
<li><a href="libraries/float.htm#(in_float)/(in_float)">const func float: (in float: dividend) <b>/</b> (in float: divisor)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)/(in_float)">const func float: (in integer: dividend) <b>/</b> (in float: divisor)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)/(in_integer)">const func float: (in float: dividend) <b>/</b> (in integer: divisor)</a></li>
<li><a href="libraries/mixarith.htm#(in_integer)/(in_rational)">const func rational: (in integer: dividend) <b>/</b> (in rational: divisor)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)/(in_integer)">const func rational: (in rational: dividend) <b>/</b> (in integer: divisor)</a></li>
<li><a href="libraries/mixarith.htm#(in_rational)/(in_float)">const func float: (in rational: dividend) <b>/</b> (in float: divisor)</a></li>
<li><a href="libraries/mixarith.htm#(in_float)/(in_rational)">const func float: (in float: dividend) <b>/</b> (in rational: divisor)</a></li>
<li><a href="libraries/rational.htm#(in_integer)/(in_integer)">const func rational: (in integer: numerator) <b>/</b> (in integer: denominator)</a></li>
<li><a href="libraries/rational.htm#(in_rational)/(in_rational)">const func rational: (in rational: dividend) <b>/</b> (in rational: divisor)</a></li>
<li><a href="libraries/vector3d.htm#(in_vector3d)/(in_float)">const func vector3d: (in vector3d: v) <b>/</b> (in float: num)</a></li>
</ul>
<h3>/:=</h3>
<ul>
<li><a href="libraries/bigrat.htm#(inout_bigRational)/:=(in_bigRational)">const proc: (inout bigRational: number) <b>/:=</b> (in bigRational: divisor)</a></li>
<li><a href="libraries/complex.htm#(inout_complex)/:=(in_complex)">const proc: (inout complex: number) <b>/:=</b> (in complex: divisor)</a></li>
<li><a href="libraries/float.htm#(inout_float)/:=(in_float)">const proc: (inout float: number) <b>/:=</b> (in float: divisor)</a></li>
<li><a href="libraries/rational.htm#(inout_rational)/:=(in_rational)">const proc: (inout rational: number) <b>/:=</b> (in rational: divisor)</a></li>
<li><a href="libraries/vector3d.htm#(inout_vector3d)/:=(in_float)">const proc: (inout vector3d: vect) <b>/:=</b> (in float: number)</a></li>
</ul>
<h3>&lt;</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)&lt;(in_bigInteger)">const func boolean: (in bigInteger: number1) <b>&lt;</b> (in bigInteger: number2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)&lt;(in_bigRational)">const func boolean: (in bigRational: number1) <b>&lt;</b> (in bigRational: number2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)&lt;(in_bitset)">const func boolean: (in bitset: set1) <b>&lt;</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)&lt;(in_setType)">const func boolean: (in setType: set1) <b>&lt;</b> (in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#(in_boolean)&lt;(in_boolean)">const func boolean: (in boolean: boolValue1) <b>&lt;</b> (in boolean: boolValue2)</a></li>
<li><a href="libraries/char.htm#(in_char)&lt;(in_char)">const func boolean: (in char: ch1) <b>&lt;</b> (in char: ch2)</a></li>
<li><a href="libraries/duration.htm#(in_duration)&lt;(in_duration)">const func boolean: (in duration: aDuration1) <b>&lt;</b> (in duration: aDuration2)</a></li>
<li><a href="libraries/float.htm#(in_float)&lt;(in_float)">const func boolean: (in float: number1) <b>&lt;</b> (in float: number2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)&lt;(in_setType)">const func boolean: (in setType: set1) <b>&lt;</b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)&lt;(in_integer)">const func boolean: (in integer: number1) <b>&lt;</b> (in integer: number2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)&lt;(in_rational)">const func boolean: (in rational: number1) <b>&lt;</b> (in rational: number2)</a></li>
<li><a href="libraries/string.htm#(in_string)&lt;(in_string)">const func boolean: (in string: stri1) <b>&lt;</b> (in string: stri2)</a></li>
<li><a href="libraries/time.htm#(in_time)&lt;(in_time)">const func boolean: (in time: aTime1) <b>&lt;</b> (in time: aTime2)</a></li>
</ul>
<h3>&lt;&amp;</h3>
<ul>
<li><a href="libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">const func string: (in string: stri) <b>&lt;&amp;</b> (in aType: aValue)</a></li>
<li><a href="libraries/enable_io.htm#(in_aType)&lt;&amp;(in_string)">const func string: (in aType: aValue) <b>&lt;&amp;</b> (in string: stri)</a></li>
<li><a href="libraries/string.htm#(in_string)&lt;&amp;(in_string)">const func string: (in string: stri1) <b>&lt;&amp;</b> (in string: stri2)</a></li>
</ul>
<h3>&lt;&lt;</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)&lt;&lt;(in_integer)">const func bigInteger: (in bigInteger: number) <b>&lt;&lt;</b> (in integer: lshift)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)&lt;&lt;(in_integer)">const func bin32: (in bin32: bits) <b>&lt;&lt;</b> (in integer: lshift)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)&lt;&lt;(in_integer)">const func bin64: (in bin64: bits) <b>&lt;&lt;</b> (in integer: lshift)</a></li>
<li><a href="libraries/float.htm#(in_float)&lt;&lt;(in_integer)">const func float: (in float: number) <b>&lt;&lt;</b> (in integer: exponent)</a></li>
<li><a href="libraries/integer.htm#(in_integer)&lt;&lt;(in_integer)">const func integer: (in integer: number) <b>&lt;&lt;</b> (in integer: lshift)</a></li>
</ul>
<h3>&lt;&lt;:=</h3>
<ul>
<li><a href="libraries/bigint.htm#(inout_bigInteger)&lt;&lt;:=(in_integer)">const proc: (inout bigInteger: number) <b>&lt;&lt;:=</b> (in integer: lshift)</a></li>
<li><a href="libraries/bin32.htm#(inout_bin32)&lt;&lt;:=(in_integer)">const proc: (inout bin32: bits) <b>&lt;&lt;:=</b> (in integer: lshift)</a></li>
<li><a href="libraries/bin64.htm#(inout_bin64)&lt;&lt;:=(in_integer)">const proc: (inout bin64: bits) <b>&lt;&lt;:=</b> (in integer: lshift)</a></li>
<li><a href="libraries/integer.htm#(inout_integer)&lt;&lt;:=(in_integer)">const proc: (inout integer: number) <b>&lt;&lt;:=</b> (in integer: lshift)</a></li>
</ul>
<h3>&lt;=</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)&lt;=(in_bigInteger)">const func boolean: (in bigInteger: number1) <b>&lt;=</b> (in bigInteger: number2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)&lt;=(in_bigRational)">const func boolean: (in bigRational: number1) <b>&lt;=</b> (in bigRational: number2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)&lt;=(in_bitset)">const func boolean: (in bitset: set1) <b>&lt;=</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)&lt;=(in_setType)">const func boolean: (in setType: set1) <b>&lt;=</b> (in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#(in_boolean)&lt;=(in_boolean)">const func boolean: (in boolean: boolValue1) <b>&lt;=</b> (in boolean: boolValue2)</a></li>
<li><a href="libraries/char.htm#(in_char)&lt;=(in_char)">const func boolean: (in char: ch1) <b>&lt;=</b> (in char: ch2)</a></li>
<li><a href="libraries/duration.htm#(in_duration)&lt;=(in_duration)">const func boolean: (in duration: aDuration1) <b>&lt;=</b> (in duration: aDuration2)</a></li>
<li><a href="libraries/float.htm#(in_float)&lt;=(in_float)">const func boolean: (in float: number1) <b>&lt;=</b> (in float: number2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)&lt;=(in_setType)">const func boolean: (in setType: set1) <b>&lt;=</b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)&lt;=(in_integer)">const func boolean: (in integer: number1) <b>&lt;=</b> (in integer: number2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)&lt;=(in_rational)">const func boolean: (in rational: number1) <b>&lt;=</b> (in rational: number2)</a></li>
<li><a href="libraries/string.htm#(in_string)&lt;=(in_string)">const func boolean: (in string: stri1) <b>&lt;=</b> (in string: stri2)</a></li>
<li><a href="libraries/time.htm#(in_time)&lt;=(in_time)">const func boolean: (in time: aTime1) <b>&lt;=</b> (in time: aTime2)</a></li>
</ul>
<h3>&lt;></h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)&lt;>(in_bigInteger)">const func boolean: (in bigInteger: number1) <b>&lt;></b> (in bigInteger: number2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)&lt;>(in_bigRational)">const func boolean: (in bigRational: number1) <b>&lt;></b> (in bigRational: number2)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)&lt;>(in_bin32)">const func boolean: (in bin32: bits1) <b>&lt;></b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)&lt;>(in_bin64)">const func boolean: (in bin64: bits1) <b>&lt;></b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)&lt;>(in_bitset)">const func boolean: (in bitset: set1) <b>&lt;></b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)&lt;>(in_setType)">const func boolean: (in setType: set1) <b>&lt;></b> (in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#(in_boolean)&lt;>(in_boolean)">const func boolean: (in boolean: boolValue1) <b>&lt;></b> (in boolean: boolValue2)</a></li>
<li><a href="libraries/bstring.htm#(in_bstring)&lt;>(in_bstring)">const func boolean: (in bstring: bstri1) <b>&lt;></b> (in bstring: bstri2)</a></li>
<li><a href="libraries/category.htm#(in_category)&lt;>(in_category)">const func boolean: (in category: cat1) <b>&lt;></b> (in category: cat2)</a></li>
<li><a href="libraries/char.htm#(in_char)&lt;>(in_char)">const func boolean: (in char: ch1) <b>&lt;></b> (in char: ch2)</a></li>
<li><a href="libraries/clib_file.htm#(in_clib_file)&lt;>(in_clib_file)">const func boolean: (in clib_file: file1) <b>&lt;></b> (in clib_file: file2)</a></li>
<li><a href="libraries/color.htm#(in_color)&lt;>(in_color)">const func boolean: (in color: col1) <b>&lt;></b> (in color: col2)</a></li>
<li><a href="libraries/complex.htm#(ref_complex)&lt;>(ref_complex)">const func boolean: (ref complex: number1) <b>&lt;></b> (ref complex: number2)</a></li>
<li><a href="libraries/duration.htm#(in_duration)&lt;>(in_duration)">const func boolean: (in duration: aDuration1) <b>&lt;></b> (in duration: aDuration2)</a></li>
<li><a href="libraries/elliptic.htm#(in_ecPoint)&lt;>(in_ecPoint)">const func boolean: (in ecPoint: point1) <b>&lt;></b> (in ecPoint: point2)</a></li>
<li><a href="libraries/enumeration.htm#(in_enumType)&lt;>(in_enumType)">const func boolean: (in enumType: enum1) <b>&lt;></b> (in enumType: enum2)</a></li>
<li><a href="libraries/float.htm#(in_float)&lt;>(in_float)">const func boolean: (in float: number1) <b>&lt;></b> (in float: number2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)&lt;>(in_setType)">const func boolean: (in setType: set1) <b>&lt;></b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)&lt;>(in_integer)">const func boolean: (in integer: number1) <b>&lt;></b> (in integer: number2)</a></li>
<li><a href="libraries/process.htm#(in_process)&lt;>(in_process)">const func boolean: (in process: process1) <b>&lt;></b> (in process: process2)</a></li>
<li><a href="libraries/progs.htm#(in_program)&lt;>(in_program)">const func boolean: (in program: prog1) <b>&lt;></b> (in program: prog2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)&lt;>(in_rational)">const func boolean: (in rational: number1) <b>&lt;></b> (in rational: number2)</a></li>
<li><a href="libraries/reference.htm#(in_reference)&lt;>(in_reference)">const func boolean: (in reference: ref1) <b>&lt;></b> (in reference: ref2)</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)&lt;>(in_ref_list)">const func boolean: (in ref_list: refList1) <b>&lt;></b> (in ref_list: refList2)</a></li>
<li><a href="libraries/sql_base.htm#(in_database)&lt;>(in_database)">const func boolean: (in database: db1) <b>&lt;></b> (in database: db2)</a></li>
<li><a href="libraries/sql_base.htm#(in_sqlStatement)&lt;>(in_sqlStatement)">const func boolean: (in sqlStatement: stmt1) <b>&lt;></b> (in sqlStatement: stmt2)</a></li>
<li><a href="libraries/string.htm#(in_string)&lt;>(in_string)">const func boolean: (in string: stri1) <b>&lt;></b> (in string: stri2)</a></li>
<li><a href="libraries/time.htm#(in_time)&lt;>(in_time)">const func boolean: (in time: aTime1) <b>&lt;></b> (in time: aTime2)</a></li>
<li><a href="libraries/vector3d.htm#(in_vector3d)&lt;>(in_vector3d)">const func boolean: (in vector3d: a) <b>&lt;></b> (in vector3d: b)</a></li>
</ul>
<h3>=</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)=(in_bigInteger)">const func boolean: (in bigInteger: number1) <b>=</b> (in bigInteger: number2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)=(in_bigRational)">const func boolean: (in bigRational: number1) <b>=</b> (in bigRational: number2)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)=(in_bin32)">const func boolean: (in bin32: bits1) <b>=</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)=(in_bin64)">const func boolean: (in bin64: bits1) <b>=</b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)=(in_bitset)">const func boolean: (in bitset: set1) <b>=</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)=(in_setType)">const func boolean: (in setType: set1) <b>=</b> (in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#(in_boolean)=(in_boolean)">const func boolean: (in boolean: boolValue1) <b>=</b> (in boolean: boolValue2)</a></li>
<li><a href="libraries/bstring.htm#(in_bstring)=(in_bstring)">const func boolean: (in bstring: bstri1) <b>=</b> (in bstring: bstri2)</a></li>
<li><a href="libraries/category.htm#(in_category)=(in_category)">const func boolean: (in category: cat1) <b>=</b> (in category: cat2)</a></li>
<li><a href="libraries/char.htm#(in_char)=(in_char)">const func boolean: (in char: ch1) <b>=</b> (in char: ch2)</a></li>
<li><a href="libraries/clib_file.htm#(in_clib_file)=(in_clib_file)">const func boolean: (in clib_file: file1) <b>=</b> (in clib_file: file2)</a></li>
<li><a href="libraries/color.htm#(in_color)=(in_color)">const func boolean: (in color: col1) <b>=</b> (in color: col2)</a></li>
<li><a href="libraries/complex.htm#(ref_complex)=(ref_complex)">const func boolean: (ref complex: number1) <b>=</b> (ref complex: number2)</a></li>
<li><a href="libraries/duration.htm#(in_duration)=(in_duration)">const func boolean: (in duration: aDuration1) <b>=</b> (in duration: aDuration2)</a></li>
<li><a href="libraries/elliptic.htm#(in_ecPoint)=(in_ecPoint)">const func boolean: (in ecPoint: point1) <b>=</b> (in ecPoint: point2)</a></li>
<li><a href="libraries/enumeration.htm#(in_enumType)=(in_enumType)">const func boolean: (in enumType: enum1) <b>=</b> (in enumType: enum2)</a></li>
<li><a href="libraries/float.htm#(in_float)=(in_float)">const func boolean: (in float: number1) <b>=</b> (in float: number2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)=(in_setType)">const func boolean: (in setType: set1) <b>=</b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)=(in_integer)">const func boolean: (in integer: number1) <b>=</b> (in integer: number2)</a></li>
<li><a href="libraries/process.htm#(in_process)=(in_process)">const func boolean: (in process: process1) <b>=</b> (in process: process2)</a></li>
<li><a href="libraries/progs.htm#(in_program)=(in_program)">const func boolean: (in program: prog1) <b>=</b> (in program: prog2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)=(in_rational)">const func boolean: (in rational: number1) <b>=</b> (in rational: number2)</a></li>
<li><a href="libraries/reference.htm#(in_reference)=(in_reference)">const func boolean: (in reference: ref1) <b>=</b> (in reference: ref2)</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)=(in_ref_list)">const func boolean: (in ref_list: refList1) <b>=</b> (in ref_list: refList2)</a></li>
<li><a href="libraries/sql_base.htm#(in_database)=(in_database)">const func boolean: (in database: db1) <b>=</b> (in database: db2)</a></li>
<li><a href="libraries/sql_base.htm#(in_sqlStatement)=(in_sqlStatement)">const func boolean: (in sqlStatement: stmt1) <b>=</b> (in sqlStatement: stmt2)</a></li>
<li><a href="libraries/string.htm#(in_string)=(in_string)">const func boolean: (in string: stri1) <b>=</b> (in string: stri2)</a></li>
<li><a href="libraries/time.htm#(in_time)=(in_time)">const func boolean: (in time: aTime1) <b>=</b> (in time: aTime2)</a></li>
<li><a href="libraries/vector3d.htm#(in_vector3d)=(in_vector3d)">const func boolean: (in vector3d: a) <b>=</b> (in vector3d: b)</a></li>
</ul>
<h3>></h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)>(in_bigInteger)">const func boolean: (in bigInteger: number1) <b>></b> (in bigInteger: number2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)>(in_bigRational)">const func boolean: (in bigRational: number1) <b>></b> (in bigRational: number2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)>(in_bitset)">const func boolean: (in bitset: set1) <b>></b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)>(in_setType)">const func boolean: (in setType: set1) <b>></b> (in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#(in_boolean)>(in_boolean)">const func boolean: (in boolean: boolValue1) <b>></b> (in boolean: boolValue2)</a></li>
<li><a href="libraries/char.htm#(in_char)>(in_char)">const func boolean: (in char: ch1) <b>></b> (in char: ch2)</a></li>
<li><a href="libraries/duration.htm#(in_duration)>(in_duration)">const func boolean: (in duration: aDuration1) <b>></b> (in duration: aDuration2)</a></li>
<li><a href="libraries/float.htm#(in_float)>(in_float)">const func boolean: (in float: number1) <b>></b> (in float: number2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)>(in_setType)">const func boolean: (in setType: set1) <b>></b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)>(in_integer)">const func boolean: (in integer: number1) <b>></b> (in integer: number2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)>(in_rational)">const func boolean: (in rational: number1) <b>></b> (in rational: number2)</a></li>
<li><a href="libraries/string.htm#(in_string)>(in_string)">const func boolean: (in string: stri1) <b>></b> (in string: stri2)</a></li>
<li><a href="libraries/time.htm#(in_time)>(in_time)">const func boolean: (in time: aTime1) <b>></b> (in time: aTime2)</a></li>
</ul>
<h3>>&lt;</h3>
<ul>
<li><a href="libraries/bin32.htm#(in_bin32)>&lt;(in_bin32)">const func bin32: (in bin32: bits1) <b>>&lt;</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)>&lt;(in_bin64)">const func bin64: (in bin64: bits1) <b>>&lt;</b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)>&lt;(in_bitset)">const func bitset: (in bitset: set1) <b>>&lt;</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)>&lt;(in_setType)">const func setType: (in setType: set1) <b>>&lt;</b> (in setType: set2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)>&lt;(in_setType)">const func setType: (in setType: set1) <b>>&lt;</b> (in setType: set2)</a></li>
</ul>
<h3>>&lt;:=</h3>
<ul>
<li><a href="libraries/bin32.htm#(inout_bin32)>&lt;:=(in_bin32)">const proc: (inout bin32: bits1) <b>>&lt;:=</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(inout_bin64)>&lt;:=(in_bin64)">const proc: (inout bin64: bits1) <b>>&lt;:=</b> (in bin64: bits2)</a></li>
</ul>
<h3>>=</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)>=(in_bigInteger)">const func boolean: (in bigInteger: number1) <b>>=</b> (in bigInteger: number2)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)>=(in_bigRational)">const func boolean: (in bigRational: number1) <b>>=</b> (in bigRational: number2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)>=(in_bitset)">const func boolean: (in bitset: set1) <b>>=</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)>=(in_setType)">const func boolean: (in setType: set1) <b>>=</b> (in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#(in_boolean)>=(in_boolean)">const func boolean: (in boolean: boolValue1) <b>>=</b> (in boolean: boolValue2)</a></li>
<li><a href="libraries/char.htm#(in_char)>=(in_char)">const func boolean: (in char: ch1) <b>>=</b> (in char: ch2)</a></li>
<li><a href="libraries/duration.htm#(in_duration)>=(in_duration)">const func boolean: (in duration: aDuration1) <b>>=</b> (in duration: aDuration2)</a></li>
<li><a href="libraries/float.htm#(in_float)>=(in_float)">const func boolean: (in float: number1) <b>>=</b> (in float: number2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)>=(in_setType)">const func boolean: (in setType: set1) <b>>=</b> (in setType: set2)</a></li>
<li><a href="libraries/integer.htm#(in_integer)>=(in_integer)">const func boolean: (in integer: number1) <b>>=</b> (in integer: number2)</a></li>
<li><a href="libraries/rational.htm#(in_rational)>=(in_rational)">const func boolean: (in rational: number1) <b>>=</b> (in rational: number2)</a></li>
<li><a href="libraries/string.htm#(in_string)>=(in_string)">const func boolean: (in string: stri1) <b>>=</b> (in string: stri2)</a></li>
<li><a href="libraries/time.htm#(in_time)>=(in_time)">const func boolean: (in time: aTime1) <b>>=</b> (in time: aTime2)</a></li>
</ul>
<h3>>></h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)>>(in_integer)">const func bigInteger: (in bigInteger: number) <b>>></b> (in integer: rshift)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)>>(in_integer)">const func bin32: (in bin32: bits) <b>>></b> (in integer: lshift)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)>>(in_integer)">const func bin64: (in bin64: bits) <b>>></b> (in integer: lshift)</a></li>
<li><a href="libraries/float.htm#(in_float)>>(in_integer)">const func float: (in float: number) <b>>></b> (in integer: exponent)</a></li>
<li><a href="libraries/integer.htm#(in_integer)>>(in_integer)">const func integer: (in integer: number) <b>>></b> (in integer: rshift)</a></li>
</ul>
<h3>>>:=</h3>
<ul>
<li><a href="libraries/bigint.htm#(inout_bigInteger)>>:=(in_integer)">const proc: (inout bigInteger: number) <b>>>:=</b> (in integer: rshift)</a></li>
<li><a href="libraries/bin32.htm#(inout_bin32)>>:=(in_integer)">const proc: (inout bin32: bits) <b>>>:=</b> (in integer: rshift)</a></li>
<li><a href="libraries/bin64.htm#(inout_bin64)>>:=(in_integer)">const proc: (inout bin64: bits) <b>>>:=</b> (in integer: rshift)</a></li>
<li><a href="libraries/integer.htm#(inout_integer)>>:=(in_integer)">const proc: (inout integer: number) <b>>>:=</b> (in integer: rshift)</a></li>
</ul>
<h3>?</h3>
<ul>
<li><a href="libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">const func aType: (in boolean: condition) <b>?</b> (ref func aType: thenValue) : (ref func aType: elseValue)</a></li>
</ul>
<h3>@:= [</h3>
<ul>
<li><a href="libraries/bitset.htm#(inout_bitset)@:=_[(in_integer)](in_boolean)">const proc: (inout bitset: aSet) <b>@:= [</b> (in integer: number) ] (in boolean: isElement)</a></li>
<li><a href="libraries/bitsetof.htm#(inout_setType)@:=_[(in_baseType)](in_boolean)">const proc: (inout setType: aSet) <b>@:= [</b> (in baseType: aValue) ] (in boolean: isElement)</a></li>
<li><a href="libraries/hash.htm#(inout_hashType)@:=_[(in_keyType)](in_baseType)">const proc: (inout hashType: aHashMap) <b>@:= [</b> (in keyType: aKey) ] (in baseType: anElem)</a></li>
<li><a href="libraries/hashsetof.htm#(inout_setType)@:=_[(in_baseType)](in_boolean)">const proc: (inout setType: aSet) <b>@:= [</b> (in baseType: aValue) ] (in boolean: isElement)</a></li>
<li><a href="libraries/ref_list.htm#(inout_ref_list)@:=_[(in_integer)](in_reference)">const proc: (inout ref_list: dest) <b>@:= [</b> (in integer: position) ] (in reference: source)</a></li>
<li><a href="libraries/string.htm#(inout_string)@:=_[(in_integer)](in_char)">const proc: (inout string: destination) <b>@:= [</b> (in integer: position) ] (in char: source)</a></li>
<li><a href="libraries/string.htm#(inout_string)@:=_[(in_integer)](in_string)">const proc: (inout string: destination) <b>@:= [</b> (in integer: position) ] (in string: source)</a></li>
</ul>
<h3>ALLOW_BSTRITYPE_SLICES</h3>
<ul>
<li><a href="libraries/cc_conf.htm#ALLOW_BSTRITYPE_SLICES">var boolean: <b>ALLOW_BSTRITYPE_SLICES</b></a></li>
</ul>
<h3>ALLOW_STRITYPE_SLICES</h3>
<ul>
<li><a href="libraries/cc_conf.htm#ALLOW_STRITYPE_SLICES">var boolean: <b>ALLOW_STRITYPE_SLICES</b></a></li>
</ul>
<h3>Access to operating system files</h3>
<ul>
<li><a href="manual/file.htm#Access_to_operating_system_files">Access to operating system files</a></li>
</ul>
<h3>Actions for array types</h3>
<ul>
<li><a href="manual/actions.htm#array">Actions for array types</a></li>
</ul>
<h3>Actions for byte strings</h3>
<ul>
<li><a href="manual/actions.htm#bstring">Actions for byte strings</a></li>
</ul>
<h3>Actions for declarations</h3>
<ul>
<li><a href="manual/actions.htm#declarations">Actions for declarations</a></li>
</ul>
<h3>Actions for enumeration types</h3>
<ul>
<li><a href="manual/actions.htm#enumeration">Actions for enumeration types</a></li>
</ul>
<h3>Actions for hash types</h3>
<ul>
<li><a href="manual/actions.htm#hash">Actions for hash types</a></li>
</ul>
<h3>Actions for interface types</h3>
<ul>
<li><a href="manual/actions.htm#interface">Actions for interface types</a></li>
</ul>
<h3>Actions for proc operations and statements</h3>
<ul>
<li><a href="manual/actions.htm#proc">Actions for proc operations and statements</a></li>
</ul>
<h3>Actions for set types</h3>
<ul>
<li><a href="manual/actions.htm#set">Actions for set types</a></li>
</ul>
<h3>Actions for struct types</h3>
<ul>
<li><a href="manual/actions.htm#struct">Actions for struct types</a></li>
</ul>
<h3>Actions for text (console) screen output</h3>
<ul>
<li><a href="manual/actions.htm#console_output">Actions for text (console) screen output</a></li>
</ul>
<h3>Actions for the list type</h3>
<ul>
<li><a href="manual/actions.htm#list">Actions for the list type</a></li>
</ul>
<h3>Actions for the type ACTION</h3>
<ul>
<li><a href="manual/actions.htm#ACTION">Actions for the type ACTION</a></li>
</ul>
<h3>Actions for the type PRIMITIVE_SOCKET</h3>
<ul>
<li><a href="manual/actions.htm#PRIMITIVE_SOCKET">Actions for the type PRIMITIVE_SOCKET</a></li>
</ul>
<h3>Actions for the type bigInteger</h3>
<ul>
<li><a href="manual/actions.htm#bigInteger">Actions for the type bigInteger</a></li>
</ul>
<h3>Actions for the type boolean</h3>
<ul>
<li><a href="manual/actions.htm#boolean">Actions for the type boolean</a></li>
</ul>
<h3>Actions for the type char</h3>
<ul>
<li><a href="manual/actions.htm#char">Actions for the type char</a></li>
</ul>
<h3>Actions for the type clib_file</h3>
<ul>
<li><a href="manual/actions.htm#clib_file">Actions for the type clib_file</a></li>
</ul>
<h3>Actions for the type float</h3>
<ul>
<li><a href="manual/actions.htm#float">Actions for the type float</a></li>
</ul>
<h3>Actions for the type integer</h3>
<ul>
<li><a href="manual/actions.htm#integer">Actions for the type integer</a></li>
</ul>
<h3>Actions for the type pollData</h3>
<ul>
<li><a href="manual/actions.htm#pollData">Actions for the type pollData</a></li>
</ul>
<h3>Actions for the type process</h3>
<ul>
<li><a href="manual/actions.htm#process">Actions for the type process</a></li>
</ul>
<h3>Actions for the type program</h3>
<ul>
<li><a href="manual/actions.htm#program">Actions for the type program</a></li>
</ul>
<h3>Actions for the type ref_list</h3>
<ul>
<li><a href="manual/actions.htm#ref_list">Actions for the type ref_list</a></li>
</ul>
<h3>Actions for the type reference</h3>
<ul>
<li><a href="manual/actions.htm#reference">Actions for the type reference</a></li>
</ul>
<h3>Actions for the type string</h3>
<ul>
<li><a href="manual/actions.htm#string">Actions for the type string</a></li>
</ul>
<h3>Actions for the type time</h3>
<ul>
<li><a href="manual/actions.htm#time">Actions for the type time</a></li>
</ul>
<h3>Actions for the type type</h3>
<ul>
<li><a href="manual/actions.htm#type">Actions for the type type</a></li>
</ul>
<h3>Actions for the type utf8File</h3>
<ul>
<li><a href="manual/actions.htm#utf8File">Actions for the type utf8File</a></li>
</ul>
<h3>Actions for the types bin32 and bin64</h3>
<ul>
<li><a href="manual/actions.htm#binary">Actions for the types bin32 and bin64</a></li>
</ul>
<h3>Actions for the types database and sqlStatement</h3>
<ul>
<li><a href="manual/actions.htm#database">Actions for the types database and sqlStatement</a></li>
</ul>
<h3>Actions for various directory, file and other commands</h3>
<ul>
<li><a href="manual/actions.htm#commands">Actions for various directory, file and other commands</a></li>
</ul>
<h3>Actions to do graphic output</h3>
<ul>
<li><a href="manual/actions.htm#graphic_output">Actions to do graphic output</a></li>
</ul>
<h3>Actions to support the graphic keyboard</h3>
<ul>
<li><a href="manual/actions.htm#graphic_keyboard">Actions to support the graphic keyboard</a></li>
</ul>
<h3>Actions to support the text (console) screen keyboard</h3>
<ul>
<li><a href="manual/actions.htm#console_keyboard">Actions to support the text (console) screen keyboard</a></li>
</ul>
<h3>Advanced syntax definitions</h3>
<ul>
<li><a href="manual/syntax.htm#Advanced_syntax_definitions">Advanced syntax definitions</a></li>
</ul>
<h3>Arrays</h3>
<ul>
<li><a href="manual/tutorial.htm#Arrays">Arrays</a></li>
</ul>
<h3>Assignment</h3>
<ul>
<li><a href="manual/tutorial.htm#Assignment">Assignment</a></li>
<li><a href="manual/stats.htm#Assignment">Assignment</a></li>
</ul>
<h3>BOOLTYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#BOOLTYPE">var string: <b>BOOLTYPE</b></a></li>
</ul>
<h3>BUILTIN_ADD_OVERFLOW</h3>
<ul>
<li><a href="libraries/cc_conf.htm#BUILTIN_ADD_OVERFLOW">var string: <b>BUILTIN_ADD_OVERFLOW</b></a></li>
</ul>
<h3>BUILTIN_MULT_OVERFLOW</h3>
<ul>
<li><a href="libraries/cc_conf.htm#BUILTIN_MULT_OVERFLOW">var string: <b>BUILTIN_MULT_OVERFLOW</b></a></li>
</ul>
<h3>BUILTIN_SUB_OVERFLOW</h3>
<ul>
<li><a href="libraries/cc_conf.htm#BUILTIN_SUB_OVERFLOW">var string: <b>BUILTIN_SUB_OVERFLOW</b></a></li>
</ul>
<h3>Basic conversion functions</h3>
<ul>
<li><a href="manual/ffi.htm#Basic_conversion_functions">Basic conversion functions</a></li>
</ul>
<h3>Basic input and output operations</h3>
<ul>
<li><a href="manual/file.htm#Basic_input_and_output_operations">Basic input and output operations</a></li>
</ul>
<h3>Basics</h3>
<ul>
<li><a href="manual/graphic.htm#Basics">Basics</a></li>
</ul>
<h3>BigInteger literals</h3>
<ul>
<li><a href="manual/tokens.htm#BigInteger_literals">BigInteger literals</a></li>
</ul>
<h3>Bind values to placeholders</h3>
<ul>
<li><a href="manual/database.htm#Bind_values_to_placeholders">Bind values to placeholders</a></li>
</ul>
<h3>C types used by the implementation</h3>
<ul>
<li><a href="manual/ffi.htm#C_types_used_by_the_implementation">C types used by the implementation</a></li>
</ul>
<h3>CALL_C_COMPILER_FROM_SHELL</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CALL_C_COMPILER_FROM_SHELL">var boolean: <b>CALL_C_COMPILER_FROM_SHELL</b></a></li>
</ul>
<h3>CC_ENVIRONMENT_INI</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_ENVIRONMENT_INI">var string: <b>CC_ENVIRONMENT_INI</b></a></li>
</ul>
<h3>CC_ERROR_FILEDES</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_ERROR_FILEDES">var integer: <b>CC_ERROR_FILEDES</b></a></li>
</ul>
<h3>CC_FLAGS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_FLAGS">var array string: <b>CC_FLAGS</b></a></li>
</ul>
<h3>CC_OPT_DEBUG_INFO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_DEBUG_INFO">var array string: <b>CC_OPT_DEBUG_INFO</b></a></li>
</ul>
<h3>CC_OPT_LINK_TIME_OPTIMIZATION</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_LINK_TIME_OPTIMIZATION">var string: <b>CC_OPT_LINK_TIME_OPTIMIZATION</b></a></li>
</ul>
<h3>CC_OPT_NO_WARNINGS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_NO_WARNINGS">var string: <b>CC_OPT_NO_WARNINGS</b></a></li>
</ul>
<h3>CC_OPT_OPTIMIZE_1</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_OPTIMIZE_1">var array string: <b>CC_OPT_OPTIMIZE_1</b></a></li>
</ul>
<h3>CC_OPT_OPTIMIZE_2</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_OPTIMIZE_2">var array string: <b>CC_OPT_OPTIMIZE_2</b></a></li>
</ul>
<h3>CC_OPT_OPTIMIZE_3</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_OPTIMIZE_3">var array string: <b>CC_OPT_OPTIMIZE_3</b></a></li>
</ul>
<h3>CC_OPT_TRAP_OVERFLOW</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_TRAP_OVERFLOW">var string: <b>CC_OPT_TRAP_OVERFLOW</b></a></li>
</ul>
<h3>CC_OPT_VERSION_INFO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_OPT_VERSION_INFO">var string: <b>CC_OPT_VERSION_INFO</b></a></li>
</ul>
<h3>CC_SOURCE_UTF8</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_SOURCE_UTF8">var boolean: <b>CC_SOURCE_UTF8</b></a></li>
</ul>
<h3>CC_VERSION_INFO_FILEDES</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CC_VERSION_INFO_FILEDES">var integer: <b>CC_VERSION_INFO_FILEDES</b></a></li>
</ul>
<h3>CHECK_FLOAT_DIV_BY_ZERO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CHECK_FLOAT_DIV_BY_ZERO">var boolean: <b>CHECK_FLOAT_DIV_BY_ZERO</b></a></li>
</ul>
<h3>CHECK_INT_DIV_BY_ZERO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CHECK_INT_DIV_BY_ZERO">var boolean: <b>CHECK_INT_DIV_BY_ZERO</b></a></li>
</ul>
<h3>CHECK_INT_DIV_ZERO_BY_ZERO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CHECK_INT_DIV_ZERO_BY_ZERO">var boolean: <b>CHECK_INT_DIV_ZERO_BY_ZERO</b></a></li>
</ul>
<h3>CHECK_INT_REM_BY_ZERO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CHECK_INT_REM_BY_ZERO">var boolean: <b>CHECK_INT_REM_BY_ZERO</b></a></li>
</ul>
<h3>CHECK_INT_REM_ZERO_BY_ZERO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CHECK_INT_REM_ZERO_BY_ZERO">var boolean: <b>CHECK_INT_REM_ZERO_BY_ZERO</b></a></li>
</ul>
<h3>CLIB_NULL_FILE</h3>
<ul>
<li><a href="libraries/clib_file.htm#CLIB_NULL_FILE">const clib_file: <b>CLIB_NULL_FILE</b></a></li>
</ul>
<h3>COMPILER_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#COMPILER_LIB">var string: <b>COMPILER_LIB</b></a></li>
</ul>
<h3>COMP_DATA_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#COMP_DATA_LIB">var string: <b>COMP_DATA_LIB</b></a></li>
</ul>
<h3>CONSOLE_KEYBOARD</h3>
<ul>
<li><a href="libraries/keybd.htm#CONSOLE_KEYBOARD">var console_keybd_file: <b>CONSOLE_KEYBOARD</b></a></li>
</ul>
<h3>CONSOLE_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#CONSOLE_LIB">var string: <b>CONSOLE_LIB</b></a></li>
</ul>
<h3>C_COMPILER</h3>
<ul>
<li><a href="libraries/cc_conf.htm#C_COMPILER">var string: <b>C_COMPILER</b></a></li>
</ul>
<h3>Call expressions</h3>
<ul>
<li><a href="manual/expr.htm#Call_expressions">Call expressions</a></li>
</ul>
<h3>Character literals</h3>
<ul>
<li><a href="manual/tokens.htm#Character_literals">Character literals</a></li>
</ul>
<h3>Class methods</h3>
<ul>
<li><a href="manual/objects.htm#class_methods">Class methods</a></li>
</ul>
<h3>Comments</h3>
<ul>
<li><a href="manual/tokens.htm#Comments">Comments</a></li>
</ul>
<h3>Comparison of EBNF and S7SSD</h3>
<ul>
<li><a href="manual/syntax.htm#Comparison_of_EBNF_and_S7SSD">Comparison of EBNF and S7SSD</a></li>
</ul>
<h3>Compilation errors</h3>
<ul>
<li><a href="manual/errors.htm#Compilation_errors">Compilation errors</a></li>
</ul>
<h3>Constants</h3>
<ul>
<li><a href="manual/tutorial.htm#Constants">Constants</a></li>
</ul>
<h3>Conversion to strings and back</h3>
<ul>
<li><a href="manual/file.htm#Conversion_to_strings_and_back">Conversion to strings and back</a></li>
</ul>
<h3>DATABASE ABSTRACTION API</h3>
<ul>
<li><a href="manual/database.htm">DATABASE ABSTRACTION API</a></li>
</ul>
<h3>DATABASE_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#DATABASE_ERROR">DATABASE_ERROR</a></li>
</ul>
<h3>DATABASE_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#DATABASE_LIB">var string: <b>DATABASE_LIB</b></a></li>
</ul>
<h3>DECLARATIONS</h3>
<ul>
<li><a href="manual/decls.htm">DECLARATIONS</a></li>
</ul>
<h3>DEFAULT_STACK_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#DEFAULT_STACK_SIZE">var integer: <b>DEFAULT_STACK_SIZE</b></a></li>
</ul>
<h3>DRAW_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#DRAW_LIB">var string: <b>DRAW_LIB</b></a></li>
</ul>
<h3>Declare a statement</h3>
<ul>
<li><a href="manual/tutorial.htm#Declare_a_statement">Declare a statement</a></li>
</ul>
<h3>Dot expressions</h3>
<ul>
<li><a href="manual/expr.htm#Dot_expressions">Dot expressions</a></li>
</ul>
<h3>Dynamic dispatch</h3>
<ul>
<li><a href="manual/objects.htm#dynamic_dispatch">Dynamic dispatch</a></li>
</ul>
<h3>E</h3>
<ul>
<li><a href="libraries/math.htm#E">const float: <b>E</b></a></li>
</ul>
<h3>EOF</h3>
<ul>
<li><a href="libraries/char.htm#EOF">const char: <b>EOF</b></a></li>
</ul>
<h3>ERRORS</h3>
<ul>
<li><a href="manual/errors.htm">ERRORS</a></li>
</ul>
<h3>EXECUTABLE_FILE_EXTENSION</h3>
<ul>
<li><a href="libraries/cc_conf.htm#EXECUTABLE_FILE_EXTENSION">var string: <b>EXECUTABLE_FILE_EXTENSION</b></a></li>
</ul>
<h3>EXPRESSIONS</h3>
<ul>
<li><a href="manual/expr.htm">EXPRESSIONS</a></li>
</ul>
<h3>EXP_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#EXP_FUNCTION_OKAY">var boolean: <b>EXP_FUNCTION_OKAY</b></a></li>
</ul>
<h3>Error handling</h3>
<ul>
<li><a href="manual/ffi.htm#Error_handling">Error handling</a></li>
</ul>
<h3>Exceptions</h3>
<ul>
<li><a href="manual/errors.htm#Exceptions">Exceptions</a></li>
</ul>
<h3>Execute a prepared statement</h3>
<ul>
<li><a href="manual/database.htm#Execute_a_prepared_statement">Execute a prepared statement</a></li>
</ul>
<h3>FALSE</h3>
<ul>
<li><a href="libraries/boolean.htm#FALSE">const boolean: <b>FALSE</b></a></li>
</ul>
<h3>FILE INPUT AND OUTPUT</h3>
<ul>
<li><a href="manual/file.htm">FILE INPUT AND OUTPUT</a></li>
</ul>
<h3>FILE_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#FILE_ERROR">FILE_ERROR</a></li>
</ul>
<h3>FLOATTYPE_DOUBLE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FLOATTYPE_DOUBLE">var boolean: <b>FLOATTYPE_DOUBLE</b></a></li>
</ul>
<h3>FLOATTYPE_EXPONENT_OFFSET</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FLOATTYPE_EXPONENT_OFFSET">var integer: <b>FLOATTYPE_EXPONENT_OFFSET</b></a></li>
</ul>
<h3>FLOATTYPE_MANTISSA_BITS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FLOATTYPE_MANTISSA_BITS">var integer: <b>FLOATTYPE_MANTISSA_BITS</b></a></li>
</ul>
<h3>FLOATTYPE_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FLOATTYPE_SIZE">var integer: <b>FLOATTYPE_SIZE</b></a></li>
</ul>
<h3>FLOAT_COMPARISON_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FLOAT_COMPARISON_OKAY">var boolean: <b>FLOAT_COMPARISON_OKAY</b></a></li>
</ul>
<h3>FLOAT_ZERO_DIV_ERROR</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FLOAT_ZERO_DIV_ERROR">var boolean: <b>FLOAT_ZERO_DIV_ERROR</b></a></li>
</ul>
<h3>FMOD_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FMOD_FUNCTION_OKAY">var boolean: <b>FMOD_FUNCTION_OKAY</b></a></li>
</ul>
<h3>FOREIGN FUNCTION INTERFACE</h3>
<ul>
<li><a href="manual/ffi.htm">FOREIGN FUNCTION INTERFACE</a></li>
</ul>
<h3>FOR_DECLS</h3>
<ul>
<li><a href="libraries/forloop.htm#FOR_DECLS(in_type)">const proc: <b>FOR_DECLS</b> (in type: aType)</a></li>
</ul>
<h3>FOR_STEP_DECLS</h3>
<ul>
<li><a href="libraries/forloop.htm#FOR_STEP_DECLS(in_type)">const proc: <b>FOR_STEP_DECLS</b> (in type: aType)</a></li>
</ul>
<h3>FOR_UNTIL_DECLS</h3>
<ul>
<li><a href="libraries/forloop.htm#FOR_UNTIL_DECLS(in_type)">const proc: <b>FOR_UNTIL_DECLS</b> (in type: aType)</a></li>
</ul>
<h3>FREXP_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#FREXP_FUNCTION_OKAY">var boolean: <b>FREXP_FUNCTION_OKAY</b></a></li>
</ul>
<h3>Features of Seed7</h3>
<ul>
<li><a href="manual/intro.htm#Features_of_Seed7">Features of Seed7</a></li>
</ul>
<h3>Fetch records from the result set</h3>
<ul>
<li><a href="manual/database.htm#Fetch_records_from_the_result_set">Fetch records from the result set</a></li>
</ul>
<h3>Files with line structure</h3>
<ul>
<li><a href="manual/file.htm#Files_with_line_structure">Files with line structure</a></li>
</ul>
<h3>Float literals</h3>
<ul>
<li><a href="manual/tokens.htm#Float_literals">Float literals</a></li>
</ul>
<h3>For loop and containers</h3>
<ul>
<li><a href="manual/tutorial.htm#For_loop_and_containers">For loop and containers</a></li>
</ul>
<h3>For loop and float expressions</h3>
<ul>
<li><a href="manual/tutorial.htm#For_loop_and_float_expressions">For loop and float expressions</a></li>
</ul>
<h3>Functions</h3>
<ul>
<li><a href="manual/tutorial.htm#Functions">Functions</a></li>
</ul>
<h3>Functions to create action results</h3>
<ul>
<li><a href="manual/ffi.htm#Functions_to_create_action_results">Functions to create action results</a></li>
</ul>
<h3>GENERIC_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#GENERIC_SIZE">var integer: <b>GENERIC_SIZE</b></a></li>
</ul>
<h3>GRAPHIC LIBRARY</h3>
<ul>
<li><a href="manual/graphic.htm">GRAPHIC LIBRARY</a></li>
</ul>
<h3>GRAPHIC_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#GRAPHIC_ERROR">GRAPHIC_ERROR</a></li>
</ul>
<h3>GRAPH_KEYBOARD</h3>
<ul>
<li><a href="libraries/keybd.htm#GRAPH_KEYBOARD">var graph_keybd_file: <b>GRAPH_KEYBOARD</b></a></li>
</ul>
<h3>Get columns from fetched records</h3>
<ul>
<li><a href="manual/database.htm#Get_columns_from_fetched_records">Get columns from fetched records</a></li>
</ul>
<h3>Greeting</h3>
<ul>
<li><a href="manual/tutorial.htm#Greeting">Greeting</a></li>
</ul>
<h3>HAS_CBRT</h3>
<ul>
<li><a href="libraries/cc_conf.htm#HAS_CBRT">var boolean: <b>HAS_CBRT</b></a></li>
</ul>
<h3>HAS_EXP10</h3>
<ul>
<li><a href="libraries/cc_conf.htm#HAS_EXP10">var boolean: <b>HAS_EXP10</b></a></li>
</ul>
<h3>HAS_EXP2</h3>
<ul>
<li><a href="libraries/cc_conf.htm#HAS_EXP2">var boolean: <b>HAS_EXP2</b></a></li>
</ul>
<h3>HAS_EXPM1</h3>
<ul>
<li><a href="libraries/cc_conf.htm#HAS_EXPM1">var boolean: <b>HAS_EXPM1</b></a></li>
</ul>
<h3>HAS_SIGSETJMP</h3>
<ul>
<li><a href="libraries/cc_conf.htm#HAS_SIGSETJMP">var boolean: <b>HAS_SIGSETJMP</b></a></li>
</ul>
<h3>Handlers</h3>
<ul>
<li><a href="manual/errors.htm#Handlers">Handlers</a></li>
</ul>
<h3>Hello world</h3>
<ul>
<li><a href="manual/tutorial.htm#Hello_world">Hello world</a></li>
</ul>
<h3>How to read the manual</h3>
<ul>
<li><a href="manual/intro.htm#How_to_read_the_manual">How to read the manual</a></li>
</ul>
<h3>ILLEGAL_ACTION</h3>
<ul>
<li><a href="manual/errors.htm#ILLEGAL_ACTION">ILLEGAL_ACTION</a></li>
</ul>
<h3>IN</h3>
<ul>
<li><a href="libraries/stdio.htm#IN">var file: <b>IN</b></a></li>
</ul>
<h3>INDEX_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#INDEX_ERROR">INDEX_ERROR</a></li>
</ul>
<h3>INT128TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT128TYPE">var string: <b>INT128TYPE</b></a></li>
</ul>
<h3>INT32TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT32TYPE">var string: <b>INT32TYPE</b></a></li>
</ul>
<h3>INT32TYPE_LITERAL_SUFFIX</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT32TYPE_LITERAL_SUFFIX">var string: <b>INT32TYPE_LITERAL_SUFFIX</b></a></li>
</ul>
<h3>INT64TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT64TYPE">var string: <b>INT64TYPE</b></a></li>
</ul>
<h3>INT64TYPE_LITERAL_SUFFIX</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT64TYPE_LITERAL_SUFFIX">var string: <b>INT64TYPE_LITERAL_SUFFIX</b></a></li>
</ul>
<h3>INTRODUCTION</h3>
<ul>
<li><a href="manual/intro.htm">INTRODUCTION</a></li>
</ul>
<h3>INTTYPE_LITERAL_SUFFIX</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INTTYPE_LITERAL_SUFFIX">var string: <b>INTTYPE_LITERAL_SUFFIX</b></a></li>
</ul>
<h3>INTTYPE_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INTTYPE_SIZE">var integer: <b>INTTYPE_SIZE</b></a></li>
</ul>
<h3>INT_DIV_OVERFLOW</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT_DIV_OVERFLOW">var integer: <b>INT_DIV_OVERFLOW</b></a></li>
</ul>
<h3>INT_MAX</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT_MAX">var integer: <b>INT_MAX</b></a></li>
</ul>
<h3>INT_MIN</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT_MIN">var integer: <b>INT_MIN</b></a></li>
</ul>
<h3>INT_RANGE_IN_FLOATTYPE_MAX</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT_RANGE_IN_FLOATTYPE_MAX">var integer: <b>INT_RANGE_IN_FLOATTYPE_MAX</b></a></li>
</ul>
<h3>INT_REM_OVERFLOW</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT_REM_OVERFLOW">var integer: <b>INT_REM_OVERFLOW</b></a></li>
</ul>
<h3>INT_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#INT_SIZE">var integer: <b>INT_SIZE</b></a></li>
</ul>
<h3>Identifiers</h3>
<ul>
<li><a href="manual/tokens.htm#Identifiers">Identifiers</a></li>
</ul>
<h3>Ignoring values</h3>
<ul>
<li><a href="manual/stats.htm#Ignoring_values">Ignoring values</a></li>
</ul>
<h3>Infinity</h3>
<ul>
<li><a href="libraries/float.htm#Infinity">const float: <b>Infinity</b></a></li>
</ul>
<h3>Inheritance</h3>
<ul>
<li><a href="manual/objects.htm#inheritance">Inheritance</a></li>
</ul>
<h3>Input and output with conversion</h3>
<ul>
<li><a href="manual/file.htm#Input_and_output_with_conversion">Input and output with conversion</a></li>
</ul>
<h3>Integer literals</h3>
<ul>
<li><a href="manual/tokens.htm#Integer_literals">Integer literals</a></li>
</ul>
<h3>Interface and implementation</h3>
<ul>
<li><a href="manual/objects.htm#interface_and_implementation">Interface and implementation</a></li>
</ul>
<h3>KEYBOARD</h3>
<ul>
<li><a href="libraries/keybd.htm#KEYBOARD">var keyboard_file: <b>KEYBOARD</b></a></li>
</ul>
<h3>Keyboard file</h3>
<ul>
<li><a href="manual/file.htm#Keyboard_file">Keyboard file</a></li>
</ul>
<h3>LDEXP_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LDEXP_FUNCTION_OKAY">var boolean: <b>LDEXP_FUNCTION_OKAY</b></a></li>
</ul>
<h3>LIBRARY_FILE_EXTENSION</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LIBRARY_FILE_EXTENSION">var string: <b>LIBRARY_FILE_EXTENSION</b></a></li>
</ul>
<h3>LIMITED_CSTRI_LITERAL_LEN</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LIMITED_CSTRI_LITERAL_LEN">var boolean: <b>LIMITED_CSTRI_LITERAL_LEN</b></a></li>
</ul>
<h3>LINKED_PROGRAM_EXTENSION</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKED_PROGRAM_EXTENSION">var string: <b>LINKED_PROGRAM_EXTENSION</b></a></li>
</ul>
<h3>LINKER_FLAGS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_FLAGS">var array string: <b>LINKER_FLAGS</b></a></li>
</ul>
<h3>LINKER_OPT_DEBUG_INFO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_OPT_DEBUG_INFO">var string: <b>LINKER_OPT_DEBUG_INFO</b></a></li>
</ul>
<h3>LINKER_OPT_LTO_MANDATORY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_OPT_LTO_MANDATORY">var boolean: <b>LINKER_OPT_LTO_MANDATORY</b></a></li>
</ul>
<h3>LINKER_OPT_NO_DEBUG_INFO</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_OPT_NO_DEBUG_INFO">var string: <b>LINKER_OPT_NO_DEBUG_INFO</b></a></li>
</ul>
<h3>LINKER_OPT_OUTPUT_FILE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_OPT_OUTPUT_FILE">var string: <b>LINKER_OPT_OUTPUT_FILE</b></a></li>
</ul>
<h3>LINKER_OPT_SPECIAL_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_OPT_SPECIAL_LIB">var string: <b>LINKER_OPT_SPECIAL_LIB</b></a></li>
</ul>
<h3>LINKER_OPT_STACK_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LINKER_OPT_STACK_SIZE">var string: <b>LINKER_OPT_STACK_SIZE</b></a></li>
</ul>
<h3>LITTLE_ENDIAN_INTTYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LITTLE_ENDIAN_INTTYPE">var boolean: <b>LITTLE_ENDIAN_INTTYPE</b></a></li>
</ul>
<h3>LOG10_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LOG10_FUNCTION_OKAY">var boolean: <b>LOG10_FUNCTION_OKAY</b></a></li>
</ul>
<h3>LOG1P_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LOG1P_FUNCTION_OKAY">var boolean: <b>LOG1P_FUNCTION_OKAY</b></a></li>
</ul>
<h3>LOG2_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LOG2_FUNCTION_OKAY">var boolean: <b>LOG2_FUNCTION_OKAY</b></a></li>
</ul>
<h3>LOG_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LOG_FUNCTION_OKAY">var boolean: <b>LOG_FUNCTION_OKAY</b></a></li>
</ul>
<h3>LONG_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#LONG_SIZE">var integer: <b>LONG_SIZE</b></a></li>
</ul>
<h3>Line comments</h3>
<ul>
<li><a href="manual/tokens.htm#Line_comments">Line comments</a></li>
</ul>
<h3>Literals</h3>
<ul>
<li><a href="manual/tokens.htm#Literals">Literals</a></li>
</ul>
<h3>MACRO_DEFS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#MACRO_DEFS">var string: <b>MACRO_DEFS</b></a></li>
</ul>
<h3>MAXIMUM_TRUNC_ARGUMENT</h3>
<ul>
<li><a href="libraries/cc_conf.htm#MAXIMUM_TRUNC_ARGUMENT">var integer: <b>MAXIMUM_TRUNC_ARGUMENT</b></a></li>
</ul>
<h3>MEMORY_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></li>
</ul>
<h3>MINIMUM_TRUNC_ARGUMENT</h3>
<ul>
<li><a href="libraries/cc_conf.htm#MINIMUM_TRUNC_ARGUMENT">var integer: <b>MINIMUM_TRUNC_ARGUMENT</b></a></li>
</ul>
<h3>Macros to access the action parameters</h3>
<ul>
<li><a href="manual/ffi.htm#Macros_to_access_the_action_parameters">Macros to access the action parameters</a></li>
</ul>
<h3>Memory management macros</h3>
<ul>
<li><a href="manual/ffi.htm#Memory_management_macros">Memory management macros</a></li>
</ul>
<h3>Multiple dispatch</h3>
<ul>
<li><a href="manual/objects.htm#multiple_dispatch">Multiple dispatch</a></li>
</ul>
<h3>NIL</h3>
<ul>
<li><a href="libraries/reference.htm#NIL">const reference: <b>NIL</b></a></li>
</ul>
<h3>NULL_DEVICE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#NULL_DEVICE">var string: <b>NULL_DEVICE</b></a></li>
</ul>
<h3>NUMERIC_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></li>
</ul>
<h3>NaN</h3>
<ul>
<li><a href="libraries/float.htm#NaN">const float: <b>NaN</b></a></li>
</ul>
<h3>Name identifiers</h3>
<ul>
<li><a href="manual/tokens.htm#Name_identifiers">Name identifiers</a></li>
</ul>
<h3>Normal declarations</h3>
<ul>
<li><a href="manual/decls.htm#Normal_declarations">Normal declarations</a></li>
</ul>
<h3>OBJECT ORIENTATION</h3>
<ul>
<li><a href="manual/objects.htm">OBJECT ORIENTATION</a></li>
</ul>
<h3>OBJECT_FILE_EXTENSION</h3>
<ul>
<li><a href="libraries/cc_conf.htm#OBJECT_FILE_EXTENSION">var string: <b>OBJECT_FILE_EXTENSION</b></a></li>
</ul>
<h3>OPERATING SYSTEM ACCESS</h3>
<ul>
<li><a href="manual/os.htm">OPERATING SYSTEM ACCESS</a></li>
</ul>
<h3>OUT</h3>
<ul>
<li><a href="libraries/stdio.htm#OUT">var file: <b>OUT</b></a></li>
</ul>
<h3>OVERFLOW_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a></li>
</ul>
<h3>OVERFLOW_SIGNAL</h3>
<ul>
<li><a href="libraries/cc_conf.htm#OVERFLOW_SIGNAL">var string: <b>OVERFLOW_SIGNAL</b></a></li>
</ul>
<h3>Opening a Db2 database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_a_Db2_database_connection">Opening a Db2 database connection</a></li>
</ul>
<h3>Opening a SQL Server database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_a_SQL_Server_database_connection">Opening a SQL Server database connection</a></li>
</ul>
<h3>Opening a SQLite database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_a_SQLite_database_connection">Opening a SQLite database connection</a></li>
</ul>
<h3>Opening a database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_a_database_connection">Opening a database connection</a></li>
</ul>
<h3>Opening an Informix database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_an_Informix_database_connection">Opening an Informix database connection</a></li>
</ul>
<h3>Opening an ODBC database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_an_ODBC_database_connection">Opening an ODBC database connection</a></li>
</ul>
<h3>Opening an Oracle database connection</h3>
<ul>
<li><a href="manual/database.htm#Opening_an_Oracle_database_connection">Opening an Oracle database connection</a></li>
</ul>
<h3>Operating system string and path conversions</h3>
<ul>
<li><a href="manual/ffi.htm#Operating_system_string_and_path_conversions">Operating system string and path conversions</a></li>
</ul>
<h3>Other errors and warnings</h3>
<ul>
<li><a href="manual/errors.htm#Other_errors_and_warnings">Other errors and warnings</a></li>
</ul>
<h3>Other ways to open a database connection</h3>
<ul>
<li><a href="manual/database.htm#Other_ways_to_open_a_database_connection">Other ways to open a database connection</a></li>
</ul>
<h3>Overloading</h3>
<ul>
<li><a href="manual/tutorial.htm#Overloading">Overloading</a></li>
</ul>
<h3>PARAMETERS</h3>
<ul>
<li><a href="manual/params.htm">PARAMETERS</a></li>
</ul>
<h3>PI</h3>
<ul>
<li><a href="libraries/math.htm#PI">const float: <b>PI</b></a></li>
</ul>
<h3>PIXEL_BLUE_MASK</h3>
<ul>
<li><a href="libraries/cc_conf.htm#PIXEL_BLUE_MASK">var integer: <b>PIXEL_BLUE_MASK</b></a></li>
</ul>
<h3>PIXEL_GREEN_MASK</h3>
<ul>
<li><a href="libraries/cc_conf.htm#PIXEL_GREEN_MASK">var integer: <b>PIXEL_GREEN_MASK</b></a></li>
</ul>
<h3>PIXEL_RED_MASK</h3>
<ul>
<li><a href="libraries/cc_conf.htm#PIXEL_RED_MASK">var integer: <b>PIXEL_RED_MASK</b></a></li>
</ul>
<h3>POINTER_SIZE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#POINTER_SIZE">var integer: <b>POINTER_SIZE</b></a></li>
</ul>
<h3>POW_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#POW_FUNCTION_OKAY">var boolean: <b>POW_FUNCTION_OKAY</b></a></li>
</ul>
<h3>PREDEFINED STATEMENTS</h3>
<ul>
<li><a href="manual/stats.htm">PREDEFINED STATEMENTS</a></li>
</ul>
<h3>PREDEFINED TYPES</h3>
<ul>
<li><a href="manual/types.htm">PREDEFINED TYPES</a></li>
</ul>
<h3>PRIMITIVE ACTIONS</h3>
<ul>
<li><a href="manual/actions.htm">PRIMITIVE ACTIONS</a></li>
</ul>
<h3>Parameters</h3>
<ul>
<li><a href="manual/tutorial.htm#Parameters">Parameters</a></li>
</ul>
<h3>Parentheses</h3>
<ul>
<li><a href="manual/tokens.htm#Parentheses">Parentheses</a></li>
<li><a href="manual/expr.htm#EXPRESSION_Parentheses">Parentheses</a></li>
</ul>
<h3>Parsing errors</h3>
<ul>
<li><a href="manual/errors.htm#Parsing_errors">Parsing errors</a></li>
</ul>
<h3>Pragmas</h3>
<ul>
<li><a href="manual/decls.htm#Pragmas">Pragmas</a></li>
</ul>
<h3>Prepared statements</h3>
<ul>
<li><a href="manual/database.htm#Prepared_statements">Prepared statements</a></li>
</ul>
<h3>Priority and associativity</h3>
<ul>
<li><a href="manual/syntax.htm#Priority_and_associativity">Priority and associativity</a></li>
</ul>
<h3>RADIX</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_var_bigInteger)RADIX(in_integer)">const func string: (in var bigInteger: number) <b>RADIX</b> (in integer: base)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)RADIX(in_integer)">const func string: (in bin32: bits) <b>RADIX</b> (in integer: base)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)RADIX(in_integer)">const func string: (in bin64: bits) <b>RADIX</b> (in integer: base)</a></li>
<li><a href="libraries/integer.htm#(in_integer)RADIX(in_integer)">const func string: (in integer: number) <b>RADIX</b> (in integer: base)</a></li>
</ul>
<h3>RAND_INCREMENT</h3>
<ul>
<li><a href="libraries/cc_conf.htm#RAND_INCREMENT">var integer: <b>RAND_INCREMENT</b></a></li>
</ul>
<h3>RAND_MULTIPLIER</h3>
<ul>
<li><a href="libraries/cc_conf.htm#RAND_MULTIPLIER">var integer: <b>RAND_MULTIPLIER</b></a></li>
</ul>
<h3>RANGE_ERROR</h3>
<ul>
<li><a href="manual/errors.htm#RANGE_ERROR">RANGE_ERROR</a></li>
</ul>
<h3>REDIRECT_FILEDES_1</h3>
<ul>
<li><a href="libraries/cc_conf.htm#REDIRECT_FILEDES_1">var string: <b>REDIRECT_FILEDES_1</b></a></li>
</ul>
<h3>REDIRECT_FILEDES_2</h3>
<ul>
<li><a href="libraries/cc_conf.htm#REDIRECT_FILEDES_2">var string: <b>REDIRECT_FILEDES_2</b></a></li>
</ul>
<h3>RGB_TO_PIXEL_FLAG_NAME</h3>
<ul>
<li><a href="libraries/cc_conf.htm#RGB_TO_PIXEL_FLAG_NAME">var string: <b>RGB_TO_PIXEL_FLAG_NAME</b></a></li>
</ul>
<h3>RSHIFT_DOES_SIGN_EXTEND</h3>
<ul>
<li><a href="libraries/cc_conf.htm#RSHIFT_DOES_SIGN_EXTEND">var boolean: <b>RSHIFT_DOES_SIGN_EXTEND</b></a></li>
</ul>
<h3>Replacing pointers with interface types</h3>
<ul>
<li><a href="manual/objects.htm#replacing_pointers">Replacing pointers with interface types</a></li>
</ul>
<h3>S7_LIB_DIR</h3>
<ul>
<li><a href="libraries/cc_conf.htm#S7_LIB_DIR">var string: <b>S7_LIB_DIR</b></a></li>
</ul>
<h3>SEED7_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SEED7_LIB">var string: <b>SEED7_LIB</b></a></li>
</ul>
<h3>SPECIAL_LIB</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SPECIAL_LIB">var string: <b>SPECIAL_LIB</b></a></li>
</ul>
<h3>SQRT_FUNCTION_OKAY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SQRT_FUNCTION_OKAY">var boolean: <b>SQRT_FUNCTION_OKAY</b></a></li>
</ul>
<h3>STD_CONSOLE</h3>
<ul>
<li><a href="libraries/console.htm#STD_CONSOLE">var console_file: <b>STD_CONSOLE</b></a></li>
</ul>
<h3>STD_ERR</h3>
<ul>
<li><a href="libraries/stdio.htm#STD_ERR">var external_file: <b>STD_ERR</b></a></li>
</ul>
<h3>STD_IN</h3>
<ul>
<li><a href="libraries/stdio.htm#STD_IN">var external_file: <b>STD_IN</b></a></li>
</ul>
<h3>STD_NULL</h3>
<ul>
<li><a href="libraries/null_file.htm#STD_NULL">var null_file: <b>STD_NULL</b></a></li>
</ul>
<h3>STD_OUT</h3>
<ul>
<li><a href="libraries/stdio.htm#STD_OUT">var external_file: <b>STD_OUT</b></a></li>
</ul>
<h3>STD_UTF8_ERR</h3>
<ul>
<li><a href="libraries/utf8.htm#STD_UTF8_ERR">var utf8File: <b>STD_UTF8_ERR</b></a></li>
</ul>
<h3>STD_UTF8_IN</h3>
<ul>
<li><a href="libraries/utf8.htm#STD_UTF8_IN">var utf8File: <b>STD_UTF8_IN</b></a></li>
</ul>
<h3>STD_UTF8_OUT</h3>
<ul>
<li><a href="libraries/utf8.htm#STD_UTF8_OUT">var utf8File: <b>STD_UTF8_OUT</b></a></li>
</ul>
<h3>STMT_BLOCK_IN_PARENTHESES_OK</h3>
<ul>
<li><a href="libraries/cc_conf.htm#STMT_BLOCK_IN_PARENTHESES_OK">var boolean: <b>STMT_BLOCK_IN_PARENTHESES_OK</b></a></li>
</ul>
<h3>STRUCTURED SYNTAX DEFINITION</h3>
<ul>
<li><a href="manual/syntax.htm">STRUCTURED SYNTAX DEFINITION</a></li>
</ul>
<h3>SUBRANGE_TYPES</h3>
<ul>
<li><a href="libraries/subrange.htm#SUBRANGE_TYPES(in_type)">const proc: <b>SUBRANGE_TYPES</b> (in type: baseType)</a></li>
</ul>
<h3>SWITCH_WORKS_FOR_INT64TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SWITCH_WORKS_FOR_INT64TYPE">var boolean: <b>SWITCH_WORKS_FOR_INT64TYPE</b></a></li>
</ul>
<h3>SYSTEM_BIGINT_LIBS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SYSTEM_BIGINT_LIBS">var array string: <b>SYSTEM_BIGINT_LIBS</b></a></li>
</ul>
<h3>SYSTEM_CONSOLE_LIBS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SYSTEM_CONSOLE_LIBS">var array string: <b>SYSTEM_CONSOLE_LIBS</b></a></li>
</ul>
<h3>SYSTEM_DATABASE_LIBS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SYSTEM_DATABASE_LIBS">var array string: <b>SYSTEM_DATABASE_LIBS</b></a></li>
</ul>
<h3>SYSTEM_DRAW_LIBS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SYSTEM_DRAW_LIBS">var array string: <b>SYSTEM_DRAW_LIBS</b></a></li>
</ul>
<h3>SYSTEM_LIBS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SYSTEM_LIBS">var array string: <b>SYSTEM_LIBS</b></a></li>
</ul>
<h3>SYSTEM_MATH_LIBS</h3>
<ul>
<li><a href="libraries/cc_conf.htm#SYSTEM_MATH_LIBS">var array string: <b>SYSTEM_MATH_LIBS</b></a></li>
</ul>
<h3>Scanning a file</h3>
<ul>
<li><a href="manual/file.htm#Scanning_a_file">Scanning a file</a></li>
</ul>
<h3>Signals</h3>
<ul>
<li><a href="manual/errors.htm#Signals">Signals</a></li>
</ul>
<h3>Simple read and write statements</h3>
<ul>
<li><a href="manual/file.htm#Simple_read_and_write_statements">Simple read and write statements</a></li>
</ul>
<h3>Sockets</h3>
<ul>
<li><a href="manual/file.htm#Sockets">Sockets</a></li>
</ul>
<h3>Spaces</h3>
<ul>
<li><a href="manual/tokens.htm#Spaces">Spaces</a></li>
</ul>
<h3>Special identifiers</h3>
<ul>
<li><a href="manual/tokens.htm#Special_identifiers">Special identifiers</a></li>
</ul>
<h3>Stack trace</h3>
<ul>
<li><a href="manual/errors.htm#Stack_trace">Stack trace</a></li>
</ul>
<h3>Standard input and output files</h3>
<ul>
<li><a href="manual/file.htm#Standard_input_and_output_files">Standard input and output files</a></li>
</ul>
<h3>Standard path representation</h3>
<ul>
<li><a href="manual/os.htm#Standard_path_representation">Standard path representation</a></li>
</ul>
<h3>String conversions</h3>
<ul>
<li><a href="manual/ffi.htm#String_conversions">String conversions</a></li>
</ul>
<h3>String literals</h3>
<ul>
<li><a href="manual/tokens.htm#String_literals">String literals</a></li>
</ul>
<h3>Suppressing exception checks</h3>
<ul>
<li><a href="manual/errors.htm#Suppressing_exception_checks">Suppressing exception checks</a></li>
</ul>
<h3>Symbol parameter</h3>
<ul>
<li><a href="manual/params.htm#Symbol_parameter">Symbol parameter</a></li>
</ul>
<h3>Syntax declarations</h3>
<ul>
<li><a href="manual/decls.htm#Syntax_declarations">Syntax declarations</a></li>
</ul>
<h3>Syntax of predefined statements</h3>
<ul>
<li><a href="manual/syntax.htm#Syntax_of_predefined_statements">Syntax of predefined statements</a></li>
</ul>
<h3>System declarations</h3>
<ul>
<li><a href="manual/decls.htm#System_declarations">System declarations</a></li>
</ul>
<h3>TOKENS</h3>
<ul>
<li><a href="manual/tokens.htm">TOKENS</a></li>
</ul>
<h3>TRUE</h3>
<ul>
<li><a href="libraries/boolean.htm#TRUE">const boolean: <b>TRUE</b></a></li>
</ul>
<h3>TUTORIAL</h3>
<ul>
<li><a href="manual/tutorial.htm">TUTORIAL</a></li>
</ul>
<h3>TWOS_COMPLEMENT_INTTYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#TWOS_COMPLEMENT_INTTYPE">var boolean: <b>TWOS_COMPLEMENT_INTTYPE</b></a></li>
</ul>
<h3>Template declaring a statement</h3>
<ul>
<li><a href="manual/tutorial.htm#Template_declaring_a_statement">Template declaring a statement</a></li>
</ul>
<h3>The Extended Backus-Naur Form</h3>
<ul>
<li><a href="manual/syntax.htm#The_Extended_Backus-Naur_Form">The Extended Backus-Naur Form</a></li>
</ul>
<h3>The Seed7 Structured Syntax Description</h3>
<ul>
<li><a href="manual/syntax.htm#The_Seed7_Structured_Syntax_Description">The Seed7 Structured Syntax Description</a></li>
</ul>
<h3>The syntax of a statement</h3>
<ul>
<li><a href="manual/syntax.htm#The_syntax_of_a_statement">The syntax of a statement</a></li>
</ul>
<h3>The syntax of operators</h3>
<ul>
<li><a href="manual/syntax.htm#The_syntax_of_operators">The syntax of operators</a></li>
</ul>
<h3>Transport Layer Security</h3>
<ul>
<li><a href="manual/file.htm#Transport_layer_security">Transport Layer Security</a></li>
</ul>
<h3>UINT128TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#UINT128TYPE">var string: <b>UINT128TYPE</b></a></li>
</ul>
<h3>UINT32TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#UINT32TYPE">var string: <b>UINT32TYPE</b></a></li>
</ul>
<h3>UINT64TYPE</h3>
<ul>
<li><a href="libraries/cc_conf.htm#UINT64TYPE">var string: <b>UINT64TYPE</b></a></li>
</ul>
<h3>USE_DO_EXIT</h3>
<ul>
<li><a href="libraries/cc_conf.htm#USE_DO_EXIT">var boolean: <b>USE_DO_EXIT</b></a></li>
</ul>
<h3>USE_WINMAIN</h3>
<ul>
<li><a href="libraries/cc_conf.htm#USE_WINMAIN">var boolean: <b>USE_WINMAIN</b></a></li>
</ul>
<h3>USE_WMAIN</h3>
<ul>
<li><a href="libraries/cc_conf.htm#USE_WMAIN">var boolean: <b>USE_WMAIN</b></a></li>
</ul>
<h3>Unicode characters</h3>
<ul>
<li><a href="manual/tokens.htm#Unicode_characters">Unicode characters</a></li>
</ul>
<h3>User defined file types</h3>
<ul>
<li><a href="manual/file.htm#User_defined_file_types">User defined file types</a></li>
</ul>
<h3>VERSION_REVISION_LEVEL</h3>
<ul>
<li><a href="libraries/cc_conf.htm#VERSION_REVISION_LEVEL">var integer: <b>VERSION_REVISION_LEVEL</b></a></li>
</ul>
<h3>WITH_STRI_CAPACITY</h3>
<ul>
<li><a href="libraries/cc_conf.htm#WITH_STRI_CAPACITY">var boolean: <b>WITH_STRI_CAPACITY</b></a></li>
</ul>
<h3>What is Seed7?</h3>
<ul>
<li><a href="manual/intro.htm#What_is_Seed7">What is Seed7?</a></li>
</ul>
<h3>White space</h3>
<ul>
<li><a href="manual/tokens.htm#White_space">White space</a></li>
</ul>
<h3>Why a new programming language?</h3>
<ul>
<li><a href="manual/intro.htm#Why_a_new_programming_language">Why a new programming language?</a></li>
</ul>
<h3>[</h3>
<ul>
<li><a href="libraries/array.htm#(in_arrayType)[(in_integer)]">const func baseType: (in arrayType: arr) <b>[</b> (in integer: index) ]</a></li>
<li><a href="libraries/array.htm#(in_arrayType)[(in_integer).._]">const func arrayType: (in arrayType: arr) <b>[</b> (in integer: start) .. ]</a></li>
<li><a href="libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">const func arrayType: (in arrayType: arr) <b>[</b> (in integer: start) ..
                                                  (in integer: stop) ]</a></li>
<li><a href="libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">const func arrayType: (in arrayType: arr) <b>[</b> (in integer: start) len
                                                  (in integer: length) ]</a></li>
<li><a href="libraries/bstring.htm#(in_bstring)[(in_integer)]">const func char: (in bstring: bstri) <b>[</b> (in integer: index) ]</a></li>
<li><a href="libraries/hash.htm#(in_hashType)[(in_keyType)]">const func baseType: (in hashType: aHashMap) <b>[</b> (in keyType: aKey) ]</a></li>
<li><a href="libraries/hash.htm#(in_hashType)[(in_keyType)default(in_baseType)]">const func baseType: (in hashType: aHashMap) <b>[</b> (in keyType: aKey) default (in baseType: defaultValue) ]</a></li>
<li><a href="libraries/idxarray.htm#(in_arrayType)[(in_indexType)]">const func baseType: (in arrayType: an_array) <b>[</b> (in indexType: index) ]</a></li>
<li><a href="libraries/idxarray.htm#(in_arrayType)[(in_indexType).._]">const func arrayType: (in arrayType: an_array) <b>[</b> (in indexType: start) .. ]</a></li>
<li><a href="libraries/idxarray.htm#(in_arrayType)[(in_indexType)..(in_indexType)]">const func arrayType: (in arrayType: an_array) <b>[</b> (in indexType: start) .. (in indexType: stop) ]</a></li>
<li><a href="libraries/idxarray.htm#(in_arrayType)[(in_indexType)len(in_indexType)]">const func arrayType: (in arrayType: an_array) <b>[</b> (in indexType: start) len (in indexType: stop) ]</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)[(in_integer)]">const func reference: (in ref_list: aRefList) <b>[</b> (in integer: index) ]</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)[(in_integer).._]">const func ref_list: (in ref_list: aRefList) <b>[</b> (in integer: start) .. ]</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)[(in_integer)..(in_integer)]">const func ref_list: (in ref_list: aRefList) <b>[</b> (in integer: start) ..
                                               (in integer: stop) ]</a></li>
<li><a href="libraries/string.htm#(in_string)[(in_integer)]">const func char: (in string: stri) <b>[</b> (in integer: index) ]</a></li>
<li><a href="libraries/string.htm#(in_string)[(in_integer).._]">const func string: (in string: stri) <b>[</b> (in integer: start) .. ]</a></li>
<li><a href="libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">const func string: (in string: stri) <b>[</b> (in integer: start) ..
                                       (in integer: stop) ]</a></li>
<li><a href="libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">const func string: (in string: stri) <b>[</b> (in integer: start) len
                                       (in integer: length) ]</a></li>
<li><a href="libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">const func string: (in string: stri) <b>[</b> (in integer: start) fixLen
                                       (in integer: length) ]</a></li>
</ul>
<h3>[ ..</h3>
<ul>
<li><a href="libraries/array.htm#(in_arrayType)[_..(in_integer)]">const func arrayType: (in arrayType: arr) <b>[ ..</b> (in integer: stop) ]</a></li>
<li><a href="libraries/idxarray.htm#(in_arrayType)[_..(in_indexType)]">const func arrayType: (in arrayType: an_array) <b>[ ..</b> (in indexType: stop) ]</a></li>
<li><a href="libraries/ref_list.htm#(in_ref_list)[_..(in_integer)]">const func ref_list: (in ref_list: aRefList) <b>[ ..</b> (in integer: stop) ]</a></li>
<li><a href="libraries/string.htm#(in_string)[_..(in_integer)]">const func string: (in string: stri) <b>[ ..</b> (in integer: stop) ]</a></li>
</ul>
<h3>abs</h3>
<ul>
<li><a href="libraries/bigint.htm#abs(in_bigInteger)">const func bigInteger: <b>abs</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigrat.htm#abs(in_bigRational)">const func bigRational: <b>abs</b> (in bigRational: number)</a></li>
<li><a href="libraries/complex.htm#abs(in_complex)">const func float: <b>abs</b> (in complex: number)</a></li>
<li><a href="libraries/float.htm#abs(in_float)">const func float: <b>abs</b> (in float: number)</a></li>
<li><a href="libraries/integer.htm#abs(in_integer)">const func integer: <b>abs</b> (in integer: number)</a></li>
<li><a href="libraries/rational.htm#abs(in_rational)">const func rational: <b>abs</b> (in rational: number)</a></li>
<li><a href="libraries/vector3d.htm#abs(in_vector3d)">const func float: <b>abs</b> (in vector3d: v)</a></li>
</ul>
<h3>accept</h3>
<ul>
<li><a href="libraries/listener.htm#accept(inout_inetListener)">const func file: <b>accept</b> (inout inetListener: aListener)</a></li>
<li><a href="libraries/sockbase.htm#accept(in_PRIMITIVE_SOCKET,inout_socketAddress)">const func PRIMITIVE_SOCKET: <b>accept</b> (in PRIMITIVE_SOCKET: listenerSocket,
                                     inout socketAddress: address)</a></li>
</ul>
<h3>acos</h3>
<ul>
<li><a href="libraries/math.htm#acos(in_float)">const func float: <b>acos</b> (in float: x)</a></li>
</ul>
<h3>add</h3>
<ul>
<li><a href="libraries/elliptic.htm#add(in_ellipticCurve,in_ecPoint,in_ecPoint)">const func ecPoint: <b>add</b> (in ellipticCurve: curve, in ecPoint: p1, in ecPoint: p2)</a></li>
<li><a href="libraries/elliptic.htm#add(in_ellipticCurve,in_jacobianPoint,in_jacobianPoint)">const func jacobianPoint: <b>add</b> (in ellipticCurve: curve, in jacobianPoint: jp1, in jacobianPoint: jp2)</a></li>
</ul>
<h3>addCheck</h3>
<ul>
<li><a href="libraries/poll.htm#addCheck(inout_pollData,in_PRIMITIVE_SOCKET,in_integer,in_file)">const proc: <b>addCheck</b> (inout pollData: pData, in PRIMITIVE_SOCKET: aSocket,
                      in integer: eventsToCheck, in file: aFile)</a></li>
<li><a href="libraries/poll.htm#addCheck(inout_pollData,in_file,in_integer)">const proc: <b>addCheck</b> (inout pollData: pData, in file: aFile,
                      in integer: eventsToCheck)</a></li>
</ul>
<h3>addExtension</h3>
<ul>
<li><a href="libraries/x509cert.htm#addExtension(inout_x509Cert,in_boolean,in_var_x509Extension)">const proc: <b>addExtension</b> (inout x509Cert: cert, in boolean: isCritical,
    in var x509Extension: extension)</a></li>
</ul>
<h3>addPatternRule</h3>
<ul>
<li><a href="libraries/makedata.htm#addPatternRule(inout_makeDataType,in_ruleType)">const proc: <b>addPatternRule</b> (inout makeDataType: makeData, in ruleType: rule)</a></li>
</ul>
<h3>addRule</h3>
<ul>
<li><a href="libraries/makedata.htm#addRule(inout_makeDataType,in_ruleType)">const proc: <b>addRule</b> (inout makeDataType: makeData, in ruleType: rule)</a></li>
</ul>
<h3>aes.s7i</h3>
<ul>
<li><a href="libraries/aes.htm">aes.s7i</a></li>
</ul>
<h3>aesGcmState</h3>
<ul>
<li><a href="libraries/aes_gcm.htm#aesGcmState">const type: <b>aesGcmState</b></a></li>
</ul>
<h3>aesState</h3>
<ul>
<li><a href="libraries/aes.htm#aesState">const type: <b>aesState</b></a></li>
</ul>
<h3>aes_gcm.s7i</h3>
<ul>
<li><a href="libraries/aes_gcm.htm">aes_gcm.s7i</a></li>
</ul>
<h3>and</h3>
<ul>
<li><a href="libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">const func boolean: (in boolean: boolValue1) <b>and</b> (ref func boolean: boolValue2)</a></li>
</ul>
<h3>applyMacros</h3>
<ul>
<li><a href="libraries/makedata.htm#applyMacros(in_stringHash,in_string,in_boolean)">const func string: <b>applyMacros</b> (in stringHash: macros, in string: stri,
    in boolean: leaveUndefMacros)</a></li>
</ul>
<h3>ar.s7i</h3>
<ul>
<li><a href="libraries/ar.htm">ar.s7i</a></li>
</ul>
<h3>arArchive</h3>
<ul>
<li><a href="libraries/ar.htm#arArchive">const type: <b>arArchive</b></a></li>
</ul>
<h3>arc</h3>
<ul>
<li><a href="libraries/draw.htm#arc(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_float,in_color)">const proc: <b>arc</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</a></li>
<li><a href="libraries/draw.htm#arc(in_integer,in_integer,in_integer,in_float,in_float,in_color)">const proc: <b>arc</b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</a></li>
<li><a href="libraries/draw.htm#arc(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_float,in_integer,in_color)">const proc: <b>arc</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in integer: width,
    in color: col)</a></li>
<li><a href="libraries/draw.htm#arc(in_integer,in_integer,in_integer,in_float,in_float,in_integer,in_color)">const proc: <b>arc</b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in integer: width,
    in color: col)</a></li>
</ul>
<h3>arc4.s7i</h3>
<ul>
<li><a href="libraries/arc4.htm">arc4.s7i</a></li>
</ul>
<h3>arc4State</h3>
<ul>
<li><a href="libraries/arc4.htm#arc4State">const type: <b>arc4State</b></a></li>
</ul>
<h3>archiveRegisterType</h3>
<ul>
<li><a href="libraries/archive_base.htm#archiveRegisterType">const type: <b>archiveRegisterType</b></a></li>
</ul>
<h3>archive_base.s7i</h3>
<ul>
<li><a href="libraries/archive_base.htm">archive_base.s7i</a></li>
</ul>
<h3>arg</h3>
<ul>
<li><a href="libraries/complex.htm#arg(in_complex)">const func float: <b>arg</b> (in complex: number)</a></li>
</ul>
<h3>argv</h3>
<ul>
<li><a href="libraries/environment.htm#argv(PROGRAM)">const func array string: <b>argv</b> (PROGRAM)</a></li>
</ul>
<h3>argv(PROGRAM)</h3>
<ul>
<li><a href="manual/os.htm#argv_PROGRAM">argv(PROGRAM)</a></li>
</ul>
<h3>armscii_8</h3>
<ul>
<li><a href="libraries/charsets.htm#armscii_8">const string: <b>armscii_8</b></a></li>
</ul>
<h3>array</h3>
<ul>
<li><a href="manual/types.htm#array">array</a></li>
<li><a href="libraries/array.htm#array(in_type)">const func type: <b>array</b> (in type: baseType)</a></li>
</ul>
<h3>array [</h3>
<ul>
<li><a href="libraries/idxarray.htm#array_[(in_type)](in_type)">const func type: <b>array [</b> (in type: indexType) ] (in type: baseType)</a></li>
</ul>
<h3>array.s7i</h3>
<ul>
<li><a href="libraries/array.htm">array.s7i</a></li>
</ul>
<h3>arrayMaxIdx</h3>
<ul>
<li><a href="libraries/progs.htm#arrayMaxIdx(in_reference)">const func integer: <b>arrayMaxIdx</b> (in reference: arrayRef)</a></li>
</ul>
<h3>arrayMinIdx</h3>
<ul>
<li><a href="libraries/progs.htm#arrayMinIdx(in_reference)">const func integer: <b>arrayMinIdx</b> (in reference: arrayRef)</a></li>
</ul>
<h3>ascent</h3>
<ul>
<li><a href="libraries/font.htm#ascent(in_font)">const func integer: <b>ascent</b> (in font: aFont)</a></li>
</ul>
<h3>asin</h3>
<ul>
<li><a href="libraries/math.htm#asin(in_float)">const func float: <b>asin</b> (in float: x)</a></li>
</ul>
<h3>asn1.s7i</h3>
<ul>
<li><a href="libraries/asn1.htm">asn1.s7i</a></li>
</ul>
<h3>asn1DataElement</h3>
<ul>
<li><a href="libraries/asn1.htm#asn1DataElement">const type: <b>asn1DataElement</b></a></li>
</ul>
<h3>asn1TagType</h3>
<ul>
<li><a href="libraries/asn1.htm#asn1TagType">const type: <b>asn1TagType</b></a></li>
</ul>
<h3>atan</h3>
<ul>
<li><a href="libraries/math.htm#atan(in_float)">const func float: <b>atan</b> (in float: x)</a></li>
</ul>
<h3>atan2</h3>
<ul>
<li><a href="libraries/math.htm#atan2(in_float,in_float)">const func float: <b>atan2</b> (in float: y, in float: x)</a></li>
</ul>
<h3>await</h3>
<ul>
<li><a href="libraries/time.htm#await(ref_time)">const proc: <b>await</b> (ref time: aTime)</a></li>
</ul>
<h3>bStriBe</h3>
<ul>
<li><a href="libraries/bstring.htm#bStriBe(in_bigInteger,in_boolean)">const func bstring: <b>bStriBe</b> (in bigInteger: number,
    in boolean: isSigned)</a></li>
</ul>
<h3>bStriBe2BigInt</h3>
<ul>
<li><a href="libraries/bstring.htm#bStriBe2BigInt(in_bstring,in_boolean)">const func bigInteger: <b>bStriBe2BigInt</b> (in bstring: bstri,
    in boolean: isSigned)</a></li>
</ul>
<h3>bStriLe</h3>
<ul>
<li><a href="libraries/bstring.htm#bStriLe(in_bigInteger,in_boolean)">const func bstring: <b>bStriLe</b> (in bigInteger: number,
    in boolean: isSigned)</a></li>
</ul>
<h3>bStriLe2BigInt</h3>
<ul>
<li><a href="libraries/bstring.htm#bStriLe2BigInt(in_bstring,in_boolean)">const func bigInteger: <b>bStriLe2BigInt</b> (in bstring: bstri,
    in boolean: isSigned)</a></li>
</ul>
<h3>bas7.sd7</h3>
<ul>
<li><a href="scrshots/bas7.htm">Basic interpreter</a></li>
</ul>
<h3>big</h3>
<ul>
<li><a href="libraries/bin64.htm#big(in_bin64)">const func bigInteger: <b>big</b> (in bin64: bits)</a></li>
</ul>
<h3>bigFileSize</h3>
<ul>
<li><a href="libraries/filesys.htm#bigFileSize(inout_fileSys,in_string)">const func bigInteger: <b>bigFileSize</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#bigFileSize(inout_emptyFileSys,in_string)">const func bigInteger: <b>bigFileSize</b> (inout emptyFileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/ftp.htm#bigFileSize(inout_ftpConnection,in_string)">const func bigInteger: <b>bigFileSize</b> (inout ftpConnection: ftp, in string: fileName)</a></li>
<li><a href="libraries/osfiles.htm#bigFileSize(in_string)">const func bigInteger: <b>bigFileSize</b> (in string: filePath)</a></li>
</ul>
<h3>bigInteger</h3>
<ul>
<li><a href="manual/types.htm#bigInteger">bigInteger</a></li>
<li><a href="libraries/bigint.htm#bigInteger">const type: <b>bigInteger</b></a></li>
<li><a href="libraries/bigint.htm#bigInteger(in_integer)">const func bigInteger: <b>bigInteger</b> (in integer: number)</a></li>
<li><a href="libraries/bigint.htm#bigInteger(in_string)">const func bigInteger: <b>bigInteger</b> (in string: stri)</a></li>
<li><a href="libraries/bigint.htm#bigInteger(in_string,in_integer)">const func bigInteger: <b>bigInteger</b> (in string: stri, in integer: base)</a></li>
<li><a href="libraries/bin64.htm#bigInteger(in_bin64)">const func bigInteger: <b>bigInteger</b> (in bin64: bits)</a></li>
</ul>
<h3>bigLength</h3>
<ul>
<li><a href="libraries/bigfile.htm#bigLength(ref_null_file)">const func bigInteger: <b>bigLength</b> (ref null_file: aFile)</a></li>
<li><a href="libraries/bigfile.htm#bigLength(ref_external_file)">const func bigInteger: <b>bigLength</b> (ref external_file: aFile)</a></li>
</ul>
<h3>bigRational</h3>
<ul>
<li><a href="manual/types.htm#bigRational">bigRational</a></li>
<li><a href="libraries/bigrat.htm#bigRational">const type: <b>bigRational</b></a></li>
<li><a href="libraries/bigrat.htm#bigRational(in_integer)">const func bigRational: <b>bigRational</b> (in integer: number)</a></li>
<li><a href="libraries/bigrat.htm#bigRational(in_bigInteger)">const func bigRational: <b>bigRational</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigrat.htm#bigRational(in_var_string)">const func bigRational: <b>bigRational</b> (in var string: stri)</a></li>
</ul>
<h3>bigTell</h3>
<ul>
<li><a href="libraries/bigfile.htm#bigTell(ref_null_file)">const func bigInteger: <b>bigTell</b> (ref null_file: aFile)</a></li>
<li><a href="libraries/bigfile.htm#bigTell(ref_external_file)">const func bigInteger: <b>bigTell</b> (ref external_file: aFile)</a></li>
</ul>
<h3>bigfile.s7i</h3>
<ul>
<li><a href="libraries/bigfile.htm">bigfile.s7i</a></li>
</ul>
<h3>bigint.s7i</h3>
<ul>
<li><a href="libraries/bigint.htm">bigint.s7i</a></li>
</ul>
<h3>bigrat.s7i</h3>
<ul>
<li><a href="libraries/bigrat.htm">bigrat.s7i</a></li>
</ul>
<h3>bin32</h3>
<ul>
<li><a href="manual/types.htm#bin32">bin32</a></li>
<li><a href="libraries/bin32.htm#bin32">const type: <b>bin32</b></a></li>
<li><a href="libraries/bin32.htm#bin32(in_integer)">const func bin32: <b>bin32</b> (in integer: number)</a></li>
<li><a href="libraries/bin32.htm#bin32(in_char)">const func bin32: <b>bin32</b> (in char: ch)</a></li>
<li><a href="libraries/bin32.htm#bin32(in_float)">const func bin32: <b>bin32</b> (in float: number)</a></li>
<li><a href="libraries/bin32.htm#bin32(in_string,LE)">const func bin32: <b>bin32</b> (in string: fourBytes, LE)</a></li>
<li><a href="libraries/bin32.htm#bin32(in_string,BE)">const func bin32: <b>bin32</b> (in string: fourBytes, BE)</a></li>
</ul>
<h3>bin32.s7i</h3>
<ul>
<li><a href="libraries/bin32.htm">bin32.s7i</a></li>
</ul>
<h3>bin64</h3>
<ul>
<li><a href="manual/types.htm#bin64">bin64</a></li>
<li><a href="libraries/bin64.htm#bin64">const type: <b>bin64</b></a></li>
<li><a href="libraries/bin64.htm#bin64(in_integer)">const func bin64: <b>bin64</b> (in integer: number)</a></li>
<li><a href="libraries/bin64.htm#bin64(in_bigInteger)">const func bin64: <b>bin64</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bin64.htm#bin64(in_char)">const func bin64: <b>bin64</b> (in char: ch)</a></li>
<li><a href="libraries/bin64.htm#bin64(in_float)">const func bin64: <b>bin64</b> (in float: number)</a></li>
<li><a href="libraries/bin64.htm#bin64(in_string,LE)">const func bin64: <b>bin64</b> (in string: eightBytes, LE)</a></li>
<li><a href="libraries/bin64.htm#bin64(in_string,BE)">const func bin64: <b>bin64</b> (in string: eightBytes, BE)</a></li>
</ul>
<h3>bin64.s7i</h3>
<ul>
<li><a href="libraries/bin64.htm">bin64.s7i</a></li>
</ul>
<h3>bind</h3>
<ul>
<li><a href="libraries/sockbase.htm#bind(in_PRIMITIVE_SOCKET,in_socketAddress)">const proc: <b>bind</b> (in PRIMITIVE_SOCKET: listenerSocket,
                  in socketAddress: address)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bigInteger)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in bigInteger: num)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bigRational)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in bigRational: bigRatData)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_boolean)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in boolean: flag)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bstring)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in bstring: bstri)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_float)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in float: number)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_integer)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in integer: number)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,NULL)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, NULL)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_string)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in string: stri)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_time)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in time: timeData)</a></li>
<li><a href="libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_duration)">const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in duration: durationData)</a></li>
</ul>
<h3>bitLength</h3>
<ul>
<li><a href="libraries/bigint.htm#bitLength(in_bigInteger)">const func integer: <b>bitLength</b> (in bigInteger: number)</a></li>
<li><a href="libraries/integer.htm#bitLength(in_integer)">const func integer: <b>bitLength</b> (in integer: number)</a></li>
</ul>
<h3>bitdata.s7i</h3>
<ul>
<li><a href="libraries/bitdata.htm">bitdata.s7i</a></li>
</ul>
<h3>bitmapFont</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#bitmapFont">const type: <b>bitmapFont</b></a></li>
</ul>
<h3>bitmapfont.s7i</h3>
<ul>
<li><a href="libraries/bitmapfont.htm">bitmapfont.s7i</a></li>
</ul>
<h3>bitsRead</h3>
<ul>
<li><a href="libraries/bitdata.htm#bitsRead(in_reverseBitStream)">const func integer: <b>bitsRead</b> (in reverseBitStream: inBitStream)</a></li>
</ul>
<h3>bitsStillInStream</h3>
<ul>
<li><a href="libraries/bitdata.htm#bitsStillInStream(in_reverseBitStream)">const func integer: <b>bitsStillInStream</b> (in reverseBitStream: inBitStream)</a></li>
</ul>
<h3>bitset</h3>
<ul>
<li><a href="libraries/bitset.htm#bitset">const type: <b>bitset</b></a></li>
<li><a href="libraries/bitset.htm#bitset(in_integer)">const func bitset: <b>bitset</b> (in integer: number)</a></li>
<li><a href="libraries/bitset.htm#bitset(in_var_string)">const func bitset: <b>bitset</b> (in var string: stri)</a></li>
<li><a href="libraries/bitsetof.htm#bitset(in_type)">const func type: <b>bitset</b> (in type: baseType)</a></li>
</ul>
<h3>bitset.s7i</h3>
<ul>
<li><a href="libraries/bitset.htm">bitset.s7i</a></li>
</ul>
<h3>bitsetof.s7i</h3>
<ul>
<li><a href="libraries/bitsetof.htm">bitsetof.s7i</a></li>
</ul>
<h3>blobType</h3>
<ul>
<li><a href="libraries/db_prop.htm#blobType(in_dbCategory)">const func string: <b>blobType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>blockSize</h3>
<ul>
<li><a href="libraries/aes.htm#blockSize(AES)">const func integer: <b>blockSize</b> (AES)</a></li>
<li><a href="libraries/aes_gcm.htm#blockSize(AES_GCM)">const func integer: <b>blockSize</b> (AES_GCM)</a></li>
<li><a href="libraries/arc4.htm#blockSize(RC4)">const func integer: <b>blockSize</b> (RC4)</a></li>
<li><a href="libraries/blowfish.htm#blockSize(BLOWFISH)">const func integer: <b>blockSize</b> (BLOWFISH)</a></li>
<li><a href="libraries/cipher.htm#blockSize(in_cipherAlgorithm)">const func integer: <b>blockSize</b> (in cipherAlgorithm: cipherAlg)</a></li>
<li><a href="libraries/des.htm#blockSize(DES)">const func integer: <b>blockSize</b> (DES)</a></li>
<li><a href="libraries/msgdigest.htm#blockSize(in_digestAlgorithm)">const func integer: <b>blockSize</b> (in digestAlgorithm: digestAlg)</a></li>
<li><a href="libraries/tdes.htm#blockSize(TDES)">const func integer: <b>blockSize</b> (TDES)</a></li>
</ul>
<h3>blowfish.s7i</h3>
<ul>
<li><a href="libraries/blowfish.htm">blowfish.s7i</a></li>
</ul>
<h3>blowfishState</h3>
<ul>
<li><a href="libraries/blowfish.htm#blowfishState">const type: <b>blowfishState</b></a></li>
</ul>
<h3>bmp.s7i</h3>
<ul>
<li><a href="libraries/bmp.htm">bmp.s7i</a></li>
</ul>
<h3>body</h3>
<ul>
<li><a href="libraries/progs.htm#body(in_reference)">const func reference: <b>body</b> (in reference: funcRef)</a></li>
</ul>
<h3>boolean</h3>
<ul>
<li><a href="manual/types.htm#boolean">boolean</a></li>
<li><a href="libraries/boolean.htm#boolean">const type: <b>boolean</b></a></li>
<li><a href="libraries/boolean.htm#boolean(in_integer)">const func boolean: <b>boolean</b> (in integer: number)</a></li>
<li><a href="libraries/boolean.htm#boolean(in_string)">const func boolean: <b>boolean</b> (in string: stri)</a></li>
</ul>
<h3>boolean.s7i</h3>
<ul>
<li><a href="libraries/boolean.htm">boolean.s7i</a></li>
</ul>
<h3>box</h3>
<ul>
<li><a href="libraries/draw.htm#box(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>box</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</a></li>
<li><a href="libraries/draw.htm#box(in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>box</b> (in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</a></li>
</ul>
<h3>boxTo</h3>
<ul>
<li><a href="libraries/draw.htm#boxTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>boxTo</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</a></li>
<li><a href="libraries/draw.htm#boxTo(in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>boxTo</b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</a></li>
</ul>
<h3>browser.s7i</h3>
<ul>
<li><a href="libraries/browser.htm">browser.s7i</a></li>
</ul>
<h3>browserConnection</h3>
<ul>
<li><a href="libraries/browser.htm#browserConnection">const type: <b>browserConnection</b></a></li>
</ul>
<h3>bstring</h3>
<ul>
<li><a href="manual/types.htm#bstring">bstring</a></li>
<li><a href="libraries/bstring.htm#bstring">const type: <b>bstring</b></a></li>
<li><a href="libraries/bstring.htm#bstring(in_string)">const func bstring: <b>bstring</b> (in string: stri)</a></li>
</ul>
<h3>bstring.s7i</h3>
<ul>
<li><a href="libraries/bstring.htm">bstring.s7i</a></li>
</ul>
<h3>bufferFile</h3>
<ul>
<li><a href="libraries/iobuffer.htm#bufferFile">const type: <b>bufferFile</b></a></li>
</ul>
<h3>buttonPressed</h3>
<ul>
<li><a href="libraries/keybd.htm#buttonPressed(in_keyboard_file,in_char)">const func boolean: <b>buttonPressed</b> (in keyboard_file: keybd, in char: button)</a></li>
<li><a href="libraries/keybd.htm#buttonPressed(in_graph_keybd_file,in_char)">const func boolean: <b>buttonPressed</b> (in graph_keybd_file: keybd, in char: button)</a></li>
</ul>
<h3>bytedata.s7i</h3>
<ul>
<li><a href="libraries/bytedata.htm">bytedata.s7i</a></li>
</ul>
<h3>bytes</h3>
<ul>
<li><a href="libraries/bin32.htm#bytes(in_bin32,BE,in_integer)">const func string: <b>bytes</b> (in bin32: bits, BE, in integer: length)</a></li>
<li><a href="libraries/bin32.htm#bytes(in_bin32,LE,in_integer)">const func string: <b>bytes</b> (in bin32: bits, LE, in integer: length)</a></li>
<li><a href="libraries/bin64.htm#bytes(in_bin64,BE,in_integer)">const func string: <b>bytes</b> (in bin64: bits, BE, in integer: length)</a></li>
<li><a href="libraries/bin64.htm#bytes(in_bin64,LE,in_integer)">const func string: <b>bytes</b> (in bin64: bits, LE, in integer: length)</a></li>
<li><a href="libraries/bytedata.htm#bytes(in_integer,in_signedness,in_endianness)">const func string: <b>bytes</b> (in integer: number,
    in signedness: signed, in endianness: endian)</a></li>
<li><a href="libraries/bytedata.htm#bytes(in_integer,in_signedness,in_endianness,in_integer)">const func string: <b>bytes</b> (in integer: number,
    in signedness: signed, in endianness: endian, in integer: length)</a></li>
<li><a href="libraries/bytedata.htm#bytes(in_bigInteger,in_signedness,in_endianness)">const func string: <b>bytes</b> (in bigInteger: number,
    in signedness: signed, in endianness: endian)</a></li>
<li><a href="libraries/bytedata.htm#bytes(in_bigInteger,in_signedness,in_endianness,in_integer)">const func string: <b>bytes</b> (in bigInteger: number,
    in signedness: signed, in endianness: endian, in integer: length)</a></li>
</ul>
<h3>bytes2BigInt</h3>
<ul>
<li><a href="libraries/bytedata.htm#bytes2BigInt(in_string,in_signedness,in_endianness)">const func bigInteger: <b>bytes2BigInt</b> (in string: byteStri,
    in signedness: signed, in endianness: endian)</a></li>
</ul>
<h3>bytes2Int</h3>
<ul>
<li><a href="libraries/bytedata.htm#bytes2Int(in_string,in_signedness,in_endianness)">const func integer: <b>bytes2Int</b> (in string: byteStri,
    in signedness: signed, in endianness: endian)</a></li>
</ul>
<h3>calc7.sd7</h3>
<ul>
<li><a href="scrshots/calc7.htm">Calc7</a></li>
</ul>
<h3>capHeight</h3>
<ul>
<li><a href="libraries/font.htm#capHeight(in_font)">const func integer: <b>capHeight</b> (in font: aFont)</a></li>
</ul>
<h3>capturePixmap</h3>
<ul>
<li><a href="libraries/graph.htm#capturePixmap(ref_integer,ref_integer,ref_integer,ref_integer)">const func PRIMITIVE_WINDOW: <b>capturePixmap</b> (
    ref integer: left, ref integer: upper,
    ref integer: width, ref integer: height)</a></li>
</ul>
<h3>card</h3>
<ul>
<li><a href="libraries/bitset.htm#card(in_bitset)">const func integer: <b>card</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#card(in_setType)">const func integer: <b>card</b> (in setType: aSet)</a></li>
<li><a href="libraries/hashsetof.htm#card(in_setType)">const func integer: <b>card</b> (in setType: aSet)</a></li>
</ul>
<h3>cardBackside</h3>
<ul>
<li><a href="libraries/cards.htm#cardBackside(in_integer)">const func PRIMITIVE_WINDOW: <b>cardBackside</b> (in integer: scale)</a></li>
</ul>
<h3>cardPixmap</h3>
<ul>
<li><a href="libraries/cards.htm#cardPixmap(in_cardSuit,in_cardRank,in_integer)">const func PRIMITIVE_WINDOW: <b>cardPixmap</b> (in cardSuit: suit, in cardRank: rank, in integer: scale)</a></li>
</ul>
<h3>cardRank</h3>
<ul>
<li><a href="libraries/cards.htm#cardRank">const type: <b>cardRank</b></a></li>
</ul>
<h3>cardSuit</h3>
<ul>
<li><a href="libraries/cards.htm#cardSuit">const type: <b>cardSuit</b></a></li>
</ul>
<h3>cards.s7i</h3>
<ul>
<li><a href="libraries/cards.htm">cards.s7i</a></li>
</ul>
<h3>case-statement</h3>
<ul>
<li><a href="manual/stats.htm#case-statement">case-statement</a></li>
</ul>
<h3>castle.sd7</h3>
<ul>
<li><a href="scrshots/castle.htm">Castle</a></li>
</ul>
<h3>category</h3>
<ul>
<li><a href="manual/types.htm#category">category</a></li>
<li><a href="libraries/category.htm#category">const type: <b>category</b></a></li>
<li><a href="libraries/category.htm#category(in_string)">const func category: <b>category</b> (in string: catName)</a></li>
<li><a href="libraries/category.htm#category(in_integer)">const func category: <b>category</b> (in integer: number)</a></li>
<li><a href="libraries/progs.htm#category(in_reference)">const func category: <b>category</b> (in reference: aReference)</a></li>
</ul>
<h3>category.s7i</h3>
<ul>
<li><a href="libraries/category.htm">category.s7i</a></li>
</ul>
<h3>ccConf</h3>
<ul>
<li><a href="libraries/cc_conf.htm#ccConf">var ccConfigType: <b>ccConf</b></a></li>
</ul>
<h3>ccConfigType</h3>
<ul>
<li><a href="libraries/cc_conf.htm#ccConfigType">const type: <b>ccConfigType</b></a></li>
</ul>
<h3>cc_conf.s7i</h3>
<ul>
<li><a href="libraries/cc_conf.htm">cc_conf.s7i</a></li>
</ul>
<h3>ccittfax.s7i</h3>
<ul>
<li><a href="libraries/ccittfax.htm">ccittfax.s7i</a></li>
</ul>
<h3>ceil</h3>
<ul>
<li><a href="libraries/bigrat.htm#ceil(in_bigRational)">const func bigInteger: <b>ceil</b> (in bigRational: number)</a></li>
<li><a href="libraries/math.htm#ceil(in_float)">const func float: <b>ceil</b> (in float: x)</a></li>
<li><a href="libraries/rational.htm#ceil(in_rational)">const func integer: <b>ceil</b> (in rational: number)</a></li>
</ul>
<h3>cgi.s7i</h3>
<ul>
<li><a href="libraries/cgi.htm">cgi.s7i</a></li>
</ul>
<h3>cgidialog.s7i</h3>
<ul>
<li><a href="libraries/cgidialog.htm">cgidialog.s7i</a></li>
</ul>
<h3>char</h3>
<ul>
<li><a href="manual/types.htm#char">char</a></li>
<li><a href="libraries/char.htm#char">const type: <b>char</b></a></li>
<li><a href="libraries/char.htm#char(in_integer)">const func char: <b>char</b> (in integer: number)</a></li>
<li><a href="libraries/char.htm#char(in_string)">const func char: <b>char</b> (in string: stri)</a></li>
</ul>
<h3>char.s7i</h3>
<ul>
<li><a href="libraries/char.htm">char.s7i</a></li>
</ul>
<h3>charColor</h3>
<ul>
<li><a href="libraries/pic_util.htm#charColor(in_char,in_color)">const func color: <b>charColor</b> (in char: ch, in color: background)</a></li>
</ul>
<h3>characterSpacing</h3>
<ul>
<li><a href="libraries/font.htm#characterSpacing(in_font)">const func integer: <b>characterSpacing</b> (in font: aFont)</a></li>
</ul>
<h3>charsets.s7i</h3>
<ul>
<li><a href="libraries/charsets.htm">charsets.s7i</a></li>
</ul>
<h3>chdir</h3>
<ul>
<li><a href="manual/os.htm#chdir">chdir</a></li>
<li><a href="libraries/filesys.htm#chdir(inout_fileSys,in_string)">const proc: <b>chdir</b> (inout fileSys: fileSystem, in string: dirPath)</a></li>
<li><a href="libraries/ftp.htm#chdir(inout_ftpConnection,in_string)">const proc: <b>chdir</b> (inout ftpConnection: ftp, in string: dirName)</a></li>
<li><a href="libraries/osfiles.htm#chdir(in_string)">const proc: <b>chdir</b> (in string: dirPath)</a></li>
</ul>
<h3>checkbox</h3>
<ul>
<li><a href="libraries/cgidialog.htm#checkbox(in_string)">const func checkbox: <b>checkbox</b> (in string: name)</a></li>
</ul>
<h3>childStdErr</h3>
<ul>
<li><a href="libraries/process.htm#childStdErr(in_process)">const func file: <b>childStdErr</b> (in process: aProcess)</a></li>
</ul>
<h3>childStdIn</h3>
<ul>
<li><a href="libraries/process.htm#childStdIn(in_process)">const func file: <b>childStdIn</b> (in process: aProcess)</a></li>
</ul>
<h3>childStdOut</h3>
<ul>
<li><a href="libraries/process.htm#childStdOut(in_process)">const func file: <b>childStdOut</b> (in process: aProcess)</a></li>
</ul>
<h3>chr</h3>
<ul>
<li><a href="libraries/char.htm#chr(in_integer)">const func char: <b>chr</b> (in integer: number)</a></li>
</ul>
<h3>cipher.s7i</h3>
<ul>
<li><a href="libraries/cipher.htm">cipher.s7i</a></li>
</ul>
<h3>cipherAlgorithm</h3>
<ul>
<li><a href="libraries/cipher.htm#cipherAlgorithm">const type: <b>cipherAlgorithm</b></a></li>
</ul>
<h3>cipherState</h3>
<ul>
<li><a href="libraries/cipher.htm#cipherState">const type: <b>cipherState</b></a></li>
</ul>
<h3>circle</h3>
<ul>
<li><a href="libraries/draw.htm#circle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_color)">const proc: <b>circle</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius, in color: col)</a></li>
<li><a href="libraries/draw.htm#circle(in_integer,in_integer,in_integer,in_color)">const proc: <b>circle</b> (in integer: x, in integer: y, in integer: radius, in color: col)</a></li>
</ul>
<h3>clear</h3>
<ul>
<li><a href="libraries/console.htm#clear(in_console_file,in_integer,in_integer,in_integer,in_integer)">const proc: <b>clear</b> (in console_file: aConsoleFile, in integer: upper,
    in integer: left, in integer: lower, in integer: right)</a></li>
<li><a href="libraries/console.htm#clear(in_console_file)">const proc: <b>clear</b> (in console_file: aConsoleFile)</a></li>
<li><a href="libraries/draw.htm#clear(inout_PRIMITIVE_WINDOW,in_color)">const proc: <b>clear</b> (inout PRIMITIVE_WINDOW: win, in color: col)</a></li>
<li><a href="libraries/draw.htm#clear(inout_PRIMITIVE_WINDOW)">const proc: <b>clear</b> (inout PRIMITIVE_WINDOW: win)</a></li>
<li><a href="libraries/draw.htm#clear(in_color)">const proc: <b>clear</b> (in color: col)</a></li>
<li><a href="libraries/graph_file.htm#clear(inout_graph_file,in_integer,in_integer,in_integer,in_integer)">const proc: <b>clear</b> (inout graph_file: aGraphFile,
    in integer: upper, in integer: left, in integer: lower, in integer: right)</a></li>
<li><a href="libraries/graph_file.htm#clear(inout_graph_file)">const proc: <b>clear</b> (inout graph_file: aGraphFile)</a></li>
<li><a href="libraries/pixmap_file.htm#clear(inout_pixmapFontFile,in_integer,in_integer,in_integer,in_integer)">const proc: <b>clear</b> (inout pixmapFontFile: fontFile,
    in integer: upper, in integer: left, in integer: lower, in integer: right)</a></li>
<li><a href="libraries/pixmap_file.htm#clear(inout_pixmapFontFile)">const proc: <b>clear</b> (inout pixmapFontFile: fontFile)</a></li>
<li><a href="libraries/poll.htm#clear(inout_pollData)">const proc: <b>clear</b> (inout pollData: pData)</a></li>
<li><a href="libraries/text.htm#clear(inout_text,in_integer,in_integer,in_integer,in_integer)">const proc: <b>clear</b> (inout text: aText, in integer: upper, in integer: left,
    in integer: lower, in integer: right)</a></li>
<li><a href="libraries/text.htm#clear(inout_text)">const proc: <b>clear</b> (inout text: aText)</a></li>
<li><a href="libraries/window.htm#clear(inout_window_file,in_integer,in_integer,in_integer,in_integer)">const proc: <b>clear</b> (inout window_file: window_fil,
    in integer: upper, in integer: left, in integer: lower, in integer: right)</a></li>
<li><a href="libraries/window.htm#clear(inout_window_file)">const proc: <b>clear</b> (inout window_file: window_fil)</a></li>
</ul>
<h3>cli_cmds.s7i</h3>
<ul>
<li><a href="libraries/cli_cmds.htm">cli_cmds.s7i</a></li>
</ul>
<h3>clib_file</h3>
<ul>
<li><a href="libraries/clib_file.htm#clib_file">const type: <b>clib_file</b></a></li>
</ul>
<h3>clib_file.s7i</h3>
<ul>
<li><a href="libraries/clib_file.htm">clib_file.s7i</a></li>
</ul>
<h3>clickedXPos</h3>
<ul>
<li><a href="libraries/keybd.htm#clickedXPos(in_keyboard_file)">const func integer: <b>clickedXPos</b> (in keyboard_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#clickedXPos(in_graph_keybd_file)">const func integer: <b>clickedXPos</b> (in graph_keybd_file: keybd)</a></li>
</ul>
<h3>clickedYPos</h3>
<ul>
<li><a href="libraries/keybd.htm#clickedYPos(in_keyboard_file)">const func integer: <b>clickedYPos</b> (in keyboard_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#clickedYPos(in_graph_keybd_file)">const func integer: <b>clickedYPos</b> (in graph_keybd_file: keybd)</a></li>
</ul>
<h3>clobType</h3>
<ul>
<li><a href="libraries/db_prop.htm#clobType(in_dbCategory)">const func string: <b>clobType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>cloneFile</h3>
<ul>
<li><a href="manual/os.htm#cloneFile">cloneFile</a></li>
<li><a href="libraries/osfiles.htm#cloneFile(in_string,in_string)">const proc: <b>cloneFile</b> (in string: sourcePath, in string: destPath)</a></li>
</ul>
<h3>close</h3>
<ul>
<li><a href="libraries/ar.htm#close(inout_arArchive)">const proc: <b>close</b> (inout arArchive: ar)</a></li>
<li><a href="libraries/bitdata.htm#close(inout_lsbBitStream)">const proc: <b>close</b> (inout lsbBitStream: inBitStream)</a></li>
<li><a href="libraries/bitdata.htm#close(inout_msbBitStream)">const proc: <b>close</b> (inout msbBitStream: inBitStream)</a></li>
<li><a href="libraries/clib_file.htm#close(in_clib_file)">const proc: <b>close</b> (in clib_file: aFile)</a></li>
<li><a href="libraries/cpio.htm#close(inout_cpioArchive)">const proc: <b>close</b> (inout cpioArchive: cpio)</a></li>
<li><a href="libraries/external_file.htm#close(inout_external_file)">const proc: <b>close</b> (inout external_file: aFile)</a></li>
<li><a href="libraries/file.htm#close(inout_file)">const proc: <b>close</b> (inout file: aFile)</a></li>
<li><a href="libraries/filesys.htm#close(inout_fileSys)">const proc: <b>close</b> (inout fileSys: fileSystem)</a></li>
<li><a href="libraries/ftp.htm#close(inout_ftpConnection)">const proc: <b>close</b> (inout ftpConnection: ftp)</a></li>
<li><a href="libraries/graph_file.htm#close(inout_graph_file)">const proc: <b>close</b> (inout graph_file: aGraphFile)</a></li>
<li><a href="libraries/gzip.htm#close(in_gzipFile)">const proc: <b>close</b> (in gzipFile: aFile)</a></li>
<li><a href="libraries/gzip.htm#close(inout_gzipWriteFile)">const proc: <b>close</b> (inout gzipWriteFile: aFile)</a></li>
<li><a href="libraries/iobuffer.htm#close(inout_bufferFile)">const proc: <b>close</b> (inout bufferFile: aBufferFile)</a></li>
<li><a href="libraries/listener.htm#close(inout_inetListener)">const proc: <b>close</b> (inout inetListener: aListener)</a></li>
<li><a href="libraries/lzma.htm#close(in_lzmaFile)">const proc: <b>close</b> (in lzmaFile: aFile)</a></li>
<li><a href="libraries/null_file.htm#close(in_null_file)">const proc: <b>close</b> (in null_file: aFile)</a></li>
<li><a href="libraries/rpm.htm#close(inout_rpmArchive)">const proc: <b>close</b> (inout rpmArchive: rpm)</a></li>
<li><a href="libraries/shell.htm#close(in_popenFile)">const proc: <b>close</b> (in popenFile: aPipe)</a></li>
<li><a href="libraries/shell.htm#close(in_popen8File)">const proc: <b>close</b> (in popen8File: aPipe)</a></li>
<li><a href="libraries/smtp.htm#close(inout_smtpConnection)">const proc: <b>close</b> (inout smtpConnection: smtp)</a></li>
<li><a href="libraries/socket.htm#close(inout_socket)">const proc: <b>close</b> (inout socket: aSocket)</a></li>
<li><a href="libraries/sql_base.htm#close(in_database)">const proc: <b>close</b> (in database: db)</a></li>
<li><a href="libraries/tar.htm#close(inout_tarArchive)">const proc: <b>close</b> (inout tarArchive: tar)</a></li>
<li><a href="libraries/tls.htm#close(inout_tlsFile)">const proc: <b>close</b> (inout tlsFile: aFile)</a></li>
<li><a href="libraries/utf16.htm#close(in_utf16File)">const proc: <b>close</b> (in utf16File: aFile)</a></li>
<li><a href="libraries/xz.htm#close(in_xzFile)">const proc: <b>close</b> (in xzFile: aFile)</a></li>
<li><a href="libraries/zip.htm#close(inout_zipArchive)">const proc: <b>close</b> (inout zipArchive: zip)</a></li>
<li><a href="libraries/zstd.htm#close(in_zstdFile)">const proc: <b>close</b> (in zstdFile: aFile)</a></li>
</ul>
<h3>closeButton</h3>
<ul>
<li><a href="libraries/cgidialog.htm#closeButton(in_string)">const func closeButton: <b>closeButton</b> (in string: label)</a></li>
</ul>
<h3>cmd_sh</h3>
<ul>
<li><a href="libraries/shell.htm#cmd_sh(in_string,in_string)">const proc: <b>cmd_sh</b> (in string: command, in string: parameters)</a></li>
<li><a href="libraries/shell.htm#cmd_sh(in_string)">const proc: <b>cmd_sh</b> (in string: cmdAndParams)</a></li>
</ul>
<h3>color</h3>
<ul>
<li><a href="manual/types.htm#color">color</a></li>
<li><a href="libraries/color.htm#color">const type: <b>color</b></a></li>
<li><a href="libraries/color.htm#color(in_integer,in_integer,in_integer)">const func color: <b>color</b> (in integer: red, in integer: green, in integer: blue)</a></li>
<li><a href="libraries/graph_file.htm#color(inout_graph_file,in_color)">const proc: <b>color</b> (inout graph_file: aGraphFile, in color: col)</a></li>
<li><a href="libraries/graph_file.htm#color(inout_graph_file,in_color,in_color)">const proc: <b>color</b> (inout graph_file: aGraphFile, in color: col1, in color: col2)</a></li>
<li><a href="libraries/pixmap_file.htm#color(inout_pixmapFontFile,in_color)">const proc: <b>color</b> (inout pixmapFontFile: fontFile, in color: col)</a></li>
<li><a href="libraries/pixmap_file.htm#color(inout_pixmapFontFile,in_color,in_color)">const proc: <b>color</b> (inout pixmapFontFile: fontFile, in color: col, in color: backgr)</a></li>
<li><a href="libraries/text.htm#color(inout_text,in_color)">const proc: <b>color</b> (inout text: aText, in color: foreground)</a></li>
<li><a href="libraries/text.htm#color(inout_text,in_color,in_color)">const proc: <b>color</b> (inout text: aText, in color: foreground, in color: background)</a></li>
</ul>
<h3>color.s7i</h3>
<ul>
<li><a href="libraries/color.htm">color.s7i</a></li>
</ul>
<h3>colorPixel</h3>
<ul>
<li><a href="libraries/draw.htm#colorPixel(in_color)">const func pixel: <b>colorPixel</b> (in color: col)</a></li>
</ul>
<h3>column</h3>
<ul>
<li><a href="libraries/console.htm#column(in_console_file)">const func integer: <b>column</b> (in console_file: aConsoleFile)</a></li>
<li><a href="libraries/graph_file.htm#column(in_graph_file)">const func integer: <b>column</b> (in graph_file: aGraphFile)</a></li>
<li><a href="libraries/pixmap_file.htm#column(in_pixmapFontFile)">const func integer: <b>column</b> (in pixmapFontFile: fontFile)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bigInteger)">const func bigInteger: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr bigInteger)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bigRational)">const func bigRational: <b>column</b> (in sqlStatement: statement, in integer: column,
                                attr bigRational)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_boolean)">const func boolean: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr boolean)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bstring)">const func bstring: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr bstring)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_duration)">const func duration: <b>column</b> (in sqlStatement: statement, in integer: column,
                         attr duration)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_float)">const func float: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr float)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_integer)">const func integer: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr integer)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_string)">const func string: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr string)</a></li>
<li><a href="libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_time)">const func time: <b>column</b> (in sqlStatement: statement, in integer: column,
                         attr time)</a></li>
<li><a href="libraries/stritext.htm#column(in_striText)">const func integer: <b>column</b> (in striText: aStriText)</a></li>
<li><a href="libraries/text.htm#column(in_text)">const func integer: <b>column</b> (in text: aText)</a></li>
<li><a href="libraries/window.htm#column(in_window_file)">const func integer: <b>column</b> (in window_file: outText)</a></li>
</ul>
<h3>columnCount</h3>
<ul>
<li><a href="libraries/sql_base.htm#columnCount(in_sqlStatement)">const func integer: <b>columnCount</b> (in sqlStatement: statement)</a></li>
</ul>
<h3>columnName</h3>
<ul>
<li><a href="libraries/sql_base.htm#columnName(in_sqlStatement,in_integer)">const func string: <b>columnName</b> (in sqlStatement: statement, in integer: column)</a></li>
</ul>
<h3>columnWidth</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#columnWidth(in_fontPicType)">const func integer: <b>columnWidth</b> (in fontPicType: fontPictures)</a></li>
<li><a href="libraries/font.htm#columnWidth(in_font)">const func integer: <b>columnWidth</b> (in font: aFont)</a></li>
<li><a href="libraries/vectorfont.htm#columnWidth(in_fontVectorType)">const func integer: <b>columnWidth</b> (in fontVectorType: fontVectors)</a></li>
</ul>
<h3>comanche.sd7</h3>
<ul>
<li><a href="scrshots/comanche.htm">Comanche webserver</a></li>
</ul>
<h3>commandDir</h3>
<ul>
<li><a href="libraries/process.htm#commandDir(in_string)">const func string: <b>commandDir</b> (in string: command)</a></li>
</ul>
<h3>commandPath</h3>
<ul>
<li><a href="libraries/process.htm#commandPath(in_string)">const func string: <b>commandPath</b> (in string: command)</a></li>
</ul>
<h3>commit</h3>
<ul>
<li><a href="libraries/sql_base.htm#commit(in_database)">const proc: <b>commit</b> (in database: db)</a></li>
</ul>
<h3>compare</h3>
<ul>
<li><a href="libraries/bigint.htm#compare(in_bigInteger,in_bigInteger)">const func integer: <b>compare</b> (in bigInteger: number1, in bigInteger:number2)</a></li>
<li><a href="libraries/bigrat.htm#compare(in_bigRational,in_bigRational)">const func integer: <b>compare</b> (in bigRational: number1, in bigRational: number2)</a></li>
<li><a href="libraries/bin32.htm#compare(in_bin32,in_bin32)">const func integer: <b>compare</b> (in bin32: bits1, in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#compare(in_bin64,in_bin64)">const func integer: <b>compare</b> (in bin64: bits1, in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#compare(in_bitset,in_bitset)">const func integer: <b>compare</b> (in bitset: set1, in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#compare(in_setType,in_setType)">const func integer: <b>compare</b> (in setType: set1, in setType: set2)</a></li>
<li><a href="libraries/boolean.htm#compare(in_boolean,in_boolean)">const func integer: <b>compare</b> (in boolean: aBoolean1, in boolean: aBoolean2)</a></li>
<li><a href="libraries/bstring.htm#compare(in_bstring,in_bstring)">const func integer: <b>compare</b> (in bstring: bstri1, in bstring: bstri2)</a></li>
<li><a href="libraries/char.htm#compare(in_char,in_char)">const func integer: <b>compare</b> (in char: ch1, in char: ch2)</a></li>
<li><a href="libraries/color.htm#compare(in_color,in_color)">const func integer: <b>compare</b> (in color: col1, in color: col2)</a></li>
<li><a href="libraries/complex.htm#compare(in_complex,in_complex)">const func integer: <b>compare</b> (in complex: number1, in complex: number2)</a></li>
<li><a href="libraries/duration.htm#compare(in_duration,in_duration)">const func integer: <b>compare</b> (in duration: aDuration1, in duration: aDuration2)</a></li>
<li><a href="libraries/enumeration.htm#compare(in_enumType,in_enumType)">const func integer: <b>compare</b> (in enumType: enum1, in enumType: enum2)</a></li>
<li><a href="libraries/file.htm#compare(in_file,in_file)">const func integer: <b>compare</b> (in file: file1, in file: file2)</a></li>
<li><a href="libraries/float.htm#compare(in_float,in_float)">const func integer: <b>compare</b> (in float: number1, in float: number2)</a></li>
<li><a href="libraries/font.htm#compare(in_font,in_font)">const func integer: <b>compare</b> (in font: font1, in font: font2)</a></li>
<li><a href="libraries/integer.htm#compare(in_integer,in_integer)">const func integer: <b>compare</b> (in integer: number1, in integer: number2)</a></li>
<li><a href="libraries/process.htm#compare(in_process,in_process)">const func integer: <b>compare</b> (in process: process1, in process: process2)</a></li>
<li><a href="libraries/rational.htm#compare(in_rational,in_rational)">const func integer: <b>compare</b> (in rational: number1, in rational: number2)</a></li>
<li><a href="libraries/reference.htm#compare(in_reference,in_reference)">const func integer: <b>compare</b> (in reference: ref1, in reference: ref2)</a></li>
<li><a href="libraries/sockbase.htm#compare(in_socketAddress,in_socketAddress)">const func integer: <b>compare</b> (in socketAddress: addr1, in socketAddress: addr2)</a></li>
<li><a href="libraries/string.htm#compare(in_string,in_string)">const func integer: <b>compare</b> (in string: stri1, in string: stri2)</a></li>
<li><a href="libraries/time.htm#compare(in_time,in_time)">const func integer: <b>compare</b> (in time: aTime1, in time: aTime2)</a></li>
<li><a href="libraries/vector3d.htm#compare(in_vector3d,in_vector3d)">const func integer: <b>compare</b> (in vector3d: vect1, in vector3d: vect2)</a></li>
</ul>
<h3>complex</h3>
<ul>
<li><a href="manual/types.htm#complex">complex</a></li>
<li><a href="libraries/complex.htm#complex">const type: <b>complex</b></a></li>
<li><a href="libraries/complex.htm#complex(in_float,in_float)">const func complex: <b>complex</b> (in float: re, in float: im)</a></li>
<li><a href="libraries/complex.htm#complex(in_float)">const func complex: <b>complex</b> (in float: re)</a></li>
<li><a href="libraries/complex.htm#complex(in_integer)">const func complex: <b>complex</b> (in integer: re)</a></li>
<li><a href="libraries/complex.htm#complex(in_string)">const func complex: <b>complex</b> (in string: stri)</a></li>
</ul>
<h3>complex.s7i</h3>
<ul>
<li><a href="libraries/complex.htm">complex.s7i</a></li>
</ul>
<h3>conj</h3>
<ul>
<li><a href="libraries/complex.htm#conj(in_complex)">const func complex: <b>conj</b> (in complex: number)</a></li>
</ul>
<h3>connect</h3>
<ul>
<li><a href="libraries/sockbase.htm#connect(in_PRIMITIVE_SOCKET,in_socketAddress)">const proc: <b>connect</b> (in PRIMITIVE_SOCKET: aSocket,
                     in socketAddress: address)</a></li>
</ul>
<h3>console.s7i</h3>
<ul>
<li><a href="libraries/console.htm">console.s7i</a></li>
</ul>
<h3>console_file</h3>
<ul>
<li><a href="libraries/console.htm#console_file">const type: <b>console_file</b></a></li>
</ul>
<h3>conv</h3>
<ul>
<li><a href="libraries/bigint.htm#(attr_bigInteger)conv(in_integer)">const func bigInteger: (attr bigInteger) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/bigrat.htm#(attr_bigRational)conv(in_integer)">const func bigRational: (attr bigRational) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/bigrat.htm#(attr_bigRational)conv(in_bigInteger)">const func bigRational: (attr bigRational) <b>conv</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bin32.htm#(attr_integer)conv(in_bin32)">const func integer: (attr integer) <b>conv</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin32.htm#(attr_bin32)conv(in_integer)">const func bin32: (attr bin32) <b>conv</b> (in integer: anInt)</a></li>
<li><a href="libraries/bin64.htm#(attr_integer)conv(in_bin64)">const func integer: (attr integer) <b>conv</b> (in bin64: bits)</a></li>
<li><a href="libraries/bin64.htm#(attr_bin64)conv(in_integer)">const func bin64: (attr bin64) <b>conv</b> (in integer: anInt)</a></li>
<li><a href="libraries/bitset.htm#(attr_integer)conv(in_bitset)">const func integer: (attr integer) <b>conv</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitset.htm#(attr_bitset)conv(in_integer)">const func bitset: (attr bitset) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/boolean.htm#(attr_integer)conv(in_boolean)">const func integer: (attr integer) <b>conv</b> (in boolean: boolValue)</a></li>
<li><a href="libraries/boolean.htm#(attr_boolean)conv(in_integer)">const func boolean: (attr boolean) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/category.htm#(attr_category)conv(in_integer)">const func category: (attr category) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/char.htm#(attr_char)conv(in_integer)">const func char: (attr char) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/complex.htm#(attr_complex)conv(in_integer)">const func complex: (attr complex) <b>conv</b> (in integer: re)</a></li>
<li><a href="libraries/complex.htm#(attr_complex)conv(in_float)">const func complex: (attr complex) <b>conv</b> (in float: re)</a></li>
<li><a href="libraries/enumeration.htm#(attr_enumType)conv(in_integer)">const func enumType: (attr enumType) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/enumeration.htm#(attr_integer)conv(in_enumType)">const func integer: (attr integer) <b>conv</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/float.htm#(attr_float)conv(in_integer)">const func float: (attr float) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/integer.htm#(attr_integer)conv(in_integer)">const func integer: (attr integer) <b>conv</b> (in integer: number)</a></li>
<li><a href="libraries/rational.htm#(attr_rational)conv(in_integer)">const func rational: (attr rational) <b>conv</b> (in integer: number)</a></li>
</ul>
<h3>conv2unicode</h3>
<ul>
<li><a href="libraries/charsets.htm#conv2unicode(inout_string,in_string)">const proc: <b>conv2unicode</b> (inout string: stri, in string: codePage)</a></li>
</ul>
<h3>conv2unicodeByName</h3>
<ul>
<li><a href="libraries/charsets.htm#conv2unicodeByName(inout_string,in_var_string)">const proc: <b>conv2unicodeByName</b> (inout string: stri,
    in var string: charset)</a></li>
</ul>
<h3>convDosPath</h3>
<ul>
<li><a href="libraries/osfiles.htm#convDosPath(in_string)">const func string: <b>convDosPath</b> (in string: path)</a></li>
</ul>
<h3>copyArea</h3>
<ul>
<li><a href="libraries/graph.htm#copyArea(in_PRIMITIVE_WINDOW,inout_PRIMITIVE_WINDOW,ref_integer,ref_integer,ref_integer,ref_integer,ref_integer,ref_integer)">const proc: <b>copyArea</b> (in PRIMITIVE_WINDOW: sourceWindow,
    inout PRIMITIVE_WINDOW: destWindow,
    ref integer: src_x, ref integer: src_y,
    ref integer: width, ref integer: height,
    ref integer: dest_x, ref integer: dest_y)</a></li>
</ul>
<h3>copyFile</h3>
<ul>
<li><a href="manual/os.htm#copyFile">copyFile</a></li>
<li><a href="libraries/fileutil.htm#copyFile(inout_file,inout_file)">const proc: <b>copyFile</b> (inout file: source, inout file: dest)</a></li>
<li><a href="libraries/fileutil.htm#copyFile(inout_file,inout_file,in_integer)">const func integer: <b>copyFile</b> (inout file: source, inout file: dest,
    in integer: numChars)</a></li>
<li><a href="libraries/osfiles.htm#copyFile(in_string,in_string)">const proc: <b>copyFile</b> (in string: sourcePath, in string: destPath)</a></li>
</ul>
<h3>cos</h3>
<ul>
<li><a href="libraries/math.htm#cos(in_float)">const func float: <b>cos</b> (in float: x)</a></li>
</ul>
<h3>cosh</h3>
<ul>
<li><a href="libraries/math.htm#cosh(in_float)">const func float: <b>cosh</b> (in float: x)</a></li>
</ul>
<h3>cp_037</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_037">const string: <b>cp_037</b></a></li>
</ul>
<h3>cp_1047</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1047">const string: <b>cp_1047</b></a></li>
</ul>
<h3>cp_1125</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1125">const string: <b>cp_1125</b></a></li>
</ul>
<h3>cp_1250</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1250">const string: <b>cp_1250</b></a></li>
</ul>
<h3>cp_1251</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1251">const string: <b>cp_1251</b></a></li>
</ul>
<h3>cp_1252</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1252">const string: <b>cp_1252</b></a></li>
</ul>
<h3>cp_1253</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1253">const string: <b>cp_1253</b></a></li>
</ul>
<h3>cp_1254</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1254">const string: <b>cp_1254</b></a></li>
</ul>
<h3>cp_1255</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1255">const string: <b>cp_1255</b></a></li>
</ul>
<h3>cp_1256</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1256">const string: <b>cp_1256</b></a></li>
</ul>
<h3>cp_1257</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1257">const string: <b>cp_1257</b></a></li>
</ul>
<h3>cp_1258</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_1258">const string: <b>cp_1258</b></a></li>
</ul>
<h3>cp_273</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_273">const string: <b>cp_273</b></a></li>
</ul>
<h3>cp_277</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_277">const string: <b>cp_277</b></a></li>
</ul>
<h3>cp_280</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_280">const string: <b>cp_280</b></a></li>
</ul>
<h3>cp_285</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_285">const string: <b>cp_285</b></a></li>
</ul>
<h3>cp_297</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_297">const string: <b>cp_297</b></a></li>
</ul>
<h3>cp_437</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_437">const string: <b>cp_437</b></a></li>
</ul>
<h3>cp_500</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_500">const string: <b>cp_500</b></a></li>
</ul>
<h3>cp_708</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_708">const string: <b>cp_708</b></a></li>
</ul>
<h3>cp_720</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_720">const string: <b>cp_720</b></a></li>
</ul>
<h3>cp_737</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_737">const string: <b>cp_737</b></a></li>
</ul>
<h3>cp_775</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_775">const string: <b>cp_775</b></a></li>
</ul>
<h3>cp_850</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_850">const string: <b>cp_850</b></a></li>
</ul>
<h3>cp_852</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_852">const string: <b>cp_852</b></a></li>
</ul>
<h3>cp_855</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_855">const string: <b>cp_855</b></a></li>
</ul>
<h3>cp_857</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_857">const string: <b>cp_857</b></a></li>
</ul>
<h3>cp_858</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_858">const string: <b>cp_858</b></a></li>
</ul>
<h3>cp_860</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_860">const string: <b>cp_860</b></a></li>
</ul>
<h3>cp_861</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_861">const string: <b>cp_861</b></a></li>
</ul>
<h3>cp_862</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_862">const string: <b>cp_862</b></a></li>
</ul>
<h3>cp_863</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_863">const string: <b>cp_863</b></a></li>
</ul>
<h3>cp_864</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_864">const string: <b>cp_864</b></a></li>
</ul>
<h3>cp_865</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_865">const string: <b>cp_865</b></a></li>
</ul>
<h3>cp_866</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_866">const string: <b>cp_866</b></a></li>
</ul>
<h3>cp_869</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_869">const string: <b>cp_869</b></a></li>
</ul>
<h3>cp_874</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_874">const string: <b>cp_874</b></a></li>
</ul>
<h3>cp_907</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_907">const string: <b>cp_907</b></a></li>
</ul>
<h3>cp_909</h3>
<ul>
<li><a href="libraries/charsets.htm#cp_909">const string: <b>cp_909</b></a></li>
</ul>
<h3>cpio.s7i</h3>
<ul>
<li><a href="libraries/cpio.htm">cpio.s7i</a></li>
</ul>
<h3>cpioArchive</h3>
<ul>
<li><a href="libraries/cpio.htm#cpioArchive">const type: <b>cpioArchive</b></a></li>
</ul>
<h3>crc32</h3>
<ul>
<li><a href="libraries/crc32.htm#crc32(in_string)">const func bin32: <b>crc32</b> (in string: stri)</a></li>
<li><a href="libraries/crc32.htm#crc32(in_string,in_bin32)">const func bin32: <b>crc32</b> (in string: stri, in bin32: oldCrc)</a></li>
</ul>
<h3>crc32.s7i</h3>
<ul>
<li><a href="libraries/crc32.htm">crc32.s7i</a></li>
</ul>
<h3>createHuffmanTableLsb</h3>
<ul>
<li><a href="libraries/huffman.htm#createHuffmanTableLsb(in_array_integer)">const func lsbHuffmanTable: <b>createHuffmanTableLsb</b> (in array integer: codeLengths)</a></li>
</ul>
<h3>createHuffmanTableMsb</h3>
<ul>
<li><a href="libraries/huffman.htm#createHuffmanTableMsb(in_integer,in_array_integer,in_string)">const func msbHuffmanTable: <b>createHuffmanTableMsb</b> (in integer: maximumCodeLength,
    in array integer: numberOfCodesWithLength, in string: huffmanValues)</a></li>
</ul>
<h3>createPixmap</h3>
<ul>
<li><a href="libraries/pic_util.htm#createPixmap(in_array_string,in_integer,in_color)">const func PRIMITIVE_WINDOW: <b>createPixmap</b> (in array string: pattern,
    in integer: scale, in color: background)</a></li>
</ul>
<h3>createX509Cert</h3>
<ul>
<li><a href="libraries/x509cert.htm#createX509Cert(in_rsaKey,in_bigInteger,in_x509Name,in_x509Name,in_x509Validity)">const func x509Cert: <b>createX509Cert</b> (in rsaKey: publicRsaKey,
    in bigInteger: serialNumber, in x509Name: issuer,
    in x509Name: subject, in x509Validity: validity)</a></li>
<li><a href="libraries/x509cert.htm#createX509Cert(in_rsaKey,in_bigInteger,in_string,in_string,in_string,in_string,in_string,in_x509Validity)">const func x509Cert: <b>createX509Cert</b> (in rsaKey: publicRsaKey,
    in bigInteger: serialNumber, in string: commonName, in string: country,
    in string: locality, in string: organization,
    in string: organizationUnit, in x509Validity: validity)</a></li>
<li><a href="libraries/x509cert.htm#createX509Cert(in_ellipticCurve,in_ecPoint,in_bigInteger,in_x509Name,in_x509Name,in_x509Validity)">const func x509Cert: <b>createX509Cert</b> (in ellipticCurve: curve,
    in ecPoint: publicEccKey, in bigInteger: serialNumber, in x509Name: issuer,
    in x509Name: subject, in x509Validity: validity)</a></li>
<li><a href="libraries/x509cert.htm#createX509Cert(in_ellipticCurve,in_ecPoint,in_bigInteger,in_string,in_string,in_string,in_string,in_string,in_x509Validity)">const func x509Cert: <b>createX509Cert</b> (in ellipticCurve: curve,
    in ecPoint: publicEccKey, in bigInteger: serialNumber, in string: commonName,
    in string: country, in string: locality, in string: organization,
    in string: organizationUnit, in x509Validity: validity)</a></li>
</ul>
<h3>cross</h3>
<ul>
<li><a href="libraries/vector3d.htm#cross(in_vector3d,in_vector3d)">const func vector3d: <b>cross</b> (in vector3d: a, in vector3d: b)</a></li>
</ul>
<h3>csv.s7i</h3>
<ul>
<li><a href="libraries/csv.htm">csv.s7i</a></li>
</ul>
<h3>database</h3>
<ul>
<li><a href="manual/types.htm#database">database</a></li>
<li><a href="libraries/sql_base.htm#database">const type: <b>database</b></a></li>
</ul>
<h3>date</h3>
<ul>
<li><a href="libraries/time.htm#date(in_integer,in_integer,in_integer)">const func time: <b>date</b> (in integer: year, in integer: month, in integer: day)</a></li>
</ul>
<h3>dayOfWeek</h3>
<ul>
<li><a href="libraries/time.htm#dayOfWeek(in_time)">const func integer: <b>dayOfWeek</b> (in time: aDate)</a></li>
</ul>
<h3>dayOfYear</h3>
<ul>
<li><a href="libraries/time.htm#dayOfYear(in_time)">const func integer: <b>dayOfYear</b> (in time: aDate)</a></li>
</ul>
<h3>daysInMonth</h3>
<ul>
<li><a href="libraries/time.htm#daysInMonth(in_integer,in_integer)">const func integer: <b>daysInMonth</b> (in integer: year, in integer: month)</a></li>
<li><a href="libraries/time.htm#daysInMonth(in_time)">const func integer: <b>daysInMonth</b> (in time: date)</a></li>
</ul>
<h3>daysInYear</h3>
<ul>
<li><a href="libraries/time.htm#daysInYear(in_integer)">const func integer: <b>daysInYear</b> (in integer: year)</a></li>
</ul>
<h3>db7.sd7</h3>
<ul>
<li><a href="scrshots/db7.htm">Database Inspector</a></li>
</ul>
<h3>dbCategory</h3>
<ul>
<li><a href="libraries/sql_base.htm#dbCategory">const type: <b>dbCategory</b></a></li>
</ul>
<h3>db_prop.s7i</h3>
<ul>
<li><a href="libraries/db_prop.htm">db_prop.s7i</a></li>
</ul>
<h3>decimalIntType</h3>
<ul>
<li><a href="libraries/db_prop.htm#decimalIntType(in_dbCategory)">const func string: <b>decimalIntType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>decimalType</h3>
<ul>
<li><a href="libraries/db_prop.htm#decimalType(in_dbCategory,in_integer)">const func string: <b>decimalType</b> (in dbCategory: databaseKind, in integer: scale)</a></li>
</ul>
<h3>decode</h3>
<ul>
<li><a href="libraries/aes.htm#decode(inout_aesState,in_string)">const func string: <b>decode</b> (inout aesState: state, in string: encoded)</a></li>
<li><a href="libraries/aes_gcm.htm#decode(inout_aesGcmState,in_string)">const func string: <b>decode</b> (inout aesGcmState: state, in string: encoded)</a></li>
<li><a href="libraries/arc4.htm#decode(inout_arc4State,in_string)">const func string: <b>decode</b> (inout arc4State: state, in string: encoded)</a></li>
<li><a href="libraries/blowfish.htm#decode(inout_blowfishState,in_string)">const func string: <b>decode</b> (inout blowfishState: state, in string: encoded)</a></li>
<li><a href="libraries/cipher.htm#decode(inout_cipherState,in_string)">const func string: <b>decode</b> (inout cipherState: state, in string: encoded)</a></li>
<li><a href="libraries/des.htm#decode(inout_desState,in_string)">const func string: <b>decode</b> (inout desState: state, in string: encoded)</a></li>
<li><a href="libraries/tdes.htm#decode(inout_tdesState,in_string)">const func string: <b>decode</b> (inout tdesState: state, in string: encoded)</a></li>
</ul>
<h3>decodeHtmlEntities</h3>
<ul>
<li><a href="libraries/html_ent.htm#decodeHtmlEntities(in_string)">const func string: <b>decodeHtmlEntities</b> (in string: stri)</a></li>
</ul>
<h3>decodeXmlEntities</h3>
<ul>
<li><a href="libraries/xml_ent.htm#decodeXmlEntities(in_string,in_xmlEntityHashType)">const func string: <b>decodeXmlEntities</b> (in string: stri, in xmlEntityHashType: xmlEntityHash)</a></li>
</ul>
<h3>decompose</h3>
<ul>
<li><a href="libraries/float.htm#decompose(in_float)">const func floatElements: <b>decompose</b> (in float: number)</a></li>
</ul>
<h3>decr</h3>
<ul>
<li><a href="libraries/bigint.htm#decr(inout_bigInteger)">const proc: <b>decr</b> (inout bigInteger: number)</a></li>
<li><a href="libraries/boolean.htm#decr(inout_boolean)">const proc: <b>decr</b> (inout boolean: boolValue)</a></li>
<li><a href="libraries/char.htm#decr(inout_char)">const proc: <b>decr</b> (inout char: ch)</a></li>
<li><a href="libraries/enumeration.htm#decr(inout_enumType)">const proc: <b>decr</b> (inout enumType: enumValue)</a></li>
<li><a href="libraries/integer.htm#decr(inout_integer)">const proc: <b>decr</b> (inout integer: number)</a></li>
</ul>
<h3>deflate.s7i</h3>
<ul>
<li><a href="libraries/deflate.htm">deflate.s7i</a></li>
</ul>
<h3>deflateBlock</h3>
<ul>
<li><a href="libraries/deflate.htm#deflateBlock(in_string,inout_string,in_boolean)">const proc: <b>deflateBlock</b> (in string: uncompressed, inout string: compressed,
    in boolean: bfinal)</a></li>
</ul>
<h3>deleteArea</h3>
<ul>
<li><a href="libraries/fileutil.htm#deleteArea(inout_file,in_integer,in_integer)">const proc: <b>deleteArea</b> (inout file: aFile, in integer: deletePos, in integer: numChars)</a></li>
</ul>
<h3>des.s7i</h3>
<ul>
<li><a href="libraries/des.htm">des.s7i</a></li>
</ul>
<h3>desState</h3>
<ul>
<li><a href="libraries/des.htm#desState">const type: <b>desState</b></a></li>
</ul>
<h3>descent</h3>
<ul>
<li><a href="libraries/font.htm#descent(in_font)">const func integer: <b>descent</b> (in font: aFont)</a></li>
</ul>
<h3>dialog.s7i</h3>
<ul>
<li><a href="libraries/dialog.htm">dialog.s7i</a></li>
</ul>
<h3>dialogColumn</h3>
<ul>
<li><a href="libraries/cgidialog.htm#dialogColumn(in_dialogSequenceBase)">const func dialogElement: <b>dialogColumn</b> (in dialogSequenceBase: sequence)</a></li>
</ul>
<h3>dialogElement</h3>
<ul>
<li><a href="libraries/cgidialog.htm#dialogElement">const type: <b>dialogElement</b></a></li>
</ul>
<h3>dialogRow</h3>
<ul>
<li><a href="libraries/cgidialog.htm#dialogRow(in_dialogSequenceBase)">const func dialogElement: <b>dialogRow</b> (in dialogSequenceBase: sequence)</a></li>
</ul>
<h3>dialogSequence</h3>
<ul>
<li><a href="libraries/cgidialog.htm#dialogSequence(in_dialogSequenceBase)">const func dialogElement: <b>dialogSequence</b> (in dialogSequenceBase: sequence)</a></li>
<li><a href="libraries/cgidialog.htm#dialogSequence(in_dialogElement)">const func dialogElement: <b>dialogSequence</b> (in dialogElement: element)</a></li>
</ul>
<h3>dialogTable</h3>
<ul>
<li><a href="libraries/cgidialog.htm#dialogTable(in_dialogSequenceBase,in_array_dialogSequenceBase)">const func dialogElement: <b>dialogTable</b> (in dialogSequenceBase: headers, in array dialogSequenceBase: sequenceArray)</a></li>
<li><a href="libraries/cgidialog.htm#dialogTable(in_dialogSequenceBase,in_tableDataStringArrayType)">const func dialogElement: <b>dialogTable</b> (in dialogSequenceBase: headers,
    in tableDataStringArrayType: tableData)</a></li>
</ul>
<h3>digestAlgorithm</h3>
<ul>
<li><a href="libraries/msgdigest.htm#digestAlgorithm">const type: <b>digestAlgorithm</b></a></li>
</ul>
<h3>digestSize</h3>
<ul>
<li><a href="libraries/msgdigest.htm#digestSize(in_digestAlgorithm)">const func integer: <b>digestSize</b> (in digestAlgorithm: digestAlg)</a></li>
</ul>
<h3>digits</h3>
<ul>
<li><a href="libraries/bigrat.htm#(in_bigRational)digits(in_integer)">const func string: (in bigRational: number) <b>digits</b> (in integer: precision)</a></li>
<li><a href="libraries/complex.htm#(in_complex)digits(in_integer)">const func string: (in complex: number) <b>digits</b> (in integer: precision)</a></li>
<li><a href="libraries/float.htm#(in_float)digits(in_integer)">const func string: (in float: number) <b>digits</b> (in integer: precision)</a></li>
<li><a href="libraries/rational.htm#(in_rational)digits(in_integer)">const func string: (in rational: number) <b>digits</b> (in integer: precision)</a></li>
</ul>
<h3>dir</h3>
<ul>
<li><a href="libraries/environment.htm#dir(PROGRAM)">const func string: <b>dir</b> (PROGRAM)</a></li>
</ul>
<h3>dir(PROGRAM)</h3>
<ul>
<li><a href="manual/os.htm#dir_PROGRAM">dir(PROGRAM)</a></li>
</ul>
<h3>dir.s7i</h3>
<ul>
<li><a href="libraries/dir.htm">dir.s7i</a></li>
</ul>
<h3>dirFile</h3>
<ul>
<li><a href="libraries/dir.htm#dirFile">const type: <b>dirFile</b></a></li>
</ul>
<h3>div</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">const func bigInteger: (in bigInteger: dividend) <b>div</b> (in bigInteger: divisor)</a></li>
<li><a href="libraries/integer.htm#(in_integer)div(in_integer)">const func integer: (in integer: dividend) <b>div</b> (in integer: divisor)</a></li>
</ul>
<h3>divRem</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)divRem(in_bigInteger)">const func quotRem: (in bigInteger: dividend) <b>divRem</b> (in bigInteger: divisor)</a></li>
</ul>
<h3>dnafight.sd7</h3>
<ul>
<li><a href="scrshots/dnafight.htm">Dnafight programming game</a></li>
</ul>
<h3>doCd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doCd(inout_string)">const proc: <b>doCd</b> (inout string: parameters)</a></li>
</ul>
<h3>doCopy</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doCopy(inout_string)">const proc: <b>doCopy</b> (inout string: parameters)</a></li>
</ul>
<h3>doCopyCmd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doCopyCmd(in_var_array_string,in_boolean,in_boolean,in_boolean)">const proc: <b>doCopyCmd</b> (in var array string: fileList,
   in boolean: recursive, in boolean: overwriteExisting, in boolean: archive)</a></li>
</ul>
<h3>doCp</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doCp(inout_string)">const proc: <b>doCp</b> (inout string: parameters)</a></li>
</ul>
<h3>doDel</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doDel(inout_string)">const proc: <b>doDel</b> (inout string: parameters)</a></li>
</ul>
<h3>doEcho</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doEcho(inout_string)">const func string: <b>doEcho</b> (inout string: parameters)</a></li>
</ul>
<h3>doMake</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMake(inout_string)">const proc: <b>doMake</b> (inout string: parameters)</a></li>
</ul>
<h3>doMd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMd(inout_string)">const proc: <b>doMd</b> (inout string: parameters)</a></li>
</ul>
<h3>doMkdir</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMkdir(inout_string)">const proc: <b>doMkdir</b> (inout string: parameters)</a></li>
</ul>
<h3>doMkdirCmd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMkdirCmd(in_array_string,in_boolean)">const proc: <b>doMkdirCmd</b> (in array string: fileList,
    in boolean: parentDirs)</a></li>
</ul>
<h3>doMove</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMove(inout_string)">const proc: <b>doMove</b> (inout string: parameters)</a></li>
</ul>
<h3>doMoveCmd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMoveCmd(in_var_array_string,in_boolean)">const proc: <b>doMoveCmd</b> (in var array string: fileList,
    in boolean: overwriteExisting)</a></li>
</ul>
<h3>doMv</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doMv(inout_string)">const proc: <b>doMv</b> (inout string: parameters)</a></li>
</ul>
<h3>doPwd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doPwd(inout_string)">const func string: <b>doPwd</b> (inout string: parameters)</a></li>
</ul>
<h3>doRemoveCmd</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doRemoveCmd(in_array_string,in_boolean,in_boolean)">const proc: <b>doRemoveCmd</b> (in array string: fileList,
    in boolean: recursive, in boolean: force)</a></li>
</ul>
<h3>doRm</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doRm(inout_string)">const proc: <b>doRm</b> (inout string: parameters)</a></li>
</ul>
<h3>doXCopy</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#doXCopy(inout_string)">const proc: <b>doXCopy</b> (inout string: parameters)</a></li>
</ul>
<h3>dot</h3>
<ul>
<li><a href="libraries/vector3d.htm#dot(in_vector3d,in_vector3d)">const func float: <b>dot</b> (in vector3d: a, in vector3d: b)</a></li>
</ul>
<h3>double</h3>
<ul>
<li><a href="libraries/elliptic.htm#double(in_ellipticCurve,in_ecPoint)">const func ecPoint: <b>double</b> (in ellipticCurve: curve, in ecPoint: p)</a></li>
<li><a href="libraries/elliptic.htm#double(in_ellipticCurve,in_jacobianPoint)">const func jacobianPoint: <b>double</b> (in ellipticCurve: curve, in jacobianPoint: jp)</a></li>
</ul>
<h3>doubleType</h3>
<ul>
<li><a href="libraries/db_prop.htm#doubleType(in_dbCategory)">const func string: <b>doubleType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>draw.s7i</h3>
<ul>
<li><a href="libraries/draw.htm">draw.s7i</a></li>
</ul>
<h3>drawPattern</h3>
<ul>
<li><a href="libraries/pic_util.htm#drawPattern(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_array_string,in_integer,in_color)">const proc: <b>drawPattern</b> (inout PRIMITIVE_WINDOW: win, in integer: xPos,
    in integer: yPos, in array string: pattern, in integer: scale,
    in color: background)</a></li>
</ul>
<h3>duration</h3>
<ul>
<li><a href="manual/types.htm#duration">duration</a></li>
<li><a href="libraries/duration.htm#duration">const type: <b>duration</b></a></li>
<li><a href="libraries/duration.htm#duration(in_var_string)">const func duration: <b>duration</b> (in var string: stri)</a></li>
</ul>
<h3>duration.s7i</h3>
<ul>
<li><a href="libraries/duration.htm">duration.s7i</a></li>
</ul>
<h3>ecPoint</h3>
<ul>
<li><a href="libraries/elliptic.htm#ecPoint">const type: <b>ecPoint</b></a></li>
<li><a href="libraries/elliptic.htm#ecPoint(in_bigInteger,in_bigInteger)">const func ecPoint: <b>ecPoint</b> (in bigInteger: x, in bigInteger: y)</a></li>
</ul>
<h3>ecPointCompress</h3>
<ul>
<li><a href="libraries/elliptic.htm#ecPointCompress(in_ellipticCurve,in_ecPoint)">const func string: <b>ecPointCompress</b> (in ellipticCurve: curve, in ecPoint: point)</a></li>
</ul>
<h3>ecPointDecode</h3>
<ul>
<li><a href="libraries/elliptic.htm#ecPointDecode(in_ellipticCurve,in_string)">const func ecPoint: <b>ecPointDecode</b> (in ellipticCurve: curve, in string: encoded)</a></li>
</ul>
<h3>ecPointEncode</h3>
<ul>
<li><a href="libraries/elliptic.htm#ecPointEncode(in_ellipticCurve,in_ecPoint)">const func string: <b>ecPointEncode</b> (in ellipticCurve: curve, in ecPoint: point)</a></li>
</ul>
<h3>eccKeyPair</h3>
<ul>
<li><a href="libraries/elliptic.htm#eccKeyPair">const type: <b>eccKeyPair</b></a></li>
</ul>
<h3>ecdsaSignatureType</h3>
<ul>
<li><a href="libraries/elliptic.htm#ecdsaSignatureType">const type: <b>ecdsaSignatureType</b></a></li>
</ul>
<h3>echo.s7i</h3>
<ul>
<li><a href="libraries/echo.htm">echo.s7i</a></li>
</ul>
<h3>echoFile</h3>
<ul>
<li><a href="libraries/echo.htm#echoFile">const type: <b>echoFile</b></a></li>
</ul>
<h3>editLineFile</h3>
<ul>
<li><a href="libraries/editline.htm#editLineFile">const type: <b>editLineFile</b></a></li>
</ul>
<h3>editline.s7i</h3>
<ul>
<li><a href="libraries/editline.htm">editline.s7i</a></li>
</ul>
<h3>element</h3>
<ul>
<li><a href="libraries/elliptic.htm#element(in_ecPoint,in_ellipticCurve)">const func boolean: <b>element</b> (in ecPoint: point, in ellipticCurve: curve)</a></li>
</ul>
<h3>eliza.sd7</h3>
<ul>
<li><a href="scrshots/eliza.htm">Eliza</a></li>
</ul>
<h3>elliptic.s7i</h3>
<ul>
<li><a href="libraries/elliptic.htm">elliptic.s7i</a></li>
</ul>
<h3>ellipticCurve</h3>
<ul>
<li><a href="libraries/elliptic.htm#ellipticCurve">const type: <b>ellipticCurve</b></a></li>
<li><a href="libraries/elliptic.htm#ellipticCurve(in_integer,in_string,in_bigInteger,in_bigInteger,in_bigInteger,in_ecPoint,in_bigInteger)">const func ellipticCurve: <b>ellipticCurve</b> (in integer: bits, in string: name, in bigInteger: p,
    in bigInteger: a, in bigInteger: b, in ecPoint: g, in bigInteger: n)</a></li>
</ul>
<h3>emeOaepDecoding</h3>
<ul>
<li><a href="libraries/pkcs1.htm#emeOaepDecoding(in_string,in_string,in_integer)">const func string: <b>emeOaepDecoding</b> (in string: encodedMessage, in string: label, in integer: modulusLen)</a></li>
</ul>
<h3>emeOaepEncoding</h3>
<ul>
<li><a href="libraries/pkcs1.htm#emeOaepEncoding(in_string,in_string,in_integer)">const func string: <b>emeOaepEncoding</b> (in string: message, in string: label, in integer: modulusLen)</a></li>
</ul>
<h3>emePkcs1V15Decoding</h3>
<ul>
<li><a href="libraries/pkcs1.htm#emePkcs1V15Decoding(in_string,in_integer)">const func string: <b>emePkcs1V15Decoding</b> (in string: encodedMessage, in integer: modulusLen)</a></li>
</ul>
<h3>emePkcs1V15Encoding</h3>
<ul>
<li><a href="libraries/pkcs1.htm#emePkcs1V15Encoding(in_string,in_integer)">const func string: <b>emePkcs1V15Encoding</b> (in string: message, in integer: modulusLen)</a></li>
</ul>
<h3>emptyFileSys</h3>
<ul>
<li><a href="libraries/filesys.htm#emptyFileSys">const type: <b>emptyFileSys</b></a></li>
</ul>
<h3>emptyFont</h3>
<ul>
<li><a href="libraries/font.htm#emptyFont">const type: <b>emptyFont</b></a></li>
</ul>
<h3>emsaPkcs1V15Decoding</h3>
<ul>
<li><a href="libraries/pkcs1.htm#emsaPkcs1V15Decoding(in_string)">const func string: <b>emsaPkcs1V15Decoding</b> (in string: encodedMessage)</a></li>
</ul>
<h3>emsaPkcs1V15Encoding</h3>
<ul>
<li><a href="libraries/pkcs1.htm#emsaPkcs1V15Encoding(in_string,in_integer)">const func string: <b>emsaPkcs1V15Encoding</b> (in string: message, in integer: modulusLen)</a></li>
</ul>
<h3>enable_input</h3>
<ul>
<li><a href="libraries/enable_io.htm#enable_input(in_type)">const proc: <b>enable_input</b> (in type: aType)</a></li>
</ul>
<h3>enable_io</h3>
<ul>
<li><a href="libraries/enable_io.htm#enable_io(in_type)">const proc: <b>enable_io</b> (in type: aType)</a></li>
</ul>
<h3>enable_io.s7i</h3>
<ul>
<li><a href="libraries/enable_io.htm">enable_io.s7i</a></li>
</ul>
<h3>enable_output</h3>
<ul>
<li><a href="libraries/enable_io.htm#enable_output(in_type)">const proc: <b>enable_output</b> (in type: aType)</a></li>
</ul>
<h3>encode</h3>
<ul>
<li><a href="libraries/aes.htm#encode(inout_aesState,in_string)">const func string: <b>encode</b> (inout aesState: state, in string: plaintext)</a></li>
<li><a href="libraries/aes_gcm.htm#encode(inout_aesGcmState,in_string)">const func string: <b>encode</b> (inout aesGcmState: state, in string: plainText)</a></li>
<li><a href="libraries/arc4.htm#encode(inout_arc4State,in_string)">const func string: <b>encode</b> (inout arc4State: state, in string: plaintext)</a></li>
<li><a href="libraries/blowfish.htm#encode(inout_blowfishState,in_string)">const func string: <b>encode</b> (inout blowfishState: state, in string: plaintext)</a></li>
<li><a href="libraries/cipher.htm#encode(inout_cipherState,in_string)">const func string: <b>encode</b> (inout cipherState: state, in string: plaintext)</a></li>
<li><a href="libraries/des.htm#encode(inout_desState,in_string)">const func string: <b>encode</b> (inout desState: state, in string: plaintext)</a></li>
<li><a href="libraries/tdes.htm#encode(inout_tdesState,in_string)">const func string: <b>encode</b> (inout tdesState: state, in string: plaintext)</a></li>
</ul>
<h3>encodeHtmlContent</h3>
<ul>
<li><a href="libraries/html_ent.htm#encodeHtmlContent(in_string)">const func string: <b>encodeHtmlContent</b> (in string: stri)</a></li>
</ul>
<h3>encodeHtmlEntities</h3>
<ul>
<li><a href="libraries/html_ent.htm#encodeHtmlEntities(in_string)">const func string: <b>encodeHtmlEntities</b> (in string: stri)</a></li>
</ul>
<h3>encoding.s7i</h3>
<ul>
<li><a href="libraries/encoding.htm">encoding.s7i</a></li>
</ul>
<h3>endianness</h3>
<ul>
<li><a href="libraries/bytedata.htm#endianness">const type: <b>endianness</b></a></li>
</ul>
<h3>endsWith</h3>
<ul>
<li><a href="libraries/string.htm#endsWith(in_string,in_string)">const func boolean: <b>endsWith</b> (in string: stri, in string: suffix)</a></li>
</ul>
<h3>enumeration</h3>
<ul>
<li><a href="manual/types.htm#enumeration">enumeration</a></li>
</ul>
<h3>enumeration.s7i</h3>
<ul>
<li><a href="libraries/enumeration.htm">enumeration.s7i</a></li>
</ul>
<h3>environment</h3>
<ul>
<li><a href="manual/os.htm#environment">environment</a></li>
<li><a href="libraries/environment.htm#environment">const func array string: <b>environment</b></a></li>
</ul>
<h3>environment.s7i</h3>
<ul>
<li><a href="libraries/environment.htm">environment.s7i</a></li>
</ul>
<h3>eof</h3>
<ul>
<li><a href="libraries/clib_file.htm#eof(in_clib_file)">const func boolean: <b>eof</b> (in clib_file: inFile)</a></li>
<li><a href="libraries/dir.htm#eof(in_dirFile)">const func boolean: <b>eof</b> (in dirFile: aFile)</a></li>
<li><a href="libraries/editline.htm#eof(in_editLineFile)">const func boolean: <b>eof</b> (in editLineFile: inEditLine)</a></li>
<li><a href="libraries/external_file.htm#eof(in_external_file)">const func boolean: <b>eof</b> (in external_file: inFile)</a></li>
<li><a href="libraries/file.htm#eof(in_file)">const func boolean: <b>eof</b> (in file: inFile)</a></li>
<li><a href="libraries/gzip.htm#eof(in_gzipFile)">const func boolean: <b>eof</b> (in gzipFile: inFile)</a></li>
<li><a href="libraries/iobuffer.htm#eof(in_bufferFile)">const func boolean: <b>eof</b> (in bufferFile: inBufferFile)</a></li>
<li><a href="libraries/lzma.htm#eof(in_lzmaFile)">const func boolean: <b>eof</b> (in lzmaFile: inFile)</a></li>
<li><a href="libraries/null_file.htm#eof(in_null_file)">const boolean: <b>eof</b> (in null_file: inFile)</a></li>
<li><a href="libraries/socket.htm#eof(in_socket)">const func boolean: <b>eof</b> (in socket: inSocket)</a></li>
<li><a href="libraries/strifile.htm#eof(in_striFile)">const func boolean: <b>eof</b> (in striFile: inStriFile)</a></li>
<li><a href="libraries/stritext.htm#eof(in_striText)">const func boolean: <b>eof</b> (in striText: inStriText)</a></li>
<li><a href="libraries/subfile.htm#eof(in_subFile)">const func boolean: <b>eof</b> (in subFile: inSubFile)</a></li>
<li><a href="libraries/tls.htm#eof(in_tlsFile)">const func boolean: <b>eof</b> (in tlsFile: inFile)</a></li>
<li><a href="libraries/utf16.htm#eof(in_utf16File)">const func boolean: <b>eof</b> (in utf16File: inFile)</a></li>
<li><a href="libraries/xz.htm#eof(in_xzFile)">const func boolean: <b>eof</b> (in xzFile: inFile)</a></li>
<li><a href="libraries/zstd.htm#eof(in_zstdFile)">const func boolean: <b>eof</b> (in zstdFile: inFile)</a></li>
</ul>
<h3>equalAtIndex</h3>
<ul>
<li><a href="libraries/string.htm#equalAtIndex(in_string,in_string,in_integer)">const func boolean: <b>equalAtIndex</b> (in string: stri, in string: searched, in integer: index)</a></li>
</ul>
<h3>errorCount</h3>
<ul>
<li><a href="libraries/progs.htm#errorCount(in_program)">const func integer: <b>errorCount</b> (in program: aProgram)</a></li>
</ul>
<h3>evaluate</h3>
<ul>
<li><a href="libraries/progs.htm#evaluate(in_program,in_reference)">const func reference: <b>evaluate</b> (in program: aProgram,
                                in reference: anExpression)</a></li>
</ul>
<h3>excl</h3>
<ul>
<li><a href="libraries/bitset.htm#excl(inout_bitset,in_integer)">const proc: <b>excl</b> (inout bitset: aSet, in integer: number)</a></li>
<li><a href="libraries/bitsetof.htm#excl(inout_setType,in_baseType)">const proc: <b>excl</b> (inout setType: aSet, in baseType: aValue)</a></li>
<li><a href="libraries/hash.htm#excl(inout_hashType,in_keyType)">const proc: <b>excl</b> (inout hashType: aHashMap, in keyType: aKey)</a></li>
<li><a href="libraries/hashsetof.htm#excl(inout_setType,in_baseType)">const proc: <b>excl</b> (inout setType: aSet, in baseType: aValue)</a></li>
</ul>
<h3>execute</h3>
<ul>
<li><a href="libraries/progs.htm#execute(in_program,in_array_string,in_parseOptions,in_string)">const proc: <b>execute</b> (in program: aProgram, in array string: parameters,
                     in parseOptions: options,
                     in string: protFileName)</a></li>
<li><a href="libraries/progs.htm#execute(in_program,in_array_string,in_parseOptions)">const proc: <b>execute</b> (in program: aProgram, in array string: parameters,
                     in parseOptions: options)</a></li>
<li><a href="libraries/progs.htm#execute(in_program,in_array_string)">const proc: <b>execute</b> (in program: aProgram, in array string: parameters)</a></li>
<li><a href="libraries/progs.htm#execute(in_program)">const proc: <b>execute</b> (in program: aProgram)</a></li>
<li><a href="libraries/sql_base.htm#execute(inout_sqlStatement)">const proc: <b>execute</b> (inout sqlStatement: statement)</a></li>
</ul>
<h3>exit</h3>
<ul>
<li><a href="libraries/environment.htm#exit(in_integer)">const proc: <b>exit</b> (in integer: status)</a></li>
<li><a href="libraries/environment.htm#exit(PROGRAM)">const proc: <b>exit</b> (PROGRAM)</a></li>
</ul>
<h3>exitValue</h3>
<ul>
<li><a href="libraries/process.htm#exitValue(in_process)">const func integer: <b>exitValue</b> (in process: aProcess)</a></li>
</ul>
<h3>exp</h3>
<ul>
<li><a href="libraries/float.htm#(in_string)exp(in_integer)">const func string: (in string: sciNumber) <b>exp</b> (in integer: expDigits)</a></li>
<li><a href="libraries/math.htm#exp(in_float)">const func float: <b>exp</b> (in float: x)</a></li>
</ul>
<h3>expm1</h3>
<ul>
<li><a href="libraries/math.htm#expm1(in_float)">const func float: <b>expm1</b> (in float: x)</a></li>
</ul>
<h3>expr</h3>
<ul>
<li><a href="manual/types.htm#expr">expr</a></li>
</ul>
<h3>external_file</h3>
<ul>
<li><a href="libraries/external_file.htm#external_file">const type: <b>external_file</b></a></li>
</ul>
<h3>external_file.s7i</h3>
<ul>
<li><a href="libraries/external_file.htm">external_file.s7i</a></li>
</ul>
<h3>fcircle</h3>
<ul>
<li><a href="libraries/draw.htm#fcircle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_color)">const proc: <b>fcircle</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius, in color: col)</a></li>
<li><a href="libraries/draw.htm#fcircle(in_integer,in_integer,in_integer,in_color)">const proc: <b>fcircle</b> (in integer: x, in integer: y, in integer: radius, in color: col)</a></li>
</ul>
<h3>fetch</h3>
<ul>
<li><a href="libraries/sql_base.htm#fetch(in_sqlStatement)">const func boolean: <b>fetch</b> (in sqlStatement: statement)</a></li>
</ul>
<h3>file</h3>
<ul>
<li><a href="manual/types.htm#file">file</a></li>
<li><a href="libraries/environment.htm#file(PROGRAM)">const func string: <b>file</b> (PROGRAM)</a></li>
<li><a href="libraries/file.htm#file">const type: <b>file</b></a></li>
<li><a href="libraries/progs.htm#file(in_reference)">const func string: <b>file</b> (in reference: aReference)</a></li>
</ul>
<h3>file(PROGRAM)</h3>
<ul>
<li><a href="manual/os.htm#file_PROGRAM">file(PROGRAM)</a></li>
</ul>
<h3>file.s7i</h3>
<ul>
<li><a href="libraries/file.htm">file.s7i</a></li>
</ul>
<h3>fileMode</h3>
<ul>
<li><a href="libraries/filesys.htm#fileMode">const type: <b>fileMode</b></a></li>
</ul>
<h3>filePermission</h3>
<ul>
<li><a href="libraries/filesys.htm#filePermission">const type: <b>filePermission</b></a></li>
</ul>
<h3>fileSize</h3>
<ul>
<li><a href="manual/os.htm#fileSize">fileSize</a></li>
<li><a href="libraries/ar.htm#fileSize(inout_arArchive,in_string)">const func integer: <b>fileSize</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#fileSize(inout_cpioArchive,in_string)">const func integer: <b>fileSize</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#fileSize(inout_fileSys,in_string)">const func integer: <b>fileSize</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/ftp.htm#fileSize(inout_ftpConnection,in_string)">const func integer: <b>fileSize</b> (inout ftpConnection: ftp, in string: fileName)</a></li>
<li><a href="libraries/osfiles.htm#fileSize(in_string)">const func integer: <b>fileSize</b> (in string: filePath)</a></li>
<li><a href="libraries/rpm.htm#fileSize(inout_rpmArchive,in_string)">const func integer: <b>fileSize</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#fileSize(inout_tarArchive,in_string)">const func integer: <b>fileSize</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#fileSize(inout_zipArchive,in_string)">const func integer: <b>fileSize</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>fileSys</h3>
<ul>
<li><a href="manual/types.htm#fileSys">fileSys</a></li>
<li><a href="libraries/filesys.htm#fileSys">const type: <b>fileSys</b></a></li>
</ul>
<h3>fileType</h3>
<ul>
<li><a href="manual/os.htm#fileType">fileType</a></li>
<li><a href="libraries/ar.htm#fileType(inout_arArchive,in_var_string)">const func fileType: <b>fileType</b> (inout arArchive: ar, in var string: filePath)</a></li>
<li><a href="libraries/cpio.htm#fileType(inout_cpioArchive,in_var_string)">const func fileType: <b>fileType</b> (inout cpioArchive: cpio, in var string: filePath)</a></li>
<li><a href="libraries/filesys.htm#fileType">const type: <b>fileType</b></a></li>
<li><a href="libraries/filesys.htm#fileType(inout_fileSys,in_string)">const func fileType: <b>fileType</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/ftp.htm#fileType(inout_ftpConnection,in_string)">const func fileType: <b>fileType</b> (inout ftpConnection: ftp, in string: fileName)</a></li>
<li><a href="libraries/osfiles.htm#fileType(in_string)">const func fileType: <b>fileType</b> (in string: filePath)</a></li>
<li><a href="libraries/rpm.htm#fileType(inout_rpmArchive,in_var_string)">const func fileType: <b>fileType</b> (inout rpmArchive: rpm, in var string: filePath)</a></li>
<li><a href="libraries/tar.htm#fileType(inout_tarArchive,in_var_string)">const func fileType: <b>fileType</b> (inout tarArchive: tar, in var string: filePath)</a></li>
<li><a href="libraries/zip.htm#fileType(inout_zipArchive,in_string)">const func fileType: <b>fileType</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>fileTypeSL</h3>
<ul>
<li><a href="libraries/ar.htm#fileTypeSL(inout_arArchive,in_string)">const func fileType: <b>fileTypeSL</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#fileTypeSL(inout_cpioArchive,in_string)">const func fileType: <b>fileTypeSL</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#fileTypeSL(inout_fileSys,in_string)">const func fileType: <b>fileTypeSL</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/ftp.htm#fileTypeSL(inout_ftpConnection,in_string)">const func fileType: <b>fileTypeSL</b> (inout ftpConnection: ftp, in string: fileName)</a></li>
<li><a href="libraries/osfiles.htm#fileTypeSL(in_string)">const func fileType: <b>fileTypeSL</b> (in string: filePath)</a></li>
<li><a href="libraries/rpm.htm#fileTypeSL(inout_rpmArchive,in_string)">const func fileType: <b>fileTypeSL</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#fileTypeSL(inout_tarArchive,in_string)">const func fileType: <b>fileTypeSL</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#fileTypeSL(inout_zipArchive,in_string)">const func fileType: <b>fileTypeSL</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>filesys.s7i</h3>
<ul>
<li><a href="libraries/filesys.htm">filesys.s7i</a></li>
</ul>
<h3>fileutil.s7i</h3>
<ul>
<li><a href="libraries/fileutil.htm">fileutil.s7i</a></li>
</ul>
<h3>finalPath</h3>
<ul>
<li><a href="libraries/osfiles.htm#finalPath(in_string)">const func string: <b>finalPath</b> (in string: filePath)</a></li>
</ul>
<h3>findMatchingFiles</h3>
<ul>
<li><a href="libraries/wildcard.htm#findMatchingFiles(in_string,in_boolean)">const func array string: <b>findMatchingFiles</b> (in string: pattern,
    in boolean: caseSensitive)</a></li>
<li><a href="libraries/wildcard.htm#findMatchingFiles(in_string)">const func array string: <b>findMatchingFiles</b> (in string: pattern)</a></li>
</ul>
<h3>flip</h3>
<ul>
<li><a href="libraries/hash.htm#flip(in_hashType)">const func hash [baseType] array keyType: <b>flip</b> (in hashType: aHashMap)</a></li>
</ul>
<h3>float</h3>
<ul>
<li><a href="manual/types.htm#float">float</a></li>
<li><a href="libraries/bin32.htm#float(in_bin32)">const func float: <b>float</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#float(in_bin64)">const func float: <b>float</b> (in bin64: bits)</a></li>
<li><a href="libraries/float.htm#float">const type: <b>float</b></a></li>
<li><a href="libraries/float.htm#float(in_string)">const func float: <b>float</b> (in string: stri)</a></li>
<li><a href="libraries/float.htm#float(in_integer)">const func float: <b>float</b> (in integer: number)</a></li>
<li><a href="libraries/mixarith.htm#float(in_rational)">const func float: <b>float</b> (in rational: aRational)</a></li>
</ul>
<h3>float.s7i</h3>
<ul>
<li><a href="libraries/float.htm">float.s7i</a></li>
</ul>
<h3>float2MbfBits</h3>
<ul>
<li><a href="libraries/bin32.htm#float2MbfBits(in_float,SINGLE)">const func bin32: <b>float2MbfBits</b> (in float: number, SINGLE)</a></li>
<li><a href="libraries/bin64.htm#float2MbfBits(in_float,DOUBLE)">const func bin64: <b>float2MbfBits</b> (in float: number, DOUBLE)</a></li>
</ul>
<h3>floatType</h3>
<ul>
<li><a href="libraries/db_prop.htm#floatType(in_dbCategory)">const func string: <b>floatType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>floor</h3>
<ul>
<li><a href="libraries/bigrat.htm#floor(in_bigRational)">const func bigInteger: <b>floor</b> (in bigRational: number)</a></li>
<li><a href="libraries/math.htm#floor(in_float)">const func float: <b>floor</b> (in float: x)</a></li>
<li><a href="libraries/rational.htm#floor(in_rational)">const func integer: <b>floor</b> (in rational: number)</a></li>
</ul>
<h3>flt</h3>
<ul>
<li><a href="libraries/float.htm#flt(in_integer)">const func float: <b>flt</b> (in integer: number)</a></li>
</ul>
<h3>flush</h3>
<ul>
<li><a href="libraries/clib_file.htm#flush(in_clib_file)">const proc: <b>flush</b> (in clib_file: outFile)</a></li>
<li><a href="libraries/console.htm#flush(in_console_file)">const proc: <b>flush</b> (in console_file: aFile)</a></li>
<li><a href="libraries/external_file.htm#flush(in_external_file)">const proc: <b>flush</b> (in external_file: outFile)</a></li>
<li><a href="libraries/file.htm#flush(inout_file)">const proc: <b>flush</b> (inout file: outFile)</a></li>
<li><a href="libraries/graph_file.htm#flush(in_graph_file)">const proc: <b>flush</b> (in graph_file: aGraphFile)</a></li>
<li><a href="libraries/iobuffer.htm#flush(inout_bufferFile)">const proc: <b>flush</b> (inout bufferFile: aBufferFile)</a></li>
<li><a href="libraries/null_file.htm#flush(in_null_file)">const proc: <b>flush</b> (in null_file: aFile)</a></li>
<li><a href="libraries/pixmap_file.htm#flush(inout_pixmapFontFile)">const proc: <b>flush</b> (inout pixmapFontFile: aFile)</a></li>
<li><a href="libraries/socket.htm#flush(in_socket)">const proc: <b>flush</b> (in socket: outSocket)</a></li>
<li><a href="libraries/tee.htm#flush(inout_teeFile)">const proc: <b>flush</b> (inout teeFile: outFile)</a></li>
<li><a href="libraries/utf16.htm#flush(in_utf16File)">const proc: <b>flush</b> (in utf16File: outFile)</a></li>
<li><a href="libraries/window.htm#flush(inout_window_file)">const proc: <b>flush</b> (inout window_file: window_fil)</a></li>
</ul>
<h3>flushGraphic</h3>
<ul>
<li><a href="libraries/graph.htm#flushGraphic">const proc: <b>flushGraphic</b></a></li>
</ul>
<h3>font</h3>
<ul>
<li><a href="libraries/font.htm#font">const type: <b>font</b></a></li>
</ul>
<h3>font.s7i</h3>
<ul>
<li><a href="libraries/font.htm">font.s7i</a></li>
</ul>
<h3>fontCacheType</h3>
<ul>
<li><a href="libraries/pixmapfont.htm#fontCacheType">const type: <b>fontCacheType</b></a></li>
</ul>
<h3>fontKeyType</h3>
<ul>
<li><a href="libraries/pixmapfont.htm#fontKeyType">const type: <b>fontKeyType</b></a></li>
</ul>
<h3>fontProperties</h3>
<ul>
<li><a href="libraries/font.htm#fontProperties">const type: <b>fontProperties</b></a></li>
</ul>
<h3>for</h3>
<ul>
<li><a href="libraries/ar.htm#for(inout_string)range(inout_arArchive)do(in_proc)end_for">const proc: <b>for</b> (inout string: filePath) range (inout arArchive: ar) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar) range (in arrayType: arr) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar) key (inout integer: keyVar) range (in arrayType: arr) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar)
                  range (in arrayType: arr)
                  until (ref func boolean: condition) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar)
                  key (inout integer: keyVar)
                  range (in arrayType: arr)
                  until (ref func boolean: condition) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/bitset.htm#for(inout_integer)range(in_bitset)do(in_proc)end_for">const proc: <b>for</b> (inout integer: forVar) range (in bitset: aSet) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/bitsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: variable) range (in setType: aSet) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/bstring.htm#for(inout_char)range(in_bstring)do(in_proc)end_for">const proc: <b>for</b> (inout char: forVar) range (in bstring: bstri) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">const proc: <b>for</b> (inout category: forVar) range (in category: startValue) to (in category: endValue) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">const proc: <b>for</b> (inout category: forVar) range (in category: startValue) downto (in category: endValue) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/cpio.htm#for(inout_string)range(inout_cpioArchive)do(in_proc)end_for">const proc: <b>for</b> (inout string: filePath) range (inout cpioArchive: cpio) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_integer)range(in_integer)to(in_integer)do(in_proc)end_for">const proc: <b>for</b> (inout integer: aVar) range (in integer: lowerLimit) to (in integer: upperLimit) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_integer)range(in_integer)downto(in_integer)do(in_proc)end_for">const proc: <b>for</b> (inout integer: aVar) range (in integer: upperLimit) downto (in integer: lowerLimit) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_integer)range(in_integer)to(in_integer)step(in_integer)do(in_proc)end_for">const proc: <b>for</b> (inout integer: variable) range (in integer: lowerLimit) to (in integer: upperLimit)
                step (in integer: incr_step) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_integer)range(in_integer)downto(in_integer)step(in_integer)do(in_proc)end_for">const proc: <b>for</b> (inout integer: variable) range (in integer: upperLimit) downto (in integer: lowerLimit)
                step (in integer: decr_step) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(in_integer)do(in_proc)end_for">const proc: <b>for</b> (in integer: numRepeats) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">const proc: <b>for</b> (inout char: forVar) range (in string: stri) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">const proc: <b>for</b> (inout char: forVar) key (inout integer: keyVar) range (in string: stri) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_char)range(in_string)until(in_func_boolean)do(in_proc)end_for">const proc: <b>for</b> (inout char: forVar)
            range (in string: stri)
            until (in func boolean: condition) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(in_func_boolean)do(in_proc)end_for">const proc: <b>for</b> (inout char: forVar)
            key (inout integer: number)
            range (in string: stri)
            until (in func boolean: condition) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar) range (in hashType: aHashMap) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar) key (inout keyType: keyVar) range (in hashType: aHashMap) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: variable) range (in setType: aSet) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/idxarray.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar) range (in arrayType: arr) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/idxarray.htm#for(inout_baseType)key(inout_indexType)range(in_arrayType)do(in_proc)end_for">const proc: <b>for</b> (inout baseType: forVar) key (inout indexType: keyVar) range (in arrayType: arr) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/poll.htm#for(inout_file)range(inout_pollData)do(in_proc)end_for">const proc: <b>for</b> (inout file: forVar) range (inout pollData: pData) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/ref_list.htm#for(inout_reference)range(in_ref_list)do(in_proc)end_for">const proc: <b>for</b> (inout reference: forVar) range (in ref_list: aRefList) do
              (in proc: statement)
            end for</a></li>
<li><a href="libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">const proc: <b>for</b> (inout reference: forVar) range (in ref_list: aRefList) until (ref func boolean: condition) do
              (in proc: statement)
            end for</a></li>
<li><a href="libraries/rpm.htm#for(inout_string)range(inout_rpmArchive)do(in_proc)end_for">const proc: <b>for</b> (inout string: filePath) range (inout rpmArchive: rpm) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/tar.htm#for(inout_string)range(inout_tarArchive)do(in_proc)end_for">const proc: <b>for</b> (inout string: filePath) range (inout tarArchive: tar) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/zip.htm#for(inout_string)range(inout_zipArchive)do(in_proc)end_for">const proc: <b>for</b> (inout string: filePath) range (inout zipArchive: zip) do
              (in proc: statements)
            end for</a></li>
</ul>
<h3>for key</h3>
<ul>
<li><a href="libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">const proc: <b>for key</b> (inout integer: keyVar) range (in arrayType: arr) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">const proc: <b>for key</b> (inout integer: keyVar)
                  range (in arrayType: arr)
                  until (ref func boolean: condition) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">const proc: <b>for key</b> (inout integer: keyVar) range (in string: stri) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/forloop.htm#for_key(inout_integer)range(in_string)until(in_func_boolean)do(in_proc)end_for">const proc: <b>for key</b> (inout integer: number)
            range (in string: stri)
            until (in func boolean: condition) do
              (in proc: statements)
            end for</a></li>
<li><a href="libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">const proc: <b>for key</b> (inout keyType: keyVar) range (in hashType: aHashMap) do
                    (in proc: statements)
                  end for</a></li>
<li><a href="libraries/idxarray.htm#for_key(inout_indexType)range(in_arrayType)do(in_proc)end_for">const proc: <b>for key</b> (inout indexType: keyVar) range (in arrayType: arr) do
                    (in proc: statements)
                  end for</a></li>
</ul>
<h3>for-each-key-statement</h3>
<ul>
<li><a href="manual/stats.htm#for-each-key-statement">for-each-key-statement</a></li>
</ul>
<h3>for-each-statement</h3>
<ul>
<li><a href="manual/stats.htm#for-each-statement">for-each-statement</a></li>
</ul>
<h3>for-key-statement</h3>
<ul>
<li><a href="manual/stats.htm#for-key-statement">for-key-statement</a></li>
</ul>
<h3>for-statement</h3>
<ul>
<li><a href="manual/stats.htm#for-statement">for-statement</a></li>
</ul>
<h3>for-step-statement</h3>
<ul>
<li><a href="manual/stats.htm#for-step-statement">for-step-statement</a></li>
</ul>
<h3>for-until-statement</h3>
<ul>
<li><a href="manual/stats.htm#for-until-statement">for-until-statement</a></li>
</ul>
<h3>forloop.s7i</h3>
<ul>
<li><a href="libraries/forloop.htm">forloop.s7i</a></li>
</ul>
<h3>formalParams</h3>
<ul>
<li><a href="libraries/progs.htm#formalParams(in_reference)">const func ref_list: <b>formalParams</b> (in reference: funcRef)</a></li>
</ul>
<h3>fpolyLine</h3>
<ul>
<li><a href="libraries/draw.htm#fpolyLine(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_pointList,in_color)">const proc: <b>fpolyLine</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in pointList: points, in color: col)</a></li>
<li><a href="libraries/draw.htm#fpolyLine(in_integer,in_integer,in_pointList,in_color)">const proc: <b>fpolyLine</b> (in integer: x, in integer: y, in pointList: points, in color: col)</a></li>
</ul>
<h3>fraction</h3>
<ul>
<li><a href="libraries/bigrat.htm#fraction(in_bigRational)">const func string: <b>fraction</b> (in bigRational: number)</a></li>
<li><a href="libraries/rational.htm#fraction(in_rational)">const func string: <b>fraction</b> (in rational: number)</a></li>
</ul>
<h3>fromAscii85</h3>
<ul>
<li><a href="libraries/encoding.htm#fromAscii85(in_string)">const func string: <b>fromAscii85</b> (in string: ascii85)</a></li>
</ul>
<h3>fromAsciiz</h3>
<ul>
<li><a href="libraries/bytedata.htm#fromAsciiz(in_string,in_integer)">const func string: <b>fromAsciiz</b> (in string: stri, in integer: startPos)</a></li>
</ul>
<h3>fromBase</h3>
<ul>
<li><a href="libraries/encoding.htm#fromBase(in_string,in_string)">const func string: <b>fromBase</b> (in string: encoded, in string: digits)</a></li>
</ul>
<h3>fromBase58</h3>
<ul>
<li><a href="libraries/encoding.htm#fromBase58(in_string)">const func string: <b>fromBase58</b> (in string: base58)</a></li>
</ul>
<h3>fromBase64</h3>
<ul>
<li><a href="libraries/encoding.htm#fromBase64(in_string)">const func string: <b>fromBase64</b> (in string: base64)</a></li>
</ul>
<h3>fromBaseToBigInt</h3>
<ul>
<li><a href="libraries/encoding.htm#fromBaseToBigInt(in_string,in_string)">const func bigInteger: <b>fromBaseToBigInt</b> (in string: encoded, in string: digits)</a></li>
</ul>
<h3>fromCsvLine</h3>
<ul>
<li><a href="libraries/csv.htm#fromCsvLine(in_string,in_char)">const func array string: <b>fromCsvLine</b> (in string: csvLine, in char: separator)</a></li>
</ul>
<h3>fromJacobian</h3>
<ul>
<li><a href="libraries/elliptic.htm#fromJacobian(in_jacobianPoint,in_bigInteger)">const func ecPoint: <b>fromJacobian</b> (in jacobianPoint: jp, in bigInteger: n)</a></li>
</ul>
<h3>fromNullTerminatedUtf16Be</h3>
<ul>
<li><a href="libraries/unicode.htm#fromNullTerminatedUtf16Be(in_string,in_integer)">const func string: <b>fromNullTerminatedUtf16Be</b> (in string: stri, in integer: startPos)</a></li>
</ul>
<h3>fromNullTerminatedUtf16Le</h3>
<ul>
<li><a href="libraries/unicode.htm#fromNullTerminatedUtf16Le(in_string,in_integer)">const func string: <b>fromNullTerminatedUtf16Le</b> (in string: stri, in integer: startPos)</a></li>
</ul>
<h3>fromPercentEncoded</h3>
<ul>
<li><a href="libraries/encoding.htm#fromPercentEncoded(in_string)">const func string: <b>fromPercentEncoded</b> (in string: percentEncoded)</a></li>
</ul>
<h3>fromQuotedPrintable</h3>
<ul>
<li><a href="libraries/encoding.htm#fromQuotedPrintable(in_string)">const func string: <b>fromQuotedPrintable</b> (in string: quoted)</a></li>
</ul>
<h3>fromUrlEncoded</h3>
<ul>
<li><a href="libraries/encoding.htm#fromUrlEncoded(in_string)">const func string: <b>fromUrlEncoded</b> (in string: urlEncoded)</a></li>
</ul>
<h3>fromUtf16Be</h3>
<ul>
<li><a href="libraries/unicode.htm#fromUtf16Be(in_string)">const func string: <b>fromUtf16Be</b> (in string: utf16Be)</a></li>
</ul>
<h3>fromUtf16Le</h3>
<ul>
<li><a href="libraries/unicode.htm#fromUtf16Le(in_string)">const func string: <b>fromUtf16Le</b> (in string: utf16Le)</a></li>
</ul>
<h3>fromUtf7</h3>
<ul>
<li><a href="libraries/unicode.htm#fromUtf7(in_string)">const func string: <b>fromUtf7</b> (in string: stri7)</a></li>
</ul>
<h3>fromUtf8</h3>
<ul>
<li><a href="libraries/unicode.htm#fromUtf8(in_string)">const func string: <b>fromUtf8</b> (in string: utf8)</a></li>
</ul>
<h3>fromUuencoded</h3>
<ul>
<li><a href="libraries/encoding.htm#fromUuencoded(in_string)">const func string: <b>fromUuencoded</b> (in string: uuencoded)</a></li>
</ul>
<h3>ftp.s7i</h3>
<ul>
<li><a href="libraries/ftp.htm">ftp.s7i</a></li>
</ul>
<h3>ftp7.sd7</h3>
<ul>
<li><a href="scrshots/ftp7.htm">Ftp file transfer program</a></li>
</ul>
<h3>ftpConnection</h3>
<ul>
<li><a href="libraries/ftp.htm#ftpConnection">const type: <b>ftpConnection</b></a></li>
</ul>
<h3>ftpFileSys</h3>
<ul>
<li><a href="libraries/ftp.htm#ftpFileSys">const type: <b>ftpFileSys</b></a></li>
</ul>
<h3>ftpserv.sd7</h3>
<ul>
<li><a href="scrshots/ftpserv.htm">Ftp server</a></li>
</ul>
<h3>func</h3>
<ul>
<li><a href="manual/types.htm#func">func</a></li>
</ul>
<h3>gcd</h3>
<ul>
<li><a href="libraries/bigint.htm#gcd(in_bigInteger,in_bigInteger)">const func bigInteger: <b>gcd</b> (in bigInteger: number1, in bigInteger: number2)</a></li>
</ul>
<h3>genAsn1Element</h3>
<ul>
<li><a href="libraries/asn1.htm#genAsn1Element(in_asn1TagType,in_string)">const func string: <b>genAsn1Element</b> (in asn1TagType: tagType, in string: data)</a></li>
</ul>
<h3>genAsn1Integer</h3>
<ul>
<li><a href="libraries/asn1.htm#genAsn1Integer(in_string)">const func string: <b>genAsn1Integer</b> (in string: data)</a></li>
</ul>
<h3>genAsn1Sequence</h3>
<ul>
<li><a href="libraries/asn1.htm#genAsn1Sequence(in_string)">const func string: <b>genAsn1Sequence</b> (in string: data)</a></li>
</ul>
<h3>genAsn1Set</h3>
<ul>
<li><a href="libraries/asn1.htm#genAsn1Set(in_string)">const func string: <b>genAsn1Set</b> (in string: data)</a></li>
</ul>
<h3>genAsn1String</h3>
<ul>
<li><a href="libraries/asn1.htm#genAsn1String(in_string)">const func string: <b>genAsn1String</b> (in string: data)</a></li>
</ul>
<h3>genEccKeyPair</h3>
<ul>
<li><a href="libraries/elliptic.htm#genEccKeyPair(in_ellipticCurve)">const func eccKeyPair: <b>genEccKeyPair</b> (in ellipticCurve: curve)</a></li>
</ul>
<h3>genExplicitAsn1Tag</h3>
<ul>
<li><a href="libraries/asn1.htm#genExplicitAsn1Tag(in_integer,in_string)">const func string: <b>genExplicitAsn1Tag</b> (in integer: tagNumber, in string: data)</a></li>
</ul>
<h3>genPixmap</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#genPixmap(in_array_string,in_color,in_color,in_integer)">const func PRIMITIVE_WINDOW: <b>genPixmap</b> (in array string: pattern,
    in color: foreground, in color: background, in integer: scale)</a></li>
<li><a href="libraries/vectorfont.htm#genPixmap(in_vectorFont,in_charVectorType,in_color,in_color,in_integer)">const func PRIMITIVE_WINDOW: <b>genPixmap</b> (in vectorFont: vecFont, in charVectorType: charVectors,
    in color: foreground, in color: background, in integer: scale)</a></li>
</ul>
<h3>genPixmapFont</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#genPixmapFont(in_bitmapFont,in_integer,in_integer,in_color,in_color)">const func pixmapFontType: <b>genPixmapFont</b> (in bitmapFont: bmpFont,
    in integer: fontSize, in integer: scale,
    in color: foreground, in color: background)</a></li>
<li><a href="libraries/vectorfont.htm#genPixmapFont(in_vectorFont,in_integer,in_integer,in_color,in_color)">const func pixmapFontType: <b>genPixmapFont</b> (in vectorFont: vecFont,
    in integer: fontSize, in integer: scale,
    in color: foreground, in color: background)</a></li>
</ul>
<h3>genPointList</h3>
<ul>
<li><a href="libraries/graph.htm#genPointList(ref_array_integer)">const func pointList: <b>genPointList</b> (ref array integer: coordinates)</a></li>
</ul>
<h3>genPrivateKey</h3>
<ul>
<li><a href="libraries/elliptic.htm#genPrivateKey(in_ellipticCurve)">const func bigInteger: <b>genPrivateKey</b> (in ellipticCurve: curve)</a></li>
</ul>
<h3>genRsaKeyPair</h3>
<ul>
<li><a href="libraries/pkcs1.htm#genRsaKeyPair(in_integer,in_bigInteger)">const func rsaKeyPair: <b>genRsaKeyPair</b> (in integer: keyLength, in bigInteger: exponent)</a></li>
</ul>
<h3>geostd8</h3>
<ul>
<li><a href="libraries/charsets.htm#geostd8">const string: <b>geostd8</b></a></li>
</ul>
<h3>getATime</h3>
<ul>
<li><a href="manual/os.htm#getATime">getATime</a></li>
<li><a href="libraries/osfiles.htm#getATime(in_string)">const func time: <b>getATime</b> (in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#getATime(in_string,SYMLINK)">const func time: <b>getATime</b> (in string: filePath, SYMLINK)</a></li>
</ul>
<h3>getActiveMode</h3>
<ul>
<li><a href="libraries/ftp.htm#getActiveMode(in_ftpConnection)">const func boolean: <b>getActiveMode</b> (in ftpConnection: ftp)</a></li>
</ul>
<h3>getAsciiTransfer</h3>
<ul>
<li><a href="libraries/ftp.htm#getAsciiTransfer(in_ftpConnection)">const func boolean: <b>getAsciiTransfer</b> (in ftpConnection: ftp)</a></li>
</ul>
<h3>getAsciiz</h3>
<ul>
<li><a href="libraries/bytedata.htm#getAsciiz(in_string,inout_integer)">const func string: <b>getAsciiz</b> (in string: stri, inout integer: currPos)</a></li>
<li><a href="libraries/bytedata.htm#getAsciiz(inout_file)">const func string: <b>getAsciiz</b> (inout file: inFile)</a></li>
</ul>
<h3>getAsn1DataElement</h3>
<ul>
<li><a href="libraries/asn1.htm#getAsn1DataElement(in_string,inout_integer)">const func asn1DataElement: <b>getAsn1DataElement</b> (in string: stri, inout integer: pos)</a></li>
</ul>
<h3>getAttrValue</h3>
<ul>
<li><a href="libraries/xmldom.htm#getAttrValue(in_xmlNode,in_string)">const func string: <b>getAttrValue</b> (in xmlNode: aNode, in string: attrName)</a></li>
</ul>
<h3>getAttributes</h3>
<ul>
<li><a href="libraries/xmldom.htm#getAttributes(in_xmlNode)">const func attrHashType: <b>getAttributes</b> (in xmlNode: aNode)</a></li>
</ul>
<h3>getAutoCommit</h3>
<ul>
<li><a href="libraries/sql_base.htm#getAutoCommit(in_database)">const func boolean: <b>getAutoCommit</b> (in database: db)</a></li>
</ul>
<h3>getBinary</h3>
<ul>
<li><a href="libraries/bin64.htm#getBinary(in_bitset,in_integer)">const func bin64: <b>getBinary</b> (in bitset: set1,
                             in integer: lowestBitNum)</a></li>
</ul>
<h3>getBit</h3>
<ul>
<li><a href="libraries/bitdata.htm#getBit(inout_lsbBitStream)">const func integer: <b>getBit</b> (inout lsbBitStream: inBitStream)</a></li>
<li><a href="libraries/bitdata.htm#getBit(inout_msbBitStream)">const func integer: <b>getBit</b> (inout msbBitStream: inBitStream)</a></li>
</ul>
<h3>getBits</h3>
<ul>
<li><a href="libraries/bitdata.htm#getBits(inout_lsbBitStream,in_integer)">const func integer: <b>getBits</b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</a></li>
<li><a href="libraries/bitdata.htm#getBits(inout_msbBitStream,in_integer)">const func integer: <b>getBits</b> (inout msbBitStream: inBitStream, in integer: bitWidth)</a></li>
<li><a href="libraries/bitdata.htm#getBits(inout_reverseBitStream,in_integer)">const func integer: <b>getBits</b> (inout reverseBitStream: inBitStream, in integer: bitWidth)</a></li>
</ul>
<h3>getBorder</h3>
<ul>
<li><a href="libraries/graph.htm#getBorder(in_PRIMITIVE_WINDOW)">const func array integer: <b>getBorder</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
</ul>
<h3>getBuiltInConfig</h3>
<ul>
<li><a href="libraries/cc_conf.htm#getBuiltInConfig">const func ccConfigType: <b>getBuiltInConfig</b></a></li>
</ul>
<h3>getCStringLiteralText</h3>
<ul>
<li><a href="libraries/scanstri.htm#getCStringLiteralText(inout_string)">const func string: <b>getCStringLiteralText</b> (inout string: stri)</a></li>
</ul>
<h3>getCTime</h3>
<ul>
<li><a href="manual/os.htm#getCTime">getCTime</a></li>
<li><a href="libraries/osfiles.htm#getCTime(in_string)">const func time: <b>getCTime</b> (in string: filePath)</a></li>
</ul>
<h3>getCgiParameters</h3>
<ul>
<li><a href="libraries/cgi.htm#getCgiParameters(in_string)">const func hash [string] string: <b>getCgiParameters</b> (in string: paramStri)</a></li>
<li><a href="libraries/cgi.htm#getCgiParameters(inout_file)">const func hash [string] string: <b>getCgiParameters</b> (inout file: inFile)</a></li>
</ul>
<h3>getCharLiteral</h3>
<ul>
<li><a href="libraries/scanfile.htm#getCharLiteral(inout_file)">const func string: <b>getCharLiteral</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getCharLiteral(inout_string)">const func string: <b>getCharLiteral</b> (inout string: stri)</a></li>
</ul>
<h3>getCheck</h3>
<ul>
<li><a href="libraries/poll.htm#getCheck(inout_pollData,in_PRIMITIVE_SOCKET)">const func integer: <b>getCheck</b> (inout pollData: pData,
                               in PRIMITIVE_SOCKET: aSocket)</a></li>
<li><a href="libraries/poll.htm#getCheck(inout_pollData,in_file)">const func integer: <b>getCheck</b> (inout pollData: pData, in file: aFile)</a></li>
</ul>
<h3>getCommandLineWord</h3>
<ul>
<li><a href="libraries/scanstri.htm#getCommandLineWord(inout_string)">const func string: <b>getCommandLineWord</b> (inout string: stri)</a></li>
</ul>
<h3>getComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#getComment(inout_file)">const func string: <b>getComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getComment(inout_string)">const func string: <b>getComment</b> (inout string: stri)</a></li>
</ul>
<h3>getComputedMac</h3>
<ul>
<li><a href="libraries/aes_gcm.htm#getComputedMac(in_aesGcmState)">const func string: <b>getComputedMac</b> (in aesGcmState: state)</a></li>
<li><a href="libraries/cipher.htm#getComputedMac(in_cipherState)">const func string: <b>getComputedMac</b> (in cipherState: state)</a></li>
</ul>
<h3>getContent</h3>
<ul>
<li><a href="libraries/xmldom.htm#getContent(in_xmlNode)">const func string: <b>getContent</b> (in xmlNode: aNode)</a></li>
</ul>
<h3>getData</h3>
<ul>
<li><a href="libraries/asn1.htm#getData(in_string,inout_integer,in_asn1DataElement)">const func string: <b>getData</b> (in string: stri, inout integer: pos,
    in asn1DataElement: dataElement)</a></li>
</ul>
<h3>getDays</h3>
<ul>
<li><a href="libraries/duration.htm#getDays(in_duration)">const func integer: <b>getDays</b> (in duration: aDuration)</a></li>
</ul>
<h3>getDigits</h3>
<ul>
<li><a href="libraries/scanfile.htm#getDigits(inout_file)">const func string: <b>getDigits</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getDigits(inout_string)">const func string: <b>getDigits</b> (inout string: stri)</a></li>
</ul>
<h3>getDoctypeName</h3>
<ul>
<li><a href="libraries/htmldom.htm#getDoctypeName(in_htmlDocument)">const func string: <b>getDoctypeName</b> (in htmlDocument: document)</a></li>
</ul>
<h3>getDoctypeParameter</h3>
<ul>
<li><a href="libraries/htmldom.htm#getDoctypeParameter(in_htmlDocument,in_integer)">const func string: <b>getDoctypeParameter</b> (in htmlDocument: document, in integer: index)</a></li>
</ul>
<h3>getDosCommandParameter</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#getDosCommandParameter(inout_string)">const func string: <b>getDosCommandParameter</b> (inout string: parameters)</a></li>
</ul>
<h3>getDosEchoParameter</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#getDosEchoParameter(inout_string)">const func string: <b>getDosEchoParameter</b> (inout string: parameters)</a></li>
</ul>
<h3>getEscapeSequence</h3>
<ul>
<li><a href="libraries/scanfile.htm#getEscapeSequence(inout_file,inout_string)">const proc: <b>getEscapeSequence</b> (inout file: inFile, inout string: symbol)</a></li>
<li><a href="libraries/scanstri.htm#getEscapeSequence(in_string,inout_integer,inout_string)">const proc: <b>getEscapeSequence</b> (in string: stri, inout integer: pos, inout string: symbol)</a></li>
</ul>
<h3>getFile</h3>
<ul>
<li><a href="libraries/ar.htm#getFile(inout_arArchive,in_string)">const func string: <b>getFile</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#getFile(inout_cpioArchive,in_string)">const func string: <b>getFile</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getFile(inout_fileSys,in_string)">const func string: <b>getFile</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/ftp.htm#getFile(inout_ftpConnection,in_string)">const func string: <b>getFile</b> (inout ftpConnection: ftp, in string: filePath)</a></li>
<li><a href="libraries/rpm.htm#getFile(inout_rpmArchive,in_string)">const func string: <b>getFile</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#getFile(inout_tarArchive,in_string)">const func string: <b>getFile</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#getFile(inout_zipArchive,in_string)">const func string: <b>getFile</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>getFileMode</h3>
<ul>
<li><a href="manual/os.htm#getFileMode">getFileMode</a></li>
<li><a href="libraries/ar.htm#getFileMode(inout_arArchive,in_string)">const func fileMode: <b>getFileMode</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#getFileMode(inout_cpioArchive,in_string)">const func fileMode: <b>getFileMode</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getFileMode(inout_fileSys,in_string)">const func fileMode: <b>getFileMode</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#getFileMode(in_string)">const func fileMode: <b>getFileMode</b> (in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#getFileMode(in_string,SYMLINK)">const func fileMode: <b>getFileMode</b> (in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/rpm.htm#getFileMode(inout_rpmArchive,in_string)">const func fileMode: <b>getFileMode</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#getFileMode(inout_tarArchive,in_string)">const func fileMode: <b>getFileMode</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#getFileMode(inout_zipArchive,in_string)">const func fileMode: <b>getFileMode</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>getFinding</h3>
<ul>
<li><a href="libraries/poll.htm#getFinding(inout_pollData,in_PRIMITIVE_SOCKET)">const func integer: <b>getFinding</b> (inout pollData: pData,
                                in PRIMITIVE_SOCKET: aSocket)</a></li>
<li><a href="libraries/poll.htm#getFinding(inout_pollData,in_file)">const func integer: <b>getFinding</b> (inout pollData: pData, in file: aFile)</a></li>
</ul>
<h3>getFont</h3>
<ul>
<li><a href="libraries/pixmap_file.htm#getFont(in_text)">const func font: <b>getFont</b> (in text: aText)</a></li>
<li><a href="libraries/pixmapfont.htm#getFont(in_font,in_integer,in_integer,in_color,in_color)">const func activeFont: <b>getFont</b> (in font: baseFont, in integer: fontSize,
    in integer: scale, in color: foreground, in color: background)</a></li>
</ul>
<h3>getFontCharPixmap</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#getFontCharPixmap(in_bitmapFont,inout_pixmapFontType,in_char)">const func PRIMITIVE_WINDOW: <b>getFontCharPixmap</b> (in bitmapFont: bmpFont,
    inout pixmapFontType: pixmapFont, in char: ch)</a></li>
<li><a href="libraries/vectorfont.htm#getFontCharPixmap(in_vectorFont,inout_pixmapFontType,in_char)">const func PRIMITIVE_WINDOW: <b>getFontCharPixmap</b> (in vectorFont: vecFont,
    inout pixmapFontType: pixmapFont, in char: ch)</a></li>
</ul>
<h3>getFtp</h3>
<ul>
<li><a href="libraries/ftp.htm#getFtp(in_string)">const func string: <b>getFtp</b> (in string: location)</a></li>
</ul>
<h3>getGroup</h3>
<ul>
<li><a href="manual/os.htm#getGroup">getGroup</a></li>
<li><a href="libraries/ar.htm#getGroup(inout_arArchive,in_string)">const func string: <b>getGroup</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#getGroup(inout_cpioArchive,in_string)">const func string: <b>getGroup</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getGroup(inout_fileSys,in_string)">const func string: <b>getGroup</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getGroup(inout_fileSys,in_string,SYMLINK)">const func string: <b>getGroup</b> (inout fileSys: fileSystem, in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/osfiles.htm#getGroup(in_string)">const func string: <b>getGroup</b> (in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#getGroup(in_string,SYMLINK)">const func string: <b>getGroup</b> (in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/rpm.htm#getGroup(inout_rpmArchive,in_string)">const func string: <b>getGroup</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#getGroup(inout_tarArchive,in_string)">const func string: <b>getGroup</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#getGroup(inout_zipArchive,in_string)">const func string: <b>getGroup</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>getHostname</h3>
<ul>
<li><a href="libraries/sockbase.htm#getHostname">const func string: <b>getHostname</b></a></li>
</ul>
<h3>getHours</h3>
<ul>
<li><a href="libraries/duration.htm#getHours(in_duration)">const func integer: <b>getHours</b> (in duration: aDuration)</a></li>
</ul>
<h3>getHtmlAttributeValue</h3>
<ul>
<li><a href="libraries/scanfile.htm#getHtmlAttributeValue(inout_file)">const func string: <b>getHtmlAttributeValue</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getHtmlAttributeValue(inout_string)">const func string: <b>getHtmlAttributeValue</b> (inout string: stri)</a></li>
</ul>
<h3>getHtmlRoot</h3>
<ul>
<li><a href="libraries/htmldom.htm#getHtmlRoot(in_htmlDocument)">const func xmlNode: <b>getHtmlRoot</b> (in htmlDocument: document)</a></li>
</ul>
<h3>getHtmlTagSymbolOrComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#getHtmlTagSymbolOrComment(inout_file)">const func string: <b>getHtmlTagSymbolOrComment</b> (inout file: inFile)</a></li>
</ul>
<h3>getHttp</h3>
<ul>
<li><a href="libraries/gethttp.htm#getHttp(in_string)">const func string: <b>getHttp</b> (in string: location)</a></li>
</ul>
<h3>getHttpRequest</h3>
<ul>
<li><a href="libraries/httpserv.htm#getHttpRequest(inout_httpServer)">const func httpRequest: <b>getHttpRequest</b> (inout httpServer: server)</a></li>
</ul>
<h3>getHttpSymbol</h3>
<ul>
<li><a href="libraries/scanstri.htm#getHttpSymbol(inout_string)">const func string: <b>getHttpSymbol</b> (inout string: stri)</a></li>
</ul>
<h3>getHttps</h3>
<ul>
<li><a href="libraries/gethttps.htm#getHttps(in_string)">const func string: <b>getHttps</b> (in string: location)</a></li>
</ul>
<h3>getHuffmanSymbol</h3>
<ul>
<li><a href="libraries/huffman.htm#getHuffmanSymbol(inout_msbBitStream,in_msbHuffmanTable)">const func integer: <b>getHuffmanSymbol</b> (inout msbBitStream: inBitStream,
    in msbHuffmanTable: table)</a></li>
<li><a href="libraries/huffman.htm#getHuffmanSymbol(inout_lsbBitStream,in_lsbHuffmanTable)">const func integer: <b>getHuffmanSymbol</b> (inout lsbBitStream: inBitStream,
    in lsbHuffmanTable: table)</a></li>
</ul>
<h3>getInteger</h3>
<ul>
<li><a href="libraries/scanfile.htm#getInteger(inout_file)">const func string: <b>getInteger</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getInteger(inout_string)">const func string: <b>getInteger</b> (inout string: stri)</a></li>
</ul>
<h3>getLeb128</h3>
<ul>
<li><a href="libraries/leb128.htm#getLeb128(inout_file)">const func string: <b>getLeb128</b> (inout file: inFile)</a></li>
</ul>
<h3>getLine</h3>
<ul>
<li><a href="libraries/scanfile.htm#getLine(inout_file)">const func string: <b>getLine</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getLine(inout_string)">const func string: <b>getLine</b> (inout string: stri)</a></li>
</ul>
<h3>getLineComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#getLineComment(inout_file)">const func string: <b>getLineComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getLineComment(inout_string)">const func string: <b>getLineComment</b> (inout string: stri)</a></li>
</ul>
<h3>getMTime</h3>
<ul>
<li><a href="manual/os.htm#getMTime">getMTime</a></li>
<li><a href="libraries/ar.htm#getMTime(inout_arArchive,in_string)">const func time: <b>getMTime</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#getMTime(inout_cpioArchive,in_string)">const func time: <b>getMTime</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getMTime(inout_fileSys,in_string)">const func time: <b>getMTime</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getMTime(inout_fileSys,in_string,SYMLINK)">const func time: <b>getMTime</b> (inout fileSys: fileSystem, in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/ftp.htm#getMTime(inout_ftpConnection,in_string)">const func time: <b>getMTime</b> (inout ftpConnection: ftp, in string: fileName)</a></li>
<li><a href="libraries/osfiles.htm#getMTime(in_string)">const func time: <b>getMTime</b> (in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#getMTime(in_string,SYMLINK)">const func time: <b>getMTime</b> (in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/rpm.htm#getMTime(inout_rpmArchive,in_string)">const func time: <b>getMTime</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#getMTime(inout_tarArchive,in_string)">const func time: <b>getMTime</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#getMTime(inout_zipArchive,in_string)">const func time: <b>getMTime</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>getMac</h3>
<ul>
<li><a href="libraries/aes_gcm.htm#getMac(in_aesGcmState)">const func string: <b>getMac</b> (in aesGcmState: state)</a></li>
<li><a href="libraries/cipher.htm#getMac(in_cipherState)">const func string: <b>getMac</b> (in cipherState: state)</a></li>
</ul>
<h3>getMakeDependency</h3>
<ul>
<li><a href="libraries/makedata.htm#getMakeDependency(inout_string)">const func string: <b>getMakeDependency</b> (inout string: dependencies)</a></li>
</ul>
<h3>getMakeLine</h3>
<ul>
<li><a href="libraries/makedata.htm#getMakeLine(inout_file)">const func string: <b>getMakeLine</b> (inout file: makefile)</a></li>
</ul>
<h3>getMakeTarget</h3>
<ul>
<li><a href="libraries/makedata.htm#getMakeTarget(inout_file)">const func string: <b>getMakeTarget</b> (inout file: makefile)</a></li>
</ul>
<h3>getMicroSeconds</h3>
<ul>
<li><a href="libraries/duration.htm#getMicroSeconds(in_duration)">const func integer: <b>getMicroSeconds</b> (in duration: aDuration)</a></li>
</ul>
<h3>getMinutes</h3>
<ul>
<li><a href="libraries/duration.htm#getMinutes(in_duration)">const func integer: <b>getMinutes</b> (in duration: aDuration)</a></li>
</ul>
<h3>getMonths</h3>
<ul>
<li><a href="libraries/duration.htm#getMonths(in_duration)">const func integer: <b>getMonths</b> (in duration: aDuration)</a></li>
</ul>
<h3>getName</h3>
<ul>
<li><a href="libraries/scanfile.htm#getName(inout_file)">const func string: <b>getName</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getName(inout_string)">const func string: <b>getName</b> (inout string: stri)</a></li>
</ul>
<h3>getNextHtmlAttribute</h3>
<ul>
<li><a href="libraries/scanfile.htm#getNextHtmlAttribute(inout_file,inout_string,inout_string)">const proc: <b>getNextHtmlAttribute</b> (inout file: inFile,
    inout string: attributeName, inout string: attributeValue)</a></li>
<li><a href="libraries/scanstri.htm#getNextHtmlAttribute(inout_string,inout_string,inout_string)">const proc: <b>getNextHtmlAttribute</b> (inout string: stri,
    inout string: attributeName, inout string: attributeValue)</a></li>
</ul>
<h3>getNextXmlAttribute</h3>
<ul>
<li><a href="libraries/scanfile.htm#getNextXmlAttribute(inout_file,inout_string,inout_string)">const proc: <b>getNextXmlAttribute</b> (inout file: inFile,
    inout string: attributeName, inout string: attributeValue)</a></li>
<li><a href="libraries/scanstri.htm#getNextXmlAttribute(inout_string,inout_string,inout_string)">const proc: <b>getNextXmlAttribute</b> (inout string: stri,
    inout string: attributeName, inout string: attributeValue)</a></li>
</ul>
<h3>getNonDigits</h3>
<ul>
<li><a href="libraries/scanfile.htm#getNonDigits(inout_file)">const func string: <b>getNonDigits</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getNonDigits(inout_string)">const func string: <b>getNonDigits</b> (inout string: stri)</a></li>
</ul>
<h3>getNullTerminatedUtf16Be</h3>
<ul>
<li><a href="libraries/unicode.htm#getNullTerminatedUtf16Be(in_string,inout_integer)">const func string: <b>getNullTerminatedUtf16Be</b> (in string: stri, inout integer: currPos)</a></li>
<li><a href="libraries/unicode.htm#getNullTerminatedUtf16Be(inout_file)">const func string: <b>getNullTerminatedUtf16Be</b> (inout file: inFile)</a></li>
</ul>
<h3>getNullTerminatedUtf16Le</h3>
<ul>
<li><a href="libraries/unicode.htm#getNullTerminatedUtf16Le(in_string,inout_integer)">const func string: <b>getNullTerminatedUtf16Le</b> (in string: stri, inout integer: currPos)</a></li>
<li><a href="libraries/unicode.htm#getNullTerminatedUtf16Le(inout_file)">const func string: <b>getNullTerminatedUtf16Le</b> (inout file: inFile)</a></li>
</ul>
<h3>getNumber</h3>
<ul>
<li><a href="libraries/scanfile.htm#getNumber(inout_file)">const func string: <b>getNumber</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getNumber(inout_string)">const func string: <b>getNumber</b> (inout string: stri)</a></li>
</ul>
<h3>getOwner</h3>
<ul>
<li><a href="manual/os.htm#getOwner">getOwner</a></li>
<li><a href="libraries/ar.htm#getOwner(inout_arArchive,in_string)">const func string: <b>getOwner</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/cpio.htm#getOwner(inout_cpioArchive,in_string)">const func string: <b>getOwner</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getOwner(inout_fileSys,in_string)">const func string: <b>getOwner</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#getOwner(inout_fileSys,in_string,SYMLINK)">const func string: <b>getOwner</b> (inout fileSys: fileSystem, in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/osfiles.htm#getOwner(in_string)">const func string: <b>getOwner</b> (in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#getOwner(in_string,SYMLINK)">const func string: <b>getOwner</b> (in string: filePath, SYMLINK)</a></li>
<li><a href="libraries/rpm.htm#getOwner(inout_rpmArchive,in_string)">const func string: <b>getOwner</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#getOwner(inout_tarArchive,in_string)">const func string: <b>getOwner</b> (inout tarArchive: tar, in string: filePath)</a></li>
<li><a href="libraries/zip.htm#getOwner(inout_zipArchive,in_string)">const func string: <b>getOwner</b> (inout zipArchive: zip, in string: filePath)</a></li>
</ul>
<h3>getParamValue</h3>
<ul>
<li><a href="libraries/inifile.htm#getParamValue(in_iniDataType,in_string,in_string)">const func string: <b>getParamValue</b> (in iniDataType: iniData,
    in string: sectionName, in string: propertyName)</a></li>
</ul>
<h3>getPixelArray</h3>
<ul>
<li><a href="libraries/draw.htm#getPixelArray(in_PRIMITIVE_WINDOW)">const func array array pixel: <b>getPixelArray</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
</ul>
<h3>getPixelColor</h3>
<ul>
<li><a href="libraries/draw.htm#getPixelColor(in_PRIMITIVE_WINDOW,in_integer,in_integer)">const func color: <b>getPixelColor</b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: x, in integer: y)</a></li>
</ul>
<h3>getPixmap</h3>
<ul>
<li><a href="libraries/draw.htm#getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer)">const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height)</a></li>
<li><a href="libraries/draw.htm#getPixmap(in_integer,in_integer,in_integer,in_integer)">const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in integer: left, in integer: upper,
    in integer: width, in integer: height)</a></li>
<li><a href="libraries/draw.htm#getPixmap(in_PRIMITIVE_WINDOW)">const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin)</a></li>
<li><a href="libraries/draw.htm#getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height,
    in color: background)</a></li>
<li><a href="libraries/draw.htm#getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_color)">const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height,
    in integer: resultWidth, in integer: resultHeight, in color: background)</a></li>
<li><a href="libraries/draw.htm#getPixmap(ref_array_array_pixel)">const func PRIMITIVE_WINDOW: <b>getPixmap</b> (ref array array pixel: image)</a></li>
</ul>
<h3>getQuotedText</h3>
<ul>
<li><a href="libraries/scanfile.htm#getQuotedText(inout_file)">const func string: <b>getQuotedText</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getQuotedText(inout_string)">const func string: <b>getQuotedText</b> (inout string: stri)</a></li>
</ul>
<h3>getSearchPath</h3>
<ul>
<li><a href="libraries/process.htm#getSearchPath">const func array string: <b>getSearchPath</b></a></li>
</ul>
<h3>getSeconds</h3>
<ul>
<li><a href="libraries/duration.htm#getSeconds(in_duration)">const func integer: <b>getSeconds</b> (in duration: aDuration)</a></li>
</ul>
<h3>getSimpleStringLiteral</h3>
<ul>
<li><a href="libraries/scanfile.htm#getSimpleStringLiteral(inout_file)">const func string: <b>getSimpleStringLiteral</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getSimpleStringLiteral(inout_string)">const func string: <b>getSimpleStringLiteral</b> (inout string: stri)</a></li>
</ul>
<h3>getSimpleSymbol</h3>
<ul>
<li><a href="libraries/scanfile.htm#getSimpleSymbol(inout_file)">const func string: <b>getSimpleSymbol</b> (inout file: inFile)</a></li>
</ul>
<h3>getSizeInBytes</h3>
<ul>
<li><a href="libraries/elliptic.htm#getSizeInBytes(in_ellipticCurve)">const func integer: <b>getSizeInBytes</b> (in ellipticCurve: curve)</a></li>
</ul>
<h3>getStriUpToChar</h3>
<ul>
<li><a href="libraries/bytedata.htm#getStriUpToChar(inout_file,in_char)">const func string: <b>getStriUpToChar</b> (inout file: inFile, in char: terminator)</a></li>
</ul>
<h3>getStringLiteral</h3>
<ul>
<li><a href="libraries/scanfile.htm#getStringLiteral(inout_file)">const func string: <b>getStringLiteral</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getStringLiteral(inout_string)">const func string: <b>getStringLiteral</b> (inout string: stri)</a></li>
</ul>
<h3>getSubNodes</h3>
<ul>
<li><a href="libraries/xmldom.htm#getSubNodes(in_xmlNode)">const func array xmlNode: <b>getSubNodes</b> (in xmlNode: aNode)</a></li>
</ul>
<h3>getSymbol</h3>
<ul>
<li><a href="libraries/scanfile.htm#getSymbol(inout_file)">const func string: <b>getSymbol</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getSymbol(inout_string)">const func string: <b>getSymbol</b> (inout string: stri)</a></li>
</ul>
<h3>getSymbolInXmlTag</h3>
<ul>
<li><a href="libraries/scanfile.htm#getSymbolInXmlTag(inout_file)">const func string: <b>getSymbolInXmlTag</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getSymbolInXmlTag(inout_string)">const func string: <b>getSymbolInXmlTag</b> (inout string: stri)</a></li>
</ul>
<h3>getSymbolOrComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#getSymbolOrComment(inout_file)">const func string: <b>getSymbolOrComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getSymbolOrComment(inout_string)">const func string: <b>getSymbolOrComment</b> (inout string: stri)</a></li>
</ul>
<h3>getSymbolWithHtmlEntities</h3>
<ul>
<li><a href="libraries/scanfile.htm#getSymbolWithHtmlEntities(inout_file)">const func string: <b>getSymbolWithHtmlEntities</b> (inout file: inFile)</a></li>
</ul>
<h3>getType</h3>
<ul>
<li><a href="libraries/reference.htm#getType(in_reference)">const func type: <b>getType</b> (in reference: aReference)</a></li>
</ul>
<h3>getUInt16Be</h3>
<ul>
<li><a href="libraries/bytedata.htm#getUInt16Be(inout_file)">const func integer: <b>getUInt16Be</b> (inout file: inFile)</a></li>
</ul>
<h3>getUInt16Le</h3>
<ul>
<li><a href="libraries/bytedata.htm#getUInt16Le(inout_file)">const func integer: <b>getUInt16Le</b> (inout file: inFile)</a></li>
</ul>
<h3>getUInt32Be</h3>
<ul>
<li><a href="libraries/bytedata.htm#getUInt32Be(inout_file)">const func integer: <b>getUInt32Be</b> (inout file: inFile)</a></li>
</ul>
<h3>getUInt32Le</h3>
<ul>
<li><a href="libraries/bytedata.htm#getUInt32Le(inout_file)">const func integer: <b>getUInt32Le</b> (inout file: inFile)</a></li>
</ul>
<h3>getUnixCommandParameter</h3>
<ul>
<li><a href="libraries/cli_cmds.htm#getUnixCommandParameter(inout_string)">const func string: <b>getUnixCommandParameter</b> (inout string: parameters)</a></li>
</ul>
<h3>getWhiteSpace</h3>
<ul>
<li><a href="libraries/scanfile.htm#getWhiteSpace(inout_file)">const func string: <b>getWhiteSpace</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getWhiteSpace(inout_string)">const func string: <b>getWhiteSpace</b> (inout string: stri)</a></li>
</ul>
<h3>getWord</h3>
<ul>
<li><a href="libraries/scanfile.htm#getWord(inout_file)">const func string: <b>getWord</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getWord(inout_string)">const func string: <b>getWord</b> (inout string: stri)</a></li>
</ul>
<h3>getX509Cert</h3>
<ul>
<li><a href="libraries/x509cert.htm#getX509Cert(in_string)">const func x509Cert: <b>getX509Cert</b> (in string: asn1)</a></li>
</ul>
<h3>getXmlCdataContent</h3>
<ul>
<li><a href="libraries/scanfile.htm#getXmlCdataContent(inout_file)">const func string: <b>getXmlCdataContent</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getXmlCdataContent(inout_string)">const func string: <b>getXmlCdataContent</b> (inout string: stri)</a></li>
</ul>
<h3>getXmlCharacterReference</h3>
<ul>
<li><a href="libraries/scanfile.htm#getXmlCharacterReference(inout_file)">const func string: <b>getXmlCharacterReference</b> (inout file: inFile)</a></li>
</ul>
<h3>getXmlTagHeadOrContent</h3>
<ul>
<li><a href="libraries/scanfile.htm#getXmlTagHeadOrContent(inout_file)">const func string: <b>getXmlTagHeadOrContent</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getXmlTagHeadOrContent(inout_string)">const func string: <b>getXmlTagHeadOrContent</b> (inout string: stri)</a></li>
</ul>
<h3>getXmlTagOrContent</h3>
<ul>
<li><a href="libraries/scanfile.htm#getXmlTagOrContent(inout_file)">const func string: <b>getXmlTagOrContent</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#getXmlTagOrContent(inout_string)">const func string: <b>getXmlTagOrContent</b> (inout string: stri)</a></li>
</ul>
<h3>getYears</h3>
<ul>
<li><a href="libraries/duration.htm#getYears(in_duration)">const func integer: <b>getYears</b> (in duration: aDuration)</a></li>
</ul>
<h3>getc</h3>
<ul>
<li><a href="libraries/clib_file.htm#getc(in_clib_file)">const func char: <b>getc</b> (in clib_file: inFile)</a></li>
<li><a href="libraries/echo.htm#getc(inout_echoFile)">const func char: <b>getc</b> (inout echoFile: inFile)</a></li>
<li><a href="libraries/editline.htm#getc(inout_editLineFile)">const func char: <b>getc</b> (inout editLineFile: inEditLine)</a></li>
<li><a href="libraries/external_file.htm#getc(in_external_file)">const func char: <b>getc</b> (in external_file: inFile)</a></li>
<li><a href="libraries/file.htm#getc(inout_file)">const func char: <b>getc</b> (inout file: inFile)</a></li>
<li><a href="libraries/gzip.htm#getc(inout_gzipFile)">const func char: <b>getc</b> (inout gzipFile: inFile)</a></li>
<li><a href="libraries/iobuffer.htm#getc(inout_bufferFile)">const func char: <b>getc</b> (inout bufferFile: inBufferFile)</a></li>
<li><a href="libraries/keybd.htm#getc(in_console_keybd_file)">const func char: <b>getc</b> (in console_keybd_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#getc(in_graph_keybd_file)">const func char: <b>getc</b> (in graph_keybd_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#getc(inout_file,NO_WAIT)">const func char: <b>getc</b> (inout file: inFile, NO_WAIT)</a></li>
<li><a href="libraries/line.htm#getc(inout_lineFile)">const func char: <b>getc</b> (inout lineFile: inFile)</a></li>
<li><a href="libraries/lzma.htm#getc(inout_lzmaFile)">const func char: <b>getc</b> (inout lzmaFile: inFile)</a></li>
<li><a href="libraries/null_file.htm#getc(inout_null_file)">const func char: <b>getc</b> (inout null_file: inFile)</a></li>
<li><a href="libraries/socket.htm#getc(inout_socket)">const func char: <b>getc</b> (inout socket: inSocket)</a></li>
<li><a href="libraries/strifile.htm#getc(inout_striFile)">const func char: <b>getc</b> (inout striFile: inStriFile)</a></li>
<li><a href="libraries/stritext.htm#getc(inout_striText)">const func char: <b>getc</b> (inout striText: inStriText)</a></li>
<li><a href="libraries/subfile.htm#getc(inout_subFile)">const func char: <b>getc</b> (inout subFile: inSubFile)</a></li>
<li><a href="libraries/utf8.htm#getc(in_utf8File)">const func char: <b>getc</b> (in utf8File: inFile)</a></li>
<li><a href="libraries/xz.htm#getc(inout_xzFile)">const func char: <b>getc</b> (inout xzFile: inFile)</a></li>
<li><a href="libraries/zstd.htm#getc(inout_zstdFile)">const func char: <b>getc</b> (inout zstdFile: inFile)</a></li>
</ul>
<h3>getcwd</h3>
<ul>
<li><a href="manual/os.htm#getcwd">getcwd</a></li>
<li><a href="libraries/filesys.htm#getcwd(inout_fileSys)">const func string: <b>getcwd</b> (inout fileSys: fileSystem)</a></li>
<li><a href="libraries/ftp.htm#getcwd(inout_ftpConnection)">const func string: <b>getcwd</b> (inout ftpConnection: ftp)</a></li>
<li><a href="libraries/osfiles.htm#getcwd">const func string: <b>getcwd</b></a></li>
</ul>
<h3>getenv</h3>
<ul>
<li><a href="manual/os.htm#getenv">getenv</a></li>
<li><a href="libraries/environment.htm#getenv(in_string)">const func string: <b>getenv</b> (in string: name)</a></li>
</ul>
<h3>getf</h3>
<ul>
<li><a href="libraries/getf.htm#getf(in_string)">const func string: <b>getf</b> (in string: file_name)</a></li>
</ul>
<h3>getf.s7i</h3>
<ul>
<li><a href="libraries/getf.htm">getf.s7i</a></li>
</ul>
<h3>gethttp.s7i</h3>
<ul>
<li><a href="libraries/gethttp.htm">gethttp.s7i</a></li>
</ul>
<h3>gethttps.s7i</h3>
<ul>
<li><a href="libraries/gethttps.htm">gethttps.s7i</a></li>
</ul>
<h3>getln</h3>
<ul>
<li><a href="libraries/dir.htm#getln(inout_dirFile)">const func string: <b>getln</b> (inout dirFile: aFile)</a></li>
<li><a href="libraries/editline.htm#getln(inout_editLineFile)">const func string: <b>getln</b> (inout editLineFile: inEditLine)</a></li>
<li><a href="libraries/external_file.htm#getln(inout_external_file)">const func string: <b>getln</b> (inout external_file: inFile)</a></li>
<li><a href="libraries/file.htm#getln(inout_file)">const func string: <b>getln</b> (inout file: inFile)</a></li>
<li><a href="libraries/keybd.htm#getln(inout_console_keybd_file)">const func string: <b>getln</b> (inout console_keybd_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#getln(inout_graph_keybd_file)">const func string: <b>getln</b> (inout graph_keybd_file: keybd)</a></li>
<li><a href="libraries/line.htm#getln(inout_lineFile)">const func string: <b>getln</b> (inout lineFile: inFile)</a></li>
<li><a href="libraries/null_file.htm#getln(inout_null_file)">const func string: <b>getln</b> (inout null_file: inFile)</a></li>
<li><a href="libraries/socket.htm#getln(inout_socket)">const func string: <b>getln</b> (inout socket: inSocket)</a></li>
<li><a href="libraries/strifile.htm#getln(inout_striFile)">const func string: <b>getln</b> (inout striFile: inStriFile)</a></li>
<li><a href="libraries/stritext.htm#getln(inout_striText)">const func string: <b>getln</b> (inout striText: inStriText)</a></li>
<li><a href="libraries/tls.htm#getln(inout_tlsFile)">const func string: <b>getln</b> (inout tlsFile: inFile)</a></li>
<li><a href="libraries/utf8.htm#getln(inout_utf8File)">const func string: <b>getln</b> (inout utf8File: inFile)</a></li>
</ul>
<h3>gets</h3>
<ul>
<li><a href="libraries/bitdata.htm#gets(inout_lsbBitStream,in_integer)">const func string: <b>gets</b> (inout lsbBitStream: inBitStream, in integer: maxLength)</a></li>
<li><a href="libraries/bitdata.htm#gets(inout_msbBitStream,in_integer)">const func string: <b>gets</b> (inout msbBitStream: inBitStream, in integer: maxLength)</a></li>
<li><a href="libraries/clib_file.htm#gets(in_clib_file,in_integer)">const func string: <b>gets</b> (in clib_file: inFile,
                         in integer: maxLength)</a></li>
<li><a href="libraries/echo.htm#gets(inout_echoFile,in_integer)">const func string: <b>gets</b> (inout echoFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/editline.htm#gets(inout_editLineFile,in_integer)">const func string: <b>gets</b> (inout editLineFile: inEditLine, in integer: maxLength)</a></li>
<li><a href="libraries/external_file.htm#gets(in_external_file,in_integer)">const func string: <b>gets</b> (in external_file: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/file.htm#gets(inout_file,in_integer)">const func string: <b>gets</b> (inout file: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/gzip.htm#gets(inout_gzipFile,in_integer)">const func string: <b>gets</b> (inout gzipFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/iobuffer.htm#gets(inout_bufferFile,in_integer)">const func string: <b>gets</b> (inout bufferFile: inBufferFile, in integer: maxLength)</a></li>
<li><a href="libraries/keybd.htm#gets(in_console_keybd_file,in_integer)">const func string: <b>gets</b> (in console_keybd_file: keybd, in integer: maxLength)</a></li>
<li><a href="libraries/keybd.htm#gets(in_graph_keybd_file,in_integer)">const func string: <b>gets</b> (in graph_keybd_file: keybd, in integer: maxLength)</a></li>
<li><a href="libraries/line.htm#gets(inout_lineFile,in_integer)">const func string: <b>gets</b> (inout lineFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/lower.htm#gets(inout_lowerFile,in_integer)">const func string: <b>gets</b> (inout lowerFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/lzma.htm#gets(inout_lzmaFile,in_integer)">const func string: <b>gets</b> (inout lzmaFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/null_file.htm#gets(in_null_file,in_integer)">const func string: <b>gets</b> (in null_file: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/socket.htm#gets(inout_socket,in_integer)">const func string: <b>gets</b> (inout socket: inSocket, in integer: maxLength)</a></li>
<li><a href="libraries/strifile.htm#gets(inout_striFile,in_integer)">const func string: <b>gets</b> (inout striFile: inStriFile, in integer: maxLength)</a></li>
<li><a href="libraries/stritext.htm#gets(inout_striText,in_var_integer)">const func string: <b>gets</b> (inout striText: inStriText, in var integer: maxLength)</a></li>
<li><a href="libraries/subfile.htm#gets(inout_subFile,in_integer)">const func string: <b>gets</b> (inout subFile: inSubFile, in integer: maxLength)</a></li>
<li><a href="libraries/tls.htm#gets(inout_tlsFile,in_integer)">const func string: <b>gets</b> (inout tlsFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/upper.htm#gets(inout_upperFile,in_integer)">const func string: <b>gets</b> (inout upperFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/utf16.htm#gets(in_utf16leFile,in_integer)">const func string: <b>gets</b> (in utf16leFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/utf16.htm#gets(in_utf16beFile,in_integer)">const func string: <b>gets</b> (in utf16beFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/utf8.htm#gets(in_utf8File,in_integer)">const func string: <b>gets</b> (in utf8File: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/xz.htm#gets(inout_xzFile,in_integer)">const func string: <b>gets</b> (inout xzFile: inFile, in integer: maxLength)</a></li>
<li><a href="libraries/zstd.htm#gets(inout_zstdFile,in_integer)">const func string: <b>gets</b> (inout zstdFile: inFile, in integer: maxLength)</a></li>
</ul>
<h3>getwd</h3>
<ul>
<li><a href="libraries/dir.htm#getwd(inout_dirFile)">const func string: <b>getwd</b> (inout dirFile: aFile)</a></li>
<li><a href="libraries/external_file.htm#getwd(inout_external_file)">const func string: <b>getwd</b> (inout external_file: inFile)</a></li>
<li><a href="libraries/file.htm#getwd(inout_file)">const func string: <b>getwd</b> (inout file: inFile)</a></li>
<li><a href="libraries/keybd.htm#getwd(inout_console_keybd_file)">const func string: <b>getwd</b> (inout console_keybd_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#getwd(inout_graph_keybd_file)">const func string: <b>getwd</b> (inout graph_keybd_file: keybd)</a></li>
<li><a href="libraries/null_file.htm#getwd(inout_null_file)">const func string: <b>getwd</b> (inout null_file: inFile)</a></li>
<li><a href="libraries/socket.htm#getwd(inout_socket)">const func string: <b>getwd</b> (inout socket: inSocket)</a></li>
<li><a href="libraries/strifile.htm#getwd(inout_striFile)">const func string: <b>getwd</b> (inout striFile: inStriFile)</a></li>
<li><a href="libraries/utf8.htm#getwd(inout_utf8File)">const func string: <b>getwd</b> (inout utf8File: inFile)</a></li>
</ul>
<h3>gif.s7i</h3>
<ul>
<li><a href="libraries/gif.htm">gif.s7i</a></li>
</ul>
<h3>gkbd.sd7</h3>
<ul>
<li><a href="scrshots/gkbd.htm">Graphic keybord test</a></li>
</ul>
<h3>globalObjects</h3>
<ul>
<li><a href="libraries/progs.htm#globalObjects(in_program)">const func ref_list: <b>globalObjects</b> (in program: aProgram)</a></li>
</ul>
<h3>graph.s7i</h3>
<ul>
<li><a href="libraries/graph.htm">graph.s7i</a></li>
</ul>
<h3>graph_file</h3>
<ul>
<li><a href="libraries/graph_file.htm#graph_file">const type: <b>graph_file</b></a></li>
</ul>
<h3>graph_file.s7i</h3>
<ul>
<li><a href="libraries/graph_file.htm">graph_file.s7i</a></li>
</ul>
<h3>gray</h3>
<ul>
<li><a href="libraries/color.htm#gray(in_integer)">const func color: <b>gray</b> (in integer: brightness)</a></li>
</ul>
<h3>gunzip</h3>
<ul>
<li><a href="libraries/gzip.htm#gunzip(in_string)">const func string: <b>gunzip</b> (in string: compressed)</a></li>
</ul>
<h3>gzip</h3>
<ul>
<li><a href="libraries/gzip.htm#gzip(in_string)">const func string: <b>gzip</b> (in string: uncompressed)</a></li>
</ul>
<h3>gzip.s7i</h3>
<ul>
<li><a href="libraries/gzip.htm">gzip.s7i</a></li>
</ul>
<h3>gzipFile</h3>
<ul>
<li><a href="libraries/gzip.htm#gzipFile">const type: <b>gzipFile</b></a></li>
</ul>
<h3>gzipWriteFile</h3>
<ul>
<li><a href="libraries/gzip.htm#gzipWriteFile">const type: <b>gzipWriteFile</b></a></li>
</ul>
<h3>gzuncompress</h3>
<ul>
<li><a href="libraries/gzip.htm#gzuncompress(in_string)">const func string: <b>gzuncompress</b> (in string: compressed)</a></li>
</ul>
<h3>hasImageExtension</h3>
<ul>
<li><a href="libraries/imagefile.htm#hasImageExtension(in_var_string)">const func boolean: <b>hasImageExtension</b> (in var string: fileName)</a></li>
</ul>
<h3>hasNext</h3>
<ul>
<li><a href="libraries/clib_file.htm#hasNext(in_clib_file)">const func boolean: <b>hasNext</b> (in clib_file: inFile)</a></li>
<li><a href="libraries/dir.htm#hasNext(in_dirFile)">const func boolean: <b>hasNext</b> (in dirFile: aFile)</a></li>
<li><a href="libraries/editline.htm#hasNext(in_editLineFile)">const func boolean: <b>hasNext</b> (in editLineFile: inEditLine)</a></li>
<li><a href="libraries/external_file.htm#hasNext(in_external_file)">const func boolean: <b>hasNext</b> (in external_file: inFile)</a></li>
<li><a href="libraries/file.htm#hasNext(inout_file)">const func boolean: <b>hasNext</b> (inout file: inFile)</a></li>
<li><a href="libraries/gzip.htm#hasNext(inout_gzipFile)">const func boolean: <b>hasNext</b> (inout gzipFile: inFile)</a></li>
<li><a href="libraries/iobuffer.htm#hasNext(inout_bufferFile)">const func boolean: <b>hasNext</b> (inout bufferFile: inBufferFile)</a></li>
<li><a href="libraries/lzma.htm#hasNext(inout_lzmaFile)">const func boolean: <b>hasNext</b> (inout lzmaFile: inFile)</a></li>
<li><a href="libraries/null_file.htm#hasNext(in_null_file)">const boolean: <b>hasNext</b> (in null_file: inFile)</a></li>
<li><a href="libraries/poll.htm#hasNext(inout_pollData)">const func boolean: <b>hasNext</b> (inout pollData: pData)</a></li>
<li><a href="libraries/socket.htm#hasNext(in_socket)">const func boolean: <b>hasNext</b> (in socket: inSocket)</a></li>
<li><a href="libraries/strifile.htm#hasNext(in_striFile)">const func boolean: <b>hasNext</b> (in striFile: inStriFile)</a></li>
<li><a href="libraries/stritext.htm#hasNext(in_striText)">const func boolean: <b>hasNext</b> (in striText: inStriText)</a></li>
<li><a href="libraries/subfile.htm#hasNext(in_subFile)">const func boolean: <b>hasNext</b> (in subFile: inSubFile)</a></li>
<li><a href="libraries/utf16.htm#hasNext(in_utf16File)">const func boolean: <b>hasNext</b> (in utf16File: inFile)</a></li>
<li><a href="libraries/xz.htm#hasNext(inout_xzFile)">const func boolean: <b>hasNext</b> (inout xzFile: inFile)</a></li>
<li><a href="libraries/zstd.htm#hasNext(inout_zstdFile)">const func boolean: <b>hasNext</b> (inout zstdFile: inFile)</a></li>
</ul>
<h3>hash</h3>
<ul>
<li><a href="manual/types.htm#hash">hash</a></li>
</ul>
<h3>hash [</h3>
<ul>
<li><a href="libraries/hash.htm#hash_[(in_type)](in_type)">const func type: <b>hash [</b> (in type: keyType) ] (in type: baseType)</a></li>
</ul>
<h3>hash.s7i</h3>
<ul>
<li><a href="libraries/hash.htm">hash.s7i</a></li>
</ul>
<h3>hashCode</h3>
<ul>
<li><a href="libraries/bigint.htm#hashCode(in_bigInteger)">const func integer: <b>hashCode</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigrat.htm#hashCode(in_bigRational)">const func integer: <b>hashCode</b> (in bigRational: number)</a></li>
<li><a href="libraries/bin32.htm#hashCode(in_bin32)">const func integer: <b>hashCode</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#hashCode(in_bin64)">const func integer: <b>hashCode</b> (in bin64: bits)</a></li>
<li><a href="libraries/bitset.htm#hashCode(in_bitset)">const func integer: <b>hashCode</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#hashCode(in_setType)">const func integer: <b>hashCode</b> (in setType: aSet)</a></li>
<li><a href="libraries/boolean.htm#hashCode(in_boolean)">const func integer: <b>hashCode</b> (in boolean: aBoolean)</a></li>
<li><a href="libraries/bstring.htm#hashCode(in_bstring)">const func integer: <b>hashCode</b> (in bstring: bstri)</a></li>
<li><a href="libraries/char.htm#hashCode(in_char)">const func integer: <b>hashCode</b> (in char: ch)</a></li>
<li><a href="libraries/color.htm#hashCode(in_color)">const func integer: <b>hashCode</b> (in color: col)</a></li>
<li><a href="libraries/complex.htm#hashCode(in_complex)">const func integer: <b>hashCode</b> (in complex: num)</a></li>
<li><a href="libraries/duration.htm#hashCode(in_duration)">const func integer: <b>hashCode</b> (in duration: aDuration)</a></li>
<li><a href="libraries/enumeration.htm#hashCode(in_enumType)">const func integer: <b>hashCode</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/file.htm#hashCode(in_file)">const func integer: <b>hashCode</b> (in file: aFile)</a></li>
<li><a href="libraries/float.htm#hashCode(in_float)">const func integer: <b>hashCode</b> (in float: number)</a></li>
<li><a href="libraries/font.htm#hashCode(in_font)">const func integer: <b>hashCode</b> (in font: aFont)</a></li>
<li><a href="libraries/integer.htm#hashCode(in_integer)">const func integer: <b>hashCode</b> (in integer: number)</a></li>
<li><a href="libraries/process.htm#hashCode(in_process)">const func integer: <b>hashCode</b> (in process: aProcess)</a></li>
<li><a href="libraries/rational.htm#hashCode(in_rational)">const func integer: <b>hashCode</b> (in rational: number)</a></li>
<li><a href="libraries/reference.htm#hashCode(in_reference)">const func integer: <b>hashCode</b> (in reference: aReference)</a></li>
<li><a href="libraries/sockbase.htm#hashCode(in_socketAddress)">const func integer: <b>hashCode</b> (in socketAddress: address)</a></li>
<li><a href="libraries/string.htm#hashCode(in_string)">const func integer: <b>hashCode</b> (in string: stri)</a></li>
<li><a href="libraries/time.htm#hashCode(in_time)">const func integer: <b>hashCode</b> (in time: aTime)</a></li>
<li><a href="libraries/vector3d.htm#hashCode(in_vector3d)">const func integer: <b>hashCode</b> (in vector3d: vect)</a></li>
</ul>
<h3>hashset</h3>
<ul>
<li><a href="libraries/hashsetof.htm#hashset(in_type)">const func type: <b>hashset</b> (in type: baseType)</a></li>
</ul>
<h3>hashsetof.s7i</h3>
<ul>
<li><a href="libraries/hashsetof.htm">hashsetof.s7i</a></li>
</ul>
<h3>header</h3>
<ul>
<li><a href="libraries/cgidialog.htm#header(in_integer,in_string)">const func header: <b>header</b> (in integer: level, in string: name)</a></li>
</ul>
<h3>height</h3>
<ul>
<li><a href="libraries/console.htm#height(in_console_file)">const func integer: <b>height</b> (in console_file: aConsoleFile)</a></li>
<li><a href="libraries/graph.htm#height(in_PRIMITIVE_WINDOW)">const func integer: <b>height</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
<li><a href="libraries/graph_file.htm#height(in_graph_file)">const func integer: <b>height</b> (in graph_file: aGraphFile)</a></li>
<li><a href="libraries/image.htm#height(in_image)">const func integer: <b>height</b> (in image: anImage)</a></li>
<li><a href="libraries/pixmap_file.htm#height(in_pixmapFontFile)">const func integer: <b>height</b> (in pixmapFontFile: fontFile)</a></li>
<li><a href="libraries/stritext.htm#height(in_striText)">const func integer: <b>height</b> (in striText: aStriText)</a></li>
<li><a href="libraries/text.htm#height(in_text)">const func integer: <b>height</b> (in text: aText)</a></li>
<li><a href="libraries/window.htm#height(in_window_file)">const func integer: <b>height</b> (in window_file: outText)</a></li>
</ul>
<h3>hex</h3>
<ul>
<li><a href="libraries/bytedata.htm#hex(in_string)">const func string: <b>hex</b> (in string: stri)</a></li>
</ul>
<h3>hex2Bytes</h3>
<ul>
<li><a href="libraries/bytedata.htm#hex2Bytes(in_string)">const func string: <b>hex2Bytes</b> (in string: hex)</a></li>
</ul>
<h3>hmac</h3>
<ul>
<li><a href="libraries/hmac.htm#hmac(in_digestAlgorithm,in_var_string,in_string)">const func string: <b>hmac</b> (in digestAlgorithm: digestAlg, in var string: cryptoKey,
    in string: message)</a></li>
</ul>
<h3>hmac.s7i</h3>
<ul>
<li><a href="libraries/hmac.htm">hmac.s7i</a></li>
</ul>
<h3>homeDir</h3>
<ul>
<li><a href="manual/os.htm#homeDir">homeDir</a></li>
<li><a href="libraries/osfiles.htm#homeDir">const func string: <b>homeDir</b></a></li>
</ul>
<h3>html.s7i</h3>
<ul>
<li><a href="libraries/html.htm">html.s7i</a></li>
</ul>
<h3>htmlDocument</h3>
<ul>
<li><a href="libraries/htmldom.htm#htmlDocument">const type: <b>htmlDocument</b></a></li>
</ul>
<h3>html_ent.s7i</h3>
<ul>
<li><a href="libraries/html_ent.htm">html_ent.s7i</a></li>
</ul>
<h3>htmldom.s7i</h3>
<ul>
<li><a href="libraries/htmldom.htm">htmldom.s7i</a></li>
</ul>
<h3>httpRequest</h3>
<ul>
<li><a href="libraries/httpserv.htm#httpRequest">const type: <b>httpRequest</b></a></li>
</ul>
<h3>httpResposeData</h3>
<ul>
<li><a href="libraries/http_response.htm#httpResposeData">const type: <b>httpResposeData</b></a></li>
<li><a href="libraries/http_response.htm#httpResposeData(in_string,in_string,in_string,inout_fileSys)">const func httpResposeData: <b>httpResposeData</b> (in string: htdocs, in string: cgiDir,
    in string: cgiName, inout fileSys: backendSys)</a></li>
</ul>
<h3>httpServer</h3>
<ul>
<li><a href="libraries/httpserv.htm#httpServer">const type: <b>httpServer</b></a></li>
</ul>
<h3>httpServerConnection</h3>
<ul>
<li><a href="libraries/httpserv.htm#httpServerConnection">const type: <b>httpServerConnection</b></a></li>
</ul>
<h3>http_response.s7i</h3>
<ul>
<li><a href="libraries/http_response.htm">http_response.s7i</a></li>
</ul>
<h3>httpserv.s7i</h3>
<ul>
<li><a href="libraries/httpserv.htm">httpserv.s7i</a></li>
</ul>
<h3>huffman.s7i</h3>
<ul>
<li><a href="libraries/huffman.htm">huffman.s7i</a></li>
</ul>
<h3>ico.s7i</h3>
<ul>
<li><a href="libraries/ico.htm">ico.s7i</a></li>
</ul>
<h3>ide7.sd7</h3>
<ul>
<li><a href="scrshots/ide7.htm">Editor with browser interface</a></li>
</ul>
<h3>idxarray.s7i</h3>
<ul>
<li><a href="libraries/idxarray.htm">idxarray.s7i</a></li>
</ul>
<h3>if-statement</h3>
<ul>
<li><a href="manual/stats.htm#if-statement">if-statement</a></li>
</ul>
<h3>image</h3>
<ul>
<li><a href="libraries/cgidialog.htm#image(in_PRIMITIVE_WINDOW)">const func image: <b>image</b> (in PRIMITIVE_WINDOW: pixmap)</a></li>
<li><a href="libraries/image.htm#image">const type: <b>image</b></a></li>
</ul>
<h3>image.s7i</h3>
<ul>
<li><a href="libraries/image.htm">image.s7i</a></li>
</ul>
<h3>imagefile.s7i</h3>
<ul>
<li><a href="libraries/imagefile.htm">imagefile.s7i</a></li>
</ul>
<h3>in</h3>
<ul>
<li><a href="libraries/bitset.htm#(in_integer)in(in_bitset)">const func boolean: (in integer: number) <b>in</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#(in_baseType)in(in_setType)">const func boolean: (in baseType: aValue) <b>in</b> (in setType: aSet)</a></li>
<li><a href="libraries/hash.htm#(in_keyType)in(in_hashType)">const func boolean: (in keyType: aKey) <b>in</b> (in hashType: aHashMap)</a></li>
<li><a href="libraries/hashsetof.htm#(in_baseType)in(in_setType)">const func boolean: (in baseType: aValue) <b>in</b> (in setType: aSet)</a></li>
<li><a href="libraries/ref_list.htm#(in_reference)in(in_ref_list)">const func boolean: (in reference: element) <b>in</b> (in ref_list: aRefList)</a></li>
</ul>
<h3>incl</h3>
<ul>
<li><a href="libraries/bitset.htm#incl(inout_bitset,in_integer)">const proc: <b>incl</b> (inout bitset: aSet, in integer: number)</a></li>
<li><a href="libraries/bitsetof.htm#incl(inout_setType,in_baseType)">const proc: <b>incl</b> (inout setType: aSet, in baseType: aValue)</a></li>
<li><a href="libraries/hash.htm#incl(inout_hashType,in_keyType,in_baseType)">const proc: <b>incl</b> (inout hashType: aHashMap, in keyType: aKey, in baseType: anElem)</a></li>
<li><a href="libraries/hashsetof.htm#incl(inout_setType,in_baseType)">const proc: <b>incl</b> (inout setType: aSet, in baseType: aValue)</a></li>
</ul>
<h3>incr</h3>
<ul>
<li><a href="libraries/bigint.htm#incr(inout_bigInteger)">const proc: <b>incr</b> (inout bigInteger: number)</a></li>
<li><a href="libraries/boolean.htm#incr(inout_boolean)">const proc: <b>incr</b> (inout boolean: boolValue)</a></li>
<li><a href="libraries/char.htm#incr(inout_char)">const proc: <b>incr</b> (inout char: ch)</a></li>
<li><a href="libraries/enumeration.htm#incr(inout_enumType)">const proc: <b>incr</b> (inout enumType: enumValue)</a></li>
<li><a href="libraries/integer.htm#incr(inout_integer)">const proc: <b>incr</b> (inout integer: number)</a></li>
</ul>
<h3>inetListenerAddress</h3>
<ul>
<li><a href="libraries/sockbase.htm#inetListenerAddress(in_integer)">const func socketAddress: <b>inetListenerAddress</b> (in integer: port)</a></li>
</ul>
<h3>inetSocketAddress</h3>
<ul>
<li><a href="libraries/sockbase.htm#inetSocketAddress(in_string,in_integer)">const func socketAddress: <b>inetSocketAddress</b> (in string: hostName,
                                             in integer: port)</a></li>
<li><a href="libraries/sockbase.htm#inetSocketAddress(in_integer)">const func socketAddress: <b>inetSocketAddress</b> (in integer: port)</a></li>
</ul>
<h3>inflate</h3>
<ul>
<li><a href="libraries/inflate.htm#inflate(inout_file)">const func string: <b>inflate</b> (inout file: compressed)</a></li>
<li><a href="libraries/inflate.htm#inflate(in_string)">const func string: <b>inflate</b> (in string: compressed)</a></li>
</ul>
<h3>inflate.s7i</h3>
<ul>
<li><a href="libraries/inflate.htm">inflate.s7i</a></li>
</ul>
<h3>inifile.s7i</h3>
<ul>
<li><a href="libraries/inifile.htm">inifile.s7i</a></li>
</ul>
<h3>initAead</h3>
<ul>
<li><a href="libraries/aes_gcm.htm#initAead(inout_aesGcmState,in_string,in_integer)">const proc: <b>initAead</b> (inout aesGcmState: state, in string: recordTypeAndVersion,
    in integer: sequenceNumber)</a></li>
<li><a href="libraries/cipher.htm#initAead(inout_cipherState,in_string,in_integer)">const proc: <b>initAead</b> (inout cipherState: state, in string: recordTypeAndVersion,
    in integer: sequenceNumber)</a></li>
</ul>
<h3>inputReady</h3>
<ul>
<li><a href="libraries/clib_file.htm#inputReady(in_clib_file)">const func boolean: <b>inputReady</b> (in clib_file: inFile)</a></li>
<li><a href="libraries/external_file.htm#inputReady(in_external_file)">const func boolean: <b>inputReady</b> (in external_file: inFile)</a></li>
<li><a href="libraries/file.htm#inputReady(in_file)">const func boolean: <b>inputReady</b> (in file: inFile)</a></li>
<li><a href="libraries/keybd.htm#inputReady(in_console_keybd_file)">const func boolean: <b>inputReady</b> (in console_keybd_file: keybd)</a></li>
<li><a href="libraries/keybd.htm#inputReady(in_graph_keybd_file)">const func boolean: <b>inputReady</b> (in graph_keybd_file: keybd)</a></li>
</ul>
<h3>insert</h3>
<ul>
<li><a href="libraries/array.htm#insert(inout_arrayType,in_integer,in_baseType)">const proc: <b>insert</b> (inout arrayType: arr, in integer: index,
                          in baseType: element)</a></li>
<li><a href="libraries/array.htm#insert(inout_arrayType,in_integer,in_arrayType)">const proc: <b>insert</b> (inout arrayType: arr, in integer: index,
                          in arrayType: elements)</a></li>
</ul>
<h3>insertArea</h3>
<ul>
<li><a href="libraries/fileutil.htm#insertArea(inout_file,in_integer,in_integer)">const proc: <b>insertArea</b> (inout file: aFile, in integer: insertPos, in integer: numChars)</a></li>
</ul>
<h3>int2Octets</h3>
<ul>
<li><a href="libraries/pkcs1.htm#int2Octets(in_bigInteger,in_integer)">const func string: <b>int2Octets</b> (in bigInteger: number, in integer: length)</a></li>
</ul>
<h3>int64Type</h3>
<ul>
<li><a href="libraries/db_prop.htm#int64Type(in_dbCategory)">const func string: <b>int64Type</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>int8Type</h3>
<ul>
<li><a href="libraries/db_prop.htm#int8Type(in_dbCategory)">const func string: <b>int8Type</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>integer</h3>
<ul>
<li><a href="manual/types.htm#integer">integer</a></li>
<li><a href="libraries/bigint.htm#integer(in_bigInteger)">const func integer: <b>integer</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bin32.htm#integer(in_bin32)">const func integer: <b>integer</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#integer(in_bin64)">const func integer: <b>integer</b> (in bin64: bits)</a></li>
<li><a href="libraries/bitset.htm#integer(in_bitset)">const func integer: <b>integer</b> (in bitset: aSet)</a></li>
<li><a href="libraries/boolean.htm#integer(in_boolean)">const func integer: <b>integer</b> (in boolean: boolValue)</a></li>
<li><a href="libraries/char.htm#integer(in_char)">const func integer: <b>integer</b> (in char: ch)</a></li>
<li><a href="libraries/enumeration.htm#integer(in_enumType)">const func integer: <b>integer</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/integer.htm#integer(in_string)">const func integer: <b>integer</b> (in string: stri)</a></li>
<li><a href="libraries/integer.htm#integer(in_string,in_integer)">const func integer: <b>integer</b> (in string: stri, in integer: base)</a></li>
</ul>
<h3>integer.s7i</h3>
<ul>
<li><a href="libraries/integer.htm">integer.s7i</a></li>
</ul>
<h3>iobuffer.s7i</h3>
<ul>
<li><a href="libraries/iobuffer.htm">iobuffer.s7i</a></li>
</ul>
<h3>isAlive</h3>
<ul>
<li><a href="libraries/process.htm#isAlive(in_process)">const func boolean: <b>isAlive</b> (in process: process1)</a></li>
</ul>
<h3>isLeapYear</h3>
<ul>
<li><a href="libraries/time.htm#isLeapYear(in_integer)">const func boolean: <b>isLeapYear</b> (in integer: year)</a></li>
</ul>
<h3>isLetter</h3>
<ul>
<li><a href="libraries/char.htm#isLetter(in_char)">const func boolean: <b>isLetter</b> (in char: ch)</a></li>
</ul>
<h3>isNaN</h3>
<ul>
<li><a href="libraries/float.htm#isNaN(in_float)">const func boolean: <b>isNaN</b> (in float: number)</a></li>
</ul>
<h3>isNegativeZero</h3>
<ul>
<li><a href="libraries/float.htm#isNegativeZero(in_float)">const func boolean: <b>isNegativeZero</b> (in float: number)</a></li>
</ul>
<h3>isNull</h3>
<ul>
<li><a href="libraries/sql_base.htm#isNull(in_sqlStatement,in_integer)">const func boolean: <b>isNull</b> (in sqlStatement: statement, in integer: column)</a></li>
</ul>
<h3>isOkay</h3>
<ul>
<li><a href="libraries/dialog.htm#isOkay(in_array_string)">const func boolean: <b>isOkay</b> (in array string: messageText)</a></li>
<li><a href="libraries/dialog.htm#isOkay(in_string)">const func boolean: <b>isOkay</b> (in string: messageText)</a></li>
</ul>
<h3>isPositiveZero</h3>
<ul>
<li><a href="libraries/float.htm#isPositiveZero(in_float)">const func boolean: <b>isPositiveZero</b> (in float: number)</a></li>
</ul>
<h3>isTemp</h3>
<ul>
<li><a href="libraries/progs.htm#isTemp(in_reference)">const func boolean: <b>isTemp</b> (in reference: aReference)</a></li>
</ul>
<h3>isVar</h3>
<ul>
<li><a href="libraries/progs.htm#isVar(in_reference)">const func boolean: <b>isVar</b> (in reference: aReference)</a></li>
</ul>
<h3>iso_8859_1</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_1">const string: <b>iso_8859_1</b></a></li>
</ul>
<h3>iso_8859_10</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_10">const string: <b>iso_8859_10</b></a></li>
</ul>
<h3>iso_8859_11</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_11">const string: <b>iso_8859_11</b></a></li>
</ul>
<h3>iso_8859_13</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_13">const string: <b>iso_8859_13</b></a></li>
</ul>
<h3>iso_8859_14</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_14">const string: <b>iso_8859_14</b></a></li>
</ul>
<h3>iso_8859_15</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_15">const string: <b>iso_8859_15</b></a></li>
</ul>
<h3>iso_8859_16</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_16">const string: <b>iso_8859_16</b></a></li>
</ul>
<h3>iso_8859_2</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_2">const string: <b>iso_8859_2</b></a></li>
</ul>
<h3>iso_8859_3</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_3">const string: <b>iso_8859_3</b></a></li>
</ul>
<h3>iso_8859_4</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_4">const string: <b>iso_8859_4</b></a></li>
</ul>
<h3>iso_8859_5</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_5">const string: <b>iso_8859_5</b></a></li>
</ul>
<h3>iso_8859_6</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_6">const string: <b>iso_8859_6</b></a></li>
</ul>
<h3>iso_8859_7</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_7">const string: <b>iso_8859_7</b></a></li>
</ul>
<h3>iso_8859_8</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_8">const string: <b>iso_8859_8</b></a></li>
</ul>
<h3>iso_8859_9</h3>
<ul>
<li><a href="libraries/charsets.htm#iso_8859_9">const string: <b>iso_8859_9</b></a></li>
</ul>
<h3>iterChecks</h3>
<ul>
<li><a href="libraries/poll.htm#iterChecks(in_pollData,in_integer)">const proc: <b>iterChecks</b> (in pollData: pData, in integer: pollMode)</a></li>
</ul>
<h3>iterFindings</h3>
<ul>
<li><a href="libraries/poll.htm#iterFindings(in_pollData,in_integer)">const proc: <b>iterFindings</b> (in pollData: pData, in integer: pollMode)</a></li>
</ul>
<h3>jacobianPoint</h3>
<ul>
<li><a href="libraries/elliptic.htm#jacobianPoint">const type: <b>jacobianPoint</b></a></li>
</ul>
<h3>jis_x_0201</h3>
<ul>
<li><a href="libraries/charsets.htm#jis_x_0201">const string: <b>jis_x_0201</b></a></li>
</ul>
<h3>jpeg.s7i</h3>
<ul>
<li><a href="libraries/jpeg.htm">jpeg.s7i</a></li>
</ul>
<h3>julianDayNumToTime</h3>
<ul>
<li><a href="libraries/time.htm#julianDayNumToTime(in_integer)">const func time: <b>julianDayNumToTime</b> (in integer: julianDayNumber)</a></li>
</ul>
<h3>julianDayNumber</h3>
<ul>
<li><a href="libraries/time.htm#julianDayNumber(in_time)">const func integer: <b>julianDayNumber</b> (in time: aDate)</a></li>
</ul>
<h3>keyDescription</h3>
<ul>
<li><a href="libraries/keydescr.htm#keyDescription">const keyDescriptionType: <b>keyDescription</b></a></li>
</ul>
<h3>keybd.s7i</h3>
<ul>
<li><a href="libraries/keybd.htm">keybd.s7i</a></li>
</ul>
<h3>keyboard_file</h3>
<ul>
<li><a href="libraries/keybd.htm#keyboard_file">const type: <b>keyboard_file</b></a></li>
</ul>
<h3>keydescr.s7i</h3>
<ul>
<li><a href="libraries/keydescr.htm">keydescr.s7i</a></li>
</ul>
<h3>keys</h3>
<ul>
<li><a href="libraries/hash.htm#keys(in_hashType)">const func array keyType: <b>keys</b> (in hashType: aHashMap)</a></li>
</ul>
<h3>kill</h3>
<ul>
<li><a href="libraries/process.htm#kill(in_process)">const proc: <b>kill</b> (in process: aProcess)</a></li>
</ul>
<h3>klondike.sd7</h3>
<ul>
<li><a href="scrshots/klondike.htm">Klondike solitaire</a></li>
</ul>
<h3>koi8_r</h3>
<ul>
<li><a href="libraries/charsets.htm#koi8_r">const string: <b>koi8_r</b></a></li>
</ul>
<h3>koi8_u</h3>
<ul>
<li><a href="libraries/charsets.htm#koi8_u">const string: <b>koi8_u</b></a></li>
</ul>
<h3>label</h3>
<ul>
<li><a href="libraries/cgidialog.htm#label(in_string)">const func label: <b>label</b> (in string: name)</a></li>
</ul>
<h3>lander.sd7</h3>
<ul>
<li><a href="scrshots/lander.htm">Lunar lander</a></li>
</ul>
<h3>leb128</h3>
<ul>
<li><a href="libraries/leb128.htm#leb128(in_var_integer)">const func string: <b>leb128</b> (in var integer: number)</a></li>
</ul>
<h3>leb128.s7i</h3>
<ul>
<li><a href="libraries/leb128.htm">leb128.s7i</a></li>
</ul>
<h3>leb128ToInt</h3>
<ul>
<li><a href="libraries/leb128.htm#leb128ToInt(in_string,inout_integer)">const func integer: <b>leb128ToInt</b> (in string: stri, inout integer: pos)</a></li>
<li><a href="libraries/leb128.htm#leb128ToInt(in_string)">const func integer: <b>leb128ToInt</b> (in string: stri)</a></li>
</ul>
<h3>length</h3>
<ul>
<li><a href="libraries/array.htm#length(in_arrayType)">const func integer: <b>length</b> (in arrayType: arr)</a></li>
<li><a href="libraries/bstring.htm#length(in_bstring)">const func integer: <b>length</b> (in bstring: bstri)</a></li>
<li><a href="libraries/clib_file.htm#length(in_clib_file)">const func integer: <b>length</b> (in clib_file: aFile)</a></li>
<li><a href="libraries/external_file.htm#length(in_external_file)">const func integer: <b>length</b> (in external_file: aFile)</a></li>
<li><a href="libraries/file.htm#length(inout_file)">const func integer: <b>length</b> (inout file: aFile)</a></li>
<li><a href="libraries/gzip.htm#length(inout_gzipFile)">const func integer: <b>length</b> (inout gzipFile: aFile)</a></li>
<li><a href="libraries/gzip.htm#length(in_gzipWriteFile)">const func integer: <b>length</b> (in gzipWriteFile: outFile)</a></li>
<li><a href="libraries/hash.htm#length(in_hashType)">const func integer: <b>length</b> (in hashType: aHashMap)</a></li>
<li><a href="libraries/idxarray.htm#length(in_arrayType)">const func integer: <b>length</b> (in arrayType: arr)</a></li>
<li><a href="libraries/iobuffer.htm#length(inout_bufferFile)">const func integer: <b>length</b> (inout bufferFile: aBufferFile)</a></li>
<li><a href="libraries/lzma.htm#length(inout_lzmaFile)">const func integer: <b>length</b> (inout lzmaFile: aFile)</a></li>
<li><a href="libraries/null_file.htm#length(in_null_file)">const func integer: <b>length</b> (in null_file: aFile)</a></li>
<li><a href="libraries/ref_list.htm#length(in_ref_list)">const func integer: <b>length</b> (in ref_list: aRefList)</a></li>
<li><a href="libraries/strifile.htm#length(in_striFile)">const func integer: <b>length</b> (in striFile: aStriFile)</a></li>
<li><a href="libraries/string.htm#length(in_string)">const func integer: <b>length</b> (in string: stri)</a></li>
<li><a href="libraries/stritext.htm#length(in_striText)">const func integer: <b>length</b> (in striText: aStriText)</a></li>
<li><a href="libraries/subfile.htm#length(in_subFile)">const func integer: <b>length</b> (in subFile: aSubFile)</a></li>
<li><a href="libraries/utf16.htm#length(in_utf16File)">const func integer: <b>length</b> (in utf16File: aFile)</a></li>
<li><a href="libraries/xz.htm#length(inout_xzFile)">const func integer: <b>length</b> (inout xzFile: aFile)</a></li>
<li><a href="libraries/zstd.htm#length(inout_zstdFile)">const func integer: <b>length</b> (inout zstdFile: aFile)</a></li>
</ul>
<h3>line</h3>
<ul>
<li><a href="libraries/console.htm#line(in_console_file)">const func integer: <b>line</b> (in console_file: aConsoleFile)</a></li>
<li><a href="libraries/draw.htm#line(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>line</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: delta_x, in integer: delta_y, in color: col)</a></li>
<li><a href="libraries/draw.htm#line(in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>line</b> (in integer: x, in integer: y,
    in integer: delta_x, in integer: delta_y, in color: col)</a></li>
<li><a href="libraries/graph_file.htm#line(in_graph_file)">const func integer: <b>line</b> (in graph_file: aGraphFile)</a></li>
<li><a href="libraries/pixmap_file.htm#line(in_pixmapFontFile)">const func integer: <b>line</b> (in pixmapFontFile: fontFile)</a></li>
<li><a href="libraries/progs.htm#line(in_reference)">const func integer: <b>line</b> (in reference: aReference)</a></li>
<li><a href="libraries/stritext.htm#line(in_striText)">const func integer: <b>line</b> (in striText: aStriText)</a></li>
<li><a href="libraries/text.htm#line(in_text)">const func integer: <b>line</b> (in text: aText)</a></li>
<li><a href="libraries/window.htm#line(in_window_file)">const func integer: <b>line</b> (in window_file: outText)</a></li>
</ul>
<h3>line.s7i</h3>
<ul>
<li><a href="libraries/line.htm">line.s7i</a></li>
</ul>
<h3>lineFile</h3>
<ul>
<li><a href="libraries/line.htm#lineFile">const type: <b>lineFile</b></a></li>
</ul>
<h3>lineHeight</h3>
<ul>
<li><a href="libraries/font.htm#lineHeight(in_font)">const func integer: <b>lineHeight</b> (in font: aFont)</a></li>
</ul>
<h3>lineTo</h3>
<ul>
<li><a href="libraries/draw.htm#lineTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>lineTo</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</a></li>
<li><a href="libraries/draw.htm#lineTo(in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>lineTo</b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</a></li>
</ul>
<h3>lineToAngle</h3>
<ul>
<li><a href="libraries/draw.htm#lineToAngle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_color)">const proc: <b>lineToAngle</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: length, in float: angle, in color: col)</a></li>
<li><a href="libraries/draw.htm#lineToAngle(in_integer,in_integer,in_integer,in_float,in_color)">const proc: <b>lineToAngle</b> (in integer: x, in integer: y,
    in integer: length, in float: angle, in color: col)</a></li>
</ul>
<h3>line_read</h3>
<ul>
<li><a href="libraries/clib_file.htm#line_read(in_clib_file,inout_char)">const func string: <b>line_read</b> (in clib_file: inFile,
                              inout char: terminationChar)</a></li>
</ul>
<h3>listDir</h3>
<ul>
<li><a href="libraries/ftp.htm#listDir(inout_ftpConnection,in_string)">const func array string: <b>listDir</b> (inout ftpConnection: ftp, in string: dirPath)</a></li>
</ul>
<h3>listen</h3>
<ul>
<li><a href="libraries/listener.htm#listen(in_inetListener,in_integer)">const proc: <b>listen</b> (in inetListener: aListener, in integer: backlog)</a></li>
<li><a href="libraries/sockbase.htm#listen(in_PRIMITIVE_SOCKET,in_integer)">const proc: <b>listen</b> (in PRIMITIVE_SOCKET: listenerSocket,
                    in integer: backlog)</a></li>
</ul>
<h3>listener</h3>
<ul>
<li><a href="libraries/socket.htm#listener">const type: <b>listener</b></a></li>
</ul>
<h3>listener.s7i</h3>
<ul>
<li><a href="libraries/listener.htm">listener.s7i</a></li>
</ul>
<h3>literal</h3>
<ul>
<li><a href="libraries/bigint.htm#literal(in_bigInteger)">const func string: <b>literal</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigrat.htm#literal(in_bigRational)">const func string: <b>literal</b> (in bigRational: number)</a></li>
<li><a href="libraries/boolean.htm#literal(in_boolean)">const func string: <b>literal</b> (in boolean: aBool)</a></li>
<li><a href="libraries/bstring.htm#literal(in_bstring)">const func string: <b>literal</b> (in bstring: bstri)</a></li>
<li><a href="libraries/char.htm#literal(in_char)">const func string: <b>literal</b> (in char: ch)</a></li>
<li><a href="libraries/duration.htm#literal(in_duration)">const func string: <b>literal</b> (in duration: aDuration)</a></li>
<li><a href="libraries/enumeration.htm#literal(in_enumType)">const func string: <b>literal</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/float.htm#literal(in_float)">const func string: <b>literal</b> (in float: number)</a></li>
<li><a href="libraries/integer.htm#literal(in_integer)">const func string: <b>literal</b> (in integer: number)</a></li>
<li><a href="libraries/time.htm#literal(in_time)">const func string: <b>literal</b> (in time: aTime)</a></li>
</ul>
<h3>localAddress</h3>
<ul>
<li><a href="libraries/socket.htm#localAddress(in_socket)">const func socketAddress: <b>localAddress</b> (in socket: aSocket)</a></li>
</ul>
<h3>localConsts</h3>
<ul>
<li><a href="libraries/progs.htm#localConsts(in_reference)">const func ref_list: <b>localConsts</b> (in reference: funcRef)</a></li>
</ul>
<h3>localVars</h3>
<ul>
<li><a href="libraries/progs.htm#localVars(in_reference)">const func ref_list: <b>localVars</b> (in reference: funcRef)</a></li>
</ul>
<h3>log</h3>
<ul>
<li><a href="libraries/math.htm#log(in_float)">const func float: <b>log</b> (in float: x)</a></li>
</ul>
<h3>log10</h3>
<ul>
<li><a href="libraries/bigint.htm#log10(in_bigInteger)">const func bigInteger: <b>log10</b> (in bigInteger: number)</a></li>
<li><a href="libraries/integer.htm#log10(in_integer)">const func integer: <b>log10</b> (in integer: number)</a></li>
<li><a href="libraries/math.htm#log10(in_float)">const func float: <b>log10</b> (in float: x)</a></li>
</ul>
<h3>log1p</h3>
<ul>
<li><a href="libraries/math.htm#log1p(in_float)">const func float: <b>log1p</b> (in float: x)</a></li>
</ul>
<h3>log2</h3>
<ul>
<li><a href="libraries/bigint.htm#log2(in_bigInteger)">const func bigInteger: <b>log2</b> (in bigInteger: number)</a></li>
<li><a href="libraries/integer.htm#log2(in_integer)">const func integer: <b>log2</b> (in integer: number)</a></li>
<li><a href="libraries/math.htm#log2(in_float)">const func float: <b>log2</b> (in float: x)</a></li>
</ul>
<h3>logFile</h3>
<ul>
<li><a href="libraries/logfile.htm#logFile">const type: <b>logFile</b></a></li>
</ul>
<h3>logfile.s7i</h3>
<ul>
<li><a href="libraries/logfile.htm">logfile.s7i</a></li>
</ul>
<h3>login</h3>
<ul>
<li><a href="libraries/smtp.htm#login(inout_smtpConnection,in_string,in_string)">const proc: <b>login</b> (inout smtpConnection: smtp, in string: user,
    in string: password)</a></li>
</ul>
<h3>lower</h3>
<ul>
<li><a href="libraries/char.htm#lower(in_char)">const func char: <b>lower</b> (in char: ch)</a></li>
<li><a href="libraries/string.htm#lower(in_string)">const func string: <b>lower</b> (in string: stri)</a></li>
</ul>
<h3>lower.s7i</h3>
<ul>
<li><a href="libraries/lower.htm">lower.s7i</a></li>
</ul>
<h3>lowerFile</h3>
<ul>
<li><a href="libraries/lower.htm#lowerFile">const type: <b>lowerFile</b></a></li>
</ul>
<h3>lowestSetBit</h3>
<ul>
<li><a href="libraries/bigint.htm#lowestSetBit(in_bigInteger)">const func integer: <b>lowestSetBit</b> (in bigInteger: number)</a></li>
<li><a href="libraries/integer.htm#lowestSetBit(in_integer)">const func integer: <b>lowestSetBit</b> (in integer: number)</a></li>
</ul>
<h3>lpad</h3>
<ul>
<li><a href="libraries/enable_io.htm#(in_aType)lpad(in_integer)">const func string: (in aType: aValue) <b>lpad</b> (in integer: leng)</a></li>
<li><a href="libraries/string.htm#(in_string)lpad(in_integer)">const func string: (in string: stri) <b>lpad</b> (in integer: length)</a></li>
</ul>
<h3>lpad0</h3>
<ul>
<li><a href="libraries/integer.htm#(in_integer)lpad0(in_integer)">const func string: (in integer: number) <b>lpad0</b> (in integer: length)</a></li>
<li><a href="libraries/string.htm#(in_string)lpad0(in_integer)">const func string: (in string: stri) <b>lpad0</b> (in integer: length)</a></li>
</ul>
<h3>lsbBitStream</h3>
<ul>
<li><a href="libraries/bitdata.htm#lsbBitStream">const type: <b>lsbBitStream</b></a></li>
</ul>
<h3>ltrim</h3>
<ul>
<li><a href="libraries/string.htm#ltrim(in_string)">const func string: <b>ltrim</b> (in string: stri)</a></li>
</ul>
<h3>lzma.s7i</h3>
<ul>
<li><a href="libraries/lzma.htm">lzma.s7i</a></li>
</ul>
<h3>lzmaFile</h3>
<ul>
<li><a href="libraries/lzma.htm#lzmaFile">const type: <b>lzmaFile</b></a></li>
</ul>
<h3>lzw.s7i</h3>
<ul>
<li><a href="libraries/lzw.htm">lzw.s7i</a></li>
</ul>
<h3>lzwCompressLsb</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwCompressLsb(in_string,in_integer)">const func string: <b>lzwCompressLsb</b> (in string: uncompressed, in integer: codeSize)</a></li>
</ul>
<h3>lzwCompressMsb</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwCompressMsb(in_string,in_integer)">const func string: <b>lzwCompressMsb</b> (in string: uncompressed, in integer: codeSize)</a></li>
</ul>
<h3>lzwCompressMsbEarlyChange</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwCompressMsbEarlyChange(in_string,in_integer)">const func string: <b>lzwCompressMsbEarlyChange</b> (in string: uncompressed, in integer: codeSize)</a></li>
</ul>
<h3>lzwDecompress</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwDecompress(inout_lsbBitStream,in_integer)">const func string: <b>lzwDecompress</b> (inout lsbBitStream: compressedStream,
    in integer: codeSize)</a></li>
<li><a href="libraries/lzw.htm#lzwDecompress(inout_msbBitStream,in_integer)">const func string: <b>lzwDecompress</b> (inout msbBitStream: compressedStream,
    in integer: codeSize)</a></li>
</ul>
<h3>lzwDecompressEarlyChange</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwDecompressEarlyChange(inout_msbBitStream,in_integer)">const func string: <b>lzwDecompressEarlyChange</b> (inout msbBitStream: compressedStream,
    in integer: codeSize)</a></li>
<li><a href="libraries/lzw.htm#lzwDecompressEarlyChange(inout_msbBitStream,in_integer,in_integer)">const func string: <b>lzwDecompressEarlyChange</b> (inout msbBitStream: compressedStream,
    in integer: codeSize, in integer: requestedLength)</a></li>
</ul>
<h3>lzwDecompressLsb</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwDecompressLsb(in_string,in_integer)">const func string: <b>lzwDecompressLsb</b> (in string: compressed, in integer: codeSize)</a></li>
</ul>
<h3>lzwDecompressMsb</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwDecompressMsb(in_string,in_integer)">const func string: <b>lzwDecompressMsb</b> (in string: compressed, in integer: codeSize)</a></li>
</ul>
<h3>lzwDecompressMsbEarlyChange</h3>
<ul>
<li><a href="libraries/lzw.htm#lzwDecompressMsbEarlyChange(in_string,in_integer)">const func string: <b>lzwDecompressMsbEarlyChange</b> (in string: compressed, in integer: codeSize)</a></li>
<li><a href="libraries/lzw.htm#lzwDecompressMsbEarlyChange(in_string,in_integer,in_integer)">const func string: <b>lzwDecompressMsbEarlyChange</b> (in string: compressed, in integer: codeSize,
    in integer: requestedLength)</a></li>
</ul>
<h3>mac_os_roman</h3>
<ul>
<li><a href="libraries/charsets.htm#mac_os_roman">const string: <b>mac_os_roman</b></a></li>
</ul>
<h3>mahjong.sd7</h3>
<ul>
<li><a href="scrshots/mahjong.htm">Mahjong solitaire</a></li>
</ul>
<h3>make</h3>
<ul>
<li><a href="libraries/make.htm#make(in_string,in_array_string,in_makeFlags,in_stringHash)">const proc: <b>make</b> (in string: makefile, in array string: targets, in makeFlags: flags,
    in stringHash: macros)</a></li>
<li><a href="libraries/make.htm#make(in_string,in_array_string,in_makeFlags)">const proc: <b>make</b> (in string: makefile, in array string: targets, in makeFlags: flags)</a></li>
<li><a href="libraries/make.htm#make(in_string,in_string,in_makeFlags,in_stringHash)">const proc: <b>make</b> (in string: makefile, in string: target, in makeFlags: flags, in stringHash: macros)</a></li>
<li><a href="libraries/make.htm#make(in_string,in_string,in_makeFlags)">const proc: <b>make</b> (in string: makefile, in string: target, in makeFlags: flags)</a></li>
</ul>
<h3>make.s7i</h3>
<ul>
<li><a href="libraries/make.htm">make.s7i</a></li>
</ul>
<h3>make7.sd7</h3>
<ul>
<li><a href="scrshots/make7.htm">Make utility</a></li>
</ul>
<h3>makeDataType</h3>
<ul>
<li><a href="libraries/makedata.htm#makeDataType">const type: <b>makeDataType</b></a></li>
</ul>
<h3>makeParentDirs</h3>
<ul>
<li><a href="libraries/osfiles.htm#makeParentDirs(in_string)">const proc: <b>makeParentDirs</b> (in string: filePath)</a></li>
</ul>
<h3>make_list</h3>
<ul>
<li><a href="libraries/ref_list.htm#make_list(in_reference)">const func ref_list: <b>make_list</b> (in reference: element)</a></li>
</ul>
<h3>makedata.s7i</h3>
<ul>
<li><a href="libraries/makedata.htm">makedata.s7i</a></li>
</ul>
<h3>mandelbr.sd7</h3>
<ul>
<li><a href="scrshots/mandelbr.htm">Mandelbrot set viewer</a></li>
</ul>
<h3>match</h3>
<ul>
<li><a href="libraries/progs.htm#match(in_program,in_ref_list)">const func reference: <b>match</b> (in program: aProgram, in ref_list: expression)</a></li>
</ul>
<h3>math.s7i</h3>
<ul>
<li><a href="libraries/math.htm">math.s7i</a></li>
</ul>
<h3>max</h3>
<ul>
<li><a href="libraries/bigint.htm#max(in_bigInteger,in_bigInteger)">const func bigInteger: <b>max</b> (in bigInteger: value1, in bigInteger: value2)</a></li>
<li><a href="libraries/bigrat.htm#max(in_bigRational,in_bigRational)">const func bigRational: <b>max</b> (in bigRational: value1, in bigRational: value2)</a></li>
<li><a href="libraries/bitset.htm#max(in_bitset)">const func integer: <b>max</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#max(in_setType)">const func baseType: <b>max</b> (in setType: aSet)</a></li>
<li><a href="libraries/float.htm#max(in_float,in_float)">const func float: <b>max</b> (in float: value1, in float: value2)</a></li>
<li><a href="libraries/integer.htm#max(in_integer,in_integer)">const func integer: <b>max</b> (in integer: value1, in integer: value2)</a></li>
<li><a href="libraries/rational.htm#max(in_rational,in_rational)">const func rational: <b>max</b> (in rational: value1, in rational: value2)</a></li>
</ul>
<h3>maxDecimalPrecision</h3>
<ul>
<li><a href="libraries/db_prop.htm#maxDecimalPrecision(in_dbCategory)">const func integer: <b>maxDecimalPrecision</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>maxDecimalScale</h3>
<ul>
<li><a href="libraries/db_prop.htm#maxDecimalScale(in_dbCategory)">const func integer: <b>maxDecimalScale</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>maxIdx</h3>
<ul>
<li><a href="libraries/array.htm#maxIdx(in_arrayType)">const func integer: <b>maxIdx</b> (in arrayType: arr)</a></li>
<li><a href="libraries/idxarray.htm#maxIdx(in_arrayType)">const func indexType: <b>maxIdx</b> (in arrayType: arr)</a></li>
</ul>
<h3>maxInt8Value</h3>
<ul>
<li><a href="libraries/db_prop.htm#maxInt8Value(in_dbCategory)">const func integer: <b>maxInt8Value</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>maxIntIdx</h3>
<ul>
<li><a href="libraries/idxarray.htm#maxIntIdx(in_arrayType)">const func integer: <b>maxIntIdx</b> (in arrayType: arr)</a></li>
</ul>
<h3>maxNumericPrecision</h3>
<ul>
<li><a href="libraries/db_prop.htm#maxNumericPrecision(in_dbCategory)">const func integer: <b>maxNumericPrecision</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>maxNumericScale</h3>
<ul>
<li><a href="libraries/db_prop.htm#maxNumericScale(in_dbCategory)">const func integer: <b>maxNumericScale</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>mbfBits2Float</h3>
<ul>
<li><a href="libraries/bin32.htm#mbfBits2Float(in_bin32)">const func float: <b>mbfBits2Float</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#mbfBits2Float(in_bin64)">const func float: <b>mbfBits2Float</b> (in bin64: bits)</a></li>
</ul>
<h3>md4</h3>
<ul>
<li><a href="libraries/msgdigest.htm#md4(in_var_string)">const func string: <b>md4</b> (in var string: message)</a></li>
</ul>
<h3>md5</h3>
<ul>
<li><a href="libraries/msgdigest.htm#md5(in_var_string)">const func string: <b>md5</b> (in var string: message)</a></li>
</ul>
<h3>mdiv</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">const func bigInteger: (in bigInteger: dividend) <b>mdiv</b> (in bigInteger: divisor)</a></li>
<li><a href="libraries/integer.htm#(in_integer)mdiv(in_integer)">const func integer: (in integer: dividend) <b>mdiv</b> (in integer: divisor)</a></li>
</ul>
<h3>messageWindow</h3>
<ul>
<li><a href="libraries/dialog.htm#messageWindow(in_array_string)">const proc: <b>messageWindow</b> (in array string: messageText)</a></li>
<li><a href="libraries/dialog.htm#messageWindow(in_string)">const proc: <b>messageWindow</b> (in string: messageText)</a></li>
</ul>
<h3>mik</h3>
<ul>
<li><a href="libraries/charsets.htm#mik">const string: <b>mik</b></a></li>
</ul>
<h3>min</h3>
<ul>
<li><a href="libraries/bigint.htm#min(in_bigInteger,in_bigInteger)">const func bigInteger: <b>min</b> (in bigInteger: value1, in bigInteger: value2)</a></li>
<li><a href="libraries/bigrat.htm#min(in_bigRational,in_bigRational)">const func bigRational: <b>min</b> (in bigRational: value1, in bigRational: value2)</a></li>
<li><a href="libraries/bitset.htm#min(in_bitset)">const func integer: <b>min</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#min(in_setType)">const func baseType: <b>min</b> (in setType: aSet)</a></li>
<li><a href="libraries/float.htm#min(in_float,in_float)">const func float: <b>min</b> (in float: value1, in float: value2)</a></li>
<li><a href="libraries/integer.htm#min(in_integer,in_integer)">const func integer: <b>min</b> (in integer: value1, in integer: value2)</a></li>
<li><a href="libraries/rational.htm#min(in_rational,in_rational)">const func rational: <b>min</b> (in rational: value1, in rational: value2)</a></li>
</ul>
<h3>minDecimalScale</h3>
<ul>
<li><a href="libraries/db_prop.htm#minDecimalScale(in_dbCategory)">const func integer: <b>minDecimalScale</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>minIdx</h3>
<ul>
<li><a href="libraries/array.htm#minIdx(in_arrayType)">const func integer: <b>minIdx</b> (in arrayType: arr)</a></li>
<li><a href="libraries/idxarray.htm#minIdx(in_arrayType)">const func indexType: <b>minIdx</b> (in arrayType: arr)</a></li>
</ul>
<h3>minIntIdx</h3>
<ul>
<li><a href="libraries/idxarray.htm#minIntIdx(in_arrayType)">const func integer: <b>minIntIdx</b> (in arrayType: arr)</a></li>
</ul>
<h3>minNumericScale</h3>
<ul>
<li><a href="libraries/db_prop.htm#minNumericScale(in_dbCategory)">const func integer: <b>minNumericScale</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>mixarith.s7i</h3>
<ul>
<li><a href="libraries/mixarith.htm">mixarith.s7i</a></li>
</ul>
<h3>mkdir</h3>
<ul>
<li><a href="manual/os.htm#mkdir">mkdir</a></li>
<li><a href="libraries/cpio.htm#mkdir(inout_cpioArchive,in_string)">const proc: <b>mkdir</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#mkdir(inout_fileSys,in_string)">const proc: <b>mkdir</b> (inout fileSys: fileSystem, in string: dirPath)</a></li>
<li><a href="libraries/ftp.htm#mkdir(inout_ftpConnection,in_string)">const proc: <b>mkdir</b> (inout ftpConnection: ftp, in string: dirName)</a></li>
<li><a href="libraries/osfiles.htm#mkdir(in_string)">const proc: <b>mkdir</b> (in string: dirPath)</a></li>
<li><a href="libraries/rpm.htm#mkdir(inout_rpmArchive,in_string)">const proc: <b>mkdir</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#mkdir(inout_tarArchive,in_string)">const proc: <b>mkdir</b> (inout tarArchive: tar, in string: filePath)</a></li>
</ul>
<h3>mod</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">const func bigInteger: (in bigInteger: dividend) <b>mod</b> (in bigInteger: divisor)</a></li>
<li><a href="libraries/float.htm#(in_float)mod(in_float)">const func float: (in float: dividend) <b>mod</b> (in float: divisor)</a></li>
<li><a href="libraries/integer.htm#(in_integer)mod(in_integer)">const func integer: (in integer: dividend) <b>mod</b> (in integer: divisor)</a></li>
</ul>
<h3>modInverse</h3>
<ul>
<li><a href="libraries/bigint.htm#modInverse(in_var_bigInteger,in_var_bigInteger)">const func bigInteger: <b>modInverse</b> (in var bigInteger: a,
    in var bigInteger: b)</a></li>
</ul>
<h3>modPow</h3>
<ul>
<li><a href="libraries/bigint.htm#modPow(in_var_bigInteger,in_var_bigInteger,in_bigInteger)">const func bigInteger: <b>modPow</b> (in var bigInteger: base,
    in var bigInteger: exponent, in bigInteger: modulus)</a></li>
</ul>
<h3>more.s7i</h3>
<ul>
<li><a href="libraries/more.htm">more.s7i</a></li>
</ul>
<h3>moreFile</h3>
<ul>
<li><a href="libraries/more.htm#moreFile">const type: <b>moreFile</b></a></li>
</ul>
<h3>moveFile</h3>
<ul>
<li><a href="manual/os.htm#moveFile">moveFile</a></li>
<li><a href="libraries/filesys.htm#moveFile(inout_fileSys,in_string,in_string)">const proc: <b>moveFile</b> (inout fileSys: fileSystem, in string: sourcePath, in string: destPath)</a></li>
<li><a href="libraries/ftp.htm#moveFile(inout_ftpConnection,in_string,in_string)">const proc: <b>moveFile</b> (inout ftpConnection: ftp, in string: sourcePath, in string: destPath)</a></li>
<li><a href="libraries/osfiles.htm#moveFile(in_string,in_string)">const proc: <b>moveFile</b> (in string: sourcePath, in string: destPath)</a></li>
</ul>
<h3>msbBitStream</h3>
<ul>
<li><a href="libraries/bitdata.htm#msbBitStream">const type: <b>msbBitStream</b></a></li>
</ul>
<h3>msgDigest</h3>
<ul>
<li><a href="libraries/msgdigest.htm#msgDigest(in_digestAlgorithm,in_string)">const func string: <b>msgDigest</b> (in digestAlgorithm: digestAlg, in string: message)</a></li>
</ul>
<h3>msgdigest.s7i</h3>
<ul>
<li><a href="libraries/msgdigest.htm">msgdigest.s7i</a></li>
</ul>
<h3>mult</h3>
<ul>
<li><a href="libraries/elliptic.htm#mult(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger)">const func ecPoint: <b>mult</b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c)</a></li>
<li><a href="libraries/elliptic.htm#mult(in_ellipticCurve,in_var_jacobianPoint,in_var_bigInteger)">const func jacobianPoint: <b>mult</b> (in ellipticCurve: curve, in var jacobianPoint: jp1, in var bigInteger: c)</a></li>
<li><a href="libraries/string.htm#(in_string)mult(in_integer)">const func string: (in string: stri) <b>mult</b> (in integer: factor)</a></li>
</ul>
<h3>multAddFast</h3>
<ul>
<li><a href="libraries/elliptic.htm#multAddFast(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger,in_var_ecPoint,in_var_bigInteger)">const func ecPoint: <b>multAddFast</b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c1,
                                 in var ecPoint: p2, in var bigInteger: c2)</a></li>
</ul>
<h3>multFast</h3>
<ul>
<li><a href="libraries/elliptic.htm#multFast(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger)">const func ecPoint: <b>multFast</b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c)</a></li>
</ul>
<h3>name</h3>
<ul>
<li><a href="libraries/environment.htm#name(PROGRAM)">const func string: <b>name</b> (PROGRAM)</a></li>
<li><a href="libraries/progs.htm#name(in_program)">const func string: <b>name</b> (in program: aProgram)</a></li>
</ul>
<h3>name(PROGRAM)</h3>
<ul>
<li><a href="manual/os.htm#name_PROGRAM">name(PROGRAM)</a></li>
</ul>
<h3>neutralEcPoint</h3>
<ul>
<li><a href="libraries/elliptic.htm#neutralEcPoint">const ecPoint: <b>neutralEcPoint</b></a></li>
</ul>
<h3>new enum</h3>
<ul>
<li><a href="libraries/enumeration.htm#new_enum(ref_expr)end_enum">const func type: <b>new enum</b> (ref expr: elem_expr) end enum</a></li>
</ul>
<h3>newPixmap</h3>
<ul>
<li><a href="libraries/draw.htm#newPixmap(in_integer,in_integer)">const func PRIMITIVE_WINDOW: <b>newPixmap</b> (in integer: width, in integer: height)</a></li>
</ul>
<h3>next</h3>
<ul>
<li><a href="libraries/bitset.htm#next(in_bitset,in_integer)">const func integer: <b>next</b> (in bitset: aSet, in integer: number)</a></li>
<li><a href="libraries/bitsetof.htm#next(in_setType,in_baseType)">const func baseType: <b>next</b> (in setType: aSet, in baseType: number)</a></li>
</ul>
<h3>nextFile</h3>
<ul>
<li><a href="libraries/poll.htm#nextFile(inout_pollData)">const func file: <b>nextFile</b> (inout pollData: pData)</a></li>
</ul>
<h3>noCipherState</h3>
<ul>
<li><a href="libraries/cipher.htm#noCipherState">const type: <b>noCipherState</b></a></li>
</ul>
<h3>not</h3>
<ul>
<li><a href="libraries/boolean.htm#not(in_boolean)">const func boolean: <b>not</b> (in boolean: boolValue)</a></li>
</ul>
<h3>not in</h3>
<ul>
<li><a href="libraries/bitset.htm#(in_integer)not_in(in_bitset)">const func boolean: (in integer: number) <b>not in</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#(in_baseType)not_in(in_setType)">const func boolean: (in baseType: aValue) <b>not in</b> (in setType: aSet)</a></li>
<li><a href="libraries/hash.htm#(in_keyType)not_in(in_hashType)">const func boolean: (in keyType: aKey) <b>not in</b> (in hashType: aHashMap)</a></li>
<li><a href="libraries/hashsetof.htm#(in_baseType)not_in(in_setType)">const func boolean: (in baseType: aValue) <b>not in</b> (in setType: aSet)</a></li>
<li><a href="libraries/ref_list.htm#(in_reference)not_in(in_ref_list)">const func boolean: (in reference: element) <b>not in</b> (in ref_list: aRefList)</a></li>
</ul>
<h3>ns_4551_1</h3>
<ul>
<li><a href="libraries/charsets.htm#ns_4551_1">const string: <b>ns_4551_1</b></a></li>
</ul>
<h3>null_file</h3>
<ul>
<li><a href="libraries/null_file.htm#null_file">const type: <b>null_file</b></a></li>
</ul>
<h3>null_file.s7i</h3>
<ul>
<li><a href="libraries/null_file.htm">null_file.s7i</a></li>
</ul>
<h3>numOfCharsInWidth</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#numOfCharsInWidth(in_bitmapFont,in_string,in_integer)">const func integer: <b>numOfCharsInWidth</b> (in bitmapFont: bmpFont,
    in string: stri, in integer: allowedWidth)</a></li>
<li><a href="libraries/font.htm#numOfCharsInWidth(in_font,in_string,in_integer)">const func integer: <b>numOfCharsInWidth</b> (in font: aFont,
    in string: stri, in integer: allowedWidth)</a></li>
<li><a href="libraries/vectorfont.htm#numOfCharsInWidth(in_vectorFont,in_string,in_integer)">const func integer: <b>numOfCharsInWidth</b> (in vectorFont: vecFont,
    in string: stri, in integer: allowedWidth)</a></li>
</ul>
<h3>numericAddress</h3>
<ul>
<li><a href="libraries/sockbase.htm#numericAddress(in_socketAddress)">const func string: <b>numericAddress</b> (in socketAddress: address)</a></li>
</ul>
<h3>numericIntType</h3>
<ul>
<li><a href="libraries/db_prop.htm#numericIntType(in_dbCategory)">const func string: <b>numericIntType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>numericType</h3>
<ul>
<li><a href="libraries/db_prop.htm#numericType(in_dbCategory,in_integer)">const func string: <b>numericType</b> (in dbCategory: databaseKind, in integer: scale)</a></li>
</ul>
<h3>objNumber</h3>
<ul>
<li><a href="libraries/progs.htm#objNumber(in_reference)">const func integer: <b>objNumber</b> (in reference: aReference)</a></li>
</ul>
<h3>object</h3>
<ul>
<li><a href="manual/types.htm#object">object</a></li>
</ul>
<h3>octets2int</h3>
<ul>
<li><a href="libraries/pkcs1.htm#octets2int(in_string)">const func bigInteger: <b>octets2int</b> (in string: stri)</a></li>
</ul>
<h3>odd</h3>
<ul>
<li><a href="libraries/bigint.htm#odd(in_bigInteger)">const func boolean: <b>odd</b> (in bigInteger: number)</a></li>
<li><a href="libraries/integer.htm#odd(in_integer)">const func boolean: <b>odd</b> (in integer: number)</a></li>
</ul>
<h3>open</h3>
<ul>
<li><a href="libraries/ar.htm#open(inout_arArchive,in_string,in_string)">const func file: <b>open</b> (inout arArchive: ar, in string: filePath,
    in string: mode)</a></li>
<li><a href="libraries/console.htm#open(CONSOLE)">const func console_file: <b>open</b> (CONSOLE)</a></li>
<li><a href="libraries/cpio.htm#open(inout_cpioArchive,in_string,in_string)">const func file: <b>open</b> (inout cpioArchive: cpio, in string: filePath,
    in string: mode)</a></li>
<li><a href="libraries/external_file.htm#open(in_string,in_string)">const func file: <b>open</b> (in string: path, in string: mode)</a></li>
<li><a href="libraries/filesys.htm#open(inout_fileSys,in_string,in_string)">const func file: <b>open</b> (inout fileSys: fileSystem, in string: filePath,
    in string: mode)</a></li>
<li><a href="libraries/ftp.htm#open(inout_ftpConnection,in_string,in_string)">const func file: <b>open</b> (inout ftpConnection: ftp, in string: filePath,
    in string: mode)</a></li>
<li><a href="libraries/graph_file.htm#open(in_PRIMITIVE_WINDOW)">const func graph_file: <b>open</b> (in PRIMITIVE_WINDOW: graphWin)</a></li>
<li><a href="libraries/graph_file.htm#open(in_PRIMITIVE_WINDOW,in_integer,in_integer)">const func graph_file: <b>open</b> (in PRIMITIVE_WINDOW: graphWin,
    in integer: minX, in integer: minY)</a></li>
<li><a href="libraries/graph_file.htm#open(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer)">const func graph_file: <b>open</b> (in PRIMITIVE_WINDOW: graphWin,
    in integer: minX, in integer: minY, in integer: width, in integer: height)</a></li>
<li><a href="libraries/rpm.htm#open(inout_rpmArchive,in_string,in_string)">const func file: <b>open</b> (inout rpmArchive: rpm, in string: filePath,
    in string: mode)</a></li>
<li><a href="libraries/tar.htm#open(inout_tarArchive,in_string,in_string)">const func file: <b>open</b> (inout tarArchive: tar, in string: filePath,
    in string: mode)</a></li>
</ul>
<h3>openAr</h3>
<ul>
<li><a href="libraries/ar.htm#openAr(inout_file)">const func fileSys: <b>openAr</b> (inout file: arFile)</a></li>
<li><a href="libraries/ar.htm#openAr(in_string)">const func fileSys: <b>openAr</b> (in string: arFileName)</a></li>
</ul>
<h3>openBrowser</h3>
<ul>
<li><a href="libraries/browser.htm#openBrowser">const func browserConnection: <b>openBrowser</b></a></li>
</ul>
<h3>openBufferFile</h3>
<ul>
<li><a href="libraries/iobuffer.htm#openBufferFile(in_file)">const func file: <b>openBufferFile</b> (in file: baseFile)</a></li>
</ul>
<h3>openClibFile</h3>
<ul>
<li><a href="libraries/clib_file.htm#openClibFile(in_string,in_string)">const func clib_file: <b>openClibFile</b> (in string: path, in string: mode)</a></li>
</ul>
<h3>openCpio</h3>
<ul>
<li><a href="libraries/cpio.htm#openCpio(inout_file)">const func fileSys: <b>openCpio</b> (inout file: cpioFile)</a></li>
<li><a href="libraries/cpio.htm#openCpio(in_string)">const func fileSys: <b>openCpio</b> (in string: cpioFileName)</a></li>
</ul>
<h3>openDatabase</h3>
<ul>
<li><a href="libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">const func database: <b>openDatabase</b> (in dbCategory: driver, in string: host,
                                   in integer: port, in string: dbName,
                                   in string: user, in string: password)</a></li>
<li><a href="libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">const func database: <b>openDatabase</b> (DB_ODBC, in string: odbcDriver,
                                   in string: server, in string: dbName,
                                   in string: user, in string: password)</a></li>
<li><a href="libraries/sql_base.htm#openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)">const func database: <b>openDatabase</b> (DB_INFORMIX, in string: host,
                                   in integer: port, in string: server,
                                   in string: dbName,
                                   in string: user, in string: password)</a></li>
<li><a href="libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">const func database: <b>openDatabase</b> (in dbCategory: driver, in string: dbPath,
                                   in string: user, in string: password)</a></li>
<li><a href="libraries/sql_base.htm#openDatabase(in_dbCategory,in_string)">const func database: <b>openDatabase</b> (in dbCategory: driver,
                                   in string: connectStri)</a></li>
</ul>
<h3>openDir</h3>
<ul>
<li><a href="manual/os.htm#openDir">openDir</a></li>
<li><a href="libraries/dir.htm#openDir(in_string)">const func file: <b>openDir</b> (in string: directoryPath)</a></li>
</ul>
<h3>openEcho</h3>
<ul>
<li><a href="libraries/echo.htm#openEcho(in_file,in_file)">const func file: <b>openEcho</b> (in file: inFile, in file: outFile)</a></li>
</ul>
<h3>openEditLine</h3>
<ul>
<li><a href="libraries/editline.htm#openEditLine(in_file,in_file)">const func file: <b>openEditLine</b> (in file: inFile, in file: outFile)</a></li>
</ul>
<h3>openEditLineLatin1</h3>
<ul>
<li><a href="libraries/editline.htm#openEditLineLatin1(in_file,in_file)">const func file: <b>openEditLineLatin1</b> (in file: inFile, in file: outFile)</a></li>
</ul>
<h3>openFtp</h3>
<ul>
<li><a href="libraries/ftp.htm#openFtp(in_string,in_string,in_string,in_integer)">const func ftpFileSys: <b>openFtp</b> (in string: hostName, in string: user,
    in string: password, in integer: ftpControlPort)</a></li>
<li><a href="libraries/ftp.htm#openFtp(in_string,in_string,in_string)">const func ftpFileSys: <b>openFtp</b> (in string: hostName,
    in string: user, in string: password)</a></li>
<li><a href="libraries/ftp.htm#openFtp(in_string,in_integer)">const func ftpFileSys: <b>openFtp</b> (in string: connectStri, in integer: ftpControlPort)</a></li>
<li><a href="libraries/ftp.htm#openFtp(in_string)">const func ftpFileSys: <b>openFtp</b> (in string: connectStri)</a></li>
</ul>
<h3>openGzipFile</h3>
<ul>
<li><a href="libraries/gzip.htm#openGzipFile(inout_file,READ)">const func file: <b>openGzipFile</b> (inout file: compressed, READ)</a></li>
<li><a href="libraries/gzip.htm#openGzipFile(inout_file,WRITE)">const func file: <b>openGzipFile</b> (inout file: destFile, WRITE)</a></li>
</ul>
<h3>openHttpServer</h3>
<ul>
<li><a href="libraries/httpserv.htm#openHttpServer(in_integer,in_certAndKey,in_boolean)">const func httpServer: <b>openHttpServer</b> (in integer: port,
    in certAndKey: certificate, in boolean: useTls)</a></li>
</ul>
<h3>openInetListener</h3>
<ul>
<li><a href="libraries/listener.htm#openInetListener(in_integer)">const func listener: <b>openInetListener</b> (in integer: portNumber)</a></li>
</ul>
<h3>openInetSocket</h3>
<ul>
<li><a href="libraries/socket.htm#openInetSocket(in_integer)">const func file: <b>openInetSocket</b> (in integer: portNumber)</a></li>
<li><a href="libraries/socket.htm#openInetSocket(in_string,in_integer)">const func file: <b>openInetSocket</b> (in string: hostName, in integer: portNumber)</a></li>
</ul>
<h3>openLine</h3>
<ul>
<li><a href="libraries/line.htm#openLine(in_file)">const func file: <b>openLine</b> (in file: aFile)</a></li>
</ul>
<h3>openLower</h3>
<ul>
<li><a href="libraries/lower.htm#openLower(in_file)">const func file: <b>openLower</b> (in file: destFile)</a></li>
</ul>
<h3>openLsbBitStream</h3>
<ul>
<li><a href="libraries/bitdata.htm#openLsbBitStream(in_file)">const func lsbBitStream: <b>openLsbBitStream</b> (in file: inFile)</a></li>
<li><a href="libraries/bitdata.htm#openLsbBitStream(in_string)">const func lsbBitStream: <b>openLsbBitStream</b> (in string: stri)</a></li>
</ul>
<h3>openLzmaFile</h3>
<ul>
<li><a href="libraries/lzma.htm#openLzmaFile(inout_file)">const func file: <b>openLzmaFile</b> (inout file: compressed)</a></li>
</ul>
<h3>openMore</h3>
<ul>
<li><a href="libraries/more.htm#openMore(in_file,in_file,in_integer)">const func file: <b>openMore</b> (in file: destFile, in file: commandFile,
    in integer: pageSize)</a></li>
</ul>
<h3>openMsbBitStream</h3>
<ul>
<li><a href="libraries/bitdata.htm#openMsbBitStream(in_file)">const func msbBitStream: <b>openMsbBitStream</b> (in file: inFile)</a></li>
<li><a href="libraries/bitdata.htm#openMsbBitStream(in_string)">const func msbBitStream: <b>openMsbBitStream</b> (in string: stri)</a></li>
</ul>
<h3>openPixmapFontFile</h3>
<ul>
<li><a href="libraries/pixmap_file.htm#openPixmapFontFile(in_PRIMITIVE_WINDOW)">const func text: <b>openPixmapFontFile</b> (in PRIMITIVE_WINDOW: win)</a></li>
<li><a href="libraries/pixmap_file.htm#openPixmapFontFile(in_PRIMITIVE_WINDOW,in_integer,in_integer)">const func text: <b>openPixmapFontFile</b> (in PRIMITIVE_WINDOW: win,
    in integer: minX, in integer: minY)</a></li>
</ul>
<h3>openRpm</h3>
<ul>
<li><a href="libraries/rpm.htm#openRpm(inout_file)">const func fileSys: <b>openRpm</b> (inout file: rpmFile)</a></li>
<li><a href="libraries/rpm.htm#openRpm(in_string)">const func fileSys: <b>openRpm</b> (in string: rpmFileName)</a></li>
</ul>
<h3>openServerTls</h3>
<ul>
<li><a href="libraries/tls.htm#openServerTls(inout_file,in_certAndKey)">const func file: <b>openServerTls</b> (inout file: sock, in certAndKey: certificateAndKey)</a></li>
</ul>
<h3>openSmtp</h3>
<ul>
<li><a href="libraries/smtp.htm#openSmtp(in_string,in_integer)">const func smtpConnection: <b>openSmtp</b> (in string: hostName,
    in integer: smtpPort)</a></li>
</ul>
<h3>openSocket</h3>
<ul>
<li><a href="libraries/socket.htm#openSocket(in_socketAddress)">const func file: <b>openSocket</b> (in socketAddress: address)</a></li>
</ul>
<h3>openStriFile</h3>
<ul>
<li><a href="libraries/strifile.htm#openStriFile(in_string)">const func file: <b>openStriFile</b> (in string: content)</a></li>
<li><a href="libraries/strifile.htm#openStriFile">const func file: <b>openStriFile</b></a></li>
</ul>
<h3>openStriText</h3>
<ul>
<li><a href="libraries/stritext.htm#openStriText(in_array_string)">const func file: <b>openStriText</b> (in array string: content)</a></li>
</ul>
<h3>openSubFile</h3>
<ul>
<li><a href="libraries/subfile.htm#openSubFile(in_file,in_integer,in_integer)">const func file: <b>openSubFile</b> (in file: baseFile, in integer: startPos, in integer: size)</a></li>
</ul>
<h3>openSubWindow</h3>
<ul>
<li><a href="libraries/graph.htm#openSubWindow(in_PRIMITIVE_WINDOW,ref_integer,ref_integer,ref_integer,ref_integer)">const func PRIMITIVE_WINDOW: <b>openSubWindow</b> (
    in PRIMITIVE_WINDOW: aWindow,
    ref integer: xPos, ref integer: yPos,
    ref integer: width, ref integer: height)</a></li>
</ul>
<h3>openTar</h3>
<ul>
<li><a href="libraries/tar.htm#openTar(inout_file)">const func fileSys: <b>openTar</b> (inout file: tarFile)</a></li>
<li><a href="libraries/tar.htm#openTar(in_string)">const func fileSys: <b>openTar</b> (in string: tarFileName)</a></li>
</ul>
<h3>openTee</h3>
<ul>
<li><a href="libraries/tee.htm#openTee(in_array_file)">const func file: <b>openTee</b> (in array file: destFiles)</a></li>
<li><a href="libraries/tee.htm#openTee(in_file,in_file)">const func file: <b>openTee</b> (in file: destFile1, in file: destFile2)</a></li>
</ul>
<h3>openTlsSocket</h3>
<ul>
<li><a href="libraries/tls.htm#openTlsSocket(inout_file,in_string)">const func file: <b>openTlsSocket</b> (inout file: sock, in string: hostName)</a></li>
<li><a href="libraries/tls.htm#openTlsSocket(inout_file)">const func file: <b>openTlsSocket</b> (inout file: sock)</a></li>
<li><a href="libraries/tls.htm#openTlsSocket(in_string,in_integer)">const func file: <b>openTlsSocket</b> (in string: hostName, in integer: portNumber)</a></li>
</ul>
<h3>openUpper</h3>
<ul>
<li><a href="libraries/upper.htm#openUpper(in_file)">const func file: <b>openUpper</b> (in file: destFile)</a></li>
</ul>
<h3>openUtf16</h3>
<ul>
<li><a href="libraries/utf16.htm#openUtf16(in_string,in_string)">const func file: <b>openUtf16</b> (in string: path, in string: mode)</a></li>
</ul>
<h3>openUtf16be</h3>
<ul>
<li><a href="libraries/utf16.htm#openUtf16be(in_string,in_string)">const func file: <b>openUtf16be</b> (in string: path, in string: mode)</a></li>
</ul>
<h3>openUtf16le</h3>
<ul>
<li><a href="libraries/utf16.htm#openUtf16le(in_string,in_string)">const func file: <b>openUtf16le</b> (in string: path, in string: mode)</a></li>
</ul>
<h3>openUtf8</h3>
<ul>
<li><a href="libraries/utf8.htm#openUtf8(in_string,in_string)">const func file: <b>openUtf8</b> (in string: path, in string: mode)</a></li>
</ul>
<h3>openWindow</h3>
<ul>
<li><a href="libraries/window.htm#openWindow(ref_text,in_integer,in_integer,in_integer,in_integer)">const func file: <b>openWindow</b> (ref text: outText,
    in integer: upper, in integer: left, in integer: height, in integer: width)</a></li>
</ul>
<h3>openXzFile</h3>
<ul>
<li><a href="libraries/xz.htm#openXzFile(inout_file)">const func file: <b>openXzFile</b> (inout file: compressed)</a></li>
</ul>
<h3>openZip</h3>
<ul>
<li><a href="libraries/zip.htm#openZip(inout_file)">const func fileSys: <b>openZip</b> (inout file: zipFile)</a></li>
<li><a href="libraries/zip.htm#openZip(in_string)">const func fileSys: <b>openZip</b> (in string: zipFileName)</a></li>
</ul>
<h3>openZstdFile</h3>
<ul>
<li><a href="libraries/zstd.htm#openZstdFile(inout_file)">const func file: <b>openZstdFile</b> (inout file: compressed)</a></li>
</ul>
<h3>or</h3>
<ul>
<li><a href="libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">const func boolean: (in boolean: boolValue1) <b>or</b> (ref func boolean: boolValue2)</a></li>
</ul>
<h3>ord</h3>
<ul>
<li><a href="libraries/bigint.htm#ord(in_bigInteger)">const func integer: <b>ord</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bin32.htm#ord(in_bin32)">const func integer: <b>ord</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#ord(in_bin64)">const func integer: <b>ord</b> (in bin64: bits)</a></li>
<li><a href="libraries/boolean.htm#ord(in_boolean)">const func integer: <b>ord</b> (in boolean: boolValue)</a></li>
<li><a href="libraries/category.htm#ord(in_category)">const func integer: <b>ord</b> (in category: aCategory)</a></li>
<li><a href="libraries/char.htm#ord(in_char)">const func integer: <b>ord</b> (in char: ch)</a></li>
<li><a href="libraries/enumeration.htm#ord(in_enumType)">const func integer: <b>ord</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/integer.htm#ord(in_integer)">const func integer: <b>ord</b> (in integer: number)</a></li>
</ul>
<h3>osFileSys</h3>
<ul>
<li><a href="libraries/osfiles.htm#osFileSys">const type: <b>osFileSys</b></a></li>
</ul>
<h3>osFiles</h3>
<ul>
<li><a href="libraries/osfiles.htm#osFiles">var fileSys: <b>osFiles</b></a></li>
</ul>
<h3>osfiles.s7i</h3>
<ul>
<li><a href="libraries/osfiles.htm">osfiles.s7i</a></li>
</ul>
<h3>p_hash</h3>
<ul>
<li><a href="libraries/hmac.htm#p_hash(in_digestAlgorithm,in_string,in_string,in_integer)">const func string: <b>p_hash</b> (in digestAlgorithm: digestAlg, in string: secret, in string: seed,
    in integer: length)</a></li>
</ul>
<h3>pairs.sd7</h3>
<ul>
<li><a href="scrshots/pairs.htm">Pairs</a></li>
</ul>
<h3>panic.sd7</h3>
<ul>
<li><a href="scrshots/panic.htm">Panic</a></li>
</ul>
<h3>parse</h3>
<ul>
<li><a href="libraries/bigint.htm#(attr_bigInteger)parse(in_string)">const func bigInteger: (attr bigInteger) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/bigrat.htm#(attr_bigRational)parse(in_string)">const func bigRational: (attr bigRational) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/bitset.htm#(attr_bitset)parse(in_string)">const func bitset: (attr bitset) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/boolean.htm#(attr_boolean)parse(in_string)">const func boolean: (attr boolean) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/bstring.htm#(attr_bstring)parse(in_string)">const func bstring: (attr bstring) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/category.htm#(attr_category)parse(in_string)">const func category: (attr category) <b>parse</b> (in string: catName)</a></li>
<li><a href="libraries/char.htm#(attr_char)parse(in_string)">const func char: (attr char) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/complex.htm#(attr_complex)parse(in_string)">const func complex: (attr complex) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/duration.htm#(attr_duration)parse(in_string)">const func duration: (attr duration) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/float.htm#(attr_float)parse(in_string)">const func float: (attr float) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/integer.htm#(attr_integer)parse(in_string)">const func integer: (attr integer) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/rational.htm#(attr_rational)parse(in_string)">const func rational: (attr rational) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/string.htm#(attr_string)parse(in_string)">const func string: (attr string) <b>parse</b> (in string: stri)</a></li>
<li><a href="libraries/time.htm#(attr_time)parse(in_string)">const func time: (attr time) <b>parse</b> (in string: stri)</a></li>
</ul>
<h3>parseFile</h3>
<ul>
<li><a href="libraries/progs.htm#parseFile(in_string,in_parseOptions,in_array_string,in_string)">const func program: <b>parseFile</b> (in string: fileName, in parseOptions: options,
                               in array string: libraryDirs,
                               in string: protFileName)</a></li>
<li><a href="libraries/progs.htm#parseFile(in_string,in_parseOptions,in_array_string)">const func program: <b>parseFile</b> (in string: fileName, in parseOptions: options,
                               in array string: libraryDirs)</a></li>
<li><a href="libraries/progs.htm#parseFile(in_string,in_parseOptions)">const func program: <b>parseFile</b> (in string: fileName, in parseOptions: options)</a></li>
<li><a href="libraries/progs.htm#parseFile(in_string)">const func program: <b>parseFile</b> (in string: fileName)</a></li>
</ul>
<h3>parseStri</h3>
<ul>
<li><a href="libraries/progs.htm#parseStri(in_string,in_parseOptions,in_array_string,in_string)">const func program: <b>parseStri</b> (in string: stri, in parseOptions: options,
                               in array string: libraryDirs,
                               in string: protFileName)</a></li>
<li><a href="libraries/progs.htm#parseStri(in_string,in_parseOptions,in_array_string)">const func program: <b>parseStri</b> (in string: stri, in parseOptions: options,
                               in array string: libraryDirs)</a></li>
<li><a href="libraries/progs.htm#parseStri(in_string,in_parseOptions)">const func program: <b>parseStri</b> (in string: stri, in parseOptions: options)</a></li>
<li><a href="libraries/progs.htm#parseStri(in_string)">const func program: <b>parseStri</b> (in string: stri)</a></li>
</ul>
<h3>passwordField</h3>
<ul>
<li><a href="libraries/cgidialog.htm#passwordField(in_string,in_integer)">const func passwordField: <b>passwordField</b> (in string: content, in integer: size)</a></li>
</ul>
<h3>path</h3>
<ul>
<li><a href="libraries/environment.htm#path(PROGRAM)">const func string: <b>path</b> (PROGRAM)</a></li>
<li><a href="libraries/progs.htm#path(in_program)">const func string: <b>path</b> (in program: aProgram)</a></li>
</ul>
<h3>path(PROGRAM)</h3>
<ul>
<li><a href="manual/os.htm#path_PROGRAM">path(PROGRAM)</a></li>
</ul>
<h3>patternRulePresent</h3>
<ul>
<li><a href="libraries/makedata.htm#patternRulePresent(in_makeDataType,in_string,in_string)">const func boolean: <b>patternRulePresent</b> (in makeDataType: makeData, in string: target,
    in string: dependency)</a></li>
</ul>
<h3>peekBits</h3>
<ul>
<li><a href="libraries/bitdata.htm#peekBits(inout_lsbBitStream,in_integer)">const func integer: <b>peekBits</b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</a></li>
<li><a href="libraries/bitdata.htm#peekBits(inout_msbBitStream,in_integer)">const func integer: <b>peekBits</b> (inout msbBitStream: inBitStream, in integer: bitWidth)</a></li>
</ul>
<h3>peerAddress</h3>
<ul>
<li><a href="libraries/socket.htm#peerAddress(in_socket)">const func socketAddress: <b>peerAddress</b> (in socket: aSocket)</a></li>
</ul>
<h3>pem.s7i</h3>
<ul>
<li><a href="libraries/pem.htm">pem.s7i</a></li>
</ul>
<h3>pemObject</h3>
<ul>
<li><a href="libraries/pem.htm#pemObject">const type: <b>pemObject</b></a></li>
<li><a href="libraries/pem.htm#pemObject(in_string,in_string)">const func pemObject: <b>pemObject</b> (in string: pemType, in string: content)</a></li>
<li><a href="libraries/pem.htm#pemObject(in_string)">const func pemObject: <b>pemObject</b> (in string: pemData)</a></li>
</ul>
<h3>pic_util.s7i</h3>
<ul>
<li><a href="libraries/pic_util.htm">pic_util.s7i</a></li>
</ul>
<h3>pieslice</h3>
<ul>
<li><a href="libraries/draw.htm#pieslice(in_integer,in_integer,in_integer,in_float,in_float,in_color)">const proc: <b>pieslice</b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</a></li>
</ul>
<h3>pipe2</h3>
<ul>
<li><a href="libraries/process.htm#pipe2(in_string,in_array_string,inout_file,inout_file)">const proc: <b>pipe2</b> (in string: command, in array string: parameters,
    inout file: childStdin, inout file: childStdout)</a></li>
</ul>
<h3>pixelToColor</h3>
<ul>
<li><a href="libraries/draw.htm#pixelToColor(in_pixel)">const func color: <b>pixelToColor</b> (in pixel: pix)</a></li>
</ul>
<h3>pixmapFontFile</h3>
<ul>
<li><a href="libraries/pixmap_file.htm#pixmapFontFile">const type: <b>pixmapFontFile</b></a></li>
</ul>
<h3>pixmapFontType</h3>
<ul>
<li><a href="libraries/pixmapfont.htm#pixmapFontType">const type: <b>pixmapFontType</b></a></li>
</ul>
<h3>pixmap_file.s7i</h3>
<ul>
<li><a href="libraries/pixmap_file.htm">pixmap_file.s7i</a></li>
</ul>
<h3>pixmapfont.s7i</h3>
<ul>
<li><a href="libraries/pixmapfont.htm">pixmapfont.s7i</a></li>
</ul>
<h3>pkcs1.s7i</h3>
<ul>
<li><a href="libraries/pkcs1.htm">pkcs1.s7i</a></li>
</ul>
<h3>planets.sd7</h3>
<ul>
<li><a href="scrshots/planets.htm">Display planets and stars</a></li>
</ul>
<h3>png.s7i</h3>
<ul>
<li><a href="libraries/png.htm">png.s7i</a></li>
</ul>
<h3>point</h3>
<ul>
<li><a href="libraries/draw.htm#point(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_color)">const proc: <b>point</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in color: col)</a></li>
<li><a href="libraries/draw.htm#point(in_integer,in_integer,in_color)">const proc: <b>point</b> (in integer: x, in integer: y, in color: col)</a></li>
</ul>
<h3>pointerXPos</h3>
<ul>
<li><a href="libraries/graph.htm#pointerXPos(in_PRIMITIVE_WINDOW)">const func integer: <b>pointerXPos</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
</ul>
<h3>pointerYPos</h3>
<ul>
<li><a href="libraries/graph.htm#pointerYPos(in_PRIMITIVE_WINDOW)">const func integer: <b>pointerYPos</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
</ul>
<h3>polar</h3>
<ul>
<li><a href="libraries/complex.htm#polar(in_float,in_float)">const func complex: <b>polar</b> (in float: magnitude, in float: angle)</a></li>
</ul>
<h3>poll</h3>
<ul>
<li><a href="libraries/poll.htm#poll(inout_pollData)">const proc: <b>poll</b> (inout pollData: pData)</a></li>
</ul>
<h3>poll.s7i</h3>
<ul>
<li><a href="libraries/poll.htm">poll.s7i</a></li>
</ul>
<h3>pollData</h3>
<ul>
<li><a href="libraries/poll.htm#pollData">const type: <b>pollData</b></a></li>
</ul>
<h3>polyLine</h3>
<ul>
<li><a href="libraries/draw.htm#polyLine(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_pointList,in_color)">const proc: <b>polyLine</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in pointList: points, in color: col)</a></li>
<li><a href="libraries/draw.htm#polyLine(in_integer,in_integer,in_pointList,in_color)">const proc: <b>polyLine</b> (in integer: x, in integer: y, in pointList: points, in color: col)</a></li>
</ul>
<h3>popen</h3>
<ul>
<li><a href="libraries/shell.htm#popen(in_string,in_string,in_string)">const func file: <b>popen</b> (in string: command, in string: parameters,
    in string: mode)</a></li>
<li><a href="libraries/shell.htm#popen(in_string,in_string)">const func file: <b>popen</b> (in string: cmdAndParams, in string: mode)</a></li>
<li><a href="libraries/shell.htm#popen(in_string,in_array_string,in_string)">const func file: <b>popen</b> (in string: command, in array string: paramList,
    in string: mode)</a></li>
</ul>
<h3>popen8</h3>
<ul>
<li><a href="libraries/shell.htm#popen8(in_string,in_string,in_string)">const func file: <b>popen8</b> (in string: command, in string: parameters,
    in string: mode)</a></li>
<li><a href="libraries/shell.htm#popen8(in_string,in_string)">const func file: <b>popen8</b> (in string: cmdAndParams, in string: mode)</a></li>
<li><a href="libraries/shell.htm#popen8(in_string,in_array_string,in_string)">const func file: <b>popen8</b> (in string: command, in array string: paramList,
    in string: mode)</a></li>
</ul>
<h3>popen8File</h3>
<ul>
<li><a href="libraries/shell.htm#popen8File">const type: <b>popen8File</b></a></li>
</ul>
<h3>popenFile</h3>
<ul>
<li><a href="libraries/shell.htm#popenFile">const type: <b>popenFile</b></a></li>
</ul>
<h3>pos</h3>
<ul>
<li><a href="libraries/ref_list.htm#pos(in_ref_list,in_reference)">const func integer: <b>pos</b> (in ref_list: main, in reference: searched)</a></li>
<li><a href="libraries/ref_list.htm#pos(in_ref_list,in_reference,in_integer)">const func integer: <b>pos</b> (in ref_list: main, in reference: searched,
                         in integer: start)</a></li>
<li><a href="libraries/string.htm#pos(in_string,in_string)">const func integer: <b>pos</b> (in string: mainStri, in string: searched)</a></li>
<li><a href="libraries/string.htm#pos(in_string,in_char)">const func integer: <b>pos</b> (in string: mainStri, in char: searched)</a></li>
<li><a href="libraries/string.htm#pos(in_string,in_string,in_integer)">const func integer: <b>pos</b> (in string: mainStri, in string: searched,
                         in integer: fromIndex)</a></li>
<li><a href="libraries/string.htm#pos(in_string,in_char,in_integer)">const func integer: <b>pos</b> (in string: mainStri, in char: searched,
                         in integer: fromIndex)</a></li>
</ul>
<h3>ppm.s7i</h3>
<ul>
<li><a href="libraries/ppm.htm">ppm.s7i</a></li>
</ul>
<h3>pred</h3>
<ul>
<li><a href="libraries/bigint.htm#pred(in_bigInteger)">const func bigInteger: <b>pred</b> (in bigInteger: number)</a></li>
<li><a href="libraries/boolean.htm#pred(ref_boolean)">const func boolean: <b>pred</b> (ref boolean: boolValue)</a></li>
<li><a href="libraries/char.htm#pred(in_char)">const func char: <b>pred</b> (in char: ch)</a></li>
<li><a href="libraries/enumeration.htm#pred(in_enumType)">const func enumType: <b>pred</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/integer.htm#pred(in_integer)">const func integer: <b>pred</b> (in integer: number)</a></li>
</ul>
<h3>prepare</h3>
<ul>
<li><a href="libraries/sql_base.htm#prepare(in_database,in_string)">const func sqlStatement: <b>prepare</b> (in database: db, in string: sqlStatementStri)</a></li>
</ul>
<h3>proc</h3>
<ul>
<li><a href="manual/types.htm#proc">proc</a></li>
</ul>
<h3>process</h3>
<ul>
<li><a href="manual/types.htm#process">process</a></li>
<li><a href="libraries/process.htm#process">const type: <b>process</b></a></li>
</ul>
<h3>process.s7i</h3>
<ul>
<li><a href="libraries/process.htm">process.s7i</a></li>
</ul>
<h3>processCcittModifiedGroup3FaxLsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittModifiedGroup3FaxLsb(in_string,in_pixel,in_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittModifiedGroup3FaxLsb</b> (in string: faxData,
    in pixel: whitePixel, in pixel: blackPixel, in integer: startLine,
    in integer: height, in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittModifiedGroup3FaxMsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittModifiedGroup3FaxMsb(in_string,in_pixel,in_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittModifiedGroup3FaxMsb</b> (in string: faxData,
    in pixel: whitePixel, in pixel: blackPixel, in integer: startLine,
    in integer: height, in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittT4Fax1dLsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittT4Fax1dLsb(in_string,in_pixel,in_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittT4Fax1dLsb</b> (in string: faxData,
    in pixel: whitePixel, in pixel: blackPixel, in integer: startLine,
    in integer: height, in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittT4Fax1dMsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittT4Fax1dMsb(in_string,in_pixel,in_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittT4Fax1dMsb</b> (in string: faxData,
    in pixel: whitePixel, in pixel: blackPixel, in integer: startLine,
    in integer: height, in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittT4Fax2dLsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittT4Fax2dLsb(in_string,in_array_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittT4Fax2dLsb</b> (in string: faxData,
    in array pixel: blackOrWhite, in integer: startLine, in integer: height,
    in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittT4Fax2dMsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittT4Fax2dMsb(in_string,in_array_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittT4Fax2dMsb</b> (in string: faxData,
    in array pixel: blackOrWhite, in integer: startLine, in integer: height,
    in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittT6FaxLsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittT6FaxLsb(in_string,in_array_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittT6FaxLsb</b> (in string: faxData,
    in array pixel: blackOrWhite, in integer: startLine, in integer: height,
    in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processCcittT6FaxMsb</h3>
<ul>
<li><a href="libraries/ccittfax.htm#processCcittT6FaxMsb(in_string,in_array_pixel,in_integer,in_integer,in_integer,inout_array_array_pixel)">const proc: <b>processCcittT6FaxMsb</b> (in string: faxData,
    in array pixel: blackOrWhite, in integer: startLine, in integer: height,
    in integer: width, inout array array pixel: image)</a></li>
</ul>
<h3>processGet</h3>
<ul>
<li><a href="libraries/http_response.htm#processGet(inout_httpResposeData,inout_httpRequest)">const proc: <b>processGet</b> (inout httpResposeData: responseData,
    inout httpRequest: request)</a></li>
</ul>
<h3>processPost</h3>
<ul>
<li><a href="libraries/http_response.htm#processPost(in_httpResposeData,inout_httpRequest)">const proc: <b>processPost</b> (in httpResposeData: responseData,
    inout httpRequest: request)</a></li>
</ul>
<h3>program</h3>
<ul>
<li><a href="manual/types.htm#program">program</a></li>
<li><a href="libraries/progs.htm#program">const type: <b>program</b></a></li>
</ul>
<h3>progs.s7i</h3>
<ul>
<li><a href="libraries/progs.htm">progs.s7i</a></li>
</ul>
<h3>propertyDataType</h3>
<ul>
<li><a href="libraries/propertyfile.htm#propertyDataType">const type: <b>propertyDataType</b></a></li>
</ul>
<h3>propertyfile.s7i</h3>
<ul>
<li><a href="libraries/propertyfile.htm">propertyfile.s7i</a></li>
</ul>
<h3>ptr</h3>
<ul>
<li><a href="manual/types.htm#ptr">ptr</a></li>
</ul>
<h3>put</h3>
<ul>
<li><a href="libraries/draw.htm#put(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_PRIMITIVE_WINDOW)">const proc: <b>put</b> (inout PRIMITIVE_WINDOW: destWindow, in integer: xDest,
    in integer: yDest, in PRIMITIVE_WINDOW: pixmap)</a></li>
<li><a href="libraries/draw.htm#put(in_integer,in_integer,in_PRIMITIVE_WINDOW)">const proc: <b>put</b> (in integer: xDest, in integer: yDest,
    in PRIMITIVE_WINDOW: pixmap)</a></li>
<li><a href="libraries/draw.htm#put(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_PRIMITIVE_WINDOW)">const proc: <b>put</b> (inout PRIMITIVE_WINDOW: destWindow, in integer: xDest,
    in integer: yDest, in integer: width, in integer: height,
    in PRIMITIVE_WINDOW: pixmap)</a></li>
</ul>
<h3>putBitLsb</h3>
<ul>
<li><a href="libraries/bitdata.htm#putBitLsb(inout_string,inout_integer,in_integer)">const proc: <b>putBitLsb</b> (inout string: stri, inout integer: bitPos, in integer: bit)</a></li>
<li><a href="libraries/bitdata.htm#putBitLsb(inout_file,inout_integer,in_integer)">const proc: <b>putBitLsb</b> (inout file: outFile, inout integer: bitPos, in integer: bit)</a></li>
</ul>
<h3>putBitMsb</h3>
<ul>
<li><a href="libraries/bitdata.htm#putBitMsb(inout_string,inout_integer,in_integer)">const proc: <b>putBitMsb</b> (inout string: stri, inout integer: bitPos, in integer: bit)</a></li>
<li><a href="libraries/bitdata.htm#putBitMsb(inout_file,inout_integer,in_integer)">const proc: <b>putBitMsb</b> (inout file: outFile, inout integer: bitPos, in integer: bit)</a></li>
</ul>
<h3>putBitsLsb</h3>
<ul>
<li><a href="libraries/bitdata.htm#putBitsLsb(inout_string,inout_integer,in_var_integer,in_var_integer)">const proc: <b>putBitsLsb</b> (inout string: stri, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</a></li>
<li><a href="libraries/bitdata.htm#putBitsLsb(inout_file,inout_integer,in_var_integer,in_var_integer)">const proc: <b>putBitsLsb</b> (inout file: outFile, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</a></li>
</ul>
<h3>putBitsMsb</h3>
<ul>
<li><a href="libraries/bitdata.htm#putBitsMsb(inout_string,inout_integer,in_var_integer,in_var_integer)">const proc: <b>putBitsMsb</b> (inout string: stri, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</a></li>
<li><a href="libraries/bitdata.htm#putBitsMsb(inout_file,inout_integer,in_var_integer,in_var_integer)">const proc: <b>putBitsMsb</b> (inout file: outFile, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</a></li>
</ul>
<h3>putFile</h3>
<ul>
<li><a href="libraries/ar.htm#putFile(inout_arArchive,in_string,in_string)">const proc: <b>putFile</b> (inout arArchive: ar, in string: filePath,
    in string: data)</a></li>
<li><a href="libraries/cpio.htm#putFile(inout_cpioArchive,in_var_string,in_string)">const proc: <b>putFile</b> (inout cpioArchive: cpio, in var string: filePath,
    in string: data)</a></li>
<li><a href="libraries/filesys.htm#putFile(inout_fileSys,in_string,in_string)">const proc: <b>putFile</b> (inout fileSys: fileSystem, in string: filePath, in string: stri)</a></li>
<li><a href="libraries/ftp.htm#putFile(inout_ftpConnection,in_string,in_string)">const proc: <b>putFile</b> (inout ftpConnection: ftp, in string: filePath,
    in string: stri)</a></li>
<li><a href="libraries/rpm.htm#putFile(inout_rpmArchive,in_string,in_string)">const proc: <b>putFile</b> (inout rpmArchive: rpm, in string: filePath,
    in string: data)</a></li>
<li><a href="libraries/tar.htm#putFile(inout_tarArchive,in_var_string,in_string)">const proc: <b>putFile</b> (inout tarArchive: tar, in var string: filePath,
    in string: data)</a></li>
<li><a href="libraries/zip.htm#putFile(inout_zipArchive,in_string,in_string)">const proc: <b>putFile</b> (inout zipArchive: zip, in string: filePath,
    in string: data)</a></li>
</ul>
<h3>putf</h3>
<ul>
<li><a href="libraries/getf.htm#putf(in_string,in_string)">const proc: <b>putf</b> (in string: file_name, in string: stri)</a></li>
</ul>
<h3>quoteHtmlAttrValue</h3>
<ul>
<li><a href="libraries/html_ent.htm#quoteHtmlAttrValue(in_string)">const func string: <b>quoteHtmlAttrValue</b> (in string: stri)</a></li>
</ul>
<h3>radioButton</h3>
<ul>
<li><a href="libraries/cgidialog.htm#radioButton(in_array_string)">const func radioButton: <b>radioButton</b> (in array string: labelList)</a></li>
</ul>
<h3>radix</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_var_bigInteger)radix(in_integer)">const func string: (in var bigInteger: number) <b>radix</b> (in integer: base)</a></li>
<li><a href="libraries/bin32.htm#(in_bin32)radix(in_integer)">const func string: (in bin32: bits) <b>radix</b> (in integer: base)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)radix(in_integer)">const func string: (in bin64: bits) <b>radix</b> (in integer: base)</a></li>
<li><a href="libraries/integer.htm#(in_integer)radix(in_integer)">const func string: (in integer: number) <b>radix</b> (in integer: base)</a></li>
</ul>
<h3>rand</h3>
<ul>
<li><a href="libraries/array.htm#rand(in_arrayType)">const func baseType: <b>rand</b> (in arrayType: arr)</a></li>
<li><a href="libraries/bigint.htm#rand(in_bigInteger,in_bigInteger)">const func bigInteger: <b>rand</b> (in bigInteger: low, in bigInteger: high)</a></li>
<li><a href="libraries/bin32.htm#rand(attr_bin32)">const func bin32: <b>rand</b> (attr bin32)</a></li>
<li><a href="libraries/bin64.htm#rand(attr_bin64)">const func bin64: <b>rand</b> (attr bin64)</a></li>
<li><a href="libraries/bitset.htm#rand(in_bitset)">const func integer: <b>rand</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#rand(in_setType)">const func baseType: <b>rand</b> (in setType: aSet)</a></li>
<li><a href="libraries/boolean.htm#rand(in_boolean,in_boolean)">const func boolean: <b>rand</b> (in boolean: low, in boolean: high)</a></li>
<li><a href="libraries/char.htm#rand(in_char,in_char)">const func char: <b>rand</b> (in char: low, in char: high)</a></li>
<li><a href="libraries/enumeration.htm#rand(in_enumType,in_enumType)">const func enumType: <b>rand</b> (in enumType: low, in enumType: high)</a></li>
<li><a href="libraries/float.htm#rand(in_float,in_float)">const func float: <b>rand</b> (in float: low, in float: high)</a></li>
<li><a href="libraries/hashsetof.htm#rand(in_setType)">const func baseType: <b>rand</b> (in setType: aSet)</a></li>
<li><a href="libraries/integer.htm#rand(in_integer,in_integer)">const func integer: <b>rand</b> (in integer: low, in integer: high)</a></li>
<li><a href="libraries/time.htm#rand(in_time,in_time)">const func time: <b>rand</b> (in time: low, in time: high)</a></li>
</ul>
<h3>rat</h3>
<ul>
<li><a href="libraries/bigrat.htm#rat(in_bigInteger)">const func bigRational: <b>rat</b> (in bigInteger: number)</a></li>
<li><a href="libraries/rational.htm#rat(in_integer)">const func rational: <b>rat</b> (in integer: number)</a></li>
</ul>
<h3>rational</h3>
<ul>
<li><a href="manual/types.htm#rational">rational</a></li>
<li><a href="libraries/rational.htm#rational">const type: <b>rational</b></a></li>
<li><a href="libraries/rational.htm#rational(in_integer)">const func rational: <b>rational</b> (in integer: number)</a></li>
<li><a href="libraries/rational.htm#rational(in_var_string)">const func rational: <b>rational</b> (in var string: stri)</a></li>
</ul>
<h3>rational.s7i</h3>
<ul>
<li><a href="libraries/rational.htm">rational.s7i</a></li>
</ul>
<h3>read</h3>
<ul>
<li><a href="libraries/enable_io.htm#read(inout_file,inout_aType)">const proc: <b>read</b> (inout file: inFile, inout aType: aVar)</a></li>
<li><a href="libraries/enable_io.htm#read(inout_file,inout_aType,in_aType)">const proc: <b>read</b> (inout file: inFile, inout aType: aVar,
        in aType: defaultValue)</a></li>
<li><a href="libraries/enable_io.htm#read(inout_aType)">const proc: <b>read</b> (inout aType: aVar)</a></li>
<li><a href="libraries/enable_io.htm#read(inout_aType,in_aType)">const proc: <b>read</b> (inout aType: aVar, in aType: defaultValue)</a></li>
<li><a href="libraries/file.htm#read(inout_file,inout_string)">const proc: <b>read</b> (inout file: inFile, inout string: aVar)</a></li>
<li><a href="libraries/file.htm#read(inout_file,inout_string,in_string)">const proc: <b>read</b> (inout file: inFile, inout string: aVar,
    in string: defaultValue)</a></li>
<li><a href="libraries/stdio.htm#read(inout_string)">const proc: <b>read</b> (inout string: aVar)</a></li>
<li><a href="libraries/stdio.htm#read(inout_string,in_string)">const proc: <b>read</b> (inout string: aVar, in string: defaultValue)</a></li>
</ul>
<h3>readBmp</h3>
<ul>
<li><a href="libraries/bmp.htm#readBmp(inout_file)">const func PRIMITIVE_WINDOW: <b>readBmp</b> (inout file: bmpFile)</a></li>
<li><a href="libraries/bmp.htm#readBmp(in_string)">const func PRIMITIVE_WINDOW: <b>readBmp</b> (in string: bmpFileName)</a></li>
</ul>
<h3>readCsvLine</h3>
<ul>
<li><a href="libraries/csv.htm#readCsvLine(inout_file,in_char)">const func array string: <b>readCsvLine</b> (inout file: inFile, in char: separator)</a></li>
</ul>
<h3>readDir</h3>
<ul>
<li><a href="manual/os.htm#readDir">readDir</a></li>
<li><a href="libraries/ar.htm#readDir(inout_arArchive,in_string)">const func array string: <b>readDir</b> (inout arArchive: ar, in string: dirPath)</a></li>
<li><a href="libraries/ar.htm#readDir(inout_arArchive,RECURSIVE)">const func array string: <b>readDir</b> (inout arArchive: ar, RECURSIVE)</a></li>
<li><a href="libraries/archive_base.htm#readDir(in_archiveRegisterType,in_string)">const func array string: <b>readDir</b> (in archiveRegisterType: register, in string: dirPath)</a></li>
<li><a href="libraries/cpio.htm#readDir(inout_cpioArchive,in_string)">const func array string: <b>readDir</b> (inout cpioArchive: cpio, in string: dirPath)</a></li>
<li><a href="libraries/cpio.htm#readDir(inout_cpioArchive,RECURSIVE)">const func array string: <b>readDir</b> (inout cpioArchive: cpio, RECURSIVE)</a></li>
<li><a href="libraries/filesys.htm#readDir(inout_fileSys,in_string)">const func array string: <b>readDir</b> (inout fileSys: fileSystem, in string: dirPath)</a></li>
<li><a href="libraries/filesys.htm#readDir(inout_fileSys,in_string,RECURSIVE)">const func array string: <b>readDir</b> (inout fileSys: fileSystem, in string: dirPath,
    RECURSIVE)</a></li>
<li><a href="libraries/filesys.htm#readDir(inout_fileSys)">const func array string: <b>readDir</b> (inout fileSys: fileSystem)</a></li>
<li><a href="libraries/filesys.htm#readDir(inout_fileSys,RECURSIVE)">const func array string: <b>readDir</b> (inout fileSys: fileSystem, RECURSIVE)</a></li>
<li><a href="libraries/filesys.htm#readDir(inout_emptyFileSys,in_var_string,RECURSIVE)">const func array string: <b>readDir</b> (inout emptyFileSys: fileSystem,
    in var string: dirPath, RECURSIVE)</a></li>
<li><a href="libraries/ftp.htm#readDir(inout_ftpConnection,in_string)">const func array string: <b>readDir</b> (inout ftpConnection: ftp, in string: dirPath)</a></li>
<li><a href="libraries/osfiles.htm#readDir(in_string)">const func array string: <b>readDir</b> (in string: dirPath)</a></li>
<li><a href="libraries/rpm.htm#readDir(inout_rpmArchive,in_string)">const func array string: <b>readDir</b> (inout rpmArchive: rpm, in string: dirPath)</a></li>
<li><a href="libraries/rpm.htm#readDir(inout_rpmArchive,RECURSIVE)">const func array string: <b>readDir</b> (inout rpmArchive: rpm, RECURSIVE)</a></li>
<li><a href="libraries/tar.htm#readDir(inout_tarArchive,in_string)">const func array string: <b>readDir</b> (inout tarArchive: tar, in string: dirPath)</a></li>
<li><a href="libraries/tar.htm#readDir(inout_tarArchive,RECURSIVE)">const func array string: <b>readDir</b> (inout tarArchive: tar, RECURSIVE)</a></li>
<li><a href="libraries/zip.htm#readDir(inout_zipArchive,in_var_string)">const func array string: <b>readDir</b> (inout zipArchive: zip, in var string: dirPath)</a></li>
<li><a href="libraries/zip.htm#readDir(inout_zipArchive,RECURSIVE)">const func array string: <b>readDir</b> (inout zipArchive: zip, RECURSIVE)</a></li>
</ul>
<h3>readGif</h3>
<ul>
<li><a href="libraries/gif.htm#readGif(inout_file)">const func PRIMITIVE_WINDOW: <b>readGif</b> (inout file: gifFile)</a></li>
<li><a href="libraries/gif.htm#readGif(in_string)">const func PRIMITIVE_WINDOW: <b>readGif</b> (in string: gifFileName)</a></li>
</ul>
<h3>readHtml</h3>
<ul>
<li><a href="libraries/htmldom.htm#readHtml(inout_file)">const func htmlDocument: <b>readHtml</b> (inout file: inFile)</a></li>
<li><a href="libraries/htmldom.htm#readHtml(in_string)">const func htmlDocument: <b>readHtml</b> (in string: htmlStri)</a></li>
</ul>
<h3>readIco</h3>
<ul>
<li><a href="libraries/ico.htm#readIco(inout_file)">const func PRIMITIVE_WINDOW: <b>readIco</b> (inout file: icoFile)</a></li>
<li><a href="libraries/ico.htm#readIco(in_string)">const func PRIMITIVE_WINDOW: <b>readIco</b> (in string: icoFileName)</a></li>
</ul>
<h3>readImage</h3>
<ul>
<li><a href="libraries/imagefile.htm#readImage(inout_file)">const func PRIMITIVE_WINDOW: <b>readImage</b> (inout file: imageFile)</a></li>
<li><a href="libraries/imagefile.htm#readImage(in_string)">const func PRIMITIVE_WINDOW: <b>readImage</b> (in string: imageFileName)</a></li>
</ul>
<h3>readIniFile</h3>
<ul>
<li><a href="libraries/inifile.htm#readIniFile(inout_file)">const func iniDataType: <b>readIniFile</b> (inout file: inFile)</a></li>
<li><a href="libraries/inifile.htm#readIniFile(in_string)">const func iniDataType: <b>readIniFile</b> (in string: fileName)</a></li>
</ul>
<h3>readJpeg</h3>
<ul>
<li><a href="libraries/jpeg.htm#readJpeg(inout_file)">const func PRIMITIVE_WINDOW: <b>readJpeg</b> (inout file: jpegFile)</a></li>
<li><a href="libraries/jpeg.htm#readJpeg(in_string)">const func PRIMITIVE_WINDOW: <b>readJpeg</b> (in string: jpegFileName)</a></li>
</ul>
<h3>readLink</h3>
<ul>
<li><a href="manual/os.htm#readLink">readLink</a></li>
<li><a href="libraries/cpio.htm#readLink(inout_cpioArchive,in_string)">const func string: <b>readLink</b> (inout cpioArchive: cpio, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#readLink(inout_fileSys,in_string)">const func string: <b>readLink</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#readLink(in_string)">const func string: <b>readLink</b> (in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#readLink(in_string,ABSOLUTE)">const func string: <b>readLink</b> (in string: filePath, ABSOLUTE)</a></li>
<li><a href="libraries/rpm.htm#readLink(inout_rpmArchive,in_string)">const func string: <b>readLink</b> (inout rpmArchive: rpm, in string: filePath)</a></li>
<li><a href="libraries/tar.htm#readLink(inout_tarArchive,in_string)">const func string: <b>readLink</b> (inout tarArchive: tar, in string: filePath)</a></li>
</ul>
<h3>readPemObject</h3>
<ul>
<li><a href="libraries/pem.htm#readPemObject(inout_file)">const func pemObject: <b>readPemObject</b> (inout file: pemFile)</a></li>
</ul>
<h3>readPng</h3>
<ul>
<li><a href="libraries/png.htm#readPng(inout_file)">const func PRIMITIVE_WINDOW: <b>readPng</b> (inout file: pngFile)</a></li>
<li><a href="libraries/png.htm#readPng(in_string)">const func PRIMITIVE_WINDOW: <b>readPng</b> (in string: pngFileName)</a></li>
</ul>
<h3>readPpm</h3>
<ul>
<li><a href="libraries/ppm.htm#readPpm(inout_file)">const func PRIMITIVE_WINDOW: <b>readPpm</b> (inout file: ppmFile)</a></li>
<li><a href="libraries/ppm.htm#readPpm(in_string)">const func PRIMITIVE_WINDOW: <b>readPpm</b> (in string: ppmFileName)</a></li>
</ul>
<h3>readPropertyFile</h3>
<ul>
<li><a href="libraries/propertyfile.htm#readPropertyFile(inout_file)">const func propertyDataType: <b>readPropertyFile</b> (inout file: inFile)</a></li>
<li><a href="libraries/propertyfile.htm#readPropertyFile(in_string)">const func propertyDataType: <b>readPropertyFile</b> (in string: fileName)</a></li>
</ul>
<h3>readPropertyFile8</h3>
<ul>
<li><a href="libraries/propertyfile.htm#readPropertyFile8(in_string)">const func propertyDataType: <b>readPropertyFile8</b> (in string: fileName)</a></li>
</ul>
<h3>readRule</h3>
<ul>
<li><a href="libraries/makedata.htm#readRule(inout_makeDataType,in_string)">const func ruleType: <b>readRule</b> (inout makeDataType: makeData, in string: target)</a></li>
</ul>
<h3>readTiff</h3>
<ul>
<li><a href="libraries/tiff.htm#readTiff(inout_file)">const func PRIMITIVE_WINDOW: <b>readTiff</b> (inout file: tiffFile)</a></li>
<li><a href="libraries/tiff.htm#readTiff(in_string)">const func PRIMITIVE_WINDOW: <b>readTiff</b> (in string: tiffFileName)</a></li>
</ul>
<h3>readXml</h3>
<ul>
<li><a href="libraries/xmldom.htm#readXml(inout_file)">const func xmlNode: <b>readXml</b> (inout file: inFile)</a></li>
<li><a href="libraries/xmldom.htm#readXml(in_string)">const func xmlNode: <b>readXml</b> (in string: xmlStri)</a></li>
</ul>
<h3>readf</h3>
<ul>
<li><a href="libraries/getf.htm#readf(in_string)">const func array string: <b>readf</b> (in string: file_name)</a></li>
</ul>
<h3>readln</h3>
<ul>
<li><a href="libraries/enable_io.htm#readln(inout_file,inout_aType)">const proc: <b>readln</b> (inout file: inFile, inout aType: aVar)</a></li>
<li><a href="libraries/enable_io.htm#readln(inout_file,inout_aType,in_aType)">const proc: <b>readln</b> (inout file: inFile, inout aType: aVar,
        in aType: defaultValue)</a></li>
<li><a href="libraries/enable_io.htm#readln(inout_aType)">const proc: <b>readln</b> (inout aType: aVar)</a></li>
<li><a href="libraries/enable_io.htm#readln(inout_aType,in_aType)">const proc: <b>readln</b> (inout aType: aVar, in aType: defaultValue)</a></li>
<li><a href="libraries/file.htm#readln(inout_file,inout_string)">const proc: <b>readln</b> (inout file: inFile, inout string: aVar)</a></li>
<li><a href="libraries/file.htm#readln(inout_file,inout_string,in_string)">const proc: <b>readln</b> (inout file: inFile, inout string: aVar,
    in string: defaultValue)</a></li>
<li><a href="libraries/file.htm#readln(inout_file)">const proc: <b>readln</b> (inout file: inFile)</a></li>
<li><a href="libraries/stdio.htm#readln(inout_string)">const proc: <b>readln</b> (inout string: aVar)</a></li>
<li><a href="libraries/stdio.htm#readln(inout_string,in_string)">const proc: <b>readln</b> (inout string: aVar, in string: defaultValue)</a></li>
<li><a href="libraries/stdio.htm#readln">const proc: <b>readln</b></a></li>
</ul>
<h3>rect</h3>
<ul>
<li><a href="libraries/draw.htm#rect(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>rect</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: width, in integer: height, in color: col)</a></li>
<li><a href="libraries/draw.htm#rect(in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>rect</b> (in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</a></li>
</ul>
<h3>rectTo</h3>
<ul>
<li><a href="libraries/draw.htm#rectTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>rectTo</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</a></li>
<li><a href="libraries/draw.htm#rectTo(in_integer,in_integer,in_integer,in_integer,in_color)">const proc: <b>rectTo</b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</a></li>
</ul>
<h3>ref_list</h3>
<ul>
<li><a href="manual/types.htm#ref_list">ref_list</a></li>
<li><a href="libraries/ref_list.htm#ref_list">const type: <b>ref_list</b></a></li>
</ul>
<h3>ref_list.s7i</h3>
<ul>
<li><a href="libraries/ref_list.htm">ref_list.s7i</a></li>
</ul>
<h3>reference</h3>
<ul>
<li><a href="manual/types.htm#reference">reference</a></li>
<li><a href="libraries/reference.htm#reference">const type: <b>reference</b></a></li>
</ul>
<h3>reference.s7i</h3>
<ul>
<li><a href="libraries/reference.htm">reference.s7i</a></li>
</ul>
<h3>reflect</h3>
<ul>
<li><a href="libraries/vector3d.htm#reflect(in_vector3d,in_vector3d)">const func vector3d: <b>reflect</b> (in vector3d: vect, in vector3d: normal)</a></li>
</ul>
<h3>rem</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">const func bigInteger: (in bigInteger: dividend) <b>rem</b> (in bigInteger: divisor)</a></li>
<li><a href="libraries/float.htm#(in_float)rem(in_float)">const func float: (in float: dividend) <b>rem</b> (in float: divisor)</a></li>
<li><a href="libraries/integer.htm#(in_integer)rem(in_integer)">const func integer: (in integer: dividend) <b>rem</b> (in integer: divisor)</a></li>
</ul>
<h3>remove</h3>
<ul>
<li><a href="libraries/array.htm#remove(inout_arrayType,in_integer)">const func baseType: <b>remove</b> (inout arrayType: arr, in integer: index)</a></li>
<li><a href="libraries/array.htm#remove(inout_arrayType,in_integer,in_integer)">const func arrayType: <b>remove</b> (inout arrayType: arr, in integer: index,
                                    in integer: length)</a></li>
</ul>
<h3>removeCheck</h3>
<ul>
<li><a href="libraries/poll.htm#removeCheck(inout_pollData,in_PRIMITIVE_SOCKET,in_integer)">const proc: <b>removeCheck</b> (inout pollData: pData, in PRIMITIVE_SOCKET: aSocket,
                      in integer: eventsToCheck)</a></li>
<li><a href="libraries/poll.htm#removeCheck(inout_pollData,in_file,in_integer)">const proc: <b>removeCheck</b> (inout pollData: pData, in file: aFile,
                         in integer: eventsToCheck)</a></li>
</ul>
<h3>removeFile</h3>
<ul>
<li><a href="manual/os.htm#removeFile">removeFile</a></li>
<li><a href="libraries/ar.htm#removeFile(inout_arArchive,in_string)">const proc: <b>removeFile</b> (inout arArchive: ar, in string: filePath)</a></li>
<li><a href="libraries/filesys.htm#removeFile(inout_fileSys,in_string)">const proc: <b>removeFile</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/ftp.htm#removeFile(inout_ftpConnection,in_string)">const proc: <b>removeFile</b> (inout ftpConnection: ftp, in string: fileName)</a></li>
<li><a href="libraries/osfiles.htm#removeFile(in_string)">const proc: <b>removeFile</b> (in string: filePath)</a></li>
</ul>
<h3>removeTree</h3>
<ul>
<li><a href="manual/os.htm#removeTree">removeTree</a></li>
<li><a href="libraries/filesys.htm#removeTree(inout_fileSys,in_string)">const proc: <b>removeTree</b> (inout fileSys: fileSystem, in string: filePath)</a></li>
<li><a href="libraries/osfiles.htm#removeTree(in_string)">const proc: <b>removeTree</b> (in string: filePath)</a></li>
</ul>
<h3>repeat-statement</h3>
<ul>
<li><a href="manual/stats.htm#repeat-statement">repeat-statement</a></li>
</ul>
<h3>replace</h3>
<ul>
<li><a href="libraries/string.htm#replace(in_string,in_string,in_string)">const func string: <b>replace</b> (in string: mainStri, in string: searched,
                            in string: replacement)</a></li>
</ul>
<h3>replace1</h3>
<ul>
<li><a href="libraries/string.htm#replace1(in_string,in_string,in_string)">const func string: <b>replace1</b> (in string: mainStri, in string: searched,
    in string: replacement)</a></li>
</ul>
<h3>replace2</h3>
<ul>
<li><a href="libraries/string.htm#replace2(in_string,in_string,in_string,in_string)">const func string: <b>replace2</b> (in string: mainStri, in string: search1,
    in string: search2, in string: replacement)</a></li>
</ul>
<h3>replaceN</h3>
<ul>
<li><a href="libraries/string.htm#replaceN(in_string,in_string,in_string)">const func string: <b>replaceN</b> (in string: mainStri, in string: searched,
                             in string: replacement)</a></li>
</ul>
<h3>replaceUtf16SurrogatePairs</h3>
<ul>
<li><a href="libraries/unicode.htm#replaceUtf16SurrogatePairs(in_string)">const func string: <b>replaceUtf16SurrogatePairs</b> (in string: stri)</a></li>
</ul>
<h3>resetButton</h3>
<ul>
<li><a href="libraries/cgidialog.htm#resetButton(in_string)">const func resetButton: <b>resetButton</b> (in string: label)</a></li>
<li><a href="libraries/cgidialog.htm#resetButton(in_PRIMITIVE_WINDOW)">const func resetButton: <b>resetButton</b> (in PRIMITIVE_WINDOW: pixmap)</a></li>
<li><a href="libraries/cgidialog.htm#resetButton(in_dialogElement)">const func resetButton: <b>resetButton</b> (in dialogElement: element)</a></li>
</ul>
<h3>resultInitValue</h3>
<ul>
<li><a href="libraries/progs.htm#resultInitValue(in_reference)">const func reference: <b>resultInitValue</b> (in reference: funcRef)</a></li>
</ul>
<h3>resultVar</h3>
<ul>
<li><a href="libraries/progs.htm#resultVar(in_reference)">const func reference: <b>resultVar</b> (in reference: funcRef)</a></li>
</ul>
<h3>reverse</h3>
<ul>
<li><a href="libraries/string.htm#reverse(in_string)">const func string: <b>reverse</b> (in string: stri)</a></li>
</ul>
<h3>reverseBitStream</h3>
<ul>
<li><a href="libraries/bitdata.htm#reverseBitStream">const type: <b>reverseBitStream</b></a></li>
<li><a href="libraries/bitdata.htm#reverseBitStream(inout_file,in_integer)">const func reverseBitStream: <b>reverseBitStream</b> (inout file: inFile, in integer: length)</a></li>
</ul>
<h3>reverseBits</h3>
<ul>
<li><a href="libraries/bitdata.htm#reverseBits">const array array integer: <b>reverseBits</b></a></li>
</ul>
<h3>rgbPixel</h3>
<ul>
<li><a href="libraries/graph.htm#rgbPixel(ref_integer,ref_integer,ref_integer)">const func pixel: <b>rgbPixel</b> (ref integer: red,
    ref integer: green, ref integer: blue)</a></li>
</ul>
<h3>ripemd160</h3>
<ul>
<li><a href="libraries/msgdigest.htm#ripemd160(in_var_string)">const func string: <b>ripemd160</b> (in var string: message)</a></li>
</ul>
<h3>rmdir</h3>
<ul>
<li><a href="libraries/filesys.htm#rmdir(inout_fileSys,in_string)">const proc: <b>rmdir</b> (inout fileSys: fileSystem, in string: dirPath)</a></li>
<li><a href="libraries/ftp.htm#rmdir(inout_ftpConnection,in_string)">const proc: <b>rmdir</b> (inout ftpConnection: ftp, in string: dirName)</a></li>
</ul>
<h3>rollback</h3>
<ul>
<li><a href="libraries/sql_base.htm#rollback(in_database)">const proc: <b>rollback</b> (in database: db)</a></li>
</ul>
<h3>rotLeft</h3>
<ul>
<li><a href="libraries/bin32.htm#rotLeft(in_bin32,in_integer)">const func bin32: <b>rotLeft</b> (in bin32: x, in integer: shiftCount)</a></li>
<li><a href="libraries/bin64.htm#rotLeft(in_bin64,in_integer)">const func bin64: <b>rotLeft</b> (in bin64: x, in integer: shiftCount)</a></li>
</ul>
<h3>rotRight</h3>
<ul>
<li><a href="libraries/bin32.htm#rotRight(in_bin32,in_integer)">const func bin32: <b>rotRight</b> (in bin32: x, in integer: shiftCount)</a></li>
<li><a href="libraries/bin64.htm#rotRight(in_bin64,in_integer)">const func bin64: <b>rotRight</b> (in bin64: x, in integer: shiftCount)</a></li>
</ul>
<h3>round</h3>
<ul>
<li><a href="libraries/bigrat.htm#round(in_bigRational)">const func bigInteger: <b>round</b> (in bigRational: number)</a></li>
<li><a href="libraries/float.htm#round(in_float)">const func integer: <b>round</b> (in float: number)</a></li>
<li><a href="libraries/rational.htm#round(in_rational)">const func integer: <b>round</b> (in rational: number)</a></li>
</ul>
<h3>round10</h3>
<ul>
<li><a href="libraries/bigrat.htm#round10(in_bigRational,in_integer)">const func bigRational: <b>round10</b> (in bigRational: number, in integer: precision)</a></li>
<li><a href="libraries/rational.htm#round10(in_rational,in_integer)">const func rational: <b>round10</b> (in rational: number, in integer: precision)</a></li>
</ul>
<h3>rpad</h3>
<ul>
<li><a href="libraries/enable_io.htm#(in_aType)rpad(in_integer)">const func string: (in aType: aValue) <b>rpad</b> (in integer: leng)</a></li>
<li><a href="libraries/string.htm#(in_string)rpad(in_integer)">const func string: (in string: stri) <b>rpad</b> (in integer: length)</a></li>
</ul>
<h3>rpm.s7i</h3>
<ul>
<li><a href="libraries/rpm.htm">rpm.s7i</a></li>
</ul>
<h3>rpmArchive</h3>
<ul>
<li><a href="libraries/rpm.htm#rpmArchive">const type: <b>rpmArchive</b></a></li>
</ul>
<h3>rpos</h3>
<ul>
<li><a href="libraries/string.htm#rpos(in_string,in_string)">const func integer: <b>rpos</b> (in string: mainStri, in string: searched)</a></li>
<li><a href="libraries/string.htm#rpos(in_string,in_char)">const func integer: <b>rpos</b> (in string: mainStri, in char: searched)</a></li>
<li><a href="libraries/string.htm#rpos(in_string,in_string,in_integer)">const func integer: <b>rpos</b> (in string: mainStri, in string: searched,
                          in integer: fromIndex)</a></li>
<li><a href="libraries/string.htm#rpos(in_string,in_char,in_integer)">const func integer: <b>rpos</b> (in string: mainStri, in char: searched,
                          in integer: fromIndex)</a></li>
</ul>
<h3>rsaDecrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaDecrypt(in_rsaKey,in_bigInteger)">const func bigInteger: <b>rsaDecrypt</b> (in rsaKey: decryptionKey, in bigInteger: ciphertext)</a></li>
</ul>
<h3>rsaEncrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaEncrypt(in_rsaKey,in_bigInteger)">const func bigInteger: <b>rsaEncrypt</b> (in rsaKey: encryptionKey, in bigInteger: message)</a></li>
</ul>
<h3>rsaKey</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaKey(in_bigInteger,in_bigInteger)">const func rsaKey: <b>rsaKey</b> (in bigInteger: modulus, in bigInteger: exponent)</a></li>
</ul>
<h3>rsaKeyPair</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaKeyPair">const type: <b>rsaKeyPair</b></a></li>
<li><a href="libraries/pkcs1.htm#rsaKeyPair(in_rsaKey,in_rsaKey)">const func rsaKeyPair: <b>rsaKeyPair</b> (in rsaKey: publicKey, in rsaKey: privateKey)</a></li>
<li><a href="libraries/pkcs1.htm#rsaKeyPair(in_bigInteger,in_bigInteger,in_bigInteger)">const func rsaKeyPair: <b>rsaKeyPair</b> (in bigInteger: modulus,
    in bigInteger: publicExponent, in bigInteger: privateExponent)</a></li>
</ul>
<h3>rsaesOaepDecrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaesOaepDecrypt(in_rsaKey,in_string,in_string)">const func string: <b>rsaesOaepDecrypt</b> (in rsaKey: decryptionKey, in string: ciphertext,
    in string: label)</a></li>
</ul>
<h3>rsaesOaepEncrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaesOaepEncrypt(in_rsaKey,in_string,in_string)">const func string: <b>rsaesOaepEncrypt</b> (in rsaKey: encryptionKey, in string: message,
    in string: label)</a></li>
</ul>
<h3>rsaesPkcs1V15Decrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaesPkcs1V15Decrypt(in_rsaKey,in_string)">const func string: <b>rsaesPkcs1V15Decrypt</b> (in rsaKey: decryptionKey, in string: ciphertext)</a></li>
</ul>
<h3>rsaesPkcs1V15Encrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsaesPkcs1V15Encrypt(in_rsaKey,in_string)">const func string: <b>rsaesPkcs1V15Encrypt</b> (in rsaKey: encryptionKey, in string: message)</a></li>
</ul>
<h3>rsassaPkcs1V15Decrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsassaPkcs1V15Decrypt(in_rsaKey,in_string)">const func string: <b>rsassaPkcs1V15Decrypt</b> (in rsaKey: decryptionKey, in string: ciphertext)</a></li>
</ul>
<h3>rsassaPkcs1V15Encrypt</h3>
<ul>
<li><a href="libraries/pkcs1.htm#rsassaPkcs1V15Encrypt(in_rsaKey,in_string)">const func string: <b>rsassaPkcs1V15Encrypt</b> (in rsaKey: encryptionKey, in string: message)</a></li>
</ul>
<h3>rtrim</h3>
<ul>
<li><a href="libraries/string.htm#rtrim(in_string)">const func string: <b>rtrim</b> (in string: stri)</a></li>
</ul>
<h3>ruleType</h3>
<ul>
<li><a href="libraries/makedata.htm#ruleType">const type: <b>ruleType</b></a></li>
</ul>
<h3>s7c.sd7</h3>
<ul>
<li><a href="scrshots/s7c.htm">Seed7 compiler</a></li>
</ul>
<h3>savehd7.sd7</h3>
<ul>
<li><a href="scrshots/savehd7.htm">Save a harddisk partition</a></li>
</ul>
<h3>scanfile.s7i</h3>
<ul>
<li><a href="libraries/scanfile.htm">scanfile.s7i</a></li>
</ul>
<h3>scanstri.s7i</h3>
<ul>
<li><a href="libraries/scanstri.htm">scanstri.s7i</a></li>
</ul>
<h3>sci</h3>
<ul>
<li><a href="libraries/bigint.htm#(in_bigInteger)sci(in_integer)">const func string: (in bigInteger: number) <b>sci</b> (in integer: precision)</a></li>
<li><a href="libraries/bigrat.htm#(in_bigRational)sci(in_integer)">const func string: (in bigRational: number) <b>sci</b> (in integer: precision)</a></li>
<li><a href="libraries/complex.htm#(in_complex)sci(in_integer)">const func string: (in complex: number) <b>sci</b> (in integer: precision)</a></li>
<li><a href="libraries/float.htm#(in_float)sci(in_integer)">const func string: (in float: number) <b>sci</b> (in integer: precision)</a></li>
<li><a href="libraries/integer.htm#(in_integer)sci(in_integer)">const func string: (in integer: number) <b>sci</b> (in integer: precision)</a></li>
<li><a href="libraries/rational.htm#(in_rational)sci(in_integer)">const func string: (in rational: number) <b>sci</b> (in integer: precision)</a></li>
</ul>
<h3>screen</h3>
<ul>
<li><a href="libraries/draw.htm#screen(in_integer,in_integer)">const proc: <b>screen</b> (in integer: width, in integer: height)</a></li>
</ul>
<h3>screenHeight</h3>
<ul>
<li><a href="libraries/graph.htm#screenHeight">const func integer: <b>screenHeight</b></a></li>
</ul>
<h3>screenWidth</h3>
<ul>
<li><a href="libraries/graph.htm#screenWidth">const func integer: <b>screenWidth</b></a></li>
</ul>
<h3>secp192k1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp192k1">const ellipticCurve: <b>secp192k1</b></a></li>
</ul>
<h3>secp192r1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp192r1">const ellipticCurve: <b>secp192r1</b></a></li>
</ul>
<h3>secp224k1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp224k1">const ellipticCurve: <b>secp224k1</b></a></li>
</ul>
<h3>secp224r1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp224r1">const ellipticCurve: <b>secp224r1</b></a></li>
</ul>
<h3>secp256k1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp256k1">const ellipticCurve: <b>secp256k1</b></a></li>
</ul>
<h3>secp256r1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp256r1">const ellipticCurve: <b>secp256r1</b></a></li>
</ul>
<h3>secp384r1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp384r1">const ellipticCurve: <b>secp384r1</b></a></li>
</ul>
<h3>secp521r1</h3>
<ul>
<li><a href="libraries/elliptic.htm#secp521r1">const ellipticCurve: <b>secp521r1</b></a></li>
</ul>
<h3>seek</h3>
<ul>
<li><a href="libraries/bigfile.htm#seek(ref_null_file,ref_bigInteger)">const proc: <b>seek</b> (ref null_file: aFile, ref bigInteger: position)</a></li>
<li><a href="libraries/bigfile.htm#seek(ref_external_file,in_bigInteger)">const proc: <b>seek</b> (ref external_file: aFile, in bigInteger: position)</a></li>
<li><a href="libraries/clib_file.htm#seek(in_clib_file,in_integer)">const proc: <b>seek</b> (in clib_file: aFile, in integer: position)</a></li>
<li><a href="libraries/external_file.htm#seek(in_external_file,in_integer)">const proc: <b>seek</b> (in external_file: aFile, in integer: position)</a></li>
<li><a href="libraries/file.htm#seek(inout_file,in_integer)">const proc: <b>seek</b> (inout file: aFile, in integer: position)</a></li>
<li><a href="libraries/gzip.htm#seek(inout_gzipFile,in_integer)">const proc: <b>seek</b> (inout gzipFile: aFile, in integer: position)</a></li>
<li><a href="libraries/iobuffer.htm#seek(inout_bufferFile,in_integer)">const proc: <b>seek</b> (inout bufferFile: aBufferFile, in integer: position)</a></li>
<li><a href="libraries/lzma.htm#seek(inout_lzmaFile,in_integer)">const proc: <b>seek</b> (inout lzmaFile: aFile, in integer: position)</a></li>
<li><a href="libraries/null_file.htm#seek(in_null_file,in_integer)">const proc: <b>seek</b> (in null_file: aFile, in integer: position)</a></li>
<li><a href="libraries/strifile.htm#seek(inout_striFile,in_integer)">const proc: <b>seek</b> (inout striFile: aStriFile, in integer: position)</a></li>
<li><a href="libraries/subfile.htm#seek(inout_subFile,in_integer)">const proc: <b>seek</b> (inout subFile: aSubFile, in integer: position)</a></li>
<li><a href="libraries/utf16.htm#seek(in_utf16File,in_integer)">const proc: <b>seek</b> (in utf16File: aFile, in integer: position)</a></li>
<li><a href="libraries/utf8.htm#seek(in_utf8File,in_integer)">const proc: <b>seek</b> (in utf8File: aFile, in integer: position)</a></li>
<li><a href="libraries/xz.htm#seek(inout_xzFile,in_integer)">const proc: <b>seek</b> (inout xzFile: aFile, in integer: position)</a></li>
<li><a href="libraries/zstd.htm#seek(inout_zstdFile,in_integer)">const proc: <b>seek</b> (inout zstdFile: aFile, in integer: position)</a></li>
</ul>
<h3>seekable</h3>
<ul>
<li><a href="libraries/clib_file.htm#seekable(in_clib_file)">const func boolean: <b>seekable</b> (in clib_file: aFile)</a></li>
<li><a href="libraries/external_file.htm#seekable(in_external_file)">const func boolean: <b>seekable</b> (in external_file: aFile)</a></li>
<li><a href="libraries/file.htm#seekable(in_file)">const func boolean: <b>seekable</b> (in file: aFile)</a></li>
<li><a href="libraries/gzip.htm#seekable(in_gzipFile)">const boolean: <b>seekable</b> (in gzipFile: aFile)</a></li>
<li><a href="libraries/iobuffer.htm#seekable(in_bufferFile)">const func boolean: <b>seekable</b> (in bufferFile: aBufferFile)</a></li>
<li><a href="libraries/lzma.htm#seekable(in_lzmaFile)">const boolean: <b>seekable</b> (in lzmaFile: aFile)</a></li>
<li><a href="libraries/null_file.htm#seekable(in_null_file)">const boolean: <b>seekable</b> (in null_file: aFile)</a></li>
<li><a href="libraries/strifile.htm#seekable(in_striFile)">const boolean: <b>seekable</b> (in striFile: aFile)</a></li>
<li><a href="libraries/subfile.htm#seekable(in_subFile)">const boolean: <b>seekable</b> (in subFile: aFile)</a></li>
<li><a href="libraries/utf16.htm#seekable(in_utf16File)">const func boolean: <b>seekable</b> (in utf16File: aFile)</a></li>
<li><a href="libraries/xz.htm#seekable(in_xzFile)">const boolean: <b>seekable</b> (in xzFile: aFile)</a></li>
<li><a href="libraries/zstd.htm#seekable(in_zstdFile)">const boolean: <b>seekable</b> (in zstdFile: aFile)</a></li>
</ul>
<h3>selectInput</h3>
<ul>
<li><a href="libraries/graph.htm#selectInput(in_PRIMITIVE_WINDOW,in_char,in_boolean)">const proc: <b>selectInput</b> (in PRIMITIVE_WINDOW: aWindow, in char: aKey,
                         in boolean: active)</a></li>
</ul>
<h3>selection</h3>
<ul>
<li><a href="libraries/cgidialog.htm#selection(in_integer,in_array_string)">const func selection: <b>selection</b> (in integer: size, in array string: labelList)</a></li>
</ul>
<h3>self.sd7</h3>
<ul>
<li><a href="scrshots/self.htm">A program that writes itself</a></li>
</ul>
<h3>selfSignedX509Cert</h3>
<ul>
<li><a href="libraries/x509cert.htm#selfSignedX509Cert(in_rsaKeyPair,in_bigInteger,in_string,in_string,in_string,in_string,in_string,in_x509Validity)">const func certAndKey: <b>selfSignedX509Cert</b> (in rsaKeyPair: keyPair,
    in bigInteger: serialNumber, in string: commonName, in string: country,
    in string: locality, in string: organization,
    in string: organizationUnit, in x509Validity: validity)</a></li>
<li><a href="libraries/x509cert.htm#selfSignedX509Cert(in_string,in_string,in_string,in_string,in_string)">const func certAndKey: <b>selfSignedX509Cert</b> (in string: commonName,
    in string: country, in string: locality, in string: organization,
    in string: organizationUnit)</a></li>
<li><a href="libraries/x509cert.htm#selfSignedX509Cert(in_eccKeyPair,in_bigInteger,in_string,in_string,in_string,in_string,in_string,in_x509Validity)">const func certAndKey: <b>selfSignedX509Cert</b> (in eccKeyPair: keyPair,
    in bigInteger: serialNumber, in string: commonName, in string: country,
    in string: locality, in string: organization,
    in string: organizationUnit, in x509Validity: validity)</a></li>
</ul>
<h3>send</h3>
<ul>
<li><a href="libraries/smtp.htm#send(inout_smtpConnection,in_string,in_array_string,in_smtpMessage)">const proc: <b>send</b> (inout smtpConnection: smtp, in string: fromAddr,
                  in array string: toAddrs, in smtpMessage: message)</a></li>
<li><a href="libraries/smtp.htm#send(inout_smtpConnection,in_smtpMessage)">const proc: <b>send</b> (inout smtpConnection: smtp, in smtpMessage: message)</a></li>
</ul>
<h3>set</h3>
<ul>
<li><a href="manual/types.htm#set">set</a></li>
</ul>
<h3>set of</h3>
<ul>
<li><a href="libraries/bitset.htm#set_of(attr_integer)">const type: <b>set of</b> (attr integer)</a></li>
<li><a href="libraries/set.htm#set_of(in_type)">const func type: <b>set of</b> (in type: baseType)</a></li>
</ul>
<h3>set.s7i</h3>
<ul>
<li><a href="libraries/set.htm">set.s7i</a></li>
</ul>
<h3>setATime</h3>
<ul>
<li><a href="manual/os.htm#setATime">setATime</a></li>
<li><a href="libraries/osfiles.htm#setATime(in_string,in_time)">const proc: <b>setATime</b> (in string: filePath, in time: aTime)</a></li>
</ul>
<h3>setActiveMode</h3>
<ul>
<li><a href="libraries/ftp.htm#setActiveMode(inout_ftpConnection,in_boolean)">const proc: <b>setActiveMode</b> (inout ftpConnection: ftp, in boolean: activeMode)</a></li>
</ul>
<h3>setAesGcmKey</h3>
<ul>
<li><a href="libraries/aes_gcm.htm#setAesGcmKey(in_string,in_string)">const func aesGcmState: <b>setAesGcmKey</b> (in string: aesKey,
    in string: initializationVector)</a></li>
</ul>
<h3>setAesKey</h3>
<ul>
<li><a href="libraries/aes.htm#setAesKey(in_string,in_string)">const func aesState: <b>setAesKey</b> (in string: aesKey, in string: initializationVector)</a></li>
</ul>
<h3>setArc4Key</h3>
<ul>
<li><a href="libraries/arc4.htm#setArc4Key(in_string)">const func arc4State: <b>setArc4Key</b> (in string: arc4Key)</a></li>
</ul>
<h3>setAsciiTransfer</h3>
<ul>
<li><a href="libraries/ftp.htm#setAsciiTransfer(inout_ftpConnection,in_boolean)">const proc: <b>setAsciiTransfer</b> (inout ftpConnection: ftp, in boolean: asciiTransfer)</a></li>
</ul>
<h3>setAutoCommit</h3>
<ul>
<li><a href="libraries/sql_base.htm#setAutoCommit(in_database,in_boolean)">const proc: <b>setAutoCommit</b> (in database: db, in boolean: autoCommit)</a></li>
</ul>
<h3>setBlowfishKey</h3>
<ul>
<li><a href="libraries/blowfish.htm#setBlowfishKey(in_string)">const func blowfishState: <b>setBlowfishKey</b> (in string: blowfishKey)</a></li>
</ul>
<h3>setCategory</h3>
<ul>
<li><a href="libraries/progs.htm#setCategory(in_reference,in_category)">const proc: <b>setCategory</b> (in reference: aReference,
                         in category: aCategory)</a></li>
</ul>
<h3>setCipherKey</h3>
<ul>
<li><a href="libraries/aes.htm#setCipherKey(AES,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (AES, in string: cipherKey,
    in string: initializationVector)</a></li>
<li><a href="libraries/aes_gcm.htm#setCipherKey(AES_GCM,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (AES_GCM, in string: cipherKey,
    in string: initializationVector)</a></li>
<li><a href="libraries/arc4.htm#setCipherKey(RC4,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (RC4, in string: cipherKey,
    in string: initializationVector)</a></li>
<li><a href="libraries/blowfish.htm#setCipherKey(BLOWFISH,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (BLOWFISH, in string: cipherKey,
    in string: initializationVector)</a></li>
<li><a href="libraries/cipher.htm#setCipherKey(in_cipherAlgorithm,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (in cipherAlgorithm: cipherAlg,
    in string: cipherKey, in string: initializationVector)</a></li>
<li><a href="libraries/des.htm#setCipherKey(DES,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (DES, in string: cipherKey,
    in string: initializationVector)</a></li>
<li><a href="libraries/tdes.htm#setCipherKey(TDES,in_string,in_string)">const func cipherState: <b>setCipherKey</b> (TDES, in string: cipherKey,
    in string: initializationVector)</a></li>
</ul>
<h3>setColumn</h3>
<ul>
<li><a href="libraries/graph_file.htm#setColumn(inout_graph_file,in_integer)">const proc: <b>setColumn</b> (inout graph_file: aGraphFile, in integer: column)</a></li>
<li><a href="libraries/pixmap_file.htm#setColumn(inout_pixmapFontFile,in_integer)">const proc: <b>setColumn</b> (inout pixmapFontFile: fontFile, in integer: column)</a></li>
<li><a href="libraries/stritext.htm#setColumn(inout_striText,in_integer)">const proc: <b>setColumn</b> (inout striText: aStriText, in integer: column)</a></li>
<li><a href="libraries/text.htm#setColumn(inout_text,in_integer)">const proc: <b>setColumn</b> (inout text: aText, in integer: column)</a></li>
<li><a href="libraries/window.htm#setColumn(inout_window_file,in_integer)">const proc: <b>setColumn</b> (inout window_file: window_fil, in integer: column)</a></li>
</ul>
<h3>setCursorVisible</h3>
<ul>
<li><a href="libraries/graph.htm#setCursorVisible(in_PRIMITIVE_WINDOW,in_boolean)">const proc: <b>setCursorVisible</b> (in PRIMITIVE_WINDOW: aWindow,
                              in boolean: visible)</a></li>
</ul>
<h3>setDesKey</h3>
<ul>
<li><a href="libraries/des.htm#setDesKey(in_string,in_string)">const func desState: <b>setDesKey</b> (in string: desKey, in string: initializationVector)</a></li>
</ul>
<h3>setFileMode</h3>
<ul>
<li><a href="manual/os.htm#setFileMode">setFileMode</a></li>
<li><a href="libraries/ar.htm#setFileMode(inout_arArchive,in_string,in_fileMode)">const proc: <b>setFileMode</b> (inout arArchive: ar, in string: filePath,
    in fileMode: mode)</a></li>
<li><a href="libraries/cpio.htm#setFileMode(inout_cpioArchive,in_string,in_fileMode)">const proc: <b>setFileMode</b> (inout cpioArchive: cpio, in string: filePath,
    in fileMode: mode)</a></li>
<li><a href="libraries/filesys.htm#setFileMode(inout_fileSys,in_string,in_fileMode)">const proc: <b>setFileMode</b> (inout fileSys: fileSystem, in string: filePath,
    in fileMode: mode)</a></li>
<li><a href="libraries/osfiles.htm#setFileMode(in_string,in_fileMode)">const proc: <b>setFileMode</b> (in string: filePath, in fileMode: mode)</a></li>
<li><a href="libraries/rpm.htm#setFileMode(inout_rpmArchive,in_string,in_fileMode)">const proc: <b>setFileMode</b> (inout rpmArchive: rpm, in string: filePath,
    in fileMode: mode)</a></li>
<li><a href="libraries/tar.htm#setFileMode(inout_tarArchive,in_string,in_fileMode)">const proc: <b>setFileMode</b> (inout tarArchive: tar, in string: filePath,
    in fileMode: mode)</a></li>
<li><a href="libraries/zip.htm#setFileMode(inout_zipArchive,in_string,in_fileMode)">const proc: <b>setFileMode</b> (inout zipArchive: zip, in string: filePath,
    in fileMode: mode)</a></li>
</ul>
<h3>setFont</h3>
<ul>
<li><a href="libraries/pixmap_file.htm#setFont(inout_text,in_font)">const proc: <b>setFont</b> (inout text: aText, in font: aFont)</a></li>
</ul>
<h3>setFormalParams</h3>
<ul>
<li><a href="libraries/progs.htm#setFormalParams(in_reference,in_ref_list)">const proc: <b>setFormalParams</b> (in reference: funcRef, in ref_list: params)</a></li>
</ul>
<h3>setGroup</h3>
<ul>
<li><a href="manual/os.htm#setGroup">setGroup</a></li>
<li><a href="libraries/filesys.htm#setGroup(inout_fileSys,in_string,in_string)">const proc: <b>setGroup</b> (inout fileSys: fileSystem, in string: filePath,
    in string: group)</a></li>
<li><a href="libraries/osfiles.htm#setGroup(in_string,in_string)">const proc: <b>setGroup</b> (in string: filePath, in string: group)</a></li>
<li><a href="libraries/osfiles.htm#setGroup(in_string,in_string,SYMLINK)">const proc: <b>setGroup</b> (in string: filePath, in string: group, SYMLINK)</a></li>
</ul>
<h3>setLine</h3>
<ul>
<li><a href="libraries/graph_file.htm#setLine(inout_graph_file,in_integer)">const proc: <b>setLine</b> (inout graph_file: aGraphFile, in integer: line)</a></li>
<li><a href="libraries/pixmap_file.htm#setLine(inout_pixmapFontFile,in_integer)">const proc: <b>setLine</b> (inout pixmapFontFile: fontFile, in integer: line)</a></li>
<li><a href="libraries/stritext.htm#setLine(inout_striText,in_integer)">const proc: <b>setLine</b> (inout striText: aStriText, in integer: line)</a></li>
<li><a href="libraries/text.htm#setLine(inout_text,in_integer)">const proc: <b>setLine</b> (inout text: aText, in integer: line)</a></li>
<li><a href="libraries/window.htm#setLine(inout_window_file,in_integer)">const proc: <b>setLine</b> (inout window_file: window_fil, in integer: line)</a></li>
</ul>
<h3>setLocalTZ</h3>
<ul>
<li><a href="libraries/time.htm#setLocalTZ(in_time)">const func time: <b>setLocalTZ</b> (in time: aTime)</a></li>
</ul>
<h3>setMTime</h3>
<ul>
<li><a href="manual/os.htm#setMTime">setMTime</a></li>
<li><a href="libraries/ar.htm#setMTime(inout_arArchive,in_string,in_time)">const proc: <b>setMTime</b> (inout arArchive: ar, in string: filePath,
    in time: modificationTime)</a></li>
<li><a href="libraries/cpio.htm#setMTime(inout_cpioArchive,in_string,in_time)">const proc: <b>setMTime</b> (inout cpioArchive: cpio, in string: filePath,
    in time: modificationTime)</a></li>
<li><a href="libraries/filesys.htm#setMTime(inout_fileSys,in_string,in_time)">const proc: <b>setMTime</b> (inout fileSys: fileSystem, in string: filePath,
    in time: modificationTime)</a></li>
<li><a href="libraries/osfiles.htm#setMTime(in_string,in_time)">const proc: <b>setMTime</b> (in string: filePath, in time: mTime)</a></li>
<li><a href="libraries/osfiles.htm#setMTime(in_string,in_time,SYMLINK)">const proc: <b>setMTime</b> (in string: filePath, in time: mTime, SYMLINK)</a></li>
<li><a href="libraries/rpm.htm#setMTime(inout_rpmArchive,in_string,in_time)">const proc: <b>setMTime</b> (inout rpmArchive: rpm, in string: filePath,
    in time: modificationTime)</a></li>
<li><a href="libraries/tar.htm#setMTime(inout_tarArchive,in_string,in_time)">const proc: <b>setMTime</b> (inout tarArchive: tar, in string: filePath,
    in time: modificationTime)</a></li>
<li><a href="libraries/zip.htm#setMTime(inout_zipArchive,in_string,in_time)">const proc: <b>setMTime</b> (inout zipArchive: zip, in string: filePath,
    in time: modificationTime)</a></li>
</ul>
<h3>setOwner</h3>
<ul>
<li><a href="manual/os.htm#setOwner">setOwner</a></li>
<li><a href="libraries/filesys.htm#setOwner(inout_fileSys,in_string,in_string)">const proc: <b>setOwner</b> (inout fileSys: fileSystem, in string: filePath,
    in string: owner)</a></li>
<li><a href="libraries/osfiles.htm#setOwner(in_string,in_string)">const proc: <b>setOwner</b> (in string: filePath, in string: owner)</a></li>
<li><a href="libraries/osfiles.htm#setOwner(in_string,in_string,SYMLINK)">const proc: <b>setOwner</b> (in string: filePath, in string: owner, SYMLINK)</a></li>
</ul>
<h3>setPointerPos</h3>
<ul>
<li><a href="libraries/graph.htm#setPointerPos(in_PRIMITIVE_WINDOW,in_integer,in_integer)">const proc: <b>setPointerPos</b> (in PRIMITIVE_WINDOW: aWindow,
                           in integer: xPos, in integer: yPos)</a></li>
</ul>
<h3>setPos</h3>
<ul>
<li><a href="libraries/console.htm#setPos(in_console_file,in_integer,in_integer)">const proc: <b>setPos</b> (in console_file: aConsoleFile,
    in integer: line, in integer: column)</a></li>
<li><a href="libraries/graph.htm#setPos(in_PRIMITIVE_WINDOW,in_integer,in_integer)">const proc: <b>setPos</b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: xPos, in integer: yPos)</a></li>
<li><a href="libraries/graph_file.htm#setPos(inout_graph_file,in_integer,in_integer)">const proc: <b>setPos</b> (inout graph_file: aGraphFile, in integer: line, in integer: column)</a></li>
<li><a href="libraries/image.htm#setPos(inout_image,in_integer,in_integer)">const proc: <b>setPos</b> (inout image: anImage, in integer: xPos, in integer: yPos)</a></li>
<li><a href="libraries/pixmap_file.htm#setPos(inout_pixmapFontFile,in_integer,in_integer)">const proc: <b>setPos</b> (inout pixmapFontFile: fontFile,
    in integer: line, in integer: column)</a></li>
<li><a href="libraries/stritext.htm#setPos(inout_striText,in_integer,in_integer)">const proc: <b>setPos</b> (inout striText: aStriText, in integer: line, in integer: column)</a></li>
<li><a href="libraries/text.htm#setPos(inout_text,in_integer,in_integer)">const proc: <b>setPos</b> (inout text: aText, in integer: line, in integer: column)</a></li>
<li><a href="libraries/window.htm#setPos(inout_window_file,in_integer,in_integer)">const proc: <b>setPos</b> (inout window_file: window_fil, in integer: line, in integer: column)</a></li>
</ul>
<h3>setPosXY</h3>
<ul>
<li><a href="libraries/graph_file.htm#setPosXY(inout_graph_file,in_integer,in_integer)">const proc: <b>setPosXY</b> (inout graph_file: aGraphFile, in integer: xPos, in integer: yPos)</a></li>
<li><a href="libraries/pixmap_file.htm#setPosXY(inout_pixmapFontFile,in_integer,in_integer)">const proc: <b>setPosXY</b> (inout pixmapFontFile: fontFile, in integer: xPos, in integer: yPos)</a></li>
<li><a href="libraries/text.htm#setPosXY(inout_text,in_integer,in_integer)">const proc: <b>setPosXY</b> (inout text: aText, in integer: xPos, in integer: yPos)</a></li>
</ul>
<h3>setProxy</h3>
<ul>
<li><a href="libraries/gethttp.htm#setProxy(in_string,in_integer)">const proc: <b>setProxy</b> (in string: serverName, in integer: portNumber)</a></li>
</ul>
<h3>setSearchPath</h3>
<ul>
<li><a href="libraries/process.htm#setSearchPath(in_array_string)">const proc: <b>setSearchPath</b> (in array string: searchPath)</a></li>
</ul>
<h3>setTdesKey</h3>
<ul>
<li><a href="libraries/tdes.htm#setTdesKey(in_string,in_string)">const func tdesState: <b>setTdesKey</b> (in string: desKey, in string: initializationVector)</a></li>
</ul>
<h3>setTransparentColor</h3>
<ul>
<li><a href="libraries/draw.htm#setTransparentColor(in_PRIMITIVE_WINDOW,in_color)">const proc: <b>setTransparentColor</b> (in PRIMITIVE_WINDOW: pixmap, in color: col)</a></li>
</ul>
<h3>setType</h3>
<ul>
<li><a href="libraries/reference.htm#setType(in_reference,in_type)">const proc: <b>setType</b> (in reference: aReference, in type: aType)</a></li>
</ul>
<h3>setVar</h3>
<ul>
<li><a href="libraries/progs.htm#setVar(in_reference,in_boolean)">const proc: <b>setVar</b> (in reference: aReference, in boolean: isVariable)</a></li>
</ul>
<h3>setWindowName</h3>
<ul>
<li><a href="libraries/graph.htm#setWindowName(in_PRIMITIVE_WINDOW,in_string)">const proc: <b>setWindowName</b> (in PRIMITIVE_WINDOW: aWindow,
                           in string: windowName)</a></li>
</ul>
<h3>setenv</h3>
<ul>
<li><a href="manual/os.htm#setenv">setenv</a></li>
<li><a href="libraries/environment.htm#setenv(in_string,in_string)">const proc: <b>setenv</b> (in string: name, in string: value)</a></li>
</ul>
<h3>sha1</h3>
<ul>
<li><a href="libraries/msgdigest.htm#sha1(in_var_string)">const func string: <b>sha1</b> (in var string: message)</a></li>
</ul>
<h3>sha224</h3>
<ul>
<li><a href="libraries/msgdigest.htm#sha224(in_var_string)">const func string: <b>sha224</b> (in var string: message)</a></li>
</ul>
<h3>sha256</h3>
<ul>
<li><a href="libraries/msgdigest.htm#sha256(in_var_string)">const func string: <b>sha256</b> (in var string: message)</a></li>
</ul>
<h3>sha384</h3>
<ul>
<li><a href="libraries/msgdigest.htm#sha384(in_var_string)">const func string: <b>sha384</b> (in var string: message)</a></li>
</ul>
<h3>sha512</h3>
<ul>
<li><a href="libraries/msgdigest.htm#sha512(in_var_string)">const func string: <b>sha512</b> (in var string: message)</a></li>
</ul>
<h3>shell</h3>
<ul>
<li><a href="libraries/shell.htm#shell(in_string,in_string)">const func integer: <b>shell</b> (in string: command,
                           in string: parameters)</a></li>
<li><a href="libraries/shell.htm#shell(in_string)">const func integer: <b>shell</b> (in string: cmdAndParams)</a></li>
</ul>
<h3>shell.s7i</h3>
<ul>
<li><a href="libraries/shell.htm">shell.s7i</a></li>
</ul>
<h3>shellEscape</h3>
<ul>
<li><a href="libraries/shell.htm#shellEscape(in_string)">const func string: <b>shellEscape</b> (in string: stri)</a></li>
</ul>
<h3>shisen.sd7</h3>
<ul>
<li><a href="scrshots/shisen.htm">Shisen Sho</a></li>
</ul>
<h3>showHandshakeMsg</h3>
<ul>
<li><a href="libraries/showtls.htm#showHandshakeMsg(in_string,in_var_integer)">const proc: <b>showHandshakeMsg</b> (in string: stri, in var integer: pos)</a></li>
</ul>
<h3>showTlsMsg</h3>
<ul>
<li><a href="libraries/showtls.htm#showTlsMsg(in_string)">const proc: <b>showTlsMsg</b> (in string: stri)</a></li>
</ul>
<h3>showTlsMsgType</h3>
<ul>
<li><a href="libraries/showtls.htm#showTlsMsgType(in_string)">const proc: <b>showTlsMsgType</b> (in string: stri)</a></li>
</ul>
<h3>showX509Cert</h3>
<ul>
<li><a href="libraries/showtls.htm#showX509Cert(in_x509Cert)">const proc: <b>showX509Cert</b> (in x509Cert: cert)</a></li>
</ul>
<h3>showtls.s7i</h3>
<ul>
<li><a href="libraries/showtls.htm">showtls.s7i</a></li>
</ul>
<h3>sign</h3>
<ul>
<li><a href="libraries/elliptic.htm#sign(in_ellipticCurve,in_var_bigInteger,in_bigInteger)">const func ecdsaSignatureType: <b>sign</b> (in ellipticCurve: curve, in var bigInteger: message,
    in bigInteger: privateKey)</a></li>
</ul>
<h3>signedness</h3>
<ul>
<li><a href="libraries/bytedata.htm#signedness">const type: <b>signedness</b></a></li>
</ul>
<h3>sin</h3>
<ul>
<li><a href="libraries/math.htm#sin(in_float)">const func float: <b>sin</b> (in float: x)</a></li>
</ul>
<h3>sinh</h3>
<ul>
<li><a href="libraries/math.htm#sinh(in_float)">const func float: <b>sinh</b> (in float: x)</a></li>
</ul>
<h3>skip</h3>
<ul>
<li><a href="libraries/file.htm#skip(inout_file,in_var_integer)">const proc: <b>skip</b> (inout file: inFile, in var integer: numChars)</a></li>
</ul>
<h3>skipBits</h3>
<ul>
<li><a href="libraries/bitdata.htm#skipBits(inout_lsbBitStream,in_integer)">const proc: <b>skipBits</b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</a></li>
<li><a href="libraries/bitdata.htm#skipBits(inout_msbBitStream,in_integer)">const proc: <b>skipBits</b> (inout msbBitStream: inBitStream, in integer: bitWidth)</a></li>
</ul>
<h3>skipClassicComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipClassicComment(inout_file)">const proc: <b>skipClassicComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipClassicComment(inout_string)">const proc: <b>skipClassicComment</b> (inout string: stri)</a></li>
</ul>
<h3>skipComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipComment(inout_file)">const proc: <b>skipComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipComment(inout_string)">const proc: <b>skipComment</b> (inout string: stri)</a></li>
</ul>
<h3>skipData</h3>
<ul>
<li><a href="libraries/asn1.htm#skipData(inout_integer,in_asn1DataElement)">const proc: <b>skipData</b> (inout integer: pos, in asn1DataElement: dataElement)</a></li>
</ul>
<h3>skipLine</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipLine(inout_file)">const proc: <b>skipLine</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipLine(inout_string)">const proc: <b>skipLine</b> (inout string: stri)</a></li>
</ul>
<h3>skipLineComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipLineComment(inout_file)">const proc: <b>skipLineComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipLineComment(inout_string)">const proc: <b>skipLineComment</b> (inout string: stri)</a></li>
</ul>
<h3>skipSpace</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipSpace(inout_file)">const proc: <b>skipSpace</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipSpace(inout_string)">const proc: <b>skipSpace</b> (inout string: stri)</a></li>
</ul>
<h3>skipSpaceOrTab</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipSpaceOrTab(inout_file)">const proc: <b>skipSpaceOrTab</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipSpaceOrTab(inout_string)">const proc: <b>skipSpaceOrTab</b> (inout string: stri)</a></li>
</ul>
<h3>skipWhiteSpace</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipWhiteSpace(inout_file)">const proc: <b>skipWhiteSpace</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanfile.htm#skipWhiteSpace(inout_file,in_set_of_char)">const proc: <b>skipWhiteSpace</b> (inout file: inFile, in set of char: whiteSpaceChar)</a></li>
<li><a href="libraries/scanstri.htm#skipWhiteSpace(inout_string)">const proc: <b>skipWhiteSpace</b> (inout string: stri)</a></li>
</ul>
<h3>skipXmlComment</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipXmlComment(inout_file)">const proc: <b>skipXmlComment</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanstri.htm#skipXmlComment(inout_string)">const proc: <b>skipXmlComment</b> (inout string: stri)</a></li>
</ul>
<h3>skipXmlTag</h3>
<ul>
<li><a href="libraries/scanfile.htm#skipXmlTag(inout_file)">const proc: <b>skipXmlTag</b> (inout file: inFile)</a></li>
<li><a href="libraries/scanfile.htm#skipXmlTag(inout_file,in_var_string)">const proc: <b>skipXmlTag</b> (inout file: inFile, in var string: symbol)</a></li>
<li><a href="libraries/scanstri.htm#skipXmlTag(inout_string)">const proc: <b>skipXmlTag</b> (inout string: stri)</a></li>
<li><a href="libraries/scanstri.htm#skipXmlTag(inout_string,in_var_string)">const proc: <b>skipXmlTag</b> (inout string: stri, in var string: symbol)</a></li>
</ul>
<h3>sl.sd7</h3>
<ul>
<li><a href="scrshots/sl.htm">Game of life</a></li>
</ul>
<h3>smtp.s7i</h3>
<ul>
<li><a href="libraries/smtp.htm">smtp.s7i</a></li>
</ul>
<h3>smtpConnection</h3>
<ul>
<li><a href="libraries/smtp.htm#smtpConnection">const type: <b>smtpConnection</b></a></li>
</ul>
<h3>smtpMessage</h3>
<ul>
<li><a href="libraries/smtp.htm#smtpMessage">const type: <b>smtpMessage</b></a></li>
</ul>
<h3>sockbase.s7i</h3>
<ul>
<li><a href="libraries/sockbase.htm">sockbase.s7i</a></li>
</ul>
<h3>socket</h3>
<ul>
<li><a href="libraries/socket.htm#socket">const type: <b>socket</b></a></li>
</ul>
<h3>socket.s7i</h3>
<ul>
<li><a href="libraries/socket.htm">socket.s7i</a></li>
</ul>
<h3>socketAddress</h3>
<ul>
<li><a href="libraries/sockbase.htm#socketAddress">const type: <b>socketAddress</b></a></li>
</ul>
<h3>sokoban.sd7</h3>
<ul>
<li><a href="scrshots/sokoban.htm">Sokoban</a></li>
</ul>
<h3>space</h3>
<ul>
<li><a href="libraries/cgidialog.htm#space(in_integer)">const func space: <b>space</b> (in integer: width)</a></li>
</ul>
<h3>sqlStatement</h3>
<ul>
<li><a href="manual/types.htm#sqlStatement">sqlStatement</a></li>
<li><a href="libraries/sql_base.htm#sqlStatement">const type: <b>sqlStatement</b></a></li>
</ul>
<h3>sql_base.s7i</h3>
<ul>
<li><a href="libraries/sql_base.htm">sql_base.s7i</a></li>
</ul>
<h3>sqrAbs</h3>
<ul>
<li><a href="libraries/complex.htm#sqrAbs(in_complex)">const func float: <b>sqrAbs</b> (in complex: number)</a></li>
<li><a href="libraries/vector3d.htm#sqrAbs(in_vector3d)">const func float: <b>sqrAbs</b> (in vector3d: v)</a></li>
</ul>
<h3>sqrt</h3>
<ul>
<li><a href="libraries/bigint.htm#sqrt(in_var_bigInteger)">const func bigInteger: <b>sqrt</b> (in var bigInteger: number)</a></li>
<li><a href="libraries/integer.htm#sqrt(in_integer)">const func integer: <b>sqrt</b> (in integer: radicand)</a></li>
<li><a href="libraries/math.htm#sqrt(in_float)">const func float: <b>sqrt</b> (in float: x)</a></li>
</ul>
<h3>starDescr</h3>
<ul>
<li><a href="libraries/stars.htm#starDescr">const type: <b>starDescr</b></a></li>
</ul>
<h3>stars</h3>
<ul>
<li><a href="libraries/stars.htm#stars">const array starDescr: <b>stars</b></a></li>
</ul>
<h3>stars.s7i</h3>
<ul>
<li><a href="libraries/stars.htm">stars.s7i</a></li>
</ul>
<h3>startProcess</h3>
<ul>
<li><a href="libraries/process.htm#startProcess(in_string,in_array_string)">const func process: <b>startProcess</b> (in string: command, in array string: parameters)</a></li>
<li><a href="libraries/process.htm#startProcess(in_var_string)">const func process: <b>startProcess</b> (in var string: cmdAndParams)</a></li>
</ul>
<h3>startrek.sd7</h3>
<ul>
<li><a href="scrshots/startrek.htm">Startrek</a></li>
</ul>
<h3>startsWith</h3>
<ul>
<li><a href="libraries/string.htm#startsWith(in_string,in_string)">const func boolean: <b>startsWith</b> (in string: stri, in string: prefix)</a></li>
</ul>
<h3>stdCertificate</h3>
<ul>
<li><a href="libraries/x509cert.htm#stdCertificate">const certAndKey: <b>stdCertificate</b></a></li>
</ul>
<h3>stdEccCertificate</h3>
<ul>
<li><a href="libraries/x509cert.htm#stdEccCertificate">const certAndKey: <b>stdEccCertificate</b></a></li>
</ul>
<h3>stdio.s7i</h3>
<ul>
<li><a href="libraries/stdio.htm">stdio.s7i</a></li>
</ul>
<h3>str</h3>
<ul>
<li><a href="libraries/bigint.htm#str(in_bigInteger)">const func string: <b>str</b> (in bigInteger: number)</a></li>
<li><a href="libraries/bigrat.htm#str(in_bigRational)">const func string: <b>str</b> (in bigRational: number)</a></li>
<li><a href="libraries/bin32.htm#str(in_bin32)">const func string: <b>str</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#str(in_bin64)">const func string: <b>str</b> (in bin64: bits)</a></li>
<li><a href="libraries/bitset.htm#str(in_bitset)">const func string: <b>str</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#str(in_setType)">const func string: <b>str</b> (in setType: aSet)</a></li>
<li><a href="libraries/bmp.htm#str(in_PRIMITIVE_WINDOW,BMP)">const func string: <b>str</b> (in PRIMITIVE_WINDOW: pixmap, BMP)</a></li>
<li><a href="libraries/boolean.htm#str(in_boolean)">const func string: <b>str</b> (in boolean: aBool)</a></li>
<li><a href="libraries/bstring.htm#str(in_bstring)">const func string: <b>str</b> (in bstring: bstri)</a></li>
<li><a href="libraries/category.htm#str(in_category)">const func string: <b>str</b> (in category: aCategory)</a></li>
<li><a href="libraries/char.htm#str(in_char)">const func string: <b>str</b> (in char: ch)</a></li>
<li><a href="libraries/complex.htm#str(in_complex)">const func string: <b>str</b> (in complex: number)</a></li>
<li><a href="libraries/duration.htm#str(in_duration)">const func string: <b>str</b> (in duration: aDuration)</a></li>
<li><a href="libraries/float.htm#str(in_float)">const func string: <b>str</b> (in float: number)</a></li>
<li><a href="libraries/hashsetof.htm#str(in_setType)">const func string: <b>str</b> (in setType: aSet)</a></li>
<li><a href="libraries/ico.htm#str(in_PRIMITIVE_WINDOW,ICO)">const func string: <b>str</b> (in PRIMITIVE_WINDOW: pixmap, ICO)</a></li>
<li><a href="libraries/image.htm#str(in_image)">const func string: <b>str</b> (in image: anImage)</a></li>
<li><a href="libraries/integer.htm#str(in_integer)">const func string: <b>str</b> (in integer: number)</a></li>
<li><a href="libraries/pem.htm#str(in_pemObject)">const func string: <b>str</b> (in pemObject: pemObj)</a></li>
<li><a href="libraries/ppm.htm#str(in_PRIMITIVE_WINDOW,PPM)">const func string: <b>str</b> (in PRIMITIVE_WINDOW: pixmap, PPM)</a></li>
<li><a href="libraries/process.htm#str(in_process)">const func string: <b>str</b> (in process: aProcess)</a></li>
<li><a href="libraries/rational.htm#str(in_rational)">const func string: <b>str</b> (in rational: number)</a></li>
<li><a href="libraries/reference.htm#str(ref_reference)">const func string: <b>str</b> (ref reference: aReference)</a></li>
<li><a href="libraries/string.htm#str(in_string)">const func string: <b>str</b> (in string: stri)</a></li>
<li><a href="libraries/time.htm#str(in_time)">const func string: <b>str</b> (in time: aTime)</a></li>
<li><a href="libraries/vector3d.htm#str(in_vector3d)">const func string: <b>str</b> (in vector3d: a)</a></li>
<li><a href="libraries/wrinum.htm#str(ROMAN,in_integer)">const func string: <b>str</b> (ROMAN, in integer: number)</a></li>
<li><a href="libraries/wrinum.htm#str(ENGLISH,in_integer)">const func string: <b>str</b> (ENGLISH, in integer: number)</a></li>
<li><a href="libraries/wrinum.htm#str(GERMAN,in_integer)">const func string: <b>str</b> (GERMAN, in integer: number)</a></li>
</ul>
<h3>strDate</h3>
<ul>
<li><a href="libraries/time.htm#strDate(in_time)">const func string: <b>strDate</b> (in time: aTime)</a></li>
</ul>
<h3>strDateTime</h3>
<ul>
<li><a href="libraries/time.htm#strDateTime(in_time)">const func string: <b>strDateTime</b> (in time: aTime)</a></li>
</ul>
<h3>strTime</h3>
<ul>
<li><a href="libraries/time.htm#strTime(in_time)">const func string: <b>strTime</b> (in time: aTime)</a></li>
</ul>
<h3>striFile</h3>
<ul>
<li><a href="libraries/strifile.htm#striFile">const type: <b>striFile</b></a></li>
</ul>
<h3>striText</h3>
<ul>
<li><a href="libraries/stritext.htm#striText">const type: <b>striText</b></a></li>
</ul>
<h3>strifile.s7i</h3>
<ul>
<li><a href="libraries/strifile.htm">strifile.s7i</a></li>
</ul>
<h3>string</h3>
<ul>
<li><a href="manual/types.htm#string">string</a></li>
<li><a href="libraries/bstring.htm#string(in_bstring)">const func string: <b>string</b> (in bstring: bstri)</a></li>
<li><a href="libraries/float.htm#string(in_float)">const func string: <b>string</b> (in float: number)</a></li>
<li><a href="libraries/integer.htm#string(in_integer)">const func string: <b>string</b> (in integer: number)</a></li>
<li><a href="libraries/string.htm#string(in_string)">const func string: <b>string</b> (in string: stri)</a></li>
</ul>
<h3>string.s7i</h3>
<ul>
<li><a href="libraries/string.htm">string.s7i</a></li>
</ul>
<h3>stritext.s7i</h3>
<ul>
<li><a href="libraries/stritext.htm">stritext.s7i</a></li>
</ul>
<h3>struct</h3>
<ul>
<li><a href="manual/types.htm#struct">struct</a></li>
</ul>
<h3>subFile</h3>
<ul>
<li><a href="libraries/subfile.htm#subFile">const type: <b>subFile</b></a></li>
</ul>
<h3>subfile.s7i</h3>
<ul>
<li><a href="libraries/subfile.htm">subfile.s7i</a></li>
</ul>
<h3>submitButton</h3>
<ul>
<li><a href="libraries/cgidialog.htm#submitButton(in_string)">const func submitButton: <b>submitButton</b> (in string: label)</a></li>
<li><a href="libraries/cgidialog.htm#submitButton(in_PRIMITIVE_WINDOW)">const func submitButton: <b>submitButton</b> (in PRIMITIVE_WINDOW: pixmap)</a></li>
<li><a href="libraries/cgidialog.htm#submitButton(in_dialogElement)">const func submitButton: <b>submitButton</b> (in dialogElement: element)</a></li>
</ul>
<h3>subrange</h3>
<ul>
<li><a href="libraries/subrange.htm#subrange(in_baseType)..(in_baseType)">const func type: <b>subrange</b> (in baseType: first) .. (in baseType: last)</a></li>
</ul>
<h3>subrange.s7i</h3>
<ul>
<li><a href="libraries/subrange.htm">subrange.s7i</a></li>
</ul>
<h3>succ</h3>
<ul>
<li><a href="libraries/bigint.htm#succ(in_bigInteger)">const func bigInteger: <b>succ</b> (in bigInteger: number)</a></li>
<li><a href="libraries/boolean.htm#succ(ref_boolean)">const func boolean: <b>succ</b> (ref boolean: boolValue)</a></li>
<li><a href="libraries/char.htm#succ(in_char)">const func char: <b>succ</b> (in char: ch)</a></li>
<li><a href="libraries/enumeration.htm#succ(in_enumType)">const func enumType: <b>succ</b> (in enumType: enumValue)</a></li>
<li><a href="libraries/integer.htm#succ(in_integer)">const func integer: <b>succ</b> (in integer: number)</a></li>
</ul>
<h3>sudoku7.sd7</h3>
<ul>
<li><a href="scrshots/sudoku7.htm">Sudoku</a></li>
</ul>
<h3>sydir7.sd7</h3>
<ul>
<li><a href="scrshots/sydir7.htm">Synchronize directory trees</a></li>
</ul>
<h3>symlink</h3>
<ul>
<li><a href="manual/os.htm#symlink">symlink</a></li>
<li><a href="libraries/osfiles.htm#symlink(in_string,in_string)">const proc: <b>symlink</b> (in string: targetPath, in string: symlinkPath)</a></li>
</ul>
<h3>syobject</h3>
<ul>
<li><a href="libraries/progs.htm#syobject(in_program,in_string)">const func reference: <b>syobject</b> (in program: aProgram, in string: name)</a></li>
</ul>
<h3>sysVar</h3>
<ul>
<li><a href="libraries/progs.htm#sysVar(in_program,in_string)">const func reference: <b>sysVar</b> (in program: aProgram, in string: name)</a></li>
</ul>
<h3>tan</h3>
<ul>
<li><a href="libraries/math.htm#tan(in_float)">const func float: <b>tan</b> (in float: x)</a></li>
</ul>
<h3>tanh</h3>
<ul>
<li><a href="libraries/math.htm#tanh(in_float)">const func float: <b>tanh</b> (in float: x)</a></li>
</ul>
<h3>tar.s7i</h3>
<ul>
<li><a href="libraries/tar.htm">tar.s7i</a></li>
</ul>
<h3>tar7.sd7</h3>
<ul>
<li><a href="scrshots/tar7.htm">Tar archiving utility</a></li>
</ul>
<h3>tarArchive</h3>
<ul>
<li><a href="libraries/tar.htm#tarArchive">const type: <b>tarArchive</b></a></li>
</ul>
<h3>tarCreate</h3>
<ul>
<li><a href="libraries/tar_cmds.htm#tarCreate(inout_file,in_string,in_string,in_array_string,in_boolean)">const proc: <b>tarCreate</b> (inout file: outFile, in string: basePath, in string: pathFromBase,
    in array string: fileList, in boolean: doView)</a></li>
<li><a href="libraries/tar_cmds.htm#tarCreate(in_string,in_array_string,in_boolean,in_boolean)">const proc: <b>tarCreate</b> (in string: outFileName, in array string: fileList,
    in boolean: doView, in boolean: doZip)</a></li>
</ul>
<h3>tarTell</h3>
<ul>
<li><a href="libraries/tar_cmds.htm#tarTell(inout_file,in_array_string,in_boolean)">const proc: <b>tarTell</b> (inout file: inFile, in array string: memberList,
    in boolean: doView)</a></li>
<li><a href="libraries/tar_cmds.htm#tarTell(in_string,in_array_string,in_boolean,in_boolean)">const proc: <b>tarTell</b> (in string: inFileName, in array string: memberList,
    in boolean: doView, in boolean: doUncompress)</a></li>
</ul>
<h3>tarXtract</h3>
<ul>
<li><a href="libraries/tar_cmds.htm#tarXtract(inout_file,in_array_string,in_boolean)">const proc: <b>tarXtract</b> (inout file: inFile, in array string: memberList,
    in boolean: doView)</a></li>
<li><a href="libraries/tar_cmds.htm#tarXtract(in_string,in_array_string,in_boolean,in_boolean)">const proc: <b>tarXtract</b> (in string: inFileName, in array string: memberList,
    in boolean: doView, in boolean: doUncompress)</a></li>
</ul>
<h3>tar_cmds.s7i</h3>
<ul>
<li><a href="libraries/tar_cmds.htm">tar_cmds.s7i</a></li>
</ul>
<h3>tdes.s7i</h3>
<ul>
<li><a href="libraries/tdes.htm">tdes.s7i</a></li>
</ul>
<h3>tdesState</h3>
<ul>
<li><a href="libraries/tdes.htm#tdesState">const type: <b>tdesState</b></a></li>
</ul>
<h3>tee.s7i</h3>
<ul>
<li><a href="libraries/tee.htm">tee.s7i</a></li>
</ul>
<h3>teeFile</h3>
<ul>
<li><a href="libraries/tee.htm#teeFile">const type: <b>teeFile</b></a></li>
</ul>
<h3>tell</h3>
<ul>
<li><a href="libraries/clib_file.htm#tell(in_clib_file)">const func integer: <b>tell</b> (in clib_file: aFile)</a></li>
<li><a href="libraries/external_file.htm#tell(in_external_file)">const func integer: <b>tell</b> (in external_file: aFile)</a></li>
<li><a href="libraries/file.htm#tell(in_file)">const func integer: <b>tell</b> (in file: aFile)</a></li>
<li><a href="libraries/gzip.htm#tell(in_gzipFile)">const func integer: <b>tell</b> (in gzipFile: aFile)</a></li>
<li><a href="libraries/gzip.htm#tell(in_gzipWriteFile)">const func integer: <b>tell</b> (in gzipWriteFile: outFile)</a></li>
<li><a href="libraries/iobuffer.htm#tell(in_bufferFile)">const func integer: <b>tell</b> (in bufferFile: aBufferFile)</a></li>
<li><a href="libraries/lzma.htm#tell(in_lzmaFile)">const func integer: <b>tell</b> (in lzmaFile: aFile)</a></li>
<li><a href="libraries/null_file.htm#tell(in_null_file)">const func integer: <b>tell</b> (in null_file: aFile)</a></li>
<li><a href="libraries/strifile.htm#tell(in_striFile)">const func integer: <b>tell</b> (in striFile: aStriFile)</a></li>
<li><a href="libraries/stritext.htm#tell(in_striText)">const func integer: <b>tell</b> (in striText: aStriText)</a></li>
<li><a href="libraries/subfile.htm#tell(in_subFile)">const func integer: <b>tell</b> (in subFile: aSubFile)</a></li>
<li><a href="libraries/utf16.htm#tell(in_utf16File)">const func integer: <b>tell</b> (in utf16File: aFile)</a></li>
<li><a href="libraries/xz.htm#tell(in_xzFile)">const func integer: <b>tell</b> (in xzFile: aFile)</a></li>
<li><a href="libraries/zstd.htm#tell(in_zstdFile)">const func integer: <b>tell</b> (in zstdFile: aFile)</a></li>
</ul>
<h3>tetg.sd7</h3>
<ul>
<li><a href="scrshots/tetg.htm">Tetris</a></li>
</ul>
<h3>text</h3>
<ul>
<li><a href="manual/types.htm#text">text</a></li>
<li><a href="libraries/text.htm#text">const type: <b>text</b></a></li>
</ul>
<h3>text.s7i</h3>
<ul>
<li><a href="libraries/text.htm">text.s7i</a></li>
</ul>
<h3>textArea</h3>
<ul>
<li><a href="libraries/cgidialog.htm#textArea(in_integer,in_integer)">const func textArea: <b>textArea</b> (in integer: rows, in integer: cols)</a></li>
</ul>
<h3>textField</h3>
<ul>
<li><a href="libraries/cgidialog.htm#textField(in_string,in_integer)">const func textField: <b>textField</b> (in string: content, in integer: size)</a></li>
</ul>
<h3>tiff.s7i</h3>
<ul>
<li><a href="libraries/tiff.htm">tiff.s7i</a></li>
</ul>
<h3>time</h3>
<ul>
<li><a href="manual/types.htm#time">time</a></li>
<li><a href="libraries/time.htm#time">const type: <b>time</b></a></li>
<li><a href="libraries/time.htm#time(in_var_string)">const func time: <b>time</b> (in var string: stri)</a></li>
<li><a href="libraries/time.htm#time(NOW)">const func time: <b>time</b> (NOW)</a></li>
<li><a href="libraries/time.htm#time(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)">const func time: <b>time</b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second)</a></li>
<li><a href="libraries/time.htm#time(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)">const func time: <b>time</b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second,
    in integer: micro_second)</a></li>
</ul>
<h3>time.s7i</h3>
<ul>
<li><a href="libraries/time.htm">time.s7i</a></li>
</ul>
<h3>timeInTimeZone</h3>
<ul>
<li><a href="libraries/time.htm#timeInTimeZone(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)">const func time: <b>timeInTimeZone</b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second, in integer: timeZone)</a></li>
</ul>
<h3>times</h3>
<ul>
<li><a href="libraries/array.htm#(in_integer)times(in_baseType)">const func arrayType: (in integer: factor) <b>times</b> (in baseType: element)</a></li>
</ul>
<h3>times </h3>
<ul>
<li><a href="libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">const func arrayType: (in ARRAY_IDX_RANGE: indexRange) <b>times </b> (in baseType: element)</a></li>
</ul>
<h3>timestamp1601</h3>
<ul>
<li><a href="libraries/time.htm#timestamp1601(in_time)">const func integer: <b>timestamp1601</b> (in time: aTime)</a></li>
</ul>
<h3>timestamp1601ToTime</h3>
<ul>
<li><a href="libraries/time.htm#timestamp1601ToTime(in_integer)">const func time: <b>timestamp1601ToTime</b> (in integer: timestamp)</a></li>
</ul>
<h3>timestamp1970</h3>
<ul>
<li><a href="libraries/time.htm#timestamp1970(in_time)">const func integer: <b>timestamp1970</b> (in time: aTime)</a></li>
</ul>
<h3>timestamp1970ToTime</h3>
<ul>
<li><a href="libraries/time.htm#timestamp1970ToTime(in_integer)">const func time: <b>timestamp1970ToTime</b> (in integer: timestamp)</a></li>
</ul>
<h3>tis_620</h3>
<ul>
<li><a href="libraries/charsets.htm#tis_620">const string: <b>tis_620</b></a></li>
</ul>
<h3>tls.s7i</h3>
<ul>
<li><a href="libraries/tls.htm">tls.s7i</a></li>
</ul>
<h3>tlsFile</h3>
<ul>
<li><a href="libraries/tls.htm#tlsFile">const type: <b>tlsFile</b></a></li>
</ul>
<h3>toAbsPath</h3>
<ul>
<li><a href="libraries/osfiles.htm#toAbsPath(in_string,in_string)">const func string: <b>toAbsPath</b> (in string: basePath, in string: path)</a></li>
</ul>
<h3>toArray</h3>
<ul>
<li><a href="libraries/bitset.htm#toArray(in_bitset)">const func array integer: <b>toArray</b> (in bitset: aSet)</a></li>
<li><a href="libraries/bitsetof.htm#toArray(in_setType)">const func array baseType: <b>toArray</b> (in setType: aSet)</a></li>
<li><a href="libraries/hashsetof.htm#toArray(in_setType)">const func array baseType: <b>toArray</b> (in setType: aSet)</a></li>
</ul>
<h3>toAscii85</h3>
<ul>
<li><a href="libraries/encoding.htm#toAscii85(in_string)">const func string: <b>toAscii85</b> (in string: byteStri)</a></li>
</ul>
<h3>toBase</h3>
<ul>
<li><a href="libraries/encoding.htm#toBase(in_bigInteger,in_string)">const func string: <b>toBase</b> (in bigInteger: number, in string: digits)</a></li>
<li><a href="libraries/encoding.htm#toBase(in_string,in_string)">const func string: <b>toBase</b> (in string: byteStri, in string: digits)</a></li>
</ul>
<h3>toBase58</h3>
<ul>
<li><a href="libraries/encoding.htm#toBase58(in_string)">const func string: <b>toBase58</b> (in string: byteStri)</a></li>
</ul>
<h3>toBase64</h3>
<ul>
<li><a href="libraries/encoding.htm#toBase64(in_string)">const func string: <b>toBase64</b> (in string: byteStri)</a></li>
</ul>
<h3>toBottom</h3>
<ul>
<li><a href="libraries/graph.htm#toBottom(in_PRIMITIVE_WINDOW)">const proc: <b>toBottom</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
<li><a href="libraries/image.htm#toBottom(inout_image)">const proc: <b>toBottom</b> (inout image: anImage)</a></li>
</ul>
<h3>toCsvLine</h3>
<ul>
<li><a href="libraries/csv.htm#toCsvLine(in_array_string,in_char)">const func string: <b>toCsvLine</b> (in array string: data, in char: separator)</a></li>
</ul>
<h3>toDays</h3>
<ul>
<li><a href="libraries/duration.htm#toDays(in_duration)">const func integer: <b>toDays</b> (in duration: aDuration)</a></li>
</ul>
<h3>toHours</h3>
<ul>
<li><a href="libraries/duration.htm#toHours(in_duration)">const func integer: <b>toHours</b> (in duration: aDuration)</a></li>
</ul>
<h3>toJacobian</h3>
<ul>
<li><a href="libraries/elliptic.htm#toJacobian(in_ecPoint)">const func jacobianPoint: <b>toJacobian</b> (in ecPoint: p)</a></li>
</ul>
<h3>toLocalTZ</h3>
<ul>
<li><a href="libraries/time.htm#toLocalTZ(in_time)">const func time: <b>toLocalTZ</b> (in time: aTime)</a></li>
</ul>
<h3>toMicroSeconds</h3>
<ul>
<li><a href="libraries/duration.htm#toMicroSeconds(in_duration)">const func integer: <b>toMicroSeconds</b> (in duration: aDuration)</a></li>
</ul>
<h3>toMinutes</h3>
<ul>
<li><a href="libraries/duration.htm#toMinutes(in_duration)">const func integer: <b>toMinutes</b> (in duration: aDuration)</a></li>
</ul>
<h3>toMonths</h3>
<ul>
<li><a href="libraries/duration.htm#toMonths(in_duration)">const func integer: <b>toMonths</b> (in duration: aDuration)</a></li>
</ul>
<h3>toOsPath</h3>
<ul>
<li><a href="libraries/shell.htm#toOsPath(in_string)">const func string: <b>toOsPath</b> (in string: standardPath)</a></li>
</ul>
<h3>toPercentEncoded</h3>
<ul>
<li><a href="libraries/encoding.htm#toPercentEncoded(in_string)">const func string: <b>toPercentEncoded</b> (in string: byteStri)</a></li>
</ul>
<h3>toQuotedPrintable</h3>
<ul>
<li><a href="libraries/encoding.htm#toQuotedPrintable(in_string)">const func string: <b>toQuotedPrintable</b> (in string: byteStri)</a></li>
</ul>
<h3>toSeconds</h3>
<ul>
<li><a href="libraries/duration.htm#toSeconds(in_duration)">const func integer: <b>toSeconds</b> (in duration: aDuration)</a></li>
</ul>
<h3>toShellPath</h3>
<ul>
<li><a href="libraries/shell.htm#toShellPath(in_string)">const func string: <b>toShellPath</b> (in string: path)</a></li>
</ul>
<h3>toTop</h3>
<ul>
<li><a href="libraries/graph.htm#toTop(in_PRIMITIVE_WINDOW)">const proc: <b>toTop</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
<li><a href="libraries/image.htm#toTop(inout_image)">const proc: <b>toTop</b> (inout image: anImage)</a></li>
</ul>
<h3>toUTC</h3>
<ul>
<li><a href="libraries/time.htm#toUTC(in_time)">const func time: <b>toUTC</b> (in time: aTime)</a></li>
</ul>
<h3>toUrlEncoded</h3>
<ul>
<li><a href="libraries/encoding.htm#toUrlEncoded(in_string)">const func string: <b>toUrlEncoded</b> (in string: byteStri)</a></li>
</ul>
<h3>toUtf16Be</h3>
<ul>
<li><a href="libraries/unicode.htm#toUtf16Be(in_string)">const func string: <b>toUtf16Be</b> (in string: stri)</a></li>
</ul>
<h3>toUtf16Le</h3>
<ul>
<li><a href="libraries/unicode.htm#toUtf16Le(in_string)">const func string: <b>toUtf16Le</b> (in string: stri)</a></li>
</ul>
<h3>toUtf8</h3>
<ul>
<li><a href="libraries/unicode.htm#toUtf8(in_string)">const func string: <b>toUtf8</b> (in string: stri)</a></li>
</ul>
<h3>toUuencoded</h3>
<ul>
<li><a href="libraries/encoding.htm#toUuencoded(in_string)">const func string: <b>toUuencoded</b> (in string: byteStri)</a></li>
</ul>
<h3>toYears</h3>
<ul>
<li><a href="libraries/duration.htm#toYears(in_duration)">const func integer: <b>toYears</b> (in duration: aDuration)</a></li>
</ul>
<h3>toutf8.sd7</h3>
<ul>
<li><a href="scrshots/toutf8.htm">Convert files to UTF-8</a></li>
</ul>
<h3>trim</h3>
<ul>
<li><a href="libraries/string.htm#trim(in_string)">const func string: <b>trim</b> (in string: stri)</a></li>
</ul>
<h3>trimValue</h3>
<ul>
<li><a href="libraries/char.htm#trimValue(attr_char,in_string)">const func string: <b>trimValue</b> (attr char, in string: stri)</a></li>
<li><a href="libraries/string.htm#trimValue(in_type,in_string)">const func string: <b>trimValue</b> (in type: aType, in string: stri)</a></li>
<li><a href="libraries/string.htm#trimValue(attr_string,in_string)">const func string: <b>trimValue</b> (attr string, in string: stri)</a></li>
</ul>
<h3>trunc</h3>
<ul>
<li><a href="libraries/bigrat.htm#trunc(in_bigRational)">const func bigInteger: <b>trunc</b> (in bigRational: number)</a></li>
<li><a href="libraries/float.htm#trunc(in_float)">const func integer: <b>trunc</b> (in float: number)</a></li>
<li><a href="libraries/rational.htm#trunc(in_rational)">const func integer: <b>trunc</b> (in rational: number)</a></li>
</ul>
<h3>truncToDay</h3>
<ul>
<li><a href="libraries/time.htm#truncToDay(in_time)">const func time: <b>truncToDay</b> (in time: aTime)</a></li>
</ul>
<h3>truncToHour</h3>
<ul>
<li><a href="libraries/time.htm#truncToHour(in_time)">const func time: <b>truncToHour</b> (in time: aTime)</a></li>
</ul>
<h3>truncToMinute</h3>
<ul>
<li><a href="libraries/time.htm#truncToMinute(in_time)">const func time: <b>truncToMinute</b> (in time: aTime)</a></li>
</ul>
<h3>truncToMonth</h3>
<ul>
<li><a href="libraries/time.htm#truncToMonth(in_time)">const func time: <b>truncToMonth</b> (in time: aTime)</a></li>
</ul>
<h3>truncToSecond</h3>
<ul>
<li><a href="libraries/time.htm#truncToSecond(in_time)">const func time: <b>truncToSecond</b> (in time: aTime)</a></li>
</ul>
<h3>truncToYear</h3>
<ul>
<li><a href="libraries/time.htm#truncToYear(in_time)">const func time: <b>truncToYear</b> (in time: aTime)</a></li>
</ul>
<h3>truncate</h3>
<ul>
<li><a href="libraries/clib_file.htm#truncate(in_clib_file,in_integer)">const proc: <b>truncate</b> (in clib_file: aFile, in integer: length)</a></li>
<li><a href="libraries/external_file.htm#truncate(in_external_file,in_integer)">const proc: <b>truncate</b> (in external_file: aFile, in integer: length)</a></li>
<li><a href="libraries/file.htm#truncate(inout_file,in_integer)">const proc: <b>truncate</b> (inout file: aFile, in integer: length)</a></li>
<li><a href="libraries/strifile.htm#truncate(inout_striFile,in_integer)">const proc: <b>truncate</b> (inout striFile: aStriFile, in integer: length)</a></li>
<li><a href="libraries/utf16.htm#truncate(in_utf16File,in_integer)">const proc: <b>truncate</b> (in utf16File: aFile, in integer: length)</a></li>
</ul>
<h3>type</h3>
<ul>
<li><a href="manual/types.htm#type">type</a></li>
</ul>
<h3>uLeb128</h3>
<ul>
<li><a href="libraries/leb128.htm#uLeb128(in_var_integer)">const func string: <b>uLeb128</b> (in var integer: number)</a></li>
</ul>
<h3>uLeb128ToInt</h3>
<ul>
<li><a href="libraries/leb128.htm#uLeb128ToInt(in_string,inout_integer)">const func integer: <b>uLeb128ToInt</b> (in string: stri, inout integer: pos)</a></li>
<li><a href="libraries/leb128.htm#uLeb128ToInt(in_string)">const func integer: <b>uLeb128ToInt</b> (in string: stri)</a></li>
</ul>
<h3>unicode.s7i</h3>
<ul>
<li><a href="libraries/unicode.htm">unicode.s7i</a></li>
</ul>
<h3>unitVector</h3>
<ul>
<li><a href="libraries/vector3d.htm#unitVector(in_vector3d)">const func vector3d: <b>unitVector</b> (in vector3d: v)</a></li>
</ul>
<h3>unsetenv</h3>
<ul>
<li><a href="manual/os.htm#unsetenv">unsetenv</a></li>
<li><a href="libraries/environment.htm#unsetenv(in_string)">const proc: <b>unsetenv</b> (in string: name)</a></li>
</ul>
<h3>upper</h3>
<ul>
<li><a href="libraries/char.htm#upper(in_char)">const func char: <b>upper</b> (in char: ch)</a></li>
<li><a href="libraries/string.htm#upper(in_string)">const func string: <b>upper</b> (in string: stri)</a></li>
</ul>
<h3>upper.s7i</h3>
<ul>
<li><a href="libraries/upper.htm">upper.s7i</a></li>
</ul>
<h3>upperFile</h3>
<ul>
<li><a href="libraries/upper.htm#upperFile">const type: <b>upperFile</b></a></li>
</ul>
<h3>utf16.s7i</h3>
<ul>
<li><a href="libraries/utf16.htm">utf16.s7i</a></li>
</ul>
<h3>utf16File</h3>
<ul>
<li><a href="libraries/utf16.htm#utf16File">const type: <b>utf16File</b></a></li>
</ul>
<h3>utf16beFile</h3>
<ul>
<li><a href="libraries/utf16.htm#utf16beFile">const type: <b>utf16beFile</b></a></li>
</ul>
<h3>utf16leFile</h3>
<ul>
<li><a href="libraries/utf16.htm#utf16leFile">const type: <b>utf16leFile</b></a></li>
</ul>
<h3>utf8.s7i</h3>
<ul>
<li><a href="libraries/utf8.htm">utf8.s7i</a></li>
</ul>
<h3>utf8File</h3>
<ul>
<li><a href="libraries/utf8.htm#utf8File">const type: <b>utf8File</b></a></li>
</ul>
<h3>validateSignature</h3>
<ul>
<li><a href="libraries/x509cert.htm#validateSignature(in_x509Cert,in_subjectPublicKeyInfoType)">const func boolean: <b>validateSignature</b> (in x509Cert: cert, in subjectPublicKeyInfoType: publicKey)</a></li>
</ul>
<h3>values</h3>
<ul>
<li><a href="libraries/hash.htm#values(in_hashType)">const func array baseType: <b>values</b> (in hashType: aHashMap)</a></li>
</ul>
<h3>varcharType</h3>
<ul>
<li><a href="libraries/db_prop.htm#varcharType(in_dbCategory)">const func string: <b>varcharType</b> (in dbCategory: databaseKind)</a></li>
</ul>
<h3>varfunc</h3>
<ul>
<li><a href="manual/types.htm#varfunc">varfunc</a></li>
</ul>
<h3>vector3d</h3>
<ul>
<li><a href="libraries/vector3d.htm#vector3d">const type: <b>vector3d</b></a></li>
<li><a href="libraries/vector3d.htm#vector3d(in_float,in_float,in_float)">const func vector3d: <b>vector3d</b> (in float: x, in float: y, in float: z)</a></li>
</ul>
<h3>vector3d.s7i</h3>
<ul>
<li><a href="libraries/vector3d.htm">vector3d.s7i</a></li>
</ul>
<h3>vectorFont</h3>
<ul>
<li><a href="libraries/vectorfont.htm#vectorFont">const type: <b>vectorFont</b></a></li>
</ul>
<h3>vectorfont.s7i</h3>
<ul>
<li><a href="libraries/vectorfont.htm">vectorfont.s7i</a></li>
</ul>
<h3>verify</h3>
<ul>
<li><a href="libraries/elliptic.htm#verify(in_ellipticCurve,in_var_bigInteger,in_ecdsaSignatureType,in_ecPoint)">const func boolean: <b>verify</b> (in ellipticCurve: curve, in var bigInteger: message,
    in ecdsaSignatureType: signature, in ecPoint: publicKey)</a></li>
</ul>
<h3>verifyKeyPair</h3>
<ul>
<li><a href="libraries/elliptic.htm#verifyKeyPair(in_ellipticCurve,in_eccKeyPair)">const func boolean: <b>verifyKeyPair</b> (in ellipticCurve: curve, in eccKeyPair: keyPair)</a></li>
</ul>
<h3>viscii</h3>
<ul>
<li><a href="libraries/charsets.htm#viscii">const string: <b>viscii</b></a></li>
</ul>
<h3>void</h3>
<ul>
<li><a href="manual/types.htm#void">void</a></li>
</ul>
<h3>voidHtmlElements</h3>
<ul>
<li><a href="libraries/html.htm#voidHtmlElements">const set of string: <b>voidHtmlElements</b></a></li>
</ul>
<h3>vspace</h3>
<ul>
<li><a href="libraries/cgidialog.htm#vspace(in_integer)">const func vspace: <b>vspace</b> (in integer: height)</a></li>
</ul>
<h3>wait</h3>
<ul>
<li><a href="libraries/duration.htm#wait(in_duration)">const proc: <b>wait</b> (in duration: aDuration)</a></li>
</ul>
<h3>waitFor</h3>
<ul>
<li><a href="libraries/process.htm#waitFor(in_process)">const proc: <b>waitFor</b> (in process: aProcess)</a></li>
</ul>
<h3>waitForRequest</h3>
<ul>
<li><a href="libraries/listener.htm#waitForRequest(inout_listener,inout_file,inout_file)">const proc: <b>waitForRequest</b> (inout listener: aListener,
    inout file: existingConnection, inout file: newConnection)</a></li>
</ul>
<h3>wator.sd7</h3>
<ul>
<li><a href="scrshots/wator.htm">Planet Wator simulation</a></li>
</ul>
<h3>weekDateWeek</h3>
<ul>
<li><a href="libraries/time.htm#weekDateWeek(in_time)">const func integer: <b>weekDateWeek</b> (in time: aDate)</a></li>
</ul>
<h3>weekDateYear</h3>
<ul>
<li><a href="libraries/time.htm#weekDateYear(in_time)">const func integer: <b>weekDateYear</b> (in time: aDate)</a></li>
</ul>
<h3>weekOfYear</h3>
<ul>
<li><a href="libraries/time.htm#weekOfYear(in_var_integer,in_integer)">const func integer: <b>weekOfYear</b> (in var integer: year, in integer: dayOfYear)</a></li>
<li><a href="libraries/time.htm#weekOfYear(in_time)">const func integer: <b>weekOfYear</b> (in time: aDate)</a></li>
</ul>
<h3>while-statement</h3>
<ul>
<li><a href="manual/stats.htm#while-statement">while-statement</a></li>
</ul>
<h3>width</h3>
<ul>
<li><a href="libraries/bitmapfont.htm#width(in_bitmapFont,in_string)">const func integer: <b>width</b> (in bitmapFont: bmpFont, in string: stri)</a></li>
<li><a href="libraries/char.htm#width(in_char)">const func integer: <b>width</b> (in char: ch)</a></li>
<li><a href="libraries/console.htm#width(in_console_file)">const func integer: <b>width</b> (in console_file: aConsoleFile)</a></li>
<li><a href="libraries/font.htm#width(in_font,in_string)">const func integer: <b>width</b> (in font: aFont, in string: stri)</a></li>
<li><a href="libraries/graph.htm#width(in_PRIMITIVE_WINDOW)">const func integer: <b>width</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
<li><a href="libraries/graph_file.htm#width(in_graph_file)">const func integer: <b>width</b> (in graph_file: aGraphFile)</a></li>
<li><a href="libraries/image.htm#width(in_image)">const func integer: <b>width</b> (in image: anImage)</a></li>
<li><a href="libraries/pixmap_file.htm#width(in_pixmapFontFile)">const func integer: <b>width</b> (in pixmapFontFile: fontFile)</a></li>
<li><a href="libraries/string.htm#width(in_string)">const func integer: <b>width</b> (in string: stri)</a></li>
<li><a href="libraries/stritext.htm#width(in_striText)">const func integer: <b>width</b> (in striText: aStriText)</a></li>
<li><a href="libraries/text.htm#width(in_text)">const func integer: <b>width</b> (in text: aTExt)</a></li>
<li><a href="libraries/vectorfont.htm#width(in_vectorFont,in_string)">const func integer: <b>width</b> (in vectorFont: vecFont, in string: stri)</a></li>
<li><a href="libraries/window.htm#width(in_window_file)">const func integer: <b>width</b> (in window_file: outText)</a></li>
</ul>
<h3>wildcard.s7i</h3>
<ul>
<li><a href="libraries/wildcard.htm">wildcard.s7i</a></li>
</ul>
<h3>wildcardMatch</h3>
<ul>
<li><a href="libraries/wildcard.htm#wildcardMatch(in_string,in_string)">const func boolean: <b>wildcardMatch</b> (in string: stri, in string: pattern)</a></li>
</ul>
<h3>window</h3>
<ul>
<li><a href="libraries/image.htm#window(in_image)">const func PRIMITIVE_WINDOW: <b>window</b> (in image: anImage)</a></li>
</ul>
<h3>window.s7i</h3>
<ul>
<li><a href="libraries/window.htm">window.s7i</a></li>
</ul>
<h3>window_file</h3>
<ul>
<li><a href="libraries/window.htm#window_file">const type: <b>window_file</b></a></li>
</ul>
<h3>wiz.sd7</h3>
<ul>
<li><a href="scrshots/wiz.htm">The wizards castle</a></li>
</ul>
<h3>word_read</h3>
<ul>
<li><a href="libraries/clib_file.htm#word_read(in_clib_file,inout_char)">const func string: <b>word_read</b> (in clib_file: inFile,
                              inout char: terminationChar)</a></li>
</ul>
<h3>wrinum.s7i</h3>
<ul>
<li><a href="libraries/wrinum.htm">wrinum.s7i</a></li>
</ul>
<h3>write</h3>
<ul>
<li><a href="libraries/clib_file.htm#write(in_clib_file,in_string)">const proc: <b>write</b> (in clib_file: outFile, in string: stri)</a></li>
<li><a href="libraries/console.htm#write(in_console_file,in_string)">const proc: <b>write</b> (in console_file: aConsoleFile, in string: stri)</a></li>
<li><a href="libraries/enable_io.htm#write(inout_file,in_aType)">const proc: <b>write</b> (inout file: outFile, in aType: aValue)</a></li>
<li><a href="libraries/enable_io.htm#write(in_aType)">const proc: <b>write</b> (in aType: aValue)</a></li>
<li><a href="libraries/external_file.htm#write(in_external_file,in_string)">const proc: <b>write</b> (in external_file: outFile, in string: stri)</a></li>
<li><a href="libraries/file.htm#write(inout_file,in_string)">const proc: <b>write</b> (inout file: outFile, in string: stri)</a></li>
<li><a href="libraries/graph_file.htm#write(inout_graph_file,in_string)">const proc: <b>write</b> (inout graph_file: aGraphFile, in string: stri)</a></li>
<li><a href="libraries/gzip.htm#write(inout_gzipWriteFile,in_string)">const proc: <b>write</b> (inout gzipWriteFile: outFile, in string: stri)</a></li>
<li><a href="libraries/iobuffer.htm#write(inout_bufferFile,in_string)">const proc: <b>write</b> (inout bufferFile: outBufferFile, in string: stri)</a></li>
<li><a href="libraries/line.htm#write(inout_lineFile,in_string)">const proc: <b>write</b> (inout lineFile: outFile, in string: stri)</a></li>
<li><a href="libraries/logfile.htm#write(inout_logFile,ref_func_string)">const proc: <b>write</b> (inout logFile: log, ref func string: stri)</a></li>
<li><a href="libraries/lower.htm#write(inout_lowerFile,in_string)">const proc: <b>write</b> (inout lowerFile: outFile, in string: stri)</a></li>
<li><a href="libraries/more.htm#write(inout_moreFile,in_string)">const proc: <b>write</b> (inout moreFile: outFile, in string: stri)</a></li>
<li><a href="libraries/null_file.htm#write(in_null_file,in_string)">const proc: <b>write</b> (in null_file: outFile, in string: stri)</a></li>
<li><a href="libraries/pixmap_file.htm#write(inout_pixmapFontFile,in_string)">const proc: <b>write</b> (inout pixmapFontFile: fontFile, in string: stri)</a></li>
<li><a href="libraries/socket.htm#write(in_socket,in_string)">const proc: <b>write</b> (in socket: outSocket, in string: stri)</a></li>
<li><a href="libraries/stdio.htm#write(in_string)">const proc: <b>write</b> (in string: stri)</a></li>
<li><a href="libraries/strifile.htm#write(inout_striFile,in_string)">const proc: <b>write</b> (inout striFile: outStriFile, in string: stri)</a></li>
<li><a href="libraries/stritext.htm#write(inout_striText,in_string)">const proc: <b>write</b> (inout striText: outStriText, in string: stri)</a></li>
<li><a href="libraries/tee.htm#write(inout_teeFile,in_string)">const proc: <b>write</b> (inout teeFile: outFile, in string: stri)</a></li>
<li><a href="libraries/tls.htm#write(inout_tlsFile,in_string)">const proc: <b>write</b> (inout tlsFile: outFile, in string: stri)</a></li>
<li><a href="libraries/upper.htm#write(inout_upperFile,in_string)">const proc: <b>write</b> (inout upperFile: outFile, in string: stri)</a></li>
<li><a href="libraries/utf16.htm#write(in_utf16leFile,in_string)">const proc: <b>write</b> (in utf16leFile: outFile, in string: stri)</a></li>
<li><a href="libraries/utf16.htm#write(in_utf16beFile,in_string)">const proc: <b>write</b> (in utf16beFile: outFile, in string: stri)</a></li>
<li><a href="libraries/utf8.htm#write(in_utf8File,in_string)">const proc: <b>write</b> (in utf8File: outFile, in string: stri)</a></li>
<li><a href="libraries/window.htm#write(inout_window_file,in_string)">const proc: <b>write</b> (inout window_file: window_fil, in string: stri)</a></li>
</ul>
<h3>writeHtml</h3>
<ul>
<li><a href="libraries/htmldom.htm#writeHtml(inout_file,in_htmlDocument)">const proc: <b>writeHtml</b> (inout file: outFile, in htmlDocument: document)</a></li>
<li><a href="libraries/htmldom.htm#writeHtml(in_htmlDocument)">const proc: <b>writeHtml</b> (in htmlDocument: document)</a></li>
</ul>
<h3>writef</h3>
<ul>
<li><a href="libraries/getf.htm#writef(in_string,in_array_string)">const proc: <b>writef</b> (in string: file_name, in array string: data)</a></li>
</ul>
<h3>writeln</h3>
<ul>
<li><a href="libraries/enable_io.htm#writeln(inout_file,in_aType)">const proc: <b>writeln</b> (inout file: outFile, in aType: aValue)</a></li>
<li><a href="libraries/enable_io.htm#writeln(in_aType)">const proc: <b>writeln</b> (in aType: aValue)</a></li>
<li><a href="libraries/file.htm#writeln(inout_file)">const proc: <b>writeln</b> (inout file: outFile)</a></li>
<li><a href="libraries/file.htm#writeln(inout_file,in_string)">const proc: <b>writeln</b> (inout file: outFile, in string: stri)</a></li>
<li><a href="libraries/graph_file.htm#writeln(inout_graph_file)">const proc: <b>writeln</b> (inout graph_file: aGraphFile)</a></li>
<li><a href="libraries/line.htm#writeln(inout_lineFile)">const proc: <b>writeln</b> (inout lineFile: outFile)</a></li>
<li><a href="libraries/logfile.htm#writeln(inout_logFile,ref_func_string)">const proc: <b>writeln</b> (inout logFile: log, ref func string: stri)</a></li>
<li><a href="libraries/lower.htm#writeln(inout_lowerFile)">const proc: <b>writeln</b> (inout lowerFile: outFile)</a></li>
<li><a href="libraries/lower.htm#writeln(inout_lowerFile,in_string)">const proc: <b>writeln</b> (inout lowerFile: outFile, in string: stri)</a></li>
<li><a href="libraries/more.htm#writeln(inout_moreFile)">const proc: <b>writeln</b> (inout moreFile: outFile)</a></li>
<li><a href="libraries/null_file.htm#writeln(inout_null_file)">const proc: <b>writeln</b> (inout null_file: outFile)</a></li>
<li><a href="libraries/null_file.htm#writeln(inout_null_file,in_string)">const proc: <b>writeln</b> (inout null_file: outFile, in string: stri)</a></li>
<li><a href="libraries/pixmap_file.htm#writeln(inout_pixmapFontFile)">const proc: <b>writeln</b> (inout pixmapFontFile: fontFile)</a></li>
<li><a href="libraries/socket.htm#writeln(in_socket,in_string)">const proc: <b>writeln</b> (in socket: outSocket, in string: stri)</a></li>
<li><a href="libraries/stdio.htm#writeln">const proc: <b>writeln</b></a></li>
<li><a href="libraries/stdio.htm#writeln(in_string)">const proc: <b>writeln</b> (in string: stri)</a></li>
<li><a href="libraries/tee.htm#writeln(inout_teeFile)">const proc: <b>writeln</b> (inout teeFile: outFile)</a></li>
<li><a href="libraries/tls.htm#writeln(inout_tlsFile,in_string)">const proc: <b>writeln</b> (inout tlsFile: outFile, in string: stri)</a></li>
<li><a href="libraries/upper.htm#writeln(inout_upperFile)">const proc: <b>writeln</b> (inout upperFile: outFile)</a></li>
<li><a href="libraries/upper.htm#writeln(inout_upperFile,in_string)">const proc: <b>writeln</b> (inout upperFile: outFile, in string: stri)</a></li>
<li><a href="libraries/window.htm#writeln(inout_window_file)">const proc: <b>writeln</b> (inout window_file: window_fil)</a></li>
</ul>
<h3>x509BasicConstraints</h3>
<ul>
<li><a href="libraries/x509cert.htm#x509BasicConstraints(in_integer)">const func x509Extension: <b>x509BasicConstraints</b> (in integer: pathLenConstraint)</a></li>
<li><a href="libraries/x509cert.htm#x509BasicConstraints(in_boolean)">const func x509Extension: <b>x509BasicConstraints</b> (in boolean: cA)</a></li>
</ul>
<h3>x509KeyUsage</h3>
<ul>
<li><a href="libraries/x509cert.htm#x509KeyUsage(in_bitset)">const func x509Extension: <b>x509KeyUsage</b> (in bitset: keyUsage)</a></li>
</ul>
<h3>x509cert.s7i</h3>
<ul>
<li><a href="libraries/x509cert.htm">x509cert.s7i</a></li>
</ul>
<h3>xHeight</h3>
<ul>
<li><a href="libraries/font.htm#xHeight(in_font)">const func integer: <b>xHeight</b> (in font: aFont)</a></li>
</ul>
<h3>xPos</h3>
<ul>
<li><a href="libraries/graph.htm#xPos(in_PRIMITIVE_WINDOW)">const func integer: <b>xPos</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
<li><a href="libraries/image.htm#xPos(in_image)">const func integer: <b>xPos</b> (in image: anImage)</a></li>
</ul>
<h3>xmlBaseNode</h3>
<ul>
<li><a href="libraries/xmldom.htm#xmlBaseNode">const type: <b>xmlBaseNode</b></a></li>
</ul>
<h3>xmlContainer</h3>
<ul>
<li><a href="libraries/xmldom.htm#xmlContainer">const type: <b>xmlContainer</b></a></li>
</ul>
<h3>xmlElement</h3>
<ul>
<li><a href="libraries/xmldom.htm#xmlElement">const type: <b>xmlElement</b></a></li>
</ul>
<h3>xmlNode</h3>
<ul>
<li><a href="libraries/xmldom.htm#xmlNode">const type: <b>xmlNode</b></a></li>
</ul>
<h3>xmlText</h3>
<ul>
<li><a href="libraries/xmldom.htm#xmlText">const type: <b>xmlText</b></a></li>
</ul>
<h3>xml_ent.s7i</h3>
<ul>
<li><a href="libraries/xml_ent.htm">xml_ent.s7i</a></li>
</ul>
<h3>xmldom.s7i</h3>
<ul>
<li><a href="libraries/xmldom.htm">xmldom.s7i</a></li>
</ul>
<h3>xyArray</h3>
<ul>
<li><a href="libraries/graph.htm#xyArray(ref_pointList)">const func array integer: <b>xyArray</b> (ref pointList: aPointList)</a></li>
</ul>
<h3>xz.s7i</h3>
<ul>
<li><a href="libraries/xz.htm">xz.s7i</a></li>
</ul>
<h3>xzFile</h3>
<ul>
<li><a href="libraries/xz.htm#xzFile">const type: <b>xzFile</b></a></li>
</ul>
<h3>yPos</h3>
<ul>
<li><a href="libraries/graph.htm#yPos(in_PRIMITIVE_WINDOW)">const func integer: <b>yPos</b> (in PRIMITIVE_WINDOW: aWindow)</a></li>
<li><a href="libraries/image.htm#yPos(in_image)">const func integer: <b>yPos</b> (in image: anImage)</a></li>
</ul>
<h3>zip.s7i</h3>
<ul>
<li><a href="libraries/zip.htm">zip.s7i</a></li>
</ul>
<h3>zipArchive</h3>
<ul>
<li><a href="libraries/zip.htm#zipArchive">const type: <b>zipArchive</b></a></li>
</ul>
<h3>zstd.s7i</h3>
<ul>
<li><a href="libraries/zstd.htm">zstd.s7i</a></li>
</ul>
<h3>zstdFile</h3>
<ul>
<li><a href="libraries/zstd.htm#zstdFile">const type: <b>zstdFile</b></a></li>
</ul>
<h3>{</h3>
<ul>
<li><a href="libraries/bitset.htm#{(in_integer)}">const func bitset: <b>{</b> (in integer: aNumber) }</a></li>
<li><a href="libraries/bitset.htm#{(in_tuple_integer)}">const func bitset: <b>{</b> (in tuple integer: numberTuple) }</a></li>
<li><a href="libraries/bitset.htm#{(in_integer)..(in_integer)}">const func bitset: <b>{</b> (in integer: lowValue) ..
                     (in integer: highValue) }</a></li>
</ul>
<h3>|</h3>
<ul>
<li><a href="libraries/bin32.htm#(in_bin32)|(in_bin32)">const func bin32: (in bin32: bits1) <b>|</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(in_bin64)|(in_bin64)">const func bin64: (in bin64: bits1) <b>|</b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(in_bitset)|(in_bitset)">const func bitset: (in bitset: set1) <b>|</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(in_setType)|(in_setType)">const func setType: (in setType: set1) <b>|</b> (in setType: set2)</a></li>
<li><a href="libraries/hashsetof.htm#(in_setType)|(in_setType)">const func setType: (in setType: set1) <b>|</b> (in setType: set2)</a></li>
</ul>
<h3>|:=</h3>
<ul>
<li><a href="libraries/bin32.htm#(inout_bin32)|:=(in_bin32)">const proc: (inout bin32: bits1) <b>|:=</b> (in bin32: bits2)</a></li>
<li><a href="libraries/bin64.htm#(inout_bin64)|:=(in_bin64)">const proc: (inout bin64: bits1) <b>|:=</b> (in bin64: bits2)</a></li>
<li><a href="libraries/bitset.htm#(inout_bitset)|:=(in_bitset)">const proc: (inout bitset: dest) <b>|:=</b> (in bitset: set2)</a></li>
<li><a href="libraries/bitsetof.htm#(inout_setType)|:=(in_setType)">const proc: (inout setType: dest) <b>|:=</b> (in setType: set2)</a></li>
<li><a href="libraries/hashsetof.htm#(inout_setType)|:=(in_setType)">const proc: (inout setType: dest) <b>|:=</b> (in setType: set2)</a></li>
</ul>
<h3>~</h3>
<ul>
<li><a href="libraries/bin32.htm#~(in_bin32)">const func bin32: <b>~</b> (in bin32: bits)</a></li>
<li><a href="libraries/bin64.htm#~(in_bin64)">const func bin64: <b>~</b> (in bin64: bits)</a></li>
</ul>
</div>
</div>
  </body>
</html>

