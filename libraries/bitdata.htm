<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bitdata</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bitdata</big></b></td>
<td align="right"><a class="link" href="../lib/bitdata.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/bin64.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bitmapfont.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lsbBitStream">lsbBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type to read bitwise data starting with the least significant bit.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#msbBitStream">msbBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type to read bitwise data starting with the most significant bit.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverseBitStream">reverseBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type describing a stream of bits that is read backwards.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="lsbBitStream"><h3>lsbBitStream</h3></a>
<p>
const type: <b>lsbBitStream</b></p><dl><dd>
<p>
Type to read bitwise data starting with the least significant bit.
This is used by the Huffman compression (as part of the deflate
compression) used for ZIP and GZIP files. It is also used by the
Lempel-Ziv-Welch compression used for GIF files.
In an <i>lsbBitStream</i> the read direction is from
LSB (least significant bit) to MSB (most significant bit).
For the bit position in a byte holds: 0 = LSB, 7 = MSB.
</p>
</dd>
</dl></div>
<hr />
<div><a name="msbBitStream"><h3>msbBitStream</h3></a>
<p>
const type: <b>msbBitStream</b></p><dl><dd>
<p>
Type to read bitwise data starting with the most significant bit.
This is used by the Huffman compression used for JPEG files.
In an <i>msbBitStream</i> the read direction is from
MSB (least significant bit) to MSB (most significant bit).
For the bit position in a byte holds: 0 = MSB, 7 = LSB.
</p>
</dd>
</dl></div>
<hr />
<div><a name="reverseBitStream"><h3>reverseBitStream</h3></a>
<p>
const type: <b>reverseBitStream</b></p><dl><dd>
<p>
Type describing a stream of bits that is read backwards.
The bits are read from the most significant bit of the last byte
to the least significant bit of the first byte.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Constant Summary</td></tr>
<tr><td align="right" valign="top">array array integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverseBits">reverseBits</a></b></td></tr>
<tr><td width="30"></td><td>Array to reverse the bits of small numbers.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">lsbBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openLsbBitStream(in_file)">openLsbBitStream</a></b> (in file: inFile)</td></tr>
<tr><td width="30"></td><td>Open an LSB bit stream from the file <i>inFile</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">lsbBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openLsbBitStream(in_string)">openLsbBitStream</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Open an LSB bit stream from the string <i>stri</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(inout_lsbBitStream)">close</a></b> (inout lsbBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Close an LSB bit stream and position the underlying file at the next byte.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBit(inout_lsbBitStream)">getBit</a></b> (inout lsbBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Get one bit in LSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBits(inout_lsbBitStream,in_integer)">getBits</a></b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#peekBits(inout_lsbBitStream,in_integer)">peekBits</a></b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Peek <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipBits(inout_lsbBitStream,in_integer)">skipBits</a></b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(inout_lsbBitStream,in_integer)">gets</a></b> (inout lsbBitStream: inBitStream, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">msbBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openMsbBitStream(in_file)">openMsbBitStream</a></b> (in file: inFile)</td></tr>
<tr><td width="30"></td><td>Open an MSB bit stream from the file <i>inFile</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">msbBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openMsbBitStream(in_string)">openMsbBitStream</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Open an MSB bit stream from the string <i>stri</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(inout_msbBitStream)">close</a></b> (inout msbBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Close an MSB bit stream and position the underlying file at the next byte.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBit(inout_msbBitStream)">getBit</a></b> (inout msbBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Get one bit in MSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBits(inout_msbBitStream,in_integer)">getBits</a></b> (inout msbBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#peekBits(inout_msbBitStream,in_integer)">peekBits</a></b> (inout msbBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Peek <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipBits(inout_msbBitStream,in_integer)">skipBits</a></b> (inout msbBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(inout_msbBitStream,in_integer)">gets</a></b> (inout msbBitStream: inBitStream, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitLsb(inout_string,inout_integer,in_integer)">putBitLsb</a></b> (inout string: stri, inout integer: bitPos, in integer: bit)</td></tr>
<tr><td width="30"></td><td>Append one bit in LSB-First order to <i>stri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitsLsb(inout_string,inout_integer,in_var_integer,in_var_integer)">putBitsLsb</a></b> (inout string: stri, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Append <i>bitWidth</i> bits in LSB-First order to <i>stri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitMsb(inout_string,inout_integer,in_integer)">putBitMsb</a></b> (inout string: stri, inout integer: bitPos, in integer: bit)</td></tr>
<tr><td width="30"></td><td>Append one bit in MSB-First order to <i>stri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitsMsb(inout_string,inout_integer,in_var_integer,in_var_integer)">putBitsMsb</a></b> (inout string: stri, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Append <i>bitWidth</i> bits in MSB-First order to <i>stri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBitLsb(inout_file,inout_integer)">getBitLsb</a></b> (inout file: inFile, inout integer: bitPos)</td></tr>
<tr><td width="30"></td><td>Get one bit in LSB-First order from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBitsLsb(inout_file,inout_integer,in_var_integer)">getBitsLsb</a></b> (inout file: inFile, inout integer: bitPos,
    in var integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits in LSB-First order from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitLsb(inout_file,inout_integer,in_integer)">putBitLsb</a></b> (inout file: outFile, inout integer: bitPos, in integer: bit)</td></tr>
<tr><td width="30"></td><td>Write one bit in LSB-First order to <i>outFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitsLsb(inout_file,inout_integer,in_var_integer,in_var_integer)">putBitsLsb</a></b> (inout file: outFile, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Write <i>bitWidth</i> bits in LSB-First order to <i>outFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBitMsb(inout_file,inout_integer)">getBitMsb</a></b> (inout file: inFile, inout integer: bitPos)</td></tr>
<tr><td width="30"></td><td>Get one bit in MSB-First order from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBitsMsb(inout_file,inout_integer,in_var_integer)">getBitsMsb</a></b> (inout file: inFile, inout integer: bitPos,
    in var integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits in MSB-First order from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitMsb(inout_file,inout_integer,in_integer)">putBitMsb</a></b> (inout file: outFile, inout integer: bitPos, in integer: bit)</td></tr>
<tr><td width="30"></td><td>Write one bit in MSB-First order to <i>outFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBitsMsb(inout_file,inout_integer,in_var_integer,in_var_integer)">putBitsMsb</a></b> (inout file: outFile, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Write <i>bitWidth</i> bits in MSB-First order to <i>outFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reverseBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverseBitStream(inout_file,in_integer)">reverseBitStream</a></b> (inout file: inFile, in integer: length)</td></tr>
<tr><td width="30"></td><td>Create a reverse bit stream from <i>length</i> bytes read from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitsStillInStream(in_reverseBitStream)">bitsStillInStream</a></b> (in reverseBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Return the number of bits still present in the given reverse <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitsRead(in_reverseBitStream)">bitsRead</a></b> (in reverseBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Return the number of bits read from the given reverse <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBits(inout_reverseBitStream,in_integer)">getBits</a></b> (inout reverseBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits from the given reverse <i>inBitStream</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Constant Detail</td></tr></table></p>
<div><a name="reverseBits"><h3>reverseBits</h3></a>
<p>
const array array integer: <b>reverseBits</b></p><dl><dd>
<p>
Array to reverse the bits of small numbers.
The first index is the number of bits to be reversed (between 2 and 9).
The second index is the number for which the bits should be reversed.
</p>
<pre class="indent">
reverseBits[2][2#10]      returns  2#1
reverseBits[4][2#1101]    returns  2#1011
reverseBits[6][2#110101]  returns  2#101011
</pre>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="openLsbBitStream(in_file)"><h3>openLsbBitStream</h3></a>
<p>
const func lsbBitStream: <b>openLsbBitStream</b> (in file: inFile)</p><dl><dd>
<p>
Open an LSB bit stream from the file <i>inFile</i> for reading.
In an <i>lsbBitStream</i> the read direction is from
LSB (least significant bit) to MSB (most significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="openLsbBitStream(in_string)"><h3>openLsbBitStream</h3></a>
<p>
const func lsbBitStream: <b>openLsbBitStream</b> (in string: stri)</p><dl><dd>
<p>
Open an LSB bit stream from the string <i>stri</i> for reading.
In an <i>lsbBitStream</i> the read direction is from
LSB (least significant bit) to MSB (most significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="close(inout_lsbBitStream)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (inout lsbBitStream: inBitStream)</p><dl><dd>
<p>
Close an LSB bit stream and position the underlying file at the next byte.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBit(inout_lsbBitStream)"><h3>getBit</h3></a>
<p>
const func integer: <b>getBit</b> (inout lsbBitStream: inBitStream)</p><dl><dd>
<p>
Get one bit in LSB-First order from <i>inBitStream</i>.
The bit is read at the current byte and bit position. Afterwards
byte and bit position are advanced by one bit. The read
direction is from LSB (least significant bit) to MSB (most significant bit).
</p>
<pre class="indent">
aBitStream := openLsbBitStream("\2#01101011;\2#11001110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#11001110;"
#                       ^
#                    current
#                   position
getBit(aBitStream)  returns  2#1
# Original data:  "\2#01101011;\2#11001110;"
#                       1
#                    bit of
#                  the result
# Now aBitStream is at bytePos=1 and bitPos=6 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                      ^
#                   current
#                  position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bit is read.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBits(inout_lsbBitStream,in_integer)"><h3>getBits</h3></a>
<p>
const func integer: <b>getBits</b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from LSB (least significant bit) to MSB (most significant bit).
If bits from the next byte(s) are read a byte order of little-endian
is used.
</p>
<pre class="indent">
aBitStream := openLsbBitStream("\2#01101011;\2#11001110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#11001110;"
#                       ^
#                    current
#                   position
getBits(aBitStream, 5)  returns  2#10011
# Original data:  "\2#01101011;\2#11001110;"
#                     011               10
#                 lower bits        higher bits
#                  of result         of result
# Now aBitStream is at bytePos=2 and bitPos=2 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                                      ^
#                                   current
#                                   position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bits are read.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="peekBits(inout_lsbBitStream,in_integer)"><h3>peekBits</h3></a>
<p>
const func integer: <b>peekBits</b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Peek <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Byte
and bit position remain unchanged. The read direction is from
LSB (least significant bit) to MSB (most significant bit).
If bits from the next byte(s) are read a byte order of little-endian
is used.
</p>
<pre class="indent">
aBitStream := openLsbBitStream("\2#01101011;\2#10101101;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#10101101;"
#                       ^
#                    current
#                   position
peekBits(aBitStream, 6)  returns  2#101011
# Original data:  "\2#01101011;\2#10101101;"
#                     011              101
#                 lower bits        higher bits
#                  of result         of result
# BytePos and bitPos of aBitStream have not changed.
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bits are peeked.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="skipBits(inout_lsbBitStream,in_integer)"><h3>skipBits</h3></a>
<p>
const proc: <b>skipBits</b> (inout lsbBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.
</p>
<pre class="indent">
aBitStream := openLsbBitStream("\2#01101011;\2#11001110;");
# Now aBitStream has bytePos=1 and bitPos=0 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                            ^
#                         current
#                        position
skipBits(aBitStream, 5);
# Now aBitStream is at bytePos=1 and bitPos=5 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                       ^
#                    current
#                   position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bits are skipped.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be skipped.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="gets(inout_lsbBitStream,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (inout lsbBitStream: inBitStream, in integer: maxLength)</p><dl><dd>
<p>
Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.
The function returns bytes from the original data. If the current byte of
<i>inBitStream</i> is partially used, it is not considered, and the bytes are
read beginning with the next byte from the original data. After the data is
read, the position of <i>inBitStream</i> is advanced to the beginning of the
next byte. A <i>maxLength</i> of 0 sets the position to the beginning of the
next byte and returns an empty string.
</p>
<pre class="indent">
aBitStream := openLsbBitStream("\2#01101011;\2#1001111;\2#1001011;\2#1101;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#1001111;\2#1001011;\2#1101;"
#                       ^
#                    current
#                   position
gets(aBitStream, 2)  returns "\2#1001111;\2#1001011;" (="OK")
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bytes are read.</dd>
<dd><tt>maxLength</tt> - The maximum number of bytes to be read.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="openMsbBitStream(in_file)"><h3>openMsbBitStream</h3></a>
<p>
const func msbBitStream: <b>openMsbBitStream</b> (in file: inFile)</p><dl><dd>
<p>
Open an MSB bit stream from the file <i>inFile</i> for reading.
In an <i>msbBitStream</i> the read direction is from
MSB (most significant bit) to LSB (least significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="openMsbBitStream(in_string)"><h3>openMsbBitStream</h3></a>
<p>
const func msbBitStream: <b>openMsbBitStream</b> (in string: stri)</p><dl><dd>
<p>
Open an MSB bit stream from the string <i>stri</i> for reading.
In an <i>msbBitStream</i> the read direction is from
MSB (most significant bit) to LSB (least significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="close(inout_msbBitStream)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (inout msbBitStream: inBitStream)</p><dl><dd>
<p>
Close an MSB bit stream and position the underlying file at the next byte.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBit(inout_msbBitStream)"><h3>getBit</h3></a>
<p>
const func integer: <b>getBit</b> (inout msbBitStream: inBitStream)</p><dl><dd>
<p>
Get one bit in MSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
<pre class="indent">
aBitStream := openMsbBitStream("\2#01011100;\2#11010110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01011100;\2#11010110;";
#                          ^
#                       current
#                      position
getBit(aBitStream)  returns  2#1
# Original data:  "\2#01011100;\2#11010110;";
#                          1
#                       bit of
#                     the result
# Now aBitStream is at bytePos=1 and bitPos=6 of the original data.
# Original data:  "\2#01011100;\2#11010110;";
#                           ^
#                        current
#                       position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are peeked.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBits(inout_msbBitStream,in_integer)"><h3>getBits</h3></a>
<p>
const func integer: <b>getBits</b> (inout msbBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
<pre class="indent">
aBitStream := openMsbBitStream("\2#01011100;\2#11010110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01011100;\2#11010110;";
#                          ^
#                       current
#                      position
getBits(aBitStream, 5)  returns  2#10011
# Original data:  "\2#01011100;\2#11010110;";
#                          100    11
#                   higher bits  lower bits
#                    of result    of result
# Now aBitStream is at bytePos=2 and bitPos=2 of the original data.
# Original data:  "\2#01011100;\2#11010110;";
#                                   ^
#                                current
#                                position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are peeked.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="peekBits(inout_msbBitStream,in_integer)"><h3>peekBits</h3></a>
<p>
const func integer: <b>peekBits</b> (inout msbBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Peek <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Byte
and bit position remain unchanged. The read direction is from
MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
<pre class="indent">
aBitStream := openMsbBitStream("\2#01011100;\2#11010110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01011100;\2#11010110;";
#                          ^
#                       current
#                      position
peekBits(aBitStream, 6)  returns  2#100110
# Original data:  "\2#01011100;\2#11010110;";
#                          100    110
#                   higher bits  lower bits
#                    of result    of result
# BytePos and bitPos of aBitStream have not changed.
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are read.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="skipBits(inout_msbBitStream,in_integer)"><h3>skipBits</h3></a>
<p>
const proc: <b>skipBits</b> (inout msbBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.
</p>
<pre class="indent">
aBitStream := openMsbBitStream("\2#01101011;\2#11001110;");
# Now aBitStream has bytePos=1 and bitPos=0 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                     ^
#                  current
#                 position
skipBits(aBitStream, 5);
# Now aBitStream is at bytePos=1 and bitPos=5 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                          ^
#                       current
#                      position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are skipped.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be skipped.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="gets(inout_msbBitStream,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (inout msbBitStream: inBitStream, in integer: maxLength)</p><dl><dd>
<p>
Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.
The function returns bytes from the original data. If the current byte of
<i>inBitStream</i> is partially used, it is not considered, and the bytes are
read beginning with the next byte from the original data. After the data is
read, the position of <i>inBitStream</i> is advanced to the beginning of the
next byte. A <i>maxLength</i> of 0 sets the position to the beginning of the
next byte and returns an empty string.
</p>
<pre class="indent">
aBitStream := openMsbBitStream("\2#01101011;\2#1001111;\2#1001011;\2#1101;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#1001111;\2#1001011;\2#1101;"
#                       ^
#                    current
#                   position
gets(aBitStream, 2)  returns "\2#1001111;\2#1001011;" (="OK")
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bytes are read.</dd>
<dd><tt>maxLength</tt> - The maximum number of bytes to be read.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitLsb(inout_string,inout_integer,in_integer)"><h3>putBitLsb</h3></a>
<p>
const proc: <b>putBitLsb</b> (inout string: stri, inout integer: bitPos, in integer: bit)</p><dl><dd>
<p>
Append one bit in LSB-First order to <i>stri</i>.
The bit is appended to <i>stri</i> at the current bit position.
Afterwards the bit position is advanced by one bit. The append
direction is from LSB (least significant bit) to MSB (most significant bit).
If necessary <i>stri</i> is enlarged.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - String of bytes to which the bit is appended.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=LSB) and 7 (=MSB).</dd>
<dd><tt>bit</tt> - Bit to be appended to <i>stri</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitsLsb(inout_string,inout_integer,in_var_integer,in_var_integer)"><h3>putBitsLsb</h3></a>
<p>
const proc: <b>putBitsLsb</b> (inout string: stri, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</p><dl><dd>
<p>
Append <i>bitWidth</i> bits in LSB-First order to <i>stri</i>.
The bits are appended to <i>stri</i> at the current bit position. Afterwards
the bit position is advanced by <i>bitWidth</i> bits. The append
direction is from LSB (least significant bit) to MSB (most significant bit).
If necessary <i>stri</i> is enlarged with bytes in little-endian byte order.
</p>
<pre class="indent">
stri := "\2#01011;"; bitPos := 5;
putBitsLsb(stri, bitPos, 2#10011, 5);
# Now holds:  stri = "\2#01101011;\2#10;"  and  bitPos = 2
#                        011         10
#                     appended    appended
#                    lower bits  higher bits
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - String of bytes to which the bits are appended.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=LSB) and 7 (=MSB).</dd>
<dd><tt>bits</tt> - Bits to be appended to <i>stri</i>.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be appended (width of <i>bits</i>).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitMsb(inout_string,inout_integer,in_integer)"><h3>putBitMsb</h3></a>
<p>
const proc: <b>putBitMsb</b> (inout string: stri, inout integer: bitPos, in integer: bit)</p><dl><dd>
<p>
Append one bit in MSB-First order to <i>stri</i>.
The bit is appended to <i>stri</i> at the current bit position.
Afterwards the bit position is advanced by one bit. The append
direction is from MSB (most significant bit) to LSB (least significant bit).
If necessary <i>stri</i> is enlarged.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - String of bytes to which the bit is appended.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=MSB) and 7 (=LSB).</dd>
<dd><tt>bit</tt> - Bit to be appended to <i>stri</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitsMsb(inout_string,inout_integer,in_var_integer,in_var_integer)"><h3>putBitsMsb</h3></a>
<p>
const proc: <b>putBitsMsb</b> (inout string: stri, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</p><dl><dd>
<p>
Append <i>bitWidth</i> bits in MSB-First order to <i>stri</i>.
The bits are appended to <i>stri</i> at the current bit position. Afterwards
the bit position is advanced by <i>bitWidth</i> bits. The append
direction is from MSB (most significant bit) to LSB (least significant bit).
If necessary <i>stri</i> is enlarged with bytes in big-endian byte order.
</p>
<pre class="indent">
stri := "\2#01011000;";
putBitsMsb(stri, bitPos, 2#10011, 5);
# Now holds  stri = "\2#01011100;\2#11000000;"  and  bitPos = 2
#                            100    11
#                        appended  appended
#                     higher bits  lower bits
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - String of bytes to which the bits are appended.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=MSB) and 7 (=LSB).</dd>
<dd><tt>bits</tt> - Bits to be appended to <i>stri</i>.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be appended (width of <i>bits</i>).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBitLsb(inout_file,inout_integer)"><h3>getBitLsb</h3></a>
<p>
const func integer: <b>getBitLsb</b> (inout file: inFile, inout integer: bitPos)</p><dl><dd>
<p>
Get one bit in LSB-First order from <i>inFile</i>.
The bit is read at the current byte and bit position. Afterwards
byte and bit position are advanced by one bit. The read
direction is from LSB (least significant bit) to MSB (most significant bit).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File of bytes from which the bit is read.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 and 8.               0 = LSB, 7 = MSB, 8 = A bitPos of 0 (=LSB) in the next byte.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - If reading from <i>inFile</i> fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBitsLsb(inout_file,inout_integer,in_var_integer)"><h3>getBitsLsb</h3></a>
<p>
const func integer: <b>getBitsLsb</b> (inout file: inFile, inout integer: bitPos,
    in var integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits in LSB-First order from <i>inFile</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from LSB (least significant bit) to MSB (most significant bit).
If bits from the next byte(s) are read a byte order of little-endian
is used.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File of bytes from which the bits are read.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 and 8.               0 = LSB, 7 = MSB, 8 = A bitPos of 0 (=LSB) in the next byte.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - If reading from <i>inFile</i> fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitLsb(inout_file,inout_integer,in_integer)"><h3>putBitLsb</h3></a>
<p>
const proc: <b>putBitLsb</b> (inout file: outFile, inout integer: bitPos, in integer: bit)</p><dl><dd>
<p>
Write one bit in LSB-First order to <i>outFile</i>.
The bit is appended to <i>outFile</i> at the current bit position.
Afterwards the bit position is advanced by one bit. The append
direction is from LSB (least significant bit) to MSB (most significant bit).
Bits are cached in outFile.bufferChar until a complete byte is present.
Complete bytes in outFile.bufferChar are written to <i>outFile</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outFile</tt> - File of bytes to which the <i>bit</i> is written.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=LSB) and 7 (=MSB).</dd>
<dd><tt>bit</tt> - Bit to be written to <i>outFile</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitsLsb(inout_file,inout_integer,in_var_integer,in_var_integer)"><h3>putBitsLsb</h3></a>
<p>
const proc: <b>putBitsLsb</b> (inout file: outFile, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</p><dl><dd>
<p>
Write <i>bitWidth</i> bits in LSB-First order to <i>outFile</i>.
The bits are appended to <i>outFile</i> at the current bit position.
Afterwards the bit position is advanced by <i>bitWidth</i> bits. The append
direction is from LSB (least significant bit) to MSB (most significant bit).
Bits are cached in outFile.bufferChar until a complete byte is present.
Complete bytes in outFile.bufferChar are written to <i>outFile</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outFile</tt> - File of bytes to which the <i>bits</i> is written.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=LSB) and 7 (=MSB).</dd>
<dd><tt>bits</tt> - Bits to be written to <i>outFile</i>.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be written (width of <i>bits</i>).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBitMsb(inout_file,inout_integer)"><h3>getBitMsb</h3></a>
<p>
const func integer: <b>getBitMsb</b> (inout file: inFile, inout integer: bitPos)</p><dl><dd>
<p>
Get one bit in MSB-First order from <i>inFile</i>.
The bit is read at the current byte and bit position. Afterwards
byte and bit position are advanced by one bit. The read
direction is from MSB (most significant bit) to LSB (least significant bit).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File of bytes from which the bit is read.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 and 8.               0 = MSB, 7 = LSB, 8 = A bitPos of 0 (=MSB) in the next byte.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - If reading from <i>inFile</i> fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBitsMsb(inout_file,inout_integer,in_var_integer)"><h3>getBitsMsb</h3></a>
<p>
const func integer: <b>getBitsMsb</b> (inout file: inFile, inout integer: bitPos,
    in var integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits in MSB-First order from <i>inFile</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File of bytes from which the bits are read.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 and 8.               0 = MSB, 7 = LSB, 8 = A bitPos of 0 (=MSB) in the next byte.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - If reading from <i>inFile</i> fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitMsb(inout_file,inout_integer,in_integer)"><h3>putBitMsb</h3></a>
<p>
const proc: <b>putBitMsb</b> (inout file: outFile, inout integer: bitPos, in integer: bit)</p><dl><dd>
<p>
Write one bit in MSB-First order to <i>outFile</i>.
The bit is appended to <i>outFile</i> at the current bit position.
Afterwards the bit position is advanced by one bit. The append
direction is from MSB (most significant bit) to LSB (least significant bit).
Bits are cached in outFile.bufferChar until a complete byte is present.
Complete bytes in outFile.bufferChar are written to <i>outFile</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outFile</tt> - File of bytes to which the <i>bit</i> is written.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=MSB) and 7 (=LSB).</dd>
<dd><tt>bit</tt> - Bit to be written to <i>outFile</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBitsMsb(inout_file,inout_integer,in_var_integer,in_var_integer)"><h3>putBitsMsb</h3></a>
<p>
const proc: <b>putBitsMsb</b> (inout file: outFile, inout integer: bitPos, in var integer: bits,
    in var integer: bitWidth)</p><dl><dd>
<p>
Write <i>bitWidth</i> bits in MSB-First order to <i>outFile</i>.
The bits are appended to <i>outFile</i> at the current bit position.
Afterwards the bit position is advanced by <i>bitWidth</i> bits. The append
direction is from MSB (most significant bit) to LSB (least significant bit).
Bits are cached in outFile.bufferChar until a complete byte is present.
Complete bytes in outFile.bufferChar are written to <i>outFile</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outFile</tt> - File of bytes to which the <i>bits</i> is written.</dd>
<dd><tt>bitPos</tt> - Current bit position between 0 (=MSB) and 7 (=LSB).</dd>
<dd><tt>bits</tt> - Bits to be written to <i>outFile</i>.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be written (width of <i>bits</i>).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="reverseBitStream(inout_file,in_integer)"><h3>reverseBitStream</h3></a>
<p>
const func reverseBitStream: <b>reverseBitStream</b> (inout file: inFile, in integer: length)</p><dl><dd>
<p>
Create a reverse bit stream from <i>length</i> bytes read from <i>inFile</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bitsStillInStream(in_reverseBitStream)"><h3>bitsStillInStream</h3></a>
<p>
const func integer: <b>bitsStillInStream</b> (in reverseBitStream: inBitStream)</p><dl><dd>
<p>
Return the number of bits still present in the given reverse <i>inBitStream</i>.
Note that it is possible to read beyond the end fo the stream. In this
case negative values are returned.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bitsRead(in_reverseBitStream)"><h3>bitsRead</h3></a>
<p>
const func integer: <b>bitsRead</b> (in reverseBitStream: inBitStream)</p><dl><dd>
<p>
Return the number of bits read from the given reverse <i>inBitStream</i>.
Note that it is possible to read beyond the end fo the stream.
So the function might return more bits than actually present.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBits(inout_reverseBitStream,in_integer)"><h3>getBits</h3></a>
<p>
const func integer: <b>getBits</b> (inout reverseBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits from the given reverse <i>inBitStream</i>.
The bits are read from the most significant bit of the last byte
to the least significant bit of the first byte.
It is possible to read beyond the end of the stream.
In this case the stream is assumed to consist of zero bytes.
</p>
</dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/bin64.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bitmapfont.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
