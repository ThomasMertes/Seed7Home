<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bitdata</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bitdata</big></b></td>
<td align="right"><a class="link" href="../lib/bitdata.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bin64.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bitmapfont.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lsbInBitStream">lsbInBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type to read bitwise data starting with the least significant bit.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#msbInBitStream">msbInBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type to read bitwise data starting with the most significant bit.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lsbOutBitStream">lsbOutBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type to write bitwise data starting with the least significant bit.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#msbOutBitStream">msbOutBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type to write bitwise data starting with the most significant bit.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverseBitStream">reverseBitStream</a></b></td></tr>
<tr><td width="30"></td><td>Type describing a stream of bits that is read backwards.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="lsbInBitStream"><h3>lsbInBitStream</h3></a>
<p>
const type: <b>lsbInBitStream</b></p><dl><dd>
<p>
Type to read bitwise data starting with the least significant bit.
This is used by the Huffman compression (as part of the deflate
compression) used for ZIP and GZIP files. It is also used by the
Lempel-Ziv-Welch compression used for GIF files.
In a <i>lsbInBitStream</i> the read direction is from
LSB (least significant bit) to MSB (most significant bit).
For the bit position in a byte holds: 0 = LSB, 7 = MSB.
</p>
</dd>
</dl></div>
<hr />
<div><a name="msbInBitStream"><h3>msbInBitStream</h3></a>
<p>
const type: <b>msbInBitStream</b></p><dl><dd>
<p>
Type to read bitwise data starting with the most significant bit.
This is used by the Huffman compression used for JPEG files.
In a <i>msbInBitStream</i> the read direction is from
MSB (most significant bit) to LSB (least significant bit).
For the bit position in a byte holds: 0 = MSB, 7 = LSB.
</p>
</dd>
</dl></div>
<hr />
<div><a name="lsbOutBitStream"><h3>lsbOutBitStream</h3></a>
<p>
const type: <b>lsbOutBitStream</b></p><dl><dd>
<p>
Type to write bitwise data starting with the least significant bit.
In a <i>lsbOutBitStream</i> the write direction is from
LSB (least significant bit) to MSB (most significant bit).
For the bit position in a byte (bitPos) holds: 0 = LSB, 7 = MSB.
The bits are stored in a string of bytes. The byte string can
be obtained with the function getBytes(). The function flush()
can be used to add a partially filled byte to the byte string.
This bit encoding is used by the Huffman compression (as part of
the deflate compression) used for ZIP and GZIP files. It is also
used by the Lempel-Ziv-Welch compression used for GIF files.
</p>
</dd>
</dl></div>
<hr />
<div><a name="msbOutBitStream"><h3>msbOutBitStream</h3></a>
<p>
const type: <b>msbOutBitStream</b></p><dl><dd>
<p>
Type to write bitwise data starting with the most significant bit.
In a <i>msbOutBitStream</i> the write direction is from
MSB (most significant bit) to LSB (least significant bit).
For the bit position in a byte (bitSize) holds: 0 = MSB, 7 = LSB.
The bits are stored in a string of bytes. The byte string can
be obtained with the function getBytes(). The function flush()
can be used to add a partially filled byte to the byte string.
This bit encoding is used by the Huffman compression used for
JPEG files.
</p>
</dd>
</dl></div>
<hr />
<div><a name="reverseBitStream"><h3>reverseBitStream</h3></a>
<p>
const type: <b>reverseBitStream</b></p><dl><dd>
<p>
Type describing a stream of bits that is read backwards.
The bits are read from the most significant bit of the last byte
to the least significant bit of the first byte.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Constant Summary</td></tr>
<tr><td align="right" valign="top">array array integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverseBits">reverseBits</a></b></td></tr>
<tr><td width="30"></td><td>Array to reverse the bits of small numbers.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">lsbInBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openLsbInBitStream(in_file)">openLsbInBitStream</a></b> (in file: inFile)</td></tr>
<tr><td width="30"></td><td>Open an LSB bit stream from the file <i>inFile</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">lsbInBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openLsbInBitStream(in_string)">openLsbInBitStream</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Open an LSB bit stream from the string <i>stri</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(inout_lsbInBitStream)">close</a></b> (inout lsbInBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Close an LSB bit stream and position the underlying file at the next byte.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBit(inout_lsbInBitStream)">getBit</a></b> (inout lsbInBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Get one bit in LSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBits(inout_lsbInBitStream,in_integer)">getBits</a></b> (inout lsbInBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#peekBits(inout_lsbInBitStream,in_integer)">peekBits</a></b> (inout lsbInBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Peek <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipBits(inout_lsbInBitStream,in_integer)">skipBits</a></b> (inout lsbInBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#eof(in_lsbInBitStream)">eof</a></b> (in lsbInBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Determine if at least one bit beyond the bit stream has been read.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(inout_lsbInBitStream,in_integer)">gets</a></b> (inout lsbInBitStream: inBitStream, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">msbInBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openMsbInBitStream(in_file)">openMsbInBitStream</a></b> (in file: inFile)</td></tr>
<tr><td width="30"></td><td>Open an MSB bit stream from the file <i>inFile</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">msbInBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openMsbInBitStream(in_string)">openMsbInBitStream</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Open an MSB bit stream from the string <i>stri</i> for reading.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(inout_msbInBitStream)">close</a></b> (inout msbInBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Close an MSB bit stream and position the underlying file at the next byte.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBit(inout_msbInBitStream)">getBit</a></b> (inout msbInBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Get one bit in MSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBits(inout_msbInBitStream,in_integer)">getBits</a></b> (inout msbInBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#peekBits(inout_msbInBitStream,in_integer)">peekBits</a></b> (inout msbInBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Peek <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipBits(inout_msbInBitStream,in_integer)">skipBits</a></b> (inout msbInBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#eof(in_msbInBitStream)">eof</a></b> (in msbInBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Determine if at least one bit beyond the bit stream has been read.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(inout_msbInBitStream,in_integer)">gets</a></b> (inout msbInBitStream: inBitStream, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBit(inout_lsbOutBitStream,in_integer)">putBit</a></b> (inout lsbOutBitStream: outBitStream, in integer: bit)</td></tr>
<tr><td width="30"></td><td>Append one bit in LSB-First order to <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBits(inout_lsbOutBitStream,in_integer,in_integer)">putBits</a></b> (inout lsbOutBitStream: outBitStream, in integer: bits,
    in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Append <i>bitWidth</i> bits in LSB-First order to <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(in_lsbOutBitStream)">length</a></b> (in lsbOutBitStream: outBitStream)</td></tr>
<tr><td width="30"></td><td>Obtain the length of the given <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncate(inout_lsbOutBitStream,in_integer)">truncate</a></b> (inout lsbOutBitStream: outBitStream, in integer: length)</td></tr>
<tr><td width="30"></td><td>Truncate <i>outBitStream</i> to the given <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#flush(inout_lsbOutBitStream)">flush</a></b> (inout lsbOutBitStream: outBitStream)</td></tr>
<tr><td width="30"></td><td>Complete a partially filled byte and add it to the byte string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBytes(inout_lsbOutBitStream)">getBytes</a></b> (inout lsbOutBitStream: outBitStream)</td></tr>
<tr><td width="30"></td><td>Obtain the byte string created from the bits written to <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#write(inout_lsbOutBitStream,in_string)">write</a></b> (inout lsbOutBitStream: outBitStream, in string: stri)</td></tr>
<tr><td width="30"></td><td>Add the given string <i>stri</i> to the byte string of <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBit(inout_msbOutBitStream,in_integer)">putBit</a></b> (inout msbOutBitStream: outBitStream, in integer: bit)</td></tr>
<tr><td width="30"></td><td>Append one bit in MSB-First order to <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#putBits(inout_msbOutBitStream,in_integer,in_integer)">putBits</a></b> (inout msbOutBitStream: outBitStream, in integer: bits,
    in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Append <i>bitWidth</i> bits in MSB-First order to <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(in_msbOutBitStream)">length</a></b> (in msbOutBitStream: outBitStream)</td></tr>
<tr><td width="30"></td><td>Obtain the length of the given <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncate(inout_msbOutBitStream,in_integer)">truncate</a></b> (inout msbOutBitStream: outBitStream, in integer: length)</td></tr>
<tr><td width="30"></td><td>Truncate <i>outBitStream</i> to the given <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#flush(inout_msbOutBitStream)">flush</a></b> (inout msbOutBitStream: outBitStream)</td></tr>
<tr><td width="30"></td><td>Complete a partially filled byte and add it to the byte string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBytes(inout_msbOutBitStream)">getBytes</a></b> (inout msbOutBitStream: outBitStream)</td></tr>
<tr><td width="30"></td><td>Obtain the byte string created from the bits written to <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#write(inout_msbOutBitStream,in_string)">write</a></b> (inout msbOutBitStream: outBitStream, in string: stri)</td></tr>
<tr><td width="30"></td><td>Add the given string <i>stri</i> to the byte string of <i>outBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reverseBitStream</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverseBitStream(inout_file,in_integer)">reverseBitStream</a></b> (inout file: inFile, in integer: length)</td></tr>
<tr><td width="30"></td><td>Create a reverse bit stream from <i>length</i> bytes read from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitsStillInStream(in_reverseBitStream)">bitsStillInStream</a></b> (in reverseBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Return the number of bits still present in the given reverse <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitsRead(in_reverseBitStream)">bitsRead</a></b> (in reverseBitStream: inBitStream)</td></tr>
<tr><td width="30"></td><td>Return the number of bits read from the given reverse <i>inBitStream</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBits(inout_reverseBitStream,in_integer)">getBits</a></b> (inout reverseBitStream: inBitStream, in integer: bitWidth)</td></tr>
<tr><td width="30"></td><td>Get <i>bitWidth</i> bits from the given reverse <i>inBitStream</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Constant Detail</td></tr></table></p>
<div><a name="reverseBits"><h3>reverseBits</h3></a>
<p>
const array array integer: <b>reverseBits</b></p><dl><dd>
<p>
Array to reverse the bits of small numbers.
The first index is the number of bits to be reversed (between 2 and 9).
The second index is the number for which the bits should be reversed.
</p>
<pre class="indent">
reverseBits[2][2#10]      returns  2#1
reverseBits[4][2#1101]    returns  2#1011
reverseBits[6][2#110101]  returns  2#101011
</pre>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="openLsbInBitStream(in_file)"><h3>openLsbInBitStream</h3></a>
<p>
const func lsbInBitStream: <b>openLsbInBitStream</b> (in file: inFile)</p><dl><dd>
<p>
Open an LSB bit stream from the file <i>inFile</i> for reading.
In a <i>lsbInBitStream</i> the read direction is from
LSB (least significant bit) to MSB (most significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="openLsbInBitStream(in_string)"><h3>openLsbInBitStream</h3></a>
<p>
const func lsbInBitStream: <b>openLsbInBitStream</b> (in string: stri)</p><dl><dd>
<p>
Open an LSB bit stream from the string <i>stri</i> for reading.
In a <i>lsbInBitStream</i> the read direction is from
LSB (least significant bit) to MSB (most significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="close(inout_lsbInBitStream)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (inout lsbInBitStream: inBitStream)</p><dl><dd>
<p>
Close an LSB bit stream and position the underlying file at the next byte.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBit(inout_lsbInBitStream)"><h3>getBit</h3></a>
<p>
const func integer: <b>getBit</b> (inout lsbInBitStream: inBitStream)</p><dl><dd>
<p>
Get one bit in LSB-First order from <i>inBitStream</i>.
The bit is read at the current byte and bit position. Afterwards
byte and bit position are advanced by one bit. The read
direction is from LSB (least significant bit) to MSB (most significant bit).
</p>
<pre class="indent">
aBitStream := openLsbInBitStream("\2#01101011;\2#11001110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#11001110;"
#                       ^
#                    current
#                   position
getBit(aBitStream)  returns  2#1
# Original data:  "\2#01101011;\2#11001110;"
#                       1
#                    bit of
#                  the result
# Now aBitStream is at bytePos=1 and bitPos=6 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                      ^
#                   current
#                  position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bit is read.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBits(inout_lsbInBitStream,in_integer)"><h3>getBits</h3></a>
<p>
const func integer: <b>getBits</b> (inout lsbInBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from LSB (least significant bit) to MSB (most significant bit).
If bits from the next byte(s) are read a byte order of little-endian
is used.
</p>
<pre class="indent">
aBitStream := openLsbInBitStream("\2#01101011;\2#11001110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#11001110;"
#                       ^
#                    current
#                   position
getBits(aBitStream, 5)  returns  2#10011
# Original data:  "\2#01101011;\2#11001110;"
#                     011               10
#                 lower bits        higher bits
#                  of result         of result
# Now aBitStream is at bytePos=2 and bitPos=2 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                                      ^
#                                   current
#                                   position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bits are read.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="peekBits(inout_lsbInBitStream,in_integer)"><h3>peekBits</h3></a>
<p>
const func integer: <b>peekBits</b> (inout lsbInBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Peek <i>bitWidth</i> bits in LSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Byte
and bit position remain unchanged. The read direction is from
LSB (least significant bit) to MSB (most significant bit).
If bits from the next byte(s) are read a byte order of little-endian
is used.
</p>
<pre class="indent">
aBitStream := openLsbInBitStream("\2#01101011;\2#10101101;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#10101101;"
#                       ^
#                    current
#                   position
peekBits(aBitStream, 6)  returns  2#101011
# Original data:  "\2#01101011;\2#10101101;"
#                     011              101
#                 lower bits        higher bits
#                  of result         of result
# BytePos and bitPos of aBitStream have not changed.
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bits are peeked.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="skipBits(inout_lsbInBitStream,in_integer)"><h3>skipBits</h3></a>
<p>
const proc: <b>skipBits</b> (inout lsbInBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.
</p>
<pre class="indent">
aBitStream := openLsbInBitStream("\2#01101011;\2#11001110;");
# Now aBitStream has bytePos=1 and bitPos=0 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                            ^
#                         current
#                        position
skipBits(aBitStream, 5);
# Now aBitStream is at bytePos=1 and bitPos=5 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                       ^
#                    current
#                   position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bits are skipped.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be skipped.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="eof(in_lsbInBitStream)"><h3>eof</h3></a>
<p>
const func boolean: <b>eof</b> (in lsbInBitStream: inBitStream)</p><dl><dd>
<p>
Determine if at least one bit beyond the bit stream has been read.
The EOF condition is also met if skipBits() skips at least one bit
beyond the bit stream.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream which is checked for EOF.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="gets(inout_lsbInBitStream,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (inout lsbInBitStream: inBitStream, in integer: maxLength)</p><dl><dd>
<p>
Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.
The function returns bytes from the original data. If the current byte of
<i>inBitStream</i> is partially used, it is not considered, and the bytes are
read beginning with the next byte from the original data. After the data is
read, the position of <i>inBitStream</i> is advanced to the beginning of the
next byte. A <i>maxLength</i> of 0 sets the position to the beginning of the
next byte and returns an empty string.
</p>
<pre class="indent">
aBitStream := openLsbInBitStream("\2#01101011;\2#1001111;\2#1001011;\2#1101;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#1001111;\2#1001011;\2#1101;"
#                       ^
#                    current
#                   position
gets(aBitStream, 2)  returns "\2#1001111;\2#1001011;" (="OK")
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - LSB orderd bit stream from which the bytes are read.</dd>
<dd><tt>maxLength</tt> - The maximum number of bytes to be read.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="openMsbInBitStream(in_file)"><h3>openMsbInBitStream</h3></a>
<p>
const func msbInBitStream: <b>openMsbInBitStream</b> (in file: inFile)</p><dl><dd>
<p>
Open an MSB bit stream from the file <i>inFile</i> for reading.
In a <i>msbInBitStream</i> the read direction is from
MSB (most significant bit) to LSB (least significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="openMsbInBitStream(in_string)"><h3>openMsbInBitStream</h3></a>
<p>
const func msbInBitStream: <b>openMsbInBitStream</b> (in string: stri)</p><dl><dd>
<p>
Open an MSB bit stream from the string <i>stri</i> for reading.
In a <i>msbInBitStream</i> the read direction is from
MSB (most significant bit) to LSB (least significant bit).
</p>
</dd>
</dl></div>
<hr />
<div><a name="close(inout_msbInBitStream)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (inout msbInBitStream: inBitStream)</p><dl><dd>
<p>
Close an MSB bit stream and position the underlying file at the next byte.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBit(inout_msbInBitStream)"><h3>getBit</h3></a>
<p>
const func integer: <b>getBit</b> (inout msbInBitStream: inBitStream)</p><dl><dd>
<p>
Get one bit in MSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
<pre class="indent">
aBitStream := openMsbInBitStream("\2#01011100;\2#11010110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01011100;\2#11010110;";
#                          ^
#                       current
#                      position
getBit(aBitStream)  returns  2#1
# Original data:  "\2#01011100;\2#11010110;";
#                          1
#                       bit of
#                     the result
# Now aBitStream is at bytePos=1 and bitPos=6 of the original data.
# Original data:  "\2#01011100;\2#11010110;";
#                           ^
#                        current
#                       position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are peeked.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBits(inout_msbInBitStream,in_integer)"><h3>getBits</h3></a>
<p>
const func integer: <b>getBits</b> (inout msbInBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Afterwards
byte and bit position are advanced by <i>bitWidth</i> bits. The read
direction is from MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
<pre class="indent">
aBitStream := openMsbInBitStream("\2#01011100;\2#11010110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01011100;\2#11010110;";
#                          ^
#                       current
#                      position
getBits(aBitStream, 5)  returns  2#10011
# Original data:  "\2#01011100;\2#11010110;";
#                          100    11
#                   higher bits  lower bits
#                    of result    of result
# Now aBitStream is at bytePos=2 and bitPos=2 of the original data.
# Original data:  "\2#01011100;\2#11010110;";
#                                   ^
#                                current
#                                position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are peeked.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="peekBits(inout_msbInBitStream,in_integer)"><h3>peekBits</h3></a>
<p>
const func integer: <b>peekBits</b> (inout msbInBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Peek <i>bitWidth</i> bits in MSB-First order from <i>inBitStream</i>.
The bits are read at the current byte and bit position. Byte
and bit position remain unchanged. The read direction is from
MSB (most significant bit) to LSB (least significant bit).
If bits from the next byte(s) are read a byte order of big-endian
is used.
</p>
<pre class="indent">
aBitStream := openMsbInBitStream("\2#01011100;\2#11010110;");
skipBits(aBitStream, 5);
# Original data:  "\2#01011100;\2#11010110;";
#                          ^
#                       current
#                      position
peekBits(aBitStream, 6)  returns  2#100110
# Original data:  "\2#01011100;\2#11010110;";
#                          100    110
#                   higher bits  lower bits
#                    of result    of result
# BytePos and bitPos of aBitStream have not changed.
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are read.</dd>
<dd><tt>bitWidth</tt> - Number of bits requested.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the end of <i>inBitStream</i> has been reached.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="skipBits(inout_msbInBitStream,in_integer)"><h3>skipBits</h3></a>
<p>
const proc: <b>skipBits</b> (inout msbInBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Advance the bit position of <i>inBitStream</i> by <i>bitWidth</i> bits.
</p>
<pre class="indent">
aBitStream := openMsbInBitStream("\2#01101011;\2#11001110;");
# Now aBitStream has bytePos=1 and bitPos=0 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                     ^
#                  current
#                 position
skipBits(aBitStream, 5);
# Now aBitStream is at bytePos=1 and bitPos=5 of the original data.
# Original data:  "\2#01101011;\2#11001110;"
#                          ^
#                       current
#                      position
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bits are skipped.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be skipped.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="eof(in_msbInBitStream)"><h3>eof</h3></a>
<p>
const func boolean: <b>eof</b> (in msbInBitStream: inBitStream)</p><dl><dd>
<p>
Determine if at least one bit beyond the bit stream has been read.
The EOF condition is also met if skipBits() skips at least one bit
beyond the bit stream.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream which is checked for EOF.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="gets(inout_msbInBitStream,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (inout msbInBitStream: inBitStream, in integer: maxLength)</p><dl><dd>
<p>
Get up to <i>maxLength</i> bytes from <i>inBitStream</i>.
The function returns bytes from the original data. If the current byte of
<i>inBitStream</i> is partially used, it is not considered, and the bytes are
read beginning with the next byte from the original data. After the data is
read, the position of <i>inBitStream</i> is advanced to the beginning of the
next byte. A <i>maxLength</i> of 0 sets the position to the beginning of the
next byte and returns an empty string.
</p>
<pre class="indent">
aBitStream := openMsbInBitStream("\2#01101011;\2#1001111;\2#1001011;\2#1101;");
skipBits(aBitStream, 5);
# Original data:  "\2#01101011;\2#1001111;\2#1001011;\2#1101;"
#                       ^
#                    current
#                   position
gets(aBitStream, 2)  returns "\2#1001111;\2#1001011;" (="OK")
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inBitStream</tt> - MSB orderd bit stream from which the bytes are read.</dd>
<dd><tt>maxLength</tt> - The maximum number of bytes to be read.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBit(inout_lsbOutBitStream,in_integer)"><h3>putBit</h3></a>
<p>
const proc: <b>putBit</b> (inout lsbOutBitStream: outBitStream, in integer: bit)</p><dl><dd>
<p>
Append one bit in LSB-First order to <i>outBitStream</i>.
The append direction is from LSB (least significant bit) to
MSB (most significant bit).
</p>
<pre class="indent">
# Stream data:   "\2#0101011;"  and  bitPos = 7
#                   ^
#                current
#               position
putBit(aBitStream, 2#1)
# Stream data:  "\2#10101011;"  and  bitPos = 0
#                   1
#                appended
#                  bit
putBit(aBitStream, 2#1)
# Stream data:  "\2#10101011;\2#1;"  and  bitPos = 1
#                               1
#                            appended
#                              bit
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to which the bit is appended.</dd>
<dd><tt>bit</tt> - Bit to be appended to <i>outBitStream</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBits(inout_lsbOutBitStream,in_integer,in_integer)"><h3>putBits</h3></a>
<p>
const proc: <b>putBits</b> (inout lsbOutBitStream: outBitStream, in integer: bits,
    in integer: bitWidth)</p><dl><dd>
<p>
Append <i>bitWidth</i> bits in LSB-First order to <i>outBitStream</i>.
The append direction is from LSB (least significant bit) to
MSB (most significant bit). If necessary additional bytes are
added to <i>stristri</i>.
</p>
<pre class="indent">
# Stream data:     "\2#01011;"  and  bitPos = 5
#                     ^
#                  current
#                 position
putBits(aBitStream, 2#10011, 5);
# Stream data:  "\2#01101011;\2#10;"  and  bitPos = 2
#                   011         10
#                appended    appended
#               lower bits  higher bits
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to which the bits are appended.</dd>
<dd><tt>bits</tt> - Bits to be appended to <i>outBitStream</i>.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be appended (width of <i>bits</i>).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="length(in_lsbOutBitStream)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (in lsbOutBitStream: outBitStream)</p><dl><dd>
<p>
Obtain the length of the given <i>outBitStream</i>.
The bit stream length is measured in bits.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream from which the length is obtained.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the bit stream.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncate(inout_lsbOutBitStream,in_integer)"><h3>truncate</h3></a>
<p>
const proc: <b>truncate</b> (inout lsbOutBitStream: outBitStream, in integer: length)</p><dl><dd>
<p>
Truncate <i>outBitStream</i> to the given <i>length</i>.
If the bit stream previously was larger than <i>length</i>, the extra data is lost.
If the bit stream previously was shorter, it is extended, and the extended
part is filled with zero bits.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to be truncated.</dd>
<dd><tt>length</tt> - Requested length of <i>outBitStream</i> in bits.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The requested length is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="flush(inout_lsbOutBitStream)"><h3>flush</h3></a>
<p>
const proc: <b>flush</b> (inout lsbOutBitStream: outBitStream)</p><dl><dd>
<p>
Complete a partially filled byte and add it to the byte string.
If <i>outBitStream</i> has a partially filled byte it is filled with zero
bits and added to the byte string. If <i>outBitStream</i> has not a
partially filled byte nothing is done.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream where the partially filled byte is added.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBytes(inout_lsbOutBitStream)"><h3>getBytes</h3></a>
<p>
const func string: <b>getBytes</b> (inout lsbOutBitStream: outBitStream)</p><dl><dd>
<p>
Obtain the byte string created from the bits written to <i>outBitStream</i>.
The returned byte string is removed from <i>outBitStream</i>.
A partially filled byte is not part of the returned byte string.
The function flush() can be called in advance to add a
partially filled byte to the byte string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream from which the byte string is obtained.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string of completely filled bytes from <i>outBitStream</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="write(inout_lsbOutBitStream,in_string)"><h3>write</h3></a>
<p>
const proc: <b>write</b> (inout lsbOutBitStream: outBitStream, in string: stri)</p><dl><dd>
<p>
Add the given string <i>stri</i> to the byte string of <i>outBitStream</i>.
The <i>outBitStream</i> is flushed before adding <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to which <i>stri</i> is added.</dd>
<dd><tt>stri</tt> - String to be added to <i>outBitStream</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBit(inout_msbOutBitStream,in_integer)"><h3>putBit</h3></a>
<p>
const proc: <b>putBit</b> (inout msbOutBitStream: outBitStream, in integer: bit)</p><dl><dd>
<p>
Append one bit in MSB-First order to <i>outBitStream</i>.
The append direction is from MSB (most significant bit) to
LSB (least significant bit).
</p>
<pre class="indent">
# Stream data:  "\2#01011100;"  and  bitPos = 7
#                          ^
#                       current
#                       position
putBit(aBitStream, 2#1)
# Stream data:  "\2#01011101;"  and  bitPos = 0
#                          1
#                       appended
#                         bit
putBit(aBitStream, 2#1)
# Stream data:  "\2#01011101;\2#10000000;"  and  bitPos = 1
#                               1
#                            appended
#                              bit
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to which the bit is appended.</dd>
<dd><tt>bit</tt> - Bit to be appended to <i>outBitStream</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="putBits(inout_msbOutBitStream,in_integer,in_integer)"><h3>putBits</h3></a>
<p>
const proc: <b>putBits</b> (inout msbOutBitStream: outBitStream, in integer: bits,
    in integer: bitWidth)</p><dl><dd>
<p>
Append <i>bitWidth</i> bits in MSB-First order to <i>outBitStream</i>.
The append direction is from MSB (most significant bit) to
LSB (least significant bit). If necessary additional bytes are
added to <i>outBitStream</i>.
</p>
<pre class="indent">
# Stream data:  "\2#01011000;"  and  bitPos = 5
#                        ^
#                     current
#                    position
putBitsMsb(stri, bitPos, 2#10011, 5);
# Stream data:  "\2#01011100;\2#11000000;"  and  bitPos = 2
#                        100    11
#                    appended  appended
#                 higher bits  lower bits
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to which the bits are appended.</dd>
<dd><tt>bits</tt> - Bits to be appended to <i>outBitStream</i>.</dd>
<dd><tt>bitWidth</tt> - Number of bits to be appended (width of <i>bits</i>).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="length(in_msbOutBitStream)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (in msbOutBitStream: outBitStream)</p><dl><dd>
<p>
Obtain the length of the given <i>outBitStream</i>.
The bit stream length is measured in bits.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream from which the length is obtained.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the bit stream.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncate(inout_msbOutBitStream,in_integer)"><h3>truncate</h3></a>
<p>
const proc: <b>truncate</b> (inout msbOutBitStream: outBitStream, in integer: length)</p><dl><dd>
<p>
Truncate <i>outBitStream</i> to the given <i>length</i>.
If the bit stream previously was larger than <i>length</i>, the extra data is lost.
If the bit stream previously was shorter, it is extended, and the extended
part is filled with zero bits.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to be truncated.</dd>
<dd><tt>length</tt> - Requested length of <i>outBitStream</i> in bits.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The requested length is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="flush(inout_msbOutBitStream)"><h3>flush</h3></a>
<p>
const proc: <b>flush</b> (inout msbOutBitStream: outBitStream)</p><dl><dd>
<p>
Complete a partially filled byte and add it to the byte string.
If <i>outBitStream</i> has a partially filled byte it is filled with zero
bits and added to the byte string. If <i>outBitStream</i> has not a
partially filled byte nothing is done.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream where the partially filled byte is added.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getBytes(inout_msbOutBitStream)"><h3>getBytes</h3></a>
<p>
const func string: <b>getBytes</b> (inout msbOutBitStream: outBitStream)</p><dl><dd>
<p>
Obtain the byte string created from the bits written to <i>outBitStream</i>.
The returned byte string is removed from <i>outBitStream</i>.
A partially filled byte is not part of the returned byte string.
The function flush() can be called in advance to add a
partially filled byte to the byte string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream from which the byte string is obtained.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string of completely filled bytes from <i>outBitStream</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="write(inout_msbOutBitStream,in_string)"><h3>write</h3></a>
<p>
const proc: <b>write</b> (inout msbOutBitStream: outBitStream, in string: stri)</p><dl><dd>
<p>
Add the given string <i>stri</i> to the byte string of <i>outBitStream</i>.
The <i>outBitStream</i> is flushed before adding <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>outBitStream</tt> - Bit stream to which <i>stri</i> is added.</dd>
<dd><tt>stri</tt> - String to be added to <i>outBitStream</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="reverseBitStream(inout_file,in_integer)"><h3>reverseBitStream</h3></a>
<p>
const func reverseBitStream: <b>reverseBitStream</b> (inout file: inFile, in integer: length)</p><dl><dd>
<p>
Create a reverse bit stream from <i>length</i> bytes read from <i>inFile</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bitsStillInStream(in_reverseBitStream)"><h3>bitsStillInStream</h3></a>
<p>
const func integer: <b>bitsStillInStream</b> (in reverseBitStream: inBitStream)</p><dl><dd>
<p>
Return the number of bits still present in the given reverse <i>inBitStream</i>.
Note that it is possible to read beyond the end fo the stream. In this
case negative values are returned.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bitsRead(in_reverseBitStream)"><h3>bitsRead</h3></a>
<p>
const func integer: <b>bitsRead</b> (in reverseBitStream: inBitStream)</p><dl><dd>
<p>
Return the number of bits read from the given reverse <i>inBitStream</i>.
Note that it is possible to read beyond the end fo the stream.
So the function might return more bits than actually present.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBits(inout_reverseBitStream,in_integer)"><h3>getBits</h3></a>
<p>
const func integer: <b>getBits</b> (inout reverseBitStream: inBitStream, in integer: bitWidth)</p><dl><dd>
<p>
Get <i>bitWidth</i> bits from the given reverse <i>inBitStream</i>.
The bits are read from the most significant bit of the last byte
to the least significant bit of the first byte.
It is possible to read beyond the end of the stream.
In this case the stream is assumed to consist of zero bytes.
</p>
</dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bin64.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bitmapfont.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
