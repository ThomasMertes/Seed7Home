<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Float</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jsondom.htm">JSON DOM</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Float</big></b></td>
<td align="right"><a class="link" href="../lib/float.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/fixarray.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/font.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#float">float</a></b></td></tr>
<tr><td width="30"></td><td>Double precision floating point numbers.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="float"><h3>float</h3></a>
<p>
const type: <b>float</b></p><dl><dd>
<p>
Double precision floating point numbers.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Constant Summary</td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#Infinity">Infinity</a></b></td></tr>
<tr><td width="30"></td><td>Positive infinity.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#NaN">NaN</a></b></td></tr>
<tr><td width="30"></td><td>Not-a-Number (NaN) value.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr float) <b><a class="link" href="#(attr_float)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>float</i> (0.0).</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#+(in_float)">+</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Plus sign for <i>float</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#-(in_float)">-</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Minus sign, negate a <i>float</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: summand1) <b><a class="link" href="#(in_float)+(in_float)">+</a></b> (in float: summand2)</td></tr>
<tr><td width="30"></td><td>Add two <i>float</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: minuend) <b><a class="link" href="#(in_float)-(in_float)">-</a></b> (in float: subtrahend)</td></tr>
<tr><td width="30"></td><td>Compute the subtraction of two <i>float</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: factor1) <b><a class="link" href="#(in_float)*(in_float)">*</a></b> (in float: factor2)</td></tr>
<tr><td width="30"></td><td>Multiply two <i>float</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: dividend) <b><a class="link" href="#(in_float)/(in_float)">/</a></b> (in float: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the division of two <i>float</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: dividend) <b><a class="link" href="#(in_float)rem(in_float)">rem</a></b> (in float: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the floating-point remainder of a division.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: dividend) <b><a class="link" href="#(in_float)mod(in_float)">mod</a></b> (in float: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the floating-point modulo of a division.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: base) <b><a class="link" href="#(in_float)**(in_integer)">**</a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Compute the exponentiation of a float <i>base</i> with an <a class="link" href="integer.htm" title="integer">integer</a> <i>exponent</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: base) <b><a class="link" href="#(in_float)**(in_float)">**</a></b> (in float: exponent)</td></tr>
<tr><td width="30"></td><td>Compute the exponentiation of a float <i>base</i> with a float <i>exponent</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number) <b><a class="link" href="#(in_float)&lt;&lt;(in_integer)">&lt;&lt;</a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Multiply <i>number</i> by 2 raised to the power of <i>exponent</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number) <b><a class="link" href="#(in_float)>>(in_integer)">>></a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Divide <i>number</i> by 2 raised to the power of <i>exponent</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout float: number) <b><a class="link" href="#(inout_float)+:=(in_float)">+:=</a></b> (in float: delta)</td></tr>
<tr><td width="30"></td><td>Increment a float <i>number</i> by a <i>delta</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout float: number) <b><a class="link" href="#(inout_float)-:=(in_float)">-:=</a></b> (in float: delta)</td></tr>
<tr><td width="30"></td><td>Decrement a float <i>number</i> by a <i>delta</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout float: number) <b><a class="link" href="#(inout_float)*:=(in_float)">*:=</a></b> (in float: factor)</td></tr>
<tr><td width="30"></td><td>Multiply a float <i>number</i> by a <i>factor</i> and assign the result back to <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout float: number) <b><a class="link" href="#(inout_float)/:=(in_float)">/:=</a></b> (in float: divisor)</td></tr>
<tr><td width="30"></td><td>Divide a float <i>number</i> by a <i>divisor</i> and assign the result back to <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number1) <b><a class="link" href="#(in_float)=(in_float)">=</a></b> (in float: number2)</td></tr>
<tr><td width="30"></td><td>Check if two float numbers are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number1) <b><a class="link" href="#(in_float)&lt;>(in_float)">&lt;></a></b> (in float: number2)</td></tr>
<tr><td width="30"></td><td>Check if two float numbers are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number1) <b><a class="link" href="#(in_float)&lt;(in_float)">&lt;</a></b> (in float: number2)</td></tr>
<tr><td width="30"></td><td>Check if <i>number1</i> is less than <i>number2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number1) <b><a class="link" href="#(in_float)>(in_float)">></a></b> (in float: number2)</td></tr>
<tr><td width="30"></td><td>Check if <i>number1</i> is greater than <i>number2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number1) <b><a class="link" href="#(in_float)&lt;=(in_float)">&lt;=</a></b> (in float: number2)</td></tr>
<tr><td width="30"></td><td>Check if <i>number1</i> is less than or equal to <i>number2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number1) <b><a class="link" href="#(in_float)>=(in_float)">>=</a></b> (in float: number2)</td></tr>
<tr><td width="30"></td><td>Check if <i>number1</i> is greater than or equal to <i>number2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr float) <b><a class="link" href="#(attr_float)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a float number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number) <b><a class="link" href="#(in_float)digits(in_integer)">digits</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a <i>float</i> to a <a class="link" href="string.htm" title="string">string</a> in decimal fixed point notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in float: number) <b><a class="link" href="#(in_float)sci(in_integer)">sci</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a <i>float</i> to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: sciNumber) <b><a class="link" href="#(in_string)exp(in_integer)">exp</a></b> (in integer: expDigits)</td></tr>
<tr><td width="30"></td><td>Set the number of exponent digits in a scientific float notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr float) <b><a class="link" href="#(attr_float)conv(in_integer)">conv</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a float.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_float,in_float)">compare</a></b> (in float: number1, in float: number2)</td></tr>
<tr><td width="30"></td><td>Compare two float numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_float)">hashCode</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a float number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_float)">str</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Convert a float number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#string(in_float)">string</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Convert a float number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#float(in_string)">float</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a float number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#flt(in_integer)">flt</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a float.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#float(in_integer)">float</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a float.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#abs(in_float)">abs</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Compute the absolute value of a <i>float</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#round(in_float)">round</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Round a <i>float</i> to the nearest <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#trunc(in_float)">trunc</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Truncate towards zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isNaN(in_float)">isNaN</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Determine if a number has a Not-a-Number (<a class="link" href="#NaN" title="NaN">NaN</a>) value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isNegativeZero(in_float)">isNegativeZero</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Determine if a number is negative zero (-0.0).</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isPositiveZero(in_float)">isPositiveZero</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Determine if a number is +0.0.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_float)">literal</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Convert a float number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_float,in_float)">rand</a></b> (in float: low, in float: high)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random number in the range [low, high).</td></tr></table></td></tr>
<tr><td align="right" valign="top">floatElements</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#decompose(in_float)">decompose</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Decompose float into normalized fraction and integral exponent for 2.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Constant Detail</td></tr></table></p>
<div><a name="Infinity"><h3>Infinity</h3></a>
<p>
const float: <b>Infinity</b></p><dl><dd>
<p>
Positive infinity.
Infinity is the result of 1.0 / 0.0 .
</p>
</dd>
</dl></div>
<hr />
<div><a name="NaN"><h3>NaN</h3></a>
<p>
const float: <b>NaN</b></p><dl><dd>
<p>
Not-a-Number (NaN) value.
Represents an undefined or unrepresentable value.
NaN is the result of 0.0 / 0.0 .
Checking for NaN is done with the function <a class="link" href="#isNaN(in_float)" title="isNaN">isNaN</a>.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_float)._value"><h3>. value</h3></a>
<p>
const float: (attr float) <b>. value</b></p><dl><dd>
<p>
Default value of <i>float</i> (0.0).
</p>
</dd>
</dl></div>
<hr />
<div><a name="+(in_float)"><h3>+</h3></a>
<p>
const func float: <b>+</b> (in float: number)</p><dl><dd>
<p>
Plus sign for <i>float</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its operand unchanged.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="-(in_float)"><h3>-</h3></a>
<p>
const func float: <b>-</b> (in float: number)</p><dl><dd>
<p>
Minus sign, negate a <i>float</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the negated value of the number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)+(in_float)"><h3>+</h3></a>
<p>
const func float: (in float: summand1) <b>+</b> (in float: summand2)</p><dl><dd>
<p>
Add two <i>float</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sum of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)-(in_float)"><h3>-</h3></a>
<p>
const func float: (in float: minuend) <b>-</b> (in float: subtrahend)</p><dl><dd>
<p>
Compute the subtraction of two <i>float</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)*(in_float)"><h3>*</h3></a>
<p>
const func float: (in float: factor1) <b>*</b> (in float: factor2)</p><dl><dd>
<p>
Multiply two <i>float</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the product of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)/(in_float)"><h3>/</h3></a>
<p>
const func float: (in float: dividend) <b>/</b> (in float: divisor)</p><dl><dd>
<p>
Compute the division of two <i>float</i> numbers.
</p>
<pre class="indent">
A / 0.0    returns  Infinity  for A > 0.0
A / 0.0    returns -Infinity  for A &amp;lt; 0.0
0.0 / 0.0  returns NaN
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the division.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)rem(in_float)"><h3>rem</h3></a>
<p>
const func float: (in float: dividend) <b>rem</b> (in float: divisor)</p><dl><dd>
<p>
Compute the floating-point remainder of a division.
The remainder has the same sign as the dividend.
The remainder is dividend - flt(trunc(dividend / divisor)) * divisor
The remainder is computed without a conversion to integer.
</p>
<pre class="indent">
 A        rem NaN       returns NaN
 NaN      rem B         returns NaN
 A        rem 0.0       returns NaN
 Infinity rem B         returns NaN
-Infinity rem B         returns NaN
 0.0      rem B         returns 0.0  for B &amp;lt;> 0.0
 A        rem Infinity  returns A
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the floating-point remainder of the division.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)mod(in_float)"><h3>mod</h3></a>
<p>
const func float: (in float: dividend) <b>mod</b> (in float: divisor)</p><dl><dd>
<p>
Compute the floating-point modulo of a division.
The modulo has the same sign as the divisor.
The modulo is dividend - floor(dividend / divisor) * divisor
</p>
<pre class="indent">
 A        mod  NaN       returns  NaN
 NaN      mod  B         returns  NaN
 A        mod  0.0       returns  NaN
 Infinity mod  B         returns  NaN
-Infinity mod  B         returns  NaN
 0.0      mod  B         returns  0.0         for B &amp;lt;> 0.0
 A        mod  Infinity  returns  A           for A > 0
 A        mod  Infinity  returns  Infinity    for A &lt; 0
 A        mod -Infinity  returns  A           for A &lt; 0
 A        mod -Infinity  returns -Infinity    for A > 0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the floating-point modulo of the division.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)**(in_integer)"><h3>**</h3></a>
<p>
const func float: (in float: base) <b>**</b> (in integer: exponent)</p><dl><dd>
<p>
Compute the exponentiation of a float <i>base</i> with an <a class="link" href="integer.htm" title="integer">integer</a> <i>exponent</i>.
</p>
<pre class="indent">
  A    ** 0  returns 1.0
  NaN  ** 0  returns 1.0
  NaN  ** B  returns NaN              for B &lt;> 0
  0.0  ** B  returns 0.0              for B > 0
  0.0  ** 0  returns 1.0
  0.0  ** B  returns Infinity         for B &lt; 0
(-0.0) ** B  returns -Infinity        for B &lt; 0 and odd(B)
  A    ** B  returns 1.0 / A ** (-B)  for B &lt; 0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the exponentiation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)**(in_float)"><h3>**</h3></a>
<p>
const func float: (in float: base) <b>**</b> (in float: exponent)</p><dl><dd>
<p>
Compute the exponentiation of a float <i>base</i> with a float <i>exponent</i>.
</p>
<pre class="indent">
  A    ** B    returns NaN        for A &lt; 0.0 and B is not integer
  A    ** 0.0  returns 1.0
  NaN  ** 0.0  returns 1.0
  NaN  ** B    returns NaN        for B &lt;> 0.0
  0.0  ** B    returns 0.0        for B > 0.0
  0.0  ** 0.0  returns 1.0
  0.0  ** B    returns Infinity   for B &lt; 0.0
(-0.0) ** B    returns -Infinity  for B &lt; 0.0 and odd(B)
  1.0  ** B    returns 1.0
  1.0  ** NaN  returns 1.0
  A    ** NaN  returns NaN        for A &lt;> 1.0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the exponentiation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)&lt;&lt;(in_integer)"><h3>&lt;&lt;</h3></a>
<p>
const func float: (in float: number) <b>&lt;&lt;</b> (in integer: exponent)</p><dl><dd>
<p>
Multiply <i>number</i> by 2 raised to the power of <i>exponent</i>.
In other words: A &lt;&lt; B is equivalent to A * 2.0 ** B
If the result underflows zero is returned.
If the result overflows Infinity or -Infinity is returned,
depending on the sign of <i>number</i>.
If the argument <i>number</i> is a <a class="link" href="#NaN" title="NaN">NaN</a>, Infinity or -Infinity the
unchanged argument is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number * 2.0 ** exponent</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)>>(in_integer)"><h3>>></h3></a>
<p>
const func float: (in float: number) <b>>></b> (in integer: exponent)</p><dl><dd>
<p>
Divide <i>number</i> by 2 raised to the power of <i>exponent</i>.
In other words: A >> B is equivalent to A / 2.0 ** B
If the result underflows zero is returned.
If the result overflows Infinity or -Infinity is returned,
depending on the sign of <i>number</i>.
If the argument <i>number</i> is a <a class="link" href="#NaN" title="NaN">NaN</a>, Infinity or -Infinity the
unchanged argument is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number / 2.0 ** exponent</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(inout_float)+:=(in_float)"><h3>+:=</h3></a>
<p>
const proc: (inout float: number) <b>+:=</b> (in float: delta)</p><dl><dd>
<p>
Increment a float <i>number</i> by a <i>delta</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_float)-:=(in_float)"><h3>-:=</h3></a>
<p>
const proc: (inout float: number) <b>-:=</b> (in float: delta)</p><dl><dd>
<p>
Decrement a float <i>number</i> by a <i>delta</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_float)*:=(in_float)"><h3>*:=</h3></a>
<p>
const proc: (inout float: number) <b>*:=</b> (in float: factor)</p><dl><dd>
<p>
Multiply a float <i>number</i> by a <i>factor</i> and assign the result back to <i>number</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_float)/:=(in_float)"><h3>/:=</h3></a>
<p>
const proc: (inout float: number) <b>/:=</b> (in float: divisor)</p><dl><dd>
<p>
Divide a float <i>number</i> by a <i>divisor</i> and assign the result back to <i>number</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_float)=(in_float)"><h3>=</h3></a>
<p>
const func boolean: (in float: number1) <b>=</b> (in float: number2)</p><dl><dd>
<p>
Check if two float numbers are equal.
According to IEEE 754 a <a class="link" href="#NaN" title="NaN">NaN</a> is not equal to any float value.
Therefore <i>NaN = any_value</i> and <i>any_value = NaN</i>
always return FALSE. Even <i>NaN = NaN</i> returns FALSE.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both numbers are equal, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)&lt;>(in_float)"><h3>&lt;></h3></a>
<p>
const func boolean: (in float: number1) <b>&lt;></b> (in float: number2)</p><dl><dd>
<p>
Check if two float numbers are not equal.
According to IEEE 754 a <a class="link" href="#NaN" title="NaN">NaN</a> is not equal to any float value.
Therefore <i>NaN &lt;> any_value</i> and <i>any_value &lt;> NaN</i>
always return TRUE. Even <i>NaN &lt;> NaN</i> returns TRUE.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both numbers are equal, TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)&lt;(in_float)"><h3>&lt;</h3></a>
<p>
const func boolean: (in float: number1) <b>&lt;</b> (in float: number2)</p><dl><dd>
<p>
Check if <i>number1</i> is less than <i>number2</i>.
According to IEEE 754 a <a class="link" href="#NaN" title="NaN">NaN</a> is neither less than,
equal to, nor greater than any value, including itself.
If <i>number1</i> or <i>number2</i> is NaN, the result
is FALSE;
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>number1</i> is less than <i>number2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)>(in_float)"><h3>></h3></a>
<p>
const func boolean: (in float: number1) <b>></b> (in float: number2)</p><dl><dd>
<p>
Check if <i>number1</i> is greater than <i>number2</i>.
According to IEEE 754 a <a class="link" href="#NaN" title="NaN">NaN</a> is neither less than,
equal to, nor greater than any value, including itself.
If <i>number1</i> or <i>number2</i> is NaN, the result
is FALSE;
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>number1</i> is greater than <i>number2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)&lt;=(in_float)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in float: number1) <b>&lt;=</b> (in float: number2)</p><dl><dd>
<p>
Check if <i>number1</i> is less than or equal to <i>number2</i>.
According to IEEE 754 a <a class="link" href="#NaN" title="NaN">NaN</a> is neither less than,
equal to, nor greater than any value, including itself.
If <i>number1</i> or <i>number2</i> is NaN, the result
is FALSE;
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>number1</i> is less than or equal to <i>number2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)>=(in_float)"><h3>>=</h3></a>
<p>
const func boolean: (in float: number1) <b>>=</b> (in float: number2)</p><dl><dd>
<p>
Check if <i>number1</i> is greater than or equal to <i>number2</i>.
According to IEEE 754 a <a class="link" href="#NaN" title="NaN">NaN</a> is neither less than,
equal to, nor greater than any value, including itself.
If <i>number1</i> or <i>number2</i> is NaN, the result
is FALSE;
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>number1</i> is greater than or equal to <i>number2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_float)parse(in_string)"><h3>parse</h3></a>
<p>
const func float: (attr float) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a float number.
</p>
<pre class="indent">
float parse "1.2345"     returns  1.2345
float parse "1.2345e6"   returns  1234500.0
float parse "-1.0e-308"  returns -1.0e-308
float parse "1"          returns  1.0
float parse "2."         returns  2.0
float parse ".5"         returns  0.5
float parse "-.25"       returns  -0.25
float parse "Infinity"   returns  Infinity
float parse "-Infinity"  returns -Infinity
float parse "NaN"        returns  NaN
float parse "2.14PI"     raises RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the float result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string contains not a float literal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)digits(in_integer)"><h3>digits</h3></a>
<p>
const func string: (in float: number) <b>digits</b> (in integer: precision)</p><dl><dd>
<p>
Convert a <i>float</i> to a <a class="link" href="string.htm" title="string">string</a> in decimal fixed point notation.
The number is rounded to the specified number of digits (<i>precision</i>).
Halfway cases are rounded away from zero. Except for a <i>precision</i> of
zero the representation has a decimal point and at least one digit
before and after the decimal point. Negative numbers are preceded by
a minus sign (e.g.: "-1.25"). If all digits in the result are 0 a
possible negative sign is omitted.
</p>
<pre class="indent">
0.012345 digits 4   returns "0.0123"
1.2468 digits 2     returns "1.25"
3.1415 digits 0     returns "3"
0.125 digits 2      returns "0.12"
0.375 digits 2      returns "0.38"
Infinity digits 5   returns "Infinity"
-Infinity digits 6  returns "-Infinity"
NaN digits 7        returns "NaN"
-0.004 digits 2     returns "0.00"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>precision</tt> - Number of digits after the decimal point.        If the <i>precision</i> is zero the decimal point is omitted.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_float)sci(in_integer)"><h3>sci</h3></a>
<p>
const func string: (in float: number) <b>sci</b> (in integer: precision)</p><dl><dd>
<p>
Convert a <i>float</i> to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.
Scientific notation uses a decimal significand and a decimal exponent.
The significand has an optional sign and exactly one digit before the
decimal point. The fractional part of the significand is rounded
to the specified number of digits (<i>precision</i>). Halfway cases are
rounded away from zero. The fractional part is followed by the
letter e and an exponent, which is always signed. The value zero is
never written with a negative sign.
</p>
<pre class="indent">
0.012345 sci 4   returns "1.2345e-2"
1.2468 sci 2     returns "1.25e+0"
3.1415 sci 0     returns "3e+0"
0.125 sci 1      returns "1.2e-1"
0.375 sci 1      returns "3.8e-1"
Infinity sci 5   returns "Infinity"
-Infinity sci 6  returns "-Infinity"
NaN sci 7        returns "NaN"
-0.004 sci 2     returns "-4.00e-3"
-0.0 sci 2       returns "0.00e+0"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>precision</tt> - Number of digits after the decimal point.        If the <i>precision</i> is zero the decimal point is omitted.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)exp(in_integer)"><h3>exp</h3></a>
<p>
const func string: (in string: sciNumber) <b>exp</b> (in integer: expDigits)</p><dl><dd>
<p>
Set the number of exponent digits in a scientific float notation.
If <i>sciNumber</i> contains a <a class="link" href="string.htm" title="string">string</a> in scientific float notation
the exponent is changed to contain at least <i>expDigits</i> digits.
If <i>sciNumber</i> contains not a string in scientific float
notation it is returned unchanged. The <i>exp</i> operator is
intended to be used together with the <i>sci</i> operator
</p>
<pre class="indent">
0.012345 sci 4 exp 2   returns "1.2345e-02"
1.2468e15 sci 2 exp 1  returns "1.25e+15"
3.1415 sci 0 exp 3     returns "3e+000"
0.125 sci 1 exp 2      returns "1.2e-01"
0.375 sci 1 exp 2      returns "3.8e-01"
Infinity sci 5 exp 2   returns "Infinity"
-Infinity sci 6 exp 2  returns "-Infinity"
NaN sci 7 exp 2        returns "NaN"
-0.004 sci 2 exp 2     returns "-4.00e-03"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_float)conv(in_integer)"><h3>conv</h3></a>
<p>
const func float: (attr float) <b>conv</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a float.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the float result of the conversion.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_float,in_float)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in float: number1, in float: number2)</p><dl><dd>
<p>
Compare two float numbers.
Because <i>compare</i> is used to sort float values, a unique
sort sequence of the values is needed. Therefore <i>compare</i>
considers all <a class="link" href="#NaN" title="NaN">NaN</a> values as greater than Infinity.
The NaN values are also considered to be equal to each other.
Negative zero (-0.0) is considered by <i>compare</i> to be
equal to positive zero (+0.0). This conforms to the behavior
of all other float comparisons with zero.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_float)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in float: number)</p><dl><dd>
<p>
Compute the hash value of a float number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_float)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in float: number)</p><dl><dd>
<p>
Convert a float number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
The result string has the style [-]ddd.ddd where there is at least
one digit before and after the decimal point. The number of digits
after the decimal point is determined automatically. Except for the
case with only one zero digit after the decimal point the last digit
is never zero. Negative zero (-0.0) and positive zero (+0.0)
are both converted to "0.0".
</p>
<pre class="indent">
str(16.125)    returns "16.125"
str(-0.0)      returns "0.0"
str(Infinity)  returns "Infinity"
str(-Infinity) returns "-Infinity"
str(NaN)       returns "NaN"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="string(in_float)"><h3>string</h3></a>
<p>
const func string: <b>string</b> (in float: number)</p><dl><dd>
<p>
Convert a float number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
The result string has the style [-]ddd.ddd where there is at least
one digit before and after the decimal point. The number of digits
after the decimal point is determined automatically. Except for the
case with only one zero digit after the decimal point the last digit
is never zero. Negative zero (-0.0) and positive zero (+0.0)
are both converted to "0.0".
</p>
<pre class="indent">
string(16.125)    returns "16.125"
string(-0.0)      returns "0.0"
string(Infinity)  returns "Infinity"
string(-Infinity) returns "-Infinity"
string(NaN)       returns "NaN"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="float(in_string)"><h3>float</h3></a>
<p>
const func float: <b>float</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a float number.
</p>
<pre class="indent">
float("1.2345")     returns  1.2345
float("1.2345e6")   returns  1234500.0
float("-1.0e-308")  returns -1.0e-308
float("1")          returns  1.0
float("2.")         returns  2.0
float(".5")         returns  0.5
float("-.25")       returns  -0.25
float("Infinity")   returns  Infinity
float("-Infinity")  returns -Infinity
float("NaN")        returns  NaN
float("3.14PI"      raises RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the float result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string contains not a float literal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="flt(in_integer)"><h3>flt</h3></a>
<p>
const func float: <b>flt</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a float.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the float result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="float(in_integer)"><h3>float</h3></a>
<p>
const func float: <b>float</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a float.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the float result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="abs(in_float)"><h3>abs</h3></a>
<p>
const func float: <b>abs</b> (in float: number)</p><dl><dd>
<p>
Compute the absolute value of a <i>float</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="round(in_float)"><h3>round</h3></a>
<p>
const func integer: <b>round</b> (in float: number)</p><dl><dd>
<p>
Round a <i>float</i> to the nearest <a class="link" href="integer.htm" title="integer">integer</a>.
Halfway cases are rounded away from zero.
</p>
<pre class="indent">
round( 1.4999)  returns  1
round( 0.5)     returns  1
round( 0.4999)  returns  0
round(-0.4999)  returns  0
round(-0.5)     returns -1
round(-1.4999)  returns -1
round(1.0e+19)  raises  RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the rounded value.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the number is <a class="link" href="#NaN" title="NaN">NaN</a>, -Infinity, Infinity,            or does not fit into an integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="trunc(in_float)"><h3>trunc</h3></a>
<p>
const func integer: <b>trunc</b> (in float: number)</p><dl><dd>
<p>
Truncate towards zero.
The fractional part of a number is discarded.
</p>
<pre class="indent">
trunc( 1.9999)  returns  1
trunc( 1.0)     returns  1
trunc( 0.9999)  returns  0
trunc(-0.9999)  returns  0
trunc(-1.0)     returns -1
trunc(-1.9999)  returns -1
trunc(1.0e+19)  raises  RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the nearest <a class="link" href="integer.htm" title="integer">integer</a> not larger in absolute value         than the argument.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the number is <a class="link" href="#NaN" title="NaN">NaN</a>, -Infinity, Infinity,            or does not fit into an integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="isNaN(in_float)"><h3>isNaN</h3></a>
<p>
const func boolean: <b>isNaN</b> (in float: number)</p><dl><dd>
<p>
Determine if a number has a Not-a-Number (<a class="link" href="#NaN" title="NaN">NaN</a>) value.
NaN represents an undefined or unrepresentable value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the number has a Not-a-Number (NaN) value,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="isNegativeZero(in_float)"><h3>isNegativeZero</h3></a>
<p>
const func boolean: <b>isNegativeZero</b> (in float: number)</p><dl><dd>
<p>
Determine if a number is negative zero (-0.0).
This function is the only possibility to determine if a number
is -0.0. The comparison operators (=, &lt;>, &lt;, >, &lt;=, >=) and
the function <i>compare</i> treat 0.0 and -0.0 as equal. The
operators <i>digits</i> and <i>sci</i> and the function <i>str</i>
return the same <a class="link" href="string.htm" title="string">string</a> for -0.0 and +0.0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the number is -0.0,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="isPositiveZero(in_float)"><h3>isPositiveZero</h3></a>
<p>
const func boolean: <b>isPositiveZero</b> (in float: number)</p><dl><dd>
<p>
Determine if a number is +0.0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the number is +0.0,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_float)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in float: number)</p><dl><dd>
<p>
Convert a float number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rand(in_float,in_float)"><h3>rand</h3></a>
<p>
const func float: <b>rand</b> (in float: low, in float: high)</p><dl><dd>
<p>
Compute pseudo-random number in the range [low, high).
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the computed pseudo-random number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The range is empty (low >= high holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="decompose(in_float)"><h3>decompose</h3></a>
<p>
const func floatElements: <b>decompose</b> (in float: number)</p><dl><dd>
<p>
Decompose float into normalized fraction and integral exponent for 2.
If the argument (number) is 0.0, -0.0, Infinity, -Infinity or <a class="link" href="#NaN" title="NaN">NaN</a>
the fraction is set to the argument and the exponent is set to 0.
For all other arguments the fraction is set to an absolute value
between 0.5(included) and 1.0(excluded). For all values of number holds:
</p>
<pre class="indent">
number = fraction * 2.0 ** exponent
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be decomposed into fraction and exponent.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>floatElements with fraction and exponent set.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/fixarray.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/font.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
