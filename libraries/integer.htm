<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Integer</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Integer</big></b></td>
<td align="right"><a class="link" href="../lib/integer.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/inifile.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/iobuffer.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>integer</i> (0).</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)._first">. first</a></b></td></tr>
<tr><td width="30"></td><td>Minimum value of <i>integer</i> (-9223372036854775808).</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)._last">. last</a></b></td></tr>
<tr><td width="30"></td><td>Maximum value of <i>integer</i> (9223372036854775807).</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#+(in_integer)">+</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Plus sign for integer numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#-(in_integer)">-</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Minus sign, negate an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#!(in_integer)">!</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Compute the factorial of a number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: summand1) <b><a class="link" href="#(in_integer)+(in_integer)">+</a></b> (in integer: summand2)</td></tr>
<tr><td width="30"></td><td>Add two integer numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: minuend) <b><a class="link" href="#(in_integer)-(in_integer)">-</a></b> (in integer: subtrahend)</td></tr>
<tr><td width="30"></td><td>Compute the subtraction of two integer numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: factor1) <b><a class="link" href="#(in_integer)*(in_integer)">*</a></b> (in integer: factor2)</td></tr>
<tr><td width="30"></td><td>Multiply two integer numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: dividend) <b><a class="link" href="#(in_integer)div(in_integer)">div</a></b> (in integer: divisor)</td></tr>
<tr><td width="30"></td><td>Integer division truncated towards zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: dividend) <b><a class="link" href="#(in_integer)rem(in_integer)">rem</a></b> (in integer: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the remainder of the integer division <i>div</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: dividend) <b><a class="link" href="#(in_integer)mdiv(in_integer)">mdiv</a></b> (in integer: divisor)</td></tr>
<tr><td width="30"></td><td>Integer division truncated towards negative infinity.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: dividend) <b><a class="link" href="#(in_integer)mod(in_integer)">mod</a></b> (in integer: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the modulo (remainder) of the integer division <i>mdiv</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: base) <b><a class="link" href="#(in_integer)**(in_integer)">**</a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Compute the exponentiation of an integer base with an integer exponent.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)&lt;&lt;(in_integer)">&lt;&lt;</a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift an integer number left by lshift bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)>>(in_integer)">>></a></b> (in integer: rshift)</td></tr>
<tr><td width="30"></td><td>Shift an integer number right by rshift bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout integer: number) <b><a class="link" href="#(inout_integer)+:=(in_integer)">+:=</a></b> (in integer: delta)</td></tr>
<tr><td width="30"></td><td>Increment an integer variable by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout integer: number) <b><a class="link" href="#(inout_integer)-:=(in_integer)">-:=</a></b> (in integer: delta)</td></tr>
<tr><td width="30"></td><td>Decrement an integer variable by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout integer: number) <b><a class="link" href="#(inout_integer)*:=(in_integer)">*:=</a></b> (in integer: factor)</td></tr>
<tr><td width="30"></td><td>Multiply an integer number by a factor and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout integer: number) <b><a class="link" href="#(inout_integer)&lt;&lt;:=(in_integer)">&lt;&lt;:=</a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift a number left by lshift bits and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout integer: number) <b><a class="link" href="#(inout_integer)>>:=(in_integer)">>>:=</a></b> (in integer: rshift)</td></tr>
<tr><td width="30"></td><td>Shift a number right by rshift bits and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: n) <b><a class="link" href="#(in_integer)!(in_integer)">!</a></b> (in integer: k)</td></tr>
<tr><td width="30"></td><td>Binomial coefficient</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number1) <b><a class="link" href="#(in_integer)=(in_integer)">=</a></b> (in integer: number2)</td></tr>
<tr><td width="30"></td><td>Check if two integer numbers are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number1) <b><a class="link" href="#(in_integer)&lt;>(in_integer)">&lt;></a></b> (in integer: number2)</td></tr>
<tr><td width="30"></td><td>Check if two integer numbers are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number1) <b><a class="link" href="#(in_integer)&lt;(in_integer)">&lt;</a></b> (in integer: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is less than number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number1) <b><a class="link" href="#(in_integer)>(in_integer)">></a></b> (in integer: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is greater than number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number1) <b><a class="link" href="#(in_integer)&lt;=(in_integer)">&lt;=</a></b> (in integer: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is less than or equal to number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number1) <b><a class="link" href="#(in_integer)>=(in_integer)">>=</a></b> (in integer: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is greater than or equal to number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)conv(in_integer)">conv</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert to integer.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)radix(in_integer)">radix</a></b> (in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)RADIX(in_integer)">RADIX</a></b> (in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)lpad0(in_integer)">lpad0</a></b> (in integer: length)</td></tr>
<tr><td width="30"></td><td>Convert <i>integer</i> to <a class="link" href="string.htm" title="string">string</a> and pad it with zeros at the left side.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to an <i>integer</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)sci(in_integer)">sci</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_integer,in_integer)">compare</a></b> (in integer: number1, in integer: number2)</td></tr>
<tr><td width="30"></td><td>Compare two integer numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_integer)">hashCode</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#succ(in_integer)">succ</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Successor of an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pred(in_integer)">pred</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Predecessor of an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#abs(in_integer)">abs</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Compute the absolute value of an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#sqrt(in_integer)">sqrt</a></b> (in integer: radicand)</td></tr>
<tr><td width="30"></td><td>Compute the integer square root of an integer radicand.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#log10(in_integer)">log10</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Compute the truncated base 10 logarithm of an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#log2(in_integer)">log2</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Compute the truncated base 2 logarithm of an integer number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#odd(in_integer)">odd</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Determine if an integer number is odd.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ord(in_integer)">ord</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert to integer.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_integer)">str</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#string(in_integer)">string</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_integer)">literal</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#incr(inout_integer)">incr</a></b> (inout integer: number)</td></tr>
<tr><td width="30"></td><td>Increment an integer variable.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#decr(inout_integer)">decr</a></b> (inout integer: number)</td></tr>
<tr><td width="30"></td><td>Decrement an integer variable.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_integer,in_integer)">rand</a></b> (in integer: low, in integer: high)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random number in the range [low, high].</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitLength(in_integer)">bitLength</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Number of bits in the minimum two's-complement representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lowestSetBit(in_integer)">lowestSetBit</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Number of lowest-order zero bits in the two's-complement representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_string)">integer</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to an <i>integer</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_string,in_integer)">integer</a></b> (in string: stri, in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert a numeric <a class="link" href="string.htm" title="string">string</a>, with a specified radix, to an <i>integer</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">aType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#min(in_aType,in_aType)">min</a></b> (in aType: value1, in aType: value2)</td></tr>
<tr><td width="30"></td><td>Determine the minimum of two values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">aType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#max(in_aType,in_aType)">max</a></b> (in aType: value1, in aType: value2)</td></tr>
<tr><td width="30"></td><td>Determine the maximum of two values.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_integer)._value"><h3>. value</h3></a>
<p>
const integer: (attr integer) <b>. value</b></p><dl><dd>
<p>
Default value of <i>integer</i> (0).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_integer)._first"><h3>. first</h3></a>
<p>
const integer: (attr integer) <b>. first</b></p><dl><dd>
<p>
Minimum value of <i>integer</i> (-9223372036854775808).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_integer)._last"><h3>. last</h3></a>
<p>
const integer: (attr integer) <b>. last</b></p><dl><dd>
<p>
Maximum value of <i>integer</i> (9223372036854775807).
</p>
</dd>
</dl></div>
<hr />
<div><a name="+(in_integer)"><h3>+</h3></a>
<p>
const func integer: <b>+</b> (in integer: number)</p><dl><dd>
<p>
Plus sign for integer numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its operand unchanged.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="-(in_integer)"><h3>-</h3></a>
<p>
const func integer: <b>-</b> (in integer: number)</p><dl><dd>
<p>
Minus sign, negate an integer number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the negated value of the number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="!(in_integer)"><h3>!</h3></a>
<p>
const func integer: <b>!</b> (in integer: number)</p><dl><dd>
<p>
Compute the factorial of a number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the factorial of the number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - The number is negative or the result            does not fit into an integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)+(in_integer)"><h3>+</h3></a>
<p>
const func integer: (in integer: summand1) <b>+</b> (in integer: summand2)</p><dl><dd>
<p>
Add two integer numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sum of the two numbers.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)-(in_integer)"><h3>-</h3></a>
<p>
const func integer: (in integer: minuend) <b>-</b> (in integer: subtrahend)</p><dl><dd>
<p>
Compute the subtraction of two integer numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two numbers.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)*(in_integer)"><h3>*</h3></a>
<p>
const func integer: (in integer: factor1) <b>*</b> (in integer: factor2)</p><dl><dd>
<p>
Multiply two integer numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the product of the two numbers.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)div(in_integer)"><h3>div</h3></a>
<p>
const func integer: (in integer: dividend) <b>div</b> (in integer: divisor)</p><dl><dd>
<p>
Integer division truncated towards zero.
The remainder of this division is computed with <i>rem</i>.
For the operations <i>div</i> and <i>rem</i> holds for all A:
</p>
<pre class="indent">
(A div B) * B + A rem B = A           when B &lt;> 0
-A div B = -(A div B)                 when B &lt;> 0
-A rem B = -(A rem B)                 when B &lt;> 0
A rem B >= 0 and A rem B &lt; abs(B)     when B &lt;> 0 and A >= 0
A rem B &lt;= 0 and A rem B > -abs(B)    when B &lt;> 0 and A &lt;= 0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)rem(in_integer)"><h3>rem</h3></a>
<p>
const func integer: (in integer: dividend) <b>rem</b> (in integer: divisor)</p><dl><dd>
<p>
Compute the remainder of the integer division <i>div</i>.
The remainder has the same sign as the dividend.
</p>
<pre class="indent">
A rem B
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A - (A div B) * B
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the remainder of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)mdiv(in_integer)"><h3>mdiv</h3></a>
<p>
const func integer: (in integer: dividend) <b>mdiv</b> (in integer: divisor)</p><dl><dd>
<p>
Integer division truncated towards negative infinity.
The modulo (remainder) of this division is computed with <i>mod</i>.
Therefore this division is called modulo division (<i>mdiv</i>).
For the operations <i>mdiv</i> and <i>mod</i> holds for all A:
</p>
<pre class="indent">
(A mdiv B) * B + A mod B = A          when B &lt;> 0
-A mdiv B = A mdiv -B                 when B &lt;> 0
-A mod -B = -(A mod B)                when B &lt;> 0
A mod B >= 0 and A mod B &lt; B          when B > 0
A mod B &lt;= 0 and A mod B > B          when B &lt; 0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)mod(in_integer)"><h3>mod</h3></a>
<p>
const func integer: (in integer: dividend) <b>mod</b> (in integer: divisor)</p><dl><dd>
<p>
Compute the modulo (remainder) of the integer division <i>mdiv</i>.
The modulo has the same sign as the divisor.
</p>
<pre class="indent">
A mod B
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A - (A mdiv B) * B
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the modulo of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)**(in_integer)"><h3>**</h3></a>
<p>
const func integer: (in integer: base) <b>**</b> (in integer: exponent)</p><dl><dd>
<p>
Compute the exponentiation of an integer base with an integer exponent.
</p>
<pre class="indent">
A ** 0  returns 1           for every A, even for A = 0
1 ** B  returns 1           for B >= 0
A ** B  returns -(-A) ** B  for A &lt;= 0 and B >= 0 and odd(B)
A ** B  returns (-A) ** B   for A &lt;= 0 and B >= 0 and not odd(B)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the exponentiation.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If the exponent is negative.</dd>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)&lt;&lt;(in_integer)"><h3>&lt;&lt;</h3></a>
<p>
const func integer: (in integer: number) <b>&lt;&lt;</b> (in integer: lshift)</p><dl><dd>
<p>
Shift an integer number left by lshift bits.
A &lt;&lt; B is equivalent to A * 2 ** B
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the left shifted number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64 or            if an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)>>(in_integer)"><h3>>></h3></a>
<p>
const func integer: (in integer: number) <b>>></b> (in integer: rshift)</p><dl><dd>
<p>
Shift an integer number right by rshift bits.
A >> B is equivalent to A mdiv 2 ** B
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the right shifted number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_integer)+:=(in_integer)"><h3>+:=</h3></a>
<p>
const proc: (inout integer: number) <b>+:=</b> (in integer: delta)</p><dl><dd>
<p>
Increment an integer variable by a delta.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_integer)-:=(in_integer)"><h3>-:=</h3></a>
<p>
const proc: (inout integer: number) <b>-:=</b> (in integer: delta)</p><dl><dd>
<p>
Decrement an integer variable by a delta.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_integer)*:=(in_integer)"><h3>*:=</h3></a>
<p>
const proc: (inout integer: number) <b>*:=</b> (in integer: factor)</p><dl><dd>
<p>
Multiply an integer number by a factor and assign the result back to number.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_integer)&lt;&lt;:=(in_integer)"><h3>&lt;&lt;:=</h3></a>
<p>
const proc: (inout integer: number) <b>&lt;&lt;:=</b> (in integer: lshift)</p><dl><dd>
<p>
Shift a number left by lshift bits and assign the result back to number.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64 or            if an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_integer)>>:=(in_integer)"><h3>>>:=</h3></a>
<p>
const proc: (inout integer: number) <b>>>:=</b> (in integer: rshift)</p><dl><dd>
<p>
Shift a number right by rshift bits and assign the result back to number.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)!(in_integer)"><h3>!</h3></a>
<p>
const func integer: (in integer: n) <b>!</b> (in integer: k)</p><dl><dd>
<p>
Binomial coefficient
</p>
<pre class="indent">
n ! k  returns  0                            for k &lt; 0,
n ! 0  returns  1,
n ! 1  returns  n,
n ! k  returns  0                            for n >= 0 and k > n,
n ! k  returns  !n div (!k * !(n - k))       for k >= 0 and k &lt;= n,
n ! k  returns  (-1) ** k * (n + k - 1 ! k)  for n &lt; 0 and k >= 0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the binomial coefficient n over k</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the result would be less than            integer.first or greater than integer.last.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)=(in_integer)"><h3>=</h3></a>
<p>
const func boolean: (in integer: number1) <b>=</b> (in integer: number2)</p><dl><dd>
<p>
Check if two integer numbers are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two numbers are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)&lt;>(in_integer)"><h3>&lt;></h3></a>
<p>
const func boolean: (in integer: number1) <b>&lt;></b> (in integer: number2)</p><dl><dd>
<p>
Check if two integer numbers are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if the two numbers are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)&lt;(in_integer)"><h3>&lt;</h3></a>
<p>
const func boolean: (in integer: number1) <b>&lt;</b> (in integer: number2)</p><dl><dd>
<p>
Check if number1 is less than number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is less than number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)>(in_integer)"><h3>></h3></a>
<p>
const func boolean: (in integer: number1) <b>></b> (in integer: number2)</p><dl><dd>
<p>
Check if number1 is greater than number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is greater than number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)&lt;=(in_integer)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in integer: number1) <b>&lt;=</b> (in integer: number2)</p><dl><dd>
<p>
Check if number1 is less than or equal to number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is less than or equal to number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)>=(in_integer)"><h3>>=</h3></a>
<p>
const func boolean: (in integer: number1) <b>>=</b> (in integer: number2)</p><dl><dd>
<p>
Check if number1 is greater than or equal to number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is greater than or equal to number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_integer)conv(in_integer)"><h3>conv</h3></a>
<p>
const func integer: (attr integer) <b>conv</b> (in integer: number)</p><dl><dd>
<p>
Convert to integer.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)radix(in_integer)"><h3>radix</h3></a>
<p>
const func string: (in integer: number) <b>radix</b> (in integer: base)</p><dl><dd>
<p>
Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.
The conversion uses the numeral system with the given <i>base</i>.
Digit values from 10 upward are encoded with lower case letters.
E.g.: 10 is encoded with a, 11 with b, etc.
For negative numbers a minus sign is prepended.
</p>
<pre class="indent">
48879 radix 16   returns "beef"
-48879 radix 16  returns "-beef"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a <a class="link" href="string.htm" title="string">string</a>.</dd>
<dd><tt>base</tt> - Base of the numeral system used for the conversion.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)RADIX(in_integer)"><h3>RADIX</h3></a>
<p>
const func string: (in integer: number) <b>RADIX</b> (in integer: base)</p><dl><dd>
<p>
Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.
The conversion uses the numeral system with the given <i>base</i>.
Digit values from 10 upward are encoded with upper case letters.
E.g.: 10 is encoded with A, 11 with B, etc.
For negative numbers a minus sign is prepended.
</p>
<pre class="indent">
48879 RADIX 16   returns "BEEF"
-48879 RADIX 16  returns "-BEEF"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a <a class="link" href="string.htm" title="string">string</a>.</dd>
<dd><tt>base</tt> - Base of the numeral system used for the conversion.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)lpad0(in_integer)"><h3>lpad0</h3></a>
<p>
const func string: (in integer: number) <b>lpad0</b> (in integer: length)</p><dl><dd>
<p>
Convert <i>integer</i> to <a class="link" href="string.htm" title="string">string</a> and pad it with zeros at the left side.
The number is converted to a string with decimal representation.
For negative numbers a minus sign is prepended.
</p>
<pre class="indent">
123 lpad0 5   returns "00123"
-123 lpad0 5  returns "-0123"
123 lpad0 2   returns "123"
-123 lpad0 2  returns "-123"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a <a class="link" href="string.htm" title="string">string</a>.</dd>
<dd><tt>length</tt> - Minimum length of the result.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number as decimal <a class="link" href="string.htm" title="string">string</a> left padded with zeroes.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_integer)parse(in_string)"><h3>parse</h3></a>
<p>
const func integer: (attr integer) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to an <i>integer</i> number.
The <a class="link" href="string.htm" title="string">string</a> must contain an integer literal consisting of an
optional + or - sign, followed by a sequence of digits. Other
characters as well as leading or trailing whitespace characters
are not allowed. The sequence of digits is taken to be decimal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>integer</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string is empty or it does not contain            an integer literal or if the integer literal is too big            or too small to be represented as <i>integer</i> value.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)sci(in_integer)"><h3>sci</h3></a>
<p>
const func string: (in integer: number) <b>sci</b> (in integer: precision)</p><dl><dd>
<p>
Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.
Scientific notation uses a decimal significand and a decimal exponent.
The significand has an optional sign and exactly one digit before the
decimal point. The fractional part of the significand is rounded
to the specified number of digits (<i>precision</i>). Halfway cases are
rounded away from zero. The fractional part is followed by the
letter e and an exponent, which is always signed. The value zero is
never written with a negative sign.
</p>
<pre class="indent">
12345 sci 4     returns "1.2345e+4"
12345 sci 3     returns "1.235e+4"
12345 sci 2     returns "1.23e+4"
3141592 sci 0   returns "3e+6"
27182818 sci 0  returns "3e+7"
2**62 sci 6     returns "4.611686e+18"
-1 sci 3        returns "-1.000e+0"
-0 sci 2        returns "0.00e+0"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a string.</dd>
<dd><tt>precision</tt> - Number of digits after the decimal point.        If the <i>precision</i> is zero the decimal point is omitted.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
</dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_integer,in_integer)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in integer: number1, in integer: number2)</p><dl><dd>
<p>
Compare two integer numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_integer)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in integer: number)</p><dl><dd>
<p>
Compute the hash value of an integer number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="succ(in_integer)"><h3>succ</h3></a>
<p>
const func integer: <b>succ</b> (in integer: number)</p><dl><dd>
<p>
Successor of an integer number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number + 1</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="pred(in_integer)"><h3>pred</h3></a>
<p>
const func integer: <b>pred</b> (in integer: number)</p><dl><dd>
<p>
Predecessor of an integer number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number - 1</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="abs(in_integer)"><h3>abs</h3></a>
<p>
const func integer: <b>abs</b> (in integer: number)</p><dl><dd>
<p>
Compute the absolute value of an integer number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute value.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="sqrt(in_integer)"><h3>sqrt</h3></a>
<p>
const func integer: <b>sqrt</b> (in integer: radicand)</p><dl><dd>
<p>
Compute the integer square root of an integer radicand.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the integer square root.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If the radicand is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="log10(in_integer)"><h3>log10</h3></a>
<p>
const func integer: <b>log10</b> (in integer: number)</p><dl><dd>
<p>
Compute the truncated base 10 logarithm of an integer number.
The definition of <i>log10</i> is extended by defining log10(0) = -1.
</p>
<pre class="indent">
log10(10 ** A)        returns A        for A >= 0
log10(pred(10 ** A))  returns pred(A)  for A >= 0
log10(10)             returns 1
log10(1)              returns 0
log10(0)              returns -1
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated base 10 logarithm.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - The number is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="log2(in_integer)"><h3>log2</h3></a>
<p>
const func integer: <b>log2</b> (in integer: number)</p><dl><dd>
<p>
Compute the truncated base 2 logarithm of an integer number.
The definition of <i>log2</i> is extended by defining log2(0) = -1.
</p>
<pre class="indent">
log2(2 ** A)        returns A        for A >= 0
log2(pred(2 ** A))  returns pred(A)  for A >= 0
log2(2)             returns 1
log2(1)             returns 0
log2(0)             returns -1
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated base 2 logarithm.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - The number is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="odd(in_integer)"><h3>odd</h3></a>
<p>
const func boolean: <b>odd</b> (in integer: number)</p><dl><dd>
<p>
Determine if an integer number is odd.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the number is odd,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="ord(in_integer)"><h3>ord</h3></a>
<p>
const func integer: <b>ord</b> (in integer: number)</p><dl><dd>
<p>
Convert to integer.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_integer)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in integer: number)</p><dl><dd>
<p>
Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
For negative numbers a minus sign is prepended.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a <a class="link" href="string.htm" title="string">string</a>.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="string(in_integer)"><h3>string</h3></a>
<p>
const func string: <b>string</b> (in integer: number)</p><dl><dd>
<p>
Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
For negative numbers a minus sign is prepended.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a <a class="link" href="string.htm" title="string">string</a>.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_integer)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in integer: number)</p><dl><dd>
<p>
Convert an <i>integer</i> number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
For negative numbers a minus sign is prepended.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Number to be converted to a <a class="link" href="string.htm" title="string">string</a>.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="incr(inout_integer)"><h3>incr</h3></a>
<p>
const proc: <b>incr</b> (inout integer: number)</p><dl><dd>
<p>
Increment an integer variable.
Increments <i>number</i> by 1.
This is equivalent to:
</p>
<pre class="indent">
number := succ(number);
</pre>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="decr(inout_integer)"><h3>decr</h3></a>
<p>
const proc: <b>decr</b> (inout integer: number)</p><dl><dd>
<p>
Decrement an integer variable.
Decrements <i>number</i> by 1.
This is equivalent to:
</p>
<pre class="indent">
number := pred(number);
</pre>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If an integer overflow occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rand(in_integer,in_integer)"><h3>rand</h3></a>
<p>
const func integer: <b>rand</b> (in integer: low, in integer: high)</p><dl><dd>
<p>
Compute pseudo-random number in the range [low, high].
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random number such that low &lt;= rand(low, high) and         rand(low, high) &lt;= high holds.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The range is empty (low > high holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bitLength(in_integer)"><h3>bitLength</h3></a>
<p>
const func integer: <b>bitLength</b> (in integer: number)</p><dl><dd>
<p>
Number of bits in the minimum two's-complement representation.
The high bits equivalent to the sign bit are not part of the
minimum two's-complement representation.
</p>
<pre class="indent">
bitLength(0)   returns 0
bitLength(1)   returns 1
bitLength(4)   returns 3
bitLength(-1)  returns 0
bitLength(-2)  returns 1
bitLength(-4)  returns 2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of bits.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="lowestSetBit(in_integer)"><h3>lowestSetBit</h3></a>
<p>
const func integer: <b>lowestSetBit</b> (in integer: number)</p><dl><dd>
<p>
Number of lowest-order zero bits in the two's-complement representation.
This is equal to the index of the lowest-order one bit (indices start with 0).
If there are only zero bits (<i>number</i> is 0) the result is -1.
</p>
<pre class="indent">
lowestSetBit(0)   returns -1
lowestSetBit(1)   returns  0
lowestSetBit(4)   returns  2
lowestSetBit(-1)  returns  0
lowestSetBit(-2)  returns  1
lowestSetBit(-4)  returns  2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of lowest-order zero bits or -1 for lowestSetBit(0).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_string)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to an <i>integer</i> number.
The <a class="link" href="string.htm" title="string">string</a> must contain an integer literal consisting of an
optional + or - sign, followed by a sequence of digits. Other
characters as well as leading or trailing whitespace characters
are not allowed. The sequence of digits is taken to be decimal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>integer</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string is empty or it does not contain            an integer literal or if the integer literal is too big            or too small to be represented as <i>integer</i> value.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_string,in_integer)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in string: stri, in integer: base)</p><dl><dd>
<p>
Convert a numeric <a class="link" href="string.htm" title="string">string</a>, with a specified radix, to an <i>integer</i>.
The numeric <a class="link" href="string.htm" title="string">string</a> must contain the representation of an integer
in the specified radix. It consists of an optional + or - sign,
followed by a sequence of digits in the specified radix. Digit values
from 10 upward can be encoded with upper or lower case letters.
E.g.: 10 can be encoded with A or a, 11 with B or b, etc. Other
characters as well as leading or trailing whitespace characters
are not allowed.
</p>
<pre class="indent">
integer("beef", 16)     returns  48879
integer("-177", 8)      returns   -127
integer("10101010", 2)  returns    170
integer("Cafe", 16)     returns  51966
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Numeric string to be converted to an integer.</dd>
<dd><tt>base</tt> - Radix of the integer in the <i>stri</i> parameter.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>integer</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds or            the string is empty or it does not contain an integer            literal with the specified base.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="min(in_aType,in_aType)"><h3>min</h3></a>
<p>
const func aType: <b>min</b> (in aType: value1, in aType: value2)</p><dl><dd>
<p>
Determine the minimum of two values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the minimum of the two values.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="max(in_aType,in_aType)"><h3>max</h3></a>
<p>
const func aType: <b>max</b> (in aType: value1, in aType: value2)</p><dl><dd>
<p>
Determine the maximum of two values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the maximum of the two values.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/inifile.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/iobuffer.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
