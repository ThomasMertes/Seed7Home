<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Hashsetof</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Hashsetof</big></b></td>
<td align="right"><a class="link" href="../lib/hashsetof.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/hash.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/hmac.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Abstract data types</td></tr>
<tr><td align="right" valign="top">type</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashset(in_type)">hashset</a></b> (in type: baseType)</td></tr>
<tr><td width="30"></td><td>Abstract data type, describing sets of <i>baseType</i> values.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="hashset(in_type)"><h3>hashset</h3></a>
<p>
const func type: <b>hashset</b> (in type: baseType)</p><dl><dd>
<p>
Abstract data type, describing sets of <i>baseType</i> values.
This abstract data type uses hash maps to represent a set.
Therefore it can be used if <i>baseType</i> values cannot be
mapped to <a class="link" href="integer.htm" title="integer">integer</a>.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">setType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr setType) <b><a class="link" href="#(attr_setType)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>setType</i> ({}).</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in baseType: aValue) <b><a class="link" href="#(in_baseType)in(in_setType)">in</a></b> (in setType: aSet)</td></tr>
<tr><td width="30"></td><td>Set membership test.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in baseType: aValue) <b><a class="link" href="#(in_baseType)not_in(in_setType)">not in</a></b> (in setType: aSet)</td></tr>
<tr><td width="30"></td><td>Negated set membership test.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout setType: aSet) <b><a class="link" href="#(inout_setType)@:=_[(in_baseType)](in_boolean)">@:= [</a></b> (in baseType: aValue) ] (in boolean: isElement)</td></tr>
<tr><td width="30"></td><td>Add or remove <i>aValue</i> to respectively from <i>sSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">setType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)|(in_setType)">|</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Union of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">setType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)&amp;(in_setType)">&amp;</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Intersection of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">setType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)>&lt;(in_setType)">>&lt;</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Symmetric difference of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">setType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)-(in_setType)">-</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Difference of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout setType: dest) <b><a class="link" href="#(inout_setType)|:=(in_setType)">|:=</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Assign the union of <i>dest</i> and <i>set2</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout setType: dest) <b><a class="link" href="#(inout_setType)&amp;:=(in_setType)">&amp;:=</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Assign the intersection of <i>dest</i> and <i>set2</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout setType: dest) <b><a class="link" href="#(inout_setType)-:=(in_setType)">-:=</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Assign the difference of <i>dest</i> and <i>set2</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)=(in_setType)">=</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Check if two sets are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)&lt;>(in_setType)">&lt;></a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Check if two sets are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)&lt;(in_setType)">&lt;</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a proper subset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)>(in_setType)">></a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a proper superset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)&lt;=(in_setType)">&lt;=</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a subset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in setType: set1) <b><a class="link" href="#(in_setType)>=(in_setType)">>=</a></b> (in setType: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a superset of <i>set2</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#card(in_setType)">card</a></b> (in setType: aSet)</td></tr>
<tr><td width="30"></td><td>Compute the cardinality of a set.</td></tr></table></td></tr>
<tr><td align="right" valign="top">baseType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_setType)">rand</a></b> (in setType: aSet)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random element from <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#incl(inout_setType,in_baseType)">incl</a></b> (inout setType: aSet, in baseType: aValue)</td></tr>
<tr><td width="30"></td><td>Add <i>aValue</i> to the set <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#excl(inout_setType,in_baseType)">excl</a></b> (inout setType: aSet, in baseType: aValue)</td></tr>
<tr><td width="30"></td><td>Remove <i>aValue</i> from the set <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_baseType)range(in_setType)do(in_proc)end_for">for</a></b> (inout baseType: variable) range (in setType: aSet) do
                    (in proc: statements)
                  end for</td></tr>
<tr><td width="30"></td><td>For-loop where <i>variable</i> loops over the elements of the set <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array baseType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toArray(in_setType)">toArray</a></b> (in setType: aSet)</td></tr>
<tr><td width="30"></td><td>Obtain an array containing all the values in <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_setType)">str</a></b> (in setType: aSet)</td></tr>
<tr><td width="30"></td><td>Convert a set to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_setType)._value"><h3>. value</h3></a>
<p>
const setType: (attr setType) <b>. value</b></p><dl><dd>
<p>
Default value of <i>setType</i> ({}).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_baseType)in(in_setType)"><h3>in</h3></a>
<p>
const func boolean: (in baseType: aValue) <b>in</b> (in setType: aSet)</p><dl><dd>
<p>
Set membership test.
Determine if <i>aValue</i> is a member of the set <i>aSet</i>.
</p>
<pre class="indent">
"one" in {"one", "three"})  returns  TRUE
"two" in {"one", "three"})  returns  FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aValue</i> is a member of  <i>aSet</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_baseType)not_in(in_setType)"><h3>not in</h3></a>
<p>
const func boolean: (in baseType: aValue) <b>not in</b> (in setType: aSet)</p><dl><dd>
<p>
Negated set membership test.
Determine if <i>aValue</i> is not a member of the set <i>aSet</i>.
</p>
<pre class="indent">
"one" not in {"one", "three"})  returns  FALSE
"two" not in {"one", "three"})  returns  TRUE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if <i>aValue</i> is a member of  <i>aSet</i>,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(inout_setType)@:=_[(in_baseType)](in_boolean)"><h3>@:= [</h3></a>
<p>
const proc: (inout setType: aSet) <b>@:= [</b> (in baseType: aValue) ] (in boolean: isElement)</p><dl><dd>
<p>
Add or remove <i>aValue</i> to respectively from <i>sSet</i>.
Adding an existing value or remove a non-existing value
leaves <i>aSet</i> unchanged.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - If there is not enough memory.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)|(in_setType)"><h3>|</h3></a>
<p>
const func setType: (in setType: set1) <b>|</b> (in setType: set2)</p><dl><dd>
<p>
Union of two sets.
</p>
<pre class="indent">
{"one", "two"} | {"one", "three"}  returns  {"one", "two", "three"}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the union of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)&amp;(in_setType)"><h3>&amp;</h3></a>
<p>
const func setType: (in setType: set1) <b>&amp;</b> (in setType: set2)</p><dl><dd>
<p>
Intersection of two sets.
</p>
<pre class="indent">
{"one", "two"} &amp; {"one", "three"}  returns  {"one"}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the intersection of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)>&lt;(in_setType)"><h3>>&lt;</h3></a>
<p>
const func setType: (in setType: set1) <b>>&lt;</b> (in setType: set2)</p><dl><dd>
<p>
Symmetric difference of two sets.
</p>
<pre class="indent">
{"one", "two"} >&lt; {"one", "three"}  returns  {"two", "three"}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symmetric difference of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)-(in_setType)"><h3>-</h3></a>
<p>
const func setType: (in setType: set1) <b>-</b> (in setType: set2)</p><dl><dd>
<p>
Difference of two sets.
</p>
<pre class="indent">
{"one", "two"} - {"one", "three"}  returns  {"two"}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_setType)|:=(in_setType)"><h3>|:=</h3></a>
<p>
const proc: (inout setType: dest) <b>|:=</b> (in setType: set2)</p><dl><dd>
<p>
Assign the union of <i>dest</i> and <i>set2</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create <i>dest</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_setType)&amp;:=(in_setType)"><h3>&amp;:=</h3></a>
<p>
const proc: (inout setType: dest) <b>&amp;:=</b> (in setType: set2)</p><dl><dd>
<p>
Assign the intersection of <i>dest</i> and <i>set2</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create <i>dest</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_setType)-:=(in_setType)"><h3>-:=</h3></a>
<p>
const proc: (inout setType: dest) <b>-:=</b> (in setType: set2)</p><dl><dd>
<p>
Assign the difference of <i>dest</i> and <i>set2</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create <i>dest</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)=(in_setType)"><h3>=</h3></a>
<p>
const func boolean: (in setType: set1) <b>=</b> (in setType: set2)</p><dl><dd>
<p>
Check if two sets are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two sets are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)&lt;>(in_setType)"><h3>&lt;></h3></a>
<p>
const func boolean: (in setType: set1) <b>&lt;></b> (in setType: set2)</p><dl><dd>
<p>
Check if two sets are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if the two sets are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)&lt;(in_setType)"><h3>&lt;</h3></a>
<p>
const func boolean: (in setType: set1) <b>&lt;</b> (in setType: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a proper subset of <i>set2</i>.
<i>set1</i> is a proper subset of <i>set2</i> if
</p>
<pre class="indent">
set1 &lt;= set2 and set1 &lt;> set2
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a proper subset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)>(in_setType)"><h3>></h3></a>
<p>
const func boolean: (in setType: set1) <b>></b> (in setType: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a proper superset of <i>set2</i>.
<i>set1</i> is a proper superset of <i>set2</i> if
</p>
<pre class="indent">
set1 >= set2 and set1 &lt;> set2
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a proper superset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)&lt;=(in_setType)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in setType: set1) <b>&lt;=</b> (in setType: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a subset of <i>set2</i>.
<i>set1</i> is a subset of <i>set2</i> if no element X exists for which
</p>
<pre class="indent">
X in set1 and X not in set2
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a subset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_setType)>=(in_setType)"><h3>>=</h3></a>
<p>
const func boolean: (in setType: set1) <b>>=</b> (in setType: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a superset of <i>set2</i>.
<i>set1</i> is a superset of <i>set2</i> if no element X exists for which
</p>
<pre class="indent">
X in set2 and X not in set1
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a superset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="card(in_setType)"><h3>card</h3></a>
<p>
const func integer: <b>card</b> (in setType: aSet)</p><dl><dd>
<p>
Compute the cardinality of a set.
</p>
<pre class="indent">
card({"one", "two", "three"})  returns  3
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of elements in <i>aSet</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rand(in_setType)"><h3>rand</h3></a>
<p>
const func baseType: <b>rand</b> (in setType: aSet)</p><dl><dd>
<p>
Compute pseudo-random element from <i>aSet</i>.
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random element such that rand(aSet) in aSet holds.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> is empty.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="incl(inout_setType,in_baseType)"><h3>incl</h3></a>
<p>
const proc: <b>incl</b> (inout setType: aSet, in baseType: aValue)</p><dl><dd>
<p>
Add <i>aValue</i> to the set <i>aSet</i>.
If <i>aValue</i> is already in <i>aSet</i> then <i>aSet</i> stays unchanged.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - If there is not enough memory.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="excl(inout_setType,in_baseType)"><h3>excl</h3></a>
<p>
const proc: <b>excl</b> (inout setType: aSet, in baseType: aValue)</p><dl><dd>
<p>
Remove <i>aValue</i> from the set <i>aSet</i>.
If <i>aValue</i> is not element of <i>aSet</i> then <i>aSet</i> stays unchanged.
</p>
</dd>
</dl></div>
<hr />
<div><a name="for(inout_baseType)range(in_setType)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout baseType: variable) range (in setType: aSet) do
                    (in proc: statements)
                  end for</p><dl><dd>
<p>
For-loop where <i>variable</i> loops over the elements of the set <i>aSet</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="toArray(in_setType)"><h3>toArray</h3></a>
<p>
const func array baseType: <b>toArray</b> (in setType: aSet)</p><dl><dd>
<p>
Obtain an array containing all the values in <i>aSet</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>all the values from <i>aSet</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_setType)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in setType: aSet)</p><dl><dd>
<p>
Convert a set to a <a class="link" href="string.htm" title="string">string</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/hash.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/hmac.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
