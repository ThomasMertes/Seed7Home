<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bigint</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bigint</big></b></td>
<td align="right"><a class="link" href="../lib/bigint.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bigfile.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bigrat.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigInteger">bigInteger</a></b></td></tr>
<tr><td width="30"></td><td>Signed integer numbers of unlimited size.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="bigInteger"><h3>bigInteger</h3></a>
<p>
const type: <b>bigInteger</b></p><dl><dd>
<p>
Signed integer numbers of unlimited size.
The literals of the type <i>bigInteger</i> are sequences of digits
followed by an underscore character (for example 1_ ). Although
<i>bigInteger</i> operations cannot overflow, it can happen that
there is not enough memory to represent a <i>bigInteger</i> value.
In this case the exception MEMORY_ERROR is raised.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bigInteger) <b><a class="link" href="#(attr_bigInteger)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>bigInteger</i> (0_).</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#+(in_bigInteger)">+</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Plus sign for <i>bigInteger</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#-(in_bigInteger)">-</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Minus sign, negate a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: summand1) <b><a class="link" href="#(in_bigInteger)+(in_bigInteger)">+</a></b> (in bigInteger: summand2)</td></tr>
<tr><td width="30"></td><td>Add two <i>bigInteger</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: minuend) <b><a class="link" href="#(in_bigInteger)-(in_bigInteger)">-</a></b> (in bigInteger: subtrahend)</td></tr>
<tr><td width="30"></td><td>Compute the subtraction of two <i>bigInteger</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: factor1) <b><a class="link" href="#(in_bigInteger)*(in_bigInteger)">*</a></b> (in bigInteger: factor2)</td></tr>
<tr><td width="30"></td><td>Multiply two <i>bigInteger</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: dividend) <b><a class="link" href="#(in_bigInteger)div(in_bigInteger)">div</a></b> (in bigInteger: divisor)</td></tr>
<tr><td width="30"></td><td>Integer division truncated towards zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: dividend) <b><a class="link" href="#(in_bigInteger)rem(in_bigInteger)">rem</a></b> (in bigInteger: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the remainder of the integer division <i>div</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: dividend) <b><a class="link" href="#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a></b> (in bigInteger: divisor)</td></tr>
<tr><td width="30"></td><td>Integer division truncated towards negative infinity.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: dividend) <b><a class="link" href="#(in_bigInteger)mod(in_bigInteger)">mod</a></b> (in bigInteger: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the modulo (remainder) of the integer division <i>mdiv</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: base) <b><a class="link" href="#(in_bigInteger)**(in_integer)">**</a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Compute the exponentiation of a <i>bigInteger</i> base with an <a class="link" href="integer.htm" title="integer">integer</a> exponent.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number) <b><a class="link" href="#(in_bigInteger)&lt;&lt;(in_integer)">&lt;&lt;</a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift a <i>bigInteger</i> number left by lshift bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number) <b><a class="link" href="#(in_bigInteger)>>(in_integer)">>></a></b> (in integer: rshift)</td></tr>
<tr><td width="30"></td><td>Shift a <i>bigInteger</i> number right by rshift bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigInteger: number) <b><a class="link" href="#(inout_bigInteger)+:=(in_bigInteger)">+:=</a></b> (in bigInteger: delta)</td></tr>
<tr><td width="30"></td><td>Increment a <i>bigInteger</i> variable by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigInteger: number) <b><a class="link" href="#(inout_bigInteger)-:=(in_bigInteger)">-:=</a></b> (in bigInteger: delta)</td></tr>
<tr><td width="30"></td><td>Decrement a <i>bigInteger</i> variable by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigInteger: number) <b><a class="link" href="#(inout_bigInteger)*:=(in_bigInteger)">*:=</a></b> (in bigInteger: factor)</td></tr>
<tr><td width="30"></td><td>Multiply a <i>bigInteger</i> number by a factor and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigInteger: number) <b><a class="link" href="#(inout_bigInteger)&lt;&lt;:=(in_integer)">&lt;&lt;:=</a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift a number left by lshift bits and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigInteger: number) <b><a class="link" href="#(inout_bigInteger)>>:=(in_integer)">>>:=</a></b> (in integer: rshift)</td></tr>
<tr><td width="30"></td><td>Shift a number right by rshift bits and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number1) <b><a class="link" href="#(in_bigInteger)=(in_bigInteger)">=</a></b> (in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>bigInteger</i> numbers are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number1) <b><a class="link" href="#(in_bigInteger)&lt;>(in_bigInteger)">&lt;></a></b> (in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>bigInteger</i> numbers are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number1) <b><a class="link" href="#(in_bigInteger)&lt;(in_bigInteger)">&lt;</a></b> (in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is less than number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number1) <b><a class="link" href="#(in_bigInteger)>(in_bigInteger)">></a></b> (in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is greater than number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number1) <b><a class="link" href="#(in_bigInteger)&lt;=(in_bigInteger)">&lt;=</a></b> (in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is less than or equal to number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number1) <b><a class="link" href="#(in_bigInteger)>=(in_bigInteger)">>=</a></b> (in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is greater than or equal to number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">quotRem</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: dividend) <b><a class="link" href="#(in_bigInteger)divRem(in_bigInteger)">divRem</a></b> (in bigInteger: divisor)</td></tr>
<tr><td width="30"></td><td>Quotient and remainder of integer division truncated towards zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bigInteger) <b><a class="link" href="#(attr_bigInteger)conv(in_integer)">conv</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to <i>bigInteger</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in var bigInteger: number) <b><a class="link" href="#(in_var_bigInteger)radix(in_integer)">radix</a></b> (in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in var bigInteger: number) <b><a class="link" href="#(in_var_bigInteger)RADIX(in_integer)">RADIX</a></b> (in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bigInteger) <b><a class="link" href="#(attr_bigInteger)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: number) <b><a class="link" href="#(in_bigInteger)sci(in_integer)">sci</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#!(in_bigInteger)">!</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Compute the factorial of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: n) <b><a class="link" href="#(in_bigInteger)!(in_var_bigInteger)">!</a></b> (in var bigInteger: k)</td></tr>
<tr><td width="30"></td><td>Compute the binomial coefficient</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_bigInteger,in_bigInteger)">compare</a></b> (in bigInteger: number1, in bigInteger:number2)</td></tr>
<tr><td width="30"></td><td>Compare two <i>bigInteger</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_bigInteger)">hashCode</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#succ(in_bigInteger)">succ</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Successor of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pred(in_bigInteger)">pred</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Predecessor of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#abs(in_bigInteger)">abs</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Compute the absolute value of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#log10(in_bigInteger)">log10</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Compute the truncated base 10 logarithm of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#log2(in_bigInteger)">log2</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Compute the truncated base 2 logarithm of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#odd(in_bigInteger)">odd</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Determine if a <i>bigInteger</i> number is odd.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ord(in_bigInteger)">ord</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_bigInteger)">integer</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gcd(in_bigInteger,in_bigInteger)">gcd</a></b> (in bigInteger: number1, in bigInteger: number2)</td></tr>
<tr><td width="30"></td><td>Compute the greatest common divisor of two <i>bigInteger</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigInteger(in_integer)">bigInteger</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to <i>bigInteger</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_bigInteger)">str</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_bigInteger)">literal</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigInteger</i> number to a <i>bigInteger</i> literal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigInteger(in_string)">bigInteger</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigInteger(in_string,in_integer)">bigInteger</a></b> (in string: stri, in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert a numeric <a class="link" href="string.htm" title="string">string</a>, with a specified radix, to a <i>bigInteger</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_bigInteger,in_bigInteger)">rand</a></b> (in bigInteger: low, in bigInteger: high)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random number in the range [low, high].</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitLength(in_bigInteger)">bitLength</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Number of bits in the minimum two's-complement representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lowestSetBit(in_bigInteger)">lowestSetBit</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Number of lowest-order zero bits in the two's-complement representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#incr(inout_bigInteger)">incr</a></b> (inout bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Increment a <i>bigInteger</i> variable.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#decr(inout_bigInteger)">decr</a></b> (inout bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Decrement a <i>bigInteger</i> variable.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#sqrt(in_var_bigInteger)">sqrt</a></b> (in var bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Compute the integer square root of a <i>bigInteger</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#modInverse(in_var_bigInteger,in_var_bigInteger)">modInverse</a></b> (in var bigInteger: a,
    in var bigInteger: b)</td></tr>
<tr><td width="30"></td><td>Compute the modular multiplicative inverse of a modulo b.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#modPow(in_var_bigInteger,in_var_bigInteger,in_bigInteger)">modPow</a></b> (in var bigInteger: base,
    in var bigInteger: exponent, in bigInteger: modulus)</td></tr>
<tr><td width="30"></td><td>Compute the modular exponentiation of base ** exponent.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_bigInteger)._value"><h3>. value</h3></a>
<p>
const bigInteger: (attr bigInteger) <b>. value</b></p><dl><dd>
<p>
Default value of <i>bigInteger</i> (0_).
</p>
</dd>
</dl></div>
<hr />
<div><a name="+(in_bigInteger)"><h3>+</h3></a>
<p>
const func bigInteger: <b>+</b> (in bigInteger: number)</p><dl><dd>
<p>
Plus sign for <i>bigInteger</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its operand unchanged.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="-(in_bigInteger)"><h3>-</h3></a>
<p>
const func bigInteger: <b>-</b> (in bigInteger: number)</p><dl><dd>
<p>
Minus sign, negate a <i>bigInteger</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the negated value of the number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)+(in_bigInteger)"><h3>+</h3></a>
<p>
const func bigInteger: (in bigInteger: summand1) <b>+</b> (in bigInteger: summand2)</p><dl><dd>
<p>
Add two <i>bigInteger</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sum of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)-(in_bigInteger)"><h3>-</h3></a>
<p>
const func bigInteger: (in bigInteger: minuend) <b>-</b> (in bigInteger: subtrahend)</p><dl><dd>
<p>
Compute the subtraction of two <i>bigInteger</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)*(in_bigInteger)"><h3>*</h3></a>
<p>
const func bigInteger: (in bigInteger: factor1) <b>*</b> (in bigInteger: factor2)</p><dl><dd>
<p>
Multiply two <i>bigInteger</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the product of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)div(in_bigInteger)"><h3>div</h3></a>
<p>
const func bigInteger: (in bigInteger: dividend) <b>div</b> (in bigInteger: divisor)</p><dl><dd>
<p>
Integer division truncated towards zero.
The remainder of this division is computed with <i>rem</i>.
For the operations <i>div</i> and <i>rem</i> holds for all A:
</p>
<pre class="indent">
(A div B) * B + A rem B = A           when B &lt;> 0_
-A div B = -(A div B)                 when B &lt;> 0_
-A rem B = -(A rem B)                 when B &lt;> 0_
A rem B >= 0_ and A rem B &lt; abs(B)    when B &lt;> 0_ and A >= 0_
A rem B &lt;= 0_ and A rem B > -abs(B)   when B &lt;> 0_ and A &lt;= 0_
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)rem(in_bigInteger)"><h3>rem</h3></a>
<p>
const func bigInteger: (in bigInteger: dividend) <b>rem</b> (in bigInteger: divisor)</p><dl><dd>
<p>
Compute the remainder of the integer division <i>div</i>.
The remainder has the same sign as the dividend.
</p>
<pre class="indent">
A rem B
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A - (A div B) * B
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the remainder of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)mdiv(in_bigInteger)"><h3>mdiv</h3></a>
<p>
const func bigInteger: (in bigInteger: dividend) <b>mdiv</b> (in bigInteger: divisor)</p><dl><dd>
<p>
Integer division truncated towards negative infinity.
The modulo (remainder) of this division is computed with 'mod'.
Therefore this division is called modulo division (<i>mdiv</i>).
For the operations <i>mdiv</i> and <i>mod</i> holds for all A:
</p>
<pre class="indent">
(A mdiv B) * B + A mod B = A          when B &lt;> 0_
-A mdiv B = A mdiv -B                 when B &lt;> 0_
-A mod -B = -(A mod B)                when B &lt;> 0_
A mod B >= 0_ and A mod B &lt; B         when B > 0_
A mod B &lt;= 0_ and A mod B > B         when B &lt; 0_
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)mod(in_bigInteger)"><h3>mod</h3></a>
<p>
const func bigInteger: (in bigInteger: dividend) <b>mod</b> (in bigInteger: divisor)</p><dl><dd>
<p>
Compute the modulo (remainder) of the integer division <i>mdiv</i>.
The modulo has the same sign as the divisor.
</p>
<pre class="indent">
A mod B
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A - (A mdiv B) * B
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the modulo of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)**(in_integer)"><h3>**</h3></a>
<p>
const func bigInteger: (in bigInteger: base) <b>**</b> (in integer: exponent)</p><dl><dd>
<p>
Compute the exponentiation of a <i>bigInteger</i> base with an <a class="link" href="integer.htm" title="integer">integer</a> exponent.
</p>
<pre class="indent">
A ** 0  returns 1_          for every A, even for A = 0_
1 ** B  returns 1_          for B >= 0
A ** B  returns -(-A) ** B  for A &lt;= 0_ and B >= 0 and odd(B)
A ** B  returns (-A) ** B   for A &lt;= 0_ and B >= 0 and not odd(B)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the exponentiation.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If the exponent is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)&lt;&lt;(in_integer)"><h3>&lt;&lt;</h3></a>
<p>
const func bigInteger: (in bigInteger: number) <b>&lt;&lt;</b> (in integer: lshift)</p><dl><dd>
<p>
Shift a <i>bigInteger</i> number left by lshift bits.
If lshift is negative a right shift is done instead.
A &lt;&lt; B is equivalent to A * 2_ ** B when B >= 0 holds.
A &lt;&lt; B is equivalent to A mdiv 2_ ** -B when B &lt; 0 holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the left shifted number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)>>(in_integer)"><h3>>></h3></a>
<p>
const func bigInteger: (in bigInteger: number) <b>>></b> (in integer: rshift)</p><dl><dd>
<p>
Shift a <i>bigInteger</i> number right by rshift bits.
If rshift is negative a left shift is done instead.
A >> B is equivalent to A mdiv 2_ ** B when B >= 0 holds.
A >> B is equivalent to A * 2_ ** -B when B &lt; 0 holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the right shifted number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bigInteger)+:=(in_bigInteger)"><h3>+:=</h3></a>
<p>
const proc: (inout bigInteger: number) <b>+:=</b> (in bigInteger: delta)</p><dl><dd>
<p>
Increment a <i>bigInteger</i> variable by a delta.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigInteger)-:=(in_bigInteger)"><h3>-:=</h3></a>
<p>
const proc: (inout bigInteger: number) <b>-:=</b> (in bigInteger: delta)</p><dl><dd>
<p>
Decrement a <i>bigInteger</i> variable by a delta.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigInteger)*:=(in_bigInteger)"><h3>*:=</h3></a>
<p>
const proc: (inout bigInteger: number) <b>*:=</b> (in bigInteger: factor)</p><dl><dd>
<p>
Multiply a <i>bigInteger</i> number by a factor and assign the result back to number.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigInteger)&lt;&lt;:=(in_integer)"><h3>&lt;&lt;:=</h3></a>
<p>
const proc: (inout bigInteger: number) <b>&lt;&lt;:=</b> (in integer: lshift)</p><dl><dd>
<p>
Shift a number left by lshift bits and assign the result back to number.
If lshift is negative a right shift is done instead.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigInteger)>>:=(in_integer)"><h3>>>:=</h3></a>
<p>
const proc: (inout bigInteger: number) <b>>>:=</b> (in integer: rshift)</p><dl><dd>
<p>
Shift a number right by rshift bits and assign the result back to number.
If rshift is negative a left shift is done instead.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)=(in_bigInteger)"><h3>=</h3></a>
<p>
const func boolean: (in bigInteger: number1) <b>=</b> (in bigInteger: number2)</p><dl><dd>
<p>
Check if two <i>bigInteger</i> numbers are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both numbers are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)&lt;>(in_bigInteger)"><h3>&lt;></h3></a>
<p>
const func boolean: (in bigInteger: number1) <b>&lt;></b> (in bigInteger: number2)</p><dl><dd>
<p>
Check if two <i>bigInteger</i> numbers are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both numbers are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)&lt;(in_bigInteger)"><h3>&lt;</h3></a>
<p>
const func boolean: (in bigInteger: number1) <b>&lt;</b> (in bigInteger: number2)</p><dl><dd>
<p>
Check if number1 is less than number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is less than number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)>(in_bigInteger)"><h3>></h3></a>
<p>
const func boolean: (in bigInteger: number1) <b>></b> (in bigInteger: number2)</p><dl><dd>
<p>
Check if number1 is greater than number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is greater than number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)&lt;=(in_bigInteger)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in bigInteger: number1) <b>&lt;=</b> (in bigInteger: number2)</p><dl><dd>
<p>
Check if number1 is less than or equal to number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is less than or equal to number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)>=(in_bigInteger)"><h3>>=</h3></a>
<p>
const func boolean: (in bigInteger: number1) <b>>=</b> (in bigInteger: number2)</p><dl><dd>
<p>
Check if number1 is greater than or equal to number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is greater than or equal to number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)divRem(in_bigInteger)"><h3>divRem</h3></a>
<p>
const func quotRem: (in bigInteger: dividend) <b>divRem</b> (in bigInteger: divisor)</p><dl><dd>
<p>
Quotient and remainder of integer division truncated towards zero.
Compute quotient and remainder of the integer division <i>div</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>quotRem with quotient and remainder of the integer division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bigInteger)conv(in_integer)"><h3>conv</h3></a>
<p>
const func bigInteger: (attr bigInteger) <b>conv</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to <i>bigInteger</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bigInteger result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_var_bigInteger)radix(in_integer)"><h3>radix</h3></a>
<p>
const func string: (in var bigInteger: number) <b>radix</b> (in integer: base)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.
The conversion uses the numeral system with the given <i>base</i>.
Digit values from 10 upward are encoded with lower case letters.
E.g.: 10 is encoded with a, 11 with b, etc.
For negative numbers a minus sign is prepended.
</p>
<pre class="indent">
3735928559_ radix 16 => "deadbeef"
-3735928559_ radix 16 => "-deadbeef"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_var_bigInteger)RADIX(in_integer)"><h3>RADIX</h3></a>
<p>
const func string: (in var bigInteger: number) <b>RADIX</b> (in integer: base)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a> using a radix.
The conversion uses the numeral system with the given <i>base</i>.
Digit values from 10 upward are encoded with upper case letters.
E.g.: 10 is encoded with A, 11 with B, etc.
For negative numbers a minus sign is prepended.
</p>
<pre class="indent">
3735928559_ RADIX 16 => "DEADBEEF"
-3735928559_ RADIX 16 => "-DEADBEEF"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bigInteger)parse(in_string)"><h3>parse</h3></a>
<p>
const func bigInteger: (attr bigInteger) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigInteger</i> number.
The <a class="link" href="string.htm" title="string">string</a> must contain an integer literal consisting of an
optional + or - sign, followed by a sequence of digits. Other
characters as well as leading or trailing whitespace characters
are not allowed. The sequence of digits is taken to be decimal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigInteger</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string is empty or it does not contain            an integer literal.</dd>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)sci(in_integer)"><h3>sci</h3></a>
<p>
const func string: (in bigInteger: number) <b>sci</b> (in integer: precision)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.
Scientific notation uses a decimal significand and a decimal exponent.
The significand has an optional sign and exactly one digit before the
decimal point. The fractional part of the significand is rounded
to the specified number of digits (<i>precision</i>). Halfway cases are
rounded away from zero. The fractional part is followed by the
letter e and an exponent, which is always signed. The value zero is
never written with a negative sign.
</p>
<pre class="indent">
12345_ sci 4     returns "1.2345e+4"
12345_ sci 3     returns "1.235e+4"
12345_ sci 2     returns "1.23e+4"
3141592_ sci 0   returns "3e+6"
27182818_ sci 0  returns "3e+7"
2_**64 sci 6     returns "1.844674e+19"
-1_ sci 3        returns "-1.000e+0"
-0_ sci 2        returns "0.00e+0"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>precision</tt> - Number of digits after the decimal point.        If the <i>precision</i> is zero the decimal point is omitted.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="!(in_bigInteger)"><h3>!</h3></a>
<p>
const func bigInteger: <b>!</b> (in bigInteger: number)</p><dl><dd>
<p>
Compute the factorial of a <i>bigInteger</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the factorial of the number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - The number is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigInteger)!(in_var_bigInteger)"><h3>!</h3></a>
<p>
const func bigInteger: (in bigInteger: n) <b>!</b> (in var bigInteger: k)</p><dl><dd>
<p>
Compute the binomial coefficient
</p>
<pre class="indent">
n ! k  returns  0                            for k &lt; 0,
n ! 0_ returns  1_,
n ! 1_ returns  n,
n ! k  returns  0                            for n >= 0 and k > n,
n ! k  returns  !n div (!k * !(n - k))       for k >= 0 and k &lt;= n,
n ! k  returns  (-1) ** k * (n + k - 1 ! k)  for n &lt; 0 and k >= 0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>n over k</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_bigInteger,in_bigInteger)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in bigInteger: number1, in bigInteger:number2)</p><dl><dd>
<p>
Compare two <i>bigInteger</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_bigInteger)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in bigInteger: number)</p><dl><dd>
<p>
Compute the hash value of a <i>bigInteger</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="succ(in_bigInteger)"><h3>succ</h3></a>
<p>
const func bigInteger: <b>succ</b> (in bigInteger: number)</p><dl><dd>
<p>
Successor of a <i>bigInteger</i> number.
succ(A) is equivalent to A+1 .
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number + 1 .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pred(in_bigInteger)"><h3>pred</h3></a>
<p>
const func bigInteger: <b>pred</b> (in bigInteger: number)</p><dl><dd>
<p>
Predecessor of a <i>bigInteger</i> number.
pred(A) is equivalent to A-1 .
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>number - 1 .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="abs(in_bigInteger)"><h3>abs</h3></a>
<p>
const func bigInteger: <b>abs</b> (in bigInteger: number)</p><dl><dd>
<p>
Compute the absolute value of a <i>bigInteger</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="log10(in_bigInteger)"><h3>log10</h3></a>
<p>
const func bigInteger: <b>log10</b> (in bigInteger: number)</p><dl><dd>
<p>
Compute the truncated base 10 logarithm of a <i>bigInteger</i> number.
The definition of <i>log10</i> is extended by defining log10(0_) = -1_.
</p>
<pre class="indent">
log10(10_ ** A)        returns A       for A >= 0
log10(pred(10_ ** A))  returns pred(A) for A >= 0
log10(10_)             returns 1
log10(1_)              returns 0
log10(0_)              returns -1
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated base 10 logarithm.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - The number is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="log2(in_bigInteger)"><h3>log2</h3></a>
<p>
const func bigInteger: <b>log2</b> (in bigInteger: number)</p><dl><dd>
<p>
Compute the truncated base 2 logarithm of a <i>bigInteger</i> number.
The definition of <i>log2</i> is extended by defining log2(0_) = -1_.
</p>
<pre class="indent">
log2(2_ ** A)        returns A       for A >= 0
log2(pred(2_ ** A))  returns pred(A) for A >= 0
log2(2_)             returns 1
log2(1_)             returns 0
log2(0_)             returns -1
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated base 2 logarithm.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - The number is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="odd(in_bigInteger)"><h3>odd</h3></a>
<p>
const func boolean: <b>odd</b> (in bigInteger: number)</p><dl><dd>
<p>
Determine if a <i>bigInteger</i> number is odd.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the number is odd,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="ord(in_bigInteger)"><h3>ord</h3></a>
<p>
const func integer: <b>ord</b> (in bigInteger: number)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to <a class="link" href="integer.htm" title="integer">integer</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <a class="link" href="integer.htm" title="integer">integer</a> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The result does not fit into an <a class="link" href="integer.htm" title="integer">integer</a>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_bigInteger)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in bigInteger: number)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to <a class="link" href="integer.htm" title="integer">integer</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <a class="link" href="integer.htm" title="integer">integer</a> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The result does not fit into an <a class="link" href="integer.htm" title="integer">integer</a>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="gcd(in_bigInteger,in_bigInteger)"><h3>gcd</h3></a>
<p>
const func bigInteger: <b>gcd</b> (in bigInteger: number1, in bigInteger: number2)</p><dl><dd>
<p>
Compute the greatest common divisor of two <i>bigInteger</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the greatest common divisor of the two numbers.         The greatest common divisor is positive or zero.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bigInteger(in_integer)"><h3>bigInteger</h3></a>
<p>
const func bigInteger: <b>bigInteger</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to <i>bigInteger</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bigInteger result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="str(in_bigInteger)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in bigInteger: number)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with decimal representation.
For negative numbers a minus sign is prepended.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_bigInteger)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in bigInteger: number)</p><dl><dd>
<p>
Convert a <i>bigInteger</i> number to a <i>bigInteger</i> literal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigInteger</i> literal.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bigInteger(in_string)"><h3>bigInteger</h3></a>
<p>
const func bigInteger: <b>bigInteger</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigInteger</i> number.
The <a class="link" href="string.htm" title="string">string</a> must contain an integer literal consisting of an
optional + or - sign, followed by a sequence of digits. Other
characters as well as leading or trailing whitespace characters
are not allowed. The sequence of digits is taken to be decimal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigInteger</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string is empty or it does not contain            an integer literal.</dd>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bigInteger(in_string,in_integer)"><h3>bigInteger</h3></a>
<p>
const func bigInteger: <b>bigInteger</b> (in string: stri, in integer: base)</p><dl><dd>
<p>
Convert a numeric <a class="link" href="string.htm" title="string">string</a>, with a specified radix, to a <i>bigInteger</i>.
The numeric <a class="link" href="string.htm" title="string">string</a> must contain the representation of an integer
in the specified radix. It consists of an optional + or - sign,
followed by a sequence of digits in the specified radix. Digit values
from 10 upward can be encoded with upper or lower case letters.
E.g.: 10 can be encoded with A or a, 11 with B or b, etc. Other
characters as well as leading or trailing whitespace characters
are not allowed.
</p>
<pre class="indent">
bigInteger("deadbeef", 16)     returns  3735928559_
bigInteger("-77777777777", 8)  returns -8589934591_
bigInteger("10101010", 2)      returns         170_
bigInteger("Cafe", 16)         returns       51966_
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>base</tt> - Radix of the integer in the <i>stri</i> parameter.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigInteger</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds or            the string is empty or it does not contain an integer            literal with the specified base.</dd>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rand(in_bigInteger,in_bigInteger)"><h3>rand</h3></a>
<p>
const func bigInteger: <b>rand</b> (in bigInteger: low, in bigInteger: high)</p><dl><dd>
<p>
Compute pseudo-random number in the range [low, high].
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random number such that low &lt;= rand(low, high) and         rand(low, high) &lt;= high holds.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The range is empty (low > high holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bitLength(in_bigInteger)"><h3>bitLength</h3></a>
<p>
const func integer: <b>bitLength</b> (in bigInteger: number)</p><dl><dd>
<p>
Number of bits in the minimum two's-complement representation.
The high bits equivalent to the sign bit are not part of the
minimum two's-complement representation.
</p>
<pre class="indent">
bitLength(0_)   returns 0
bitLength(1_)   returns 1
bitLength(4_)   returns 3
bitLength(-1_)  returns 0
bitLength(-2_)  returns 1
bitLength(-4_)  returns 2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of bits.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The result does not fit into an integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="lowestSetBit(in_bigInteger)"><h3>lowestSetBit</h3></a>
<p>
const func integer: <b>lowestSetBit</b> (in bigInteger: number)</p><dl><dd>
<p>
Number of lowest-order zero bits in the two's-complement representation.
This is equal to the index of the lowest-order one bit (indices start with 0).
If there are only zero bits (<i>number</i> is 0_) the result is -1.
</p>
<pre class="indent">
lowestSetBit(0_)   returns -1
lowestSetBit(1_)   returns  0
lowestSetBit(4_)   returns  2
lowestSetBit(-1_)  returns  0
lowestSetBit(-2_)  returns  1
lowestSetBit(-4_)  returns  2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of lowest-order zero bits or -1 for lowestSetBit(0_).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="incr(inout_bigInteger)"><h3>incr</h3></a>
<p>
const proc: <b>incr</b> (inout bigInteger: number)</p><dl><dd>
<p>
Increment a <i>bigInteger</i> variable.
Increments <i>number</i> by 1.
This is equivalent to:
</p>
<pre class="indent">
number := succ(number);
</pre>
</dd>
</dl></div>
<hr />
<div><a name="decr(inout_bigInteger)"><h3>decr</h3></a>
<p>
const proc: <b>decr</b> (inout bigInteger: number)</p><dl><dd>
<p>
Decrement a <i>bigInteger</i> variable.
Decrements <i>number</i> by 1.
This is equivalent to:
</p>
<pre class="indent">
number := pred(number);
</pre>
</dd>
</dl></div>
<hr />
<div><a name="sqrt(in_var_bigInteger)"><h3>sqrt</h3></a>
<p>
const func bigInteger: <b>sqrt</b> (in var bigInteger: number)</p><dl><dd>
<p>
Compute the integer square root of a <i>bigInteger</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the integer square root.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If number is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="modInverse(in_var_bigInteger,in_var_bigInteger)"><h3>modInverse</h3></a>
<p>
const func bigInteger: <b>modInverse</b> (in var bigInteger: a,
    in var bigInteger: b)</p><dl><dd>
<p>
Compute the modular multiplicative inverse of a modulo b.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the modular multiplicative inverse when a and b are         coprime (gcd(a, b) = 1).</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If a and b are not coprime (gcd(a, b) &lt;> 1).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="modPow(in_var_bigInteger,in_var_bigInteger,in_bigInteger)"><h3>modPow</h3></a>
<p>
const func bigInteger: <b>modPow</b> (in var bigInteger: base,
    in var bigInteger: exponent, in bigInteger: modulus)</p><dl><dd>
<p>
Compute the modular exponentiation of base ** exponent.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>base ** exponent mod modulus</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If exponent or modulus are negative.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bigfile.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bigrat.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
