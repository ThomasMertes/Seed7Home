<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: JSON</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="json_serde.htm">JSON serialize</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="scantoml.htm">Scan TOML</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="struct.htm">Struct</a>
<a class="menu" href="struct_elem.htm">Struct element</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tga.htm">TGA</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>JSON</big></b></td>
<td align="right"><a class="link" href="../lib/json.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/jpeg.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/json_serde.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonCategory">jsonCategory</a></b></td></tr>
<tr><td width="30"></td><td>Enumeration type describing the category of a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue">jsonValue</a></b></td></tr>
<tr><td width="30"></td><td>Interface type to represent JSON values.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="jsonCategory"><h3>jsonCategory</h3></a>
<p>
const type: <b>jsonCategory</b></p><dl><dd>
<p>
Enumeration type describing the category of a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.
Categories are JSON_NULL, JSON_BOOLEAN, JSON_NUMBER, JSON_STRING,
JSON_ARRAY and JSON_OBJECT.
</p>
</dd>
</dl></div>
<hr />
<div><a name="jsonValue"><h3>jsonValue</h3></a>
<p>
const type: <b>jsonValue</b></p><dl><dd>
<p>
Interface type to represent JSON values.
JSON values can be null (<i>jsonNull</i>),  booleans (<i>jsonBoolean</i>),
numbers (<i>jsonNumber</i>), strings (<i>jsonString</i>), arrays (<i>jsonArray</i>) or
objects (<i>jsonObject</i>).
</p>
<pre class="indent">
var jsonValue: json is jsonValue.value;
...
json := readJson("{\"size\": 2, \"keys\": [{\"id\": 1}, {\"id\": 2}]");
if "keys" in json and category(json["keys"]) = JSON_ARRAY then
  for aKey range json["keys"] do
    write(integer(aKey["id"]) &lt;&amp; " ");
  end for;
  writeln;
end if;
</pre>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in jsonValue: aValue) <b><a class="link" href="#(in_jsonValue)[(in_integer)]">[</a></b> (in integer: index) ]</td></tr>
<tr><td width="30"></td><td>Access one element from the JSON array <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in jsonValue: aValue) <b><a class="link" href="#(in_jsonValue)[(in_string)]">[</a></b> (in string: name) ]</td></tr>
<tr><td width="30"></td><td>Access one element from the JSON object <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: aKey) <b><a class="link" href="#(in_string)in(in_jsonValue)">in</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Determine if <i>aKey</i> is an element name of the JSON object <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: aKey) <b><a class="link" href="#(in_string)not_in(in_jsonValue)">not in</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Determine if <i>aKey</i> is not an element name of the JSON object <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout jsonObject: anObject) <b><a class="link" href="#(inout_jsonObject)@:=_[(in_string)](in_jsonValue)">@:= [</a></b> (in string: name) ] (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Assign the [[#jsonValue|jsonValue] <i>aValue</i> to the element <i>name</i> of <i>anObject</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">jsonCategory</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#category(in_jsonValue)">category</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the category of the JSON value <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">type</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#type(in_jsonValue)">type</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <i>type</i> of the JSON value <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#void(in_jsonValue)">void</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <i>void</i> value from the JSON null <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#boolean(in_jsonValue)">boolean</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <a class="link" href="boolean.htm" title="boolean">boolean</a> value from the JSON boolean <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_jsonValue)">integer</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <a class="link" href="integer.htm" title="integer">integer</a> value from the JSON number <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigInteger(in_jsonValue)">bigInteger</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> value from the JSON number <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#float(in_jsonValue)">float</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <a class="link" href="float.htm" title="float">float</a> value from the JSON number <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#string(in_jsonValue)">string</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Get the <a class="link" href="string.htm" title="string">string</a> value from the JSON string <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(in_jsonValue)">length</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Length of JSON array <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#minIdx(in_jsonValue)">minIdx</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Minimum index of JSON array <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#maxIdx(in_jsonValue)">maxIdx</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Maximum index of JSON array <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#keys(in_jsonValue)">keys</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Obtain the element names of the JSON object <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#values(in_jsonValue)">values</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Obtain the elements of the JSON array <i>aValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_jsonValue)">str</a></b> (in jsonValue: aValue)</td></tr>
<tr><td width="30"></td><td>Convert the given JSON value <i>aValue</i> to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_jsonValue)range(in_jsonValue)do(in_proc)end_for">for</a></b> (inout jsonValue: forVar) range (in jsonValue: aJsonArray) do
              (in proc: statements)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop where <i>forVar</i> loops over the elements of a JSON array.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for_key(inout_string)range(in_jsonValue)do(in_proc)end_for">for key</a></b> (inout string: keyVar) range (in jsonValue: aJsonObject) do
              (in proc: statements)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop where <i>keyVar</i> loops over the keys of a JSON object.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_jsonValue)key(inout_string)range(in_jsonValue)do(in_proc)end_for">for</a></b> (inout jsonValue: aValue) key (inout string: keyVar) range (in jsonValue: aJsonObject) do
              (in proc: statements)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop which loops over the keys and values of a JSON object.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(NULL)">jsonValue</a></b> (NULL)</td></tr>
<tr><td width="30"></td><td>Create a null <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_boolean)">jsonValue</a></b> (in boolean: okay)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="boolean.htm" title="boolean">boolean</a> <i>okay</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonNumber(in_string)">jsonNumber</a></b> (in string: number)</td></tr>
<tr><td width="30"></td><td>Create a <i>jsonNumber</i> with the given <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_integer)">jsonValue</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="integer.htm" title="integer">integer</a> <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_bigInteger)">jsonValue</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_float)">jsonValue</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="float.htm" title="float">float</a> <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_string)">jsonValue</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="string.htm" title="string">string</a> <i>stri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_jsonValueArray)">jsonValue</a></b> (in jsonValueArray: elements)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <i>elements</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jsonValue(in_jsonObject)">jsonValue</a></b> (in jsonObject: anObject)</td></tr>
<tr><td width="30"></td><td>Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <i>anObject</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readJson(inout_file)">readJson</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> from the given <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jsonValue</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readJson(in_string)">readJson</a></b> (in string: jsonStri)</td></tr>
<tr><td width="30"></td><td>Read a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> from the given <i>jsonStri</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(in_jsonValue)[(in_integer)]"><h3>[</h3></a>
<p>
const func jsonValue: (in jsonValue: aValue) <b>[</b> (in integer: index) ]</p><dl><dd>
<p>
Access one element from the JSON array <i>aValue</i>.
</p>
<pre class="indent">
type(   readJson("[false, 0.125]")[1]) returns boolean
boolean(readJson("[false, 0.125]")[1]) returns FALSE
type(   readJson("[false, 0.125]")[2]) returns float
float(  readJson("[false, 0.125]")[2]) returns 0.125
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the element with the specified <i>index</i> from <i>aValue</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If <i>index</i> is less than 1 or                        greater than <a class="link" href="#maxIdx(in_jsonValue)" title="maxIdx">maxIdx</a>(aValue).</dd>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_jsonValue)[(in_string)]"><h3>[</h3></a>
<p>
const func jsonValue: (in jsonValue: aValue) <b>[</b> (in string: name) ]</p><dl><dd>
<p>
Access one element from the JSON object <i>aValue</i>.
</p>
<pre class="indent">
type(   readJson("{\"fee\": 0.5, \"foo\": true}")["fee"])  returns  float
float(  readJson("{\"fee\": 0.5, \"foo\": true}")["fee"])  returns  0.5
type(   readJson("{\"fee\": 0.5, \"foo\": true}")["foo"])  returns  boolean
boolean(readJson("{\"fee\": 0.5, \"foo\": true}")["foo"])  returns  TRUE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the element with the specified <i>name</i> from <i>aValue</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If <i>aValue</i> does not have an element            with the key <i>name</i>.</dd>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON object.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)in(in_jsonValue)"><h3>in</h3></a>
<p>
const func boolean: (in string: aKey) <b>in</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Determine if <i>aKey</i> is an element name of the JSON object <i>aValue</i>.
</p>
<pre class="indent">
"fee" in readJson("{\"fee\": 0.5, \"foo\": true}")  returns  TRUE
"fi"  in readJson("{\"fee\": 0.5, \"foo\": true}")  returns  FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aKey</i> is an element name of the JSON object <i>aValue</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)not_in(in_jsonValue)"><h3>not in</h3></a>
<p>
const func boolean: (in string: aKey) <b>not in</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Determine if <i>aKey</i> is not an element name of the JSON object <i>aValue</i>.
</p>
<pre class="indent">
"fee" not in readJson("{\"fee\": 0.5, \"foo\": true}")  returns  FALSE
"fi"  not in readJson("{\"fee\": 0.5, \"foo\": true}")  returns  TRUE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if <i>aKey</i> is an element name of the JSON object <i>aValue</i>,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(inout_jsonObject)@:=_[(in_string)](in_jsonValue)"><h3>@:= [</h3></a>
<p>
const proc: (inout jsonObject: anObject) <b>@:= [</b> (in string: name) ] (in jsonValue: aValue)</p><dl><dd>
<p>
Assign the [[#jsonValue|jsonValue] <i>aValue</i> to the element <i>name</i> of <i>anObject</i>.
</p>
<pre class="indent">
anObject @:= [name] aValue;
</pre>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="category(in_jsonValue)"><h3>category</h3></a>
<p>
const func jsonCategory: <b>category</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the category of the JSON value <i>aValue</i>.
Returns one of JSON_NULL, JSON_BOOLEAN, JSON_NUMBER, JSON_STRING,
JSON_ARRAY or JSON_OBJECT.
</p>
<pre class="indent">
category(jsonValue(NULL))                  returns  JSON_NULL
category(jsonValue(TRUE))                  returns  JSON_BOOLEAN
category(jsonValue(              12345 ))  returns  JSON_NUMBER
category(jsonValue(9223372036854775808_))  returns  JSON_NUMBER
category(jsonValue("foo"))                 returns  JSON_STRING
category(readJson("false"))                returns  JSON_BOOLEAN
category(readJson("9223372036854775808"))  returns  JSON_NUMBER
category(readJson("0.00000762939453125"))  returns  JSON_NUMBER
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the category of the JSON value <i>aValue</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="type(in_jsonValue)"><h3>type</h3></a>
<p>
const func type: <b>type</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <i>type</i> of the JSON value <i>aValue</i>.
Returns one of <i>void</i>, <a class="link" href="boolean.htm" title="boolean">boolean</a>, <a class="link" href="integer.htm" title="integer">integer</a>, <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>, <a class="link" href="float.htm" title="float">float</a>,
<a class="link" href="string.htm" title="string">string</a>, <i>jsonValueArray</i> or <i>jsonValueMap</i>.
</p>
<pre class="indent">
type(jsonValue(NULL))                  returns  void
type(jsonValue(TRUE))                  returns  boolean
type(jsonValue(9223372036854775808_))  returns  bigInteger
type(jsonValue(0.00000762939453125 ))  returns  float
type(jsonValue("foo"))                 returns  string
type(readJson("false"))                returns  boolean
type(readJson("9223372036854775808"))  returns  bigInteger
type(readJson("0.00000762939453125"))  returns  float
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>type</i> of the JSON value <i>aValue</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="void(in_jsonValue)"><h3>void</h3></a>
<p>
const func void: <b>void</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <i>void</i> value from the JSON null <i>aValue</i>.
This function is defined for completeness.
If applied on a JSON null it will always return <i>empty</i>.
</p>
<pre class="indent">
void(jsonValue(NULL))   returns  empty
void(readJson("null"))  returns  empty
</pre>
<p>
The function <a class="link" href="#type(in_jsonValue)" title="type">type</a> can be used to check for JSON null:
</p>
<pre class="indent">
if type(aJasonValue) = void then
</pre>
<p>
The function <a class="link" href="#category(in_jsonValue)" title="category">category</a> can be used for the same purpose:
</p>
<pre class="indent">
if category(aJasonValue) = JSON_NULL then
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the void value of a JSON null.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON null.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="boolean(in_jsonValue)"><h3>boolean</h3></a>
<p>
const func boolean: <b>boolean</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <a class="link" href="boolean.htm" title="boolean">boolean</a> value from the JSON boolean <i>aValue</i>.
</p>
<pre class="indent">
boolean(jsonValue(FALSE))  returns  FALSE
boolean(readJson("true"))  returns  TRUE
</pre>
<p>
The function <a class="link" href="#type(in_jsonValue)" title="type">type</a> can be used to check for a <a class="link" href="boolean.htm" title="boolean">boolean</a>:
</p>
<pre class="indent">
if type(aJasonValue) = boolean then
  aBoolean := boolean(aJasonValue);
</pre>
<p>
The function <a class="link" href="#category(in_jsonValue)" title="category">category</a> can be used for the same purpose:
</p>
<pre class="indent">
if category(aJasonValue) = JSON_BOOLEAN then
  aBoolean := boolean(aJasonValue);
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the boolean value of a JSON boolean.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON boolean.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_jsonValue)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <a class="link" href="integer.htm" title="integer">integer</a> value from the JSON number <i>aValue</i>.
</p>
<pre class="indent">
integer(jsonValue(12345))                  returns  12345
integer(readJson("12345"))                 returns  12345
integer(readJson("12345678909876543210"))  raises   RANGE_ERROR
</pre>
<p>
The function <a class="link" href="#type(in_jsonValue)" title="type">type</a> can be used to check for an <a class="link" href="integer.htm" title="integer">integer</a>:
</p>
<pre class="indent">
if type(aJasonValue) = integer then
  anInteger := integer(aJasonValue);
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the integer value of a JSON number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON number.</dd>
<dd><tt>RANGE_ERROR</tt> - The JSON number cannot be represented as integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bigInteger(in_jsonValue)"><h3>bigInteger</h3></a>
<p>
const func bigInteger: <b>bigInteger</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> value from the JSON number <i>aValue</i>.
</p>
<pre class="indent">
bigInteger(jsonValue(12345_))   returns  12345_
bigInteger(readJson("12345"))   returns  12345_
bigInteger(readJson("123.45"))  raises   RANGE_ERROR
</pre>
<p>
The function <a class="link" href="#type(in_jsonValue)" title="type">type</a> can be used to check for a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>:
</p>
<pre class="indent">
if type(aJasonValue) = bigInteger then
  aBigInteger := bigInteger(aJasonValue);
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bigInteger value of a JSON number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON number.</dd>
<dd><tt>RANGE_ERROR</tt> - The JSON number cannot be represented as bigInteger.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="float(in_jsonValue)"><h3>float</h3></a>
<p>
const func float: <b>float</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <a class="link" href="float.htm" title="float">float</a> value from the JSON number <i>aValue</i>.
</p>
<pre class="indent">
float(jsonValue(0.0625))   returns  0.0625
float(readJson("0.0625"))  returns  0.0625
</pre>
<p>
The function <a class="link" href="#type(in_jsonValue)" title="type">type</a> can be used to check for a <a class="link" href="float.htm" title="float">float</a>:
</p>
<pre class="indent">
if type(aJasonValue) = float then
  aFloat := float(aJasonValue);
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the float value of a JSON number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON number.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="string(in_jsonValue)"><h3>string</h3></a>
<p>
const func string: <b>string</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Get the <a class="link" href="string.htm" title="string">string</a> value from the JSON string <i>aValue</i>.
</p>
<pre class="indent">
string(jsonValue(""))               returns  ""
string(jsonValue("abcdefg"))        returns  "abcdefg"
string(jsonValue(" \t\r\n"))        returns  " \t\r\n"
string(readJson("\"\""))            returns  ""
string(readJson("\"abcdefg\""))     returns  "abcdefg"
string(readJson("\" \\t\\r\\n\""))  returns  " \t\r\n"
</pre>
<p>
The function <a class="link" href="#type(in_jsonValue)" title="type">type</a> can be used to check for a <a class="link" href="string.htm" title="string">string</a>:
</p>
<pre class="indent">
if type(aJasonValue) = string then
  aString := string(aJasonValue);
</pre>
<p>
The function <a class="link" href="#category(in_jsonValue)" title="category">category</a> can be used for the same purpose:
</p>
<pre class="indent">
if category(aJasonValue) = JSON_STRING then
  aString := string(aJasonValue);
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string value of a JSON string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON string.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="length(in_jsonValue)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Length of JSON array <i>aValue</i>.
</p>
<pre class="indent">
length(readJson("[]"))           returns 0
length(readJson("[1]"))          returns 1
length(readJson("[1, \"foo\"]")) returns 2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the JSON array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="minIdx(in_jsonValue)"><h3>minIdx</h3></a>
<p>
const func integer: <b>minIdx</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Minimum index of JSON array <i>aValue</i>.
</p>
<pre class="indent">
minIdx(readJson("[]"))           returns 1
minIdx(readJson("[1]"))          returns 1
minIdx(readJson("[1, \"foo\"]")) returns 1
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the minimum index of the JSON array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="maxIdx(in_jsonValue)"><h3>maxIdx</h3></a>
<p>
const func integer: <b>maxIdx</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Maximum index of JSON array <i>aValue</i>.
</p>
<pre class="indent">
maxIdx(readJson("[]"))           returns 0
maxIdx(readJson("[1]"))          returns 1
maxIdx(readJson("[1, \"foo\"]")) returns 2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the maximum index of the JSON array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="keys(in_jsonValue)"><h3>keys</h3></a>
<p>
const func array string: <b>keys</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Obtain the element names of the JSON object <i>aValue</i>.
</p>
<pre class="indent">
keys(readJson("{}"))                             returns  0 times ""
keys(readJson("{\"fee\": 0.5}"))                 returns  [] ("fee")
keys(readJson("{\"fee\": 0.5, \"foo\": true}"))  returns  [] ("fee", "foo")
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an array with the element names of the JSON object.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON object.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="values(in_jsonValue)"><h3>values</h3></a>
<p>
const func array jsonValue: <b>values</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Obtain the elements of the JSON array <i>aValue</i>.
</p>
<pre class="indent">
values(readJson("[]"))           returns  0 times jsonValue.value
values(readJson("[\"fee\"]"))    returns  [] (jsonValue("fee"))
values(readJson("[0.5, true]"))  returns  [] (jsonValue(0.5), jsonValue(TRUE))
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an array with the elements of the JSON array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>ILLEGAL_ACTION</tt> - The value <i>aValue</i> is not a JSON array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="str(in_jsonValue)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in jsonValue: aValue)</p><dl><dd>
<p>
Convert the given JSON value <i>aValue</i> to a <a class="link" href="string.htm" title="string">string</a>.
</p>
<pre class="indent">
str(readJson("[1, \"a\", {\"ok\" : true}]"))  returns  "[1,\"a\",{\"ok\":true}]"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the JSON value as <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="for(inout_jsonValue)range(in_jsonValue)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout jsonValue: forVar) range (in jsonValue: aJsonArray) do
              (in proc: statements)
            end for</p><dl><dd>
<p>
For-loop where <i>forVar</i> loops over the elements of a JSON array.
</p>
<pre class="indent">
var jsonValue: aJsonArray is jsonValue.value;
var jsonValue: anElement is jsonValue.value;
...
if category(aJsonArray) = JSON_ARRAY then
  for anElement range aJsonArray do
    ...
</pre>
</dd>
</dl></div>
<hr />
<div><a name="for_key(inout_string)range(in_jsonValue)do(in_proc)end_for"><h3>for key</h3></a>
<p>
const proc: <b>for key</b> (inout string: keyVar) range (in jsonValue: aJsonObject) do
              (in proc: statements)
            end for</p><dl><dd>
<p>
For-loop where <i>keyVar</i> loops over the keys of a JSON object.
</p>
<pre class="indent">
var jsonValue: aJsonObject is jsonValue.value;
var string: aKey is "";
...
if category(aJsonObject) = JSON_OBJECT then
  for key aKey range aJsonObject do
    ...
</pre>
</dd>
</dl></div>
<hr />
<div><a name="for(inout_jsonValue)key(inout_string)range(in_jsonValue)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout jsonValue: aValue) key (inout string: keyVar) range (in jsonValue: aJsonObject) do
              (in proc: statements)
            end for</p><dl><dd>
<p>
For-loop which loops over the keys and values of a JSON object.
</p>
<pre class="indent">
var jsonValue: aJsonObject is jsonValue.value;
var string: aKey is "";
var jsonValue: aValue is jsonValue.value;
...
if category(aJsonObject) = JSON_OBJECT then
  for aValue key aKey range aJsonObject do
    ...
</pre>
</dd>
</dl></div>
<hr />
<div><a name="jsonValue(NULL)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (NULL)</p><dl><dd>
<p>
Create a null <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.
</p>
<pre class="indent">
jsonValue(NULL)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonNull</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_boolean)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in boolean: okay)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="boolean.htm" title="boolean">boolean</a> <i>okay</i>.
</p>
<pre class="indent">
jsonValue(TRUE)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonBoolean</i> with the given <i>okay</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonNumber(in_string)"><h3>jsonNumber</h3></a>
<p>
const func jsonValue: <b>jsonNumber</b> (in string: number)</p><dl><dd>
<p>
Create a <i>jsonNumber</i> with the given <i>number</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_integer)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in integer: number)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="integer.htm" title="integer">integer</a> <i>number</i>.
</p>
<pre class="indent">
jsonValue(123)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonNumber</i> with the given <a class="link" href="integer.htm" title="integer">integer</a> <i>number</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_bigInteger)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in bigInteger: number)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> <i>number</i>.
</p>
<pre class="indent">
jsonValue(123_)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonNumber</i> with the given <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> <i>number</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_float)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in float: number)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="float.htm" title="float">float</a> <i>number</i>.
</p>
<pre class="indent">
jsonValue(0.125)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonNumber</i> with the given <a class="link" href="float.htm" title="float">float</a> <i>number</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_string)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in string: stri)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <a class="link" href="string.htm" title="string">string</a> <i>stri</i>.
</p>
<pre class="indent">
jsonValue("test")
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonString</i> with the given <a class="link" href="string.htm" title="string">string</a> <i>stri</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_jsonValueArray)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in jsonValueArray: elements)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <i>elements</i>.
</p>
<pre class="indent">
jsonValue(0 times jsonValue.value)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonArray</i> with the given <i>elements</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="jsonValue(in_jsonObject)"><h3>jsonValue</h3></a>
<p>
const func jsonValue: <b>jsonValue</b> (in jsonObject: anObject)</p><dl><dd>
<p>
Create a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> with the given <i>anObject</i>.
</p>
<pre class="indent">
jsonValue(anObject)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>jsonObject</i> as <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="readJson(inout_file)"><h3>readJson</h3></a>
<p>
const func jsonValue: <b>readJson</b> (inout file: inFile)</p><dl><dd>
<p>
Read a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> from the given <i>inFile</i>.
</p>
<pre class="indent">
var file: aFile is STD_NULL;
var jsonValue: json is jsonValue.value;
...
aFile := openUtf8("test.json", "r");
if aFile &lt;> STD_NULL then
  json := readJson(aFile);
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> read from <i>inFile</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The <i>inFile</i> does not contain valid JSON.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="readJson(in_string)"><h3>readJson</h3></a>
<p>
const func jsonValue: <b>readJson</b> (in string: jsonStri)</p><dl><dd>
<p>
Read a <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> from the given <i>jsonStri</i>.
</p>
<pre class="indent">
var jsonValue: json is jsonValue.value;
...
json := readJson("[1, \"a\", {\"ok\" : true}]");
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <a class="link" href="#jsonValue" title="jsonValue">jsonValue</a> read from <i>jsonStri</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The string <i>jsonStri</i> does not contain valid JSON.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/jpeg.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/json_serde.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
