<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Complex</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Complex</big></b></td>
<td align="right"><a class="link" href="../lib/complex.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/cli_cmds.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/console.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#complex">complex</a></b></td></tr>
<tr><td width="30"></td><td>Complex numbers represented with <a class="link" href="float.htm" title="float">float</a> real part and imaginary part.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="complex"><h3>complex</h3></a>
<p>
const type: <b>complex</b></p><dl><dd>
<p>
Complex numbers represented with <a class="link" href="float.htm" title="float">float</a> real part and imaginary part.
Complex literals do not exist.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr complex) <b><a class="link" href="#(attr_complex)conv(in_integer)">conv</a></b> (in integer: re)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a complex.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr complex) <b><a class="link" href="#(attr_complex)conv(in_float)">conv</a></b> (in float: re)</td></tr>
<tr><td width="30"></td><td>Conversion a <a class="link" href="float.htm" title="float">float</a> to a complex.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(ref complex: number1) <b><a class="link" href="#(ref_complex)=(ref_complex)">=</a></b> (ref complex: number2)</td></tr>
<tr><td width="30"></td><td>Check if two complex numbers are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(ref complex: number1) <b><a class="link" href="#(ref_complex)&lt;>(ref_complex)">&lt;></a></b> (ref complex: number2)</td></tr>
<tr><td width="30"></td><td>Check if two complex numbers are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#+(in_complex)">+</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Plus sign for complex numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#-(in_complex)">-</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Minus sign, negate a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#conj(in_complex)">conj</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Compute the conjugated value of a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: summand1) <b><a class="link" href="#(in_complex)+(in_complex)">+</a></b> (in complex: summand2)</td></tr>
<tr><td width="30"></td><td>Add two complex numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: minuend) <b><a class="link" href="#(in_complex)-(in_complex)">-</a></b> (in complex: subtrahend)</td></tr>
<tr><td width="30"></td><td>Compute the subtraction of two complex numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: factor1) <b><a class="link" href="#(in_complex)*(in_complex)">*</a></b> (in complex: factor2)</td></tr>
<tr><td width="30"></td><td>Multiply two complex numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: dividend) <b><a class="link" href="#(in_complex)/(in_complex)">/</a></b> (in complex: divisor)</td></tr>
<tr><td width="30"></td><td>Copmpute the division of two complex numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout complex: number) <b><a class="link" href="#(inout_complex)+:=(in_complex)">+:=</a></b> (in complex: delta)</td></tr>
<tr><td width="30"></td><td>Increment a complex number by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout complex: number) <b><a class="link" href="#(inout_complex)-:=(in_complex)">-:=</a></b> (in complex: delta)</td></tr>
<tr><td width="30"></td><td>Decrement a complex number by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout complex: number) <b><a class="link" href="#(inout_complex)*:=(in_complex)">*:=</a></b> (in complex: factor)</td></tr>
<tr><td width="30"></td><td>Multiply a complex number by a factor and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout complex: number) <b><a class="link" href="#(inout_complex)/:=(in_complex)">/:=</a></b> (in complex: divisor)</td></tr>
<tr><td width="30"></td><td>Divide a complex number by a divisor and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: base) <b><a class="link" href="#(in_complex)**(in_integer)">**</a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Compute the exponentiation of a complex base with an <a class="link" href="integer.htm" title="integer">integer</a> exponent.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr complex) <b><a class="link" href="#(attr_complex)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: number) <b><a class="link" href="#(in_complex)digits(in_integer)">digits</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a complex to a <a class="link" href="string.htm" title="string">string</a> in decimal fixed point notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in complex: number) <b><a class="link" href="#(in_complex)sci(in_integer)">sci</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a complex to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#complex(in_float,in_float)">complex</a></b> (in float: re, in float: im)</td></tr>
<tr><td width="30"></td><td>Create a complex number from its real and imaginary part.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#complex(in_float)">complex</a></b> (in float: re)</td></tr>
<tr><td width="30"></td><td>Create a complex number from its real part.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#polar(in_float,in_float)">polar</a></b> (in float: magnitude, in float: angle)</td></tr>
<tr><td width="30"></td><td>Create a complex number from polar coordinates.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#complex(in_integer)">complex</a></b> (in integer: re)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a complex.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#abs(in_complex)">abs</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Compute the absolute value of a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#sqrAbs(in_complex)">sqrAbs</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Compute the square of the absolute value of a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arg(in_complex)">arg</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Compute the argument of a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_complex,in_complex)">compare</a></b> (in complex: number1, in complex: number2)</td></tr>
<tr><td width="30"></td><td>Compare two complex numbers in lexicographic order.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_complex)">hashCode</a></b> (in complex: num)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a complex number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_complex)">str</a></b> (in complex: number)</td></tr>
<tr><td width="30"></td><td>Convert a complex number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">complex</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#complex(in_string)">complex</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a complex number.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_complex)conv(in_integer)"><h3>conv</h3></a>
<p>
const func complex: (attr complex) <b>conv</b> (in integer: re)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a complex.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_complex)conv(in_float)"><h3>conv</h3></a>
<p>
const func complex: (attr complex) <b>conv</b> (in float: re)</p><dl><dd>
<p>
Conversion a <a class="link" href="float.htm" title="float">float</a> to a complex.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(ref_complex)=(ref_complex)"><h3>=</h3></a>
<p>
const func boolean: (ref complex: number1) <b>=</b> (ref complex: number2)</p><dl><dd>
<p>
Check if two complex numbers are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both numbers are equal, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(ref_complex)&lt;>(ref_complex)"><h3>&lt;></h3></a>
<p>
const func boolean: (ref complex: number1) <b>&lt;></b> (ref complex: number2)</p><dl><dd>
<p>
Check if two complex numbers are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both numbers are equal, TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="+(in_complex)"><h3>+</h3></a>
<p>
const func complex: <b>+</b> (in complex: number)</p><dl><dd>
<p>
Plus sign for complex numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its operand unchanged.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="-(in_complex)"><h3>-</h3></a>
<p>
const func complex: <b>-</b> (in complex: number)</p><dl><dd>
<p>
Minus sign, negate a complex number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the negated value of the number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="conj(in_complex)"><h3>conj</h3></a>
<p>
const func complex: <b>conj</b> (in complex: number)</p><dl><dd>
<p>
Compute the conjugated value of a complex number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the complex conjugate of the number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_complex)+(in_complex)"><h3>+</h3></a>
<p>
const func complex: (in complex: summand1) <b>+</b> (in complex: summand2)</p><dl><dd>
<p>
Add two complex numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sum of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_complex)-(in_complex)"><h3>-</h3></a>
<p>
const func complex: (in complex: minuend) <b>-</b> (in complex: subtrahend)</p><dl><dd>
<p>
Compute the subtraction of two complex numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_complex)*(in_complex)"><h3>*</h3></a>
<p>
const func complex: (in complex: factor1) <b>*</b> (in complex: factor2)</p><dl><dd>
<p>
Multiply two complex numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the product of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_complex)/(in_complex)"><h3>/</h3></a>
<p>
const func complex: (in complex: dividend) <b>/</b> (in complex: divisor)</p><dl><dd>
<p>
Copmpute the division of two complex numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the division.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(inout_complex)+:=(in_complex)"><h3>+:=</h3></a>
<p>
const proc: (inout complex: number) <b>+:=</b> (in complex: delta)</p><dl><dd>
<p>
Increment a complex number by a delta.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_complex)-:=(in_complex)"><h3>-:=</h3></a>
<p>
const proc: (inout complex: number) <b>-:=</b> (in complex: delta)</p><dl><dd>
<p>
Decrement a complex number by a delta.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_complex)*:=(in_complex)"><h3>*:=</h3></a>
<p>
const proc: (inout complex: number) <b>*:=</b> (in complex: factor)</p><dl><dd>
<p>
Multiply a complex number by a factor and assign the result back to number.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_complex)/:=(in_complex)"><h3>/:=</h3></a>
<p>
const proc: (inout complex: number) <b>/:=</b> (in complex: divisor)</p><dl><dd>
<p>
Divide a complex number by a divisor and assign the result back to number.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_complex)**(in_integer)"><h3>**</h3></a>
<p>
const func complex: (in complex: base) <b>**</b> (in integer: exponent)</p><dl><dd>
<p>
Compute the exponentiation of a complex base with an <a class="link" href="integer.htm" title="integer">integer</a> exponent.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the exponentiation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_complex)parse(in_string)"><h3>parse</h3></a>
<p>
const func complex: (attr complex) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a complex number.
The string must contain real and imaginary part (e.g.: "1.5-2.8i").
Real and imaginary part must be separated with a + or - sign.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the complex result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If stri contains not a valid complex value.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_complex)digits(in_integer)"><h3>digits</h3></a>
<p>
const func string: (in complex: number) <b>digits</b> (in integer: precision)</p><dl><dd>
<p>
Convert a complex to a <a class="link" href="string.htm" title="string">string</a> in decimal fixed point notation.
The number is converted to a string with real and imaginary
part (e.g.: "1.5-2.8i"). Real and imaginary part are separated
with a + or - sign. The <i>precision</i> parameter specifies the number
of digits after the decimal point of the real and imaginary part.
If the <i>precision</i> is zero the decimal point is omitted.
</p>
<pre class="indent">
complex(3.1415) digits 2   returns "3.14+0.00i"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_complex)sci(in_integer)"><h3>sci</h3></a>
<p>
const func string: (in complex: number) <b>sci</b> (in integer: precision)</p><dl><dd>
<p>
Convert a complex to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.
The number is converted to a string with real and imaginary
part (e.g.: "1.5e+2-2.8e+0i"). Real and imaginary part are separated
with a + or - sign. The <i>precision</i> parameter specifies the number
of digits after the decimal point of the real and imaginary part.
If the <i>precision</i> is zero the decimal point is omitted.
</p>
<pre class="indent">
complex(31415.9, 27182.8) sci 4   returns "3.1416e+4+2.7183e+4i"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="complex(in_float,in_float)"><h3>complex</h3></a>
<p>
const func complex: <b>complex</b> (in float: re, in float: im)</p><dl><dd>
<p>
Create a complex number from its real and imaginary part.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created complex number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="complex(in_float)"><h3>complex</h3></a>
<p>
const func complex: <b>complex</b> (in float: re)</p><dl><dd>
<p>
Create a complex number from its real part.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created complex number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="polar(in_float,in_float)"><h3>polar</h3></a>
<p>
const func complex: <b>polar</b> (in float: magnitude, in float: angle)</p><dl><dd>
<p>
Create a complex number from polar coordinates.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created complex number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="complex(in_integer)"><h3>complex</h3></a>
<p>
const func complex: <b>complex</b> (in integer: re)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> to a complex.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="abs(in_complex)"><h3>abs</h3></a>
<p>
const func float: <b>abs</b> (in complex: number)</p><dl><dd>
<p>
Compute the absolute value of a complex number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="sqrAbs(in_complex)"><h3>sqrAbs</h3></a>
<p>
const func float: <b>sqrAbs</b> (in complex: number)</p><dl><dd>
<p>
Compute the square of the absolute value of a complex number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the square of the absolute value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="arg(in_complex)"><h3>arg</h3></a>
<p>
const func float: <b>arg</b> (in complex: number)</p><dl><dd>
<p>
Compute the argument of a complex number.
This is the angle of the polar form of the complex number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the argument of the complex number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="compare(in_complex,in_complex)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in complex: number1, in complex: number2)</p><dl><dd>
<p>
Compare two complex numbers in lexicographic order.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_complex)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in complex: num)</p><dl><dd>
<p>
Compute the hash value of a complex number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_complex)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in complex: number)</p><dl><dd>
<p>
Convert a complex number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a string with real and imaginary
part (e.g.: "1.5-2.8i"). Real and imaginary part are separated
with a + or - sign.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="complex(in_string)"><h3>complex</h3></a>
<p>
const func complex: <b>complex</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a complex number.
The string must contain real and imaginary part (e.g.: "1.5-2.8i").
Real and imaginary part must be separated with a + or - sign.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the complex result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If stri contains not a valid complex value.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/cli_cmds.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/console.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
