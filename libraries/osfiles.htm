<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Osfiles</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Osfiles</big></b></td>
<td align="right"><a class="link" href="../prg/osfiles.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/null_file.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/pem.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#osFileSys">osFileSys</a></b></td></tr>
<tr><td width="30"></td><td><a class="link" href="filesys.htm#fileSys" title="FileSys">FileSys</a> implementation type to access operating system files.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="osFileSys"><h3>osFileSys</h3></a>
<p>
const type: <b>osFileSys</b></p><dl><dd>
<p>
<a class="link" href="filesys.htm#fileSys" title="FileSys">FileSys</a> implementation type to access operating system files.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Variable Summary</td></tr>
<tr><td align="right" valign="top">fileSys</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#osFiles">osFiles</a></b></td></tr>
<tr><td width="30"></td><td><a class="link" href="filesys.htm#fileSys" title="File system">File system</a> of the operating system files.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readDir(in_string)">readDir</a></b> (in string: dirPath)</td></tr>
<tr><td width="30"></td><td>Determine the filenames in a directory.</td></tr></table></td></tr>
<tr><td align="right" valign="top">fileType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fileType(in_string)">fileType</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the type of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">fileType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fileTypeSL(in_string)">fileTypeSL</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the type of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">fileMode</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fileMode(in_string)">fileMode</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the file mode (permissions) of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setFileMode(in_string,in_fileMode)">setFileMode</a></b> (in string: filePath, in fileMode: mode)</td></tr>
<tr><td width="30"></td><td>Change the file mode (permissions) of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fileSize(in_string)">fileSize</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the size of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigFileSize(in_string)">bigFileSize</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the size of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getATime(in_string)">getATime</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the access time of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getCTime(in_string)">getCTime</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the change time of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getMTime(in_string)">getMTime</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the modification time of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setATime(in_string,in_time)">setATime</a></b> (in string: filePath, in time: aTime)</td></tr>
<tr><td width="30"></td><td>Set the access time of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setMTime(in_string,in_time)">setMTime</a></b> (in string: filePath, in time: aTime)</td></tr>
<tr><td width="30"></td><td>Set the modification time of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getOwner(in_string)">getOwner</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the name of the owner (UID) of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setOwner(in_string,in_string)">setOwner</a></b> (in string: filePath, in string: owner)</td></tr>
<tr><td width="30"></td><td>Set the owner of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getGroup(in_string)">getGroup</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Determine the name of the group (GID) to which a file belongs.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setGroup(in_string,in_string)">setGroup</a></b> (in string: filePath, in string: group)</td></tr>
<tr><td width="30"></td><td>Set the group of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readLink(in_string)">readLink</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Reads the destination of a symbolic link.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#symlink(in_string,in_string)">symlink</a></b> (in string: sourcePath, in string: destPath)</td></tr>
<tr><td width="30"></td><td>Create a symbolic link.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#removeFile(in_string)">removeFile</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Remove a file of any type unless it is a directory that is not empty.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#removeTree(in_string)">removeTree</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Remove a file of any type inclusive a directory tree.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#copyFile(in_string,in_string)">copyFile</a></b> (in string: sourcePath, in string: destPath)</td></tr>
<tr><td width="30"></td><td>Copy a file or directory tree.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#cloneFile(in_string,in_string)">cloneFile</a></b> (in string: sourcePath, in string: destPath)</td></tr>
<tr><td width="30"></td><td>Clone a file or directory tree.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#moveFile(in_string,in_string)">moveFile</a></b> (in string: sourcePath, in string: destPath)</td></tr>
<tr><td width="30"></td><td>Move and rename a file or directory tree.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#mkdir(in_string)">mkdir</a></b> (in string: dirPath)</td></tr>
<tr><td width="30"></td><td>Creates a new directory.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getcwd">getcwd</a></b></td></tr>
<tr><td width="30"></td><td>Determine the current working directory of the calling process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#chdir(in_string)">chdir</a></b> (in string: dirPath)</td></tr>
<tr><td width="30"></td><td>Changes the current working directory of the calling process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#homeDir">homeDir</a></b></td></tr>
<tr><td width="30"></td><td>Determine the home directory of the user.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toAbsPath(in_string,in_string)">toAbsPath</a></b> (in string: basePath, in string: path)</td></tr>
<tr><td width="30"></td><td>Determine the absolute path for a given <i>path</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#makeParentDirs(in_string)">makeParentDirs</a></b> (in string: filePath)</td></tr>
<tr><td width="30"></td><td>Create the parent directories of the given 'filePath'.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Variable Detail</td></tr></table></p>
<div><a name="osFiles"><h3>osFiles</h3></a>
<p>
var fileSys: <b>osFiles</b></p><dl><dd>
<p>
<a class="link" href="filesys.htm#fileSys" title="File system">File system</a> of the operating system files.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="readDir(in_string)"><h3>readDir</h3></a>
<p>
const func array string: <b>readDir</b> (in string: dirPath)</p><dl><dd>
<p>
Determine the filenames in a directory.
The files "." and ".." are left out from the result.
Note that the function returns only the filenames.
Additional information must be obtained with other calls.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string-array containing the filenames in the directory.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>dirPath</i>            to the system path type or not enough memory to            represent the result <i>string array</i>.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>dirPath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fileType(in_string)"><h3>fileType</h3></a>
<p>
const func fileType: <b>fileType</b> (in string: filePath)</p><dl><dd>
<p>
Determine the type of a file.
The function does follow symbolic links. If the chain of
symbolic links is too long the function returns <i>FILE_SYMLINK</i>.
If a symbolic link refers to a place where the permission
is denied the function returns <i>FILE_SYMLINK</i>.
A return value of <i>FILE_ABSENT</i> does not imply that a file
with this name can be created, since missing directories and
illegal file names cause also <i>FILE_ABSENT</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the type of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation.</dd>
<dd><tt>FILE_ERROR</tt> - The system function returns an error other            than ENOENT, ENOTDIR, ENAMETOOLONG or EACCES.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fileTypeSL(in_string)"><h3>fileTypeSL</h3></a>
<p>
const func fileType: <b>fileTypeSL</b> (in string: filePath)</p><dl><dd>
<p>
Determine the type of a file.
The function does not follow symbolic links. Therefore it may
return <i>FILE_SYMLINK</i>. A return value of <i>FILE_ABSENT</i> does
not imply that a file with this name can be created, since missing
directories and illegal file names cause also <i>FILE_ABSENT</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the type of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation.</dd>
<dd><tt>FILE_ERROR</tt> - The system function returns an error other            than ENOENT, ENOTDIR, ENAMETOOLONG or EACCES.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fileMode(in_string)"><h3>fileMode</h3></a>
<p>
const func fileMode: <b>fileMode</b> (in string: filePath)</p><dl><dd>
<p>
Determine the file mode (permissions) of a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the file mode.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setFileMode(in_string,in_fileMode)"><h3>setFileMode</h3></a>
<p>
const proc: <b>setFileMode</b> (in string: filePath, in fileMode: mode)</p><dl><dd>
<p>
Change the file mode (permissions) of a file.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fileSize(in_string)"><h3>fileSize</h3></a>
<p>
const func integer: <b>fileSize</b> (in string: filePath)</p><dl><dd>
<p>
Determine the size of a file.
The file size is measured in bytes.
For directories, fifos and sockets a size of 0 is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the size of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>RANGE_ERROR</tt> - The file size is not representable as integer.</dd>
<dd><tt>FILE_ERROR</tt> - It was not possible to determine the file size.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bigFileSize(in_string)"><h3>bigFileSize</h3></a>
<p>
const func bigInteger: <b>bigFileSize</b> (in string: filePath)</p><dl><dd>
<p>
Determine the size of a file.
The file size is measured in bytes.
For directories, fifos and sockets a size of 0 is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the size of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - It was not possible to determine the file size.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getATime(in_string)"><h3>getATime</h3></a>
<p>
const func time: <b>getATime</b> (in string: filePath)</p><dl><dd>
<p>
Determine the access time of a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the access time of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getCTime(in_string)"><h3>getCTime</h3></a>
<p>
const func time: <b>getCTime</b> (in string: filePath)</p><dl><dd>
<p>
Determine the change time of a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the change time of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getMTime(in_string)"><h3>getMTime</h3></a>
<p>
const func time: <b>getMTime</b> (in string: filePath)</p><dl><dd>
<p>
Determine the modification time of a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the modification time of the file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setATime(in_string,in_time)"><h3>setATime</h3></a>
<p>
const proc: <b>setATime</b> (in string: filePath, in time: aTime)</p><dl><dd>
<p>
Set the access time of a file.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>aTime</i> is invalid or cannot be            converted to the system file time.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setMTime(in_string,in_time)"><h3>setMTime</h3></a>
<p>
const proc: <b>setMTime</b> (in string: filePath, in time: aTime)</p><dl><dd>
<p>
Set the modification time of a file.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>aTime</i> is invalid or cannot be            converted to the system file time.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getOwner(in_string)"><h3>getOwner</h3></a>
<p>
const func string: <b>getOwner</b> (in string: filePath)</p><dl><dd>
<p>
Determine the name of the owner (UID) of a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the name of the file owner.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setOwner(in_string,in_string)"><h3>setOwner</h3></a>
<p>
const proc: <b>setOwner</b> (in string: filePath, in string: owner)</p><dl><dd>
<p>
Set the owner of a file.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getGroup(in_string)"><h3>getGroup</h3></a>
<p>
const func string: <b>getGroup</b> (in string: filePath)</p><dl><dd>
<p>
Determine the name of the group (GID) to which a file belongs.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the name of the file group.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setGroup(in_string,in_string)"><h3>setGroup</h3></a>
<p>
const proc: <b>setGroup</b> (in string: filePath, in string: group)</p><dl><dd>
<p>
Set the group of a file.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="readLink(in_string)"><h3>readLink</h3></a>
<p>
const func string: <b>readLink</b> (in string: filePath)</p><dl><dd>
<p>
Reads the destination of a symbolic link.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>The destination referred by the symbolic link.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i>            to the system path type or not enough memory to            represent the result <a class="link" href="string.htm" title="string">string</a>.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - The file described with the path does not            exist or is not a symbolic link.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="symlink(in_string,in_string)"><h3>symlink</h3></a>
<p>
const proc: <b>symlink</b> (in string: sourcePath, in string: destPath)</p><dl><dd>
<p>
Create a symbolic link.
The symbolic link <i>destPath</i> will refer to <i>sourcePath</i> afterwards.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>sourcePath</tt> - String to be contained in the symbolic link.</dd>
<dd><tt>destPath</tt> - Name of the symbolic link to be created.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert sourcePath or            destPath to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>sourcePath</i> or <i>destPath</i> does not use the            standard path representation or one of them cannot be            converted to the system path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="removeFile(in_string)"><h3>removeFile</h3></a>
<p>
const proc: <b>removeFile</b> (in string: filePath)</p><dl><dd>
<p>
Remove a file of any type unless it is a directory that is not empty.
An attempt to remove a directory that is not empty triggers FILE_ERROR.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i> to            the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - The file does not exist or it is a directory            that is not empty or a system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="removeTree(in_string)"><h3>removeTree</h3></a>
<p>
const proc: <b>removeTree</b> (in string: filePath)</p><dl><dd>
<p>
Remove a file of any type inclusive a directory tree.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i> to            the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - The file does not exist or a system function            returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="copyFile(in_string,in_string)"><h3>copyFile</h3></a>
<p>
const proc: <b>copyFile</b> (in string: sourcePath, in string: destPath)</p><dl><dd>
<p>
Copy a file or directory tree.
Permissions/mode, ownership and timestamps of the destination file
are determined independent of the corresponding source properties.
The destination file gets the permissions/mode defined by umask.
The user executing the program is the owner of the destination file.
The timestamps of the destination file are set to the current time.
Symbolic links in <i>sourcePath</i> are always followed.
Therefore <i>copyFile</i> will never create a symbolic link.
Note that <i>copyFile</i> does not preserve hard links (they are
resolved to distinct files).
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>sourcePath</i>            or <i>destPath</i> to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>sourcePath</i> or <i>destPath</i> does not use            the standard path representation or one of them cannot be            converted to the system path type.</dd>
<dd><tt>FILE_ERROR</tt> - Source file does not exist, destination file            already exists or a system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="cloneFile(in_string,in_string)"><h3>cloneFile</h3></a>
<p>
const proc: <b>cloneFile</b> (in string: sourcePath, in string: destPath)</p><dl><dd>
<p>
Clone a file or directory tree.
Permissions/mode, ownership and timestamps of the original are
preserved. Symlinks are not followed. Instead the symlink is
copied. Note that <i>cloneFile</i> does not preserve hard links (they
are resolved to distinct files).
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert            <i>sourcePath</i> or <i>destPath</i> to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>sourcePath</i> or <i>destPath</i> does not use            the standard path representation or one of them cannot be            converted to the system path type.</dd>
<dd><tt>FILE_ERROR</tt> - Source file does not exist, destination file            already exists or a system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="moveFile(in_string,in_string)"><h3>moveFile</h3></a>
<p>
const proc: <b>moveFile</b> (in string: sourcePath, in string: destPath)</p><dl><dd>
<p>
Move and rename a file or directory tree.
The function uses the C <i>rename()</i> function. If <i>rename()</i> fails
the file (or directory tree) is cloned with <i>cloneFile</i> (which
preserves permissions/mode, ownership and timestamps) to the new
place and with the new name. If <i>cloneFile</i> succeeds the original
file is deleted. If <i>cloneFile</i> fails (no space on device or
other reason) all remains of the failed clone are removed. Note
that <i>cloneFile</i> works for symbolic links but does not preserve
hard links (they are resolved to distinct files).
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>sourcePath</i>            or <i>destPath</i> to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>sourcePath</i> or <i>destPath</i> does not use            the standard path representation or one of them cannot be            converted to the system path type.</dd>
<dd><tt>FILE_ERROR</tt> - Source file does not exist, destination file            already exists or a system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="mkdir(in_string)"><h3>mkdir</h3></a>
<p>
const proc: <b>mkdir</b> (in string: dirPath)</p><dl><dd>
<p>
Creates a new directory.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>dirPath</i> to            the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>dirPath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getcwd"><h3>getcwd</h3></a>
<p>
const func string: <b>getcwd</b></p><dl><dd>
<p>
Determine the current working directory of the calling process.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>The absolute path of the current working directory.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the            result <a class="link" href="string.htm" title="string">string</a>.</dd>
<dd><tt>FILE_ERROR</tt> - The system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="chdir(in_string)"><h3>chdir</h3></a>
<p>
const proc: <b>chdir</b> (in string: dirPath)</p><dl><dd>
<p>
Changes the current working directory of the calling process.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>dirPath</i> to            the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>dirPath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="homeDir"><h3>homeDir</h3></a>
<p>
const func string: <b>homeDir</b></p><dl><dd>
<p>
Determine the home directory of the user.
This function should be preferred over the use of an environment
variable such as $HOME. $HOME is not supported under all operating
systems and it is not guaranteed, that it uses the standard path
representation.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>The absolute path of the home directory.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the            result <a class="link" href="string.htm" title="string">string</a>.</dd>
<dd><tt>FILE_ERROR</tt> - Not able to determine the home directory.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toAbsPath(in_string,in_string)"><h3>toAbsPath</h3></a>
<p>
const func string: <b>toAbsPath</b> (in string: basePath, in string: path)</p><dl><dd>
<p>
Determine the absolute path for a given <i>path</i>.
</p>
<pre class="indent">
toAbsolute(getcwd, "aFile")    -->  Returns e.g. "/home/myuser/aFile"
toAbsolute(".", "aFile")       -->  Returns e.g. "/home/myuser/aFile"
toAbsolute("/usr", "include")  -->  Returns "/usr/include"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>basePath</tt> - Path of the base location. The relative <i>path</i> is        relative to this location.</dd>
<dd><tt>path</tt> - Absolute or relative path for which the absolute path should        be determined:</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>path</i> if <i>path</i> is already absolute, or         concatenate <i>basePath</i> with <i>path</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="makeParentDirs(in_string)"><h3>makeParentDirs</h3></a>
<p>
const proc: <b>makeParentDirs</b> (in string: filePath)</p><dl><dd>
<p>
Create the parent directories of the given 'filePath'.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>filePath</i> to            the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>filePath</i> does not use the standard path            representation or it cannot be converted to the system            path type.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error, or            a component of 'filePath' is not a directory.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/null_file.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/pem.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
  </body>
</html>
