<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Char</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Char</big></b></td>
<td align="right"><a class="link" href="../prg/char.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/cgidialog.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/charsets.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#char">char</a></b></td></tr>
<tr><td width="30"></td><td>The type <i>char</i> describes Unicode characters encoded with UTF-32.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="char"><h3>char</h3></a>
<p>
const type: <b>char</b></p><dl><dd>
<p>
The type <i>char</i> describes Unicode characters encoded with UTF-32.
A <i>char</i> can also contain values, which are not Unicode, like EOF.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Constant Summary</td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#EOF">EOF</a></b></td></tr>
<tr><td width="30"></td><td>Character representing end-of-file.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr char) <b><a class="link" href="#(attr_char)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>char</i> (' ').</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr char) <b><a class="link" href="#(attr_char)._first">. first</a></b></td></tr>
<tr><td width="30"></td><td>Minimum value of <i>char</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr char) <b><a class="link" href="#(attr_char)._last">. last</a></b></td></tr>
<tr><td width="30"></td><td>Maximum value of an Unicode character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in char: ch1) <b><a class="link" href="#(in_char)=(in_char)">=</a></b> (in char: ch2)</td></tr>
<tr><td width="30"></td><td>Check if two characters are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in char: ch1) <b><a class="link" href="#(in_char)&lt;>(in_char)">&lt;></a></b> (in char: ch2)</td></tr>
<tr><td width="30"></td><td>Check if two characters are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in char: ch1) <b><a class="link" href="#(in_char)&lt;(in_char)">&lt;</a></b> (in char: ch2)</td></tr>
<tr><td width="30"></td><td>Check if ch1 is less than ch2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in char: ch1) <b><a class="link" href="#(in_char)>(in_char)">></a></b> (in char: ch2)</td></tr>
<tr><td width="30"></td><td>Check if ch1 is greater than ch2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in char: ch1) <b><a class="link" href="#(in_char)&lt;=(in_char)">&lt;=</a></b> (in char: ch2)</td></tr>
<tr><td width="30"></td><td>Check if ch1 is less than or equal to ch2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in char: ch1) <b><a class="link" href="#(in_char)>=(in_char)">>=</a></b> (in char: ch2)</td></tr>
<tr><td width="30"></td><td>Check if ch1 is greater than or equal to ch2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr char) <b><a class="link" href="#(attr_char)conv(in_integer)">conv</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr char) <b><a class="link" href="#(attr_char)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> with a length of 1 to a character.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_char,in_char)">compare</a></b> (in char: ch1, in char: ch2)</td></tr>
<tr><td width="30"></td><td>Compare two characters.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_char)">hashCode</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ord(in_char)">ord</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Get the ordinal number of a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_char)">integer</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Get the ordinal number of a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#chr(in_integer)">chr</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#char(in_integer)">char</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#succ(in_char)">succ</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Successor of a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pred(in_char)">pred</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Predecessor of a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_char)">str</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Create a string with one character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#upper(in_char)">upper</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Convert a character to upper case.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lower(in_char)">lower</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Convert a character to lower case.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isLetter(in_char)">isLetter</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Determines if the specified character <i>ch</i> is a letter.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#width(in_char)">width</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Number of screen columns occupied by the Unicode character <i>ch</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#incr(inout_char)">incr</a></b> (inout char: ch)</td></tr>
<tr><td width="30"></td><td>Increment a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#decr(inout_char)">decr</a></b> (inout char: ch)</td></tr>
<tr><td width="30"></td><td>Decrement a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_char,in_char)">rand</a></b> (in char: low, in char: high)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random character in the range [low, high].</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#char(in_string)">char</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> with a length of 1 to a character.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#trimValue(attr_char,in_string)">trimValue</a></b> (attr char, in string: stri)</td></tr>
<tr><td width="30"></td><td>Trim a string such that it can be converted to <i>char</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_char)">literal</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Conversion to a <i>char</i> literal.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Constant Detail</td></tr></table></p>
<div><a name="EOF"><h3>EOF</h3></a>
<p>
const char: <b>EOF</b></p><dl><dd>
<p>
Character representing end-of-file.
EOF is not an Unicode character.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_char)._value"><h3>. value</h3></a>
<p>
const char: (attr char) <b>. value</b></p><dl><dd>
<p>
Default value of <i>char</i> (' ').
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_char)._first"><h3>. first</h3></a>
<p>
const char: (attr char) <b>. first</b></p><dl><dd>
<p>
Minimum value of <i>char</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_char)._last"><h3>. last</h3></a>
<p>
const char: (attr char) <b>. last</b></p><dl><dd>
<p>
Maximum value of an Unicode character.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_char)=(in_char)"><h3>=</h3></a>
<p>
const func boolean: (in char: ch1) <b>=</b> (in char: ch2)</p><dl><dd>
<p>
Check if two characters are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both characters are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_char)&lt;>(in_char)"><h3>&lt;></h3></a>
<p>
const func boolean: (in char: ch1) <b>&lt;></b> (in char: ch2)</p><dl><dd>
<p>
Check if two characters are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both characters are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_char)&lt;(in_char)"><h3>&lt;</h3></a>
<p>
const func boolean: (in char: ch1) <b>&lt;</b> (in char: ch2)</p><dl><dd>
<p>
Check if ch1 is less than ch2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if ch1 is less than than ch2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_char)>(in_char)"><h3>></h3></a>
<p>
const func boolean: (in char: ch1) <b>></b> (in char: ch2)</p><dl><dd>
<p>
Check if ch1 is greater than ch2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if ch1 is greater than ch2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_char)&lt;=(in_char)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in char: ch1) <b>&lt;=</b> (in char: ch2)</p><dl><dd>
<p>
Check if ch1 is less than or equal to ch2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if ch1 is less than or equal to ch2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_char)>=(in_char)"><h3>>=</h3></a>
<p>
const func boolean: (in char: ch1) <b>>=</b> (in char: ch2)</p><dl><dd>
<p>
Check if ch1 is greater than or equal to ch2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if ch1 is greater than or equal to ch2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_char)conv(in_integer)"><h3>conv</h3></a>
<p>
const func char: (attr char) <b>conv</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a character.
For values between 0 and 1114111 a Unicode character is returned.
For values between 1114112 and 1114500 a cursor or function key
is returned. For -1 the value EOF is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a character which corresponds to the given <a class="link" href="integer.htm" title="integer">integer</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the number does not fit into a 32-bit <i>char</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_char)parse(in_string)"><h3>parse</h3></a>
<p>
const func char: (attr char) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> with a length of 1 to a character.
</p>
<pre class="indent">
char parse "a"   returns 'a'
char parse " "   returns ' '
char parse "aa"  raises RANGE_ERROR
char parse "  "  raises RANGE_ERROR
char parse ""    raises RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the first character of the <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the length of the string is not 1.</dd>
</dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_char,in_char)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in char: ch1, in char: ch2)</p><dl><dd>
<p>
Compare two characters.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_char)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in char: ch)</p><dl><dd>
<p>
Compute the hash value of a character.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="ord(in_char)"><h3>ord</h3></a>
<p>
const func integer: <b>ord</b> (in char: ch)</p><dl><dd>
<p>
Get the ordinal number of a character.
For Unicode characters a value between 0 and 1114111 is returned.
For cursor and function keys a value between 1114112 and 1114500
is returned. For EOF the value -1 is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the ordinal number of a character.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_char)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in char: ch)</p><dl><dd>
<p>
Get the ordinal number of a character.
For Unicode characters a value between 0 and 1114111 is returned.
For cursor and function keys a value between 1114112 and 1114500
is returned. For EOF the value -1 is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the ordinal number of a character.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="chr(in_integer)"><h3>chr</h3></a>
<p>
const func char: <b>chr</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a character.
For values between 0 and 1114111 a Unicode character is returned.
For values between 1114112 and 1114500  a cursor or function key
is returned. For -1 the value EOF is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a character which corresponds to the given <a class="link" href="integer.htm" title="integer">integer</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the number does not fit into a 32-bit <i>char</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="char(in_integer)"><h3>char</h3></a>
<p>
const func char: <b>char</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a character.
For values between 0 and 1114111 a Unicode character is returned.
For values between 1114112 and 1114500 a cursor or function key
is returned. For -1 the value EOF is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a character which corresponds to the given <a class="link" href="integer.htm" title="integer">integer</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the number does not fit into a 32-bit <i>char</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="succ(in_char)"><h3>succ</h3></a>
<p>
const func char: <b>succ</b> (in char: ch)</p><dl><dd>
<p>
Successor of a character.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>chr(ord(ch) + 1)</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pred(in_char)"><h3>pred</h3></a>
<p>
const func char: <b>pred</b> (in char: ch)</p><dl><dd>
<p>
Predecessor of a character.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>chr(ord(ch) - 1)</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_char)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in char: ch)</p><dl><dd>
<p>
Create a string with one character.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string with the character <i>ch</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="upper(in_char)"><h3>upper</h3></a>
<p>
const func char: <b>upper</b> (in char: ch)</p><dl><dd>
<p>
Convert a character to upper case.
The conversion uses the default Unicode case mapping,
where each character is considered in isolation.
Characters without case mapping are left unchanged.
The mapping is independent from the locale. Individual
character case mappings cannot be reversed, because some
characters have multiple characters that map to them.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character converted to upper case.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="lower(in_char)"><h3>lower</h3></a>
<p>
const func char: <b>lower</b> (in char: ch)</p><dl><dd>
<p>
Convert a character to lower case.
The conversion uses the default Unicode case mapping,
where each character is considered in isolation.
Characters without case mapping are left unchanged.
The mapping is independent from the locale. Individual
character case mappings cannot be reversed, because some
characters have multiple characters that map to them.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character converted to lower case.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="isLetter(in_char)"><h3>isLetter</h3></a>
<p>
const func boolean: <b>isLetter</b> (in char: ch)</p><dl><dd>
<p>
Determines if the specified character <i>ch</i> is a letter.
A character is considered to be a letter if the category
from the Unicode specification is any of the following:
</p>
<ul>
<li> UPPERCASE_LETTER (Lu)</li>
<li> LOWERCASE_LETTER (Ll)</li>
<li> TITLECASE_LETTER (Lt)</li>
<li> MODIFIER_LETTER  (Lm)</li>
<li> OTHER_LETTER     (Lo)</li>
</ul>
<p>
Examples:
</p>
<pre class="indent">
isLetter('A')          returns TRUE
isLetter('\16#4e2d;')  returns TRUE
isLetter('4')          returns FALSE
isLetter('+')          returns FALSE
isLetter('\t')         returns FALSE
isLetter(KEY_LEFT)     returns FALSE
isLetter(EOF)          returns FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>ch</i> is a letter,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="width(in_char)"><h3>width</h3></a>
<p>
const func integer: <b>width</b> (in char: ch)</p><dl><dd>
<p>
Number of screen columns occupied by the Unicode character <i>ch</i>.
Non-spacing characters and control characters have width of 0.
</p>
<pre class="indent">
width('\n')         returns 0
width('\t')         returns 0
width(KEY_LEFT)     returns 0
width(EOF)          returns 0
width('A')          returns 1
width('\16#4e2d;')  returns 2
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>0,1 or 2 depending on the width occupied on a terminal.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="incr(inout_char)"><h3>incr</h3></a>
<p>
const proc: <b>incr</b> (inout char: ch)</p><dl><dd>
<p>
Increment a character.
This is equivalent to:
</p>
<pre class="indent">
ch := succ(ch);
</pre>
</dd>
</dl></div>
<hr />
<div><a name="decr(inout_char)"><h3>decr</h3></a>
<p>
const proc: <b>decr</b> (inout char: ch)</p><dl><dd>
<p>
Decrement a character.
This is equivalent to:
</p>
<pre class="indent">
ch := pred(ch);
</pre>
</dd>
</dl></div>
<hr />
<div><a name="rand(in_char,in_char)"><h3>rand</h3></a>
<p>
const func char: <b>rand</b> (in char: low, in char: high)</p><dl><dd>
<p>
Compute pseudo-random character in the range [low, high].
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random character such that low &lt;= rand(low, high) and         rand(low, high) &lt;= high holds.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The range is empty (low > high holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="char(in_string)"><h3>char</h3></a>
<p>
const func char: <b>char</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> with a length of 1 to a character.
</p>
<pre class="indent">
char("a")   returns 'a'
char(" ")   returns ' '
char("aa")  raises RANGE_ERROR
char("  ")  raises RANGE_ERROR
char("")    raises RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the first character of the <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the length of the string is not 1.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="trimValue(attr_char,in_string)"><h3>trimValue</h3></a>
<p>
const func string: <b>trimValue</b> (attr char, in string: stri)</p><dl><dd>
<p>
Trim a string such that it can be converted to <i>char</i>.
</p>
<pre class="indent">
trimValue(char, " 1 ")             returns "1"
trimValue(char, "   ")             returns " "
trimValue(char, "\t ")             returns "\t"
trimValue(char, "")                returns ""
char parse trimValue(char, " 1 ")  returns '1'
char parse trimValue(char, "   ")  returns ' '
char parse trimValue(char, "\t ")  returns '\t'
char parse trimValue(char, "")     raises RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the trimmed string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_char)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in char: ch)</p><dl><dd>
<p>
Conversion to a <i>char</i> literal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character literal of <i>ch</i>.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/cgidialog.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/charsets.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
