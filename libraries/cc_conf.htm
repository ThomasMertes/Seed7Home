<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: CC config</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>CC config</big></b></td>
<td align="right"><a class="link" href="../prg/cc_conf.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/category.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/ccittfax.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ccConfigType">ccConfigType</a></b></td></tr>
<tr><td width="30"></td><td>Structure to describe C compiler and runtime library.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="ccConfigType"><h3>ccConfigType</h3></a>
<p>
const type: <b>ccConfigType</b></p><dl><dd>
<p>
Structure to describe C compiler and runtime library.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Constant Summary</td></tr>
<tr><td align="right" valign="top">ccConfigType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ccConf">ccConf</a></b></td></tr>
<tr><td width="30"></td><td>Structure with configuration values for C compiler and runtime.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Variable Summary</td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#WITH_STRI_CAPACITY">WITH_STRI_CAPACITY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the Seed7 runtime library uses strings with capacity.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ALLOW_STRITYPE_SLICES">ALLOW_STRITYPE_SLICES</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the actual characters of a string can be stored elsewhere.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ALLOW_BSTRITYPE_SLICES">ALLOW_BSTRITYPE_SLICES</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the actual characters of a bstring can be stored elsewhere.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#RSHIFT_DOES_SIGN_EXTEND">RSHIFT_DOES_SIGN_EXTEND</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if right shifts preserve the sign of negative signed integers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#TWOS_COMPLEMENT_INTTYPE">TWOS_COMPLEMENT_INTTYPE</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if signed integers are represented as twos complement numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LITTLE_ENDIAN_INTTYPE">LITTLE_ENDIAN_INTTYPE</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the byte ordering of integers is little endian.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FLOAT_COMPARISON_OKAY">FLOAT_COMPARISON_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if float comparisons with NaN and negative zero work okay.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#POW_FUNCTION_OKAY">POW_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if pow() works okay for a base of zero, one and NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FMOD_FUNCTION_OKAY">FMOD_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if fmod() works okay for Infinity, NaN and zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SQRT_FUNCTION_OKAY">SQRT_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if sqrt() works okay for a negative argument and NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#EXP_FUNCTION_OKAY">EXP_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if exp() works okay for NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LOG_FUNCTION_OKAY">LOG_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if log() works okay for zero, negative values and NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LOG10_FUNCTION_OKAY">LOG10_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if log10() works okay for zero, negative values and NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LOG1P_FUNCTION_OKAY">LOG1P_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if log1p() works okay for -1.0, values &lt; -1.0 and NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LOG2_FUNCTION_OKAY">LOG2_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if log2() works okay for zero, negative values and NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LDEXP_FUNCTION_OKAY">LDEXP_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if ldexp() works okay for NaN.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FREXP_FUNCTION_OKAY">FREXP_FUNCTION_OKAY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if frexp() works okay for Infinity, NaN and subnormal numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#HAS_SIGSETJMP">HAS_SIGSETJMP</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the functions sigsetjmp() and siglongjmp() are available.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CHECK_INT_DIV_BY_ZERO">CHECK_INT_DIV_BY_ZERO</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if integer divisions must be checked for a division by zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CHECK_INT_DIV_ZERO_BY_ZERO">CHECK_INT_DIV_ZERO_BY_ZERO</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C expression 0/0 might not trigger SIGFPE.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CHECK_INT_REM_BY_ZERO">CHECK_INT_REM_BY_ZERO</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if integer remainder must be checked for a division by zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CHECK_INT_REM_ZERO_BY_ZERO">CHECK_INT_REM_ZERO_BY_ZERO</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C expression 0%0 might not trigger SIGFPE.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FLOAT_ZERO_DIV_ERROR">FLOAT_ZERO_DIV_ERROR</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if floating point divisions by zero cause compilation errors.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CHECK_FLOAT_DIV_BY_ZERO">CHECK_FLOAT_DIV_BY_ZERO</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if floating point divisions by zero don't conform to IEEE 754.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#HAS_EXP2">HAS_EXP2</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C function exp2() is present.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#HAS_EXP10">HAS_EXP10</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C function exp10() is present.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#HAS_EXPM1">HAS_EXPM1</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C function expm1() is present.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#HAS_CBRT">HAS_CBRT</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C function cbrt() is present.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LIMITED_CSTRI_LITERAL_LEN">LIMITED_CSTRI_LITERAL_LEN</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the C compiler limits the length of string literals.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SWITCH_WORKS_FOR_INT64TYPE">SWITCH_WORKS_FOR_INT64TYPE</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if switch statements work with 64-bit values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#STMT_BLOCK_IN_PARENTHESES_OK">STMT_BLOCK_IN_PARENTHESES_OK</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if a compound statement is allowed in a parentesized expression.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_SOURCE_UTF8">CC_SOURCE_UTF8</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if #line directives can use UTF-8 encoded file names.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#USE_WMAIN">USE_WMAIN</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the main function is named wmain.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#USE_WINMAIN">USE_WINMAIN</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the main function is named WinMain.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FLOATTYPE_DOUBLE">FLOATTYPE_DOUBLE</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if the type <i>floatType</i> is <i>double</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INTTYPE_SIZE">INTTYPE_SIZE</a></b></td></tr>
<tr><td width="30"></td><td>Size of the type <i>intType</i> in bits (either 32 or 64).</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FLOATTYPE_SIZE">FLOATTYPE_SIZE</a></b></td></tr>
<tr><td width="30"></td><td>Size of the type <i>floatType</i> in bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#POINTER_SIZE">POINTER_SIZE</a></b></td></tr>
<tr><td width="30"></td><td>Size of a pointer in bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#GENERIC_SIZE">GENERIC_SIZE</a></b></td></tr>
<tr><td width="30"></td><td>The maximum of INTTYPE_SIZE, FLOATTYPE_SIZE and POINTER_SIZE.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT_SIZE">INT_SIZE</a></b></td></tr>
<tr><td width="30"></td><td>Size of the type <i>int</i> in bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT_MIN">INT_MIN</a></b></td></tr>
<tr><td width="30"></td><td>Minimum value of the type <i>int</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT_MAX">INT_MAX</a></b></td></tr>
<tr><td width="30"></td><td>Maximum value of the type <i>int</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LONG_SIZE">LONG_SIZE</a></b></td></tr>
<tr><td width="30"></td><td>Size of the type <i>long</i> in bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FLOATTYPE_MANTISSA_BITS">FLOATTYPE_MANTISSA_BITS</a></b></td></tr>
<tr><td width="30"></td><td>Number of mantissa bits in the binary <i>floatType</i> representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#FLOATTYPE_EXPONENT_OFFSET">FLOATTYPE_EXPONENT_OFFSET</a></b></td></tr>
<tr><td width="30"></td><td>Exponent offset in the binary <i>floatType</i> representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT_RANGE_IN_FLOATTYPE_MAX">INT_RANGE_IN_FLOATTYPE_MAX</a></b></td></tr>
<tr><td width="30"></td><td>Maximum from the continuous range of integers that map to floats.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#MINIMUM_TRUNC_ARGUMENT">MINIMUM_TRUNC_ARGUMENT</a></b></td></tr>
<tr><td width="30"></td><td>Minimum value that trunc() or round() can convert.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#MAXIMUM_TRUNC_ARGUMENT">MAXIMUM_TRUNC_ARGUMENT</a></b></td></tr>
<tr><td width="30"></td><td>Maximum value that trunc() or round() can convert.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#PIXEL_RED_MASK">PIXEL_RED_MASK</a></b></td></tr>
<tr><td width="30"></td><td>Mask for the red color in a pixel.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#PIXEL_GREEN_MASK">PIXEL_GREEN_MASK</a></b></td></tr>
<tr><td width="30"></td><td>Mask for the green color in a pixel.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#PIXEL_BLUE_MASK">PIXEL_BLUE_MASK</a></b></td></tr>
<tr><td width="30"></td><td>Mask for the blue color in a pixel.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#RGB_TO_PIXEL_FLAG_NAME">RGB_TO_PIXEL_FLAG_NAME</a></b></td></tr>
<tr><td width="30"></td><td>Name of the variable deciding between macro and drwRgbColor().</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#RAND_MULTIPLIER">RAND_MULTIPLIER</a></b></td></tr>
<tr><td width="30"></td><td>Multiplier for the linear congruential generator.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#RAND_INCREMENT">RAND_INCREMENT</a></b></td></tr>
<tr><td width="30"></td><td>Increment for the linear congruential generator.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#BOOLTYPE">BOOLTYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of a type for the boolean values 0 and 1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT32TYPE">INT32TYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of a signed integer type that is 32 bits wide.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#UINT32TYPE">UINT32TYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of an unsigned integer type that is 32 bits wide.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT64TYPE">INT64TYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of a signed integer type that is 64 bits wide.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#UINT64TYPE">UINT64TYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of an unsigned integer type that is 64 bits wide.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT128TYPE">INT128TYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of a signed integer type that is 128 bits wide.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#UINT128TYPE">UINT128TYPE</a></b></td></tr>
<tr><td width="30"></td><td>Name of an unsigned integer type that is 128 bits wide.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT32TYPE_LITERAL_SUFFIX">INT32TYPE_LITERAL_SUFFIX</a></b></td></tr>
<tr><td width="30"></td><td>The suffix used by the literals of the 32 bits wide integer type.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT64TYPE_LITERAL_SUFFIX">INT64TYPE_LITERAL_SUFFIX</a></b></td></tr>
<tr><td width="30"></td><td>The suffix used by the literals of the 64 bits wide integer type.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#MACRO_DEFS">MACRO_DEFS</a></b></td></tr>
<tr><td width="30"></td><td>Definition of several macros (likely, unlikely, noreturn).</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#OVERFLOW_SIGNAL">OVERFLOW_SIGNAL</a></b></td></tr>
<tr><td width="30"></td><td>Name of the signal that is raised if a signed integer overflow</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#BUILTIN_ADD_OVERFLOW">BUILTIN_ADD_OVERFLOW</a></b></td></tr>
<tr><td width="30"></td><td>Name of a C compiler builtin function to add with overflow check.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#BUILTIN_SUB_OVERFLOW">BUILTIN_SUB_OVERFLOW</a></b></td></tr>
<tr><td width="30"></td><td>Name of a C compiler builtin function to subtract with overflow check.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#BUILTIN_MULT_OVERFLOW">BUILTIN_MULT_OVERFLOW</a></b></td></tr>
<tr><td width="30"></td><td>Name of a C compiler builtin function to multiply with overflow check.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT_DIV_OVERFLOW">INT_DIV_OVERFLOW</a></b></td></tr>
<tr><td width="30"></td><td>Defines what happens in case of an integer division overflow.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INT_REM_OVERFLOW">INT_REM_OVERFLOW</a></b></td></tr>
<tr><td width="30"></td><td>Defines what happens in case of an integer remainder overflow.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#OBJECT_FILE_EXTENSION">OBJECT_FILE_EXTENSION</a></b></td></tr>
<tr><td width="30"></td><td>The extension used by the C compiler for object files.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LIBRARY_FILE_EXTENSION">LIBRARY_FILE_EXTENSION</a></b></td></tr>
<tr><td width="30"></td><td>The extension used by the linker for static libraries.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#EXECUTABLE_FILE_EXTENSION">EXECUTABLE_FILE_EXTENSION</a></b></td></tr>
<tr><td width="30"></td><td>The extension used by the operating system for executables.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKED_PROGRAM_EXTENSION">LINKED_PROGRAM_EXTENSION</a></b></td></tr>
<tr><td width="30"></td><td>The extension of the file produced by linking a program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_ENVIRONMENT_INI">CC_ENVIRONMENT_INI</a></b></td></tr>
<tr><td width="30"></td><td>Path to an INI file with the environment for the C compiler.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#C_COMPILER">C_COMPILER</a></b></td></tr>
<tr><td width="30"></td><td>Command to call the stand-alone C compiler and linker.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CALL_C_COMPILER_FROM_SHELL">CALL_C_COMPILER_FROM_SHELL</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if C compiler and linker must be called via the shell.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_DEBUG_INFO">CC_OPT_DEBUG_INFO</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to add source level debugging information.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_LINK_TIME_OPTIMIZATION">CC_OPT_LINK_TIME_OPTIMIZATION</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to do link time optimization.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_NO_WARNINGS">CC_OPT_NO_WARNINGS</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to suppress all warnings.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_OPTIMIZE_1">CC_OPT_OPTIMIZE_1</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to optimize with a level of -O1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_OPTIMIZE_2">CC_OPT_OPTIMIZE_2</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to optimize with a level of -O2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_OPTIMIZE_3">CC_OPT_OPTIMIZE_3</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to optimize with a level of -O3.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_TRAP_OVERFLOW">CC_OPT_TRAP_OVERFLOW</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to generate traps for signed integer overflow.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_OPT_VERSION_INFO">CC_OPT_VERSION_INFO</a></b></td></tr>
<tr><td width="30"></td><td>C compiler option to write the C compiler version information.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_FLAGS">CC_FLAGS</a></b></td></tr>
<tr><td width="30"></td><td>C compiler flags to be used if C programs are compiled.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_ERROR_FILEDES">CC_ERROR_FILEDES</a></b></td></tr>
<tr><td width="30"></td><td>File descriptor to which the C compiler writes errors.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CC_VERSION_INFO_FILEDES">CC_VERSION_INFO_FILEDES</a></b></td></tr>
<tr><td width="30"></td><td>File descriptor to which the C compiler writes its version info.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKER_OPT_DEBUG_INFO">LINKER_OPT_DEBUG_INFO</a></b></td></tr>
<tr><td width="30"></td><td>Linker option to add source level debugging information.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKER_OPT_LTO_MANDATORY">LINKER_OPT_LTO_MANDATORY</a></b></td></tr>
<tr><td width="30"></td><td>TRUE if linking always requires the option</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKER_OPT_NO_DEBUG_INFO">LINKER_OPT_NO_DEBUG_INFO</a></b></td></tr>
<tr><td width="30"></td><td>Linker option to be used without source level debugging.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKER_OPT_OUTPUT_FILE">LINKER_OPT_OUTPUT_FILE</a></b></td></tr>
<tr><td width="30"></td><td>Linker option to provide the output filename (e.g.: "-o ").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKER_OPT_SPECIAL_LIB">LINKER_OPT_SPECIAL_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Linker option that needs to precede the special library.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#LINKER_FLAGS">LINKER_FLAGS</a></b></td></tr>
<tr><td width="30"></td><td>Standard linker options to link a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SYSTEM_LIBS">SYSTEM_LIBS</a></b></td></tr>
<tr><td width="30"></td><td>Options to link system libraries to a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SYSTEM_BIGINT_LIBS">SYSTEM_BIGINT_LIBS</a></b></td></tr>
<tr><td width="30"></td><td>Options to link system bigint libraries to a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SYSTEM_CONSOLE_LIBS">SYSTEM_CONSOLE_LIBS</a></b></td></tr>
<tr><td width="30"></td><td>Options to link system console libraries to a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SYSTEM_DATABASE_LIBS">SYSTEM_DATABASE_LIBS</a></b></td></tr>
<tr><td width="30"></td><td>Options to link system database ibraries to a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SYSTEM_DRAW_LIBS">SYSTEM_DRAW_LIBS</a></b></td></tr>
<tr><td width="30"></td><td>Options to link system graphic libraries to a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SYSTEM_MATH_LIBS">SYSTEM_MATH_LIBS</a></b></td></tr>
<tr><td width="30"></td><td>Options to link system mathematic libraries to a compiled program.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SEED7_LIB">SEED7_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the Seed7 runtime library (e.g.: "seed7_05.a").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#DRAW_LIB">DRAW_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the Seed7 graphic runtime library (e.g.: "s7_draw.a").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CONSOLE_LIB">CONSOLE_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the Seed7 text console runtime library (e.g.: "s7_con.a").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#DATABASE_LIB">DATABASE_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the Seed7 database runtime library (e.g.: "s7_db.a").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#COMP_DATA_LIB">COMP_DATA_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the Seed7 compiler data runtime library (e.g.: "s7_data.a").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#COMPILER_LIB">COMPILER_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the Seed7 compiler runtime library (e.g.: "s7_comp.a").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#SPECIAL_LIB">SPECIAL_LIB</a></b></td></tr>
<tr><td width="30"></td><td>Name of the special library (e.g.: "pre_js.js").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#S7_LIB_DIR">S7_LIB_DIR</a></b></td></tr>
<tr><td width="30"></td><td>Directory containing the Seed7 runtime libraries.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#VERSION_REVISION_LEVEL">VERSION_REVISION_LEVEL</a></b></td></tr>
<tr><td width="30"></td><td>The current version revision level of interpreter and compiler.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#REDIRECT_FILEDES_1">REDIRECT_FILEDES_1</a></b></td></tr>
<tr><td width="30"></td><td>Shell parameter to redirect to the file descriptor 1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#REDIRECT_FILEDES_2">REDIRECT_FILEDES_2</a></b></td></tr>
<tr><td width="30"></td><td>Shell parameter to redirect to the file descriptor 2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#NULL_DEVICE">NULL_DEVICE</a></b></td></tr>
<tr><td width="30"></td><td>Name of the NULL device to be used in shell command redirections.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#INTTYPE_LITERAL_SUFFIX">INTTYPE_LITERAL_SUFFIX</a></b></td></tr>
<tr><td width="30"></td><td>The suffix used by the literals of the type <i>intType</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">ccConfigType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBuiltInConfig">getBuiltInConfig</a></b></td></tr>
<tr><td width="30"></td><td>Determine the built-in (hard-coded) C compiler configuration values.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Constant Detail</td></tr></table></p>
<div><a name="ccConf"><h3>ccConf</h3></a>
<p>
const ccConfigType: <b>ccConf</b></p><dl><dd>
<p>
Structure with configuration values for C compiler and runtime.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Variable Detail</td></tr></table></p>
<div><a name="WITH_STRI_CAPACITY"><h3>WITH_STRI_CAPACITY</h3></a>
<p>
var boolean: <b>WITH_STRI_CAPACITY</b></p><dl><dd>
<p>
TRUE if the Seed7 runtime library uses strings with capacity.
The capacity of a string can be larger than its size.
Strings with capacity can be enlarged without calling realloc().
</p>
</dd>
</dl></div>
<hr />
<div><a name="ALLOW_STRITYPE_SLICES"><h3>ALLOW_STRITYPE_SLICES</h3></a>
<p>
var boolean: <b>ALLOW_STRITYPE_SLICES</b></p><dl><dd>
<p>
TRUE if the actual characters of a string can be stored elsewhere.
This allows string slices without the need to copy characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ALLOW_BSTRITYPE_SLICES"><h3>ALLOW_BSTRITYPE_SLICES</h3></a>
<p>
var boolean: <b>ALLOW_BSTRITYPE_SLICES</b></p><dl><dd>
<p>
TRUE if the actual characters of a bstring can be stored elsewhere.
This allows bstring slices without the need to copy characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="RSHIFT_DOES_SIGN_EXTEND"><h3>RSHIFT_DOES_SIGN_EXTEND</h3></a>
<p>
var boolean: <b>RSHIFT_DOES_SIGN_EXTEND</b></p><dl><dd>
<p>
TRUE if right shifts preserve the sign of negative signed integers.
The C standard specifies that the right shift of signed integers is
implementation defined, if the shifted values are negative.
</p>
</dd>
</dl></div>
<hr />
<div><a name="TWOS_COMPLEMENT_INTTYPE"><h3>TWOS_COMPLEMENT_INTTYPE</h3></a>
<p>
var boolean: <b>TWOS_COMPLEMENT_INTTYPE</b></p><dl><dd>
<p>
TRUE if signed integers are represented as twos complement numbers.
This allows some simplified range checks in compiled programs.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LITTLE_ENDIAN_INTTYPE"><h3>LITTLE_ENDIAN_INTTYPE</h3></a>
<p>
var boolean: <b>LITTLE_ENDIAN_INTTYPE</b></p><dl><dd>
<p>
TRUE if the byte ordering of integers is little endian.
With little endian byte ordering it is possible to get the elements
of a union by casting the union to the desired element type.
</p>
</dd>
</dl></div>
<hr />
<div><a name="FLOAT_COMPARISON_OKAY"><h3>FLOAT_COMPARISON_OKAY</h3></a>
<p>
var boolean: <b>FLOAT_COMPARISON_OKAY</b></p><dl><dd>
<p>
TRUE if float comparisons with NaN and negative zero work okay.
A comparison between NaN and any other value should return FALSE.
Negative zero should be considered as identical to positive zero.
Comparison refers to comparisons with  ==  &lt;  >  &lt;=  or  >= .
If FLOAT_COMPARISON_OKAY is FALSE fltEq(), fltLt(), fltGt(), fltLe()
and fltGe() should be used to do comparisons of float values.
</p>
</dd>
</dl></div>
<hr />
<div><a name="POW_FUNCTION_OKAY"><h3>POW_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>POW_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if pow() works okay for a base of zero, one and NaN.
If it is FALSE fltPow() should be used instead of pow().
</p>
</dd>
</dl></div>
<hr />
<div><a name="FMOD_FUNCTION_OKAY"><h3>FMOD_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>FMOD_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if fmod() works okay for Infinity, NaN and zero.
If it is FALSE fltRem() should be used instead of fmod().
</p>
</dd>
</dl></div>
<hr />
<div><a name="SQRT_FUNCTION_OKAY"><h3>SQRT_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>SQRT_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if sqrt() works okay for a negative argument and NaN.
If it is FALSE fltSqrt() should be used instead of sqrt().
</p>
</dd>
</dl></div>
<hr />
<div><a name="EXP_FUNCTION_OKAY"><h3>EXP_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>EXP_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if exp() works okay for NaN.
If it is FALSE fltExp() should be used instead of exp().
</p>
</dd>
</dl></div>
<hr />
<div><a name="LOG_FUNCTION_OKAY"><h3>LOG_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>LOG_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if log() works okay for zero, negative values and NaN.
If it is FALSE fltLog() should be used instead of log().
</p>
</dd>
</dl></div>
<hr />
<div><a name="LOG10_FUNCTION_OKAY"><h3>LOG10_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>LOG10_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if log10() works okay for zero, negative values and NaN.
If it is FALSE fltLog10() should be used instead of log10().
</p>
</dd>
</dl></div>
<hr />
<div><a name="LOG1P_FUNCTION_OKAY"><h3>LOG1P_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>LOG1P_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if log1p() works okay for -1.0, values &lt; -1.0 and NaN.
If it is FALSE fltLog1p() should be used instead of log1p().
</p>
</dd>
</dl></div>
<hr />
<div><a name="LOG2_FUNCTION_OKAY"><h3>LOG2_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>LOG2_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if log2() works okay for zero, negative values and NaN.
If it is FALSE fltLog2() should be used instead of log2().
</p>
</dd>
</dl></div>
<hr />
<div><a name="LDEXP_FUNCTION_OKAY"><h3>LDEXP_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>LDEXP_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if ldexp() works okay for NaN.
If it is FALSE fltLdexp() should be used instead of lsexp().
</p>
</dd>
</dl></div>
<hr />
<div><a name="FREXP_FUNCTION_OKAY"><h3>FREXP_FUNCTION_OKAY</h3></a>
<p>
var boolean: <b>FREXP_FUNCTION_OKAY</b></p><dl><dd>
<p>
TRUE if frexp() works okay for Infinity, NaN and subnormal numbers.
If it is FALSE fltDecompose() should be used instead of frexp().
</p>
</dd>
</dl></div>
<hr />
<div><a name="HAS_SIGSETJMP"><h3>HAS_SIGSETJMP</h3></a>
<p>
var boolean: <b>HAS_SIGSETJMP</b></p><dl><dd>
<p>
TRUE if the functions sigsetjmp() and siglongjmp() are available.
If it is FALSE the functions setjmp() and longjmp() must
be used instead.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CHECK_INT_DIV_BY_ZERO"><h3>CHECK_INT_DIV_BY_ZERO</h3></a>
<p>
var boolean: <b>CHECK_INT_DIV_BY_ZERO</b></p><dl><dd>
<p>
TRUE if integer divisions must be checked for a division by zero.
This applies to the division operations div and mdiv.
The generated C code should, if a division by zero occurs,
raise the exception NUMERIC_ERROR instead of doing the
illegal divide operation. If CHECK_INT_DIV_BY_ZERO is FALSE
a division by zero always triggers SIGFPE. SIGFPE is caught
by the Seed7 run-time library and triggers a NUMERIC_ERROR.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CHECK_INT_DIV_ZERO_BY_ZERO"><h3>CHECK_INT_DIV_ZERO_BY_ZERO</h3></a>
<p>
var boolean: <b>CHECK_INT_DIV_ZERO_BY_ZERO</b></p><dl><dd>
<p>
TRUE if the C expression 0/0 might not trigger SIGFPE.
C compilers assume that so called "undefined behavior" will
not happen. According to the C standard a division by 0
triggers undefined behavior. This way a C compiler is allowed
to optimize the expressions 0/0 and 0/variable to 0. Likewise
the expression variable/variable can be optimized to 1.
In Seed7 a division by zero is defined behavior, since it
raises the exception NUMERIC_ERROR. This configuration
setting applies to the division operations div and mdiv.
The generated C code should, if a division by zero occurs,
raise the exception NUMERIC_ERROR instead of allowing the
C compiler to do its optimization.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CHECK_INT_REM_BY_ZERO"><h3>CHECK_INT_REM_BY_ZERO</h3></a>
<p>
var boolean: <b>CHECK_INT_REM_BY_ZERO</b></p><dl><dd>
<p>
TRUE if integer remainder must be checked for a division by zero.
This applies to the division operations rem and mod.
The generated C code should, if a remainder by zero occurs,
raise the exception NUMERIC_ERROR instead of doing the
illegal divide operation. If CHECK_INT_REM_BY_ZERO is FALSE
a remainder by zero always triggers SIGFPE. SIGFPE is caught
by the Seed7 run-time library and triggers a NUMERIC_ERROR.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CHECK_INT_REM_ZERO_BY_ZERO"><h3>CHECK_INT_REM_ZERO_BY_ZERO</h3></a>
<p>
var boolean: <b>CHECK_INT_REM_ZERO_BY_ZERO</b></p><dl><dd>
<p>
TRUE if the C expression 0%0 might not trigger SIGFPE.
C compilers assume that so called "undefined behavior" will
not happen. According to the C standard a division by 0
triggers undefined behavior. This way a C compiler is allowed
to optimize the expressions 0%0 and 0%variable to 0. Likewise
the expression variable%variable can be optimized to 0.
In Seed7 a division by zero is defined behavior, since it
raises the exception NUMERIC_ERROR. This configuration
setting applies to the division operations rem and mod.
The generated C code should, if a division by zero occurs,
raise the exception NUMERIC_ERROR instead of allowing the
C compiler to do its optimization.
</p>
</dd>
</dl></div>
<hr />
<div><a name="FLOAT_ZERO_DIV_ERROR"><h3>FLOAT_ZERO_DIV_ERROR</h3></a>
<p>
var boolean: <b>FLOAT_ZERO_DIV_ERROR</b></p><dl><dd>
<p>
TRUE if floating point divisions by zero cause compilation errors.
Some C compilers check if the dividend is 0.0 and classify a
floating point division by zero as fatal compilation error.
Some C compilers even trigger wrong behavior if the dividend
is 0.0. In this case FLOAT_ZERO_DIV_ERROR is also TRUE.
If FLOAT_ZERO_DIV_ERROR is TRUE the generated C code should
avoid divisions by zero and generate code to return Infinity,
-Infinity or NaN instead.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CHECK_FLOAT_DIV_BY_ZERO"><h3>CHECK_FLOAT_DIV_BY_ZERO</h3></a>
<p>
var boolean: <b>CHECK_FLOAT_DIV_BY_ZERO</b></p><dl><dd>
<p>
TRUE if floating point divisions by zero don't conform to IEEE 754.
According to IEEE 754 a floating point division by zero should
return Infinity, -Infinity or NaN. In this case the compiler
generates C code, which checks all float divisions ( / and /:= )
for division by zero. The generated C code should return
Infinity, -Infinity or NaN instead of doing the divide operation.
</p>
</dd>
</dl></div>
<hr />
<div><a name="HAS_EXP2"><h3>HAS_EXP2</h3></a>
<p>
var boolean: <b>HAS_EXP2</b></p><dl><dd>
<p>
TRUE if the C function exp2() is present.
</p>
</dd>
</dl></div>
<hr />
<div><a name="HAS_EXP10"><h3>HAS_EXP10</h3></a>
<p>
var boolean: <b>HAS_EXP10</b></p><dl><dd>
<p>
TRUE if the C function exp10() is present.
</p>
</dd>
</dl></div>
<hr />
<div><a name="HAS_EXPM1"><h3>HAS_EXPM1</h3></a>
<p>
var boolean: <b>HAS_EXPM1</b></p><dl><dd>
<p>
TRUE if the C function expm1() is present.
</p>
</dd>
</dl></div>
<hr />
<div><a name="HAS_CBRT"><h3>HAS_CBRT</h3></a>
<p>
var boolean: <b>HAS_CBRT</b></p><dl><dd>
<p>
TRUE if the C function cbrt() is present.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LIMITED_CSTRI_LITERAL_LEN"><h3>LIMITED_CSTRI_LITERAL_LEN</h3></a>
<p>
var boolean: <b>LIMITED_CSTRI_LITERAL_LEN</b></p><dl><dd>
<p>
TRUE if the C compiler limits the length of string literals.
Some C compilers limit the maximum string literal length.
There are limits of 2,048 bytes and 16,384 (16K) bytes.
The actual limit is not interesting, but the fact that a
limit exists or does not exist.
</p>
</dd>
</dl></div>
<hr />
<div><a name="SWITCH_WORKS_FOR_INT64TYPE"><h3>SWITCH_WORKS_FOR_INT64TYPE</h3></a>
<p>
var boolean: <b>SWITCH_WORKS_FOR_INT64TYPE</b></p><dl><dd>
<p>
TRUE if switch statements work with 64-bit values.
If it is FALSE a switch statement with a 64-bit value
triggers a compile error.
</p>
</dd>
</dl></div>
<hr />
<div><a name="STMT_BLOCK_IN_PARENTHESES_OK"><h3>STMT_BLOCK_IN_PARENTHESES_OK</h3></a>
<p>
var boolean: <b>STMT_BLOCK_IN_PARENTHESES_OK</b></p><dl><dd>
<p>
TRUE if a compound statement is allowed in a parentesized expression.
If it is FALSE a compound statement block in a parentesized expression
triggers a compile error.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_SOURCE_UTF8"><h3>CC_SOURCE_UTF8</h3></a>
<p>
var boolean: <b>CC_SOURCE_UTF8</b></p><dl><dd>
<p>
TRUE if #line directives can use UTF-8 encoded file names.
The file names from #line directives are used by the debugger to
allow source code debugging.
</p>
</dd>
</dl></div>
<hr />
<div><a name="USE_WMAIN"><h3>USE_WMAIN</h3></a>
<p>
var boolean: <b>USE_WMAIN</b></p><dl><dd>
<p>
TRUE if the main function is named wmain.
This is a way to support Unicode command line arguments under Windows.
An alternate way to support Unicode command line arguments under
Windows uses the functions getUtf16Argv() and freeUtf16Argv() (both
defined in "cmd_win.c").
</p>
</dd>
</dl></div>
<hr />
<div><a name="USE_WINMAIN"><h3>USE_WINMAIN</h3></a>
<p>
var boolean: <b>USE_WINMAIN</b></p><dl><dd>
<p>
TRUE if the main function is named WinMain.
</p>
</dd>
</dl></div>
<hr />
<div><a name="FLOATTYPE_DOUBLE"><h3>FLOATTYPE_DOUBLE</h3></a>
<p>
var boolean: <b>FLOATTYPE_DOUBLE</b></p><dl><dd>
<p>
TRUE if the type <i>floatType</i> is <i>double</i>.
If it is FALSE <i>floatType</i> is <i>float</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INTTYPE_SIZE"><h3>INTTYPE_SIZE</h3></a>
<p>
var integer: <b>INTTYPE_SIZE</b></p><dl><dd>
<p>
Size of the type <i>intType</i> in bits (either 32 or 64).
A typedef can define <i>intType</i> as <i>int32Type</i> respectively
<i>int64Type</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="FLOATTYPE_SIZE"><h3>FLOATTYPE_SIZE</h3></a>
<p>
var integer: <b>FLOATTYPE_SIZE</b></p><dl><dd>
<p>
Size of the type <i>floatType</i> in bits.
</p>
</dd>
</dl></div>
<hr />
<div><a name="POINTER_SIZE"><h3>POINTER_SIZE</h3></a>
<p>
var integer: <b>POINTER_SIZE</b></p><dl><dd>
<p>
Size of a pointer in bits.
</p>
</dd>
</dl></div>
<hr />
<div><a name="GENERIC_SIZE"><h3>GENERIC_SIZE</h3></a>
<p>
var integer: <b>GENERIC_SIZE</b></p><dl><dd>
<p>
The maximum of INTTYPE_SIZE, FLOATTYPE_SIZE and POINTER_SIZE.
This is also the size in bits of the types <i>rtlValueUnion</i>,
<i>rtlObjectType</i> and <i>genericType</i> (defined in data_rtl.h).
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT_SIZE"><h3>INT_SIZE</h3></a>
<p>
var integer: <b>INT_SIZE</b></p><dl><dd>
<p>
Size of the type <i>int</i> in bits.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT_MIN"><h3>INT_MIN</h3></a>
<p>
var integer: <b>INT_MIN</b></p><dl><dd>
<p>
Minimum value of the type <i>int</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT_MAX"><h3>INT_MAX</h3></a>
<p>
var integer: <b>INT_MAX</b></p><dl><dd>
<p>
Maximum value of the type <i>int</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LONG_SIZE"><h3>LONG_SIZE</h3></a>
<p>
var integer: <b>LONG_SIZE</b></p><dl><dd>
<p>
Size of the type <i>long</i> in bits.
</p>
</dd>
</dl></div>
<hr />
<div><a name="FLOATTYPE_MANTISSA_BITS"><h3>FLOATTYPE_MANTISSA_BITS</h3></a>
<p>
var integer: <b>FLOATTYPE_MANTISSA_BITS</b></p><dl><dd>
<p>
Number of mantissa bits in the binary <i>floatType</i> representation.
</p>
</dd>
</dl></div>
<hr />
<div><a name="FLOATTYPE_EXPONENT_OFFSET"><h3>FLOATTYPE_EXPONENT_OFFSET</h3></a>
<p>
var integer: <b>FLOATTYPE_EXPONENT_OFFSET</b></p><dl><dd>
<p>
Exponent offset in the binary <i>floatType</i> representation.
To get the actual exponent the offset must be subtracted.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT_RANGE_IN_FLOATTYPE_MAX"><h3>INT_RANGE_IN_FLOATTYPE_MAX</h3></a>
<p>
var integer: <b>INT_RANGE_IN_FLOATTYPE_MAX</b></p><dl><dd>
<p>
Maximum from the continuous range of integers that map to floats.
All integers from -INT_RANGE_IN_FLOATTYPE_MAX to
INT_RANGE_IN_FLOATTYPE_MAX can be converted to <i>floatType</i>
and back to <i>intType</i> without loss.
</p>
</dd>
</dl></div>
<hr />
<div><a name="MINIMUM_TRUNC_ARGUMENT"><h3>MINIMUM_TRUNC_ARGUMENT</h3></a>
<p>
var integer: <b>MINIMUM_TRUNC_ARGUMENT</b></p><dl><dd>
<p>
Minimum value that trunc() or round() can convert.
Values below MINIMUM_TRUNC_ARGUMENT raise RANGE_ERROR,
if trunc() or round() is applied to them.
</p>
</dd>
</dl></div>
<hr />
<div><a name="MAXIMUM_TRUNC_ARGUMENT"><h3>MAXIMUM_TRUNC_ARGUMENT</h3></a>
<p>
var integer: <b>MAXIMUM_TRUNC_ARGUMENT</b></p><dl><dd>
<p>
Maximum value that trunc() or round() can convert.
Values above MAXIMUM_TRUNC_ARGUMENT raise RANGE_ERROR,
if trunc() or round() is applied to them.
</p>
</dd>
</dl></div>
<hr />
<div><a name="PIXEL_RED_MASK"><h3>PIXEL_RED_MASK</h3></a>
<p>
var integer: <b>PIXEL_RED_MASK</b></p><dl><dd>
<p>
Mask for the red color in a pixel.
0 if there is no mapping and drwRgbColor() should be used.
</p>
</dd>
</dl></div>
<hr />
<div><a name="PIXEL_GREEN_MASK"><h3>PIXEL_GREEN_MASK</h3></a>
<p>
var integer: <b>PIXEL_GREEN_MASK</b></p><dl><dd>
<p>
Mask for the green color in a pixel.
0 if there is no mapping and drwRgbColor() should be used.
</p>
</dd>
</dl></div>
<hr />
<div><a name="PIXEL_BLUE_MASK"><h3>PIXEL_BLUE_MASK</h3></a>
<p>
var integer: <b>PIXEL_BLUE_MASK</b></p><dl><dd>
<p>
Mask for the blue color in a pixel.
0 if there is no mapping and drwRgbColor() should be used.
</p>
</dd>
</dl></div>
<hr />
<div><a name="RGB_TO_PIXEL_FLAG_NAME"><h3>RGB_TO_PIXEL_FLAG_NAME</h3></a>
<p>
var string: <b>RGB_TO_PIXEL_FLAG_NAME</b></p><dl><dd>
<p>
Name of the variable deciding between macro and drwRgbColor().
"" if no variable needs to be checked.
</p>
</dd>
</dl></div>
<hr />
<div><a name="RAND_MULTIPLIER"><h3>RAND_MULTIPLIER</h3></a>
<p>
var integer: <b>RAND_MULTIPLIER</b></p><dl><dd>
<p>
Multiplier for the linear congruential generator.
A well known pseudorandom number generator algorithm.
</p>
</dd>
</dl></div>
<hr />
<div><a name="RAND_INCREMENT"><h3>RAND_INCREMENT</h3></a>
<p>
var integer: <b>RAND_INCREMENT</b></p><dl><dd>
<p>
Increment for the linear congruential generator.
A well known pseudorandom number generator algorithm.
</p>
</dd>
</dl></div>
<hr />
<div><a name="BOOLTYPE"><h3>BOOLTYPE</h3></a>
<p>
var string: <b>BOOLTYPE</b></p><dl><dd>
<p>
Name of a type for the boolean values 0 and 1.
The runtime library and the compiler use a typedef to define
the type <i>boolType</i> with BOOLTYPE.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT32TYPE"><h3>INT32TYPE</h3></a>
<p>
var string: <b>INT32TYPE</b></p><dl><dd>
<p>
Name of a signed integer type that is 32 bits wide.
The runtime library and the compiler use a typedef to define
the type <i>int32Type</i> with INT32TYPE.
</p>
</dd>
</dl></div>
<hr />
<div><a name="UINT32TYPE"><h3>UINT32TYPE</h3></a>
<p>
var string: <b>UINT32TYPE</b></p><dl><dd>
<p>
Name of an unsigned integer type that is 32 bits wide.
The runtime library and the compiler use a typedef to define
the type <i>uint32Type</i> with UINT32TYPE.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT64TYPE"><h3>INT64TYPE</h3></a>
<p>
var string: <b>INT64TYPE</b></p><dl><dd>
<p>
Name of a signed integer type that is 64 bits wide.
The runtime library and the compiler use a typedef to define
the type <i>int64Type</i> with INT64TYPE.
</p>
</dd>
</dl></div>
<hr />
<div><a name="UINT64TYPE"><h3>UINT64TYPE</h3></a>
<p>
var string: <b>UINT64TYPE</b></p><dl><dd>
<p>
Name of an unsigned integer type that is 64 bits wide.
The runtime library and the compiler use a typedef to define
the type <i>uint64Type</i> with UINT64TYPE.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT128TYPE"><h3>INT128TYPE</h3></a>
<p>
var string: <b>INT128TYPE</b></p><dl><dd>
<p>
Name of a signed integer type that is 128 bits wide.
The runtime library and the compiler use a typedef to define
the type <i>int128Type</i> with INT128TYPE. Empty string if
there is no 128-bit signed integer type.
</p>
</dd>
</dl></div>
<hr />
<div><a name="UINT128TYPE"><h3>UINT128TYPE</h3></a>
<p>
var string: <b>UINT128TYPE</b></p><dl><dd>
<p>
Name of an unsigned integer type that is 128 bits wide.
The runtime library and the compiler use a typedef to define
the type <i>uint128Type</i> with UINT128TYPE. Empty string if
there is no 128-bit unsigned integer type.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT32TYPE_LITERAL_SUFFIX"><h3>INT32TYPE_LITERAL_SUFFIX</h3></a>
<p>
var string: <b>INT32TYPE_LITERAL_SUFFIX</b></p><dl><dd>
<p>
The suffix used by the literals of the 32 bits wide integer type.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT64TYPE_LITERAL_SUFFIX"><h3>INT64TYPE_LITERAL_SUFFIX</h3></a>
<p>
var string: <b>INT64TYPE_LITERAL_SUFFIX</b></p><dl><dd>
<p>
The suffix used by the literals of the 64 bits wide integer type.
</p>
</dd>
</dl></div>
<hr />
<div><a name="MACRO_DEFS"><h3>MACRO_DEFS</h3></a>
<p>
var string: <b>MACRO_DEFS</b></p><dl><dd>
<p>
Definition of several macros (likely, unlikely, noreturn).
</p>
</dd>
</dl></div>
<hr />
<div><a name="OVERFLOW_SIGNAL"><h3>OVERFLOW_SIGNAL</h3></a>
<p>
var string: <b>OVERFLOW_SIGNAL</b></p><dl><dd>
<p>
Name of the signal that is raised if a signed integer overflow
occurs. OVERFLOW_SIGNAL is an empty string, if a signed integer
overflow does not raise a signal. The C compiler option
CC_OPT_TRAP_OVERFLOW is used to generate traps for signed
integer overflow.
</p>
</dd>
</dl></div>
<hr />
<div><a name="BUILTIN_ADD_OVERFLOW"><h3>BUILTIN_ADD_OVERFLOW</h3></a>
<p>
var string: <b>BUILTIN_ADD_OVERFLOW</b></p><dl><dd>
<p>
Name of a C compiler builtin function to add with overflow check.
Empty string if there is no such builtin function.
</p>
</dd>
</dl></div>
<hr />
<div><a name="BUILTIN_SUB_OVERFLOW"><h3>BUILTIN_SUB_OVERFLOW</h3></a>
<p>
var string: <b>BUILTIN_SUB_OVERFLOW</b></p><dl><dd>
<p>
Name of a C compiler builtin function to subtract with overflow check.
Empty string if there is no such builtin function.
</p>
</dd>
</dl></div>
<hr />
<div><a name="BUILTIN_MULT_OVERFLOW"><h3>BUILTIN_MULT_OVERFLOW</h3></a>
<p>
var string: <b>BUILTIN_MULT_OVERFLOW</b></p><dl><dd>
<p>
Name of a C compiler builtin function to multiply with overflow check.
Empty string if there is no such builtin function.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT_DIV_OVERFLOW"><h3>INT_DIV_OVERFLOW</h3></a>
<p>
var integer: <b>INT_DIV_OVERFLOW</b></p><dl><dd>
<p>
Defines what happens in case of an integer division overflow.
An integer division can overflow with <i>integer.first div -1</i>.
In this case the following things can happen:
</p>
<ul>
<li> 0 it triggers an endless loop.</li>
<li> 1 it triggers a popup window.</li>
<li> 2 it returns integer.first.</li>
<li> 3 it returns some other value.</li>
<li> 4 it raises SIGFPE.</li>
<li> 5 it raises SIGILL.</li>
<li> 6 it raises SIGABRT.</li>
<li> 7 it raises SIGTRAP.</li>
</ul>
<p>
In case of 0 (endless loop) the compiler
must always check for an integer division overflow.
</p>
</dd>
</dl></div>
<hr />
<div><a name="INT_REM_OVERFLOW"><h3>INT_REM_OVERFLOW</h3></a>
<p>
var integer: <b>INT_REM_OVERFLOW</b></p><dl><dd>
<p>
Defines what happens in case of an integer remainder overflow.
An integer remainder can overflow with <i>integer.first rem -1</i>.
In this case the following things can happen:
</p>
<ul>
<li> 0 it triggers an endless loop.</li>
<li> 1 it triggers a popup window.</li>
<li> 2 it returns 0.</li>
<li> 3 it returns some other value.</li>
<li> 4 it raises SIGFPE.</li>
<li> 5 it raises SIGILL.</li>
<li> 6 it raises SIGABRT.</li>
<li> 7 it raises SIGTRAP.</li>
</ul>
<p>
In case of 0 (endless loop) the compiler
must always check for an integer remainder overflow.
</p>
</dd>
</dl></div>
<hr />
<div><a name="OBJECT_FILE_EXTENSION"><h3>OBJECT_FILE_EXTENSION</h3></a>
<p>
var string: <b>OBJECT_FILE_EXTENSION</b></p><dl><dd>
<p>
The extension used by the C compiler for object files.
Several object files and libraries are linked together to
an executable. Under Linux/Unix/BSD this is usually ".o".
Under Windows this is ".o" for MinGW and Cygwin,
but ".obj" for other compilers.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LIBRARY_FILE_EXTENSION"><h3>LIBRARY_FILE_EXTENSION</h3></a>
<p>
var string: <b>LIBRARY_FILE_EXTENSION</b></p><dl><dd>
<p>
The extension used by the linker for static libraries.
Several object files can be grouped to a library. Under
Linux/Unix/BSD this is usually ".a". Under Windows this is
".a" for MinGW and Cygwin, but ".lib" for other linkers.
</p>
</dd>
</dl></div>
<hr />
<div><a name="EXECUTABLE_FILE_EXTENSION"><h3>EXECUTABLE_FILE_EXTENSION</h3></a>
<p>
var string: <b>EXECUTABLE_FILE_EXTENSION</b></p><dl><dd>
<p>
The extension used by the operating system for executables.
Since executable extensions are not used under
Linux/Unix/BSD it is "" for them. Under Windows
the value ".exe" is used.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKED_PROGRAM_EXTENSION"><h3>LINKED_PROGRAM_EXTENSION</h3></a>
<p>
var string: <b>LINKED_PROGRAM_EXTENSION</b></p><dl><dd>
<p>
The extension of the file produced by linking a program.
Normally this is identical to the EXECUTABLE_FILE_EXTENSION,
but in case of Emscripten this is independent from the
EXECUTABLE_FILE_EXTENSION.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_ENVIRONMENT_INI"><h3>CC_ENVIRONMENT_INI</h3></a>
<p>
var string: <b>CC_ENVIRONMENT_INI</b></p><dl><dd>
<p>
Path to an INI file with the environment for the C compiler.
If it is "" the C compiler does not need environment settings.
</p>
</dd>
</dl></div>
<hr />
<div><a name="C_COMPILER"><h3>C_COMPILER</h3></a>
<p>
var string: <b>C_COMPILER</b></p><dl><dd>
<p>
Command to call the stand-alone C compiler and linker.
Most IDEs provide also a stand-alone compiler/linker.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CALL_C_COMPILER_FROM_SHELL"><h3>CALL_C_COMPILER_FROM_SHELL</h3></a>
<p>
var boolean: <b>CALL_C_COMPILER_FROM_SHELL</b></p><dl><dd>
<p>
TRUE if C compiler and linker must be called via the shell.
If it is FALSE C compiler and linker processes are started
direct.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_DEBUG_INFO"><h3>CC_OPT_DEBUG_INFO</h3></a>
<p>
var array string: <b>CC_OPT_DEBUG_INFO</b></p><dl><dd>
<p>
C compiler option to add source level debugging information.
With this option source level debugging information is
added to the object file.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_LINK_TIME_OPTIMIZATION"><h3>CC_OPT_LINK_TIME_OPTIMIZATION</h3></a>
<p>
var string: <b>CC_OPT_LINK_TIME_OPTIMIZATION</b></p><dl><dd>
<p>
C compiler option to do link time optimization.
If it is "" the C compiler does not support link time optimization.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_NO_WARNINGS"><h3>CC_OPT_NO_WARNINGS</h3></a>
<p>
var string: <b>CC_OPT_NO_WARNINGS</b></p><dl><dd>
<p>
C compiler option to suppress all warnings.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_OPTIMIZE_1"><h3>CC_OPT_OPTIMIZE_1</h3></a>
<p>
var array string: <b>CC_OPT_OPTIMIZE_1</b></p><dl><dd>
<p>
C compiler option to optimize with a level of -O1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_OPTIMIZE_2"><h3>CC_OPT_OPTIMIZE_2</h3></a>
<p>
var array string: <b>CC_OPT_OPTIMIZE_2</b></p><dl><dd>
<p>
C compiler option to optimize with a level of -O2.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_OPTIMIZE_3"><h3>CC_OPT_OPTIMIZE_3</h3></a>
<p>
var array string: <b>CC_OPT_OPTIMIZE_3</b></p><dl><dd>
<p>
C compiler option to optimize with a level of -O3.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_TRAP_OVERFLOW"><h3>CC_OPT_TRAP_OVERFLOW</h3></a>
<p>
var string: <b>CC_OPT_TRAP_OVERFLOW</b></p><dl><dd>
<p>
C compiler option to generate traps for signed integer overflow.
An integer overflow in the compiled program will trigger the
signal defined with OVERFLOW_SIGNAL. CC_OPT_TRAP_OVERFLOW is
an empty string, if the C compiler does not support such an
option or if traps would not lead to a performance advantage.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_OPT_VERSION_INFO"><h3>CC_OPT_VERSION_INFO</h3></a>
<p>
var string: <b>CC_OPT_VERSION_INFO</b></p><dl><dd>
<p>
C compiler option to write the C compiler version information.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_FLAGS"><h3>CC_FLAGS</h3></a>
<p>
var array string: <b>CC_FLAGS</b></p><dl><dd>
<p>
C compiler flags to be used if C programs are compiled.
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_ERROR_FILEDES"><h3>CC_ERROR_FILEDES</h3></a>
<p>
var integer: <b>CC_ERROR_FILEDES</b></p><dl><dd>
<p>
File descriptor to which the C compiler writes errors.
The MSVC stand-alone C compiler (CL) writes the error
messages to standard output (file descriptor 1).
The C compilers of Linux/Unix/BSD and the compilers from
MinGW and Cygwin write the error messages to the error
output (file descriptor 2).
</p>
</dd>
</dl></div>
<hr />
<div><a name="CC_VERSION_INFO_FILEDES"><h3>CC_VERSION_INFO_FILEDES</h3></a>
<p>
var integer: <b>CC_VERSION_INFO_FILEDES</b></p><dl><dd>
<p>
File descriptor to which the C compiler writes its version info.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKER_OPT_DEBUG_INFO"><h3>LINKER_OPT_DEBUG_INFO</h3></a>
<p>
var string: <b>LINKER_OPT_DEBUG_INFO</b></p><dl><dd>
<p>
Linker option to add source level debugging information.
With this option source level debugging information is
added to the executable file. (e.g.: "-Z7" or "-v").
Many compiler/linker combinations don't need this option
to do source level debugging (use "").
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKER_OPT_LTO_MANDATORY"><h3>LINKER_OPT_LTO_MANDATORY</h3></a>
<p>
var boolean: <b>LINKER_OPT_LTO_MANDATORY</b></p><dl><dd>
<p>
TRUE if linking always requires the option
CC_OPT_LINK_TIME_OPTIMIZATION.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKER_OPT_NO_DEBUG_INFO"><h3>LINKER_OPT_NO_DEBUG_INFO</h3></a>
<p>
var string: <b>LINKER_OPT_NO_DEBUG_INFO</b></p><dl><dd>
<p>
Linker option to be used without source level debugging.
This option can strip debug information (e.g.: "-Wl,--strip-debug").
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKER_OPT_OUTPUT_FILE"><h3>LINKER_OPT_OUTPUT_FILE</h3></a>
<p>
var string: <b>LINKER_OPT_OUTPUT_FILE</b></p><dl><dd>
<p>
Linker option to provide the output filename (e.g.: "-o ").
If no such option exists the value of LINKER_OPT_OUTPUT_FILE
should be "". In this case it is assumed that the linker
replaces the OBJECT_FILE_EXTENSION of the file with the
LINKED_PROGRAM_EXTENSION.
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKER_OPT_SPECIAL_LIB"><h3>LINKER_OPT_SPECIAL_LIB</h3></a>
<p>
var string: <b>LINKER_OPT_SPECIAL_LIB</b></p><dl><dd>
<p>
Linker option that needs to precede the special library.
If no special library exists LINKER_OPT_SPECIAL_LIB is "".
</p>
</dd>
</dl></div>
<hr />
<div><a name="LINKER_FLAGS"><h3>LINKER_FLAGS</h3></a>
<p>
var array string: <b>LINKER_FLAGS</b></p><dl><dd>
<p>
Standard linker options to link a compiled program.
This is intended for options that specify the stack size or
similar things (e.g.: "-Wl,--gc-sections,--stack,4194304").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SYSTEM_LIBS"><h3>SYSTEM_LIBS</h3></a>
<p>
var array string: <b>SYSTEM_LIBS</b></p><dl><dd>
<p>
Options to link system libraries to a compiled program.
This is intended for options to link libraries required by the
Seed7 runtime library. E.g. libraries for socket.
</p>
</dd>
</dl></div>
<hr />
<div><a name="SYSTEM_BIGINT_LIBS"><h3>SYSTEM_BIGINT_LIBS</h3></a>
<p>
var array string: <b>SYSTEM_BIGINT_LIBS</b></p><dl><dd>
<p>
Options to link system bigint libraries to a compiled program.
This is intended for options to link libraries required by the
Seed7 bigint.s7i runtime library (e.g.: "-lgmp").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SYSTEM_CONSOLE_LIBS"><h3>SYSTEM_CONSOLE_LIBS</h3></a>
<p>
var array string: <b>SYSTEM_CONSOLE_LIBS</b></p><dl><dd>
<p>
Options to link system console libraries to a compiled program.
This is intended for options to link libraries required by the
Seed7 console runtime library (e.g.: "-lncurses").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SYSTEM_DATABASE_LIBS"><h3>SYSTEM_DATABASE_LIBS</h3></a>
<p>
var array string: <b>SYSTEM_DATABASE_LIBS</b></p><dl><dd>
<p>
Options to link system database ibraries to a compiled program.
This is intended for options to link libraries required by the
Seed7 database runtime libraries (e.g.: "-lmysqlclient").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SYSTEM_DRAW_LIBS"><h3>SYSTEM_DRAW_LIBS</h3></a>
<p>
var array string: <b>SYSTEM_DRAW_LIBS</b></p><dl><dd>
<p>
Options to link system graphic libraries to a compiled program.
This is intended for options to link libraries required by the
Seed7 graphic runtime library (e.g.: "-lX11").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SYSTEM_MATH_LIBS"><h3>SYSTEM_MATH_LIBS</h3></a>
<p>
var array string: <b>SYSTEM_MATH_LIBS</b></p><dl><dd>
<p>
Options to link system mathematic libraries to a compiled program.
This is intended for options to link libraries required by the
Seed7 math.s7i runtime library. (e.g.: "-lm").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SEED7_LIB"><h3>SEED7_LIB</h3></a>
<p>
var string: <b>SEED7_LIB</b></p><dl><dd>
<p>
Name of the Seed7 runtime library (e.g.: "seed7_05.a").
</p>
</dd>
</dl></div>
<hr />
<div><a name="DRAW_LIB"><h3>DRAW_LIB</h3></a>
<p>
var string: <b>DRAW_LIB</b></p><dl><dd>
<p>
Name of the Seed7 graphic runtime library (e.g.: "s7_draw.a").
</p>
</dd>
</dl></div>
<hr />
<div><a name="CONSOLE_LIB"><h3>CONSOLE_LIB</h3></a>
<p>
var string: <b>CONSOLE_LIB</b></p><dl><dd>
<p>
Name of the Seed7 text console runtime library (e.g.: "s7_con.a").
</p>
</dd>
</dl></div>
<hr />
<div><a name="DATABASE_LIB"><h3>DATABASE_LIB</h3></a>
<p>
var string: <b>DATABASE_LIB</b></p><dl><dd>
<p>
Name of the Seed7 database runtime library (e.g.: "s7_db.a").
</p>
</dd>
</dl></div>
<hr />
<div><a name="COMP_DATA_LIB"><h3>COMP_DATA_LIB</h3></a>
<p>
var string: <b>COMP_DATA_LIB</b></p><dl><dd>
<p>
Name of the Seed7 compiler data runtime library (e.g.: "s7_data.a").
</p>
</dd>
</dl></div>
<hr />
<div><a name="COMPILER_LIB"><h3>COMPILER_LIB</h3></a>
<p>
var string: <b>COMPILER_LIB</b></p><dl><dd>
<p>
Name of the Seed7 compiler runtime library (e.g.: "s7_comp.a").
</p>
</dd>
</dl></div>
<hr />
<div><a name="SPECIAL_LIB"><h3>SPECIAL_LIB</h3></a>
<p>
var string: <b>SPECIAL_LIB</b></p><dl><dd>
<p>
Name of the special library (e.g.: "pre_js.js").
</p>
</dd>
</dl></div>
<hr />
<div><a name="S7_LIB_DIR"><h3>S7_LIB_DIR</h3></a>
<p>
var string: <b>S7_LIB_DIR</b></p><dl><dd>
<p>
Directory containing the Seed7 runtime libraries.
This path uses the standard path representation (a slash is used
as path separator and instead of a drive letter like "C:" the
path "/c" is used).
</p>
</dd>
</dl></div>
<hr />
<div><a name="VERSION_REVISION_LEVEL"><h3>VERSION_REVISION_LEVEL</h3></a>
<p>
var integer: <b>VERSION_REVISION_LEVEL</b></p><dl><dd>
<p>
The current version revision level of interpreter and compiler.
The versioning of Seed7 interpreter and compiler use the
pattern major.minor.revision (e.g.: 5.1.4). The revision
level is incremented automatically with every compilation
of the Seed7 interpreter. This configuration value allows
that interpreter and compiler share the same revision.
</p>
</dd>
</dl></div>
<hr />
<div><a name="REDIRECT_FILEDES_1"><h3>REDIRECT_FILEDES_1</h3></a>
<p>
var string: <b>REDIRECT_FILEDES_1</b></p><dl><dd>
<p>
Shell parameter to redirect to the file descriptor 1.
Under Linux/Unix/BSD and Windows this is ">".
The file to which the standard output should be
redirected must be appended. E.g.: >myFile.
</p>
</dd>
</dl></div>
<hr />
<div><a name="REDIRECT_FILEDES_2"><h3>REDIRECT_FILEDES_2</h3></a>
<p>
var string: <b>REDIRECT_FILEDES_2</b></p><dl><dd>
<p>
Shell parameter to redirect to the file descriptor 2.
Under Linux/Unix/BSD and Windows this is "2>".
The file to which the error output should be
redirected must be appended. E.g.: 2>myFile.
</p>
</dd>
</dl></div>
<hr />
<div><a name="NULL_DEVICE"><h3>NULL_DEVICE</h3></a>
<p>
var string: <b>NULL_DEVICE</b></p><dl><dd>
<p>
Name of the NULL device to be used in shell command redirections.
Under Linux/Unix/BSD this is "/dev/null".
Under Windows this is "NUL:".
</p>
</dd>
</dl></div>
<hr />
<div><a name="INTTYPE_LITERAL_SUFFIX"><h3>INTTYPE_LITERAL_SUFFIX</h3></a>
<p>
var string: <b>INTTYPE_LITERAL_SUFFIX</b></p><dl><dd>
<p>
The suffix used by the literals of the type <i>intType</i>.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="getBuiltInConfig"><h3>getBuiltInConfig</h3></a>
<p>
const func ccConfigType: <b>getBuiltInConfig</b></p><dl><dd>
<p>
Determine the built-in (hard-coded) C compiler configuration values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a structure with the built-in configuration values.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/category.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/ccittfax.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
