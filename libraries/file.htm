<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: File</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="json_serde.htm">JSON serialize</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="scantoml.htm">Scan TOML</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="struct_elem.htm">Struct element</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tga.htm">TGA</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>File</big></b></td>
<td align="right"><a class="link" href="../lib/file.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/external_file.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/filesys.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#file">file</a></b></td></tr>
<tr><td width="30"></td><td>Interface type for sequential files.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="file"><h3>file</h3></a>
<p>
const type: <b>file</b></p><dl><dd>
<p>
Interface type for sequential files.
The file interface is implemented with <a class="link" href="null_file.htm" title="null_file">null_file</a>,
<a class="link" href="external_file.htm" title="external_file">external_file</a>, <a class="link" href="utf8.htm" title="utf8File">utf8File</a>, <a class="link" href="utf16.htm" title="utf16File">utf16File</a>,
<a class="link" href="socket.htm" title="socket">socket</a>, <a class="link" href="echo.htm" title="echoFile">echoFile</a>, <a class="link" href="line.htm" title="lineFile">lineFile</a>,
<a class="link" href="dir.htm" title="dirFile">dirFile</a> and many other types.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#write(inout_file,in_string)">write</a></b> (inout file: outFile, in string: stri)</td></tr>
<tr><td width="30"></td><td>Write a <a class="link" href="string.htm" title="string">string</a> to a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#writeln(inout_file)">writeln</a></b> (inout file: outFile)</td></tr>
<tr><td width="30"></td><td>Write end-of-line to a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#writeln(inout_file,in_string)">writeln</a></b> (inout file: outFile, in string: stri)</td></tr>
<tr><td width="30"></td><td>Write a <a class="link" href="string.htm" title="string">string</a> followed by end-of-line to a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(inout_file)">close</a></b> (inout file: aFile)</td></tr>
<tr><td width="30"></td><td>Close a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#flush(inout_file)">flush</a></b> (inout file: outFile)</td></tr>
<tr><td width="30"></td><td>Forces that all buffered data of <i>outFile</i> is sent to its destination.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getc(inout_file)">getc</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a character from a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(inout_file,in_integer)">gets</a></b> (inout file: inFile, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Read a <a class="link" href="string.htm" title="string">string</a> with a maximum length from a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getTerminatedString(inout_file,in_char)">getTerminatedString</a></b> (inout file: inFile,
                                        in char: terminator)</td></tr>
<tr><td width="30"></td><td>Read a <a class="link" href="string.htm" title="string">string</a> from <i>inFile</i> until the <i>terminator</i> character is found.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getwd(inout_file)">getwd</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a word from a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getln(inout_file)">getln</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a line from a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#eof(in_file)">eof</a></b> (in file: inFile)</td></tr>
<tr><td width="30"></td><td>Determine the end-of-file indicator.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hasNext(inout_file)">hasNext</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Determine if at least one character can be read successfully.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#inputReady(in_file)">inputReady</a></b> (in file: inFile)</td></tr>
<tr><td width="30"></td><td>Determine if at least one character can be read without blocking.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(inout_file)">length</a></b> (inout file: aFile)</td></tr>
<tr><td width="30"></td><td>Obtain the length of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncate(inout_file,in_integer)">truncate</a></b> (inout file: aFile, in integer: length)</td></tr>
<tr><td width="30"></td><td>Truncate <i>aFile</i> to the given <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#seekable(in_file)">seekable</a></b> (in file: aFile)</td></tr>
<tr><td width="30"></td><td>Determine if the file <i>aFile</i> is seekable.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#seek(inout_file,in_integer)">seek</a></b> (inout file: aFile, in integer: position)</td></tr>
<tr><td width="30"></td><td>Set the current file position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#tell(in_file)">tell</a></b> (in file: aFile)</td></tr>
<tr><td width="30"></td><td>Obtain the current file position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_file,in_file)">compare</a></b> (in file: file1, in file: file2)</td></tr>
<tr><td width="30"></td><td>Compare two file values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_file)">hashCode</a></b> (in file: aFile)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#read(inout_file,inout_string)">read</a></b> (inout file: inFile, inout string: aVar)</td></tr>
<tr><td width="30"></td><td>Read a word from <i>inFile</i> into <i>aVar</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#read(inout_file,inout_string,in_string)">read</a></b> (inout file: inFile, inout string: aVar,
    in string: defaultValue)</td></tr>
<tr><td width="30"></td><td>Read a word from <i>inFile</i> into <i>aVar</i> or use <i>defaultValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readln(inout_file,inout_string)">readln</a></b> (inout file: inFile, inout string: aVar)</td></tr>
<tr><td width="30"></td><td>Read a line from <i>inFile</i> into <i>aVar</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readln(inout_file,inout_string,in_string)">readln</a></b> (inout file: inFile, inout string: aVar,
    in string: defaultValue)</td></tr>
<tr><td width="30"></td><td>Read a line from <i>inFile</i> into <i>aVar</i> or use <i>defaultValue</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#readln(inout_file)">readln</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Discard a line from a file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skip(inout_file,in_var_integer)">skip</a></b> (inout file: inFile, in var integer: numChars)</td></tr>
<tr><td width="30"></td><td>Skip <i>numChars</i> characters from <i>inFile</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="write(inout_file,in_string)"><h3>write</h3></a>
<p>
const proc: <b>write</b> (inout file: outFile, in string: stri)</p><dl><dd>
<p>
Write a <a class="link" href="string.htm" title="string">string</a> to a file.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - - The string contains a character that            does not fit into the file specific representation            (e.g.: A byte-file allows just chars from '\0;' to '\255;').</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="writeln(inout_file)"><h3>writeln</h3></a>
<p>
const proc: <b>writeln</b> (inout file: outFile)</p><dl><dd>
<p>
Write end-of-line to a file.
The implementation function decides how writing end-of-line is
done. It can be done by writing '\n', but other solutions are also
possible.
</p>
</dd>
</dl></div>
<hr />
<div><a name="writeln(inout_file,in_string)"><h3>writeln</h3></a>
<p>
const proc: <b>writeln</b> (inout file: outFile, in string: stri)</p><dl><dd>
<p>
Write a <a class="link" href="string.htm" title="string">string</a> followed by end-of-line to a file.
The implementation function decides how writing end-of-line is
done. It can be done by writing '\n', but other solutions are also
possible.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - - The string contains a character that            does not fit into the file specific representation            (e.g.: A byte-file allows just chars from '\0;' to '\255;').</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="close(inout_file)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (inout file: aFile)</p><dl><dd>
<p>
Close a file.
</p>
</dd>
</dl></div>
<hr />
<div><a name="flush(inout_file)"><h3>flush</h3></a>
<p>
const proc: <b>flush</b> (inout file: outFile)</p><dl><dd>
<p>
Forces that all buffered data of <i>outFile</i> is sent to its destination.
Depending on the implementation type this causes data to be sent
to the file system, screen, network or other destination.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getc(inout_file)"><h3>getc</h3></a>
<p>
const func char: <b>getc</b> (inout file: inFile)</p><dl><dd>
<p>
Read a character from a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character read, or <a class="link" href="char.htm#EOF" title="EOF">EOF</a> at the end of the file.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="gets(inout_file,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (inout file: inFile, in integer: maxLength)</p><dl><dd>
<p>
Read a <a class="link" href="string.htm" title="string">string</a> with a maximum length from a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getTerminatedString(inout_file,in_char)"><h3>getTerminatedString</h3></a>
<p>
const func string: <b>getTerminatedString</b> (inout file: inFile,
                                        in char: terminator)</p><dl><dd>
<p>
Read a <a class="link" href="string.htm" title="string">string</a> from <i>inFile</i> until the <i>terminator</i> character is found.
If a <i>terminator</i> is found the string before the <i>terminator</i> is
returned and the <i>terminator</i> character is assigned to inFile.bufferChar.
The file position is advanced after the <i>terminator</i> character.
If no <i>terminator</i> is found the rest of <i>inFile</i> is returned and
<a class="link" href="char.htm#EOF" title="EOF">EOF</a> is assigned to the inFile.bufferChar. When the function
is left inFile.bufferChar contains either <i>terminator</i> or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File from which the string is read.</dd>
<dd><tt>terminator</tt> - Character which terminates the string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read without the <i>terminator</i> or the rest of the         file if no <i>terminator</i> is found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getwd(inout_file)"><h3>getwd</h3></a>
<p>
const func string: <b>getwd</b> (inout file: inFile)</p><dl><dd>
<p>
Read a word from a file.
Before reading the word it skips spaces and tabs. The function
accepts words ending with " ", "\t", end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The word ending characters are not copied into the string.
When the function is left inFile.bufferChar contains the
word ending character (' ', '\t', '\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the word read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getln(inout_file)"><h3>getln</h3></a>
<p>
const func string: <b>getln</b> (inout file: inFile)</p><dl><dd>
<p>
Read a line from a file.
The function reads a string up to end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The line ending characters are not copied into the string.
When the function is left inFile.bufferChar contains the
line ending character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the line read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="eof(in_file)"><h3>eof</h3></a>
<p>
const func boolean: <b>eof</b> (in file: inFile)</p><dl><dd>
<p>
Determine the end-of-file indicator.
The end-of-file indicator is set if at least one request to read
from the file failed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the end-of-file indicator is set, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hasNext(inout_file)"><h3>hasNext</h3></a>
<p>
const func boolean: <b>hasNext</b> (inout file: inFile)</p><dl><dd>
<p>
Determine if at least one character can be read successfully.
This function allows a file to be handled like an iterator.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if <i>getc</i> would return <a class="link" href="char.htm#EOF" title="EOF">EOF</a>,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="inputReady(in_file)"><h3>inputReady</h3></a>
<p>
const func boolean: <b>inputReady</b> (in file: inFile)</p><dl><dd>
<p>
Determine if at least one character can be read without blocking.
Blocking means that <i>getc</i> would wait until a character is
received. Blocking can last for a period of unspecified length.
Regular files do not block.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>getc</i> would not block, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="length(inout_file)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (inout file: aFile)</p><dl><dd>
<p>
Obtain the length of a file.
The file length is measured in bytes.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of a file.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The file length does not fit into            an integer value.</dd>
<dd><tt>FILE_ERROR</tt> - The implementation type of <i>aFile</i> is            not seekable or a system function returns an error            or the file length reported by the system is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="truncate(inout_file,in_integer)"><h3>truncate</h3></a>
<p>
const proc: <b>truncate</b> (inout file: aFile, in integer: length)</p><dl><dd>
<p>
Truncate <i>aFile</i> to the given <i>length</i>.
If the file previously was larger than <i>length</i>, the extra data is lost.
If the file previously was shorter, it is extended, and the extended
part is filled with null bytes ('\0;').
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aFile</tt> - File to be truncated.</dd>
<dd><tt>length</tt> - Requested length of <i>aFile</i> in bytes.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The requested length is negative or            the length is not representable in the type            used by the system function.</dd>
<dd><tt>FILE_ERROR</tt> - A system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="seekable(in_file)"><h3>seekable</h3></a>
<p>
const func boolean: <b>seekable</b> (in file: aFile)</p><dl><dd>
<p>
Determine if the file <i>aFile</i> is seekable.
If a file is seekable the functions <i>seek</i> and <i>tell</i>
can be used to set and and obtain the current file position.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE, if <i>aFile</i> is seekable, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="seek(inout_file,in_integer)"><h3>seek</h3></a>
<p>
const proc: <b>seek</b> (inout file: aFile, in integer: position)</p><dl><dd>
<p>
Set the current file position.
The file position is measured in bytes from the start of the file.
The first byte in the file has the position 1.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The file position is negative or zero or            the file position is not representable in the system            file position type.</dd>
<dd><tt>FILE_ERROR</tt> - The implementation type of <i>aFile</i> is            not seekable or a system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="tell(in_file)"><h3>tell</h3></a>
<p>
const func integer: <b>tell</b> (in file: aFile)</p><dl><dd>
<p>
Obtain the current file position.
The file position is measured in bytes from the start of the file.
The first byte in the file has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the current file position.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The file position does not fit into            an integer value.</dd>
<dd><tt>FILE_ERROR</tt> - The implementation type of <i>aFile</i> is            not seekable or a system function returns an error            or the file position reported by the system is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="compare(in_file,in_file)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in file: file1, in file: file2)</p><dl><dd>
<p>
Compare two file values.
This function does neither compare file contents nor file names.
The order of two files is determined by comparing the memory
positions of their internal data representation. Therefore the
result of <i>compare</i> is arbitrary and may change if the
program is executed again. Inside a program the result of
<i>compare</i> is consistent and can be used to maintain hash
tables.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_file)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in file: aFile)</p><dl><dd>
<p>
Compute the hash value of a file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="read(inout_file,inout_string)"><h3>read</h3></a>
<p>
const proc: <b>read</b> (inout file: inFile, inout string: aVar)</p><dl><dd>
<p>
Read a word from <i>inFile</i> into <i>aVar</i>.
Before reading the word it skips spaces and tabs. The function
accepts words ending with " ", "\t", end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The word ending character is not copied into the string.
When the function is left inFile.bufferChar contains the
word ending character (' ', '\t', '\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
</dl></div>
<hr />
<div><a name="read(inout_file,inout_string,in_string)"><h3>read</h3></a>
<p>
const proc: <b>read</b> (inout file: inFile, inout string: aVar,
    in string: defaultValue)</p><dl><dd>
<p>
Read a word from <i>inFile</i> into <i>aVar</i> or use <i>defaultValue</i>.
Before reading the word it skips spaces and tabs. The function
accepts words ending with " ", "\t", end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
If the word is empty <i>defaultValue</i> is assigned to <i>aVar</i>.
The word ending character is not copied into the string.
When the function is left inFile.bufferChar contains the
word ending character (' ', '\t', '\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
</dl></div>
<hr />
<div><a name="readln(inout_file,inout_string)"><h3>readln</h3></a>
<p>
const proc: <b>readln</b> (inout file: inFile, inout string: aVar)</p><dl><dd>
<p>
Read a line from <i>inFile</i> into <i>aVar</i>.
The function reads a string up to end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The line ending character is not copied into the string.
When the function is left inFile.bufferChar contains the
line ending character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
</dl></div>
<hr />
<div><a name="readln(inout_file,inout_string,in_string)"><h3>readln</h3></a>
<p>
const proc: <b>readln</b> (inout file: inFile, inout string: aVar,
    in string: defaultValue)</p><dl><dd>
<p>
Read a line from <i>inFile</i> into <i>aVar</i> or use <i>defaultValue</i>.
The function reads a string up to end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
If the line is empty <i>defaultValue</i> is assigned to <i>aVar</i>.
The line ending character is not copied into the string.
When the function is left inFile.bufferChar contains the
line ending character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
</dl></div>
<hr />
<div><a name="readln(inout_file)"><h3>readln</h3></a>
<p>
const proc: <b>readln</b> (inout file: inFile)</p><dl><dd>
<p>
Discard a line from a file.
The function discards characters up to end-of-line or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
When the function is left inFile.bufferChar contains the
line ending character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).
</p>
</dd>
</dl></div>
<hr />
<div><a name="skip(inout_file,in_var_integer)"><h3>skip</h3></a>
<p>
const proc: <b>skip</b> (inout file: inFile, in var integer: numChars)</p><dl><dd>
<p>
Skip <i>numChars</i> characters from <i>inFile</i>.
When the function is left <i>numChars</i> have been skipped from
<i>inFile</i> or <a class="link" href="char.htm#EOF" title="EOF">EOF</a> has been reached.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>numChars</i> is negative.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/external_file.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/filesys.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
