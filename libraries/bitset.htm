<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bitset</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="json_serde.htm">JSON serialize</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="scantoml.htm">Scan TOML</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="struct.htm">Struct</a>
<a class="menu" href="struct_elem.htm">Struct element</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tga.htm">TGA</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bitset</big></b></td>
<td align="right"><a class="link" href="../lib/bitset.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bitmapfont.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bitsetof.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitset">bitset</a></b></td></tr>
<tr><td width="30"></td><td>Sets of <a class="link" href="integer.htm" title="integer">integer</a> numbers.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#set_of(attr_integer)">set of</a></b> (attr integer)</td></tr>
<tr><td width="30"></td><td>Alternate name for <a class="link" href="bitset.htm#bitset" title="bitset">bitset</a>.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="bitset"><h3>bitset</h3></a>
<p>
const type: <b>bitset</b></p><dl><dd>
<p>
Sets of <a class="link" href="integer.htm" title="integer">integer</a> numbers.
</p>
</dd>
</dl></div>
<hr />
<div><a name="set_of(attr_integer)"><h3>set of</h3></a>
<p>
const type: <b>set of</b> (attr integer)</p><dl><dd>
<p>
Alternate name for <a class="link" href="bitset.htm#bitset" title="bitset">bitset</a>.
</p>
<pre class="indent">
set of <a class="link" href="integer.htm" title="integer">integer</a>
</pre>
<p>
is an alternate name for <a class="link" href="bitset.htm#bitset" title="bitset">bitset</a>.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bitset) <b><a class="link" href="#(attr_bitset)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>bitset</i> ({}).</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)|(in_bitset)">|</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Union of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)&amp;(in_bitset)">&amp;</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Intersection of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)>&lt;(in_bitset)">>&lt;</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Symmetric difference of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)-(in_bitset)">-</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Difference of two sets.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bitset: dest) <b><a class="link" href="#(inout_bitset)|:=(in_bitset)">|:=</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Assign the union of <i>dest</i> and <i>set2</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bitset: dest) <b><a class="link" href="#(inout_bitset)&amp;:=(in_bitset)">&amp;:=</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Assign the intersection of <i>dest</i> and <i>set2</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bitset: dest) <b><a class="link" href="#(inout_bitset)-:=(in_bitset)">-:=</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Assign the difference of <i>dest</i> and <i>set2</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)=(in_bitset)">=</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Check if two sets are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)&lt;>(in_bitset)">&lt;></a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Check if two sets are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)&lt;(in_bitset)">&lt;</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a proper subset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)>(in_bitset)">></a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a proper superset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)&lt;=(in_bitset)">&lt;=</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a subset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bitset: set1) <b><a class="link" href="#(in_bitset)>=(in_bitset)">>=</a></b> (in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Determine if <i>set1</i> is a superset of <i>set2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)in(in_bitset)">in</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Set membership test.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in integer: number) <b><a class="link" href="#(in_integer)not_in(in_bitset)">not in</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Negated set membership test.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bitset: aSet) <b><a class="link" href="#(inout_bitset)@:=_[(in_integer)](in_boolean)">@:= [</a></b> (in integer: number) ] (in boolean: isElement)</td></tr>
<tr><td width="30"></td><td>Add or remove <i>aValue</i> to respectively from <i>sSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#{(in_integer)}">{</a></b> (in integer: aNumber) }</td></tr>
<tr><td width="30"></td><td>Create <i>bitset</i> with the element <i>aNumber</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#{(in_tuple_integer)}">{</a></b> (in tuple integer: numberTuple) }</td></tr>
<tr><td width="30"></td><td>Create <i>bitset</i> with elements from a comma separated list.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#{(in_integer)..(in_integer)}">{</a></b> (in integer: lowValue) ..
                     (in integer: highValue) }</td></tr>
<tr><td width="30"></td><td>Create <i>bitset</i> with all elements from <i>lowValue</i> to <i>highValue</i> inclusive.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)conv(in_bitset)">conv</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bitset</i> to <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bitset) <b><a class="link" href="#(attr_bitset)conv(in_integer)">conv</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a <i>bitset</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bitset) <b><a class="link" href="#(attr_bitset)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bitset</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_bitset,in_bitset)">compare</a></b> (in bitset: set1, in bitset: set2)</td></tr>
<tr><td width="30"></td><td>Compares two sets to make them useable as key in a hash table.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_bitset)">hashCode</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a <i>bitset</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#incl(inout_bitset,in_integer)">incl</a></b> (inout bitset: aSet, in integer: number)</td></tr>
<tr><td width="30"></td><td>Add <i>number</i> to the set <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#excl(inout_bitset,in_integer)">excl</a></b> (inout bitset: aSet, in integer: number)</td></tr>
<tr><td width="30"></td><td>Remove <i>number</i> from the set <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#card(in_bitset)">card</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Compute the cardinality of a set.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_bitset)">rand</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random element from <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#min(in_bitset)">min</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Minimum element of a set.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#max(in_bitset)">max</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Maximum element of a set.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#next(in_bitset,in_integer)">next</a></b> (in bitset: aSet, in integer: number)</td></tr>
<tr><td width="30"></td><td>Minimum element of <i>aSet</i> that is larger than <i>number</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_bitset)">integer</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bitset</i> to <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitset(in_integer)">bitset</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a <i>bitset</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_integer)range(in_bitset)do(in_proc)end_for">for</a></b> (inout integer: forVar) range (in bitset: aSet) do
              (in proc: statements)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop where <i>forVar</i> loops over the elements of the set <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toArray(in_bitset)">toArray</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Obtain an array containing all the values in <i>aSet</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_bitset)">str</a></b> (in bitset: aSet)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bitset</i> to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bitset</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bitset(in_var_string)">bitset</a></b> (in var string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bitset</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_bitset)._value"><h3>. value</h3></a>
<p>
const bitset: (attr bitset) <b>. value</b></p><dl><dd>
<p>
Default value of <i>bitset</i> ({}).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_bitset)|(in_bitset)"><h3>|</h3></a>
<p>
const func bitset: (in bitset: set1) <b>|</b> (in bitset: set2)</p><dl><dd>
<p>
Union of two sets.
</p>
<pre class="indent">
{1, 2} | {1, 3}  returns  {1, 2, 3}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the union of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)&amp;(in_bitset)"><h3>&amp;</h3></a>
<p>
const func bitset: (in bitset: set1) <b>&amp;</b> (in bitset: set2)</p><dl><dd>
<p>
Intersection of two sets.
</p>
<pre class="indent">
{1, 2} &amp; {1, 3}  returns  {1}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the intersection of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)>&lt;(in_bitset)"><h3>>&lt;</h3></a>
<p>
const func bitset: (in bitset: set1) <b>>&lt;</b> (in bitset: set2)</p><dl><dd>
<p>
Symmetric difference of two sets.
</p>
<pre class="indent">
{1, 2} >&lt; {1, 3}  returns  {2, 3}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symmetric difference of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)-(in_bitset)"><h3>-</h3></a>
<p>
const func bitset: (in bitset: set1) <b>-</b> (in bitset: set2)</p><dl><dd>
<p>
Difference of two sets.
</p>
<pre class="indent">
{1, 2} - {1, 3}  returns  {2}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two sets.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bitset)|:=(in_bitset)"><h3>|:=</h3></a>
<p>
const proc: (inout bitset: dest) <b>|:=</b> (in bitset: set2)</p><dl><dd>
<p>
Assign the union of <i>dest</i> and <i>set2</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create <i>dest</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bitset)&amp;:=(in_bitset)"><h3>&amp;:=</h3></a>
<p>
const proc: (inout bitset: dest) <b>&amp;:=</b> (in bitset: set2)</p><dl><dd>
<p>
Assign the intersection of <i>dest</i> and <i>set2</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create <i>dest</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bitset)-:=(in_bitset)"><h3>-:=</h3></a>
<p>
const proc: (inout bitset: dest) <b>-:=</b> (in bitset: set2)</p><dl><dd>
<p>
Assign the difference of <i>dest</i> and <i>set2</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create <i>dest</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)=(in_bitset)"><h3>=</h3></a>
<p>
const func boolean: (in bitset: set1) <b>=</b> (in bitset: set2)</p><dl><dd>
<p>
Check if two sets are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two sets are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)&lt;>(in_bitset)"><h3>&lt;></h3></a>
<p>
const func boolean: (in bitset: set1) <b>&lt;></b> (in bitset: set2)</p><dl><dd>
<p>
Check if two sets are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if the two sets are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)&lt;(in_bitset)"><h3>&lt;</h3></a>
<p>
const func boolean: (in bitset: set1) <b>&lt;</b> (in bitset: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a proper subset of <i>set2</i>.
<i>set1</i> is a proper subset of <i>set2</i> if
</p>
<pre class="indent">
set1 &lt;= set2 and set1 &lt;> set2
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a proper subset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)>(in_bitset)"><h3>></h3></a>
<p>
const func boolean: (in bitset: set1) <b>></b> (in bitset: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a proper superset of <i>set2</i>.
<i>set1</i> is a proper superset of <i>set2</i> if
</p>
<pre class="indent">
set1 >= set2 and set1 &lt;> set2
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a proper superset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)&lt;=(in_bitset)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in bitset: set1) <b>&lt;=</b> (in bitset: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a subset of <i>set2</i>.
<i>set1</i> is a subset of <i>set2</i> if no element X exists for which
</p>
<pre class="indent">
X in set1 and X not in set2
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a subset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bitset)>=(in_bitset)"><h3>>=</h3></a>
<p>
const func boolean: (in bitset: set1) <b>>=</b> (in bitset: set2)</p><dl><dd>
<p>
Determine if <i>set1</i> is a superset of <i>set2</i>.
<i>set1</i> is a superset of <i>set2</i> if no element X exists for which
</p>
<pre class="indent">
X in set2 and X not in set1
</pre>
<p>
holds.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>set1</i> is a superset of <i>set2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)in(in_bitset)"><h3>in</h3></a>
<p>
const func boolean: (in integer: number) <b>in</b> (in bitset: aSet)</p><dl><dd>
<p>
Set membership test.
Determine if <i>number</i> is a member of the set <i>aSet</i>.
</p>
<pre class="indent">
2 in {2, 3, 5, 7}  returns  TRUE
4 in {2, 3, 5, 7}  returns  FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>number</i> is a member of <i>aSet</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_integer)not_in(in_bitset)"><h3>not in</h3></a>
<p>
const func boolean: (in integer: number) <b>not in</b> (in bitset: aSet)</p><dl><dd>
<p>
Negated set membership test.
Determine if <i>number</i> is not a member of the set <i>aSet</i>.
</p>
<pre class="indent">
2 not in {2, 3, 5, 7}  returns  FALSE
4 not in {2, 3, 5, 7}  returns  TRUE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if <i>number</i> is a member of <i>aSet</i>,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bitset)@:=_[(in_integer)](in_boolean)"><h3>@:= [</h3></a>
<p>
const proc: (inout bitset: aSet) <b>@:= [</b> (in integer: number) ] (in boolean: isElement)</p><dl><dd>
<p>
Add or remove <i>aValue</i> to respectively from <i>sSet</i>.
Adding an existing value or remove a non-existing value
leaves <i>aSet</i> unchanged.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - If there is not enough memory.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="{(in_integer)}"><h3>{</h3></a>
<p>
const func bitset: <b>{</b> (in integer: aNumber) }</p><dl><dd>
<p>
Create <i>bitset</i> with the element <i>aNumber</i>.
</p>
<pre class="indent">
{42}    returns a bitset with the element 42.
</pre>
</dd>
</dl></div>
<hr />
<div><a name="{(in_tuple_integer)}"><h3>{</h3></a>
<p>
const func bitset: <b>{</b> (in tuple integer: numberTuple) }</p><dl><dd>
<p>
Create <i>bitset</i> with elements from a comma separated list.
</p>
<pre class="indent">
{2, 3, 5, 7, 11}    returns a bitset with the elements 2, 3, 5, 7 and 11.
</pre>
</dd>
</dl></div>
<hr />
<div><a name="{(in_integer)..(in_integer)}"><h3>{</h3></a>
<p>
const func bitset: <b>{</b> (in integer: lowValue) ..
                     (in integer: highValue) }</p><dl><dd>
<p>
Create <i>bitset</i> with all elements from <i>lowValue</i> to <i>highValue</i> inclusive.
</p>
<pre class="indent">
{1 .. 5}    returns a bitset with the elements 1, 2, 3, 4 and 5.
</pre>
</dd>
</dl></div>
<hr />
<div><a name="(attr_integer)conv(in_bitset)"><h3>conv</h3></a>
<p>
const func integer: (attr integer) <b>conv</b> (in bitset: aSet)</p><dl><dd>
<p>
Convert a <i>bitset</i> to <a class="link" href="integer.htm" title="integer">integer</a>.
</p>
<pre class="indent">
integer conv {2, 3, 5, 7, 11}    returns 2220
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an <a class="link" href="integer.htm" title="integer">integer</a> which corresponds to the given <i>bitset</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> contains negative values or            if it does not fit into a non-negative <a class="link" href="integer.htm" title="integer">integer</a>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bitset)conv(in_integer)"><h3>conv</h3></a>
<p>
const func bitset: (attr bitset) <b>conv</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a <i>bitset</i>.
</p>
<pre class="indent">
bitset conv 2220    returns {2, 3, 5, 7, 11}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>bitset</i> which corresponds to the given <a class="link" href="integer.htm" title="integer">integer</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - Number is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bitset)parse(in_string)"><h3>parse</h3></a>
<p>
const func bitset: (attr bitset) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bitset</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the integer result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string is empty or            cannot be converted to a <i>bitset</i>.</dd>
</dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_bitset,in_bitset)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in bitset: set1, in bitset: set2)</p><dl><dd>
<p>
Compares two sets to make them useable as key in a hash table.
The sets are compared by determining the biggest element that is
not present or absent in both sets. The set in which this element
is not present is the smaller one. Note that the set comparison
is not related to the concepts of subset or superset. With the
comparison function <i>compare</i> it is possible to sort an array of
sets or to use sets as key in a hash table.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_bitset)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in bitset: aSet)</p><dl><dd>
<p>
Compute the hash value of a <i>bitset</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="incl(inout_bitset,in_integer)"><h3>incl</h3></a>
<p>
const proc: <b>incl</b> (inout bitset: aSet, in integer: number)</p><dl><dd>
<p>
Add <i>number</i> to the set <i>aSet</i>.
If <i>number</i> is already in <i>aSet</i> then <i>aSet</i> stays unchanged.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - If there is not enough memory.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="excl(inout_bitset,in_integer)"><h3>excl</h3></a>
<p>
const proc: <b>excl</b> (inout bitset: aSet, in integer: number)</p><dl><dd>
<p>
Remove <i>number</i> from the set <i>aSet</i>.
If <i>number</i> is not element of <i>aSet</i> then <i>aSet</i> stays unchanged.
</p>
</dd>
</dl></div>
<hr />
<div><a name="card(in_bitset)"><h3>card</h3></a>
<p>
const func integer: <b>card</b> (in bitset: aSet)</p><dl><dd>
<p>
Compute the cardinality of a set.
</p>
<pre class="indent">
card({2, 3, 5, 7, 11})  returns  5
card(EMPTY_SET)         returns  0
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of elements in <i>aSet</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - Result does not fit into an integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rand(in_bitset)"><h3>rand</h3></a>
<p>
const func integer: <b>rand</b> (in bitset: aSet)</p><dl><dd>
<p>
Compute pseudo-random element from <i>aSet</i>.
The random values are uniform distributed.
</p>
<pre class="indent">
rand(EMPTY_SET)  raises  RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random number such that rand(aSet) in aSet holds.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> is empty.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="min(in_bitset)"><h3>min</h3></a>
<p>
const func integer: <b>min</b> (in bitset: aSet)</p><dl><dd>
<p>
Minimum element of a set.
Delivers the element from <i>aSet</i> for which the following condition holds:
</p>
<pre class="indent">
element &lt;= X
</pre>
<p>
for all X which are in the set.
</p>
<pre class="indent">
min({2, 3, 5, 7, 11})  returns  2
min(EMPTY_SET)         raises   RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the minimum element of <i>aSet</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> is the empty set.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="max(in_bitset)"><h3>max</h3></a>
<p>
const func integer: <b>max</b> (in bitset: aSet)</p><dl><dd>
<p>
Maximum element of a set.
Delivers the element from <i>aSet</i> for which the following condition holds:
</p>
<pre class="indent">
element >= X
</pre>
<p>
for all X which are in the set.
</p>
<pre class="indent">
max({2, 3, 5, 7, 11})  returns  11
max(EMPTY_SET)         raises   RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the maximum element of <i>aSet</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> is the empty set.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="next(in_bitset,in_integer)"><h3>next</h3></a>
<p>
const func integer: <b>next</b> (in bitset: aSet, in integer: number)</p><dl><dd>
<p>
Minimum element of <i>aSet</i> that is larger than <i>number</i>.
</p>
<pre class="indent">
next({2, 3, 5, 7, 11},  2)  returns  3
next({2, 3, 5, 7, 11},  3)  returns  5
next({2, 3, 5, 7, 11},  7)  returns  11
next({2, 3, 5, 7, 11}, 11)  raises   RANGE_ERROR
next({}, 1)                 raises   RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the minimum element of <i>aSet</i> that is larger than <i>number</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> has no element larger than <i>number</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_bitset)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in bitset: aSet)</p><dl><dd>
<p>
Convert a <i>bitset</i> to <a class="link" href="integer.htm" title="integer">integer</a>.
</p>
<pre class="indent">
integer({2, 3, 5, 7, 11})    returns 2220
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an <a class="link" href="integer.htm" title="integer">integer</a> which corresponds to the given <i>bitset</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aSet</i> contains negative values or            if it does not fit into a non-negative <a class="link" href="integer.htm" title="integer">integer</a>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bitset(in_integer)"><h3>bitset</h3></a>
<p>
const func bitset: <b>bitset</b> (in integer: number)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> number to a <i>bitset</i>.
</p>
<pre class="indent">
bitset(2220)    returns {2, 3, 5, 7, 11}
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>bitset</i> which corresponds to the given <a class="link" href="integer.htm" title="integer">integer</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - Number is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="for(inout_integer)range(in_bitset)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout integer: forVar) range (in bitset: aSet) do
              (in proc: statements)
            end for</p><dl><dd>
<p>
For-loop where <i>forVar</i> loops over the elements of the set <i>aSet</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="toArray(in_bitset)"><h3>toArray</h3></a>
<p>
const func array integer: <b>toArray</b> (in bitset: aSet)</p><dl><dd>
<p>
Obtain an array containing all the values in <i>aSet</i>.
</p>
<pre class="indent">
toArray({2, 3, 5})  returns  [](2, 3, 5)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>all the values from <i>aSet</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_bitset)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in bitset: aSet)</p><dl><dd>
<p>
Convert a <i>bitset</i> to a <a class="link" href="string.htm" title="string">string</a>.
</p>
<pre class="indent">
str({})      returns  "{}"
str({1, 2})  returns  "{1, 2}"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bitset(in_var_string)"><h3>bitset</h3></a>
<p>
const func bitset: <b>bitset</b> (in var string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bitset</i>.
</p>
<pre class="indent">
bitset("{}")            returns  {},
bitset("{2, 3, 5, 7}")  returns  {2, 3, 5, 7} )
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>bitset</i> which corresponds to the given literal.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the string is empty or            cannot be converted to a <i>bitset</i>.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bitmapfont.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bitsetof.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
