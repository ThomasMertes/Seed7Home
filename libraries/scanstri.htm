<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Scanstri</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="json_serde.htm">JSON serialize</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="scantoml.htm">Scan TOML</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="struct.htm">Struct</a>
<a class="menu" href="struct_elem.htm">Struct element</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tga.htm">TGA</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Scanstri</big></b></td>
<td align="right"><a class="link" href="../lib/scanstri.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/scanjson.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/scantoml.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipComment(inout_string)">skipComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips a possibly nested comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getComment(inout_string)">getComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a possibly nested comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipClassicComment(inout_string)">skipClassicComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips a classic C comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipLineComment(inout_string)">skipLineComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips a line comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getLineComment(inout_string)">getLineComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a line comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getDigits(inout_string)">getDigits</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a sequence of digits from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getHexDigits(inout_string)">getHexDigits</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a sequence of hexadecimal digits from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getInteger(inout_string)">getInteger</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a decimal integer with optional sign from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNumber(inout_string)">getNumber</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a numeric literal from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNonDigits(inout_string)">getNonDigits</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a sequence of non digits from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getQuotedText(inout_string)">getQuotedText</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a text quoted with characters like " and ' from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getCommandLineWord(inout_string)">getCommandLineWord</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Read a space terminated command line word, from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSimpleStringLiteral(inout_string)">getSimpleStringLiteral</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Read a simple <a class="link" href="string.htm" title="string">string</a> literal from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getEscapeSequence(in_string,inout_integer,inout_string)">getEscapeSequence</a></b> (in string: stri, inout integer: pos, inout string: symbol)</td></tr>
<tr><td width="30"></td><td>Reads an escape sequence from <i>stri</i> and appends it to <i>symbol</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getCharLiteral(inout_string)">getCharLiteral</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a character literal from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getStringLiteral(inout_string)">getStringLiteral</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a string literal from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getCStringLiteralText(inout_string)">getCStringLiteralText</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads the text of a string literal from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getLetters(inout_string)">getLetters</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a sequence of letters from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getName(inout_string)">getName</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads an alphanumeric name from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipSpace(inout_string)">skipSpace</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips space characters from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipSpaceOrTab(inout_string)">skipSpaceOrTab</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips space and tab characters from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipWhiteSpace(inout_string)">skipWhiteSpace</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips whitespace characters from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getWhiteSpace(inout_string)">getWhiteSpace</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads whitespace characters from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getWord(inout_string)">getWord</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a white space delimited word from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getWord(inout_string,in_set_of_char)">getWord</a></b> (inout string: stri, in set of char: wordChars)</td></tr>
<tr><td width="30"></td><td>Reads a word consisting of <i>wordChars</i> from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipLine(inout_string)">skipLine</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips a line from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getLine(inout_string)">getLine</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a line from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbolOrComment(inout_string)">getSymbolOrComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a symbol or a comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbol(inout_string)">getSymbol</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a symbol from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipXmlComment(inout_string)">skipXmlComment</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips an XML comment from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlTagOrContent(inout_string)">getXmlTagOrContent</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads an XML/HTML tag or the XML/HTML content text from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlCdataContent(inout_string)">getXmlCdataContent</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Read the content text of a CDATA section.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlTagHeadOrContent(inout_string)">getXmlTagHeadOrContent</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads an XML/HTML tag head or an XML/HTML content from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbolInXmlTag(inout_string)">getSymbolInXmlTag</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a symbol which can appear inside an XML/HTML tag from <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipXmlTag(inout_string)">skipXmlTag</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Skips beyond an XML Tag in a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipXmlTag(inout_string,in_var_string)">skipXmlTag</a></b> (inout string: stri, in var string: symbol)</td></tr>
<tr><td width="30"></td><td>Skips beyond an XML Tag in a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNextXmlAttribute(inout_string,inout_string,inout_string)">getNextXmlAttribute</a></b> (inout string: stri,
    inout string: attributeName, inout string: attributeValue)</td></tr>
<tr><td width="30"></td><td>Reads name and value of an attribute inside an XML tag from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getHtmlAttributeValue(inout_string)">getHtmlAttributeValue</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a HTML tag attribute value from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNextHtmlAttribute(inout_string,inout_string,inout_string)">getNextHtmlAttribute</a></b> (inout string: stri,
    inout string: attributeName, inout string: attributeValue)</td></tr>
<tr><td width="30"></td><td>Reads name and value of an attribute inside a HTML tag from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getHttpSymbol(inout_string)">getHttpSymbol</a></b> (inout string: stri)</td></tr>
<tr><td width="30"></td><td>Reads a symbol which appears in a HTTP header from a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="skipComment(inout_string)"><h3>skipComment</h3></a>
<p>
const proc: <b>skipComment</b> (inout string: stri)</p><dl><dd>
<p>
Skips a possibly nested comment from a <a class="link" href="string.htm" title="string">string</a>.
The comment starts with (* and ends with *) . When the function
is called it is assumed that stri[1] contains the '*' of the
comment start. When the function is left <i>stri</i> is empty or
stri[1] contains the character after the ')'.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getComment(inout_string)"><h3>getComment</h3></a>
<p>
const func string: <b>getComment</b> (inout string: stri)</p><dl><dd>
<p>
Reads a possibly nested comment from a <a class="link" href="string.htm" title="string">string</a>.
The comment starts with (* and ends with *) . When the function
is called it is assumed that stri[1] contains the '*' of the
comment start. When the function is left <i>stri</i> is empty or
stri[1] contains the character after the ')'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content of the comment, including the introducing (*         and the ending *) .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipClassicComment(inout_string)"><h3>skipClassicComment</h3></a>
<p>
const proc: <b>skipClassicComment</b> (inout string: stri)</p><dl><dd>
<p>
Skips a classic C comment from a <a class="link" href="string.htm" title="string">string</a>.
The comment starts with /* and ends with */ . In a classic
C comment no nesting of comments is allowed. When the function
is called it is assumed that stri[1] contains the '*'
of the comment start.  When the function is left <i>stri</i>
is empty or stri[1] contains the character after the '/'.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipLineComment(inout_string)"><h3>skipLineComment</h3></a>
<p>
const proc: <b>skipLineComment</b> (inout string: stri)</p><dl><dd>
<p>
Skips a line comment from a <a class="link" href="string.htm" title="string">string</a>.
A line comment starts with an introducing character (like '#')
and ends with the end of the line. When the function is called
it is assumed that <i>stri</i> is empty or stri[1] contains the
introducing character (e.g. '#'). When the function is left
<i>stri</i> is empty or stri[1] contains the line end character
('\n').
</p>
</dd>
</dl></div>
<hr />
<div><a name="getLineComment(inout_string)"><h3>getLineComment</h3></a>
<p>
const func string: <b>getLineComment</b> (inout string: stri)</p><dl><dd>
<p>
Reads a line comment from a <a class="link" href="string.htm" title="string">string</a>.
A line comment starts with an introducing character (like '#')
and ends with the end of the line. When the function is called
it is assumed that <i>stri</i> is empty or stri[1] contains the
introducing character (e.g. '#'). When the function is left
<i>stri</i> is empty or stri[1] contains the line end character
('\n').
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content of the comment, including the start marker         (e.g. '#') but without line end character ('\n').</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getDigits(inout_string)"><h3>getDigits</h3></a>
<p>
const func string: <b>getDigits</b> (inout string: stri)</p><dl><dd>
<p>
Reads a sequence of digits from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the digits.
</p>
<pre class="indent">
stri := "12";    getDigits(stri)  returns  "12"  and stri = ""
stri := "12ab";  getDigits(stri)  returns  "12"  and stri = "ab"
stri := "ab";    getDigits(stri)  returns  ""    and stri = "ab"
stri := " 12";   getDigits(stri)  returns  ""    and stri = " 12"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the digit sequence, and         "" if no digit was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getHexDigits(inout_string)"><h3>getHexDigits</h3></a>
<p>
const func string: <b>getHexDigits</b> (inout string: stri)</p><dl><dd>
<p>
Reads a sequence of hexadecimal digits from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the hexadecimal digits.
</p>
<pre class="indent">
stri := "1f";   getHexDigits(stri)  returns  "1f"  and stri = ""
stri := "1ag";  getHexDigits(stri)  returns  "1a"  and stri = "g"
stri := "gx";   getHexDigits(stri)  returns  ""    and stri = "gx"
stri := " 1a";  getHexDigits(stri)  returns  ""    and stri = " 1a"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the digit sequence, and         "" if no digit was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getInteger(inout_string)"><h3>getInteger</h3></a>
<p>
const func string: <b>getInteger</b> (inout string: stri)</p><dl><dd>
<p>
Reads a decimal integer with optional sign from a <a class="link" href="string.htm" title="string">string</a>.
A decimal integer accepted by <i>getInteger</i> consists of an optional
+ or - sign followed by a possibly empty sequence of digits. Because
of the LL(1) approach, a sign without following digits is accepted.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the integer.
</p>
<pre class="indent">
stri := "123*2";  getInteger(stri)  returns  "123"  and stri = "*2"
stri := "+1-2";   getInteger(stri)  returns  "+1"   and stri = "-2"
stri := "-2+3";   getInteger(stri)  returns  "-2"   and stri = "+3"
stri := "+-0";    getInteger(stri)  returns  "+"    and stri = "-0"
stri := "pi";     getInteger(stri)  returns  ""     and stri = "pi"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decimal integer string, and         "" if no integer was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getNumber(inout_string)"><h3>getNumber</h3></a>
<p>
const func string: <b>getNumber</b> (inout string: stri)</p><dl><dd>
<p>
Reads a numeric literal from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the introducing digit. When the function is left
<i>stri</i> is empty or stri[1] contains the character after the
literal.
</p>
<pre class="indent">
stri := "1x";      getNumber(stri)  returns  "1"       and stri = "x"
stri := "1.0+";    getNumber(stri)  returns  "1.0"     and stri = "+"
stri := "1.0E1-";  getNumber(stri)  returns  "1.0E1"   and stri = "-"
stri := "1.0e-1";  getNumber(stri)  returns  "1.0e-1"  and stri = ""
stri := "2#101*";  getNumber(stri)  returns  "2#101"   and stri = "*"
stri := "1e2y";    getNumber(stri)  returns  "1e2"     and stri = "y"
stri := "1E+3z";   getNumber(stri)  returns  "1E+3"    and stri = "z"
stri := "1234_/";  getNumber(stri)  returns  "1234_"   and stri = "/"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>The function returns the numeric literal.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getNonDigits(inout_string)"><h3>getNonDigits</h3></a>
<p>
const func string: <b>getNonDigits</b> (inout string: stri)</p><dl><dd>
<p>
Reads a sequence of non digits from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains a digit.
</p>
<pre class="indent">
stri := "1+2";   getNonDigits(stri)  returns  ""    and stri = "1+2"
stri := " 1+2";  getNonDigits(stri)  returns  " "   and stri = "1+2"
stri := "-1+2";  getNonDigits(stri)  returns  "-"   and stri = "1+2"
stri := "a+2";   getNonDigits(stri)  returns  "a+"  and stri = "2"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the non digit sequence, and         "" if a digit was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getQuotedText(inout_string)"><h3>getQuotedText</h3></a>
<p>
const func string: <b>getQuotedText</b> (inout string: stri)</p><dl><dd>
<p>
Reads a text quoted with characters like " and ' from a <a class="link" href="string.htm" title="string">string</a>.
The introducing and the closing quoting character must be identical.
When the function is called it is assumed that stri[1] contains the
introducing quoting character (which can be any character). When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the closing quoting character.
</p>
<pre class="indent">
stri := "'ab'+";  getQuotedText(stri)  returns  "ab"  and stri = "+"
stri := "''=a";   getQuotedText(stri)  returns  ""    and stri = "=a"
stri := "\"A\"";  getQuotedText(stri)  returns  "A"   and stri = ""
stri := "\"\"?";  getQuotedText(stri)  returns  ""    and stri = "?"
stri := ":ab:5";  getQuotedText(stri)  returns  "ab"  and stri = "5"
stri := "+XY";    getQuotedText(stri)  returns  "XY"  and stri = ""
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string literal without introducing or closing         characters ( " or ' ).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getCommandLineWord(inout_string)"><h3>getCommandLineWord</h3></a>
<p>
const func string: <b>getCommandLineWord</b> (inout string: stri)</p><dl><dd>
<p>
Read a space terminated command line word, from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the word it skips whitespace characters. A command
line word can consist of unquoted and quoted parts. A quoted part
is introduced with double quotes (") and ends with unescaped
double quotes. A \ (backslash) is used to escape characters that
would terminate the word respectively the quoted part. The
backslash is ignored and the character after it is added to the
word. To represent a backslash it must be doubled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the terminating space. Examples:
</p>
<pre class="indent">
stri := "a b c";        getCommandLineWord(stri) returns "a"
stri := "a\\ b c";      getCommandLineWord(stri) returns "a b"
stri := " a b c";       getCommandLineWord(stri) returns "a"
stri := "\\ a b c";     getCommandLineWord(stri) returns " a"
stri := "a\\\"b c";     getCommandLineWord(stri) returns "a\"b"
stri := "a\" b\" c";    getCommandLineWord(stri) returns "a b"
stri := "\"a b\" c";    getCommandLineWord(stri) returns "a b"
stri := " \"a\" b c";   getCommandLineWord(stri) returns "a"
stri := "\" a\" b c";   getCommandLineWord(stri) returns " a"
stri := " \" a\" b c";  getCommandLineWord(stri) returns " a"
stri := "\"a\\\"b\" c"; getCommandLineWord(stri) returns "a\"b"
stri := "a\\\\b c";     getCommandLineWord(stri) returns "a\\b"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the space terminated word (without terminating space).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSimpleStringLiteral(inout_string)"><h3>getSimpleStringLiteral</h3></a>
<p>
const func string: <b>getSimpleStringLiteral</b> (inout string: stri)</p><dl><dd>
<p>
Read a simple <a class="link" href="string.htm" title="string">string</a> literal from a <a class="link" href="string.htm" title="string">string</a>.
A simple string literal is enclosed in delimiter characters
(e.g. " or ' ). Delimiter characters within the simple string
literal must be doubled. A simple string literal does not
support an escape character. All characters, including control
characters (e.g. linefeed) are allowed inside a simple string
literal. When the function is called it is assumed that
stri[1] contains the introducing delimiter character.
When the function is left <i>stri</i> is empty or stri[1]
contains the character after the closing delimiter.
</p>
<pre class="indent">
stri := "\"\"";        getSimpleStringLiteral(stri) returns "\"\""
stri := "\"\"x";       getSimpleStringLiteral(stri) returns "\"\""
stri := "\"\"\"";      getSimpleStringLiteral(stri) returns "\"\"\""
stri := "\"\"\"\"";    getSimpleStringLiteral(stri) returns "\"\"\""
stri := "\"a\"\"\"";   getSimpleStringLiteral(stri) returns "\"a\"\""
stri := "\"\"\"b\"";   getSimpleStringLiteral(stri) returns "\"\"b\""
stri := "\"a\"\"b\"";  getSimpleStringLiteral(stri) returns "\"a\"b\""
stri := "\"\"\"\"x";   getSimpleStringLiteral(stri) returns "\"\"\""
stri := "\"a\"\"\"x";  getSimpleStringLiteral(stri) returns "\"a\"\""
stri := "\"\"\"b\"x";  getSimpleStringLiteral(stri) returns "\"\"b\""
stri := "\"a\"\"b\"x"; getSimpleStringLiteral(stri) returns "\"a\"b\""
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string literal including the introducing and         closing delimiter character. Double delimiter chars in         the literal are converted to single delimiter chars.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getEscapeSequence(in_string,inout_integer,inout_string)"><h3>getEscapeSequence</h3></a>
<p>
const proc: <b>getEscapeSequence</b> (in string: stri, inout integer: pos, inout string: symbol)</p><dl><dd>
<p>
Reads an escape sequence from <i>stri</i> and appends it to <i>symbol</i>.
The function accepts escape sequences from character and string
literals. When the function is called it is assumed that stri[1]
contains the introducing \ . When the function is left stri[1]
contains the character after the escape sequence. The complete
escape sequence including the introducing \ is appended to
<i>symbol</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getCharLiteral(inout_string)"><h3>getCharLiteral</h3></a>
<p>
const func string: <b>getCharLiteral</b> (inout string: stri)</p><dl><dd>
<p>
Reads a character literal from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that stri[1] contains
the introducing ' . When the function is left <i>stri</i> is empty or
stri[1] contains the character after the closing ' .
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character literal including the introducing ' and         the closing ' .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getStringLiteral(inout_string)"><h3>getStringLiteral</h3></a>
<p>
const func string: <b>getStringLiteral</b> (inout string: stri)</p><dl><dd>
<p>
Reads a string literal from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that stri[1] contains
the introducing " . When the function is left <i>stri</i> is empty or
stri[1] contains the character after the closing " .
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string literal including the introducing " and the         closing " .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getCStringLiteralText(inout_string)"><h3>getCStringLiteralText</h3></a>
<p>
const func string: <b>getCStringLiteralText</b> (inout string: stri)</p><dl><dd>
<p>
Reads the text of a string literal from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that stri[1] contains
the introducing " . When the function is left <i>stri</i> is empty or
stri[1] contains the character after the closing " .
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the text of the string literal without introducing or         closing " .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getLetters(inout_string)"><h3>getLetters</h3></a>
<p>
const func string: <b>getLetters</b> (inout string: stri)</p><dl><dd>
<p>
Reads a sequence of letters from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the letters.
</p>
<pre class="indent">
stri := "test";    getLetters(stri)  returns  "test"  and stri = ""
stri := "test1";   getLetters(stri)  returns  "test"  and stri = "1";
stri := "test+1";  getLetters(stri)  returns  "test"  and stri = "+1"
stri := "+1";      getLetters(stri)  returns  ""      and stri = "+1"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the letter sequence, and         "" if no letter was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getName(inout_string)"><h3>getName</h3></a>
<p>
const func string: <b>getName</b> (inout string: stri)</p><dl><dd>
<p>
Reads an alphanumeric name from a <a class="link" href="string.htm" title="string">string</a>.
A name consists of a letter or underscore followed by letters,
digits or underscores. When the function is called it is assumed
that <i>stri</i> is empty or stri[1] contains the first character to be
handled. When the function is left <i>stri</i> is empty or stri[1]
contains the character after the name.
</p>
<pre class="indent">
stri := "test";    getName(stri)  returns  "test"   and stri = ""
stri := "test1";   getName(stri)  returns  "test1"  and stri = "";
stri := "test+1";  getName(stri)  returns  "test"   and stri = "+1"
stri := "+1";      getName(stri)  returns  ""       and stri = "+1"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the name, and         "" if no letter or underscore was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipSpace(inout_string)"><h3>skipSpace</h3></a>
<p>
const proc: <b>skipSpace</b> (inout string: stri)</p><dl><dd>
<p>
Skips space characters from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the space characters.
</p>
<pre class="indent">
stri := "  ok";  skipSpace(stri);  afterwards  stri = "ok"
stri := "   ";   skipSpace(stri);  afterwards  stri = ""
stri := "ok ";   skipSpace(stri);  afterwards  stri = "ok "
</pre>
</dd>
</dl></div>
<hr />
<div><a name="skipSpaceOrTab(inout_string)"><h3>skipSpaceOrTab</h3></a>
<p>
const proc: <b>skipSpaceOrTab</b> (inout string: stri)</p><dl><dd>
<p>
Skips space and tab characters from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the sequence of space and tab characters.
</p>
<pre class="indent">
stri := "\t x";  skipSpaceOrTab(stri);  afterwards  stri = "x"
stri := "\t  ";  skipSpaceOrTab(stri);  afterwards  stri = ""
stri := "abc ";  skipSpaceOrTab(stri);  afterwards  stri = "abc "
</pre>
</dd>
</dl></div>
<hr />
<div><a name="skipWhiteSpace(inout_string)"><h3>skipWhiteSpace</h3></a>
<p>
const proc: <b>skipWhiteSpace</b> (inout string: stri)</p><dl><dd>
<p>
Skips whitespace characters from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the whitespace characters.
</p>
<pre class="indent">
stri := "\t\n\r X";  skipWhiteSpace(stri);  afterwards  stri = "X"
stri := "\t\n\r ";   skipWhiteSpace(stri);  afterwards  stri = ""
stri := "X ";        skipWhiteSpace(stri);  afterwards  stri = "X "
</pre>
</dd>
</dl></div>
<hr />
<div><a name="getWhiteSpace(inout_string)"><h3>getWhiteSpace</h3></a>
<p>
const func string: <b>getWhiteSpace</b> (inout string: stri)</p><dl><dd>
<p>
Reads whitespace characters from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the whitespace characters.
</p>
<pre class="indent">
stri := "\t X";  getWhiteSpace(stri)  returns  "\t "   and stri = "X"
stri := "\r\n";  getWhiteSpace(stri)  returns  "\r\n"  and stri = ""
stri := "X ";    getWhiteSpace(stri)  returns  ""      and stri = "X "
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string of whitespace characters, and         "" if no whitespace character was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getWord(inout_string)"><h3>getWord</h3></a>
<p>
const func string: <b>getWord</b> (inout string: stri)</p><dl><dd>
<p>
Reads a white space delimited word from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the word it skips whitespace characters. A word is
a sequence of characters which does not contain a whitespace
character. When the function is called it is assumed that <i>stri</i>
is empty or stri[1] contains the first character to be handled.
When the function is left <i>stri</i> is empty or stri[1] contains the
character after the word.
</p>
<pre class="indent">
stri := " abc";   getWord(stri)  returns  "abc"  and stri = ""
stri := " abc ";  getWord(stri)  returns  "abc"  and stri = " "
stri := "abc\t";  getWord(stri)  returns  "abc"  and stri = "\t"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the word, and "" if no word was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getWord(inout_string,in_set_of_char)"><h3>getWord</h3></a>
<p>
const func string: <b>getWord</b> (inout string: stri, in set of char: wordChars)</p><dl><dd>
<p>
Reads a word consisting of <i>wordChars</i> from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the word it skips non-<i>wordChars</i> characters.
A word is a sequence of <i>wordChars</i> characters. When the function
is called it is assumed that <i>stri</i> is empty or stri[1] contains
the first character to be handled. When the function is left
<i>stri</i> is empty or stri[1] contains the character after the word.
</p>
<pre class="indent">
stri := " a1";   getWord(stri, alphanum_char)  returns  "a1"  and stri = ""
stri := "-a2.";  getWord(stri, alphanum_char)  returns  "a2"  and stri = "."
stri := "=a3,";  getWord(stri, alphanum_char)  returns  "a3"  and stri = ","
stri := "a4\t";  getWord(stri, alphanum_char)  returns  "a4"  and stri = "\t"
stri := ", a5";  getWord(stri, alphanum_char)  returns  "a5"  and stri = ""
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the word, and "" if no word was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipLine(inout_string)"><h3>skipLine</h3></a>
<p>
const proc: <b>skipLine</b> (inout string: stri)</p><dl><dd>
<p>
Skips a line from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains '\n'.
If stri[1] already contains '\n' nothing is done.
</p>
<pre class="indent">
stri := "ab\nc";  skipLine(stri);  afterwards  stri = "\nc"
stri := "abc";    skipLine(stri);  afterwards  stri = ""
</pre>
</dd>
</dl></div>
<hr />
<div><a name="getLine(inout_string)"><h3>getLine</h3></a>
<p>
const func string: <b>getLine</b> (inout string: stri)</p><dl><dd>
<p>
Reads a line from a <a class="link" href="string.htm" title="string">string</a>.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains the first character to be handled. When the
function is left <i>stri</i> is empty or stri[1] contains '\n'.
If stri[1] already contains '\n' nothing is done and the
function returns "" .
</p>
<pre class="indent">
stri := "ab\nc";  getLine(stri)  returns  "ab"   and stri = "\nc"
stri := "abc";    getLine(stri)  returns  "abc"  and stri = ""
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the line read, and         "" if <i>stri</i> is empty or stri[1] contains '\n'.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbolOrComment(inout_string)"><h3>getSymbolOrComment</h3></a>
<p>
const func string: <b>getSymbolOrComment</b> (inout string: stri)</p><dl><dd>
<p>
Reads a symbol or a comment from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the symbol or comment it skips whitespace
characters. A symbol can be a literal (numeric, character or
string), a name, a special symbol (sequence of special characters)
or a parenthesis. A comment can be a normal comment or a line
comment. When the function is called it is assumed that <i>stri</i> is
empty or stri[1] contains a whitespace character or the first
character of a symbol or comment. When the function is left <i>stri</i>
is empty or stri[1] contains the character after the symbol or
comment.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol or comment, and         "" if the end of <i>stri</i> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbol(inout_string)"><h3>getSymbol</h3></a>
<p>
const func string: <b>getSymbol</b> (inout string: stri)</p><dl><dd>
<p>
Reads a symbol from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the symbol it skips whitespace characters and
comments (normal comments and line comments). A symbol can be a
literal (numeric, character or string), a name, a special symbol
(sequence of special characters) or a parenthesis. When the
function is called it is assumed that <i>stri</i> is empty or stri[1]
contains a whitespace character or the first character of a symbol
or comment. When the function is left <i>stri</i> is empty or stri[1]
contains the character after the symbol.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol, and         "" if end of <i>stri</i> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipXmlComment(inout_string)"><h3>skipXmlComment</h3></a>
<p>
const proc: <b>skipXmlComment</b> (inout string: stri)</p><dl><dd>
<p>
Skips an XML comment from a <a class="link" href="string.htm" title="string">string</a>.
The XML comment starts with &lt;!-- and ends with --> . When the
function is called it is assumed that stri[1] contains the
last '-' of the introducing &lt;!-- . When the function is left
<i>stri</i> is empty or stri[1] contains the character after --> .
</p>
</dd>
</dl></div>
<hr />
<div><a name="getXmlTagOrContent(inout_string)"><h3>getXmlTagOrContent</h3></a>
<p>
const func string: <b>getXmlTagOrContent</b> (inout string: stri)</p><dl><dd>
<p>
Reads an XML/HTML tag or the XML/HTML content text from a <a class="link" href="string.htm" title="string">string</a>.
An XML/HTML tag starts with &lt; and ends with > . The content text
starts with everything else and ends just before a &lt; or with the end
of <i>stri</i>. When the function is called it is assumed that stri[1]
contains the introducing &lt; of an XML/HTML tag or the first character
of the content text. When the function is left the character after
the XML/HTML tag or the content text is in stri[1].
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the XML/HTML tag or XML/HTML content text, and         "" if the end of <i>stri</i> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getXmlCdataContent(inout_string)"><h3>getXmlCdataContent</h3></a>
<p>
const func string: <b>getXmlCdataContent</b> (inout string: stri)</p><dl><dd>
<p>
Read the content text of a CDATA section.
In a CDATA section the text between &lt;![CDATA[ and ]]> is considered
content text. Inside a CDATA section the characters &lt; and &amp; have no
special meaning. All occurances of &lt; and &amp; inside CDATA are returned
as &amp;lt; and &amp;amp; respectively. When the function is called it is
assumed that <i>stri</i> is empty or stri[1] contains the first character
after the introducing &lt;![CDATA[ sequence. When the function is left
<i>stri</i> is empty or stri[1] contains the character after final
]]> sequence.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Input <a class="link" href="string.htm" title="string">string</a> from which the consumed characters are removed.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content text of the CDATA section that has been read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getXmlTagHeadOrContent(inout_string)"><h3>getXmlTagHeadOrContent</h3></a>
<p>
const func string: <b>getXmlTagHeadOrContent</b> (inout string: stri)</p><dl><dd>
<p>
Reads an XML/HTML tag head or an XML/HTML content from a <a class="link" href="string.htm" title="string">string</a>.
Examples of XML/HTML tag heads are:
</p>
<pre class="indent">
&lt;html
&lt;meta
&lt;table
&lt;/span
</pre>
<p>
Before reading a tag head or content, it skips whitespace characters
and XML comments. An XML/HTML tag head starts with &lt; and ends
before a > or a / or a whitespace character or the end of <i>stri</i>.
The content text starts with a non whitespace character and ends
just before a &lt; or with the end of <i>stri</i>. Content text can be
also in a CDATA section. In a CDATA section the text between
&lt;![CDATA[ and ]]> is considered content text. Inside a CDATA section
the characters &lt; and &amp; have no special meaning. All occurances of
&lt; and &amp; inside CDATA are returned as &amp;lt; and &amp;amp; respectively.
When the function is called it is assumed that <i>stri</i> is empty
or stri[1] contains either a whitespace character, the introducing
&lt; of an XML/HTML tag or the first character of the content text.
When the function is left, <i>stri</i> is empty or stri[1] contains
the character after the XML/HTML tag head or the content text.
Text between &lt;!-- and --> is considered an XML comment. An XML
comment is ignored and getXmlTagHeadOrContent() is called recursive.
The function can be used as follows:
</p>
<pre class="indent">
symbol := getXmlTagHeadOrContent(stri);
if startsWith(symbol, "&lt;/") then
  ... handle the XML/HTML end-tag ...
elsif startsWith(symbol, "&lt;") then
  ... handle the attributes of the XML/HTML start-tag ...
else
  ... handle the content text ...
end if;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Input <a class="link" href="string.htm" title="string">string</a> from which the consumed characters are removed.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the XML/HTML tag head or XML/HTML content text, and         "" if the end of <i>stri</i> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbolInXmlTag(inout_string)"><h3>getSymbolInXmlTag</h3></a>
<p>
const func string: <b>getSymbolInXmlTag</b> (inout string: stri)</p><dl><dd>
<p>
Reads a symbol which can appear inside an XML/HTML tag from <a class="link" href="string.htm" title="string">string</a>.
Before reading the symbol it skips whitespace characters. A symbol
inside an XML/HTML tag can be a name, a string literal (quoted with "
or ' ), the equals sign (=), the end of tag character (>), the slash
character (/) or a special symbol (a sequence of characters that
does not include the character > or a whitespace character). Special
symbols can only appear in HTML tags. When the function is called it
is assumed that <i>stri</i> is empty or stri[1] contains a whitespace
character or the first character of a symbol. When the function is
left <i>stri</i> is empty or stri[1] contains the character after the
symbol.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Input <a class="link" href="string.htm" title="string">string</a> from which the consumed characters are removed.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol, and         "" if the end of <i>stri</i> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipXmlTag(inout_string)"><h3>skipXmlTag</h3></a>
<p>
const proc: <b>skipXmlTag</b> (inout string: stri)</p><dl><dd>
<p>
Skips beyond an XML Tag in a <a class="link" href="string.htm" title="string">string</a>.
When the function is left <i>stri</i> is empty or stri[1] contains
the character after '>'.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipXmlTag(inout_string,in_var_string)"><h3>skipXmlTag</h3></a>
<p>
const proc: <b>skipXmlTag</b> (inout string: stri, in var string: symbol)</p><dl><dd>
<p>
Skips beyond an XML Tag in a <a class="link" href="string.htm" title="string">string</a>.
The parameter <i>symbol</i> is used to provide the current symbol
which possibly can be ">" or "". When the function is left
<i>stri</i> is empty or stri[1] contains the character after '>'.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getNextXmlAttribute(inout_string,inout_string,inout_string)"><h3>getNextXmlAttribute</h3></a>
<p>
const proc: <b>getNextXmlAttribute</b> (inout string: stri,
    inout string: attributeName, inout string: attributeValue)</p><dl><dd>
<p>
Reads name and value of an attribute inside an XML tag from a <a class="link" href="string.htm" title="string">string</a>.
The function skips possible leading whitespace characters. Attribute
name and value are returned in <i>attributeName</i> and <i>attributeValue</i>
respectively. Attribute assignments can have the following forms:
</p>
<pre class="indent">
aName="aValue"
aName='aValue'
</pre>
<p>
Surrounding single or double quotes of the attribute value are omitted.
It is a syntax error if an attribute value is not quoted. White
space characters before and after the = are ignored. XML entities
in <i>attributeValue</i> are left as is. If no more attributes are
present in the XML tag <i>attributeName</i> is set to "". In this case
<i>attributeValue</i> contains the end of the XML tag (">" or "/>") and
<i>stri</i> is empty or stri[1] contains the character after '>'.
If a syntax error occurs the function skips beyond the end of
the XML tag (<i>stri</i> is empty or stri[1] contains the character
after '>'). To indicate the syntax error <i>attributeName</i> is
set to "" and <i>attributeValue</i> is set to a symbol shortly before
the error (this will never be ">" or "/>"). The attributes of
an XML start-tag or empty-element tag can be processed with:
</p>
<pre class="indent">
getNextXmlAttribute(stri, attributeName, attributeValue);
while attributeName &lt;> "" do
  ... process the current attribute ...
  getNextXmlAttribute(stri, attributeName, attributeValue);
end while;
if attributeValue = "/>" then
  ... this is an empty-element tag ...
elsif attributeValue = ">" then
  ... this is a start-tag ...
else
  ... there is a syntax error ...
end if;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Input <a class="link" href="string.htm" title="string">string</a> from which the consumed characters are removed.</dd>
<dd><tt>attributeName</tt> - Destination for the attribute name.</dd>
<dd><tt>attributeValue</tt> - Destination for the attribute value:</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getHtmlAttributeValue(inout_string)"><h3>getHtmlAttributeValue</h3></a>
<p>
const func string: <b>getHtmlAttributeValue</b> (inout string: stri)</p><dl><dd>
<p>
Reads a HTML tag attribute value from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the value it skips whitespace characters. A HTML
tag attribute value can be quoted with " or ' or it is terminated
with the character > or a whitespace character. When the function
is called it is assumed that <i>stri</i> is empty or stri[1] contains
a whitespace character or the first character of a value. When the
function is left <i>stri</i> is empty or stri[1] contains the character
after the attribute value.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Input <a class="link" href="string.htm" title="string">string</a> from which the consumed characters are removed.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the attribute value, and         "" if the end of the HTML tag or the end of <i>stri</i> is             directly after the skipped whitespace characters.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getNextHtmlAttribute(inout_string,inout_string,inout_string)"><h3>getNextHtmlAttribute</h3></a>
<p>
const proc: <b>getNextHtmlAttribute</b> (inout string: stri,
    inout string: attributeName, inout string: attributeValue)</p><dl><dd>
<p>
Reads name and value of an attribute inside a HTML tag from a <a class="link" href="string.htm" title="string">string</a>.
The function skips possible leading whitespace characters. Attribute
name and value are returned in <i>attributeName</i> and <i>attributeValue</i>
respectively. Attribute assignments can have the following forms:
</p>
<pre class="indent">
aName="aValue"
aName='aValue'
aName=aValue
aName
</pre>
<p>
Possible surrounding single or double quotes of the attribute value
are omitted. White space characters before and after the = are
ignored. HTML entities in <i>attributeValue</i> are left as is.
If no more attributes are present in the XML tag <i>attributeName</i>
is set to "". In this case <i>attributeValue</i> contains the end of
the HTML tag (">" or "/>") and <i>stri</i> is empty or stri[1] contains
the character after '>'. The attributes of a HTML start-tag or
empty-element tag can be processed with:
</p>
<pre class="indent">
getNextHtmlAttribute(stri, attributeName, attributeValue);
while attributeName &lt;> "" do
  ... process the current attribute ...
  getNextHtmlAttribute(stri, attributeName, attributeValue);
end while;
if attributeValue = "/>" then
  ... this is an empty-element tag ...
else  # attributeValue = ">"
  ... this is a start-tag ...
end if;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Input <a class="link" href="string.htm" title="string">string</a> from which the consumed characters are removed.</dd>
<dd><tt>attributeName</tt> - Destination for the attribute name.</dd>
<dd><tt>attributeValue</tt> - Destination for the attribute value:</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getHttpSymbol(inout_string)"><h3>getHttpSymbol</h3></a>
<p>
const func string: <b>getHttpSymbol</b> (inout string: stri)</p><dl><dd>
<p>
Reads a symbol which appears in a HTTP header from a <a class="link" href="string.htm" title="string">string</a>.
Before reading the symbol it skips whitespace characters. A symbol
from a HTTP header can be a token a string literal or a separator.
When the function is called it is assumed that <i>stri</i> is empty or
stri[1] contains a whitespace character or the first character of
a symbol. When the function is left <i>stri</i> is empty or stri[1]
contains the character after the symbol.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol, and         "" if the end of <i>stri</i> was reached.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/scanjson.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/scantoml.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
