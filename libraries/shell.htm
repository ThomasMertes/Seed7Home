<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Shell</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Shell</big></b></td>
<td align="right"><a class="link" href="../lib/shell.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/set.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/showtls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popenFile">popenFile</a></b></td></tr>
<tr><td width="30"></td><td><a class="link" href="file.htm" title="File">File</a> implementation type for operating system pipes.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen8File">popen8File</a></b></td></tr>
<tr><td width="30"></td><td><a class="link" href="file.htm" title="File">File</a> implementation type for UTF-8 encoded operating system pipes.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="popenFile"><h3>popenFile</h3></a>
<p>
const type: <b>popenFile</b></p><dl><dd>
<p>
<a class="link" href="file.htm" title="File">File</a> implementation type for operating system pipes.
</p>
</dd>
</dl></div>
<hr />
<div><a name="popen8File"><h3>popen8File</h3></a>
<p>
const type: <b>popen8File</b></p><dl><dd>
<p>
<a class="link" href="file.htm" title="File">File</a> implementation type for UTF-8 encoded operating system pipes.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#shell(in_string,in_string)">shell</a></b> (in string: command,
                           in string: parameters)</td></tr>
<tr><td width="30"></td><td>Use the shell to execute a <i>command</i> with <i>parameters</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#shellCmd(in_string,in_string)">shellCmd</a></b> (in string: command, in string: parameters)</td></tr>
<tr><td width="30"></td><td>Use the shell to execute a <i>command</i> with <i>parameters</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#shell(in_string)">shell</a></b> (in string: cmdAndParams)</td></tr>
<tr><td width="30"></td><td>Executes a command using the shell of the operating system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#shellCmd(in_string)">shellCmd</a></b> (in string: cmdAndParams)</td></tr>
<tr><td width="30"></td><td>Executes a command using the shell of the operating system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#shellEscape(in_string)">shellEscape</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a>, such that it can be used as shell parameter.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toOsPath(in_string)">toOsPath</a></b> (in string: standardPath)</td></tr>
<tr><td width="30"></td><td>Convert a standard path to the path of the operating system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toShellPath(in_string)">toShellPath</a></b> (in string: path)</td></tr>
<tr><td width="30"></td><td>Convert a standard path such that it can be used as shell parameter.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen(in_string,in_string,in_string)">popen</a></b> (in string: command, in string: parameters,
    in string: mode)</td></tr>
<tr><td width="30"></td><td>Open a pipe to a shell <i>command</i> with <i>parameters</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen(in_string,in_string)">popen</a></b> (in string: cmdAndParams, in string: mode)</td></tr>
<tr><td width="30"></td><td>Open a pipe to a shell command.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen(in_string,in_array_string,in_string)">popen</a></b> (in string: command, in array string: paramList,
    in string: mode)</td></tr>
<tr><td width="30"></td><td>Open a pipe to a shell <i>command</i> with a <i>paramList</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(in_popenFile)">close</a></b> (in popenFile: aPipe)</td></tr>
<tr><td width="30"></td><td>Wait for the process associated with aPipe to terminate.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen8(in_string,in_string,in_string)">popen8</a></b> (in string: command, in string: parameters,
    in string: mode)</td></tr>
<tr><td width="30"></td><td>Open an UTF-8 encoded pipe to a shell <i>command</i> with <i>parameters</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen8(in_string,in_string)">popen8</a></b> (in string: cmdAndParams, in string: mode)</td></tr>
<tr><td width="30"></td><td>Open an UTF-8 encoded pipe to a shell command.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#popen8(in_string,in_array_string,in_string)">popen8</a></b> (in string: command, in array string: paramList,
    in string: mode)</td></tr>
<tr><td width="30"></td><td>Open an UTF-8 encoded pipe to a shell <i>command</i> with a <i>paramList</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(in_popen8File)">close</a></b> (in popen8File: aPipe)</td></tr>
<tr><td width="30"></td><td>Wait for the process associated with aPipe to terminate.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="shell(in_string,in_string)"><h3>shell</h3></a>
<p>
const func integer: <b>shell</b> (in string: command,
                           in string: parameters)</p><dl><dd>
<p>
Use the shell to execute a <i>command</i> with <i>parameters</i>.
Parameters which contain a space must be enclosed in double
quotes (E.g.: shell("aCommand", "\"par 1\" par2"); ). The
commands supported and the format of the <i>parameters</i> are not
covered by the description of the <i>shell</i> function. Due to the
usage of the operating system shell and external programs, it is
hard to write portable programs, which use the <i>shell</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>parameters</tt> - Space separated list of parameters for the        <i>command</i>, or "" if there are no parameters.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the return code of the executed command or of the shell.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="shellCmd(in_string,in_string)"><h3>shellCmd</h3></a>
<p>
const proc: <b>shellCmd</b> (in string: command, in string: parameters)</p><dl><dd>
<p>
Use the shell to execute a <i>command</i> with <i>parameters</i>.
Parameters which contain a space must be enclosed in double
quotes (E.g.: shellCmd("aCommand", "\"par 1\" par2"); ). The
commands supported and the format of the <i>parameters</i> are not
covered by the description of the <i>shellCmd</i> function. Due to the
usage of the operating system shell and external programs, it is
hard to write portable programs, which use the <i>shellCmd</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>parameters</tt> - Space separated list of parameters for the        <i>command</i>, or "" if there are no parameters.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - The shell command returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="shell(in_string)"><h3>shell</h3></a>
<p>
const func integer: <b>shell</b> (in string: cmdAndParams)</p><dl><dd>
<p>
Executes a command using the shell of the operating system.
The command path must use the standard path representation.
Spaces in the command must be preceded by a backslash
(E.g.: shell("do\\ it"); ). Alternatively the command can
be enclosed in double quotes (E.g.: shell("\"do it\""); ).
Command parameters containing a space must be enclosed in double
quotes (E.g.: shell("do_it \"par 1\" par2"); ). The commands
supported and the format of the <i>parameters</i> are not covered
by the description of the <i>shell</i> function. Due to the usage
of the operating system shell and external programs, it is hard
to write portable programs, which use the <i>shell</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>cmdAndParams</tt> - Command to be executed and optional space        separated list of parameters. Command and parameters        must be space separated.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the return code of the executed command or of the shell.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="shellCmd(in_string)"><h3>shellCmd</h3></a>
<p>
const proc: <b>shellCmd</b> (in string: cmdAndParams)</p><dl><dd>
<p>
Executes a command using the shell of the operating system.
The command path must use the standard path representation.
Spaces in the command must be preceded by a backslash
(E.g.: shellCmd("do\\ it"); ). Alternatively the command can
be enclosed in double quotes (E.g.: shellCmd("\"do it\""); ).
Command parameters containing a space must be enclosed in double
quotes (E.g.: shellCmd("do_it \"par 1\" par2"); ). The commands
supported and the format of the <i>parameters</i> are not covered
by the description of the <i>shellCmd</i> function. Due to the usage
of the operating system shell and external programs, it is hard
to write portable programs, which use the <i>shellCmd</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>cmdAndParams</tt> - Command to be executed and optional space        separated list of parameters. Command and parameters        must be space separated.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - The shell command returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="shellEscape(in_string)"><h3>shellEscape</h3></a>
<p>
const func string: <b>shellEscape</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a>, such that it can be used as shell parameter.
The function adds escape characters or quotations to a string.
The result is useable as parameter for the functions <i>shell</i>,
<i>shellCmd</i>, <i>popen</i> and <i>popen8</i>. Shell parameters must be
escaped individually. Afterwards escaped parameters are
joined to a space separated list of parameters.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string which can be used as shell parameter.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert 'stri'.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toOsPath(in_string)"><h3>toOsPath</h3></a>
<p>
const func string: <b>toOsPath</b> (in string: standardPath)</p><dl><dd>
<p>
Convert a standard path to the path of the operating system.
The result must be escaped with <i>shellEscape</i> to be useable as
parameter for the functions <i>shell</i>, <i>shellCmd</i>, <i>popen</i> and
<i>popen8</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>standardPath</tt> - Path in the standard path representation.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string containing an operating system path.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>standardPath</i>.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>standardPath</i> is not representable as operating            system path.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toShellPath(in_string)"><h3>toShellPath</h3></a>
<p>
const func string: <b>toShellPath</b> (in string: path)</p><dl><dd>
<p>
Convert a standard path such that it can be used as shell parameter.
The result is useable as parameter for the functions <i>shell</i>,
<i>shellCmd</i>, <i>popen</i> and <i>popen8</i>. Shell parameters must be
converted individually. Afterwards converted parameters are
joined to a space separated list of parameters.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>standardPath</tt> - Path in the standard path representation.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string containing an escaped operating system path.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert <i>standardPath</i>.</dd>
<dd><tt>RANGE_ERROR</tt> - <i>standardPath</i> is not representable as operating            system path.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="popen(in_string,in_string,in_string)"><h3>popen</h3></a>
<p>
const func file: <b>popen</b> (in string: command, in string: parameters,
    in string: mode)</p><dl><dd>
<p>
Open a pipe to a shell <i>command</i> with <i>parameters</i>.
The command reads, respectively writes with Latin-1 encoding.
Parameters which contain a space must be enclosed in double
quotes (E.g.: popen("aCommand", "\"par 1\" par2", "r"); ). The
function <a class="link" href="#shellEscape(in_string)" title="shellEscape">shellEscape</a> converts a
<a class="link" href="string.htm" title="string">string</a>, such that it can be used as parameter for <i>popen</i>
(E.g.: popen("aCmd", shellEscape("par 1") &amp; " par2", "r"); ). The
commands supported and the format of the <i>parameters</i> are not
covered by the description of the <i>popen</i> function. Due to the
usage of the operating system shell and external programs, it is
hard to write portable programs, which use the <i>popen</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>parameters</tt> - Space separated list of parameters for        the <i>command</i>, or "" if there are no parameters.</dd>
<dd><tt>mode</tt> - A pipe can be opened with the binary modes        "r" (read) and "w" (write) or with the text modes        "rt" (read) and "wt" (write).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pipe file opened, or <a class="link" href="null_file.htm#STD_NULL" title="STD_NULL">STD_NULL</a>         if it could not be opened.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>command</i> is not representable as            operating system path, or <i>mode</i> is illegal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="popen(in_string,in_string)"><h3>popen</h3></a>
<p>
const func file: <b>popen</b> (in string: cmdAndParams, in string: mode)</p><dl><dd>
<p>
Open a pipe to a shell command.
The command reads, respectively writes with Latin-1 encoding.
Spaces in the command must be preceded by a backslash
(E.g.: popen("do\\ it"); ). Alternatively the command can
be enclosed in double quotes (E.g.: popen("\"do it\""); ).
Command parameters containing a space must be enclosed in
double quotes (E.g.: popen("do_it \"par 1\" par2"); ).
The commands supported and the format of the <i>parameters</i>
are not covered by the description of the <i>popen</i> function.
Due to the usage of the operating system shell and external
programs, it is hard to write portable programs, which use the
<i>popen</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>cmdAndParams</tt> - Command to be executed and optional space        separated list of parameters. Command and parameters        must be space separated.</dd>
<dd><tt>mode</tt> - A pipe can be opened with the binary modes        "r" (read) and "w" (write) or with the text modes        "rt" (read) and "wt" (write).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pipe file opened, or <a class="link" href="null_file.htm#STD_NULL" title="STD_NULL">STD_NULL</a>         if it could not be opened.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The command is not representable as            operating system path, or <i>mode</i> is illegal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="popen(in_string,in_array_string,in_string)"><h3>popen</h3></a>
<p>
const func file: <b>popen</b> (in string: command, in array string: paramList,
    in string: mode)</p><dl><dd>
<p>
Open a pipe to a shell <i>command</i> with a <i>paramList</i>.
The command reads, respectively writes with Latin-1 encoding.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>paramList</tt> - Array of argument strings passed to the command.        It is not necessary to quote the parameters, since this        function takes care of that.</dd>
<dd><tt>mode</tt> - A pipe can be opened with the binary modes        "r" (read) and "w" (write) or with the text modes        "rt" (read) and "wt" (write).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pipe file opened, or <a class="link" href="null_file.htm#STD_NULL" title="STD_NULL">STD_NULL</a>         if it could not be opened.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>command</i> is not representable as            operating system path, or <i>mode</i> is illegal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="close(in_popenFile)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (in popenFile: aPipe)</p><dl><dd>
<p>
Wait for the process associated with aPipe to terminate.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aFile</tt> - Pipe to be closed (created by 'popen').</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - A system function returned an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="popen8(in_string,in_string,in_string)"><h3>popen8</h3></a>
<p>
const func file: <b>popen8</b> (in string: command, in string: parameters,
    in string: mode)</p><dl><dd>
<p>
Open an UTF-8 encoded pipe to a shell <i>command</i> with <i>parameters</i>.
The command reads, respectively writes with UTF-8 encoding.
Parameters which contain a space must be enclosed in double
quotes (E.g.: popen8("aCommand", "\"par 1\" par2", "r"); ). The
function <a class="link" href="#shellEscape(in_string)" title="shellEscape">shellEscape</a> converts a
<a class="link" href="string.htm" title="string">string</a>, such that it can be used as parameter for <i>popen</i>
(E.g.: popen8("aCmd", shellEscape("par 1") &amp; " par2", "r"); ). The
commands supported and the format of the <i>parameters</i> are not
covered by the description of the <i>popen8</i> function. Due to the
usage of the operating system shell and external programs, it is
hard to write portable programs, which use the <i>popen8</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>parameters</tt> - Space separated list of parameters for        the <i>command</i>, or "" if there are no parameters.</dd>
<dd><tt>mode</tt> - A pipe can be opened with the binary modes        "r" (read) and "w" (write) or with the text modes        "rt" (read) and "wt" (write).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pipe file opened, or <a class="link" href="null_file.htm#STD_NULL" title="STD_NULL">STD_NULL</a>         if it could not be opened.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>command</i> is not representable as            operating system path, or <i>mode</i> is illegal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="popen8(in_string,in_string)"><h3>popen8</h3></a>
<p>
const func file: <b>popen8</b> (in string: cmdAndParams, in string: mode)</p><dl><dd>
<p>
Open an UTF-8 encoded pipe to a shell command.
The command reads, respectively writes with UTF-8 encoding.
Spaces in the command must be preceded by a backslash
(E.g.: popen8("do\\ it"); ). Alternatively the command can
be enclosed in double quotes (E.g.: popen8("\"do it\""); ).
Command parameters containing a space must be enclosed in
double quotes (E.g.: popen8("do_it \"par 1\" par2"); ).
The commands supported and the format of the <i>parameters</i>
are not covered by the description of the <i>popen8</i> function.
Due to the usage of the operating system shell and external
programs, it is hard to write portable programs, which use the
<i>popen8</i> function.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>cmdAndParams</tt> - Command to be executed and optional space        separated list of parameters. Command and parameters        must be space separated.</dd>
<dd><tt>mode</tt> - A pipe can be opened with the binary modes        "r" (read) and "w" (write) or with the text modes        "rt" (read) and "wt" (write).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pipe file opened, or <a class="link" href="null_file.htm#STD_NULL" title="STD_NULL">STD_NULL</a>         if it could not be opened.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The command is not representable as            operating system path, or <i>mode</i> is illegal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="popen8(in_string,in_array_string,in_string)"><h3>popen8</h3></a>
<p>
const func file: <b>popen8</b> (in string: command, in array string: paramList,
    in string: mode)</p><dl><dd>
<p>
Open an UTF-8 encoded pipe to a shell <i>command</i> with a <i>paramList</i>.
The command reads, respectively writes with UTF-8 encoding.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>paramList</tt> - Array of argument strings passed to the command.        It is not necessary to quote the parameters, since this        function takes care of that.</dd>
<dd><tt>mode</tt> - A pipe can be opened with the binary modes        "r" (read) and "w" (write) or with the text modes        "rt" (read) and "wt" (write).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pipe file opened, or <a class="link" href="null_file.htm#STD_NULL" title="STD_NULL">STD_NULL</a>         if it could not be opened.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>command</i> is not representable as            operating system path, or <i>mode</i> is illegal.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="close(in_popen8File)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (in popen8File: aPipe)</p><dl><dd>
<p>
Wait for the process associated with aPipe to terminate.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aPipe</tt> - UTF-8 encoded pipe to be closed (created by 'popen8').</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - A system function returned an error.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/set.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/showtls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
