<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Process</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Process</big></b></td>
<td align="right"><a class="link" href="../lib/process.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/ppm.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/progs.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#process">process</a></b></td></tr>
<tr><td width="30"></td><td>Type to manage processes.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="process"><h3>process</h3></a>
<p>
const type: <b>process</b></p><dl><dd>
<p>
Type to manage processes.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr process) <b><a class="link" href="#(attr_process)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>process</i> (process.EMPTY).</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in process: process1) <b><a class="link" href="#(in_process)=(in_process)">=</a></b> (in process: process2)</td></tr>
<tr><td width="30"></td><td>Check if two processes are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in process: process1) <b><a class="link" href="#(in_process)&lt;>(in_process)">&lt;></a></b> (in process: process2)</td></tr>
<tr><td width="30"></td><td>Check if two processes are not equal.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_process,in_process)">compare</a></b> (in process: process1, in process: process2)</td></tr>
<tr><td width="30"></td><td>Compare two process values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_process)">hashCode</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_process)">str</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Convert a <i>process</i> to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isAlive(in_process)">isAlive</a></b> (in process: process1)</td></tr>
<tr><td width="30"></td><td>Test whether the specified process is alive.</td></tr></table></td></tr>
<tr><td align="right" valign="top">process</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#startProcess(in_string,in_array_string)">startProcess</a></b> (in string: command, in array string: parameters)</td></tr>
<tr><td width="30"></td><td>Start a new process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">process</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#startProcess(in_var_string)">startProcess</a></b> (in var string: cmdAndParams)</td></tr>
<tr><td width="30"></td><td>Start a new process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#childStdIn(in_process)">childStdIn</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Returns the standard input file (stdin) of the given child process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#childStdOut(in_process)">childStdOut</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Returns the standard output file (stdout) of the given child process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#childStdErr(in_process)">childStdErr</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Returns the error output file (stderr) of the given child process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#kill(in_process)">kill</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Kill the specified process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#waitFor(in_process)">waitFor</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Wait until the specified child process has terminated.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#exitValue(in_process)">exitValue</a></b> (in process: aProcess)</td></tr>
<tr><td width="30"></td><td>Return the exit value of the specified process.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSearchPath">getSearchPath</a></b></td></tr>
<tr><td width="30"></td><td>Returns the search path of the system as <a class="link" href="array.htm" title="array">array</a> of <a class="link" href="string.htm" title="string">string</a>s.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setSearchPath(in_array_string)">setSearchPath</a></b> (in array string: searchPath)</td></tr>
<tr><td width="30"></td><td>Sets the search path from an array of strings.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#commandPath(in_string)">commandPath</a></b> (in string: command)</td></tr>
<tr><td width="30"></td><td>Search for an executable in the directories of the search path.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#commandDir(in_string)">commandDir</a></b> (in string: command)</td></tr>
<tr><td width="30"></td><td>Search for the directory of an executable in the search path.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pipe2(in_string,in_array_string,inout_file,inout_file)">pipe2</a></b> (in string: command, in array string: parameters,
    inout file: childStdin, inout file: childStdout)</td></tr>
<tr><td width="30"></td><td>Start a process and connect pipes to its standard I/O files.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_process)._value"><h3>. value</h3></a>
<p>
const process: (attr process) <b>. value</b></p><dl><dd>
<p>
Default value of <i>process</i> (process.EMPTY).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_process)=(in_process)"><h3>=</h3></a>
<p>
const func boolean: (in process: process1) <b>=</b> (in process: process2)</p><dl><dd>
<p>
Check if two processes are equal.
Processes are compared with the process identifier (PID).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two processes are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_process)&lt;>(in_process)"><h3>&lt;></h3></a>
<p>
const func boolean: (in process: process1) <b>&lt;></b> (in process: process2)</p><dl><dd>
<p>
Check if two processes are not equal.
Processes are compared with the process identifier (PID).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both processes are not equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_process,in_process)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in process: process1, in process: process2)</p><dl><dd>
<p>
Compare two process values.
The order of two processes is determined by comparing the process
identifiers (PID). Therefore the result of <i>compare</i> may change
if the program is executed again. Inside a program the result
of <i>compare</i> is consistent and can be used to maintain hash
tables.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_process)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in process: aProcess)</p><dl><dd>
<p>
Compute the hash value of a process.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_process)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in process: aProcess)</p><dl><dd>
<p>
Convert a <i>process</i> to a <a class="link" href="string.htm" title="string">string</a>.
The process is converted to a string with the process identifier (PID).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="isAlive(in_process)"><h3>isAlive</h3></a>
<p>
const func boolean: <b>isAlive</b> (in process: process1)</p><dl><dd>
<p>
Test whether the specified process is alive.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the specified process has not yet terminated,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="startProcess(in_string,in_array_string)"><h3>startProcess</h3></a>
<p>
const func process: <b>startProcess</b> (in string: command, in array string: parameters)</p><dl><dd>
<p>
Start a new process.
The command path must lead to an executable file. The environment
variable PATH is not used to search for an executable.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>command</tt> - Name of the command to be executed. A path must        use the standard path representation.</dd>
<dd><tt>parameters</tt> - Array of argument strings passed to the new        program.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the process that has been started.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert 'command'            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - 'command' is not representable in the            system path type.</dd>
<dd><tt>FILE_ERROR</tt> - The file does not exist or does not            have execute permission.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="startProcess(in_var_string)"><h3>startProcess</h3></a>
<p>
const func process: <b>startProcess</b> (in var string: cmdAndParams)</p><dl><dd>
<p>
Start a new process.
The command path must lead to an executable file. The environment
variable PATH is not used to search for an executable.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>cmdAndParams</tt> - Command to be executed and optional space        separated list of parameters. Command and parameters        must be space separated.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the process that has been started.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert 'command'            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - 'command' is not representable in the            system path type.</dd>
<dd><tt>FILE_ERROR</tt> - The file does not exist or does not            have execute permission.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="childStdIn(in_process)"><h3>childStdIn</h3></a>
<p>
const func file: <b>childStdIn</b> (in process: aProcess)</p><dl><dd>
<p>
Returns the standard input file (stdin) of the given child process.
If the standard input file of the subprocess has been redirected
then this function will return NULL.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the standard input file of 'aProcess' or         STD_NULL, if stdin has been redirected.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="childStdOut(in_process)"><h3>childStdOut</h3></a>
<p>
const func file: <b>childStdOut</b> (in process: aProcess)</p><dl><dd>
<p>
Returns the standard output file (stdout) of the given child process.
If the standard output file of the subprocess has been redirected
then this function will return NULL.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the standard output file of 'aProcess' or         STD_NULL, if stdout has been redirected.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="childStdErr(in_process)"><h3>childStdErr</h3></a>
<p>
const func file: <b>childStdErr</b> (in process: aProcess)</p><dl><dd>
<p>
Returns the error output file (stderr) of the given child process.
If the standard error file of the subprocess has been redirected
then this function will return NULL.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the error output file of 'aProcess' or         STD_NULL, if stderr has been redirected.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="kill(in_process)"><h3>kill</h3></a>
<p>
const proc: <b>kill</b> (in process: aProcess)</p><dl><dd>
<p>
Kill the specified process.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - It was not possible to kill the process.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="waitFor(in_process)"><h3>waitFor</h3></a>
<p>
const proc: <b>waitFor</b> (in process: aProcess)</p><dl><dd>
<p>
Wait until the specified child process has terminated.
Suspend the execution of the calling process until the
specified child has terminated.
</p>
</dd>
</dl></div>
<hr />
<div><a name="exitValue(in_process)"><h3>exitValue</h3></a>
<p>
const func integer: <b>exitValue</b> (in process: aProcess)</p><dl><dd>
<p>
Return the exit value of the specified process.
By convention, the value 0 indicates normal termination.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the exit value of the specified process.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>FILE_ERROR</tt> - The process has not yet terminated.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getSearchPath"><h3>getSearchPath</h3></a>
<p>
const func array string: <b>getSearchPath</b></p><dl><dd>
<p>
Returns the search path of the system as <a class="link" href="array.htm" title="array">array</a> of <a class="link" href="string.htm" title="string">string</a>s.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the search path of the system.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to create the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setSearchPath(in_array_string)"><h3>setSearchPath</h3></a>
<p>
const proc: <b>setSearchPath</b> (in array string: searchPath)</p><dl><dd>
<p>
Sets the search path from an array of strings.
The search path is used by the current process and its sub processes.
The path of parent processes is not affected by this function.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert the path            to the system string type.</dd>
<dd><tt>RANGE_ERROR</tt> - The path cannot be converted to the            system string type or a system function returns an error.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="commandPath(in_string)"><h3>commandPath</h3></a>
<p>
const func string: <b>commandPath</b> (in string: command)</p><dl><dd>
<p>
Search for an executable in the directories of the search path.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute path of the executable or "" if         the executable was not found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="commandDir(in_string)"><h3>commandDir</h3></a>
<p>
const func string: <b>commandDir</b> (in string: command)</p><dl><dd>
<p>
Search for the directory of an executable in the search path.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute path of the directory of the executable or         "" if the executable was not found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pipe2(in_string,in_array_string,inout_file,inout_file)"><h3>pipe2</h3></a>
<p>
const proc: <b>pipe2</b> (in string: command, in array string: parameters,
    inout file: childStdin, inout file: childStdout)</p><dl><dd>
<p>
Start a process and connect pipes to its standard I/O files.
The command path must lead to an executable file. The environment
variable PATH is not used to search for an executable. Pipe2
can be used to execute programs which process a stream of data.
Interactive programs buffer their I/O if they are not connected
to a terminal. Pipe2 has no influence of the buffering of the
executed command. Therefore interactive programs might not work
correctly with pipe2.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to convert 'command'            to the system path type.</dd>
<dd><tt>RANGE_ERROR</tt> - 'command' is not representable in the            system path type.</dd>
<dd><tt>FILE_ERROR</tt> - The file does not exist or does not            have execute permission.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/ppm.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/progs.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
