<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bytedata</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jsondom.htm">JSON DOM</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bytedata</big></b></td>
<td align="right"><a class="link" href="../lib/bytedata.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bstring.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/cards.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#signedness">signedness</a></b></td></tr>
<tr><td width="30"></td><td>Enumeration of signedness values.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#endianness">endianness</a></b></td></tr>
<tr><td width="30"></td><td>Enumeration of endianness values.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="signedness"><h3>signedness</h3></a>
<p>
const type: <b>signedness</b></p><dl><dd>
<p>
Enumeration of signedness values.
Signedness defines if negative values can be represented.
Defines: UNSIGNED and SIGNED.
Signed values use the twos-complement representation.
</p>
</dd>
</dl></div>
<hr />
<div><a name="endianness"><h3>endianness</h3></a>
<p>
const type: <b>endianness</b></p><dl><dd>
<p>
Enumeration of endianness values.
Endianness defines how the bytes of a data are ordered within memory.
Defines: LE (little-endian) and BE (big-endian).
A little-endian representation starts with the least significant byte.
A big-endian representation starts with the most significant byte.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromAsciiz(in_string,in_integer)">fromAsciiz</a></b> (in string: stri, in integer: startPos)</td></tr>
<tr><td width="30"></td><td>Get a null terminated string from <i>stri</i> starting from <i>startPos</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getAsciiz(in_string,inout_integer)">getAsciiz</a></b> (in string: stri, inout integer: currPos)</td></tr>
<tr><td width="30"></td><td>Read a null terminated string from <i>stri</i> starting from <i>currPos</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getAsciiz(inout_file)">getAsciiz</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a null terminated string from <i>inFile</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getStriUpToChar(inout_file,in_char)">getStriUpToChar</a></b> (inout file: inFile, in char: terminator)</td></tr>
<tr><td width="30"></td><td>Read a string from <i>inFile</i> until the <i>terminator</i> character is found.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hex(in_string)">hex</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> of bytes to its hexadecimal representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hex2Bytes(in_string)">hex2Bytes</a></b> (in string: hex)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> with hexadecimal digits to a string of bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes(in_integer,in_signedness,in_endianness)">bytes</a></b> (in integer: number,
    in signedness: signed, in endianness: endian)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> into a <a class="link" href="string.htm" title="string">string</a> of bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes(in_integer,in_signedness,in_endianness,in_integer)">bytes</a></b> (in integer: number,
    in signedness: signed, in endianness: endian, in integer: length)</td></tr>
<tr><td width="30"></td><td>Convert an <a class="link" href="integer.htm" title="integer">integer</a> into a <a class="link" href="string.htm" title="string">string</a> of bytes with the given <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes(in_bigInteger,in_signedness,in_endianness)">bytes</a></b> (in bigInteger: number,
    in signedness: signed, in endianness: endian)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> into a <a class="link" href="string.htm" title="string">string</a> of bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes(in_bigInteger,in_signedness,in_endianness,in_integer)">bytes</a></b> (in bigInteger: number,
    in signedness: signed, in endianness: endian, in integer: length)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> to a <a class="link" href="string.htm" title="string">string</a> of bytes with a <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes2Int(in_string,in_signedness,in_endianness)">bytes2Int</a></b> (in string: byteStri,
    in signedness: signed, in endianness: endian)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> of bytes to an <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes2BigInt(in_string,in_signedness,in_endianness)">bytes2BigInt</a></b> (in string: byteStri,
    in signedness: signed, in endianness: endian)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> of bytes to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getUInt16Le(inout_file)">getUInt16Le</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read two bytes from a file and return their little-endian value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getUInt32Le(inout_file)">getUInt32Le</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read four bytes from a file and return their little-endian value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getUInt16Be(inout_file)">getUInt16Be</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read two bytes from a file and return their big-endian value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getUInt32Be(inout_file)">getUInt32Be</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read four bytes from a file and return their big-endian value.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="fromAsciiz(in_string,in_integer)"><h3>fromAsciiz</h3></a>
<p>
const func string: <b>fromAsciiz</b> (in string: stri, in integer: startPos)</p><dl><dd>
<p>
Get a null terminated string from <i>stri</i> starting from <i>startPos</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - string of bytes from which the result is obtained.</dd>
<dd><tt>startPos</tt> - Start position of the null terminated string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the null terminated string without the null ('\0;') character.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getAsciiz(in_string,inout_integer)"><h3>getAsciiz</h3></a>
<p>
const func string: <b>getAsciiz</b> (in string: stri, inout integer: currPos)</p><dl><dd>
<p>
Read a null terminated string from <i>stri</i> starting from <i>currPos</i>.
CurrPos is advanced after the null ('\0;') character. When there is
no null character the string is assumed to extend to the end of <i>stri</i>.
In this case <i>currPos</i> is advanced beyond the length of <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - string of bytes from which the result is obtained.</dd>
<dd><tt>currPos</tt> - Start position of the null terminated string.                The function advances <i>currPos</i> to refer to the position                behind the terminating null ('\0;') character.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the null terminated string without the null ('\0;') character.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getAsciiz(inout_file)"><h3>getAsciiz</h3></a>
<p>
const func string: <b>getAsciiz</b> (inout file: inFile)</p><dl><dd>
<p>
Read a null terminated string from <i>inFile</i>.
The file position is advanced after the null ('\0;') character.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File from which the result is obtained.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the null terminated string without the null ('\0;') character.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getStriUpToChar(inout_file,in_char)"><h3>getStriUpToChar</h3></a>
<p>
const func string: <b>getStriUpToChar</b> (inout file: inFile, in char: terminator)</p><dl><dd>
<p>
Read a string from <i>inFile</i> until the <i>terminator</i> character is found.
If a <i>terminator</i> is found the string before the <i>terminator</i> is
returned and the <i>terminator</i> character is assigned to inFile.bufferChar.
The file position is advanced after the <i>terminator</i> character.
If no <i>terminator</i> is found the rest of the string is returned and
EOF is assigned to the inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read without the <i>terminator</i> or the rest of the         file if no <i>terminator</i> is found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hex(in_string)"><h3>hex</h3></a>
<p>
const func string: <b>hex</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> of bytes to its hexadecimal representation.
Each byte is represented by two hexadecimal digits.
</p>
<pre class="indent">
hex("!;Mn")  returns "213b4d6e"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hexadecimal representation of the given <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="hex2Bytes(in_string)"><h3>hex2Bytes</h3></a>
<p>
const func string: <b>hex2Bytes</b> (in string: hex)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> with hexadecimal digits to a string of bytes.
Each byte in the result is represented by two hexadecimal digits in <i>hex</i>.
</p>
<pre class="indent">
hexToBytes("6d")        returns "m"
hexToBytes("213b4d6e")  returns "!;Mn"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the byte <a class="link" href="string.htm" title="string">string</a> that corresponds to the given         hexadecimal string <i>hex</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the length of <i>hex</i> is odd or            if <i>hex</i> contains other characters than hexadecimal digits.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes(in_integer,in_signedness,in_endianness)"><h3>bytes</h3></a>
<p>
const func string: <b>bytes</b> (in integer: number,
    in signedness: signed, in endianness: endian)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> into a <a class="link" href="string.htm" title="string">string</a> of bytes.
The result uses binary representation with a base of 256.
The result contains chars (bytes) with an ordinal &lt;= 255.
</p>
<pre class="indent">
bytes(1413829460, SIGNED, BE)  returns "TEST"
bytes(1497451343, SIGNED, LE)  returns "OKAY"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Integer number to be converted.</dd>
<dd><tt>signed</tt> - Determines the <a class="link" href="#signedness" title="signedness">signedness</a> of the result.        Possible values are UNSIGNED and SIGNED. If <i>signed</i> is SIGNED        the result is encoded with the twos-complement representation.        In this case a negative <i>number</i> is converted to a result        where the most significant byte has an ordinal >= 128.</dd>
<dd><tt>endian</tt> - Determines the <a class="link" href="#endianness" title="endianness">endianness</a> of the result.        Possible values are LE for little-endian and BE for big-endian.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <a class="link" href="string.htm" title="string">string</a> with the shortest binary representation of <i>number</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>number</i> is negative and <i>signed</i> is UNSIGNED.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes(in_integer,in_signedness,in_endianness,in_integer)"><h3>bytes</h3></a>
<p>
const func string: <b>bytes</b> (in integer: number,
    in signedness: signed, in endianness: endian, in integer: length)</p><dl><dd>
<p>
Convert an <a class="link" href="integer.htm" title="integer">integer</a> into a <a class="link" href="string.htm" title="string">string</a> of bytes with the given <i>length</i>.
The result uses binary representation with a base of 256.
The result contains chars (bytes) with an ordinal &lt;= 255.
</p>
<pre class="indent">
bytes(1413829460, SIGNED, BE, 5)  returns "\0;TEST"
bytes(1413829460, SIGNED, BE, 4)  returns "TEST"
bytes(1413829460, SIGNED, BE, 3)  raises RANGE_ERROR
bytes(1497451343, SIGNED, LE, 5)  returns "OKAY\0;"
bytes(1497451343, SIGNED, LE, 4)  returns "OKAY"
bytes(1497451343, SIGNED, LE, 3)  raises RANGE_ERROR
bytes(-1246382667, SIGNED, BE, 6)   returns "ÿÿµµµµ"
bytes(-1246382667, SIGNED, LE, 6)   returns "µµµµÿÿ"
bytes(-1246382667, SIGNED, LE, 4)   returns "µµµµ"
bytes(-1246382667, SIGNED, LE, 3)   raises RANGE_ERROR
bytes(-123456789, UNSIGNED, BE, 4)  raises RANGE_ERROR
bytes(-123456789, UNSIGNED, LE, 4)  raises RANGE_ERROR
bytes(3048584629, UNSIGNED, BE, 4)  returns "µµµµ"
bytes(3048584629, UNSIGNED, BE, 5)  returns "\0;µµµµ"
bytes(3048584629, UNSIGNED, LE, 6)  returns "µµµµ\0;\0;"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Integer number to be converted.</dd>
<dd><tt>signed</tt> - Determines the <a class="link" href="#signedness" title="signedness">signedness</a> of the result.        Possible values are UNSIGNED and SIGNED. If <i>signed</i> is SIGNED        the result is encoded with the twos-complement representation.        In this case a negative <i>number</i> is converted to a result        where the most significant byte has an ordinal >= 128.</dd>
<dd><tt>endian</tt> - Determines the <a class="link" href="#endianness" title="endianness">endianness</a> of the result.        Possible values are LE for little-endian and BE for big-endian.</dd>
<dd><tt>length</tt> - Determines the length of the result string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <a class="link" href="string.htm" title="string">string</a> of <i>length</i> bytes with the binary representation of <i>number</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>number</i> is negative and <i>signed</i> is UNSIGNED, or                        if <i>length</i> is negative or zero, or                        if the result would not fit in <i>length</i> bytes.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes(in_bigInteger,in_signedness,in_endianness)"><h3>bytes</h3></a>
<p>
const func string: <b>bytes</b> (in bigInteger: number,
    in signedness: signed, in endianness: endian)</p><dl><dd>
<p>
Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> into a <a class="link" href="string.htm" title="string">string</a> of bytes.
The result uses binary representation with a base of 256.
The result contains chars (bytes) with an ordinal &lt;= 255.
</p>
<pre class="indent">
bytes(1413829460_, SIGNED, BE)                        returns "TEST"
bytes(1497451343_, SIGNED, LE)                        returns "OKAY"
bytes(8316866959935304777_, UNSIGNED, LE)             returns "It works"
bytes(54818063270363344731475178867_, UNSIGNED, BE)   returns "± plus-minus"
bytes(54818063270363344731475178867_, SIGNED, BE)     returns "\0;± plus-minus"
bytes(-24410099243900992862068771469_, SIGNED, BE)    returns "± plus-minus"
bytes(-24410099243900992862068771469_, UNSIGNED, LE)  raises RANGE_ERROR
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - BigInteger number to be converted.</dd>
<dd><tt>signed</tt> - Determines the <a class="link" href="#signedness" title="signedness">signedness</a> of the result.        Possible values are UNSIGNED and SIGNED. If <i>signed</i> is SIGNED        the result is encoded with the twos-complement representation.        In this case a negative <i>number</i> is converted to a result        where the most significant byte has an ordinal >= 128.</dd>
<dd><tt>endian</tt> - Determines the <a class="link" href="#endianness" title="endianness">endianness</a> of the result.        Possible values are LE for little-endian and BE for big-endian.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <a class="link" href="string.htm" title="string">string</a> with the shortest binary representation of <i>number</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>number</i> is negative and <i>signed</i> is UNSIGNED.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes(in_bigInteger,in_signedness,in_endianness,in_integer)"><h3>bytes</h3></a>
<p>
const func string: <b>bytes</b> (in bigInteger: number,
    in signedness: signed, in endianness: endian, in integer: length)</p><dl><dd>
<p>
Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> to a <a class="link" href="string.htm" title="string">string</a> of bytes with a <i>length</i>.
The result uses binary representation with a base of 256.
The result contains chars (bytes) with an ordinal &lt;= 255.
</p>
<pre class="indent">
bytes(1413829460_, SIGNED, BE, 5)    returns "\0;TEST"
bytes(1413829460_, SIGNED, BE, 4)    returns "TEST"
bytes(1413829460_, SIGNED, BE, 3)    raises RANGE_ERROR
bytes(-1246382667_, SIGNED, BE, 6)   returns "ÿÿµµµµ"
bytes(-1246382667_, SIGNED, LE, 6)   returns "µµµµÿÿ"
bytes(-1246382667_, SIGNED, LE, 4)   returns "µµµµ"
bytes(-1246382667_, SIGNED, LE, 3)   raises RANGE_ERROR
bytes(3048584629_, UNSIGNED, BE, 4)  returns "µµµµ"
bytes(3048584629_, UNSIGNED, LE, 6)  returns "µµµµ\0;\0;"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - BigInteger number to be converted.</dd>
<dd><tt>signed</tt> - Determines the <a class="link" href="#signedness" title="signedness">signedness</a> of the result.        Possible values are UNSIGNED and SIGNED. If <i>signed</i> is SIGNED        the result is encoded with the twos-complement representation.        In this case a negative <i>number</i> is converted to a result        where the most significant byte has an ordinal >= 128.</dd>
<dd><tt>endian</tt> - Determines the <a class="link" href="#endianness" title="endianness">endianness</a> of the result.        Possible values are LE for little-endian and BE for big-endian.</dd>
<dd><tt>length</tt> - Length of the result string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <a class="link" href="string.htm" title="string">string</a> of bytes with <i>length</i> representing <i>number</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the result does not fit into <i>length</i>.</dd>
<dd><tt>RANGE_ERROR</tt> - If <i>number</i> is negative and <i>signed</i> is UNSIGNED.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes2Int(in_string,in_signedness,in_endianness)"><h3>bytes2Int</h3></a>
<p>
const func integer: <b>bytes2Int</b> (in string: byteStri,
    in signedness: signed, in endianness: endian)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> of bytes to an <a class="link" href="integer.htm" title="integer">integer</a>.
</p>
<pre class="indent">
bytes2Int("I\150;\2;\210;", UNSIGNED, BE)  returns  1234567890
bytes2Int("\210;\2;\150;I", UNSIGNED, LE)  returns  1234567890
bytes2Int(":\222;h\177;", UNSIGNED, BE)    returns   987654321
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>byteStri</tt> - String of bytes to be converted. The bytes are        interpreted as binary representation with a base of 256.</dd>
<dd><tt>signed</tt> - Determines the <a class="link" href="#signedness" title="signedness">signedness</a> of <i>byteStri</i>.        Possible values are UNSIGNED and SIGNED. If <i>signed</i> is SIGNED        <i>bstri</i> is interpreted as signed value in the twos-complement        representation. In this case the result is negative if        the most significant byte has an ordinal >= 128.</dd>
<dd><tt>endian</tt> - Determines the <a class="link" href="#endianness" title="endianness">endianness</a> of <i>byteStri</i>.        Possible values are LE for little-endian and BE for big-endian.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an integer created from <i>byteStri</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>byteStri</i> is empty or            if characters beyond '\255;' are present or            if the result value cannot be represented with an integer.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes2BigInt(in_string,in_signedness,in_endianness)"><h3>bytes2BigInt</h3></a>
<p>
const func bigInteger: <b>bytes2BigInt</b> (in string: byteStri,
    in signedness: signed, in endianness: endian)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> of bytes to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.
</p>
<pre class="indent">
bytes2BigInt("I\150;\2;\210;", SIGNED, BE)        returns  1234567890_
bytes2BigInt("\210;\2;\150;I", UNSIGNED, LE)      returns  1234567890_
bytes2BigInt(":\222;h\177;", SIGNED, BE)          returns   987654321_
bytes2BigInt("\139;\208;\3;\152;", UNSIGNED, BE)  returns  2345665432_
bytes2BigInt("\139;\208;\3;\152;", SIGNED, BE)    returns -1949301864_
bytes2BigInt("\152;\3;\208;\139;", UNSIGNED, LE)  returns  2345665432_
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>byteStri</tt> - String of bytes to be converted. The bytes are        interpreted as binary representation with a base of 256.</dd>
<dd><tt>signed</tt> - Determines the <a class="link" href="#signedness" title="signedness">signedness</a> of <i>byteStri</i>.        Possible values are UNSIGNED and SIGNED. If <i>signed</i> is SIGNED        <i>bstri</i> is interpreted as signed value in the twos-complement        representation. In this case the result is negative if        the most significant byte has an ordinal >= 128.</dd>
<dd><tt>endian</tt> - Determines the <a class="link" href="#endianness" title="endianness">endianness</a> of <i>byteStri</i>.        Possible values are LE for little-endian and BE for big-endian.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a bigInteger created from <i>byteStri</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>byteStri</i> is empty or            if characters beyond '\255;' are present.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getUInt16Le(inout_file)"><h3>getUInt16Le</h3></a>
<p>
const func integer: <b>getUInt16Le</b> (inout file: inFile)</p><dl><dd>
<p>
Read two bytes from a file and return their little-endian value.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getUInt32Le(inout_file)"><h3>getUInt32Le</h3></a>
<p>
const func integer: <b>getUInt32Le</b> (inout file: inFile)</p><dl><dd>
<p>
Read four bytes from a file and return their little-endian value.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getUInt16Be(inout_file)"><h3>getUInt16Be</h3></a>
<p>
const func integer: <b>getUInt16Be</b> (inout file: inFile)</p><dl><dd>
<p>
Read two bytes from a file and return their big-endian value.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getUInt32Be(inout_file)"><h3>getUInt32Be</h3></a>
<p>
const func integer: <b>getUInt32Be</b> (inout file: inFile)</p><dl><dd>
<p>
Read four bytes from a file and return their big-endian value.
</p>
</dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bstring.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/cards.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
