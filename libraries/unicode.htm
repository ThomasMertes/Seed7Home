<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Unicode</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="field.htm">Field file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="ftpserv.htm">Ftpserv</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="json_serde.htm">JSON serialize</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="scantoml.htm">Scan TOML</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="struct.htm">Struct</a>
<a class="menu" href="struct_elem.htm">Struct element</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tga.htm">TGA</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Unicode</big></b></td>
<td align="right"><a class="link" href="../lib/unicode.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/tdes.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/upper.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toUtf8(in_string)">toUtf8</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to an UTF-8 encoded string of bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromUtf8(in_string)">fromUtf8</a></b> (in string: utf8)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> with bytes in UTF-8 encoding to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toUtf16Be(in_string)">toUtf16Be</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to an UTF-16BE encoded string of bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromUtf16Be(in_string)">fromUtf16Be</a></b> (in string: utf16Be)</td></tr>
<tr><td width="30"></td><td>Convert an UTF-16BE encoded <a class="link" href="string.htm" title="string">string</a> of bytes to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toUtf16Le(in_string)">toUtf16Le</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to an UTF-16LE encoded string of bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromUtf16Le(in_string)">fromUtf16Le</a></b> (in string: utf16Le)</td></tr>
<tr><td width="30"></td><td>Convert an UTF-16LE encoded <a class="link" href="string.htm" title="string">string</a> of bytes to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#replaceUtf16SurrogatePairs(in_string)">replaceUtf16SurrogatePairs</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Return <a class="link" href="string.htm" title="string">string</a> where all surrogate pairs are replaced by single chars.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromNullTerminatedUtf16Be(in_string,in_integer)">fromNullTerminatedUtf16Be</a></b> (in string: stri, in integer: startPos)</td></tr>
<tr><td width="30"></td><td>Convert a null terminated UTF-16BE encoded string of bytes to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromNullTerminatedUtf16Le(in_string,in_integer)">fromNullTerminatedUtf16Le</a></b> (in string: stri, in integer: startPos)</td></tr>
<tr><td width="30"></td><td>Convert a null terminated UTF-16LE encoded string of bytes to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNullTerminatedUtf16Be(in_string,inout_integer)">getNullTerminatedUtf16Be</a></b> (in string: stri, inout integer: currPos)</td></tr>
<tr><td width="30"></td><td>Read a null terminated UTF-16BE encoded string of bytes and convert it to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNullTerminatedUtf16Be(inout_file)">getNullTerminatedUtf16Be</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a null terminated UTF-16BE encoded string of bytes and convert it to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNullTerminatedUtf16Le(in_string,inout_integer)">getNullTerminatedUtf16Le</a></b> (in string: stri, inout integer: currPos)</td></tr>
<tr><td width="30"></td><td>Read a null terminated UTF-16LE encoded string of bytes and convert it to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNullTerminatedUtf16Le(inout_file)">getNullTerminatedUtf16Le</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a null terminated UTF-16LE encoded string of bytes and convert it to UTF-32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromUtf7(in_string)">fromUtf7</a></b> (in string: stri7)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> from an UTF-7 encoding to UTF-32.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="toUtf8(in_string)"><h3>toUtf8</h3></a>
<p>
const func string: <b>toUtf8</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to an UTF-8 encoded string of bytes.
</p>
<pre class="indent">
toUtf8("€")          returns "â\130;¬"
</pre>
<p>
Surrogate pairs are converted into a CESU-8 encoded string:
</p>
<pre class="indent">
toUtf8("\16#d834;\16#dd1e;")  returns "\237;\160;\180;\237;\180;\158;"  (surrogate pair)
</pre>
<p>
This function accepts unpaired surrogate characters.
</p>
<pre class="indent">
toUtf8("\16#dc00;")  returns "\16#ed;\16#b0;\16#80;"  (unpaired surrogate char)
</pre>
<p>
Note that a Unicode string should not contain surrogate characters.
If the string contains surrogate pairs use
</p>
<pre class="indent">
toUtf8(replaceUtf16SurrogatePairs(stringWithSurrogatePairs))
</pre>
<p>
to create a correct (not CESU-8 encoded) UTF-8 string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Normal (UTF-32) string to be converted to UTF-8.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>stri</i> converted to a string of bytes with UTF-8 encoding.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="fromUtf8(in_string)"><h3>fromUtf8</h3></a>
<p>
const func string: <b>fromUtf8</b> (in string: utf8)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> with bytes in UTF-8 encoding to UTF-32.
</p>
<pre class="indent">
fromUtf8("â\130;¬")                         returns "€"
</pre>
<p>
Surrogate pairs from a CESU-8 encoded string are kept intact:
</p>
<pre class="indent">
fromUtf8("\237;\160;\180;\237;\180;\158;")  returns "\16#d834;\16#dd1e;" (surrogate pair)
</pre>
<p>
To decode a CESU-8 encoded string use:
</p>
<pre class="indent">
replaceUtf16SurrogatePairs(fromUtf8(cesu8String))
</pre>
<p>
Overlong encodings and unpaired surrogate chare are accepted.
</p>
<pre class="indent">
fromUtf8("\16#c0;\16#80;")                  returns "\0;"        (overlong encoding)
fromUtf8("\16#ed;\16#b0;\16#80;")           returns "\16#dc00;"  (unpaired surrogate char)
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>utf8</tt> - String of bytes encoded with UTF-8.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>utf8</i> converted to a normal (UTF-32) <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>utf8</i> contains a char beyond '\255;' or                        if <i>utf8</i> is not encoded with UTF-8.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toUtf16Be(in_string)"><h3>toUtf16Be</h3></a>
<p>
const func string: <b>toUtf16Be</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to an UTF-16BE encoded string of bytes.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Normal (UTF-32) string to be converted to UTF-16BE.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>stri</i> converted to a string of bytes with UTF-16BE encoding.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If a character is not representable as UTF-16 or                        a surrogate character is present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromUtf16Be(in_string)"><h3>fromUtf16Be</h3></a>
<p>
const func string: <b>fromUtf16Be</b> (in string: utf16Be)</p><dl><dd>
<p>
Convert an UTF-16BE encoded <a class="link" href="string.htm" title="string">string</a> of bytes to UTF-32.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>utf16Be</tt> - String of bytes encoded with UTF-16 in        big endian byte order.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>utf16Be</i> converted to a normal (UTF-32) <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the length of <i>utf16Be</i> is odd or                        if <i>utf16Be</i> contains a char beyond '\255;' or                        if <i>utf16Be</i> contains an invalid surrogate pair.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toUtf16Le(in_string)"><h3>toUtf16Le</h3></a>
<p>
const func string: <b>toUtf16Le</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to an UTF-16LE encoded string of bytes.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Normal (UTF-32) string to be converted to UTF-16LE.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>stri</i> converted to a string of bytes with UTF-16LE encoding.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If a character is not representable as UTF-16 or                        a surrogate character is present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromUtf16Le(in_string)"><h3>fromUtf16Le</h3></a>
<p>
const func string: <b>fromUtf16Le</b> (in string: utf16Le)</p><dl><dd>
<p>
Convert an UTF-16LE encoded <a class="link" href="string.htm" title="string">string</a> of bytes to UTF-32.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>utf16Le</tt> - String of bytes encoded with UTF-16 in        little endian byte order.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>utf16Le</i> converted to a normal (UTF-32) <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the length of <i>utf16Le</i> is odd or                        if <i>utf16Le</i> contains a char beyond '\255;' or                        if <i>utf16Le</i> contains an invalid surrogate pair.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="replaceUtf16SurrogatePairs(in_string)"><h3>replaceUtf16SurrogatePairs</h3></a>
<p>
const func string: <b>replaceUtf16SurrogatePairs</b> (in string: stri)</p><dl><dd>
<p>
Return <a class="link" href="string.htm" title="string">string</a> where all surrogate pairs are replaced by single chars.
</p>
<pre class="indent">
replaceUtf16SurrogatePairs("\16#d834;\16#dd1e;")  returns "\16#1d11e;"
</pre>
<p>
This function can be used to decode CESU-8 encoded strings:
</p>
<pre class="indent">
replaceUtf16SurrogatePairs(fromUtf8(cesu8String))
</pre>
<p>
In CESU-8 an Unicode code point from the Basic Multilingual Plane (BMP) is
encoded in the same way as in UTF-8. An Unicode code point outside the BMP
is first represented as a surrogate pair, like in UTF-16, and then each
surrogate code point is encoded in UTF-8.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - String of UTF-16 or UTF-32 Unicode characters,        which may contain surrogate pairs.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>stri</i> with all surrogate pairs replaced by single UTF-32 chars.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If an invalid surrogate pair is present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromNullTerminatedUtf16Be(in_string,in_integer)"><h3>fromNullTerminatedUtf16Be</h3></a>
<p>
const func string: <b>fromNullTerminatedUtf16Be</b> (in string: stri, in integer: startPos)</p><dl><dd>
<p>
Convert a null terminated UTF-16BE encoded string of bytes to UTF-32.
The UTF-16BE encoded string starts at <i>startPos</i> and ends with an
UTF-16BE encoded null ('\0;') character. When there is no null character
the UTF-16BE encoded string is assumed to extend to the end of <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - UTF-16BE encoded string of bytes (starting from <i>startPos</i>).</dd>
<dd><tt>startPos</tt> - Start position for the UTF-16BE encoded null terminated string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string found in UTF-32 encoding without the null ('\0;') character.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the conversion from UTF-16BE to UTF-32 fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromNullTerminatedUtf16Le(in_string,in_integer)"><h3>fromNullTerminatedUtf16Le</h3></a>
<p>
const func string: <b>fromNullTerminatedUtf16Le</b> (in string: stri, in integer: startPos)</p><dl><dd>
<p>
Convert a null terminated UTF-16LE encoded string of bytes to UTF-32.
The UTF-16LE encoded string starts at <i>startPos</i> and ends with an
UTF-16LE encoded null ('\0;') character. When there is no null character
the UTF-16LE encoded string is assumed to extend to the end of <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - UTF-16LE encoded string of bytes (starting from <i>startPos</i>).</dd>
<dd><tt>startPos</tt> - Start position for the UTF-16LE encoded null terminated string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string found in UTF-32 encoding without the null ('\0;') character.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the conversion from UTF-16LE to UTF-32 fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getNullTerminatedUtf16Be(in_string,inout_integer)"><h3>getNullTerminatedUtf16Be</h3></a>
<p>
const func string: <b>getNullTerminatedUtf16Be</b> (in string: stri, inout integer: currPos)</p><dl><dd>
<p>
Read a null terminated UTF-16BE encoded string of bytes and convert it to UTF-32.
The UTF-16BE encoded string starts at <i>currPos</i> and ends with an
UTF-16BE encoded null ('\0;') character. The position <i>currPos</i> is
advanced behind the null ('\0;') character. When there is no null character
the UTF-16BE encoded string is assumed to extend to the end of <i>stri</i>.
In this case <i>currPos</i> is advanced beyond the length of <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - UTF-16BE encoded string of bytes (starting from <i>currPos</i>).</dd>
<dd><tt>currPos</tt> - Start position for the UTF-16BE encoded null terminated string.                The function advances <i>currPos</i> to refer to the position                behind the terminating null ('\0;') character.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string found in UTF-32 encoding without the null ('\0;') character.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the conversion from UTF-16BE to UTF-32 fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getNullTerminatedUtf16Be(inout_file)"><h3>getNullTerminatedUtf16Be</h3></a>
<p>
const func string: <b>getNullTerminatedUtf16Be</b> (inout file: inFile)</p><dl><dd>
<p>
Read a null terminated UTF-16BE encoded string of bytes and convert it to UTF-32.
The reading ends when an UTF-16BE encoded null ('\0;') character has been read.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File with UTF-16BE encoded bytes.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read in UTF-32 encoding without the null ('\0;') character.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the conversion from UTF-16BE to UTF-32 fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getNullTerminatedUtf16Le(in_string,inout_integer)"><h3>getNullTerminatedUtf16Le</h3></a>
<p>
const func string: <b>getNullTerminatedUtf16Le</b> (in string: stri, inout integer: currPos)</p><dl><dd>
<p>
Read a null terminated UTF-16LE encoded string of bytes and convert it to UTF-32.
The UTF-16LE encoded string starts at <i>currPos</i> and ends with an
UTF-16LE encoded null ('\0;') character. The position <i>currPos</i> is
advanced behind the null ('\0;') character. When there is no null character
the UTF-16LE encoded string is assumed to extend to the end of <i>stri</i>.
In this case <i>currPos</i> is advanced beyond the length of <i>stri</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - UTF-16LE encoded string of bytes (starting from <i>currPos</i>).</dd>
<dd><tt>currPos</tt> - Start position for the UTF-16LE encoded null terminated string.                The function advances <i>currPos</i> to refer to the position                behind the terminating null ('\0;') character.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string found in UTF-32 encoding without the null ('\0;') character.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the conversion from UTF-16LE to UTF-32 fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getNullTerminatedUtf16Le(inout_file)"><h3>getNullTerminatedUtf16Le</h3></a>
<p>
const func string: <b>getNullTerminatedUtf16Le</b> (inout file: inFile)</p><dl><dd>
<p>
Read a null terminated UTF-16LE encoded string of bytes and convert it to UTF-32.
The reading ends when an UTF-16LE encoded null ('\0;') character has been read.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - File with UTF-16LE encoded bytes.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read in UTF-32 encoding without the null ('\0;') character.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the conversion from UTF-16LE to UTF-32 fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromUtf7(in_string)"><h3>fromUtf7</h3></a>
<p>
const func string: <b>fromUtf7</b> (in string: stri7)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> from an UTF-7 encoding to UTF-32.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri7</tt> - String of bytes encoded with UTF-7.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd><i>stri7</i> converted a to normal (UTF-32) <a class="link" href="string.htm" title="string">string</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The <a class="link" href="string.htm" title="string">string</a> is not UTF-7 encoded.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/tdes.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/upper.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
