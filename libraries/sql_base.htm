<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: SQL base</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>SQL base</big></b></td>
<td align="right"><a class="link" href="../prg/sql_base.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/socket.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/stars.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#dbCategory">dbCategory</a></b></td></tr>
<tr><td width="30"></td><td>Enumeration type to describe database drivers.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#database">database</a></b></td></tr>
<tr><td width="30"></td><td>Abstract data type to store database connections.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#sqlStatement">sqlStatement</a></b></td></tr>
<tr><td width="30"></td><td>Abstract data type to store a prepared sql statement.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="dbCategory"><h3>dbCategory</h3></a>
<p>
const type: <b>dbCategory</b></p><dl><dd>
<p>
Enumeration type to describe database drivers.
</p>
<ul>
<li> NO_DB No database</li>
<li> DB_MYSQL MySql/MariaDb</li>
<li> DB_SQLITE SQLLite</li>
<li> DB_POSTGRESQL PostgreSQL</li>
<li> DB_OCI Oracle</li>
<li> DB_ODBC Odbc</li>
<li> DB_FIRE Firebird/Interbase</li>
<li> DB_DB2 Db2</li>
<li> DB_SQL_SERVER SQL Server</li>
<li> DB_TDS Tabular Data Stream</li>
</ul>
<ul>
<li> DB_INFORMIX Informix</li>
</ul>
</dd>
</dl></div>
<hr />
<div><a name="database"><h3>database</h3></a>
<p>
const type: <b>database</b></p><dl><dd>
<p>
Abstract data type to store database connections.
</p>
</dd>
</dl></div>
<hr />
<div><a name="sqlStatement"><h3>sqlStatement</h3></a>
<p>
const type: <b>sqlStatement</b></p><dl><dd>
<p>
Abstract data type to store a prepared sql statement.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in sqlStatement: stmt1) <b><a class="link" href="#(in_sqlStatement)=(in_sqlStatement)">=</a></b> (in sqlStatement: stmt2)</td></tr>
<tr><td width="30"></td><td>Check if two database connections are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in sqlStatement: stmt1) <b><a class="link" href="#(in_sqlStatement)&lt;>(in_sqlStatement)">&lt;></a></b> (in sqlStatement: stmt2)</td></tr>
<tr><td width="30"></td><td>Check if two database connections are not equal.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">database</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a></b> (in dbCategory: driver, in string: host,
                                   in integer: port, in string: dbName,
                                   in string: user, in string: password)</td></tr>
<tr><td width="30"></td><td>Open database with <i>host</i>, <i>port</i>, <i>dbName</i> <i>user</i> and <i>password</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">database</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a></b> (DB_ODBC, in string: odbcDriver,
                                   in string: server, in string: dbName,
                                   in string: user, in string: password)</td></tr>
<tr><td width="30"></td><td>Open ODBC database with <i>odbcDriver</i>, <i>server</i>, <i>dbName</i> <i>user</i> and <i>password</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">database</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)">openDatabase</a></b> (DB_INFORMIX, in string: host,
                                   in integer: port, in string: server,
                                   in string: dbName,
                                   in string: user, in string: password)</td></tr>
<tr><td width="30"></td><td>Open Informix database with <i>host</i>, <i>port</i>, <i>server</i>, <i>dbName</i> <i>user</i> and <i>password</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">database</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a></b> (in dbCategory: driver, in string: dbPath,
                                   in string: user, in string: password)</td></tr>
<tr><td width="30"></td><td>Open the database <i>dbPath</i> with the specified <i>user</i> and <i>password</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">database</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openDatabase(in_dbCategory,in_string)">openDatabase</a></b> (in dbCategory: driver,
                                   in string: connectStri)</td></tr>
<tr><td width="30"></td><td>Open a database with the specified <i>driver</i> and <i>connectStri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#close(in_database)">close</a></b> (in database: db)</td></tr>
<tr><td width="30"></td><td>Close the specified database <i>db</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">sqlStatement</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#prepare(in_database,in_string)">prepare</a></b> (in database: db, in string: sqlStatementStri)</td></tr>
<tr><td width="30"></td><td>Create a prepared statement for the given database <i>db</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_bigInteger)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in bigInteger: num)</td></tr>
<tr><td width="30"></td><td>Bind a bigInteger parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_bigRational)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in bigRational: bigRatData)</td></tr>
<tr><td width="30"></td><td>Bind a bigRational parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_boolean)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in boolean: flag)</td></tr>
<tr><td width="30"></td><td>Bind a boolean parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_bstring)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in bstring: bstri)</td></tr>
<tr><td width="30"></td><td>Bind a bstring parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_float)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in float: number)</td></tr>
<tr><td width="30"></td><td>Bind a float parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_integer)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in integer: number)</td></tr>
<tr><td width="30"></td><td>Bind an integer parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,NULL)">bind</a></b> (inout sqlStatement: statement, in integer: pos, NULL)</td></tr>
<tr><td width="30"></td><td>Bind a NULL parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_string)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in string: stri)</td></tr>
<tr><td width="30"></td><td>Bind a string parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_time)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in time: timeData)</td></tr>
<tr><td width="30"></td><td>Bind a time parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bind(inout_sqlStatement,in_integer,in_duration)">bind</a></b> (inout sqlStatement: statement, in integer: pos, in duration: durationData)</td></tr>
<tr><td width="30"></td><td>Bind a duration parameter to a prepared SQL statement.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#execute(inout_sqlStatement)">execute</a></b> (inout sqlStatement: statement)</td></tr>
<tr><td width="30"></td><td>Execute the specified prepared SQL <i>statement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fetch(in_sqlStatement)">fetch</a></b> (in sqlStatement: statement)</td></tr>
<tr><td width="30"></td><td>Fetch a row from the result data of an executed <i>statement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_bigInteger)">column</a></b> (in sqlStatement: statement, in integer: column,
                               attr bigInteger)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_bigRational)">column</a></b> (in sqlStatement: statement, in integer: column,
                                attr bigRational)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="bigrat.htm" title="bigRational">bigRational</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_boolean)">column</a></b> (in sqlStatement: statement, in integer: column,
                               attr boolean)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="boolean.htm" title="boolean">boolean</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bstring</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_bstring)">column</a></b> (in sqlStatement: statement, in integer: column,
                               attr bstring)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="bstring.htm" title="bstring">bstring</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">duration</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_duration)">column</a></b> (in sqlStatement: statement, in integer: column,
                         attr duration)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="duration.htm" title="duration">duration</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_float)">column</a></b> (in sqlStatement: statement, in integer: column,
                               attr float)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="float.htm" title="float">float</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_integer)">column</a></b> (in sqlStatement: statement, in integer: column,
                               attr integer)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="integer.htm" title="integer">integer</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_string)">column</a></b> (in sqlStatement: statement, in integer: column,
                               attr string)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#column(in_sqlStatement,in_integer,attr_time)">column</a></b> (in sqlStatement: statement, in integer: column,
                         attr time)</td></tr>
<tr><td width="30"></td><td>Get the specified column of fetched data as <a class="link" href="time.htm" title="time">time</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isNull(in_sqlStatement,in_integer)">isNull</a></b> (in sqlStatement: statement, in integer: column)</td></tr>
<tr><td width="30"></td><td>Determine if the specified column of fetched data is NULL.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getAutoCommit(in_database)">getAutoCommit</a></b> (in database: db)</td></tr>
<tr><td width="30"></td><td>Get the current auto-commit mode for the specified database 'database'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setAutoCommit(in_database,in_boolean)">setAutoCommit</a></b> (in database: db, in boolean: autoCommit)</td></tr>
<tr><td width="30"></td><td>Set the auto-commit mode for the specified database 'database'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#commit(in_database)">commit</a></b> (in database: db)</td></tr>
<tr><td width="30"></td><td>Execute a commit statement for the specified database <i>db</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rollback(in_database)">rollback</a></b> (in database: db)</td></tr>
<tr><td width="30"></td><td>Execute a rollback statement for the specified database <i>db</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#columnCount(in_sqlStatement)">columnCount</a></b> (in sqlStatement: statement)</td></tr>
<tr><td width="30"></td><td>Return the number of columns in the result data of a <i>statement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#columnName(in_sqlStatement,in_integer)">columnName</a></b> (in sqlStatement: statement, in integer: column)</td></tr>
<tr><td width="30"></td><td>Return the name of a column in the result data of a <i>statement</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(in_sqlStatement)=(in_sqlStatement)"><h3>=</h3></a>
<p>
const func boolean: (in sqlStatement: stmt1) <b>=</b> (in sqlStatement: stmt2)</p><dl><dd>
<p>
Check if two database connections are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two database connections are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_sqlStatement)&lt;>(in_sqlStatement)"><h3>&lt;></h3></a>
<p>
const func boolean: (in sqlStatement: stmt1) <b>&lt;></b> (in sqlStatement: stmt2)</p><dl><dd>
<p>
Check if two database connections are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if the two database connections are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)"><h3>openDatabase</h3></a>
<p>
const func database: <b>openDatabase</b> (in dbCategory: driver, in string: host,
                                   in integer: port, in string: dbName,
                                   in string: user, in string: password)</p><dl><dd>
<p>
Open database with <i>host</i>, <i>port</i>, <i>dbName</i> <i>user</i> and <i>password</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>driver</tt> - Database driver to be used.</dd>
<dd><tt>host</tt> - The host can be specified by name, with an IPv4 address or with        an IPv6 address. If <i>host</i> is empty it is assumed to be "localhost".</dd>
<dd><tt>port</tt> - The port to be used to access the database. If <i>port</i> is        zero the default port of the database or driver is used.</dd>
<dd><tt>dbName</tt> - The name of the database at the specified <i>host</i>.</dd>
<dd><tt>user</tt> - Database user name.</dd>
<dd><tt>password</tt> - Database password.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the database connection.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If dbPath, user or password cannot be converted to                        the character set of the database.</dd>
<dd><tt>DATABASE_ERROR</tt> - If the DLL of the database could not be found, or                           the connection to the database failed.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)"><h3>openDatabase</h3></a>
<p>
const func database: <b>openDatabase</b> (DB_ODBC, in string: odbcDriver,
                                   in string: server, in string: dbName,
                                   in string: user, in string: password)</p><dl><dd>
<p>
Open ODBC database with <i>odbcDriver</i>, <i>server</i>, <i>dbName</i> <i>user</i> and <i>password</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>driver</tt> - Database driver to be used (DB_ODBC).</dd>
<dd><tt>odbcDriver</tt> - The name of the ODBC driver (e.g.: "sqlserver").</dd>
<dd><tt>server</tt> - The database server to be used.</dd>
<dd><tt>dbName</tt> - The name of the database at the specified <i>server</i>.</dd>
<dd><tt>user</tt> - Database user name.</dd>
<dd><tt>password</tt> - Database password.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the database connection.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If dbPath, user or password cannot be converted to                        the character set of the database.</dd>
<dd><tt>DATABASE_ERROR</tt> - If the DLL of the database could not be found, or                           the connection to the database failed.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)"><h3>openDatabase</h3></a>
<p>
const func database: <b>openDatabase</b> (DB_INFORMIX, in string: host,
                                   in integer: port, in string: server,
                                   in string: dbName,
                                   in string: user, in string: password)</p><dl><dd>
<p>
Open Informix database with <i>host</i>, <i>port</i>, <i>server</i>, <i>dbName</i> <i>user</i> and <i>password</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>driver</tt> - Database driver to be used (DB_INFORMIX).</dd>
<dd><tt>host</tt> - The host can be specified by name, with an IPv4 address or with        an IPv6 address. If <i>host</i> is empty it is assumed to be "localhost".</dd>
<dd><tt>port</tt> - The port to be used to access the database. If <i>port</i> is        zero the default port of the database or driver is used.</dd>
<dd><tt>server</tt> - The database server to be used.</dd>
<dd><tt>dbName</tt> - The name of the database at the specified <i>server</i>.</dd>
<dd><tt>user</tt> - Database user name.</dd>
<dd><tt>password</tt> - Database password.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the database connection.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If dbPath, user or password cannot be converted to                        the character set of the database.</dd>
<dd><tt>DATABASE_ERROR</tt> - If the DLL of the database could not be found, or                           the connection to the database failed.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="openDatabase(in_dbCategory,in_string,in_string,in_string)"><h3>openDatabase</h3></a>
<p>
const func database: <b>openDatabase</b> (in dbCategory: driver, in string: dbPath,
                                   in string: user, in string: password)</p><dl><dd>
<p>
Open the database <i>dbPath</i> with the specified <i>user</i> and <i>password</i>.
The <i>dbPath</i> can be in one of the forms:
</p>
<ul>
<li> host:port/dbName</li>
<li> host/dbName</li>
<li> dbName</li>
</ul>
<p>
The <i>host</i> can be specified with name (e.g.: www.example.org), or with
IPv4 address (e.g.: 192.0.2.235) or as IPv6 address in colon notation
(e.g.: [1234:feed::dead:beef]). Note that an IPv6 address must be enclosed
in brackets.
</p>
<p>
If <i>driver</i> is DB_ODBC the <i>dbPath</i> can be in one of the forms:
</p>
<ul>
<li> odbcDriver:dbServer/dbName</li>
<li> odbcDriver:dbServer</li>
<li> dbServer/dbName</li>
<li> odbcDataSourceName</li>
</ul>
<p>
The <i>odbcDriver</i> can have a value like <i>sqlserver</i>.
</p>
<p>
If <i>driver</i> is DB_SQLITE the <i>dbPath</i> is the path of a database file:
</p>
<ul>
<li> sqlitePath</li>
</ul>
<p>
The <i>sqlitePath</i> uses the Seed7 standard path representation.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>driver</tt> - Database driver to be used.</dd>
<dd><tt>dbPath</tt> - Database name in one of the forms listed above.        If no host is specified the host "localhost" is used.        If no port is specified the port of the database driver is used.        If no odbcDriver is specified "sqlserver" is used.</dd>
<dd><tt>user</tt> - Database user name.</dd>
<dd><tt>password</tt> - Database password.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the database connection.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If dbPath, user or password cannot be converted to                        the character set of the database.</dd>
<dd><tt>DATABASE_ERROR</tt> - If the DLL of the database could not be found, or                           the connection to the database failed.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="openDatabase(in_dbCategory,in_string)"><h3>openDatabase</h3></a>
<p>
const func database: <b>openDatabase</b> (in dbCategory: driver,
                                   in string: connectStri)</p><dl><dd>
<p>
Open a database with the specified <i>driver</i> and <i>connectStri</i>.
The <i>connectStri</i> must be in one of the forms
</p>
<ul>
<li> user:password@dbPath</li>
<li> user@dbPath</li>
<li> dbPath</li>
</ul>
<p>
The <i>dbPath</i> can be specified with host name ("e.g.: "www.example.org/myDb"),
or with IPv4 address in standard dot notation (e.g.: "192.0.2.235/myDb").
Operating systems supporting IPv6 may also accept an IPv6 address
in colon notation. Some databases allow also the specification of a port
number (e.g.: "localhost:1234/myDb" or "[1234:feed::dead:beef]:1234/myDb", with
an IPv6 address).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>driver</tt> - Database driver to be used.</dd>
<dd><tt>connectStri</tt> - Connection string in one of the forms listed above.        If no user is specified the user "guest" is used.        If no password is specified the password "guest" is used.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the database connection.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If dbPath, user or password cannot be converted to                        the character set of the database.</dd>
<dd><tt>DATABASE_ERROR</tt> - If the DLL of the database could not be found, or                           the connection to the database failed.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="close(in_database)"><h3>close</h3></a>
<p>
const proc: <b>close</b> (in database: db)</p><dl><dd>
<p>
Close the specified database <i>db</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>database</tt> - Database to be closed.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the database was not open.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="prepare(in_database,in_string)"><h3>prepare</h3></a>
<p>
const func sqlStatement: <b>prepare</b> (in database: db, in string: sqlStatementStri)</p><dl><dd>
<p>
Create a prepared statement for the given database <i>db</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>db</tt> - Database connection for which the prepared statement should        be created.</dd>
<dd><tt>sqlStatementStri</tt> - SQL statement in a string. For bind variables        use a question mark (?).</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the database is not open.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_bigInteger)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in bigInteger: num)</p><dl><dd>
<p>
Bind a bigInteger parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>num</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>num</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_bigRational)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in bigRational: bigRatData)</p><dl><dd>
<p>
Bind a bigRational parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>bigRatData</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>bigRatData</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_boolean)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in boolean: flag)</p><dl><dd>
<p>
Bind a boolean parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>flag</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>flag</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_bstring)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in bstring: bstri)</p><dl><dd>
<p>
Bind a bstring parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>bstri</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>bstri</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_float)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in float: number)</p><dl><dd>
<p>
Bind a float parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>number</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>number</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_integer)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in integer: number)</p><dl><dd>
<p>
Bind an integer parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>number</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>number</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,NULL)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, NULL)</p><dl><dd>
<p>
Bind a NULL parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_string)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in string: stri)</p><dl><dd>
<p>
Bind a string parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>stri</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>stri</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_time)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in time: timeData)</p><dl><dd>
<p>
Bind a time parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>timeData</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>timeData</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bind(inout_sqlStatement,in_integer,in_duration)"><h3>bind</h3></a>
<p>
const proc: <b>bind</b> (inout sqlStatement: statement, in integer: pos, in duration: durationData)</p><dl><dd>
<p>
Bind a duration parameter to a prepared SQL statement.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>pos</tt> - Position of the bind variable (starting with 1).</dd>
<dd><tt>durationData</tt> - Value for the binding.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if <i>pos</i> is negative or too big or                        if <i>durationData</i> cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="execute(inout_sqlStatement)"><h3>execute</h3></a>
<p>
const proc: <b>execute</b> (inout sqlStatement: statement)</p><dl><dd>
<p>
Execute the specified prepared SQL <i>statement</i>.
Bind variable can be assigned with the function <i>bind</i> before
<i>execute</i> is called.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement, which should be executed.</dd>
</dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fetch(in_sqlStatement)"><h3>fetch</h3></a>
<p>
const func boolean: <b>fetch</b> (in sqlStatement: statement)</p><dl><dd>
<p>
Fetch a row from the result data of an executed <i>statement</i>.
After the <i>statement</i> has been executed successfully the
function <i>fetch</i> can be used to get the first and further
rows of the statements result data. The columns of the
result data can be obtained with the <i>column</i> functions.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement, which has been executed.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if a row of result data could be fetched successfully.         FALSE if no more result data is available.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_bigInteger)"><h3>column</h3></a>
<p>
const func bigInteger: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr bigInteger)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.
If the column data is NULL it is interpreted as 0_.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from 0_.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> or         0_, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_bigRational)"><h3>column</h3></a>
<p>
const func bigRational: <b>column</b> (in sqlStatement: statement, in integer: column,
                                attr bigRational)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="bigrat.htm" title="bigRational">bigRational</a>.
If the column data is NULL it is interpreted as 0_/1_.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from 0_/1_.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="bigrat.htm" title="bigRational">bigRational</a> or         0_/1_, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_boolean)"><h3>column</h3></a>
<p>
const func boolean: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr boolean)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="boolean.htm" title="boolean">boolean</a>.
If the column data is NULL it is interpreted as FALSE.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from FALSE.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="boolean.htm" title="boolean">boolean</a> or         FALSE, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_bstring)"><h3>column</h3></a>
<p>
const func bstring: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr bstring)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="bstring.htm" title="bstring">bstring</a>.
If the column data is NULL it is interpreted as empty bstring.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from an empty bstring.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="bstring.htm" title="bstring">bstring</a> or         an empty bstring, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_duration)"><h3>column</h3></a>
<p>
const func duration: <b>column</b> (in sqlStatement: statement, in integer: column,
                         attr duration)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="duration.htm" title="duration">duration</a>.
If the column data is NULL it is interpreted as empty duration.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from an empty duration.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="duration.htm" title="duration">duration</a> or         an empty duration, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_float)"><h3>column</h3></a>
<p>
const func float: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr float)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="float.htm" title="float">float</a>.
If the column data is NULL it is interpreted as 0.0.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from 0.0.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="float.htm" title="float">float</a> or         0.0, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_integer)"><h3>column</h3></a>
<p>
const func integer: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr integer)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="integer.htm" title="integer">integer</a>.
If the column data is NULL it is interpreted as 0.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from 0.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to an <a class="link" href="integer.htm" title="integer">integer</a> or         0, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_string)"><h3>column</h3></a>
<p>
const func string: <b>column</b> (in sqlStatement: statement, in integer: column,
                               attr string)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="string.htm" title="string">string</a>.
If the column data is NULL it is interpreted as "".
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from "".
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="string.htm" title="string">string</a> or         "", if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="column(in_sqlStatement,in_integer,attr_time)"><h3>column</h3></a>
<p>
const func time: <b>column</b> (in sqlStatement: statement, in integer: column,
                         attr time)</p><dl><dd>
<p>
Get the specified column of fetched data as <a class="link" href="time.htm" title="time">time</a>.
If the column data is NULL it is interpreted as 0-01-01 00:00:00.
The function <a class="link" href="#isNull(in_sqlStatement,in_integer)" title="isNull">isNull</a> can distinguish NULL from 0-01-01 00:00:00.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the column data converted to a <a class="link" href="time.htm" title="time">time</a> or         0-01-01 00:00:00, if the column data is NULL.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist or                        if the column cannot be converted.</dd>
<dd><tt>DATABASE_ERROR</tt> - If a database function fails.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="isNull(in_sqlStatement,in_integer)"><h3>isNull</h3></a>
<p>
const func boolean: <b>isNull</b> (in sqlStatement: statement, in integer: column)</p><dl><dd>
<p>
Determine if the specified column of fetched data is NULL.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement for which data was fetched.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the column data is NULL,         FALSE otherwise.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the statement was not prepared or                        if no data was successfully fetched or                        if the specified column does not exist.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getAutoCommit(in_database)"><h3>getAutoCommit</h3></a>
<p>
const func boolean: <b>getAutoCommit</b> (in database: db)</p><dl><dd>
<p>
Get the current auto-commit mode for the specified database 'database'.
</p>
</dd>
</dl></div>
<hr />
<div><a name="setAutoCommit(in_database,in_boolean)"><h3>setAutoCommit</h3></a>
<p>
const proc: <b>setAutoCommit</b> (in database: db, in boolean: autoCommit)</p><dl><dd>
<p>
Set the auto-commit mode for the specified database 'database'.
</p>
</dd>
</dl></div>
<hr />
<div><a name="commit(in_database)"><h3>commit</h3></a>
<p>
const proc: <b>commit</b> (in database: db)</p><dl><dd>
<p>
Execute a commit statement for the specified database <i>db</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="rollback(in_database)"><h3>rollback</h3></a>
<p>
const proc: <b>rollback</b> (in database: db)</p><dl><dd>
<p>
Execute a rollback statement for the specified database <i>db</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="columnCount(in_sqlStatement)"><h3>columnCount</h3></a>
<p>
const func integer: <b>columnCount</b> (in sqlStatement: statement)</p><dl><dd>
<p>
Return the number of columns in the result data of a <i>statement</i>.
It is not necessary to <i>execute</i> the prepared statement, before
<i>columnCount</i> is called.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="columnName(in_sqlStatement,in_integer)"><h3>columnName</h3></a>
<p>
const func string: <b>columnName</b> (in sqlStatement: statement, in integer: column)</p><dl><dd>
<p>
Return the name of a column in the result data of a <i>statement</i>.
It is not necessary to <i>execute</i> the prepared statement, before
<i>columnName</i> is called.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>statement</tt> - Prepared statement.</dd>
<dd><tt>column</tt> - Number of the column (starting with 1).</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/socket.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/stars.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
  </body>
</html>
