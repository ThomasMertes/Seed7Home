<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: String</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>String</big></b></td>
<td align="right"><a class="link" href="../prg/string.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/strifile.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/stritext.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr string) <b><a class="link" href="#(attr_string)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>string</i> ("").</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)mult(in_integer)">mult</a></b> (in integer: factor)</td></tr>
<tr><td width="30"></td><td>String multiplication.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)lpad(in_integer)">lpad</a></b> (in integer: length)</td></tr>
<tr><td width="30"></td><td>Pad a <i>string</i> with spaces at the left side up to a given length.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)lpad0(in_integer)">lpad0</a></b> (in integer: length)</td></tr>
<tr><td width="30"></td><td>Pad a <i>string</i> with zeroes at the left side up to a given length.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)rpad(in_integer)">rpad</a></b> (in integer: length)</td></tr>
<tr><td width="30"></td><td>Pad a <i>string</i> with spaces at the right side up to a given length.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)&amp;(in_string)">&amp;</a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Concatenate two strings.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)&lt;&amp;(in_string)">&lt;&amp;</a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Concatenate two strings.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)[(in_integer)]">[</a></b> (in integer: index) ]</td></tr>
<tr><td width="30"></td><td>Get a character, identified by an <i>index</i>, from a <i>string</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)[(in_integer).._]">[</a></b> (in integer: start) .. ]</td></tr>
<tr><td width="30"></td><td>Get a substring beginning at a <i>start</i> position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)[_..(in_integer)]">[ ..</a></b> (in integer: stop) ]</td></tr>
<tr><td width="30"></td><td>Get a substring ending at a <i>stop</i> position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)[(in_integer)..(in_integer)]">[</a></b> (in integer: start) ..
                                       (in integer: stop) ]</td></tr>
<tr><td width="30"></td><td>Get a substring from a <i>start</i> position to a <i>stop</i> position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)[(in_integer)len(in_integer)]">[</a></b> (in integer: start) len
                                       (in integer: length) ]</td></tr>
<tr><td width="30"></td><td>Get a substring from a <i>start</i> position with a given <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri) <b><a class="link" href="#(in_string)[(in_integer)fixLen(in_integer)]">[</a></b> (in integer: start) fixLen
                                       (in integer: length) ]</td></tr>
<tr><td width="30"></td><td>Get a substring from a <i>start</i> position with a guaranteed <i>length</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout string: destination) <b><a class="link" href="#(inout_string)&amp;:=(in_string)">&amp;:=</a></b> (in string: extension)</td></tr>
<tr><td width="30"></td><td>Append the string <i>extension</i> to <i>destination</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout string: destination) <b><a class="link" href="#(inout_string)&amp;:=(in_char)">&amp;:=</a></b> (in char: extension)</td></tr>
<tr><td width="30"></td><td>Append the char <i>extension</i> to <i>destination</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout string: destination) <b><a class="link" href="#(inout_string)@:=_[(in_integer)](in_char)">@:= [</a></b> (in integer: position) ] (in char: source)</td></tr>
<tr><td width="30"></td><td>Assign char <i>source</i> to the <i>position</i> of the <i>destination</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout string: destination) <b><a class="link" href="#(inout_string)@:=_[(in_integer)](in_string)">@:= [</a></b> (in integer: position) ] (in string: source)</td></tr>
<tr><td width="30"></td><td>Assign string <i>source</i> to the <i>position</i> of the <i>destination</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)=(in_string)">=</a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Check if two strings are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)&lt;>(in_string)">&lt;></a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Check if two strings are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)&lt;(in_string)">&lt;</a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Check if stri1 is less than stri2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)>(in_string)">></a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Check if stri1 is greater than stri2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)&lt;=(in_string)">&lt;=</a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Check if stri1 is less than or equal to stri2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in string: stri1) <b><a class="link" href="#(in_string)>=(in_string)">>=</a></b> (in string: stri2)</td></tr>
<tr><td width="30"></td><td>Check if stri1 is greater than or equal to stri2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr string) <b><a class="link" href="#(attr_string)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert to a string.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_string,in_string)">compare</a></b> (in string: stri1, in string: stri2)</td></tr>
<tr><td width="30"></td><td>Compare two strings.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_string)">hashCode</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a <i>string</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(in_string)">length</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Determine the length of a <i>string</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#startsWith(in_string,in_string)">startsWith</a></b> (in string: stri, in string: prefix)</td></tr>
<tr><td width="30"></td><td>Determine if a string starts with a <i>prefix</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#endsWith(in_string,in_string)">endsWith</a></b> (in string: stri, in string: suffix)</td></tr>
<tr><td width="30"></td><td>Determine if a string ends with a <i>suffix</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#equalAtIndex(in_string,in_string,in_integer)">equalAtIndex</a></b> (in string: stri, in string: searched, in integer: index)</td></tr>
<tr><td width="30"></td><td>Check if <i>stri</i> has the <i>searched</i> characters starting from <i>index</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pos(in_string,in_string)">pos</a></b> (in string: mainStri, in string: searched)</td></tr>
<tr><td width="30"></td><td>Determine leftmost position of string <i>searched</i> in <i>mainStri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pos(in_string,in_char)">pos</a></b> (in string: mainStri, in char: searched)</td></tr>
<tr><td width="30"></td><td>Determine leftmost position of char <i>searched</i> in <i>mainStri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pos(in_string,in_string,in_integer)">pos</a></b> (in string: mainStri, in string: searched,
                         in integer: fromIndex)</td></tr>
<tr><td width="30"></td><td>Search string <i>searched</i> in <i>mainStri</i> at or after <i>fromIndex</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pos(in_string,in_char,in_integer)">pos</a></b> (in string: mainStri, in char: searched,
                         in integer: fromIndex)</td></tr>
<tr><td width="30"></td><td>Search char <i>searched</i> in <i>mainStri</i> at or after <i>fromIndex</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rpos(in_string,in_string)">rpos</a></b> (in string: mainStri, in string: searched)</td></tr>
<tr><td width="30"></td><td>Determine rightmost position of string <i>searched</i> in <i>mainStri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rpos(in_string,in_char)">rpos</a></b> (in string: mainStri, in char: searched)</td></tr>
<tr><td width="30"></td><td>Determine rightmost position of char <i>searched</i> in <i>mainStri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rpos(in_string,in_string,in_integer)">rpos</a></b> (in string: mainStri, in string: searched,
                          in integer: fromIndex)</td></tr>
<tr><td width="30"></td><td>Search string <i>searched</i> in <i>mainStri</i> at or before <i>fromIndex</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rpos(in_string,in_char,in_integer)">rpos</a></b> (in string: mainStri, in char: searched,
                          in integer: fromIndex)</td></tr>
<tr><td width="30"></td><td>Search char <i>searched</i> in <i>mainStri</i> at or before <i>fromIndex</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#replace(in_string,in_string,in_string)">replace</a></b> (in string: mainStri, in string: searched,
                            in string: replacement)</td></tr>
<tr><td width="30"></td><td>Replace occurrences of <i>searched</i> in <i>mainStri</i> by <i>replacement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#replace1(in_string,in_string,in_string)">replace1</a></b> (in string: mainStri, in string: searched,
    in string: replacement)</td></tr>
<tr><td width="30"></td><td>Replace one occurrence of <i>searched</i> in <i>mainStri</i> by <i>replacement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#replaceN(in_string,in_string,in_string)">replaceN</a></b> (in string: mainStri, in string: searched,
                             in string: replacement)</td></tr>
<tr><td width="30"></td><td>Replace all occurrences of <i>searched</i> in <i>mainStri</i> by <i>replacement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#replace2(in_string,in_string,in_string,in_string)">replace2</a></b> (in string: mainStri, in string: search1,
    in string: search2, in string: replacement)</td></tr>
<tr><td width="30"></td><td>Replace occurrences of <i>search1</i> followed by <i>search2</i> with <i>replacement</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#upper(in_string)">upper</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a string to upper case.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lower(in_string)">lower</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a string to lower case.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#width(in_string)">width</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Number of screen columns occupied by the Unicode string <i>stri</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#reverse(in_string)">reverse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Reverse the characters in a string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#trim(in_string)">trim</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Return string with leading and trailing whitespace omitted.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ltrim(in_string)">ltrim</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Return string with leading whitespace omitted.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rtrim(in_string)">rtrim</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Return string with trailing whitespace omitted.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#trimValue(in_type,in_string)">trimValue</a></b> (in type: aType, in string: stri)</td></tr>
<tr><td width="30"></td><td>Trim a string such that it can be converted to <i>aType</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#trimValue(attr_string,in_string)">trimValue</a></b> (attr string, in string: stri)</td></tr>
<tr><td width="30"></td><td>Trim a string such that it can be converted to <i>string</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_string)">str</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert to a string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#string(in_string)">string</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert to a string.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_string)._value"><h3>. value</h3></a>
<p>
const string: (attr string) <b>. value</b></p><dl><dd>
<p>
Default value of <i>string</i> ("").
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_string)mult(in_integer)"><h3>mult</h3></a>
<p>
const func string: (in string: stri) <b>mult</b> (in integer: factor)</p><dl><dd>
<p>
String multiplication.
The string <i>stri</i> is concatenated to itself such that in total
<i>factor</i> strings are concatenated.
</p>
<pre class="indent">
"LA" mult 3     returns "LALALA"
"WORD" mult 0   returns ""
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the string multiplication.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the factor is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)lpad(in_integer)"><h3>lpad</h3></a>
<p>
const func string: (in string: stri) <b>lpad</b> (in integer: length)</p><dl><dd>
<p>
Pad a <i>string</i> with spaces at the left side up to a given length.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>string</i> left padded with spaces.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)lpad0(in_integer)"><h3>lpad0</h3></a>
<p>
const func string: (in string: stri) <b>lpad0</b> (in integer: length)</p><dl><dd>
<p>
Pad a <i>string</i> with zeroes at the left side up to a given length.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>string</i> left padded with zeroes.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)rpad(in_integer)"><h3>rpad</h3></a>
<p>
const func string: (in string: stri) <b>rpad</b> (in integer: length)</p><dl><dd>
<p>
Pad a <i>string</i> with spaces at the right side up to a given length.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>string</i> right padded with spaces.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)&amp;(in_string)"><h3>&amp;</h3></a>
<p>
const func string: (in string: stri1) <b>&amp;</b> (in string: stri2)</p><dl><dd>
<p>
Concatenate two strings.
This operator is intended for normal expressions. Its parameters
are not converted to <i>string</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the concatenation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)&lt;&amp;(in_string)"><h3>&lt;&amp;</h3></a>
<p>
const func string: (in string: stri1) <b>&lt;&amp;</b> (in string: stri2)</p><dl><dd>
<p>
Concatenate two strings.
This operator is intended for write statements. The functions
<a class="link" href="enable_io.htm#enable_io(in_type)" title="enable_io">enable_io</a> respectively
<a class="link" href="enable_output.htm#enable_output(in_type)" title="enable_output">enable_output</a> overload
the &lt;&amp; operator for many types. This overloaded operators
optionally convert parameters to <i>string</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the concatenation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)[(in_integer)]"><h3>[</h3></a>
<p>
const func char: (in string: stri) <b>[</b> (in integer: index) ]</p><dl><dd>
<p>
Get a character, identified by an <i>index</i>, from a <i>string</i>.
The first character has the <i>index</i> 1.
</p>
<pre class="indent">
"abcde"[1]  returns 'a'
"abcde"[5]  returns 'e'
"abcde"[0]  raises INDEX_ERROR
"abcde"[6]  raises INDEX_ERROR
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character specified with the <i>index</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If the <i>index</i> is less than 1 or            greater than the length of the <i>string</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)[(in_integer).._]"><h3>[</h3></a>
<p>
const func string: (in string: stri) <b>[</b> (in integer: start) .. ]</p><dl><dd>
<p>
Get a substring beginning at a <i>start</i> position.
The first character in a <i>string</i> has the position 1.
</p>
<pre class="indent">
"abcde"[3 ..]  returns "cde"
"abcde"[6 ..]  returns ""
     ""[1 ..]  returns ""
"abcde"[1 ..]  returns "abcde"
"abcde"[0 ..]  raises INDEX_ERROR
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Source string from which the substring is created.</dd>
<dd><tt>start</tt> - Start position which must be >= 1.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring beginning at the <i>start</i> position.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - The <i>start</i> position is negative or zero.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)[_..(in_integer)]"><h3>[ ..</h3></a>
<p>
const func string: (in string: stri) <b>[ ..</b> (in integer: stop) ]</p><dl><dd>
<p>
Get a substring ending at a <i>stop</i> position.
The first character in a <i>string</i> has the position 1.
</p>
<pre class="indent">
"abcde"[.. 4]   returns "abcd"
"abcde"[.. 6]   returns "abcde"
     ""[.. 5]   returns ""
"abcde"[.. 0]   returns ""
"abcde"[.. -1]  raises INDEX_ERROR
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Source string from which the substring is created.</dd>
<dd><tt>stop</tt> - Stop position which must be >= 0.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring ending at the <i>stop</i> position.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - The <i>stop</i> position is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)[(in_integer)..(in_integer)]"><h3>[</h3></a>
<p>
const func string: (in string: stri) <b>[</b> (in integer: start) ..
                                       (in integer: stop) ]</p><dl><dd>
<p>
Get a substring from a <i>start</i> position to a <i>stop</i> position.
The first character in a <i>string</i> has the position 1.
</p>
<pre class="indent">
"abcde"[2 .. 4]   returns "bcd"
"abcde"[2 .. 7]   returns "bcde"
"abcde"[4 .. 3]   returns ""
"abcde"[4 .. 2]   raises INDEX_ERROR
"abcde"[6 .. 8]   returns ""
"abcde"[1 .. 3]   returns "abc"
"abcde"[0 .. 3]   raises INDEX_ERROR
"abcde"[1 .. 0]   returns ""
"abcde"[1 .. -1]  raises INDEX_ERROR
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Source string from which the substring is created.</dd>
<dd><tt>start</tt> - Start position which must be >= 1.</dd>
<dd><tt>stop</tt> - Stop position which must be >= pred(<i>start</i>).</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring from position <i>start</i> to <i>stop</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - The <i>start</i> position is negative or zero, or                        the <i>stop</i> position is less than pred(<i>start</i>).</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)[(in_integer)len(in_integer)]"><h3>[</h3></a>
<p>
const func string: (in string: stri) <b>[</b> (in integer: start) len
                                       (in integer: length) ]</p><dl><dd>
<p>
Get a substring from a <i>start</i> position with a given <i>length</i>.
The first character in a <i>string</i> has the position 1.
</p>
<pre class="indent">
"abcde"[2 len 3]   returns "bcd"
"abcde"[2 len 5]   returns "bcde"
"abcde"[3 len 0]   returns ""
"abcde"[6 len 2]   returns ""
"abcde"[3 len -1]  raises INDEX_ERROR
"abcde"[0 len 2]   raises INDEX_ERROR
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Source string from which the substring is created.</dd>
<dd><tt>start</tt> - Start position which must be >= 1.</dd>
<dd><tt>length</tt> - Requested maximum length of the substring.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring from the <i>start</i> position with up to <i>length</i> characters.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - The <i>start</i> position is negative or zero, or                        the <i>length</i> is negative.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)[(in_integer)fixLen(in_integer)]"><h3>[</h3></a>
<p>
const func string: (in string: stri) <b>[</b> (in integer: start) fixLen
                                       (in integer: length) ]</p><dl><dd>
<p>
Get a substring from a <i>start</i> position with a guaranteed <i>length</i>.
The first character in a string has the position 1.
</p>
<pre class="indent">
"abcde"[2 fixLen 3]   returns "bcd"
"abcde"[3 fixLen 0]   returns ""
"abcde"[2 fixLen 5]   raises INDEX_ERROR
"abcde"[6 fixLen 2]   raises INDEX_ERROR
"abcde"[3 fixLen -1]  raises INDEX_ERROR
"abcde"[0 fixLen 2]   raises INDEX_ERROR
     ""[1 fixLen 0]   raises INDEX_ERROR
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>stri</tt> - Source string from which the substring is created.</dd>
<dd><tt>start</tt> - Start position between 1 and length(<i>stri</i>).</dd>
<dd><tt>length</tt> - Guaranteed length of the substring.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring from the <i>start</i> position with <i>length</i> characters.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - The <i>length</i> is negative, or the <i>start</i> position                        is outside of the string, or the substring from the                        <i>start</i> position has less than <i>length</i> characters.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_string)&amp;:=(in_string)"><h3>&amp;:=</h3></a>
<p>
const proc: (inout string: destination) <b>&amp;:=</b> (in string: extension)</p><dl><dd>
<p>
Append the string <i>extension</i> to <i>destination</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the concatenated            string.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_string)&amp;:=(in_char)"><h3>&amp;:=</h3></a>
<p>
const proc: (inout string: destination) <b>&amp;:=</b> (in char: extension)</p><dl><dd>
<p>
Append the char <i>extension</i> to <i>destination</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the concatenated            string.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_string)@:=_[(in_integer)](in_char)"><h3>@:= [</h3></a>
<p>
const proc: (inout string: destination) <b>@:= [</b> (in integer: position) ] (in char: source)</p><dl><dd>
<p>
Assign char <i>source</i> to the <i>position</i> of the <i>destination</i>.
</p>
<pre class="indent">
A @:= [B] C;
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A := A[..pred(B)] &amp; str(C) &amp; A[succ(B)..];
</pre>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If <i>position</i> is negative or zero, or            a character beyond <i>destination</i> would be overwritten            (<i>position</i> > length(<i>destination</i>) holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_string)@:=_[(in_integer)](in_string)"><h3>@:= [</h3></a>
<p>
const proc: (inout string: destination) <b>@:= [</b> (in integer: position) ] (in string: source)</p><dl><dd>
<p>
Assign string <i>source</i> to the <i>position</i> of the <i>destination</i>.
</p>
<pre class="indent">
A @:= [B] C;
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A := A[..pred(B)] &amp; C &amp; A[B+length(C)..];
</pre>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If <i>position</i> is negative or zero, or            if <i>destination</i> is smaller than <i>source</i>, or            characters beyond <i>destination</i> would be overwritten            (<i>position</i> + length(<i>source</i>) > succ(length(<i>destination</i>))            holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)=(in_string)"><h3>=</h3></a>
<p>
const func boolean: (in string: stri1) <b>=</b> (in string: stri2)</p><dl><dd>
<p>
Check if two strings are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both strings are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)&lt;>(in_string)"><h3>&lt;></h3></a>
<p>
const func boolean: (in string: stri1) <b>&lt;></b> (in string: stri2)</p><dl><dd>
<p>
Check if two strings are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both strings are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)&lt;(in_string)"><h3>&lt;</h3></a>
<p>
const func boolean: (in string: stri1) <b>&lt;</b> (in string: stri2)</p><dl><dd>
<p>
Check if stri1 is less than stri2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if stri1 is less than stri2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)>(in_string)"><h3>></h3></a>
<p>
const func boolean: (in string: stri1) <b>></b> (in string: stri2)</p><dl><dd>
<p>
Check if stri1 is greater than stri2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if stri1 is greater than stri2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)&lt;=(in_string)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in string: stri1) <b>&lt;=</b> (in string: stri2)</p><dl><dd>
<p>
Check if stri1 is less than or equal to stri2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if stri1 is less than or equal to stri2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_string)>=(in_string)"><h3>>=</h3></a>
<p>
const func boolean: (in string: stri1) <b>>=</b> (in string: stri2)</p><dl><dd>
<p>
Check if stri1 is greater than or equal to stri2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if stri1 is greater than or equal to stri2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_string)parse(in_string)"><h3>parse</h3></a>
<p>
const func string: (attr string) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert to a string.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its parameter unchanged.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_string,in_string)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in string: stri1, in string: stri2)</p><dl><dd>
<p>
Compare two strings.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_string)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in string: stri)</p><dl><dd>
<p>
Compute the hash value of a <i>string</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="length(in_string)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (in string: stri)</p><dl><dd>
<p>
Determine the length of a <i>string</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the <i>string</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="startsWith(in_string,in_string)"><h3>startsWith</h3></a>
<p>
const func boolean: <b>startsWith</b> (in string: stri, in string: prefix)</p><dl><dd>
<p>
Determine if a string starts with a <i>prefix</i>.
</p>
<pre class="indent">
startsWith("tmp_s7c.c", "tmp_")  returns TRUE
startsWith("example", "E")       returns FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>stri</i> starts with <i>prefix</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="endsWith(in_string,in_string)"><h3>endsWith</h3></a>
<p>
const func boolean: <b>endsWith</b> (in string: stri, in string: suffix)</p><dl><dd>
<p>
Determine if a string ends with a <i>suffix</i>.
</p>
<pre class="indent">
endsWith("hello.sd7", ".sd7")  returns TRUE
endsWith("A string", "\0;")    returns FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>stri</i> ends with <i>suffix</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="equalAtIndex(in_string,in_string,in_integer)"><h3>equalAtIndex</h3></a>
<p>
const func boolean: <b>equalAtIndex</b> (in string: stri, in string: searched, in integer: index)</p><dl><dd>
<p>
Check if <i>stri</i> has the <i>searched</i> characters starting from <i>index</i>.
</p>
<pre class="indent">
equalAtIndex("The quick brown fox", "quick", 5)  returns TRUE
equalAtIndex("axis", "xi", 3)                    returns FALSE
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>stri</i> has the <i>searched</i> characters starting from <i>index</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pos(in_string,in_string)"><h3>pos</h3></a>
<p>
const func integer: <b>pos</b> (in string: mainStri, in string: searched)</p><dl><dd>
<p>
Determine leftmost position of string <i>searched</i> in <i>mainStri</i>.
If the string is found the position of its first character
is the result. The first character in a string has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pos(in_string,in_char)"><h3>pos</h3></a>
<p>
const func integer: <b>pos</b> (in string: mainStri, in char: searched)</p><dl><dd>
<p>
Determine leftmost position of char <i>searched</i> in <i>mainStri</i>.
The first character in a string has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pos(in_string,in_string,in_integer)"><h3>pos</h3></a>
<p>
const func integer: <b>pos</b> (in string: mainStri, in string: searched,
                         in integer: fromIndex)</p><dl><dd>
<p>
Search string <i>searched</i> in <i>mainStri</i> at or after <i>fromIndex</i>.
The search starts at <i>fromIndex</i> and proceeds to the right.
If the string is found the position of its first character
is the result. The first character in a string has the position 1.
The pos function is designed to allow loops like:
</p>
<pre class="indent">
index := pos(stri, searchedStri);
while index &lt;> 0 do
  # Do something with index
  index := pos(stri, searchedStri, succ(index));
end while;
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i> at or after <i>fromIndex</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>fromIndex</i> &lt;= 0 holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="pos(in_string,in_char,in_integer)"><h3>pos</h3></a>
<p>
const func integer: <b>pos</b> (in string: mainStri, in char: searched,
                         in integer: fromIndex)</p><dl><dd>
<p>
Search char <i>searched</i> in <i>mainStri</i> at or after <i>fromIndex</i>.
The search starts at <i>fromIndex</i> and proceeds to the right.
The first character in a string has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i> at or after <i>fromIndex</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>fromIndex</i> &lt;= 0 holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rpos(in_string,in_string)"><h3>rpos</h3></a>
<p>
const func integer: <b>rpos</b> (in string: mainStri, in string: searched)</p><dl><dd>
<p>
Determine rightmost position of string <i>searched</i> in <i>mainStri</i>.
If the string is found the position of its first character
is the result. The first character in a string has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rpos(in_string,in_char)"><h3>rpos</h3></a>
<p>
const func integer: <b>rpos</b> (in string: mainStri, in char: searched)</p><dl><dd>
<p>
Determine rightmost position of char <i>searched</i> in <i>mainStri</i>.
The first character in a string has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rpos(in_string,in_string,in_integer)"><h3>rpos</h3></a>
<p>
const func integer: <b>rpos</b> (in string: mainStri, in string: searched,
                          in integer: fromIndex)</p><dl><dd>
<p>
Search string <i>searched</i> in <i>mainStri</i> at or before <i>fromIndex</i>.
The search starts at <i>fromIndex</i> and proceeds to the left.
The first character in a string has the position 1.
The rpos function is designed to allow loops like:
</p>
<pre class="indent">
index := rpos(stri, searchedStri);
while index &lt;> 0 do
  # Do something with index
  index := rpos(stri, searchedStri, pred(index));
end while;
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i> at or before <i>fromIndex</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>fromIndex</i> > length(stri) holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rpos(in_string,in_char,in_integer)"><h3>rpos</h3></a>
<p>
const func integer: <b>rpos</b> (in string: mainStri, in char: searched,
                          in integer: fromIndex)</p><dl><dd>
<p>
Search char <i>searched</i> in <i>mainStri</i> at or before <i>fromIndex</i>.
The search starts at <i>fromIndex</i> and proceeds to the left.
The first character in a string has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>mainStri</i>         does not contain <i>searched</i> at or before <i>fromIndex</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>fromIndex</i> > length(stri) holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="replace(in_string,in_string,in_string)"><h3>replace</h3></a>
<p>
const func string: <b>replace</b> (in string: mainStri, in string: searched,
                            in string: replacement)</p><dl><dd>
<p>
Replace occurrences of <i>searched</i> in <i>mainStri</i> by <i>replacement</i>.
The function processes <i>mainStri</i> from left to right and replaces
<i>searched</i> by <i>replacement</i>. After a <i>searched</i> has been replaced
the search for the next <i>searched</i> starts after the <i>replacement</i>.
If a replacement creates new occurrences of <i>searched</i> they are left
intact.
</p>
<pre class="indent">
replace("old gold", "old", "one")        returns "one gone"
replace("it   is very  low", "  ", " ")  returns "it  is very low"
replace("balll", "all", "al")            returns "ball"
replace("faaaaceeees", "aacee", "ace")   returns "faaaceees"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the replacement.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="replace1(in_string,in_string,in_string)"><h3>replace1</h3></a>
<p>
const func string: <b>replace1</b> (in string: mainStri, in string: searched,
    in string: replacement)</p><dl><dd>
<p>
Replace one occurrence of <i>searched</i> in <i>mainStri</i> by <i>replacement</i>.
If there is no occurrence of <i>searched</i> return the unchanged <i>mainStri</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the replacement.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="replaceN(in_string,in_string,in_string)"><h3>replaceN</h3></a>
<p>
const func string: <b>replaceN</b> (in string: mainStri, in string: searched,
                             in string: replacement)</p><dl><dd>
<p>
Replace all occurrences of <i>searched</i> in <i>mainStri</i> by <i>replacement</i>.
The function processes <i>mainStri</i> from left to right and replaces
<i>searched</i> by <i>replacement</i>. If a replacement creates new occurrences
of <i>searched</i> they are replaced also.  This can be used to replace
multiple occurrences of a character by one occurrence
</p>
<pre class="indent">
replaceN("//path///file", "//", "/")      returns "/path/file"
replaceN("it   is very  low", "  ", " ")  returns "it is very low"
replaceN("balll", "all", "al")            returns "bal"
replaceN("faaaaceeees", "aacee", "ace")   returns "faces"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the replacement.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - If <i>searched</i> is a substring of <i>replacement</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="replace2(in_string,in_string,in_string,in_string)"><h3>replace2</h3></a>
<p>
const func string: <b>replace2</b> (in string: mainStri, in string: search1,
    in string: search2, in string: replacement)</p><dl><dd>
<p>
Replace occurrences of <i>search1</i> followed by <i>search2</i> with <i>replacement</i>.
Searches <i>mainStri</i> for <i>search1</i> followed by <i>search2</i>. The
characters from the beginning of <i>search1</i> to the end of <i>search2</i>
are replaced by <i>replacement</i>. There can be zero or more characters
between <i>search1</i> and <i>search2</i>. With <i>replace2</i> unnested comments
can be removed:
</p>
<pre class="indent">
replace2("x := (*ord*) y;", "(*", "*)", "")  returns "x :=  y;"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the replacement.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="upper(in_string)"><h3>upper</h3></a>
<p>
const func string: <b>upper</b> (in string: stri)</p><dl><dd>
<p>
Convert a string to upper case.
The conversion uses the default Unicode case mapping,
where each character is considered in isolation.
Characters without case mapping are left unchanged.
The mapping is independent from the locale. Individual
character case mappings cannot be reversed, because some
characters have multiple characters that map to them.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string converted to upper case.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="lower(in_string)"><h3>lower</h3></a>
<p>
const func string: <b>lower</b> (in string: stri)</p><dl><dd>
<p>
Convert a string to lower case.
The conversion uses the default Unicode case mapping,
where each character is considered in isolation.
Characters without case mapping are left unchanged.
The mapping is independent from the locale. Individual
character case mappings cannot be reversed, because some
characters have multiple characters that map to them.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string converted to lower case.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="width(in_string)"><h3>width</h3></a>
<p>
const func integer: <b>width</b> (in string: stri)</p><dl><dd>
<p>
Number of screen columns occupied by the Unicode string <i>stri</i>.
The width of single characters can be 0,1 or 2 depending on the
width occupied on a terminal. Non-spacing characters and control
characters have width of 0. Kanji and other full width characters
have a width of 2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sum of the character widths in <i>stri</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="reverse(in_string)"><h3>reverse</h3></a>
<p>
const func string: <b>reverse</b> (in string: stri)</p><dl><dd>
<p>
Reverse the characters in a string.
</p>
<pre class="indent">
reverse("ABC")  returns "CBA"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the reversed string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="trim(in_string)"><h3>trim</h3></a>
<p>
const func string: <b>trim</b> (in string: stri)</p><dl><dd>
<p>
Return string with leading and trailing whitespace omitted.
All characters less than or equal to ' ' (space) count as whitespace.
</p>
<pre class="indent">
trim(" /n xyz /r")  returns "xyz"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>string with leading and trailing whitespace omitted.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="ltrim(in_string)"><h3>ltrim</h3></a>
<p>
const func string: <b>ltrim</b> (in string: stri)</p><dl><dd>
<p>
Return string with leading whitespace omitted.
All characters less than or equal to ' ' (space) count as whitespace.
</p>
<pre class="indent">
ltrim(" /n xyz /r")  returns "xyz /r"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>string with leading whitespace omitted.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rtrim(in_string)"><h3>rtrim</h3></a>
<p>
const func string: <b>rtrim</b> (in string: stri)</p><dl><dd>
<p>
Return string with trailing whitespace omitted.
All characters less than or equal to ' ' (space) count as whitespace.
</p>
<pre class="indent">
rtrim(" /n xyz /r")  returns " /n xyz"
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>string with trailing whitespace omitted.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="trimValue(in_type,in_string)"><h3>trimValue</h3></a>
<p>
const func string: <b>trimValue</b> (in type: aType, in string: stri)</p><dl><dd>
<p>
Trim a string such that it can be converted to <i>aType</i>.
Removes leading and trailing whitespace from <i>stri</i>.
This function is overloaded for types where removing leading
or trailing whitespace would change the value.
</p>
<pre class="indent">
trimValue(integer, " 1 ")                 returns "1"
integer(trimValue(integer, " 1 "))        returns 1
integer parse trimValue(integer, " 1 ")   returns 1
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the trimmed string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="trimValue(attr_string,in_string)"><h3>trimValue</h3></a>
<p>
const func string: <b>trimValue</b> (attr string, in string: stri)</p><dl><dd>
<p>
Trim a string such that it can be converted to <i>string</i>.
Leaves <i>stri</i> unchanged, since trimming would change the value.
</p>
<pre class="indent">
trimValue(string, " 1 ")                returns " 1 "
string(trimValue(string, " 1 "))        returns " 1 "
string parse trimValue(string, " 1 ")   returns " 1 "
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_string)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in string: stri)</p><dl><dd>
<p>
Convert to a string.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its parameter unchanged.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="string(in_string)"><h3>string</h3></a>
<p>
const func string: <b>string</b> (in string: stri)</p><dl><dd>
<p>
Convert to a string.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its parameter unchanged.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/strifile.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/stritext.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
