<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bin32</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bin32</big></b></td>
<td align="right"><a class="link" href="../lib/bin32.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bigrat.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bin64.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bin32">bin32</a></b></td></tr>
<tr><td width="30"></td><td>Binary values with 32 bits.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="bin32"><h3>bin32</h3></a>
<p>
const type: <b>bin32</b></p><dl><dd>
<p>
Binary values with 32 bits.
This type supports bitwise operations but no integer arithmetic.
The internal representation is the same as for integer.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bin32) <b><a class="link" href="#(attr_bin32)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>bin32</i> (bin32(0)).</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr integer) <b><a class="link" href="#(attr_integer)conv(in_bin32)">conv</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Convert to integer.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bin32) <b><a class="link" href="#(attr_bin32)conv(in_integer)">conv</a></b> (in integer: anInt)</td></tr>
<tr><td width="30"></td><td>Convert to bin32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits) <b><a class="link" href="#(in_bin32)radix(in_integer)">radix</a></b> (in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bin32</i> value to a <a class="link" href="string.htm" title="string">string</a> using a radix.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits) <b><a class="link" href="#(in_bin32)RADIX(in_integer)">RADIX</a></b> (in integer: base)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bin32</i> value to a <a class="link" href="string.htm" title="string">string</a> using a radix.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits1) <b><a class="link" href="#(in_bin32)=(in_bin32)">=</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Check if two bin32 values are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits1) <b><a class="link" href="#(in_bin32)&lt;>(in_bin32)">&lt;></a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Check if two bin32 values are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits1) <b><a class="link" href="#(in_bin32)&amp;(in_bin32)">&amp;</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise <i>and</i> of two bin32 values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits1) <b><a class="link" href="#(in_bin32)|(in_bin32)">|</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise inclusive <i>or</i> of two bin32 values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits1) <b><a class="link" href="#(in_bin32)>&lt;(in_bin32)">>&lt;</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise exclusive or (<i>xor</i>) of two bin32 values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#~(in_bin32)">~</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise <i>not</i> of a bin32 value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits) <b><a class="link" href="#(in_bin32)&lt;&lt;(in_integer)">&lt;&lt;</a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift a bin32 value left by lshift bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bin32: bits) <b><a class="link" href="#(in_bin32)>>(in_integer)">>></a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift a bin32 value right by rshift bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bin32: bits) <b><a class="link" href="#(inout_bin32)&lt;&lt;:=(in_integer)">&lt;&lt;:=</a></b> (in integer: lshift)</td></tr>
<tr><td width="30"></td><td>Shift a bin32 value left by lshift bits and assign the result back to <i>bits</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bin32: bits) <b><a class="link" href="#(inout_bin32)>>:=(in_integer)">>>:=</a></b> (in integer: rshift)</td></tr>
<tr><td width="30"></td><td>Shift a bin32 value right by rshift bits and assign the result back to <i>bits</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bin32: bits1) <b><a class="link" href="#(inout_bin32)&amp;:=(in_bin32)">&amp;:=</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise <i>and</i> and assign the result back to <i>bits1</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bin32: bits1) <b><a class="link" href="#(inout_bin32)|:=(in_bin32)">|:=</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise inclusive <i>or</i> and assign the result back to <i>bits1</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bin32: bits1) <b><a class="link" href="#(inout_bin32)>&lt;:=(in_bin32)">>&lt;:=</a></b> (in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compute a bitwise exclusive or (<i>xor</i>) and assign the result back to <i>bits1</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bin32(in_integer)">bin32</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Convert to bin32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bin32(in_char)">bin32</a></b> (in char: ch)</td></tr>
<tr><td width="30"></td><td>Convert to bin32.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bin32(in_float)">bin32</a></b> (in float: number)</td></tr>
<tr><td width="30"></td><td>Get bits in IEEE 754 single-precision representation from a float.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ord(in_bin32)">ord</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Convert to integer.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#integer(in_bin32)">integer</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Convert to integer.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#float(in_bin32)">float</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Get a float from bits in IEEE 754 single-precision representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_bin32,in_bin32)">compare</a></b> (in bin32: bits1, in bin32: bits2)</td></tr>
<tr><td width="30"></td><td>Compare two bin32 values.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_bin32)">hashCode</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a bin32 value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(attr_bin32)">rand</a></b> (attr bin32)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random bin32 value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_bin32)">str</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Convert an <i>bin32</i> value to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes(in_bin32,BE,in_integer)">bytes</a></b> (in bin32: bits, BE, in integer: length)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bin32</i> into a <a class="link" href="string.htm" title="string">string</a> of bytes with big-endian encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bytes(in_bin32,LE,in_integer)">bytes</a></b> (in bin32: bits, LE, in integer: length)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bin32</i> into a <a class="link" href="string.htm" title="string">string</a> of bytes with little-endian encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rotLeft(in_bin32,in_integer)">rotLeft</a></b> (in bin32: x, in integer: shiftCount)</td></tr>
<tr><td width="30"></td><td>Rotate the bits of a bin32 value left by shiftCount bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rotRight(in_bin32,in_integer)">rotRight</a></b> (in bin32: x, in integer: shiftCount)</td></tr>
<tr><td width="30"></td><td>Rotate the bits of a bin32 value right by shiftCount bits.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#float2MbfBits(in_float,SINGLE)">float2MbfBits</a></b> (in float: number, SINGLE)</td></tr>
<tr><td width="30"></td><td>Get bits in MBF single-precision representation from a float.</td></tr></table></td></tr>
<tr><td align="right" valign="top">float</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#mbfBits2Float(in_bin32)">mbfBits2Float</a></b> (in bin32: bits)</td></tr>
<tr><td width="30"></td><td>Get a float from bits in MBF single-precision representation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bin32(in_string,LE)">bin32</a></b> (in string: fourBytes, LE)</td></tr>
<tr><td width="30"></td><td>Convert a string of four little-endian bytes to a bin32 value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bin32</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bin32(in_string,BE)">bin32</a></b> (in string: fourBytes, BE)</td></tr>
<tr><td width="30"></td><td>Convert a string of four big-endian bytes to a bin32 value.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_bin32)._value"><h3>. value</h3></a>
<p>
const bin32: (attr bin32) <b>. value</b></p><dl><dd>
<p>
Default value of <i>bin32</i> (bin32(0)).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_integer)conv(in_bin32)"><h3>conv</h3></a>
<p>
const func integer: (attr integer) <b>conv</b> (in bin32: bits)</p><dl><dd>
<p>
Convert to integer.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged value as integer.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bin32)conv(in_integer)"><h3>conv</h3></a>
<p>
const func bin32: (attr bin32) <b>conv</b> (in integer: anInt)</p><dl><dd>
<p>
Convert to bin32.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged value as bin32.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)radix(in_integer)"><h3>radix</h3></a>
<p>
const func string: (in bin32: bits) <b>radix</b> (in integer: base)</p><dl><dd>
<p>
Convert a <i>bin32</i> value to a <a class="link" href="string.htm" title="string">string</a> using a radix.
The conversion uses the numeral system with the given <i>base</i>.
Digit values from 10 upward are encoded with lower case letters.
E.g.: 10 is encoded with a, 11 with b, etc.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)RADIX(in_integer)"><h3>RADIX</h3></a>
<p>
const func string: (in bin32: bits) <b>RADIX</b> (in integer: base)</p><dl><dd>
<p>
Convert a <i>bin32</i> value to a <a class="link" href="string.htm" title="string">string</a> using a radix.
The conversion uses the numeral system with the given <i>base</i>.
Digit values from 10 upward are encoded with upper case letters.
E.g.: 10 is encoded with A, 11 with B, etc.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If base &lt; 2 or base > 36 holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)=(in_bin32)"><h3>=</h3></a>
<p>
const func boolean: (in bin32: bits1) <b>=</b> (in bin32: bits2)</p><dl><dd>
<p>
Check if two bin32 values are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two values are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)&lt;>(in_bin32)"><h3>&lt;></h3></a>
<p>
const func boolean: (in bin32: bits1) <b>&lt;></b> (in bin32: bits2)</p><dl><dd>
<p>
Check if two bin32 values are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both values are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)&amp;(in_bin32)"><h3>&amp;</h3></a>
<p>
const func bin32: (in bin32: bits1) <b>&amp;</b> (in bin32: bits2)</p><dl><dd>
<p>
Compute a bitwise <i>and</i> of two bin32 values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bitwise <i>and</i> of the two values.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)|(in_bin32)"><h3>|</h3></a>
<p>
const func bin32: (in bin32: bits1) <b>|</b> (in bin32: bits2)</p><dl><dd>
<p>
Compute a bitwise inclusive <i>or</i> of two bin32 values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bitwise inclusive <i>or</i> of the two values.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)>&lt;(in_bin32)"><h3>>&lt;</h3></a>
<p>
const func bin32: (in bin32: bits1) <b>>&lt;</b> (in bin32: bits2)</p><dl><dd>
<p>
Compute a bitwise exclusive or (<i>xor</i>) of two bin32 values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bitwise <i>xor</i> of the two values.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="~(in_bin32)"><h3>~</h3></a>
<p>
const func bin32: <b>~</b> (in bin32: bits)</p><dl><dd>
<p>
Compute a bitwise <i>not</i> of a bin32 value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bitwise <i>not</i> of the value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)&lt;&lt;(in_integer)"><h3>&lt;&lt;</h3></a>
<p>
const func bin32: (in bin32: bits) <b>&lt;&lt;</b> (in integer: lshift)</p><dl><dd>
<p>
Shift a bin32 value left by lshift bits.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the left shifted value.  bin32(16#abcdef) &lt;&lt; 4  returns  bin32(16#abcdef0)</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bin32)>>(in_integer)"><h3>>></h3></a>
<p>
const func bin32: (in bin32: bits) <b>>></b> (in integer: lshift)</p><dl><dd>
<p>
Shift a bin32 value right by rshift bits.
Bits shifted beyond the lowest bit position are lost.
</p>
<pre class="indent">
bin32(16#abcdef) >> 4  returns  bin32(16#abcde)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the right shifted value.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bin32)&lt;&lt;:=(in_integer)"><h3>&lt;&lt;:=</h3></a>
<p>
const proc: (inout bin32: bits) <b>&lt;&lt;:=</b> (in integer: lshift)</p><dl><dd>
<p>
Shift a bin32 value left by lshift bits and assign the result back to <i>bits</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bin32)>>:=(in_integer)"><h3>>>:=</h3></a>
<p>
const proc: (inout bin32: bits) <b>>>:=</b> (in integer: rshift)</p><dl><dd>
<p>
Shift a bin32 value right by rshift bits and assign the result back to <i>bits</i>.
Bits shifted beyond the lowest bit position are lost.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is            negative or greater equal 64.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bin32)&amp;:=(in_bin32)"><h3>&amp;:=</h3></a>
<p>
const proc: (inout bin32: bits1) <b>&amp;:=</b> (in bin32: bits2)</p><dl><dd>
<p>
Compute a bitwise <i>and</i> and assign the result back to <i>bits1</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bin32)|:=(in_bin32)"><h3>|:=</h3></a>
<p>
const proc: (inout bin32: bits1) <b>|:=</b> (in bin32: bits2)</p><dl><dd>
<p>
Compute a bitwise inclusive <i>or</i> and assign the result back to <i>bits1</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bin32)>&lt;:=(in_bin32)"><h3>>&lt;:=</h3></a>
<p>
const proc: (inout bin32: bits1) <b>>&lt;:=</b> (in bin32: bits2)</p><dl><dd>
<p>
Compute a bitwise exclusive or (<i>xor</i>) and assign the result back to <i>bits1</i>.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="bin32(in_integer)"><h3>bin32</h3></a>
<p>
const func bin32: <b>bin32</b> (in integer: number)</p><dl><dd>
<p>
Convert to bin32.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged value as bin32.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bin32(in_char)"><h3>bin32</h3></a>
<p>
const func bin32: <b>bin32</b> (in char: ch)</p><dl><dd>
<p>
Convert to bin32.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged value as bin32.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bin32(in_float)"><h3>bin32</h3></a>
<p>
const func bin32: <b>bin32</b> (in float: number)</p><dl><dd>
<p>
Get bits in IEEE 754 single-precision representation from a float.
IEEE 754 is a standard for floating point arithmetic.
The single-precision format of IEEE 754 has a sign bit, an 8 bit
exponent, and a 23 bit mantissa.
</p>
<pre class="indent">
bin32(1.0)  returns  bin32(16#3f800000)
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Float value to be converted to bin32.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>32 bits in IEEE 754 single-precision float representation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="ord(in_bin32)"><h3>ord</h3></a>
<p>
const func integer: <b>ord</b> (in bin32: bits)</p><dl><dd>
<p>
Convert to integer.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged value as integer.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="integer(in_bin32)"><h3>integer</h3></a>
<p>
const func integer: <b>integer</b> (in bin32: bits)</p><dl><dd>
<p>
Convert to integer.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the unchanged value as integer.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="float(in_bin32)"><h3>float</h3></a>
<p>
const func float: <b>float</b> (in bin32: bits)</p><dl><dd>
<p>
Get a float from bits in IEEE 754 single-precision representation.
IEEE 754 is a standard for floating point arithmetic.
The single-precision format of IEEE 754 has a sign bit, an 8 bit
exponent, and a 23 bit mantissa.
</p>
<pre class="indent">
float(bin32(16#3f800000))  returns  1.0
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bits</tt> - Bits to be converted to a float.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a float from bits in single-precision float representation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="compare(in_bin32,in_bin32)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in bin32: bits1, in bin32: bits2)</p><dl><dd>
<p>
Compare two bin32 values.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_bin32)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in bin32: bits)</p><dl><dd>
<p>
Compute the hash value of a bin32 value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rand(attr_bin32)"><h3>rand</h3></a>
<p>
const func bin32: <b>rand</b> (attr bin32)</p><dl><dd>
<p>
Compute pseudo-random bin32 value.
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random bin32 value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_bin32)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in bin32: bits)</p><dl><dd>
<p>
Convert an <i>bin32</i> value to a <a class="link" href="string.htm" title="string">string</a>.
The values is converted to a string with decimal representation.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes(in_bin32,BE,in_integer)"><h3>bytes</h3></a>
<p>
const func string: <b>bytes</b> (in bin32: bits, BE, in integer: length)</p><dl><dd>
<p>
Convert a <i>bin32</i> into a <a class="link" href="string.htm" title="string">string</a> of bytes with big-endian encoding.
The result uses binary representation with a base of 256.
The result contains chars (bytes) with an ordinal &lt;= 255.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bits</tt> - Bin32 to be converted.</dd>
<dd><tt>length</tt> - Determines the length of the result string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string of <i>length</i> bytes with the unsigned binary         representation of <i>bits</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>length</i> is negative or zero, or                        if the result would not fit in <i>length</i> bytes.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bytes(in_bin32,LE,in_integer)"><h3>bytes</h3></a>
<p>
const func string: <b>bytes</b> (in bin32: bits, LE, in integer: length)</p><dl><dd>
<p>
Convert a <i>bin32</i> into a <a class="link" href="string.htm" title="string">string</a> of bytes with little-endian encoding.
The result uses binary representation with a base of 256.
The result contains chars (bytes) with an ordinal &lt;= 255.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bits</tt> - Bin32 to be converted.</dd>
<dd><tt>length</tt> - Determines the length of the result string.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a string of <i>length</i> bytes with the unsigned binary         representation of <i>bits</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>length</i> is negative or zero, or                        if the result would not fit in <i>length</i> bytes.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rotLeft(in_bin32,in_integer)"><h3>rotLeft</h3></a>
<p>
const func bin32: <b>rotLeft</b> (in bin32: x, in integer: shiftCount)</p><dl><dd>
<p>
Rotate the bits of a bin32 value left by shiftCount bits.
The vacant bit positions at the right side are filled in with
the bits that are shifted out at the left side.
</p>
<pre class="indent">
rotLeft(bin32(16#12345678), 8)  returns  bin32(16#34567812)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the left rotated value.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is negative            or greater than 32.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rotRight(in_bin32,in_integer)"><h3>rotRight</h3></a>
<p>
const func bin32: <b>rotRight</b> (in bin32: x, in integer: shiftCount)</p><dl><dd>
<p>
Rotate the bits of a bin32 value right by shiftCount bits.
The vacant bit positions at the left side are filled in with
the bits that are shifted out at the right side.
</p>
<pre class="indent">
rotRight(bin32(16#12345678), 8)  returns  bin32(16#78123456)
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the right rotated value.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>OVERFLOW_ERROR</tt> - If the shift amount is negative            or greater than 32.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="float2MbfBits(in_float,SINGLE)"><h3>float2MbfBits</h3></a>
<p>
const func bin32: <b>float2MbfBits</b> (in float: number, SINGLE)</p><dl><dd>
<p>
Get bits in MBF single-precision representation from a float.
Microsoft Binary Format (MBF) is a format for floating point numbers.
The single-precision version of MBF has a 8 bit exponent, a sign bit
and a 23 bit mantissa.
</p>
<pre class="indent">
float2MbfBits(1.0, SINGLE)  returns  bin32(16#81000000)
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - Float value to be converted to bin32.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>32 bits in MBF single-precision float representation.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If number is not representable in MBF.            NaN, Infinity and -Infinity are not representable            in MBF. Numbers with an absolute value larger than            1.7014117331926443e+38 are also not representable            in MBF.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="mbfBits2Float(in_bin32)"><h3>mbfBits2Float</h3></a>
<p>
const func float: <b>mbfBits2Float</b> (in bin32: bits)</p><dl><dd>
<p>
Get a float from bits in MBF single-precision representation.
Microsoft Binary Format (MBF) is a format for floating point numbers.
The single-precision version of MBF has a 8 bit exponent, a sign bit
and a 23 bit mantissa.
</p>
<pre class="indent">
mbfBits2Float(bin32(16#81000000))  returns  1.0
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bits</tt> - Bits to be converted to a float.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a float from bits in MBF single-precision float representation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bin32(in_string,LE)"><h3>bin32</h3></a>
<p>
const func bin32: <b>bin32</b> (in string: fourBytes, LE)</p><dl><dd>
<p>
Convert a string of four little-endian bytes to a bin32 value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bin32 value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bin32(in_string,BE)"><h3>bin32</h3></a>
<p>
const func bin32: <b>bin32</b> (in string: fourBytes, BE)</p><dl><dd>
<p>
Convert a string of four big-endian bytes to a bin32 value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the bin32 value.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/bigrat.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bin64.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
