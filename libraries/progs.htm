<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Progs</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Progs</big></b></td>
<td align="right"><a class="link" href="../lib/progs.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/process.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/propertyfile.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#program">program</a></b></td></tr>
<tr><td width="30"></td><td>Type to describe a Seed7 program.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="program"><h3>program</h3></a>
<p>
const type: <b>program</b></p><dl><dd>
<p>
Type to describe a Seed7 program.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr program) <b><a class="link" href="#(attr_program)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>program</i> (program.EMPTY).</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in program: prog1) <b><a class="link" href="#(in_program)=(in_program)">=</a></b> (in program: prog2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>program</i> values are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in program: prog1) <b><a class="link" href="#(in_program)&lt;>(in_program)">&lt;></a></b> (in program: prog2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>program</i> values are not equal.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#name(in_program)">name</a></b> (in program: aProgram)</td></tr>
<tr><td width="30"></td><td>Returns the name of <i>aProgram</i> without path and extension.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#path(in_program)">path</a></b> (in program: aProgram)</td></tr>
<tr><td width="30"></td><td>Return the absolute path of the program <i>aProgram</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseFile(in_string,in_parseOptions,in_array_string,in_string)">parseFile</a></b> (in string: fileName, in parseOptions: options,
                               in array string: libraryDirs,
                               in string: protFileName)</td></tr>
<tr><td width="30"></td><td>Parse the file with the given <i>fileName</i>, <i>options</i>, <i>libraryDirs</i> and <i>protFileName</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseFile(in_string,in_parseOptions,in_array_string)">parseFile</a></b> (in string: fileName, in parseOptions: options,
                               in array string: libraryDirs)</td></tr>
<tr><td width="30"></td><td>Parse the file with the given <i>fileName</i>, <i>options</i> and <i>libraryDirs</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseFile(in_string,in_parseOptions)">parseFile</a></b> (in string: fileName, in parseOptions: options)</td></tr>
<tr><td width="30"></td><td>Parse the file with the given <i>fileName</i> and <i>options</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseFile(in_string)">parseFile</a></b> (in string: fileName)</td></tr>
<tr><td width="30"></td><td>Parse the file with the given <i>fileName</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseStri(in_string,in_parseOptions,in_array_string,in_string)">parseStri</a></b> (in string: stri, in parseOptions: options,
                               in array string: libraryDirs,
                               in string: protFileName)</td></tr>
<tr><td width="30"></td><td>Parse the given <i>string</i> with <i>options', </i>libraryDirs<i> and </i>protFileName''.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseStri(in_string,in_parseOptions,in_array_string)">parseStri</a></b> (in string: stri, in parseOptions: options,
                               in array string: libraryDirs)</td></tr>
<tr><td width="30"></td><td>Parse the given <i>string</i> with <i>options' and </i>libraryDirs''.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseStri(in_string,in_parseOptions)">parseStri</a></b> (in string: stri, in parseOptions: options)</td></tr>
<tr><td width="30"></td><td>Parse the given <i>string</i> with ''options'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">program</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#parseStri(in_string)">parseStri</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Parse the given <i>string</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#evaluate(in_program,in_reference)">evaluate</a></b> (in program: aProgram,
                                in reference: anExpression)</td></tr>
<tr><td width="30"></td><td>Evaluate <i>anExpression</i> which is part of <i>aProgram</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#execute(in_program,in_array_string,in_parseOptions,in_string)">execute</a></b> (in program: aProgram, in array string: parameters,
                     in parseOptions: options,
                     in string: protFileName)</td></tr>
<tr><td width="30"></td><td>Execute <i>aProgram</i> with the given <i>parameters</i>, <i>options</i> and <i>protFileName</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#execute(in_program,in_array_string,in_parseOptions)">execute</a></b> (in program: aProgram, in array string: parameters,
                     in parseOptions: options)</td></tr>
<tr><td width="30"></td><td>Execute <i>aProgram</i> with the given <i>parameters</i> and <i>options</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#execute(in_program,in_array_string)">execute</a></b> (in program: aProgram, in array string: parameters)</td></tr>
<tr><td width="30"></td><td>Execute <i>aProgram</i> with the given <i>parameters</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#execute(in_program)">execute</a></b> (in program: aProgram)</td></tr>
<tr><td width="30"></td><td>Execute <i>aProgram</i> with an empty parameter list.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#sysVar(in_program,in_string)">sysVar</a></b> (in program: aProgram, in string: name)</td></tr>
<tr><td width="30"></td><td>Determine the value of the system variable <i>name</i> in <i>aProgram</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#errorCount(in_program)">errorCount</a></b> (in program: aProgram)</td></tr>
<tr><td width="30"></td><td>Determine the number of errors in <i>aProgram</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#globalObjects(in_program)">globalObjects</a></b> (in program: aProgram)</td></tr>
<tr><td width="30"></td><td>Determine the list of global defined objects in <i>aProgram</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#syobject(in_program,in_string)">syobject</a></b> (in program: aProgram, in string: name)</td></tr>
<tr><td width="30"></td><td>Determine object with <i>name</i> from program <i>aProgram</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#match(in_program,in_ref_list)">match</a></b> (in program: aProgram, in ref_list: expression)</td></tr>
<tr><td width="30"></td><td>Determine object from program <i>aProgram</i> which matches <i>expression</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isTemp(in_reference)">isTemp</a></b> (in reference: aReference)</td></tr>
<tr><td width="30"></td><td>Determine if the referenced object is temporary.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isVar(in_reference)">isVar</a></b> (in reference: aReference)</td></tr>
<tr><td width="30"></td><td>Determine if the referenced object is variable.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setVar(in_reference,in_boolean)">setVar</a></b> (in reference: aReference, in boolean: isVariable)</td></tr>
<tr><td width="30"></td><td>Set var flag of a referenced object.</td></tr></table></td></tr>
<tr><td align="right" valign="top">category</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#category(in_reference)">category</a></b> (in reference: aReference)</td></tr>
<tr><td width="30"></td><td>Get the category of a referenced object.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setCategory(in_reference,in_category)">setCategory</a></b> (in reference: aReference,
                         in category: aCategory)</td></tr>
<tr><td width="30"></td><td>Set the category of <i>aReference</i> to <i>aCategory</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#formalParams(in_reference)">formalParams</a></b> (in reference: funcRef)</td></tr>
<tr><td width="30"></td><td>Get the formal parameters of the function referenced by <i>funcRef</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setFormalParams(in_reference,in_ref_list)">setFormalParams</a></b> (in reference: funcRef, in ref_list: params)</td></tr>
<tr><td width="30"></td><td>Set the formal parameters of <i>funcRef</i> to <i>params</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#resultVar(in_reference)">resultVar</a></b> (in reference: funcRef)</td></tr>
<tr><td width="30"></td><td>Gets the result variable of <i>funcRef</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#resultInitValue(in_reference)">resultInitValue</a></b> (in reference: funcRef)</td></tr>
<tr><td width="30"></td><td>Gets the initialization value of the result variable of <i>funcRef</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#localConsts(in_reference)">localConsts</a></b> (in reference: funcRef)</td></tr>
<tr><td width="30"></td><td>Gets the local constants of <i>funcRef</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#localVars(in_reference)">localVars</a></b> (in reference: funcRef)</td></tr>
<tr><td width="30"></td><td>Gets the local variables of <i>funcRef</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#body(in_reference)">body</a></b> (in reference: funcRef)</td></tr>
<tr><td width="30"></td><td>Gets the body of the function referenced by <i>funcRef</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arrayMinIdx(in_reference)">arrayMinIdx</a></b> (in reference: arrayRef)</td></tr>
<tr><td width="30"></td><td>Obtain the minimum index of the array referenced by 'arrayRef'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arrayMaxIdx(in_reference)">arrayMaxIdx</a></b> (in reference: arrayRef)</td></tr>
<tr><td width="30"></td><td>Obtain the maximum index of the array referenced by 'arrayRef'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arrayLength(in_reference)">arrayLength</a></b> (in reference: arrayRef)</td></tr>
<tr><td width="30"></td><td>Obtain the length of the array referenced by 'arrayRef'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#file(in_reference)">file</a></b> (in reference: aReference)</td></tr>
<tr><td width="30"></td><td>Determine the file name of a referenced object.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#line(in_reference)">line</a></b> (in reference: aReference)</td></tr>
<tr><td width="30"></td><td>Determine the line number of a referenced object.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#objNumber(in_reference)">objNumber</a></b> (in reference: aReference)</td></tr>
<tr><td width="30"></td><td>Delivers an unique number for each object</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_program)._value"><h3>. value</h3></a>
<p>
const program: (attr program) <b>. value</b></p><dl><dd>
<p>
Default value of <i>program</i> (program.EMPTY).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_program)=(in_program)"><h3>=</h3></a>
<p>
const func boolean: (in program: prog1) <b>=</b> (in program: prog2)</p><dl><dd>
<p>
Check if two <i>program</i> values are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both values are equal, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_program)&lt;>(in_program)"><h3>&lt;></h3></a>
<p>
const func boolean: (in program: prog1) <b>&lt;></b> (in program: prog2)</p><dl><dd>
<p>
Check if two <i>program</i> values are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both values are equal, TRUE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="name(in_program)"><h3>name</h3></a>
<p>
const func string: <b>name</b> (in program: aProgram)</p><dl><dd>
<p>
Returns the name of <i>aProgram</i> without path and extension.
This function does not follow symbolic links.
It determines, with which name a program was called.
If a symbolic link refers to a program, the name of
the symbolic link is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the name of the program.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="path(in_program)"><h3>path</h3></a>
<p>
const func string: <b>path</b> (in program: aProgram)</p><dl><dd>
<p>
Return the absolute path of the program <i>aProgram</i>.
This function does follow symbolic links.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute path of the program.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="parseFile(in_string,in_parseOptions,in_array_string,in_string)"><h3>parseFile</h3></a>
<p>
const func program: <b>parseFile</b> (in string: fileName, in parseOptions: options,
                               in array string: libraryDirs,
                               in string: protFileName)</p><dl><dd>
<p>
Parse the file with the given <i>fileName</i>, <i>options</i>, <i>libraryDirs</i> and <i>protFileName</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>fileName</i> does not use the standard path            representation or <i>fileName</i> is not representable in            the system path type.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseFile(in_string,in_parseOptions,in_array_string)"><h3>parseFile</h3></a>
<p>
const func program: <b>parseFile</b> (in string: fileName, in parseOptions: options,
                               in array string: libraryDirs)</p><dl><dd>
<p>
Parse the file with the given <i>fileName</i>, <i>options</i> and <i>libraryDirs</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>fileName</i> does not use the standard path            representation or <i>fileName</i> is not representable in            the system path type.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseFile(in_string,in_parseOptions)"><h3>parseFile</h3></a>
<p>
const func program: <b>parseFile</b> (in string: fileName, in parseOptions: options)</p><dl><dd>
<p>
Parse the file with the given <i>fileName</i> and <i>options</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>fileName</i> does not use the standard path            representation or <i>fileName</i> is not representable in            the system path type.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseFile(in_string)"><h3>parseFile</h3></a>
<p>
const func program: <b>parseFile</b> (in string: fileName)</p><dl><dd>
<p>
Parse the file with the given <i>fileName</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>fileName</i> does not use the standard path            representation or <i>fileName</i> is not representable in            the system path type.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseStri(in_string,in_parseOptions,in_array_string,in_string)"><h3>parseStri</h3></a>
<p>
const func program: <b>parseStri</b> (in string: stri, in parseOptions: options,
                               in array string: libraryDirs,
                               in string: protFileName)</p><dl><dd>
<p>
Parse the given <i>string</i> with <i>options', </i>libraryDirs<i> and </i>protFileName''.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseStri(in_string,in_parseOptions,in_array_string)"><h3>parseStri</h3></a>
<p>
const func program: <b>parseStri</b> (in string: stri, in parseOptions: options,
                               in array string: libraryDirs)</p><dl><dd>
<p>
Parse the given <i>string</i> with <i>options' and </i>libraryDirs''.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseStri(in_string,in_parseOptions)"><h3>parseStri</h3></a>
<p>
const func program: <b>parseStri</b> (in string: stri, in parseOptions: options)</p><dl><dd>
<p>
Parse the given <i>string</i> with ''options'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="parseStri(in_string)"><h3>parseStri</h3></a>
<p>
const func program: <b>parseStri</b> (in string: stri)</p><dl><dd>
<p>
Parse the given <i>string</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the parsed program.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="evaluate(in_program,in_reference)"><h3>evaluate</h3></a>
<p>
const func reference: <b>evaluate</b> (in program: aProgram,
                                in reference: anExpression)</p><dl><dd>
<p>
Evaluate <i>anExpression</i> which is part of <i>aProgram</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the evaluation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="execute(in_program,in_array_string,in_parseOptions,in_string)"><h3>execute</h3></a>
<p>
const proc: <b>execute</b> (in program: aProgram, in array string: parameters,
                     in parseOptions: options,
                     in string: protFileName)</p><dl><dd>
<p>
Execute <i>aProgram</i> with the given <i>parameters</i>, <i>options</i> and <i>protFileName</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="execute(in_program,in_array_string,in_parseOptions)"><h3>execute</h3></a>
<p>
const proc: <b>execute</b> (in program: aProgram, in array string: parameters,
                     in parseOptions: options)</p><dl><dd>
<p>
Execute <i>aProgram</i> with the given <i>parameters</i> and <i>options</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="execute(in_program,in_array_string)"><h3>execute</h3></a>
<p>
const proc: <b>execute</b> (in program: aProgram, in array string: parameters)</p><dl><dd>
<p>
Execute <i>aProgram</i> with the given <i>parameters</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="execute(in_program)"><h3>execute</h3></a>
<p>
const proc: <b>execute</b> (in program: aProgram)</p><dl><dd>
<p>
Execute <i>aProgram</i> with an empty parameter list.
</p>
</dd>
</dl></div>
<hr />
<div><a name="sysVar(in_program,in_string)"><h3>sysVar</h3></a>
<p>
const func reference: <b>sysVar</b> (in program: aProgram, in string: name)</p><dl><dd>
<p>
Determine the value of the system variable <i>name</i> in <i>aProgram</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a reference to the value of the system variable or         NIL if no system variable <i>name</i> exists.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="errorCount(in_program)"><h3>errorCount</h3></a>
<p>
const func integer: <b>errorCount</b> (in program: aProgram)</p><dl><dd>
<p>
Determine the number of errors in <i>aProgram</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of errors.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="globalObjects(in_program)"><h3>globalObjects</h3></a>
<p>
const func ref_list: <b>globalObjects</b> (in program: aProgram)</p><dl><dd>
<p>
Determine the list of global defined objects in <i>aProgram</i>.
The returned list contains constant and variable objects
in the same order as the definitions of the source program.
Literal objects and local objects are not part of this list.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the list of global defined objects.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="syobject(in_program,in_string)"><h3>syobject</h3></a>
<p>
const func reference: <b>syobject</b> (in program: aProgram, in string: name)</p><dl><dd>
<p>
Determine object with <i>name</i> from program <i>aProgram</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a reference to the object or NIL if no object <i>name</i> exists.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - If <i>name</i> cannot be converted to            the internal representation.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="match(in_program,in_ref_list)"><h3>match</h3></a>
<p>
const func reference: <b>match</b> (in program: aProgram, in ref_list: expression)</p><dl><dd>
<p>
Determine object from program <i>aProgram</i> which matches <i>expression</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>object from program.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="isTemp(in_reference)"><h3>isTemp</h3></a>
<p>
const func boolean: <b>isTemp</b> (in reference: aReference)</p><dl><dd>
<p>
Determine if the referenced object is temporary.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aReference</i> is temporary, FALSE otherwise.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="isVar(in_reference)"><h3>isVar</h3></a>
<p>
const func boolean: <b>isVar</b> (in reference: aReference)</p><dl><dd>
<p>
Determine if the referenced object is variable.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aReference</i> is a variable, FALSE otherwise.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setVar(in_reference,in_boolean)"><h3>setVar</h3></a>
<p>
const proc: <b>setVar</b> (in reference: aReference, in boolean: isVariable)</p><dl><dd>
<p>
Set var flag of a referenced object.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="category(in_reference)"><h3>category</h3></a>
<p>
const func category: <b>category</b> (in reference: aReference)</p><dl><dd>
<p>
Get the category of a referenced object.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the category of the referenced object.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setCategory(in_reference,in_category)"><h3>setCategory</h3></a>
<p>
const proc: <b>setCategory</b> (in reference: aReference,
                         in category: aCategory)</p><dl><dd>
<p>
Set the category of <i>aReference</i> to <i>aCategory</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="formalParams(in_reference)"><h3>formalParams</h3></a>
<p>
const func ref_list: <b>formalParams</b> (in reference: funcRef)</p><dl><dd>
<p>
Get the formal parameters of the function referenced by <i>funcRef</i>.
For objects without parameters an empty list is returned.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the formal parameters as <a class="link" href="ref_list.htm" title="ref_list">ref_list</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setFormalParams(in_reference,in_ref_list)"><h3>setFormalParams</h3></a>
<p>
const proc: <b>setFormalParams</b> (in reference: funcRef, in ref_list: params)</p><dl><dd>
<p>
Set the formal parameters of <i>funcRef</i> to <i>params</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="resultVar(in_reference)"><h3>resultVar</h3></a>
<p>
const func reference: <b>resultVar</b> (in reference: funcRef)</p><dl><dd>
<p>
Gets the result variable of <i>funcRef</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <a class="link" href="reference.htm" title="reference">reference</a> to the result variable.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL or                        category(funcRef) &lt;> BLOCKOBJECT holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="resultInitValue(in_reference)"><h3>resultInitValue</h3></a>
<p>
const func reference: <b>resultInitValue</b> (in reference: funcRef)</p><dl><dd>
<p>
Gets the initialization value of the result variable of <i>funcRef</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <a class="link" href="reference.htm" title="reference">reference</a> to the initialization value.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL or                        category(funcRef) &lt;> BLOCKOBJECT holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="localConsts(in_reference)"><h3>localConsts</h3></a>
<p>
const func ref_list: <b>localConsts</b> (in reference: funcRef)</p><dl><dd>
<p>
Gets the local constants of <i>funcRef</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the local constants as <a class="link" href="ref_list.htm" title="ref_list">ref_list</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL or                        category(funcRef) &lt;> BLOCKOBJECT holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="localVars(in_reference)"><h3>localVars</h3></a>
<p>
const func ref_list: <b>localVars</b> (in reference: funcRef)</p><dl><dd>
<p>
Gets the local variables of <i>funcRef</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the local variables as <a class="link" href="ref_list.htm" title="ref_list">ref_list</a>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL or                        category(funcRef) &lt;> BLOCKOBJECT holds.</dd>
<dd><tt>MEMORY_ERROR</tt> - An out of memory situation occurred.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="body(in_reference)"><h3>body</h3></a>
<p>
const func reference: <b>body</b> (in reference: funcRef)</p><dl><dd>
<p>
Gets the body of the function referenced by <i>funcRef</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the body expression of <i>funcRef</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>funcRef</i> is NIL or                        category(funcRef) &lt;> BLOCKOBJECT holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="arrayMinIdx(in_reference)"><h3>arrayMinIdx</h3></a>
<p>
const func integer: <b>arrayMinIdx</b> (in reference: arrayRef)</p><dl><dd>
<p>
Obtain the minimum index of the array referenced by 'arrayRef'.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>arrayRef</tt> - Reference to an array object.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the minimum index of the array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If 'arrayRef' does not refer to an array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="arrayMaxIdx(in_reference)"><h3>arrayMaxIdx</h3></a>
<p>
const func integer: <b>arrayMaxIdx</b> (in reference: arrayRef)</p><dl><dd>
<p>
Obtain the maximum index of the array referenced by 'arrayRef'.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>arrayRef</tt> - Reference to an array object.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the maximum index of the array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If 'arrayRef' does not refer to an array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="arrayLength(in_reference)"><h3>arrayLength</h3></a>
<p>
const func integer: <b>arrayLength</b> (in reference: arrayRef)</p><dl><dd>
<p>
Obtain the length of the array referenced by 'arrayRef'.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>arrayRef</tt> - Reference to an array object.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If 'arrayRef' does not refer to an array.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="file(in_reference)"><h3>file</h3></a>
<p>
const func string: <b>file</b> (in reference: aReference)</p><dl><dd>
<p>
Determine the file name of a referenced object.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the file name of the referenced object.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="line(in_reference)"><h3>line</h3></a>
<p>
const func integer: <b>line</b> (in reference: aReference)</p><dl><dd>
<p>
Determine the line number of a referenced object.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the line number of the referenced object.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>aReference</i> is NIL.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="objNumber(in_reference)"><h3>objNumber</h3></a>
<p>
const func integer: <b>objNumber</b> (in reference: aReference)</p><dl><dd>
<p>
Delivers an unique number for each object
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a unique object number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to maintain the object table.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/process.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/propertyfile.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
