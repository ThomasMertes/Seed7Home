<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Scanfile</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Scanfile</big></b></td>
<td align="right"><a class="link" href="../lib/scanfile.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/rpm.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/scanstri.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipComment(inout_file)">skipComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips a possibly nested comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getComment(inout_file)">getComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a possibly nested comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipClassicComment(inout_file)">skipClassicComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips a classic C comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipLineComment(inout_file)">skipLineComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips a line comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getLineComment(inout_file)">getLineComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a line comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getDigits(inout_file)">getDigits</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a sequence of digits from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getInteger(inout_file)">getInteger</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a decimal integer with optional sign from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNumber(inout_file)">getNumber</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a numeric literal (integer, bigInteger or float literal) from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNonDigits(inout_file)">getNonDigits</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a sequence of non digits from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getQuotedText(inout_file)">getQuotedText</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a text quoted with " or ' from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSimpleStringLiteral(inout_file)">getSimpleStringLiteral</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a simple <a class="link" href="string.htm" title="string">string</a> literal from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getEscapeSequence(inout_file,inout_string)">getEscapeSequence</a></b> (inout file: inFile, inout string: symbol)</td></tr>
<tr><td width="30"></td><td>Reads an escape sequence from <i>inFile</i> and appends it to <i>symbol</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getCharLiteral(inout_file)">getCharLiteral</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a character literal from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getStringLiteral(inout_file)">getStringLiteral</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read a <a class="link" href="string.htm" title="string">string</a> literal from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getName(inout_file)">getName</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads an alphanumeric name from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipSpace(inout_file)">skipSpace</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips space characters from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipSpaceOrTab(inout_file)">skipSpaceOrTab</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips space and tab characters from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipWhiteSpace(inout_file)">skipWhiteSpace</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips whitespace characters from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipWhiteSpace(inout_file,in_set_of_char)">skipWhiteSpace</a></b> (inout file: inFile, in set of char: whiteSpaceChar)</td></tr>
<tr><td width="30"></td><td>Skips characters from the set <i>whiteSpaceChar</i> from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getWhiteSpace(inout_file)">getWhiteSpace</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads whitespace characters from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getWord(inout_file)">getWord</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a white space delimited word from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipLine(inout_file)">skipLine</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips a line from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getLine(inout_file)">getLine</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a line from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbolOrComment(inout_file)">getSymbolOrComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a symbol or a comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbol(inout_file)">getSymbol</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a symbol from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbolWithHtmlEntities(inout_file)">getSymbolWithHtmlEntities</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a symbol, where html entities are allowed, from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getHtmlTagSymbolOrComment(inout_file)">getHtmlTagSymbolOrComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a HTML tag, a symbol or a comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipXmlComment(inout_file)">skipXmlComment</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips an XML comment from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlTagOrContent(inout_file)">getXmlTagOrContent</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads an XML/HTML tag or the XML/HTML content text from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlCharacterReference(inout_file)">getXmlCharacterReference</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a predefined XML entity from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlCdataContent(inout_file)">getXmlCdataContent</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Read the content text of a CDATA section.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getXmlTagHeadOrContent(inout_file)">getXmlTagHeadOrContent</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads an XML/HTML tag head or an XML/HTML content from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSymbolInXmlTag(inout_file)">getSymbolInXmlTag</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a symbol which can appear inside an XML/HTML tag from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipXmlTag(inout_file)">skipXmlTag</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Skips beyond an XML Tag in a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#skipXmlTag(inout_file,in_var_string)">skipXmlTag</a></b> (inout file: inFile, in var string: symbol)</td></tr>
<tr><td width="30"></td><td>Skips beyond an XML Tag in a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNextXmlAttribute(inout_file,inout_string,inout_string)">getNextXmlAttribute</a></b> (inout file: inFile,
    inout string: attributeName, inout string: attributeValue)</td></tr>
<tr><td width="30"></td><td>Reads name and value of an attribute inside an XML tag from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getHtmlAttributeValue(inout_file)">getHtmlAttributeValue</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a HTML tag attribute value from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getNextHtmlAttribute(inout_file,inout_string,inout_string)">getNextHtmlAttribute</a></b> (inout file: inFile,
    inout string: attributeName, inout string: attributeValue)</td></tr>
<tr><td width="30"></td><td>Reads name and value of an attribute inside a HTML tag from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSimpleSymbol(inout_file)">getSimpleSymbol</a></b> (inout file: inFile)</td></tr>
<tr><td width="30"></td><td>Reads a simple symbol from a <a class="link" href="file.htm" title="file">file</a>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="skipComment(inout_file)"><h3>skipComment</h3></a>
<p>
const proc: <b>skipComment</b> (inout file: inFile)</p><dl><dd>
<p>
Skips a possibly nested comment from a <a class="link" href="file.htm" title="file">file</a>.
The comment starts with (* and ends with *) . When the function
is called it is assumed that inFile.bufferChar contains the '*'
of the comment start. When the function is left the character
after ')' is in inFile.bufferChar.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getComment(inout_file)"><h3>getComment</h3></a>
<p>
const func string: <b>getComment</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a possibly nested comment from a <a class="link" href="file.htm" title="file">file</a>.
The comment starts with (* and ends with *) . When the function
is called it is assumed that inFile.bufferChar contains the '*'
of the comment start. When the function is left the character
after ')' is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content of the comment, including the introducing (*         and the ending *) .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipClassicComment(inout_file)"><h3>skipClassicComment</h3></a>
<p>
const proc: <b>skipClassicComment</b> (inout file: inFile)</p><dl><dd>
<p>
Skips a classic C comment from a <a class="link" href="file.htm" title="file">file</a>.
The comment starts with /* and ends with */ . In a classic
C comment no nesting of comments is allowed. When the function
is called it is assumed that inFile.bufferChar contains the '*'
of the comment start. When the function is left the character
after '/' is in inFile.bufferChar.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipLineComment(inout_file)"><h3>skipLineComment</h3></a>
<p>
const proc: <b>skipLineComment</b> (inout file: inFile)</p><dl><dd>
<p>
Skips a line comment from a <a class="link" href="file.htm" title="file">file</a>.
A line comment starts with an introducing character (like '#')
and ends with the end of the line. When the function is called
it is assumed that the introducing character (e.g. '#') is in
inFile.bufferChar. When the function is left the line end
character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>) is in inFile.bufferChar.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getLineComment(inout_file)"><h3>getLineComment</h3></a>
<p>
const func string: <b>getLineComment</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a line comment from a <a class="link" href="file.htm" title="file">file</a>.
A line comment starts with an introducing character (like '#')
and ends with the end of the line. When the function is called
it is assumed that the introducing character (e.g. '#') is in
inFile.bufferChar. When the function is left the line end
character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>) is in inFile.bufferChar.
A sequence of "\r\n" is interpreted as equal to '\n'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content of the comment, including the start marker         (e.g. '#') but without line end character ('\n', or         <a class="link" href="char.htm#EOF" title="EOF">EOF</a>).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getDigits(inout_file)"><h3>getDigits</h3></a>
<p>
const func string: <b>getDigits</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a sequence of digits from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains the character after the digits.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the digit sequence, and         "" if no digit was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getInteger(inout_file)"><h3>getInteger</h3></a>
<p>
const func string: <b>getInteger</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a decimal integer with optional sign from a <a class="link" href="file.htm" title="file">file</a>.
A decimal integer accepted by <i>getInteger</i> consists of an optional
+ or - sign followed by a possibly empty sequence of digits. Because
of the LL(1) approach, a sign without following digits is accepted.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains the character after the integer.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decimal integer string, and         "" if no integer was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getNumber(inout_file)"><h3>getNumber</h3></a>
<p>
const func string: <b>getNumber</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a numeric literal (integer, bigInteger or float literal) from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that the introducing
digit is in inFile.bufferChar. When the function is left the
character after the literal is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>The function returns the numeric literal.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getNonDigits(inout_file)"><h3>getNonDigits</h3></a>
<p>
const func string: <b>getNonDigits</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a sequence of non digits from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains a digit or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the non digit sequence, and         "" if a digit was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getQuotedText(inout_file)"><h3>getQuotedText</h3></a>
<p>
const func string: <b>getQuotedText</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a text quoted with " or ' from a <a class="link" href="file.htm" title="file">file</a>.
The introducing and the closing character ( " or ' ) of the quoted
text must be identical. When the function is called it is assumed
that inFile.bufferChar contains the introducing " or ' . When the
function is left inFile.bufferChar contains the character after
the closing character.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quoted text without introducing or closing         characters ( " or ' ).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSimpleStringLiteral(inout_file)"><h3>getSimpleStringLiteral</h3></a>
<p>
const func string: <b>getSimpleStringLiteral</b> (inout file: inFile)</p><dl><dd>
<p>
Read a simple <a class="link" href="string.htm" title="string">string</a> literal from a <a class="link" href="file.htm" title="file">file</a>.
A simple string literal is enclosed in delimiter characters
(e.g. " or ' ). Delimiter characters within the simple string
literal must be doubled. A simple string literal does not
support an escape character. All characters, including control
characters (e.g. linefeed) are allowed inside a simple string
literal. When the function is called it is assumed that
inFile.bufferChar contains the introducing delimiter character.
When the function is left the character after the closing
delimiter character is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string literal including the introducing and         closing delimiter character. Double delimiter chars in         the literal are converted to single delimiter chars.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getEscapeSequence(inout_file,inout_string)"><h3>getEscapeSequence</h3></a>
<p>
const proc: <b>getEscapeSequence</b> (inout file: inFile, inout string: symbol)</p><dl><dd>
<p>
Reads an escape sequence from <i>inFile</i> and appends it to <i>symbol</i>.
The function accepts escape sequences from character and string
literals. When the function is called it is assumed that the
introducing \ is in inFile.bufferChar. When the function is left
the character after the escape sequence is in inFile.bufferChar.
The complete escape sequence including the introducing \ is
appended to <i>symbol</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getCharLiteral(inout_file)"><h3>getCharLiteral</h3></a>
<p>
const func string: <b>getCharLiteral</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a character literal from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that the introducing '
is in inFile.bufferChar. When the function is left the character
after the closing ' is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character literal including the introducing ' and         the closing ' .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getStringLiteral(inout_file)"><h3>getStringLiteral</h3></a>
<p>
const func string: <b>getStringLiteral</b> (inout file: inFile)</p><dl><dd>
<p>
Read a <a class="link" href="string.htm" title="string">string</a> literal from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that the introducing "
is in inFile.bufferChar. When the function is left the character
after the closing " is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string literal including the introducing " and the         closing " .</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getName(inout_file)"><h3>getName</h3></a>
<p>
const func string: <b>getName</b> (inout file: inFile)</p><dl><dd>
<p>
Reads an alphanumeric name from a <a class="link" href="file.htm" title="file">file</a>.
A name consists of a letter or underscore followed by letters,
digits or underscores. When the function is called it is assumed
that inFile.bufferChar contains the first character to be handled.
When the function is left inFile.bufferChar contains the character
after the name.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the name, and         "" if no letter or underscore was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipSpace(inout_file)"><h3>skipSpace</h3></a>
<p>
const proc: <b>skipSpace</b> (inout file: inFile)</p><dl><dd>
<p>
Skips space characters from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar does not contain a space character.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipSpaceOrTab(inout_file)"><h3>skipSpaceOrTab</h3></a>
<p>
const proc: <b>skipSpaceOrTab</b> (inout file: inFile)</p><dl><dd>
<p>
Skips space and tab characters from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains the character after the
sequence of space and tab characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipWhiteSpace(inout_file)"><h3>skipWhiteSpace</h3></a>
<p>
const proc: <b>skipWhiteSpace</b> (inout file: inFile)</p><dl><dd>
<p>
Skips whitespace characters from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains the character after the
whitespace characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipWhiteSpace(inout_file,in_set_of_char)"><h3>skipWhiteSpace</h3></a>
<p>
const proc: <b>skipWhiteSpace</b> (inout file: inFile, in set of char: whiteSpaceChar)</p><dl><dd>
<p>
Skips characters from the set <i>whiteSpaceChar</i> from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains the character after the
whitespace characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getWhiteSpace(inout_file)"><h3>getWhiteSpace</h3></a>
<p>
const func string: <b>getWhiteSpace</b> (inout file: inFile)</p><dl><dd>
<p>
Reads whitespace characters from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left inFile.bufferChar contains the character after the
whitespace characters.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string of whitespace characters, and         "" if no whitespace character was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getWord(inout_file)"><h3>getWord</h3></a>
<p>
const func string: <b>getWord</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a white space delimited word from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the word it skips whitespace characters. A word is
a sequence of characters which does not contain a whitespace
character. When the function is called it is assumed that
inFile.bufferChar contains the first character to be handled.
When the function is left inFile.bufferChar contains the
character after the word.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the word, and         "" if no word was found.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipLine(inout_file)"><h3>skipLine</h3></a>
<p>
const proc: <b>skipLine</b> (inout file: inFile)</p><dl><dd>
<p>
Skips a line from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left the line end character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>) is in
inFile.bufferChar. If inFile.bufferChar already contains a
line end character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>) nothing is done.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getLine(inout_file)"><h3>getLine</h3></a>
<p>
const func string: <b>getLine</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a line from a <a class="link" href="file.htm" title="file">file</a>.
When the function is called it is assumed that inFile.bufferChar
contains the first character to be handled. When the function is
left the line end character ('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>) is in
inFile.bufferChar. A sequence of "\r\n" is interpreted as equal to '\n'.
If inFile.bufferChar already contains a line end character
('\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>) nothing is done and the function returns "" .
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the line read, and         "" if inFile.bufferChar contains '\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbolOrComment(inout_file)"><h3>getSymbolOrComment</h3></a>
<p>
const func string: <b>getSymbolOrComment</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a symbol or a comment from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the symbol or comment it skips whitespace
characters. A symbol can be a literal (numeric, character or
string), a name, a special symbol (sequence of special characters)
or a parenthesis. A comment can be a normal comment or a line
comment. When the function is called it is assumed that
inFile.bufferChar contains a whitespace character or the first
character of a symbol or comment. When the function is left the
character after the symbol or comment is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol or comment, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbol(inout_file)"><h3>getSymbol</h3></a>
<p>
const func string: <b>getSymbol</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a symbol from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the symbol it skips whitespace characters and
comments (normal comments and line comments). A symbol can be a
literal (numeric, character or string), a name, a special symbol
(sequence of special characters) or a parenthesis. When the
function is called it is assumed that inFile.bufferChar contains
a whitespace character or the first character of a symbol or
comment. When the function is left the character after the symbol
is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbolWithHtmlEntities(inout_file)"><h3>getSymbolWithHtmlEntities</h3></a>
<p>
const func string: <b>getSymbolWithHtmlEntities</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a symbol, where html entities are allowed, from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the symbol it skips whitespace characters and
comments (normal comments and line comments). A symbol can be a
literal (numeric, character or string), a name, a special symbol
(sequence of special characters) or a parenthesis. Html entities
in the file are treated as special characters. When the function
is called it is assumed that inFile.bufferChar contains a
whitespace character or the first character of a symbol or
comment. When the function is left the character after the symbol
is in inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getHtmlTagSymbolOrComment(inout_file)"><h3>getHtmlTagSymbolOrComment</h3></a>
<p>
const func string: <b>getHtmlTagSymbolOrComment</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a HTML tag, a symbol or a comment from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the HTML tag, symbol or comment it skips whitespace
characters. A HTML tag starts with &lt; and ends with > . A symbol
can be a literal (numeric, character or string), a name, a special
symbol (sequence of special characters) or a parenthesis.
A comment can be a normal comment or a line comment. Html entities
in the file are treated as special characters. When the function
is called it is assumed that inFile.bufferChar contains a
whitespace character, an introducing &lt; of a HTML tag or the first
character of a symbol or a comment. When the function is left the
character after the HTML tag, symbol or comment is in
inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the HTML tag, symbol or comment, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipXmlComment(inout_file)"><h3>skipXmlComment</h3></a>
<p>
const proc: <b>skipXmlComment</b> (inout file: inFile)</p><dl><dd>
<p>
Skips an XML comment from a <a class="link" href="file.htm" title="file">file</a>.
The XML comment starts with &lt;!-- and ends with --> . When the
function is called it is assumed that the character in
inFile.bufferChar is the last '-' of the introducing &lt;!-- .
When the function is left the character after --> is in
inFile.bufferChar.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getXmlTagOrContent(inout_file)"><h3>getXmlTagOrContent</h3></a>
<p>
const func string: <b>getXmlTagOrContent</b> (inout file: inFile)</p><dl><dd>
<p>
Reads an XML/HTML tag or the XML/HTML content text from a <a class="link" href="file.htm" title="file">file</a>.
An XML/HTML tag starts with &lt; and ends with > . The content text
starts with everything else and ends just before a &lt; or with
<a class="link" href="char.htm#EOF" title="EOF">EOF</a>. When the function is called it is assumed that
inFile.bufferChar contains the introducing &lt; of an XML/HTML tag or
the first character of the content text. When the function is left
the character after the XML/HTML tag or the content text is in
inFile.bufferChar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the XML/HTML tag or XML/HTML content text, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getXmlCharacterReference(inout_file)"><h3>getXmlCharacterReference</h3></a>
<p>
const func string: <b>getXmlCharacterReference</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a predefined XML entity from a <a class="link" href="file.htm" title="file">file</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the predefined XML entity, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getXmlCdataContent(inout_file)"><h3>getXmlCdataContent</h3></a>
<p>
const func string: <b>getXmlCdataContent</b> (inout file: inFile)</p><dl><dd>
<p>
Read the content text of a CDATA section.
In a CDATA section the text between &lt;![CDATA[ and ]]> is considered
content text. Inside a CDATA section the characters &lt; and &amp; have no
special meaning. All occurances of &lt; and &amp; inside CDATA are returned
as &amp;lt; and &amp;amp; respectively. When the function is called it is
assumed that inFile.bufferChar contains the first character after
the introducing &lt;![CDATA[ sequence or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>. When the
function is left inFile.bufferChar contains the character after
the final ]]> sequence or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - Input file</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content text of the CDATA section that has been read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getXmlTagHeadOrContent(inout_file)"><h3>getXmlTagHeadOrContent</h3></a>
<p>
const func string: <b>getXmlTagHeadOrContent</b> (inout file: inFile)</p><dl><dd>
<p>
Reads an XML/HTML tag head or an XML/HTML content from a <a class="link" href="file.htm" title="file">file</a>.
Examples of XML/HTML tag heads are:
</p>
<pre class="indent">
&lt;html
&lt;meta
&lt;table
&lt;/span
</pre>
<p>
Before reading a tag head or content, it skips whitespace
characters and XML comments. An XML/HTML tag head starts
with &lt; and ends before a > or a / or a whitespace character
or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>. The content text starts with a non whitespace
character and ends just before a &lt; or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>. Content
text can be also in a CDATA section. In a CDATA section the text
between &lt;![CDATA[ and ]]> is considered content text. Inside a
CDATA section the characters &lt; and &amp; have no special meaning. All
occurances of &lt; and &amp; inside CDATA are returned as &amp;lt; and &amp;amp;
respectively. When the function is called it is assumed that
inFile.bufferChar contains either a whitespace character, the
introducing &lt; of an XML/HTML tag or the first character of the
content text. When the function is left, the character after the
XML/HTML tag head or the content text is in inFile.bufferChar.
Text between &lt;!-- and --> is considered an XML comment. An XML
comment is ignored and getXmlTagHeadOrContent() is called recursive.
The function can be used as follows:
</p>
<pre class="indent">
symbol := getXmlTagHeadOrContent(inFile);
if startsWith(symbol, "&lt;/") then
  ... handle the XML/HTML end-tag ...
elsif startsWith(symbol, "&lt;") then
  ... handle the attributes of the XML/HTML start-tag ...
else
  ... handle the content text ...
end if;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - Input file</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the XML/HTML tag head or XML/HTML content text, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getSymbolInXmlTag(inout_file)"><h3>getSymbolInXmlTag</h3></a>
<p>
const func string: <b>getSymbolInXmlTag</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a symbol which can appear inside an XML/HTML tag from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the symbol it skips whitespace characters. A symbol
inside an XML/HTML tag can be a name, a string literal (quoted with "
or ' ), the equals sign (=), the end of tag character (>), the slash
character (/) or a special symbol (a sequence of characters that
does not include the character > or a whitespace character). Special 
symbols can only appear in HTML tags. When the function is called it
is assumed that inFile.bufferChar contains a whitespace character or
the first character of a symbol. When the function is left
inFile.bufferChar contains the character after the XML/HTML symbol
or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - Input file</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the symbol, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="skipXmlTag(inout_file)"><h3>skipXmlTag</h3></a>
<p>
const proc: <b>skipXmlTag</b> (inout file: inFile)</p><dl><dd>
<p>
Skips beyond an XML Tag in a <a class="link" href="file.htm" title="file">file</a>.
When the function is left the character after '>' is in
inFile.bufferChar.
</p>
</dd>
</dl></div>
<hr />
<div><a name="skipXmlTag(inout_file,in_var_string)"><h3>skipXmlTag</h3></a>
<p>
const proc: <b>skipXmlTag</b> (inout file: inFile, in var string: symbol)</p><dl><dd>
<p>
Skips beyond an XML Tag in a <a class="link" href="file.htm" title="file">file</a>.
The parameter <i>symbol</i> is used to provide the current symbol
which possibly can be ">" or "". When the function is left the
character after '>' is in inFile.bufferChar.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getNextXmlAttribute(inout_file,inout_string,inout_string)"><h3>getNextXmlAttribute</h3></a>
<p>
const proc: <b>getNextXmlAttribute</b> (inout file: inFile,
    inout string: attributeName, inout string: attributeValue)</p><dl><dd>
<p>
Reads name and value of an attribute inside an XML tag from a <a class="link" href="file.htm" title="file">file</a>.
The function skips possible leading whitespace characters. Attribute
name and value are returned in <i>attributeName</i> and <i>attributeValue</i>
respectively. Attribute assignments can have the following forms:
</p>
<pre class="indent">
aName="aValue"
aName='aValue'
</pre>
<p>
Surrounding single or double quotes of the attribute value are omitted.
It is a syntax error if an attribute value is not quoted. White
space characters before and after the = are ignored. XML entities
in <i>attributeValue</i> are left as is. If no more attributes are
present in the XML tag <i>attributeName</i> is set to "". In this case
<i>attributeValue</i> contains the end of the XML tag (">" or "/>") and
inFile.bufferChar contains the character after the closing '>'.
If a syntax error occurs the function skips beyond the end of
the XML tag (inFile.bufferChar contains the character after the
closing '>'). To indicate the syntax error <i>attributeName</i> is
set to "" and <i>attributeValue</i> is set to a symbol shortly before
the error (this will never be ">" or "/>"). The attributes of
an XML start-tag or empty-element tag can be processed with:
</p>
<pre class="indent">
getNextXmlAttribute(inFile, attributeName, attributeValue);
while attributeName &lt;> "" do
  ... process the current attribute ...
  getNextXmlAttribute(inFile, attributeName, attributeValue);
end while;
if attributeValue = "/>" then
  ... this is an empty-element tag ...
elsif attributeValue = ">" then
  ... this is a start-tag ...
else
  ... there is a syntax error ...
end if;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - Input file</dd>
<dd><tt>attributeName</tt> - Destination for the attribute name.</dd>
<dd><tt>attributeValue</tt> - Destination for the attribute value:</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getHtmlAttributeValue(inout_file)"><h3>getHtmlAttributeValue</h3></a>
<p>
const func string: <b>getHtmlAttributeValue</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a HTML tag attribute value from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the value it skips whitespace characters. A HTML
tag attribute value can be quoted with " or ' or it is terminated
with the character > or a whitespace character. When the function
is called it is assumed that inFile.bufferChar contains a
whitespace character or the first character of a value. When the
function is left inFile.bufferChar contains the character after
the XML/HTML attribute value or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - Input file</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the attribute value, and         "" if the end of the HTML tag or <a class="link" href="char.htm#EOF" title="EOF">EOF</a> is             directly after the skipped whitespace characters.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getNextHtmlAttribute(inout_file,inout_string,inout_string)"><h3>getNextHtmlAttribute</h3></a>
<p>
const proc: <b>getNextHtmlAttribute</b> (inout file: inFile,
    inout string: attributeName, inout string: attributeValue)</p><dl><dd>
<p>
Reads name and value of an attribute inside a HTML tag from a <a class="link" href="file.htm" title="file">file</a>.
The function skips possible leading whitespace characters. Attribute
name and value are returned in <i>attributeName</i> and <i>attributeValue</i>
respectively. Attribute assignments can have the following forms:
</p>
<pre class="indent">
aName="aValue"
aName='aValue'
aName=aValue
aName
</pre>
<p>
Possible surrounding single or double quotes of the attribute value
are omitted. White space characters before and after the = are
ignored. HTML entities in <i>attributeValue</i> are left as is.
If no more attributes are present in the HTML tag <i>attributeName</i>
is set to "". In this case <i>attributeValue</i> contains the end of
the HTML tag (">" or "/>") and inFile.bufferChar contains the
character after the closing '>'. The attributes of a HTML
start-tag or empty-element tag can be processed with:
</p>
<pre class="indent">
getNextHtmlAttribute(inFile, attributeName, attributeValue);
while attributeName &lt;> "" do
  ... process the current attribute ...
  getNextHtmlAttribute(inFile, attributeName, attributeValue);
end while;
if attributeValue = "/>" then
  ... this is an empty-element tag ...
else  # attributeValue = ">"
  ... this is a start-tag ...
end if;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>inFile</tt> - Input file</dd>
<dd><tt>attributeName</tt> - Destination for the attribute name.</dd>
<dd><tt>attributeValue</tt> - Destination for the attribute value:</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getSimpleSymbol(inout_file)"><h3>getSimpleSymbol</h3></a>
<p>
const func string: <b>getSimpleSymbol</b> (inout file: inFile)</p><dl><dd>
<p>
Reads a simple symbol from a <a class="link" href="file.htm" title="file">file</a>.
Before reading the simple symbol it skips whitespace characters.
A simple symbol can be an integer literal, a name, a special
symbol (sequence of special characters) or a parenthesis.
Note that string, char and float literals are not recognized as
simple symbol.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the simple symbol, and         "" if <a class="link" href="char.htm#EOF" title="EOF">EOF</a> was reached.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/rpm.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/scanstri.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
