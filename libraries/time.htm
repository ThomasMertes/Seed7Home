<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Time</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Time</big></b></td>
<td align="right"><a class="link" href="../prg/time.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/tiff.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/tls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#time">time</a></b></td></tr>
<tr><td width="30"></td><td>Describes times and dates.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="time"><h3>time</h3></a>
<p>
const type: <b>time</b></p><dl><dd>
<p>
Describes times and dates.
For dates the proleptic Gregorian calendar is used (which assumes
that the Gregorian calendar was even in effect at dates preceding
its official introduction). This convention is used according to
ISO 8601 which also defines that positive and negative years exist
and that the year preceding 1 is 0. Time is measured in hours,
minutes, seconds and micro seconds. Additionally information about
the difference to UTC and a flag indicating daylight saving time
is maintained also.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr time) <b><a class="link" href="#(attr_time)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a string in the ISO 8601 date format to a time.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in time: aTime1) <b><a class="link" href="#(in_time)=(in_time)">=</a></b> (in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>time</i> values are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in time: aTime1) <b><a class="link" href="#(in_time)&lt;>(in_time)">&lt;></a></b> (in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>time</i> values are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in time: aTime1) <b><a class="link" href="#(in_time)&lt;=(in_time)">&lt;=</a></b> (in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Check if <i>aTime1</i> is less than or equal to <i>aTime2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in time: aTime1) <b><a class="link" href="#(in_time)>=(in_time)">>=</a></b> (in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Check if <i>aTime1</i> is greater than or equal to <i>aTime2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in time: aTime1) <b><a class="link" href="#(in_time)&lt;(in_time)">&lt;</a></b> (in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Check if <i>aTime1</i> is less than <i>aTime2</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in time: aTime1) <b><a class="link" href="#(in_time)>(in_time)">></a></b> (in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Check if <i>aTime1</i> is greater than <i>aTime2</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#isLeapYear(in_integer)">isLeapYear</a></b> (in integer: year)</td></tr>
<tr><td width="30"></td><td>Determine if a year is a leap year in the Gregorian calendar.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#daysInYear(in_integer)">daysInYear</a></b> (in integer: year)</td></tr>
<tr><td width="30"></td><td>Determine the number of days in a 'year'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#daysInMonth(in_integer,in_integer)">daysInMonth</a></b> (in integer: year, in integer: month)</td></tr>
<tr><td width="30"></td><td>Determine the number of days in the 'month' of the given 'year'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#daysInMonth(in_time)">daysInMonth</a></b> (in time: date)</td></tr>
<tr><td width="30"></td><td>Determine the number of days in the month of a given date.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#strDate(in_time)">strDate</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Convert a time to a string with ISO 8601 YYYY-MM-DD date format.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#strTime(in_time)">strTime</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Convert a time to a string with ISO 8601 hh:mm:ss time format.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#strDateTime(in_time)">strDateTime</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Convert a time to a string with ISO 8601 date and time format.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_time)">str</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Convert a time to a string with ISO 8601 date and time format.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_time)">literal</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Convert a time to a time literal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#time(in_var_string)">time</a></b> (in var string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a string in the ISO 8601 date format to a time.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_time,in_time)">compare</a></b> (in time: aTime1, in time: aTime2)</td></tr>
<tr><td width="30"></td><td>Compares two times.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_time)">hashCode</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a time.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncToSecond(in_time)">truncToSecond</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Truncate 'aTime' to the beginning of a second.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncToMinute(in_time)">truncToMinute</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Truncate 'aTime' to the beginning of a minute.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncToHour(in_time)">truncToHour</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Truncate 'aTime' to the beginning of a hour.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncToDay(in_time)">truncToDay</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Truncate 'aTime' to the beginning of a day.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncToMonth(in_time)">truncToMonth</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Truncate 'aTime' to the beginning of the first day in the month.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#truncToYear(in_time)">truncToYear</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Truncate 'aTime' to the beginning of the first day in the year.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#dayOfWeek(in_time)">dayOfWeek</a></b> (in time: aDate)</td></tr>
<tr><td width="30"></td><td>Return the weekday number of 'aDate'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#dayOfYear(in_time)">dayOfYear</a></b> (in time: aDate)</td></tr>
<tr><td width="30"></td><td>Return the day number in the year of 'aDate'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#weekOfYear(in_var_integer,in_integer)">weekOfYear</a></b> (in var integer: year, in integer: dayOfYear)</td></tr>
<tr><td width="30"></td><td>Return the week number of the 'year' for the 'dayOfYear'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#weekOfYear(in_time)">weekOfYear</a></b> (in time: aDate)</td></tr>
<tr><td width="30"></td><td>Return the week number of the year for 'aDate'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#weekDateYear(in_time)">weekDateYear</a></b> (in time: aDate)</td></tr>
<tr><td width="30"></td><td>Return the year of the ISO 8601 week date for 'aDate'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#weekDateWeek(in_time)">weekDateWeek</a></b> (in time: aDate)</td></tr>
<tr><td width="30"></td><td>Return the week number of the ISO 8601 week date for 'aDate'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toUTC(in_time)">toUTC</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Convert a time to Coordinated Universal Time (UTC).</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setLocalTZ(in_time)">setLocalTZ</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Sets timeZone and daylightSavingTime for a given time.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#julianDayNumber(in_time)">julianDayNumber</a></b> (in time: aDate)</td></tr>
<tr><td width="30"></td><td>Compute the julian day number of 'aDate'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#julianDayNumToTime(in_integer)">julianDayNumToTime</a></b> (in integer: julianDayNumber)</td></tr>
<tr><td width="30"></td><td>Return the time of a 'julianDayNumber'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#timestamp1970(in_time)">timestamp1970</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Return a time expressed in seconds since the Unix epoch.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#timestamp1970ToTime(in_integer)">timestamp1970ToTime</a></b> (in integer: timestamp)</td></tr>
<tr><td width="30"></td><td>Convert a Unix timestamp into a time from the local time zone.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#timestamp1601(in_time)">timestamp1601</a></b> (in time: aTime)</td></tr>
<tr><td width="30"></td><td>Return a time expressed as Windows FILETIME.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#timestamp1601ToTime(in_integer)">timestamp1601ToTime</a></b> (in integer: timestamp)</td></tr>
<tr><td width="30"></td><td>Convert a Windows FILETIME into a time from the local time zone.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rand(in_time,in_time)">rand</a></b> (in time: low, in time: high)</td></tr>
<tr><td width="30"></td><td>Compute pseudo-random time in the range [low, high].</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#time(NOW)">time</a></b> (NOW)</td></tr>
<tr><td width="30"></td><td>Determine the current local time.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#time(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)">time</a></b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second)</td></tr>
<tr><td width="30"></td><td>Return the specified UTC time.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#timeInTimeZone(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)">timeInTimeZone</a></b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second, in integer: timeZone)</td></tr>
<tr><td width="30"></td><td>Return the specified time in the specified timeZone.</td></tr></table></td></tr>
<tr><td align="right" valign="top">time</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#date(in_integer,in_integer,in_integer)">date</a></b> (in integer: year, in integer: month, in integer: day)</td></tr>
<tr><td width="30"></td><td>Return the specified UTC date.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#await(ref_time)">await</a></b> (ref time: aTime)</td></tr>
<tr><td width="30"></td><td>Wait until 'aTime' is reached</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_time)parse(in_string)"><h3>parse</h3></a>
<p>
const func time: (attr time) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a string in the ISO 8601 date format to a time.
The accepted ISO 8601 date formats are YYYY-MM, YYYY-MM-DD,
YYYY-MM-DDTHH, YYYY-MM-DDTHH:MM, YYYY-MM-DDTHH:MM:SS
Additionally a space is also allowed to separate the date and the
time representations: YYYY-MM-DD HH, YYYY-MM-DD HH:MM,
YYYY-MM-DD HH:MM:SS
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the time result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If stri contains not a valid time value.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_time)=(in_time)"><h3>=</h3></a>
<p>
const func boolean: (in time: aTime1) <b>=</b> (in time: aTime2)</p><dl><dd>
<p>
Check if two <i>time</i> values are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both times are equal, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_time)&lt;>(in_time)"><h3>&lt;></h3></a>
<p>
const func boolean: (in time: aTime1) <b>&lt;></b> (in time: aTime2)</p><dl><dd>
<p>
Check if two <i>time</i> values are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both times are equal, TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_time)&lt;=(in_time)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in time: aTime1) <b>&lt;=</b> (in time: aTime2)</p><dl><dd>
<p>
Check if <i>aTime1</i> is less than or equal to <i>aTime2</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aTime1</i> is less than or equal to <i>aTime2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_time)>=(in_time)"><h3>>=</h3></a>
<p>
const func boolean: (in time: aTime1) <b>>=</b> (in time: aTime2)</p><dl><dd>
<p>
Check if <i>aTime1</i> is greater than or equal to <i>aTime2</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aTime1</i> is greater than or equal to <i>aTime2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_time)&lt;(in_time)"><h3>&lt;</h3></a>
<p>
const func boolean: (in time: aTime1) <b>&lt;</b> (in time: aTime2)</p><dl><dd>
<p>
Check if <i>aTime1</i> is less than <i>aTime2</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aTime1</i> is less than <i>aTime2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_time)>(in_time)"><h3>></h3></a>
<p>
const func boolean: (in time: aTime1) <b>></b> (in time: aTime2)</p><dl><dd>
<p>
Check if <i>aTime1</i> is greater than <i>aTime2</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>aTime1</i> is greater than <i>aTime2</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="isLeapYear(in_integer)"><h3>isLeapYear</h3></a>
<p>
const func boolean: <b>isLeapYear</b> (in integer: year)</p><dl><dd>
<p>
Determine if a year is a leap year in the Gregorian calendar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the year is a leap year, FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="daysInYear(in_integer)"><h3>daysInYear</h3></a>
<p>
const func integer: <b>daysInYear</b> (in integer: year)</p><dl><dd>
<p>
Determine the number of days in a 'year'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of days in the year.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="daysInMonth(in_integer,in_integer)"><h3>daysInMonth</h3></a>
<p>
const func integer: <b>daysInMonth</b> (in integer: year, in integer: month)</p><dl><dd>
<p>
Determine the number of days in the 'month' of the given 'year'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of days in the month.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="daysInMonth(in_time)"><h3>daysInMonth</h3></a>
<p>
const func integer: <b>daysInMonth</b> (in time: date)</p><dl><dd>
<p>
Determine the number of days in the month of a given date.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of days in the month.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="strDate(in_time)"><h3>strDate</h3></a>
<p>
const func string: <b>strDate</b> (in time: aTime)</p><dl><dd>
<p>
Convert a time to a string with ISO 8601 YYYY-MM-DD date format.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="strTime(in_time)"><h3>strTime</h3></a>
<p>
const func string: <b>strTime</b> (in time: aTime)</p><dl><dd>
<p>
Convert a time to a string with ISO 8601 hh:mm:ss time format.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="strDateTime(in_time)"><h3>strDateTime</h3></a>
<p>
const func string: <b>strDateTime</b> (in time: aTime)</p><dl><dd>
<p>
Convert a time to a string with ISO 8601 date and time format.
The time is converted to the YYYY-MM-DD hh:mm:ss format.
Microseconds, time zone and information about the daylight
saving time are omitted.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_time)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in time: aTime)</p><dl><dd>
<p>
Convert a time to a string with ISO 8601 date and time format.
The string has the format YYYY-MM-DD hh:mm:ss.uuuuuu followed by a
time zone in the format UTC+n and (DST), if it is a daylight
saving time. The microseconds (uuuuuu) are omitted, if they are
zero. A time zone of UTC+0 is also omitted.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_time)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in time: aTime)</p><dl><dd>
<p>
Convert a time to a time literal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the time literal.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="time(in_var_string)"><h3>time</h3></a>
<p>
const func time: <b>time</b> (in var string: stri)</p><dl><dd>
<p>
Convert a string in the ISO 8601 date format to a time.
The accepted ISO 8601 date formats are YYYY-MM, YYYY-MM-DD,
YYYY-MM-DDTHH, YYYY-MM-DDTHH:MM, YYYY-MM-DDTHH:MM:SS
Additionally a space is also allowed to separate the date and the
time representations: YYYY-MM-DD HH, YYYY-MM-DD HH:MM,
YYYY-MM-DD HH:MM:SS
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the time result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If stri contains not a valid time value.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="compare(in_time,in_time)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in time: aTime1, in time: aTime2)</p><dl><dd>
<p>
Compares two times.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_time)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in time: aTime)</p><dl><dd>
<p>
Compute the hash value of a time.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncToSecond(in_time)"><h3>truncToSecond</h3></a>
<p>
const func time: <b>truncToSecond</b> (in time: aTime)</p><dl><dd>
<p>
Truncate 'aTime' to the beginning of a second.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncToMinute(in_time)"><h3>truncToMinute</h3></a>
<p>
const func time: <b>truncToMinute</b> (in time: aTime)</p><dl><dd>
<p>
Truncate 'aTime' to the beginning of a minute.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncToHour(in_time)"><h3>truncToHour</h3></a>
<p>
const func time: <b>truncToHour</b> (in time: aTime)</p><dl><dd>
<p>
Truncate 'aTime' to the beginning of a hour.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncToDay(in_time)"><h3>truncToDay</h3></a>
<p>
const func time: <b>truncToDay</b> (in time: aTime)</p><dl><dd>
<p>
Truncate 'aTime' to the beginning of a day.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncToMonth(in_time)"><h3>truncToMonth</h3></a>
<p>
const func time: <b>truncToMonth</b> (in time: aTime)</p><dl><dd>
<p>
Truncate 'aTime' to the beginning of the first day in the month.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="truncToYear(in_time)"><h3>truncToYear</h3></a>
<p>
const func time: <b>truncToYear</b> (in time: aTime)</p><dl><dd>
<p>
Truncate 'aTime' to the beginning of the first day in the year.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the truncated time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="dayOfWeek(in_time)"><h3>dayOfWeek</h3></a>
<p>
const func integer: <b>dayOfWeek</b> (in time: aDate)</p><dl><dd>
<p>
Return the weekday number of 'aDate'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>1 for monday, 2 for tuesday, and so on up to 7 for sunday.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="dayOfYear(in_time)"><h3>dayOfYear</h3></a>
<p>
const func integer: <b>dayOfYear</b> (in time: aDate)</p><dl><dd>
<p>
Return the day number in the year of 'aDate'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>1 for the 1. of january and successive values up to 366.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="weekOfYear(in_var_integer,in_integer)"><h3>weekOfYear</h3></a>
<p>
const func integer: <b>weekOfYear</b> (in var integer: year, in integer: dayOfYear)</p><dl><dd>
<p>
Return the week number of the 'year' for the 'dayOfYear'.
According to ISO 8601: Week number 1 of every year contains the
4. of january. Since 1st to 3rd of january might be in the
previous week there can be also a week number 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a week number from 0 to 53 for weeks belonging to the year         of the given date.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="weekOfYear(in_time)"><h3>weekOfYear</h3></a>
<p>
const func integer: <b>weekOfYear</b> (in time: aDate)</p><dl><dd>
<p>
Return the week number of the year for 'aDate'.
According to ISO 8601: Week number 1 of every year contains the
4. of january. Since 1st to 3rd of january might be in the
previous week there can be also a week number 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a week number from 0 to 53 for weeks belonging to the year         of the given date.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="weekDateYear(in_time)"><h3>weekDateYear</h3></a>
<p>
const func integer: <b>weekDateYear</b> (in time: aDate)</p><dl><dd>
<p>
Return the year of the ISO 8601 week date for 'aDate'.
At the beginning and the end of an Gregorian calendar year there
might be days which belong to a week of the previous or next year.
For example 2005-01-01 is 2004-W53-6 and 2007-12-31 is 2008-W01-1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the year in the range 'pred(aDate.year)' to         'succ(aDate.year)'.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="weekDateWeek(in_time)"><h3>weekDateWeek</h3></a>
<p>
const func integer: <b>weekDateWeek</b> (in time: aDate)</p><dl><dd>
<p>
Return the week number of the ISO 8601 week date for 'aDate'.
At the beginning and the end of an Gregorian calendar year there
might be days which belong to a week of the previous or next year.
For example 2005-01-01 is 2004-W53-6 and 2007-12-31 is 2008-W01-1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the week number in the range 1 to 53.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="toUTC(in_time)"><h3>toUTC</h3></a>
<p>
const func time: <b>toUTC</b> (in time: aTime)</p><dl><dd>
<p>
Convert a time to Coordinated Universal Time (UTC).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the time in UTC.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="setLocalTZ(in_time)"><h3>setLocalTZ</h3></a>
<p>
const func time: <b>setLocalTZ</b> (in time: aTime)</p><dl><dd>
<p>
Sets timeZone and daylightSavingTime for a given time.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the time in the local time zone.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="julianDayNumber(in_time)"><h3>julianDayNumber</h3></a>
<p>
const func integer: <b>julianDayNumber</b> (in time: aDate)</p><dl><dd>
<p>
Compute the julian day number of 'aDate'.
The julian day number is the number of days that have elapsed
since January 1, 4713 BC in the proleptic Julian calendar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the julian day number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="julianDayNumToTime(in_integer)"><h3>julianDayNumToTime</h3></a>
<p>
const func time: <b>julianDayNumToTime</b> (in integer: julianDayNumber)</p><dl><dd>
<p>
Return the time of a 'julianDayNumber'.
The julian day number is the number of days that have elapsed
since January 1, 4713 BC in the proleptic Julian calendar.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the time 0:00:00 at the day with the 'julianDayNumber'.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="timestamp1970(in_time)"><h3>timestamp1970</h3></a>
<p>
const func integer: <b>timestamp1970</b> (in time: aTime)</p><dl><dd>
<p>
Return a time expressed in seconds since the Unix epoch.
The Unix epoch (1970-01-01 00:00:00 UTC) corresponds to 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the seconds since the Unix epoch.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="timestamp1970ToTime(in_integer)"><h3>timestamp1970ToTime</h3></a>
<p>
const func time: <b>timestamp1970ToTime</b> (in integer: timestamp)</p><dl><dd>
<p>
Convert a Unix timestamp into a time from the local time zone.
The timestamp is expressed in seconds since the Unix epoch.
The Unix epoch (1970-01-01 00:00:00 UTC) corresponds to 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the local time that corresponds to the timestamp.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="timestamp1601(in_time)"><h3>timestamp1601</h3></a>
<p>
const func integer: <b>timestamp1601</b> (in time: aTime)</p><dl><dd>
<p>
Return a time expressed as Windows FILETIME.
A FILETIME is expressed in 100-nanosecond intervals since the Windows epoch.
The Windows epoch (1601-01-01 00:00:00 UTC) corresponds to 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the number of 100-nanosecond intervals since the Windows epoch.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="timestamp1601ToTime(in_integer)"><h3>timestamp1601ToTime</h3></a>
<p>
const func time: <b>timestamp1601ToTime</b> (in integer: timestamp)</p><dl><dd>
<p>
Convert a Windows FILETIME into a time from the local time zone.
A FILETIME is expressed in 100-nanosecond intervals since the Windows epoch.
The Windows epoch (1601-01-01 00:00:00 UTC) corresponds to 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the local time that corresponds to the FILETIME.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rand(in_time,in_time)"><h3>rand</h3></a>
<p>
const func time: <b>rand</b> (in time: low, in time: high)</p><dl><dd>
<p>
Compute pseudo-random time in the range [low, high].
The random values are uniform distributed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a random time such that low &lt;= rand(low, high) and         rand(low, high) &lt;= high holds.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The range is empty (low > high holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="time(NOW)"><h3>time</h3></a>
<p>
const func time: <b>time</b> (NOW)</p><dl><dd>
<p>
Determine the current local time.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the current local time.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="time(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)"><h3>time</h3></a>
<p>
const func time: <b>time</b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second)</p><dl><dd>
<p>
Return the specified UTC time.
</p>
</dd>
</dl></div>
<hr />
<div><a name="timeInTimeZone(in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer)"><h3>timeInTimeZone</h3></a>
<p>
const func time: <b>timeInTimeZone</b> (in integer: year, in integer: month, in integer: day,
    in integer: hour, in integer: minute, in integer: second, in integer: timeZone)</p><dl><dd>
<p>
Return the specified time in the specified timeZone.
</p>
</dd>
</dl></div>
<hr />
<div><a name="date(in_integer,in_integer,in_integer)"><h3>date</h3></a>
<p>
const func time: <b>date</b> (in integer: year, in integer: month, in integer: day)</p><dl><dd>
<p>
Return the specified UTC date.
</p>
</dd>
</dl></div>
<hr />
<div><a name="await(ref_time)"><h3>await</h3></a>
<p>
const proc: <b>await</b> (ref time: aTime)</p><dl><dd>
<p>
Wait until 'aTime' is reached
</p>
</dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/tiff.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/tls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
