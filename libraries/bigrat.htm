<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bigrat</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bigrat</big></b></td>
<td align="right"><a class="link" href="../prg/bigrat.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/bigint.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bin32.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigRational">bigRational</a></b></td></tr>
<tr><td width="30"></td><td>Rational numbers represented with <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> numerator and denominator.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="bigRational"><h3>bigRational</h3></a>
<p>
const type: <b>bigRational</b></p><dl><dd>
<p>
Rational numbers represented with <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> numerator and denominator.
The values of the type <i>bigRational</i> are finite and periodical
decimal numbers. BigRational literals do not exist. Although
<i>bigRational</i> operations cannot overflow, it can happen that
there is not enough memory to represent a <i>bigRational</i> value.
In this case the exception MEMORY_ERROR is raised.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigInteger: numerator) <b><a class="link" href="#(in_bigInteger)/(in_bigInteger)">/</a></b> (in bigInteger: denominator)</td></tr>
<tr><td width="30"></td><td>Create a <i>bigRational</i> number from its numerator and denominator.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#+(in_bigRational)">+</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Plus sign for <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#-(in_bigRational)">-</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Minus sign, negate a <i>bigRational</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: summand1) <b><a class="link" href="#(in_bigRational)+(in_bigRational)">+</a></b> (in bigRational: summand2)</td></tr>
<tr><td width="30"></td><td>Add two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: minuend) <b><a class="link" href="#(in_bigRational)-(in_bigRational)">-</a></b> (in bigRational: subtrahend)</td></tr>
<tr><td width="30"></td><td>Compute the subtraction of two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: factor1) <b><a class="link" href="#(in_bigRational)*(in_bigRational)">*</a></b> (in bigRational: factor2)</td></tr>
<tr><td width="30"></td><td>Multiply two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: dividend) <b><a class="link" href="#(in_bigRational)/(in_bigRational)">/</a></b> (in bigRational: divisor)</td></tr>
<tr><td width="30"></td><td>Compute the division of two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigRational: number) <b><a class="link" href="#(inout_bigRational)+:=(in_bigRational)">+:=</a></b> (in bigRational: delta)</td></tr>
<tr><td width="30"></td><td>Increment a <i>bigRational</i> number by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigRational: number) <b><a class="link" href="#(inout_bigRational)-:=(in_bigRational)">-:=</a></b> (in bigRational: delta)</td></tr>
<tr><td width="30"></td><td>Decrement a <i>bigRational</i> number by a delta.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigRational: number) <b><a class="link" href="#(inout_bigRational)*:=(in_bigRational)">*:=</a></b> (in bigRational: factor)</td></tr>
<tr><td width="30"></td><td>Multiply a <i>bigRational</i> number by a factor and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout bigRational: number) <b><a class="link" href="#(inout_bigRational)/:=(in_bigRational)">/:=</a></b> (in bigRational: divisor)</td></tr>
<tr><td width="30"></td><td>Divide a <i>bigRational</i> number by a divisor and assign the result back to number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: base) <b><a class="link" href="#(in_bigRational)**(in_integer)">**</a></b> (in integer: exponent)</td></tr>
<tr><td width="30"></td><td>Compute the exponentiation of a <i>bigRational</i> base with an integer exponent.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number1) <b><a class="link" href="#(in_bigRational)=(in_bigRational)">=</a></b> (in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>bigRational</i> numbers are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number1) <b><a class="link" href="#(in_bigRational)&lt;>(in_bigRational)">&lt;></a></b> (in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Check if two <i>bigRational</i> numbers are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number1) <b><a class="link" href="#(in_bigRational)&lt;(in_bigRational)">&lt;</a></b> (in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is less than number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number1) <b><a class="link" href="#(in_bigRational)>(in_bigRational)">></a></b> (in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is greater than number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number1) <b><a class="link" href="#(in_bigRational)&lt;=(in_bigRational)">&lt;=</a></b> (in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is less than or equal to number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number1) <b><a class="link" href="#(in_bigRational)>=(in_bigRational)">>=</a></b> (in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Check if number1 is greater than or equal to number2.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bigRational) <b><a class="link" href="#(attr_bigRational)conv(in_integer)">conv</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Return the conversion of an integer to a <i>bigRational</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bigRational) <b><a class="link" href="#(attr_bigRational)conv(in_bigInteger)">conv</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Return the conversion of a bigInteger to a <i>bigRational</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number) <b><a class="link" href="#(in_bigRational)digits(in_integer)">digits</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigRational</i> number to a <a class="link" href="string.htm" title="string">string</a> in decimal fixed point notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bigRational: number) <b><a class="link" href="#(in_bigRational)sci(in_integer)">sci</a></b> (in integer: precision)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigRational</i> number to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bigRational) <b><a class="link" href="#(attr_bigRational)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigRational</i> number.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_bigRational,in_bigRational)">compare</a></b> (in bigRational: number1, in bigRational: number2)</td></tr>
<tr><td width="30"></td><td>Compare two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_bigRational)">hashCode</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a <i>bigRational</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rat(in_bigInteger)">rat</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Return the conversion of a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> to a <i>bigRational</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigRational(in_integer)">bigRational</a></b> (in integer: number)</td></tr>
<tr><td width="30"></td><td>Return the conversion of an integer to a <i>bigRational</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigRational(in_bigInteger)">bigRational</a></b> (in bigInteger: number)</td></tr>
<tr><td width="30"></td><td>Return the conversion of a bigInteger to a <i>bigRational</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#abs(in_bigRational)">abs</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Compute the absolute value of a <i>bigRational</i> number.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#floor(in_bigRational)">floor</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Return a <i>bigRational</i> number truncated towards negative infinity.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ceil(in_bigRational)">ceil</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Return a <i>bigRational</i> number rounded up towards positive infinity.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#trunc(in_bigRational)">trunc</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Return a <i>bigRational</i> number truncated towards zero.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#round(in_bigRational)">round</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Round a <i>bigRational</i> number to the nearest <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#round10(in_bigRational,in_integer)">round10</a></b> (in bigRational: number, in integer: precision)</td></tr>
<tr><td width="30"></td><td>Round a <i>bigRational</i> number with a decimal <i>precision</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#min(in_bigRational,in_bigRational)">min</a></b> (in bigRational: value1, in bigRational: value2)</td></tr>
<tr><td width="30"></td><td>Determine the minimum of two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#max(in_bigRational,in_bigRational)">max</a></b> (in bigRational: value1, in bigRational: value2)</td></tr>
<tr><td width="30"></td><td>Determine the maximum of two <i>bigRational</i> numbers.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_bigRational)">str</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigRational</i> number to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_bigRational)">literal</a></b> (in bigRational: number)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bigRational</i> number to a <i>bigRational</i> literal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigRational</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bigRational(in_var_string)">bigRational</a></b> (in var string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigRational</i> number.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(in_bigInteger)/(in_bigInteger)"><h3>/</h3></a>
<p>
const func bigRational: (in bigInteger: numerator) <b>/</b> (in bigInteger: denominator)</p><dl><dd>
<p>
Create a <i>bigRational</i> number from its numerator and denominator.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created <i>bigRational</i> value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="+(in_bigRational)"><h3>+</h3></a>
<p>
const func bigRational: <b>+</b> (in bigRational: number)</p><dl><dd>
<p>
Plus sign for <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>its operand unchanged.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="-(in_bigRational)"><h3>-</h3></a>
<p>
const func bigRational: <b>-</b> (in bigRational: number)</p><dl><dd>
<p>
Minus sign, negate a <i>bigRational</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the negated value of the number.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)+(in_bigRational)"><h3>+</h3></a>
<p>
const func bigRational: (in bigRational: summand1) <b>+</b> (in bigRational: summand2)</p><dl><dd>
<p>
Add two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sum of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)-(in_bigRational)"><h3>-</h3></a>
<p>
const func bigRational: (in bigRational: minuend) <b>-</b> (in bigRational: subtrahend)</p><dl><dd>
<p>
Compute the subtraction of two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the difference of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)*(in_bigRational)"><h3>*</h3></a>
<p>
const func bigRational: (in bigRational: factor1) <b>*</b> (in bigRational: factor2)</p><dl><dd>
<p>
Multiply two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the product of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)/(in_bigRational)"><h3>/</h3></a>
<p>
const func bigRational: (in bigRational: dividend) <b>/</b> (in bigRational: divisor)</p><dl><dd>
<p>
Compute the division of two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the quotient of the division.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>NUMERIC_ERROR</tt> - If a division by zero occurs.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_bigRational)+:=(in_bigRational)"><h3>+:=</h3></a>
<p>
const proc: (inout bigRational: number) <b>+:=</b> (in bigRational: delta)</p><dl><dd>
<p>
Increment a <i>bigRational</i> number by a delta.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigRational)-:=(in_bigRational)"><h3>-:=</h3></a>
<p>
const proc: (inout bigRational: number) <b>-:=</b> (in bigRational: delta)</p><dl><dd>
<p>
Decrement a <i>bigRational</i> number by a delta.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigRational)*:=(in_bigRational)"><h3>*:=</h3></a>
<p>
const proc: (inout bigRational: number) <b>*:=</b> (in bigRational: factor)</p><dl><dd>
<p>
Multiply a <i>bigRational</i> number by a factor and assign the result back to number.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_bigRational)/:=(in_bigRational)"><h3>/:=</h3></a>
<p>
const proc: (inout bigRational: number) <b>/:=</b> (in bigRational: divisor)</p><dl><dd>
<p>
Divide a <i>bigRational</i> number by a divisor and assign the result back to number.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)**(in_integer)"><h3>**</h3></a>
<p>
const func bigRational: (in bigRational: base) <b>**</b> (in integer: exponent)</p><dl><dd>
<p>
Compute the exponentiation of a <i>bigRational</i> base with an integer exponent.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the exponentiation.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)=(in_bigRational)"><h3>=</h3></a>
<p>
const func boolean: (in bigRational: number1) <b>=</b> (in bigRational: number2)</p><dl><dd>
<p>
Check if two <i>bigRational</i> numbers are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both numbers are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)&lt;>(in_bigRational)"><h3>&lt;></h3></a>
<p>
const func boolean: (in bigRational: number1) <b>&lt;></b> (in bigRational: number2)</p><dl><dd>
<p>
Check if two <i>bigRational</i> numbers are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both numbers are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)&lt;(in_bigRational)"><h3>&lt;</h3></a>
<p>
const func boolean: (in bigRational: number1) <b>&lt;</b> (in bigRational: number2)</p><dl><dd>
<p>
Check if number1 is less than number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is less than number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)>(in_bigRational)"><h3>></h3></a>
<p>
const func boolean: (in bigRational: number1) <b>></b> (in bigRational: number2)</p><dl><dd>
<p>
Check if number1 is greater than number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is greater than number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)&lt;=(in_bigRational)"><h3>&lt;=</h3></a>
<p>
const func boolean: (in bigRational: number1) <b>&lt;=</b> (in bigRational: number2)</p><dl><dd>
<p>
Check if number1 is less than or equal to number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is less than or equal to number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)>=(in_bigRational)"><h3>>=</h3></a>
<p>
const func boolean: (in bigRational: number1) <b>>=</b> (in bigRational: number2)</p><dl><dd>
<p>
Check if number1 is greater than or equal to number2.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if number1 is greater than or equal to number2,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bigRational)conv(in_integer)"><h3>conv</h3></a>
<p>
const func bigRational: (attr bigRational) <b>conv</b> (in integer: number)</p><dl><dd>
<p>
Return the conversion of an integer to a <i>bigRational</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_bigRational)conv(in_bigInteger)"><h3>conv</h3></a>
<p>
const func bigRational: (attr bigRational) <b>conv</b> (in bigInteger: number)</p><dl><dd>
<p>
Return the conversion of a bigInteger to a <i>bigRational</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)digits(in_integer)"><h3>digits</h3></a>
<p>
const func string: (in bigRational: number) <b>digits</b> (in integer: precision)</p><dl><dd>
<p>
Convert a <i>bigRational</i> number to a <a class="link" href="string.htm" title="string">string</a> in decimal fixed point notation.
The number is rounded to the specified number of digits (<i>precision</i>).
Halfway cases are rounded away from zero. Except for a <i>precision</i> of
zero the representation has a decimal point and at least one digit
before and after the decimal point. Negative numbers are preceded by
a minus sign (e.g.: "-1.25"). If all digits in the result are 0 a
possible negative sign is omitted.
</p>
<pre class="indent">
1_/64_ digits 7     returns "0.0156250"
1_/64_ digits 4     returns "0.0156"
1_/64_ digits 2     returns "0.02"
355_/113_ digits 6  returns "3.141593"
22_/7_ digits 0     returns "3"
-1_/2_ digits 1     returns "-1"
1_/0_ digits 5      returns "Infinity"
-1_/0_ digits 6     returns "-Infinity"
0_/0_ digits 7      returns "NaN"
-1_/2048_ digits 3  returns "0.000"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>precision</tt> - Number of digits after the decimal point.        If the <i>precision</i> is zero the decimal point is omitted.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bigRational)sci(in_integer)"><h3>sci</h3></a>
<p>
const func string: (in bigRational: number) <b>sci</b> (in integer: precision)</p><dl><dd>
<p>
Convert a <i>bigRational</i> number to a <a class="link" href="string.htm" title="string">string</a> in scientific notation.
Scientific notation uses a decimal significand and a decimal exponent.
The significand has an optional sign and exactly one digit before the
decimal point. The fractional part of the significand is rounded
to the specified number of digits (<i>precision</i>). Halfway cases are
rounded away from zero. The fractional part is followed by the
letter e and an exponent, which is always signed. The value zero is
never written with a negative sign.
</p>
<pre class="indent">
1_/64_ sci 4     returns "1.5625e-2"
1_/64_ sci 3     returns "1.563e-2"
1_/64_ sci 2     returns "1.56e-2"
355_/113_ sci 6  returns "3.141593e+0"
22_/7_ sci 0     returns "3e+0"
-1_/2_ sci 1     returns "-5.0e-1"
1_/0_ sci 5      returns "Infinity"
-1_/0_ sci 6     returns "-Infinity"
0_/0_ sci 7      returns "NaN"
-1_/2048_ sci 3  returns "-4.883e-4"
-0_/1_ sci 2     returns "0.00e+0"
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>precision</tt> - Number of digits after the decimal point.        If the <i>precision</i> is zero the decimal point is omitted.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the <i>precision</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(attr_bigRational)parse(in_string)"><h3>parse</h3></a>
<p>
const func bigRational: (attr bigRational) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigRational</i> number.
The <a class="link" href="string.htm" title="string">string</a> must contain a fraction (e.g.: "3/5") or a decimal number
(e.g.: "1.25"). In a fraction numerator and denominator are separated
with a slash (/). A decimal number can have repeating decimals,
which are enclosed in parentheses ("e.g.: "0.(3)"). The repeating
decimals are not allowed to start before the decimal point.
</p>
<pre class="indent">
bigRational parse "3/5"         returns   3_ /   5_
bigRational parse "1.25"        returns   5_ /   4_
bigRational parse "0.(3)"       returns   1_ /   3_
bigRational parse "1.23(45)"    returns 679_ / 550_
bigRational parse "3.(142857)"  returns  22_ /   7_
bigRational parse "0.(846153)"  returns  11_ /  13_
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigRational</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If stri contains not a valid <i>bigRational</i> value.</dd>
</dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="compare(in_bigRational,in_bigRational)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in bigRational: number1, in bigRational: number2)</p><dl><dd>
<p>
Compare two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_bigRational)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in bigRational: number)</p><dl><dd>
<p>
Compute the hash value of a <i>bigRational</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="rat(in_bigInteger)"><h3>rat</h3></a>
<p>
const func bigRational: <b>rat</b> (in bigInteger: number)</p><dl><dd>
<p>
Return the conversion of a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> to a <i>bigRational</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bigRational(in_integer)"><h3>bigRational</h3></a>
<p>
const func bigRational: <b>bigRational</b> (in integer: number)</p><dl><dd>
<p>
Return the conversion of an integer to a <i>bigRational</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bigRational(in_bigInteger)"><h3>bigRational</h3></a>
<p>
const func bigRational: <b>bigRational</b> (in bigInteger: number)</p><dl><dd>
<p>
Return the conversion of a bigInteger to a <i>bigRational</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="abs(in_bigRational)"><h3>abs</h3></a>
<p>
const func bigRational: <b>abs</b> (in bigRational: number)</p><dl><dd>
<p>
Compute the absolute value of a <i>bigRational</i> number.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the absolute value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="floor(in_bigRational)"><h3>floor</h3></a>
<p>
const func bigInteger: <b>floor</b> (in bigRational: number)</p><dl><dd>
<p>
Return a <i>bigRational</i> number truncated towards negative infinity.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ceil(in_bigRational)"><h3>ceil</h3></a>
<p>
const func bigInteger: <b>ceil</b> (in bigRational: number)</p><dl><dd>
<p>
Return a <i>bigRational</i> number rounded up towards positive infinity.
</p>
</dd>
</dl></div>
<hr />
<div><a name="trunc(in_bigRational)"><h3>trunc</h3></a>
<p>
const func bigInteger: <b>trunc</b> (in bigRational: number)</p><dl><dd>
<p>
Return a <i>bigRational</i> number truncated towards zero.
</p>
</dd>
</dl></div>
<hr />
<div><a name="round(in_bigRational)"><h3>round</h3></a>
<p>
const func bigInteger: <b>round</b> (in bigRational: number)</p><dl><dd>
<p>
Round a <i>bigRational</i> number to the nearest <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.
Halfway cases are rounded away from zero.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the rounded value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="round10(in_bigRational,in_integer)"><h3>round10</h3></a>
<p>
const func bigRational: <b>round10</b> (in bigRational: number, in integer: precision)</p><dl><dd>
<p>
Round a <i>bigRational</i> number with a decimal <i>precision</i>.
Halfway cases are rounded away from zero.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the rounded value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="min(in_bigRational,in_bigRational)"><h3>min</h3></a>
<p>
const func bigRational: <b>min</b> (in bigRational: value1, in bigRational: value2)</p><dl><dd>
<p>
Determine the minimum of two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the minimum of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="max(in_bigRational,in_bigRational)"><h3>max</h3></a>
<p>
const func bigRational: <b>max</b> (in bigRational: value1, in bigRational: value2)</p><dl><dd>
<p>
Determine the maximum of two <i>bigRational</i> numbers.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the maximum of the two numbers.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="str(in_bigRational)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in bigRational: number)</p><dl><dd>
<p>
Convert a <i>bigRational</i> number to a <a class="link" href="string.htm" title="string">string</a>.
The number is converted to a <a class="link" href="string.htm" title="string">string</a> with a decimal representation
(e.g.: "1.25"). The representation has a decimal point and at
least one digit before and after the decimal point. Negative
numbers are preceded by a minus sign (e.g.: "-1.25"). The
decimal number can have repeating decimals, which are enclosed
in parentheses ("e.g.: "0.(3)"). The repeating decimals will
not start before the decimal point.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string result of the conversion.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_bigRational)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in bigRational: number)</p><dl><dd>
<p>
Convert a <i>bigRational</i> number to a <i>bigRational</i> literal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigRational</i> literal.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bigRational(in_var_string)"><h3>bigRational</h3></a>
<p>
const func bigRational: <b>bigRational</b> (in var string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bigRational</i> number.
The <a class="link" href="string.htm" title="string">string</a> must contain a fraction (e.g.: "3/5") or a decimal number
(e.g.: "1.25"). In a fraction numerator and denominator are separated
with a slash (/). A decimal number can have repeating decimals,
which are enclosed in parentheses ("e.g.: "0.(3)"). The repeating
decimals are not allowed to start before the decimal point.
</p>
<pre class="indent">
bigRational("3/5")         returns   3_ /   5_
bigRational("1.25")        returns   5_ /   4_
bigRational("0.(3)")       returns   1_ /   3_
bigRational("1.23(45)")    returns 679_ / 550_
bigRational("3.(142857)")  returns  22_ /   7_
bigRational("0.(846153)")  returns  11_ /  13_
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bigRational</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If stri contains not a valid <i>bigRational</i> value.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/bigint.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bin32.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
