<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Ref_list</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Ref_list</big></b></td>
<td align="right"><a class="link" href="../prg/ref_list.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/reference.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/rpm.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ref_list">ref_list</a></b></td></tr>
<tr><td width="30"></td><td>Type to describe a list of <i>reference</i> objects.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="ref_list"><h3>ref_list</h3></a>
<p>
const type: <b>ref_list</b></p><dl><dd>
<p>
Type to describe a list of <i>reference</i> objects.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr ref_list) <b><a class="link" href="#(attr_ref_list)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>ref_list</i> (ref_list.EMPTY).</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout ref_list: dest) <b><a class="link" href="#(inout_ref_list)&amp;:=(in_ref_list)">&amp;:=</a></b> (in ref_list: extension)</td></tr>
<tr><td width="30"></td><td>Append the ref_list <i>extension</i> to <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(inout ref_list: dest) <b><a class="link" href="#(inout_ref_list)@:=_[(in_integer)](in_reference)">@:= [</a></b> (in integer: position) ] (in reference: source)</td></tr>
<tr><td width="30"></td><td>Assign reference <i>source</i> to the <i>position</i> of the <i>dest</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: refList1) <b><a class="link" href="#(in_ref_list)=(in_ref_list)">=</a></b> (in ref_list: refList2)</td></tr>
<tr><td width="30"></td><td>Check if two ref_lists are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: refList1) <b><a class="link" href="#(in_ref_list)&lt;>(in_ref_list)">&lt;></a></b> (in ref_list: refList2)</td></tr>
<tr><td width="30"></td><td>Check if two ref_lists are not equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">reference</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: aRefList) <b><a class="link" href="#(in_ref_list)[(in_integer)]">[</a></b> (in integer: index) ]</td></tr>
<tr><td width="30"></td><td>Access one element from the <i>ref_list</i> <i>aRefList</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: aRefList) <b><a class="link" href="#(in_ref_list)[(in_integer).._]">[</a></b> (in integer: start) .. ]</td></tr>
<tr><td width="30"></td><td>Get a sublist from <i>aRefList</i> beginning at a <i>start</i> position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: aRefList) <b><a class="link" href="#(in_ref_list)[_..(in_integer)]">[ ..</a></b> (in integer: stop) ]</td></tr>
<tr><td width="30"></td><td>Get a sublist from <i>aRefList</i> ending at a <i>stop</i> position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: aRefList) <b><a class="link" href="#(in_ref_list)[(in_integer)..(in_integer)]">[</a></b> (in integer: start) ..
                                               (in integer: stop) ]</td></tr>
<tr><td width="30"></td><td>Get a sublist from a <i>start</i> position to a <i>stop</i> position.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ref_list: refList1) <b><a class="link" href="#(in_ref_list)&amp;(in_ref_list)">&amp;</a></b> (in ref_list: refList2)</td></tr>
<tr><td width="30"></td><td>Concatenate two ref_lists.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in reference: element) <b><a class="link" href="#(in_reference)in(in_ref_list)">in</a></b> (in ref_list: aRefList)</td></tr>
<tr><td width="30"></td><td>Membership test for a <i>ref_list</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in reference: element) <b><a class="link" href="#(in_reference)not_in(in_ref_list)">not in</a></b> (in ref_list: aRefList)</td></tr>
<tr><td width="30"></td><td>Negated membership test for a <i>ref_list</i>.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">ref_list</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#make_list(in_reference)">make_list</a></b> (in reference: element)</td></tr>
<tr><td width="30"></td><td>Create ref_list with the given <i>element</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pos(in_ref_list,in_reference)">pos</a></b> (in ref_list: main, in reference: searched)</td></tr>
<tr><td width="30"></td><td>Search for the first occurrence of <i>searched</i> in <i>main</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pos(in_ref_list,in_reference,in_integer)">pos</a></b> (in ref_list: main, in reference: searched,
                         in integer: start)</td></tr>
<tr><td width="30"></td><td>Search for <i>searched</i> in <i>main</i> at or after <i>start</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(in_ref_list)">length</a></b> (in ref_list: aRefList)</td></tr>
<tr><td width="30"></td><td>Determine the length of a <i>ref_list</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_reference)range(in_ref_list)do(in_proc)end_for">for</a></b> (inout reference: forVar) range (in ref_list: aRefList) do
              (in proc: statement)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop where <i>forVar</i> loops over the elements of <i>aRefList</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">for</a></b> (inout reference: forVar) range (in ref_list: aRefList) until (ref func boolean: condition) do
              (in proc: statement)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop where <i>forVar</i> loops over the elements of <i>aRefList</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_ref_list)._value"><h3>. value</h3></a>
<p>
const ref_list: (attr ref_list) <b>. value</b></p><dl><dd>
<p>
Default value of <i>ref_list</i> (ref_list.EMPTY).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(inout_ref_list)&amp;:=(in_ref_list)"><h3>&amp;:=</h3></a>
<p>
const proc: (inout ref_list: dest) <b>&amp;:=</b> (in ref_list: extension)</p><dl><dd>
<p>
Append the ref_list <i>extension</i> to <i>dest</i>.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory for the concatenated            ref_list.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(inout_ref_list)@:=_[(in_integer)](in_reference)"><h3>@:= [</h3></a>
<p>
const proc: (inout ref_list: dest) <b>@:= [</b> (in integer: position) ] (in reference: source)</p><dl><dd>
<p>
Assign reference <i>source</i> to the <i>position</i> of the <i>dest</i>.
</p>
<pre class="indent">
A @:= [B] C;
</pre>
<p>
is equivalent to
</p>
<pre class="indent">
A := A[..pred(B)] &amp; make_list(C) &amp; A[succ(B)..];
</pre>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If <i>position</i> is negative or zero, or            an element beyond <i>dest</i> would be overwritten            (<i>position</i> > length(<i>dest</i>) holds).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)=(in_ref_list)"><h3>=</h3></a>
<p>
const func boolean: (in ref_list: refList1) <b>=</b> (in ref_list: refList2)</p><dl><dd>
<p>
Check if two ref_lists are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both ref_lists are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)&lt;>(in_ref_list)"><h3>&lt;></h3></a>
<p>
const func boolean: (in ref_list: refList1) <b>&lt;></b> (in ref_list: refList2)</p><dl><dd>
<p>
Check if two ref_lists are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both ref_lists are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)[(in_integer)]"><h3>[</h3></a>
<p>
const func reference: (in ref_list: aRefList) <b>[</b> (in integer: index) ]</p><dl><dd>
<p>
Access one element from the <i>ref_list</i> <i>aRefList</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the element with the specified <i>index</i> from <i>aRefList</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If the index is less than 1 or            greater than the length of the <i>ref_list</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)[(in_integer).._]"><h3>[</h3></a>
<p>
const func ref_list: (in ref_list: aRefList) <b>[</b> (in integer: start) .. ]</p><dl><dd>
<p>
Get a sublist from <i>aRefList</i> beginning at a <i>start</i> position.
The first element in a <i>ref_list</i> has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the sublist beginning at the <i>start</i> position.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)[_..(in_integer)]"><h3>[ ..</h3></a>
<p>
const func ref_list: (in ref_list: aRefList) <b>[ ..</b> (in integer: stop) ]</p><dl><dd>
<p>
Get a sublist from <i>aRefList</i> ending at a <i>stop</i> position.
The first element in a <i>ref_list</i> has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring ending at the <i>stop</i> position.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)[(in_integer)..(in_integer)]"><h3>[</h3></a>
<p>
const func ref_list: (in ref_list: aRefList) <b>[</b> (in integer: start) ..
                                               (in integer: stop) ]</p><dl><dd>
<p>
Get a sublist from a <i>start</i> position to a <i>stop</i> position.
The first element in a <i>ref_list</i> has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the substring from position start to stop.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_ref_list)&amp;(in_ref_list)"><h3>&amp;</h3></a>
<p>
const func ref_list: (in ref_list: refList1) <b>&amp;</b> (in ref_list: refList2)</p><dl><dd>
<p>
Concatenate two ref_lists.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the result of the concatenation.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_reference)in(in_ref_list)"><h3>in</h3></a>
<p>
const func boolean: (in reference: element) <b>in</b> (in ref_list: aRefList)</p><dl><dd>
<p>
Membership test for a <i>ref_list</i>.
Determine if <i>aRefList</i> contains <i>element</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>element</i> is a member of  <i>aRefList</i>,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_reference)not_in(in_ref_list)"><h3>not in</h3></a>
<p>
const func boolean: (in reference: element) <b>not in</b> (in ref_list: aRefList)</p><dl><dd>
<p>
Negated membership test for a <i>ref_list</i>.
Determine if <i>aRefList</i> does not contain <i>element</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if <i>element</i> is a member of  <i>aRefList</i>,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="make_list(in_reference)"><h3>make_list</h3></a>
<p>
const func ref_list: <b>make_list</b> (in reference: element)</p><dl><dd>
<p>
Create ref_list with the given <i>element</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a <i>ref_list</i> of length 1 with the given element.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="pos(in_ref_list,in_reference)"><h3>pos</h3></a>
<p>
const func integer: <b>pos</b> (in ref_list: main, in reference: searched)</p><dl><dd>
<p>
Search for the first occurrence of <i>searched</i> in <i>main</i>.
The first element in a <i>ref_list</i> has the position 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>main</i>         does not contain <i>searched</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pos(in_ref_list,in_reference,in_integer)"><h3>pos</h3></a>
<p>
const func integer: <b>pos</b> (in ref_list: main, in reference: searched,
                         in integer: start)</p><dl><dd>
<p>
Search for <i>searched</i> in <i>main</i> at or after <i>start</i>.
The search begins at position <i>start</i> and proceeds to the
end. The first element in a <i>ref_list</i> has the position 1.
The pos function is designed to allow loops like:
</p>
<pre class="indent">
index := pos(aList, aReference);
while index &lt;> 0 do
  # Do something with index
  index := pos(aList, aReference, succ(index));
end while;
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the position of <i>searched</i> or 0 if <i>main</i>         does not contain <i>searched</i> at or after <i>start</i>.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - <i>start</i> &lt;= 0 holds.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="length(in_ref_list)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (in ref_list: aRefList)</p><dl><dd>
<p>
Determine the length of a <i>ref_list</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the <i>ref_list</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="for(inout_reference)range(in_ref_list)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout reference: forVar) range (in ref_list: aRefList) do
              (in proc: statement)
            end for</p><dl><dd>
<p>
For-loop where <i>forVar</i> loops over the elements of <i>aRefList</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout reference: forVar) range (in ref_list: aRefList) until (ref func boolean: condition) do
              (in proc: statement)
            end for</p><dl><dd>
<p>
For-loop where <i>forVar</i> loops over the elements of <i>aRefList</i>.
Additionally a <i>condition</i> is checked before the statements in
the loop body are executed.
</p>
</dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/reference.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/rpm.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
