<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Draw</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Draw</big></b></td>
<td align="right"><a class="link" href="../prg/draw.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/dir.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/duration.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">pixel</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#colorPixel(in_color)">colorPixel</a></b> (in color: col)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="color.htm" title="color">color</a> to a pixel.</td></tr></table></td></tr>
<tr><td align="right" valign="top">color</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pixelToColor(in_pixel)">pixelToColor</a></b> (in pixel: pix)</td></tr>
<tr><td width="30"></td><td>Convert a pixel to a <a class="link" href="color.htm" title="color">color</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#screen(in_integer,in_integer)">screen</a></b> (in integer: width, in integer: height)</td></tr>
<tr><td width="30"></td><td>Open the default window (<i>curr_win</i>) with the given <i>width</i> and <i>height</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#point(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_color)">point</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a point with the color <i>col</i> to the window <i>win</i> at the</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#point(in_integer,in_integer,in_color)">point</a></b> (in integer: x, in integer: y, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a point with the color <i>col</i> to the current window <i>curr_win</i></td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#line(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">line</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: delta_x, in integer: delta_y, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a line with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#line(in_integer,in_integer,in_integer,in_integer,in_color)">line</a></b> (in integer: x, in integer: y,
    in integer: delta_x, in integer: delta_y, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a line with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lineTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">lineTo</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a line with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lineTo(in_integer,in_integer,in_integer,in_integer,in_color)">lineTo</a></b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a line with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lineToAngle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_color)">lineToAngle</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: length, in float: angle, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a line with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#lineToAngle(in_integer,in_integer,in_integer,in_float,in_color)">lineToAngle</a></b> (in integer: x, in integer: y,
    in integer: length, in float: angle, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a line with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rect(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">rect</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: width, in integer: height, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled rectangle with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rect(in_integer,in_integer,in_integer,in_integer,in_color)">rect</a></b> (in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled rectangle with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rectTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">rectTo</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled rectangle with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rectTo(in_integer,in_integer,in_integer,in_integer,in_color)">rectTo</a></b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled rectangle with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#box(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">box</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an empty rectangle with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#box(in_integer,in_integer,in_integer,in_integer,in_color)">box</a></b> (in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an empty rectangle with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#boxTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">boxTo</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an empty rectangle with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#boxTo(in_integer,in_integer,in_integer,in_integer,in_color)">boxTo</a></b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an empty rectangle with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#circle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_color)">circle</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a circle with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#circle(in_integer,in_integer,in_integer,in_color)">circle</a></b> (in integer: x, in integer: y, in integer: radius, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a circle with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fcircle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_color)">fcircle</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled circle with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fcircle(in_integer,in_integer,in_integer,in_color)">fcircle</a></b> (in integer: x, in integer: y, in integer: radius, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled circle with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arc(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_float,in_color)">arc</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an arc with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arc(in_integer,in_integer,in_integer,in_float,in_float,in_color)">arc</a></b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an arc with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arc(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_float,in_integer,in_color)">arc</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in integer: width,
    in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an arc with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#arc(in_integer,in_integer,in_integer,in_float,in_float,in_integer,in_color)">arc</a></b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in integer: width,
    in color: col)</td></tr>
<tr><td width="30"></td><td>Draws an arc with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pieslice(in_integer,in_integer,in_integer,in_float,in_float,in_color)">pieslice</a></b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled sector with color <i>col</i> to <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clear(inout_PRIMITIVE_WINDOW,in_color)">clear</a></b> (inout PRIMITIVE_WINDOW: win, in color: col)</td></tr>
<tr><td width="30"></td><td>Clears the window <i>win</i> with the color <i>col</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clear(inout_PRIMITIVE_WINDOW)">clear</a></b> (inout PRIMITIVE_WINDOW: win)</td></tr>
<tr><td width="30"></td><td>Clears the window <i>win</i> with the color black.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clear(in_color)">clear</a></b> (in color: col)</td></tr>
<tr><td width="30"></td><td>Clears the current window <i>curr_win</i> with the color <i>col</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#polyLine(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_pointList,in_color)">polyLine</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in pointList: points, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws lines with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#polyLine(in_integer,in_integer,in_pointList,in_color)">polyLine</a></b> (in integer: x, in integer: y, in pointList: points, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws lines with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fpolyLine(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_pointList,in_color)">fpolyLine</a></b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in pointList: points, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled polygon with the color <i>col</i> to the window <i>win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fpolyLine(in_integer,in_integer,in_pointList,in_color)">fpolyLine</a></b> (in integer: x, in integer: y, in pointList: points, in color: col)</td></tr>
<tr><td width="30"></td><td>Draws a filled polygon with the color <i>col</i> to the current window <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#put(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_PRIMITIVE_WINDOW)">put</a></b> (inout PRIMITIVE_WINDOW: destWindow, in integer: xDest,
    in integer: yDest, in PRIMITIVE_WINDOW: pixmap)</td></tr>
<tr><td width="30"></td><td>Put <i>pixmap</i> to the given position at <i>destWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#put(in_integer,in_integer,in_PRIMITIVE_WINDOW)">put</a></b> (in integer: xDest, in integer: yDest,
    in PRIMITIVE_WINDOW: pixmap)</td></tr>
<tr><td width="30"></td><td>Put <i>pixmap</i> to the given position at the current window 'curr_win'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#put(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_PRIMITIVE_WINDOW)">put</a></b> (inout PRIMITIVE_WINDOW: destWindow, in integer: xDest,
    in integer: yDest, in integer: width, in integer: height,
    in PRIMITIVE_WINDOW: pixmap)</td></tr>
<tr><td width="30"></td><td>Put a scaled <i>pixmap</i> to the given rectangle at <i>destWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#newPixmap(in_integer,in_integer)">newPixmap</a></b> (in integer: width, in integer: height)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap with the given <i>width</i> and <i>height</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer)">getPixmap</a></b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap with the given <i>width</i> and <i>height</i> from <i>sourceWin</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixmap(in_integer,in_integer,in_integer,in_integer)">getPixmap</a></b> (in integer: left, in integer: upper,
    in integer: width, in integer: height)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap with the given <i>width</i> and <i>height</i> from <i>curr_win</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixmap(in_PRIMITIVE_WINDOW)">getPixmap</a></b> (in PRIMITIVE_WINDOW: sourceWin)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap with the contents of <i>sourceWin</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)">getPixmap</a></b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height,
    in color: background)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap with the given <i>width</i> and <i>height</i> from <i>sourceWin</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_color)">getPixmap</a></b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height,
    in integer: resultWidth, in integer: resultHeight, in color: background)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap with the given <i>resultWidth</i> and <i>resultHeight</i> from <i>sourceWin</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixmap(ref_array_array_pixel)">getPixmap</a></b> (ref array array pixel: image)</td></tr>
<tr><td width="30"></td><td>Create a new pixmap from a two-dimensional array of pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array array pixel</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixelArray(in_PRIMITIVE_WINDOW)">getPixelArray</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Get a two-dimensional array of pixels from <i>aWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setTransparentColor(in_PRIMITIVE_WINDOW,in_color)">setTransparentColor</a></b> (in PRIMITIVE_WINDOW: pixmap, in color: col)</td></tr>
<tr><td width="30"></td><td>Sets the transparent color of a pixmap.</td></tr></table></td></tr>
<tr><td align="right" valign="top">color</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getPixelColor(in_PRIMITIVE_WINDOW,in_integer,in_integer)">getPixelColor</a></b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: x, in integer: y)</td></tr>
<tr><td width="30"></td><td>Retrieve the color at pixel position (<i>x</i>, <i>y</i>) from <i>aWindow</i>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="colorPixel(in_color)"><h3>colorPixel</h3></a>
<p>
const func pixel: <b>colorPixel</b> (in color: col)</p><dl><dd>
<p>
Convert a <a class="link" href="color.htm" title="color">color</a> to a pixel.
</p>
</dd>
</dl></div>
<hr />
<div><a name="pixelToColor(in_pixel)"><h3>pixelToColor</h3></a>
<p>
const func color: <b>pixelToColor</b> (in pixel: pix)</p><dl><dd>
<p>
Convert a pixel to a <a class="link" href="color.htm" title="color">color</a>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="screen(in_integer,in_integer)"><h3>screen</h3></a>
<p>
const proc: <b>screen</b> (in integer: width, in integer: height)</p><dl><dd>
<p>
Open the default window (<i>curr_win</i>) with the given <i>width</i> and <i>height</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="point(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_color)"><h3>point</h3></a>
<p>
const proc: <b>point</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in color: col)</p><dl><dd>
<p>
Draws a point with the color <i>col</i> to the window <i>win</i> at the
position (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="point(in_integer,in_integer,in_color)"><h3>point</h3></a>
<p>
const proc: <b>point</b> (in integer: x, in integer: y, in color: col)</p><dl><dd>
<p>
Draws a point with the color <i>col</i> to the current window <i>curr_win</i>
at the position (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="line(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>line</h3></a>
<p>
const proc: <b>line</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: delta_x, in integer: delta_y, in color: col)</p><dl><dd>
<p>
Draws a line with the color <i>col</i> to the window <i>win</i>.
The line starts at (x, y) and ends at (delta_x, delta_y).
The coordinates of the endpoint are measured relative to x, y.
</p>
</dd>
</dl></div>
<hr />
<div><a name="line(in_integer,in_integer,in_integer,in_integer,in_color)"><h3>line</h3></a>
<p>
const proc: <b>line</b> (in integer: x, in integer: y,
    in integer: delta_x, in integer: delta_y, in color: col)</p><dl><dd>
<p>
Draws a line with the color <i>col</i> to the current window <i>curr_win</i>.
The line starts at (x, y) and ends at (delta_x, delta_y).
The coordinates of the endpoint are measured relative to x, y.
</p>
</dd>
</dl></div>
<hr />
<div><a name="lineTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>lineTo</h3></a>
<p>
const proc: <b>lineTo</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</p><dl><dd>
<p>
Draws a line with the color <i>col</i> to the window <i>win</i>.
The line starts at (x1, y1) and ends at (x2, y2).
The coordinates of the endpoint are measured in absolute
window coordinates.
</p>
</dd>
</dl></div>
<hr />
<div><a name="lineTo(in_integer,in_integer,in_integer,in_integer,in_color)"><h3>lineTo</h3></a>
<p>
const proc: <b>lineTo</b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</p><dl><dd>
<p>
Draws a line with the color <i>col</i> to the current window <i>curr_win</i>.
The line starts at (x1, y1) and ends at (x2, y2).
The coordinates of the endpoint are measured in absolute
window coordinates.
</p>
</dd>
</dl></div>
<hr />
<div><a name="lineToAngle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_color)"><h3>lineToAngle</h3></a>
<p>
const proc: <b>lineToAngle</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: length, in float: angle, in color: col)</p><dl><dd>
<p>
Draws a line with the color <i>col</i> to the window <i>win</i>.
The line starts at (x, y), has the given <i>length</i> and extends
in the given <i>angle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="lineToAngle(in_integer,in_integer,in_integer,in_float,in_color)"><h3>lineToAngle</h3></a>
<p>
const proc: <b>lineToAngle</b> (in integer: x, in integer: y,
    in integer: length, in float: angle, in color: col)</p><dl><dd>
<p>
Draws a line with the color <i>col</i> to the current window <i>curr_win</i>.
The line starts at (x, y), has the given <i>length</i> and extends
in the given <i>angle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="rect(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>rect</h3></a>
<p>
const proc: <b>rect</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: width, in integer: height, in color: col)</p><dl><dd>
<p>
Draws a filled rectangle with the color <i>col</i> to the window <i>win</i>.
The top left edge of the rectangle is at (x1, y1). The size of the
rectangle is specified with <i>width</i> and <i>height</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="rect(in_integer,in_integer,in_integer,in_integer,in_color)"><h3>rect</h3></a>
<p>
const proc: <b>rect</b> (in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</p><dl><dd>
<p>
Draws a filled rectangle with the color <i>col</i> to the current window <i>curr_win</i>.
The top left edge of the rectangle is at (x, y). The size of the
rectangle is specified with <i>width</i> and <i>height</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="rectTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>rectTo</h3></a>
<p>
const proc: <b>rectTo</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</p><dl><dd>
<p>
Draws a filled rectangle with the color <i>col</i> to the window <i>win</i>.
The top left edge of the rectangle is at (x1, y1) and the lower right
edge is at (x2, y2).
</p>
</dd>
</dl></div>
<hr />
<div><a name="rectTo(in_integer,in_integer,in_integer,in_integer,in_color)"><h3>rectTo</h3></a>
<p>
const proc: <b>rectTo</b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</p><dl><dd>
<p>
Draws a filled rectangle with the color <i>col</i> to the current window <i>curr_win</i>.
The top left edge of the rectangle is at (x1, y1) and the lower right
edge is at (x2, y2).
</p>
</dd>
</dl></div>
<hr />
<div><a name="box(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>box</h3></a>
<p>
const proc: <b>box</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</p><dl><dd>
<p>
Draws an empty rectangle with the color <i>col</i> to the window <i>win</i>.
The top left edge of the rectangle is at (x, y). The size of the
rectangle is specified with <i>width</i> and <i>height</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="box(in_integer,in_integer,in_integer,in_integer,in_color)"><h3>box</h3></a>
<p>
const proc: <b>box</b> (in integer: x, in integer: y,
    in integer: width, in integer: height, in color: col)</p><dl><dd>
<p>
Draws an empty rectangle with the color <i>col</i> to the current window <i>curr_win</i>.
The top left edge of the rectangle is at (x, y). The size of the
rectangle is specified with <i>width</i> and <i>height</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="boxTo(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>boxTo</h3></a>
<p>
const proc: <b>boxTo</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</p><dl><dd>
<p>
Draws an empty rectangle with the color <i>col</i> to the window <i>win</i>.
The top left edge of the rectangle is at (x1, y1) and the lower right
edge is at (x2, y2).
</p>
</dd>
</dl></div>
<hr />
<div><a name="boxTo(in_integer,in_integer,in_integer,in_integer,in_color)"><h3>boxTo</h3></a>
<p>
const proc: <b>boxTo</b> (in integer: x1, in integer: y1,
    in integer: x2, in integer: y2, in color: col)</p><dl><dd>
<p>
Draws an empty rectangle with the color <i>col</i> to the current window <i>curr_win</i>.
The top left edge of the rectangle is at (x1, y1) and the lower right
edge is at (x2, y2).
</p>
</dd>
</dl></div>
<hr />
<div><a name="circle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_color)"><h3>circle</h3></a>
<p>
const proc: <b>circle</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius, in color: col)</p><dl><dd>
<p>
Draws a circle with the color <i>col</i> to the window <i>win</i>.
The circle has the given <i>radius</i> and its center is at (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="circle(in_integer,in_integer,in_integer,in_color)"><h3>circle</h3></a>
<p>
const proc: <b>circle</b> (in integer: x, in integer: y, in integer: radius, in color: col)</p><dl><dd>
<p>
Draws a circle with the color <i>col</i> to the current window <i>curr_win</i>.
The circle has the given <i>radius</i> and its center is at (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="fcircle(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_color)"><h3>fcircle</h3></a>
<p>
const proc: <b>fcircle</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius, in color: col)</p><dl><dd>
<p>
Draws a filled circle with the color <i>col</i> to the window <i>win</i>.
The circle has the given <i>radius</i> and its center is at (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="fcircle(in_integer,in_integer,in_integer,in_color)"><h3>fcircle</h3></a>
<p>
const proc: <b>fcircle</b> (in integer: x, in integer: y, in integer: radius, in color: col)</p><dl><dd>
<p>
Draws a filled circle with the color <i>col</i> to the current window <i>curr_win</i>.
The circle has the given <i>radius</i> and its center is at (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="arc(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_float,in_color)"><h3>arc</h3></a>
<p>
const proc: <b>arc</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</p><dl><dd>
<p>
Draws an arc with the color <i>col</i> to the window <i>win</i>.
The arc has the given <i>radius</i> and its center is at (x, y).
The arc begins at <i>startAngle</i> and spans over <i>sweepAngle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="arc(in_integer,in_integer,in_integer,in_float,in_float,in_color)"><h3>arc</h3></a>
<p>
const proc: <b>arc</b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</p><dl><dd>
<p>
Draws an arc with the color <i>col</i> to the current window <i>curr_win</i>.
The arc has the given <i>radius</i> and its center is at (x, y).
The arc begins at <i>startAngle</i> and spans over <i>sweepAngle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="arc(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_float,in_float,in_integer,in_color)"><h3>arc</h3></a>
<p>
const proc: <b>arc</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in integer: width,
    in color: col)</p><dl><dd>
<p>
Draws an arc with the color <i>col</i> to the window <i>win</i>.
The arc has the given <i>radius</i> and its center is at (x, y).
The arc begins at <i>startAngle</i> and spans over <i>sweepAngle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="arc(in_integer,in_integer,in_integer,in_float,in_float,in_integer,in_color)"><h3>arc</h3></a>
<p>
const proc: <b>arc</b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in integer: width,
    in color: col)</p><dl><dd>
<p>
Draws an arc with the color <i>col</i> to the current window <i>curr_win</i>.
The arc has the given <i>radius</i> and its center is at (x, y).
The arc begins at <i>startAngle</i> and spans over <i>sweepAngle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="pieslice(in_integer,in_integer,in_integer,in_float,in_float,in_color)"><h3>pieslice</h3></a>
<p>
const proc: <b>pieslice</b> (in integer: x, in integer: y, in integer: radius,
    in float: startAngle, in float: sweepAngle, in color: col)</p><dl><dd>
<p>
Draws a filled sector with color <i>col</i> to <i>curr_win</i>.
The sector has the given <i>radius</i> and its center is at (x, y).
The sector begins at <i>startAngle</i> and spans over <i>sweepAngle</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="clear(inout_PRIMITIVE_WINDOW,in_color)"><h3>clear</h3></a>
<p>
const proc: <b>clear</b> (inout PRIMITIVE_WINDOW: win, in color: col)</p><dl><dd>
<p>
Clears the window <i>win</i> with the color <i>col</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="clear(inout_PRIMITIVE_WINDOW)"><h3>clear</h3></a>
<p>
const proc: <b>clear</b> (inout PRIMITIVE_WINDOW: win)</p><dl><dd>
<p>
Clears the window <i>win</i> with the color black.
</p>
</dd>
</dl></div>
<hr />
<div><a name="clear(in_color)"><h3>clear</h3></a>
<p>
const proc: <b>clear</b> (in color: col)</p><dl><dd>
<p>
Clears the current window <i>curr_win</i> with the color <i>col</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="polyLine(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_pointList,in_color)"><h3>polyLine</h3></a>
<p>
const proc: <b>polyLine</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in pointList: points, in color: col)</p><dl><dd>
<p>
Draws lines with the color <i>col</i> to the window <i>win</i>.
The lines connect the <i>points</i> and are drawn at the position (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="polyLine(in_integer,in_integer,in_pointList,in_color)"><h3>polyLine</h3></a>
<p>
const proc: <b>polyLine</b> (in integer: x, in integer: y, in pointList: points, in color: col)</p><dl><dd>
<p>
Draws lines with the color <i>col</i> to the current window <i>curr_win</i>.
The lines connect the <i>points</i> and are drawn at the position (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="fpolyLine(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_pointList,in_color)"><h3>fpolyLine</h3></a>
<p>
const proc: <b>fpolyLine</b> (inout PRIMITIVE_WINDOW: win,
    in integer: x, in integer: y, in pointList: points, in color: col)</p><dl><dd>
<p>
Draws a filled polygon with the color <i>col</i> to the window <i>win</i>.
The corners of the polygon are given with <i>points</i>.
The polygon is drawn at the position (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="fpolyLine(in_integer,in_integer,in_pointList,in_color)"><h3>fpolyLine</h3></a>
<p>
const proc: <b>fpolyLine</b> (in integer: x, in integer: y, in pointList: points, in color: col)</p><dl><dd>
<p>
Draws a filled polygon with the color <i>col</i> to the current window <i>curr_win</i>.
The corners of the polygon are given with <i>points</i>.
The polygon is drawn at the position (x, y).
</p>
</dd>
</dl></div>
<hr />
<div><a name="put(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_PRIMITIVE_WINDOW)"><h3>put</h3></a>
<p>
const proc: <b>put</b> (inout PRIMITIVE_WINDOW: destWindow, in integer: xDest,
    in integer: yDest, in PRIMITIVE_WINDOW: pixmap)</p><dl><dd>
<p>
Put <i>pixmap</i> to the given position at <i>destWindow</i>.
The top left edge of <i>pixmap</i> is put at (<i>xDest</i>, <i>yDest</i>).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>destWindow</tt> - Destination Window.</dd>
<dd><tt>xDest</tt> - X-coordinate of the destination position.</dd>
<dd><tt>yDest</tt> - Y-coordinate of the destination position.</dd>
<dd><tt>pixmap</tt> - Source window to be put to the destination.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="put(in_integer,in_integer,in_PRIMITIVE_WINDOW)"><h3>put</h3></a>
<p>
const proc: <b>put</b> (in integer: xDest, in integer: yDest,
    in PRIMITIVE_WINDOW: pixmap)</p><dl><dd>
<p>
Put <i>pixmap</i> to the given position at the current window 'curr_win'.
The top left edge of <i>pixmap</i> is put at (<i>xDest</i>, <i>yDest</i>).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>xDest</tt> - X-coordinate of the destination position.</dd>
<dd><tt>yDest</tt> - Y-coordinate of the destination position.</dd>
<dd><tt>pixmap</tt> - Source window to be put to the destination.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="put(inout_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_PRIMITIVE_WINDOW)"><h3>put</h3></a>
<p>
const proc: <b>put</b> (inout PRIMITIVE_WINDOW: destWindow, in integer: xDest,
    in integer: yDest, in integer: width, in integer: height,
    in PRIMITIVE_WINDOW: pixmap)</p><dl><dd>
<p>
Put a scaled <i>pixmap</i> to the given rectangle at <i>destWindow</i>.
The top left edge of the destination rectangle is at (<i>xDest</i>, <i>yDest</i>).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>destWindow</tt> - Destination Window.</dd>
<dd><tt>xDest</tt> - X-coordinate of the destination rectangle.</dd>
<dd><tt>yDest</tt> - Y-coordinate of the destination rectangle.</dd>
<dd><tt>width</tt> - Width of the destination rectangle.</dd>
<dd><tt>height</tt> - Height of the destination rectangle.</dd>
<dd><tt>pixmap</tt> - Source window to be scaled to the rectangle.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="newPixmap(in_integer,in_integer)"><h3>newPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>newPixmap</b> (in integer: width, in integer: height)</p><dl><dd>
<p>
Create a new pixmap with the given <i>width</i> and <i>height</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer)"><h3>getPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height)</p><dl><dd>
<p>
Create a new pixmap with the given <i>width</i> and <i>height</i> from <i>sourceWin</i>.
A rectangle with the upper left corner at (<i>left</i>, <i>upper</i>) and the given
<i>width</i> and <i>height</i> is copied from <i>sourceWin</i> to the new pixmap.
The rectangle may extend to areas outside of <i>sourceWin</i>. The rectangle
areas outside of <i>sourceWin</i> are colored with black.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixmap(in_integer,in_integer,in_integer,in_integer)"><h3>getPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in integer: left, in integer: upper,
    in integer: width, in integer: height)</p><dl><dd>
<p>
Create a new pixmap with the given <i>width</i> and <i>height</i> from <i>curr_win</i>.
A rectangle with the upper left corner at (<i>left</i>, <i>upper</i>) and the given
<i>width</i> and <i>height</i> is copied from <i>curr_win</i> to the new pixmap.
The rectangle may extend to areas outside of <i>sourceWin</i>. The rectangle
areas outside of <i>sourceWin</i> are colored with black.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixmap(in_PRIMITIVE_WINDOW)"><h3>getPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin)</p><dl><dd>
<p>
Create a new pixmap with the contents of <i>sourceWin</i>.
The content of <i>sourceWin</i> is copied the new pixmap.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>getPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height,
    in color: background)</p><dl><dd>
<p>
Create a new pixmap with the given <i>width</i> and <i>height</i> from <i>sourceWin</i>.
A rectangle with the upper left corner at (<i>left</i>, <i>upper</i>) and the given
<i>width</i> and <i>height</i> is copied from <i>sourceWin</i> to the new pixmap.
The rectangle may extend to areas outside of <i>sourceWin</i>. The rectangle
areas outside of <i>sourceWin</i> are colored with the given <i>background</i> color.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixmap(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer,in_integer,in_integer,in_color)"><h3>getPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>getPixmap</b> (in PRIMITIVE_WINDOW: sourceWin,
    in integer: left, in integer: upper, in integer: width, in integer: height,
    in integer: resultWidth, in integer: resultHeight, in color: background)</p><dl><dd>
<p>
Create a new pixmap with the given <i>resultWidth</i> and <i>resultHeight</i> from <i>sourceWin</i>.
A rectangle with the upper left corner at (<i>left</i>, <i>upper</i>) and the given
<i>width</i> and <i>height</i> is copied from <i>sourceWin</i>. The rectangle may extend
to areas outside of <i>sourceWin</i>. The rectangle areas outside of <i>sourceWin</i> are
colored with the given <i>background</i> color. The copied rectangle is
scaled to <i>resultWidth</i> and <i>resultHeight</i> and returned as new pixmap.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixmap(ref_array_array_pixel)"><h3>getPixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>getPixmap</b> (ref array array pixel: image)</p><dl><dd>
<p>
Create a new pixmap from a two-dimensional array of pixels.
The array of pixels might come from a image file.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>image</tt> - Pixel array with lines from top downward and columns from left to right.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the created pixmap.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getPixelArray(in_PRIMITIVE_WINDOW)"><h3>getPixelArray</h3></a>
<p>
const func array array pixel: <b>getPixelArray</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Get a two-dimensional array of pixels from <i>aWindow</i>.
The array of pixels can be used to write the image to a file.
This is used by the function str(aWindow, PPM):
</p>
<pre class="indent">
image := getPixelArray(pixmap);
for line range 1 to height do
  for pix range image[line] do
    col := pixelToColor(pix);
    stri &amp;:= chr(col.redLight   mdiv 256);
    stri &amp;:= chr(col.greenLight mdiv 256);
    stri &amp;:= chr(col.blueLight  mdiv 256);
  end for;
end for;
</pre>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aWindow</tt> - Window or pixmap source to create the array of pixels.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a pixel array with lines from top downward and columns from left to right.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="setTransparentColor(in_PRIMITIVE_WINDOW,in_color)"><h3>setTransparentColor</h3></a>
<p>
const proc: <b>setTransparentColor</b> (in PRIMITIVE_WINDOW: pixmap, in color: col)</p><dl><dd>
<p>
Sets the transparent color of a pixmap.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getPixelColor(in_PRIMITIVE_WINDOW,in_integer,in_integer)"><h3>getPixelColor</h3></a>
<p>
const func color: <b>getPixelColor</b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: x, in integer: y)</p><dl><dd>
<p>
Retrieve the color at pixel position (<i>x</i>, <i>y</i>) from <i>aWindow</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the pixel color at position (<i>x</i>, <i>y</i>).</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/dir.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/duration.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
