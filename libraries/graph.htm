<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Graph</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Graph</big></b></td>
<td align="right"><a class="link" href="../lib/graph.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/gif.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/graph_file.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#flushGraphic">flushGraphic</a></b></td></tr>
<tr><td width="30"></td><td>Flush graphic commands such that the contents of all windows is up to date.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#openSubWindow(in_PRIMITIVE_WINDOW,ref_integer,ref_integer,ref_integer,ref_integer)">openSubWindow</a></b> (
    in PRIMITIVE_WINDOW: aWindow,
    ref integer: xPos, ref integer: yPos,
    ref integer: width, ref integer: height)</td></tr>
<tr><td width="30"></td><td>Create a sub window inside of <i>parent_window</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setWindowName(in_PRIMITIVE_WINDOW,in_string)">setWindowName</a></b> (in PRIMITIVE_WINDOW: aWindow,
                           in string: windowName)</td></tr>
<tr><td width="30"></td><td>Set the window name (title) of <i>aWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setCursorVisible(in_PRIMITIVE_WINDOW,in_boolean)">setCursorVisible</a></b> (in PRIMITIVE_WINDOW: aWindow,
                              in boolean: visible)</td></tr>
<tr><td width="30"></td><td>Set the visibility of the mouse cursor in <i>aWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">PRIMITIVE_WINDOW</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#capturePixmap(ref_integer,ref_integer,ref_integer,ref_integer)">capturePixmap</a></b> (
    ref integer: left, ref integer: upper,
    ref integer: width, ref integer: height)</td></tr>
<tr><td width="30"></td><td>Capture a rectangular area from the screen.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#copyArea(in_PRIMITIVE_WINDOW,inout_PRIMITIVE_WINDOW,ref_integer,ref_integer,ref_integer,ref_integer,ref_integer,ref_integer)">copyArea</a></b> (in PRIMITIVE_WINDOW: sourceWindow,
    inout PRIMITIVE_WINDOW: destWindow,
    ref integer: src_x, ref integer: src_y,
    ref integer: width, ref integer: height,
    ref integer: dest_x, ref integer: dest_y)</td></tr>
<tr><td width="30"></td><td>Copy a rectangular area from <i>sourceWindow</i> to <i>destWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">pixel</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#rgbPixel(ref_integer,ref_integer,ref_integer)">rgbPixel</a></b> (ref integer: red,
    ref integer: green, ref integer: blue)</td></tr>
<tr><td width="30"></td><td>Create a pixel from the <i>red</i>, <i>green</i> and <i>blue</i> colors of light.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#screenHeight">screenHeight</a></b></td></tr>
<tr><td width="30"></td><td>Determine the height of the screen in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#screenWidth">screenWidth</a></b></td></tr>
<tr><td width="30"></td><td>Determine the width of the screen in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#height(in_PRIMITIVE_WINDOW)">height</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Determine the height of the window drawing area in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#width(in_PRIMITIVE_WINDOW)">width</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Determine the width of the window drawing area in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#xPos(in_PRIMITIVE_WINDOW)">xPos</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Determine the X position of the top left corner of a window in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#yPos(in_PRIMITIVE_WINDOW)">yPos</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Determine the Y position of the top left corner of a window in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setPos(in_PRIMITIVE_WINDOW,in_integer,in_integer)">setPos</a></b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: xPos, in integer: yPos)</td></tr>
<tr><td width="30"></td><td>Move the top left corner of a window to the coordinates x/y.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setSize(in_PRIMITIVE_WINDOW,in_integer,in_integer)">setSize</a></b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: width, in integer: height)</td></tr>
<tr><td width="30"></td><td>Set the size of the window <i>aWindow</i> to <i>width</i> and <i>height</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toBottom(in_PRIMITIVE_WINDOW)">toBottom</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Lower a window to the bottom so that it does not obscure any other window.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toTop(in_PRIMITIVE_WINDOW)">toTop</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Raise a window to the top so that no other window obscures it.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getBorder(in_PRIMITIVE_WINDOW)">getBorder</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Determine the border widths of a window in pixels.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pointerXPos(in_PRIMITIVE_WINDOW)">pointerXPos</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Return the X position of the pointer relative to the specified window.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#pointerYPos(in_PRIMITIVE_WINDOW)">pointerYPos</a></b> (in PRIMITIVE_WINDOW: aWindow)</td></tr>
<tr><td width="30"></td><td>Return the Y position of the pointer relative to the specified window.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#setPointerPos(in_PRIMITIVE_WINDOW,in_integer,in_integer)">setPointerPos</a></b> (in PRIMITIVE_WINDOW: aWindow,
                           in integer: xPos, in integer: yPos)</td></tr>
<tr><td width="30"></td><td>Set the pointer x and y position relative to <i>aWindow</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#selectInput(in_PRIMITIVE_WINDOW,in_char,in_boolean)">selectInput</a></b> (in PRIMITIVE_WINDOW: aWindow, in char: aKey,
                         in boolean: active)</td></tr>
<tr><td width="30"></td><td>Select if <i>aKey</i> is returned as key, or if it triggers a default action.</td></tr></table></td></tr>
<tr><td align="right" valign="top">pointList</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#genPointList(ref_array_integer)">genPointList</a></b> (ref array integer: coordinates)</td></tr>
<tr><td width="30"></td><td>The function 'genPointList' creates a 'pointList'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">array integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#xyArray(ref_pointList)">xyArray</a></b> (ref pointList: aPointList)</td></tr>
<tr><td width="30"></td><td>Converts a 'pointList' to an array of (X,Y) coordinates.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="flushGraphic"><h3>flushGraphic</h3></a>
<p>
const proc: <b>flushGraphic</b></p><dl><dd>
<p>
Flush graphic commands such that the contents of all windows is up to date.
An animation can be created by using <i>flushGrapic</i> every time before
the program waits for a fraction of a second.
</p>
</dd>
</dl></div>
<hr />
<div><a name="openSubWindow(in_PRIMITIVE_WINDOW,ref_integer,ref_integer,ref_integer,ref_integer)"><h3>openSubWindow</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>openSubWindow</b> (
    in PRIMITIVE_WINDOW: aWindow,
    ref integer: xPos, ref integer: yPos,
    ref integer: width, ref integer: height)</p><dl><dd>
<p>
Create a sub window inside of <i>parent_window</i>.
The new sub window has no window decorations and is not managed by
the window manager. If the empty window is used as <i>parent_window</i>
an unmanaged top level window without window decorations is generated.
The coordinates <i>xPos</i> and <i>yPos</i> are measured relative to the top
left corner of the <i>parent_window</i> drawing area (inside of the window
decorations). If the empty window is used as <i>parent_window</i> the
coordinates <i>xPos</i> and <i>yPos</i> are measured relative to the top left
corner of the screen.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>parent-window</tt> - Parent window (can be the empty window).</dd>
<dd><tt>xPos</tt> - X-position of the left corner of the new window.</dd>
<dd><tt>yPos</tt> - Y-position of the left corner of the new window.</dd>
<dd><tt>width</tt> - Width of the new window.</dd>
<dd><tt>height</tt> - Height of the new window.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the new generated window.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="setWindowName(in_PRIMITIVE_WINDOW,in_string)"><h3>setWindowName</h3></a>
<p>
const proc: <b>setWindowName</b> (in PRIMITIVE_WINDOW: aWindow,
                           in string: windowName)</p><dl><dd>
<p>
Set the window name (title) of <i>aWindow</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aWindow</tt> - Window for which the name should be set.</dd>
<dd><tt>windowName</tt> - New name (title) of the window.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setCursorVisible(in_PRIMITIVE_WINDOW,in_boolean)"><h3>setCursorVisible</h3></a>
<p>
const proc: <b>setCursorVisible</b> (in PRIMITIVE_WINDOW: aWindow,
                              in boolean: visible)</p><dl><dd>
<p>
Set the visibility of the mouse cursor in <i>aWindow</i>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aWindow</tt> - Window for which the mouse cursor visibility is set.</dd>
<dd><tt>visible</tt> - TRUE, if the mouse cursor should be visible in <i>aWindow</i>, or                FALSE, if the mouse curser should be invisible in <i>aWindow</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="capturePixmap(ref_integer,ref_integer,ref_integer,ref_integer)"><h3>capturePixmap</h3></a>
<p>
const func PRIMITIVE_WINDOW: <b>capturePixmap</b> (
    ref integer: left, ref integer: upper,
    ref integer: width, ref integer: height)</p><dl><dd>
<p>
Capture a rectangular area from the screen.
The function takes a screenshot of the rectangular area.
The <i>left</i> and <i>upper</i> coordinates are measured relative to
the top left corner of the screen.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>left</tt> - X-position of the upper left corner of the capture area.</dd>
<dd><tt>upper</tt> - Y-position of the upper left corner of the capture area.</dd>
<dd><tt>width</tt> - Width of the capture area.</dd>
<dd><tt>height</tt> - Height of the capture area.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the content of the rectangular screen area as pixmap.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>height</i> or <i>width</i> are negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="copyArea(in_PRIMITIVE_WINDOW,inout_PRIMITIVE_WINDOW,ref_integer,ref_integer,ref_integer,ref_integer,ref_integer,ref_integer)"><h3>copyArea</h3></a>
<p>
const proc: <b>copyArea</b> (in PRIMITIVE_WINDOW: sourceWindow,
    inout PRIMITIVE_WINDOW: destWindow,
    ref integer: src_x, ref integer: src_y,
    ref integer: width, ref integer: height,
    ref integer: dest_x, ref integer: dest_y)</p><dl><dd>
<p>
Copy a rectangular area from <i>sourceWindow</i> to <i>destWindow</i>.
Coordinates are measured relative to the top left corner of the
corresponding window drawing area (inside of the window decorations).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>sourceWindow</tt> - Source window.</dd>
<dd><tt>destWindow</tt> - Destination window.</dd>
<dd><tt>src_x</tt> - X-position of the top left corner of the source area.</dd>
<dd><tt>src_y</tt> - Y-position of the top left corner of the source area.</dd>
<dd><tt>width</tt> - Width of the rectangular area.</dd>
<dd><tt>height</tt> - Height of the rectangular area.</dd>
<dd><tt>dest_x</tt> - X-position of the top left corner of the destination area.</dd>
<dd><tt>dest_y</tt> - Y-position of the top left corner of the destination area.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="rgbPixel(ref_integer,ref_integer,ref_integer)"><h3>rgbPixel</h3></a>
<p>
const func pixel: <b>rgbPixel</b> (ref integer: red,
    ref integer: green, ref integer: blue)</p><dl><dd>
<p>
Create a pixel from the <i>red</i>, <i>green</i> and <i>blue</i> colors of light.
The range for <i>red</i>, <i>green</i> and <i>blue</i> is from 0 to 65535.
</p>
</dd>
</dl></div>
<hr />
<div><a name="screenHeight"><h3>screenHeight</h3></a>
<p>
const func integer: <b>screenHeight</b></p><dl><dd>
<p>
Determine the height of the screen in pixels.
</p>
</dd>
</dl></div>
<hr />
<div><a name="screenWidth"><h3>screenWidth</h3></a>
<p>
const func integer: <b>screenWidth</b></p><dl><dd>
<p>
Determine the width of the screen in pixels.
</p>
</dd>
</dl></div>
<hr />
<div><a name="height(in_PRIMITIVE_WINDOW)"><h3>height</h3></a>
<p>
const func integer: <b>height</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Determine the height of the window drawing area in pixels.
This excludes window decorations at top and bottom. Add top and bottom
border widths to get the height inclusive window decorations.
</p>
</dd>
</dl></div>
<hr />
<div><a name="width(in_PRIMITIVE_WINDOW)"><h3>width</h3></a>
<p>
const func integer: <b>width</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Determine the width of the window drawing area in pixels.
This excludes window declarations left and right. Add left and right
border widths to get the width inclusive window decorations.
</p>
</dd>
</dl></div>
<hr />
<div><a name="xPos(in_PRIMITIVE_WINDOW)"><h3>xPos</h3></a>
<p>
const func integer: <b>xPos</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Determine the X position of the top left corner of a window in pixels.
If window decorations are present this uses the top left corner of
the window decorations. For a sub window the X position is relative
to the top left corner of the parent window drawing area (inside of
the window decorations). For top level windows the X position is
relative to the top left corner of the screen.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>actual_window</i> is a pixmap.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="yPos(in_PRIMITIVE_WINDOW)"><h3>yPos</h3></a>
<p>
const func integer: <b>yPos</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Determine the Y position of the top left corner of a window in pixels.
If window decorations are present this uses the top left corner of
the window decorations. For a sub window the Y position is relative
to the top left corner of the parent window drawing area (inside of
the window decorations). For top level windows the Y position is
relative to the top left corner of the screen.
</p>
</dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>actual_window</i> is a pixmap.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="setPos(in_PRIMITIVE_WINDOW,in_integer,in_integer)"><h3>setPos</h3></a>
<p>
const proc: <b>setPos</b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: xPos, in integer: yPos)</p><dl><dd>
<p>
Move the top left corner of a window to the coordinates x/y.
If window decorations are present the top left corner of the
window decorations will be at the position x/y. For a sub window
the position is relative to the top left corner of the parent window
drawing area (inside of the window decorations). For top level windows
the position is relative to the top left corner of the screen.
</p>
</dd>
</dl></div>
<hr />
<div><a name="setSize(in_PRIMITIVE_WINDOW,in_integer,in_integer)"><h3>setSize</h3></a>
<p>
const proc: <b>setSize</b> (in PRIMITIVE_WINDOW: aWindow,
    in integer: width, in integer: height)</p><dl><dd>
<p>
Set the size of the window <i>aWindow</i> to <i>width</i> and <i>height</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="toBottom(in_PRIMITIVE_WINDOW)"><h3>toBottom</h3></a>
<p>
const proc: <b>toBottom</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Lower a window to the bottom so that it does not obscure any other window.
</p>
</dd>
</dl></div>
<hr />
<div><a name="toTop(in_PRIMITIVE_WINDOW)"><h3>toTop</h3></a>
<p>
const proc: <b>toTop</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Raise a window to the top so that no other window obscures it.
</p>
</dd>
</dl></div>
<hr />
<div><a name="getBorder(in_PRIMITIVE_WINDOW)"><h3>getBorder</h3></a>
<p>
const func array integer: <b>getBorder</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Determine the border widths of a window in pixels.
These are the widths of the window decorations in the succession
top, right, bottom, left.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an array with border widths (top, right, bottom, left).</dd></dl></dd>
</dl></div>
<hr />
<div><a name="pointerXPos(in_PRIMITIVE_WINDOW)"><h3>pointerXPos</h3></a>
<p>
const func integer: <b>pointerXPos</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Return the X position of the pointer relative to the specified window.
The point of origin is the top left corner of the drawing area
of the given 'aWindow' (inside of the window decorations).
If 'aWindow' is the empty window the pointer X position is
relative to the top left corner of the screen.
</p>
</dd>
</dl></div>
<hr />
<div><a name="pointerYPos(in_PRIMITIVE_WINDOW)"><h3>pointerYPos</h3></a>
<p>
const func integer: <b>pointerYPos</b> (in PRIMITIVE_WINDOW: aWindow)</p><dl><dd>
<p>
Return the Y position of the pointer relative to the specified window.
The point of origin is the top left corner of the drawing area
of the given 'aWindow' (inside of the window decorations).
If 'aWindow' is the empty window the pointer Y position is
relative to the top left corner of the screen.
</p>
</dd>
</dl></div>
<hr />
<div><a name="setPointerPos(in_PRIMITIVE_WINDOW,in_integer,in_integer)"><h3>setPointerPos</h3></a>
<p>
const proc: <b>setPointerPos</b> (in PRIMITIVE_WINDOW: aWindow,
                           in integer: xPos, in integer: yPos)</p><dl><dd>
<p>
Set the pointer x and y position relative to <i>aWindow</i>.
The point of origin is the top left corner of the drawing area
of the given <i>aWindow</i> (inside of the window decorations).
If <i>aWindow</i> is the empty window the pointer x and y position
is relative to the top left corner of the screen.
</p>
</dd>
</dl></div>
<hr />
<div><a name="selectInput(in_PRIMITIVE_WINDOW,in_char,in_boolean)"><h3>selectInput</h3></a>
<p>
const proc: <b>selectInput</b> (in PRIMITIVE_WINDOW: aWindow, in char: aKey,
                         in boolean: active)</p><dl><dd>
<p>
Select if <i>aKey</i> is returned as key, or if it triggers a default action.
A program might be notified when a window is resized.
By default, this notification is switched off. It can be switched on with:
</p>
<pre class="indent">
selectInput(curr_win, KEY_RESIZE, TRUE);
</pre>
<p>
By default, closing a window terminates the program.
To get a notification for a window close (instead of a program termination) do:
</p>
<pre class="indent">
selectInput(curr_win, KEY_CLOSE, TRUE);
</pre>
<p>
If the notification is turned on the function getc(GRAPH_KEYBOARD)
might return the corresponding notification character (KEY_RESIZE or KEY_CLOSE).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>aWindow</tt> - Window for which the key behavior is specified.</dd>
<dd><tt>aKey</tt> - KEY_CLOSE or KEY_RESIZE.</dd>
<dd><tt>active</tt> - TRUE if reading from the KEYBOARD returns <i>aKey</i>, or               FALSE if <i>aKey</i> triggers a default action.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="genPointList(ref_array_integer)"><h3>genPointList</h3></a>
<p>
const func pointList: <b>genPointList</b> (ref array integer: coordinates)</p><dl><dd>
<p>
The function 'genPointList' creates a 'pointList'.
It converts an array of alternate x and y values to a 'pointList'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a pointList with the points from the array.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If the length of the array is odd.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="xyArray(ref_pointList)"><h3>xyArray</h3></a>
<p>
const func array integer: <b>xyArray</b> (ref pointList: aPointList)</p><dl><dd>
<p>
Converts a 'pointList' to an array of (X,Y) coordinates.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>an array of alternate x and y values.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/gif.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/graph_file.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
