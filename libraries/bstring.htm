<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Bstring</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Bstring</big></b></td>
<td align="right"><a class="link" href="../prg/bstring.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/browser.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bytedata.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bstring">bstring</a></b></td></tr>
<tr><td width="30"></td><td>Type for byte strings.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="bstring"><h3>bstring</h3></a>
<p>
const type: <b>bstring</b></p><dl><dd>
<p>
Type for byte strings.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">bstring</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bstring) <b><a class="link" href="#(attr_bstring)._value">. value</a></b></td></tr>
<tr><td width="30"></td><td>Default value of <i>bstring</i> (bstring("")).</td></tr></table></td></tr>
<tr><td align="right" valign="top">bstring</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(attr bstring) <b><a class="link" href="#(attr_bstring)parse(in_string)">parse</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bstring</i> value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bstring: bstri) <b><a class="link" href="#(in_bstring)[(in_integer)]">[</a></b> (in integer: index) ]</td></tr>
<tr><td width="30"></td><td>Get a character, identified by an index, from a <i>bstring</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bstring: bstri1) <b><a class="link" href="#(in_bstring)=(in_bstring)">=</a></b> (in bstring: bstri2)</td></tr>
<tr><td width="30"></td><td>Check if two bstrings are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in bstring: bstri1) <b><a class="link" href="#(in_bstring)&lt;>(in_bstring)">&lt;></a></b> (in bstring: bstri2)</td></tr>
<tr><td width="30"></td><td>Check if two bstrings are not equal.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#str(in_bstring)">str</a></b> (in bstring: bstri)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bstring</i> value to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#literal(in_bstring)">literal</a></b> (in bstring: bstri)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bstring</i> value to a <i>bstring</i> literal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#string(in_bstring)">string</a></b> (in bstring: bstri)</td></tr>
<tr><td width="30"></td><td>Convert a <i>bstring</i> value to a <a class="link" href="string.htm" title="string">string</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bstring</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bstring(in_string)">bstring</a></b> (in string: stri)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bstring</i> value.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#length(in_bstring)">length</a></b> (in bstring: bstri)</td></tr>
<tr><td width="30"></td><td>Determine the length of a <i>bstring</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#compare(in_bstring,in_bstring)">compare</a></b> (in bstring: bstri1, in bstring: bstri2)</td></tr>
<tr><td width="30"></td><td>Compare two bstrings.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#hashCode(in_bstring)">hashCode</a></b> (in bstring: bstri)</td></tr>
<tr><td width="30"></td><td>Compute the hash value of a <i>bstring</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">void</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#for(inout_char)range(in_bstring)do(in_proc)end_for">for</a></b> (inout char: forVar) range (in bstring: bstri) do
              (in proc: statements)
            end for</td></tr>
<tr><td width="30"></td><td>For-loop which loops over the <a class="link" href="char.htm" title="characters">characters</a> of a <i>bstring</i>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bStriBe2BigInt(in_bstring,in_boolean)">bStriBe2BigInt</a></b> (in bstring: bstri,
    in boolean: isSigned)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="bstring.htm" title="bstring">bstring</a> (interpreted as big-endian) to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bStriLe2BigInt(in_bstring,in_boolean)">bStriLe2BigInt</a></b> (in bstring: bstri,
    in boolean: isSigned)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="bstring.htm" title="bstring">bstring</a> (interpreted as little-endian) to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bstring</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bStriBe(in_bigInteger,in_boolean)">bStriBe</a></b> (in bigInteger: number,
    in boolean: isSigned)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> into a big-endian <a class="link" href="bstring.htm" title="bstring">bstring</a>.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bstring</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#bStriLe(in_bigInteger,in_boolean)">bStriLe</a></b> (in bigInteger: number,
    in boolean: isSigned)</td></tr>
<tr><td width="30"></td><td>Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> into a little-endian <a class="link" href="bstring.htm" title="bstring">bstring</a>.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(attr_bstring)._value"><h3>. value</h3></a>
<p>
const bstring: (attr bstring) <b>. value</b></p><dl><dd>
<p>
Default value of <i>bstring</i> (bstring("")).
</p>
</dd>
</dl></div>
<hr />
<div><a name="(attr_bstring)parse(in_string)"><h3>parse</h3></a>
<p>
const func bstring: (attr bstring) <b>parse</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bstring</i> value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bstring</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bstring)[(in_integer)]"><h3>[</h3></a>
<p>
const func char: (in bstring: bstri) <b>[</b> (in integer: index) ]</p><dl><dd>
<p>
Get a character, identified by an index, from a <i>bstring</i>.
The first character has the index 1.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character specified with the index.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>INDEX_ERROR</tt> - If the index is less than 1 or            greater than the length of the <i>bstring</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="(in_bstring)=(in_bstring)"><h3>=</h3></a>
<p>
const func boolean: (in bstring: bstri1) <b>=</b> (in bstring: bstri2)</p><dl><dd>
<p>
Check if two bstrings are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if both bstrings are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_bstring)&lt;>(in_bstring)"><h3>&lt;></h3></a>
<p>
const func boolean: (in bstring: bstri1) <b>&lt;></b> (in bstring: bstri2)</p><dl><dd>
<p>
Check if two bstrings are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both bstrings are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="str(in_bstring)"><h3>str</h3></a>
<p>
const func string: <b>str</b> (in bstring: bstri)</p><dl><dd>
<p>
Convert a <i>bstring</i> value to a <a class="link" href="string.htm" title="string">string</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <a class="link" href="string.htm" title="string">string</a> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="literal(in_bstring)"><h3>literal</h3></a>
<p>
const func string: <b>literal</b> (in bstring: bstri)</p><dl><dd>
<p>
Convert a <i>bstring</i> value to a <i>bstring</i> literal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bstring</i> literal.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="string(in_bstring)"><h3>string</h3></a>
<p>
const func string: <b>string</b> (in bstring: bstri)</p><dl><dd>
<p>
Convert a <i>bstring</i> value to a <a class="link" href="string.htm" title="string">string</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <a class="link" href="string.htm" title="string">string</a> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bstring(in_string)"><h3>bstring</h3></a>
<p>
const func bstring: <b>bstring</b> (in string: stri)</p><dl><dd>
<p>
Convert a <a class="link" href="string.htm" title="string">string</a> to a <i>bstring</i> value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the <i>bstring</i> result of the conversion.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
<dd><tt>MEMORY_ERROR</tt> -  Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="length(in_bstring)"><h3>length</h3></a>
<p>
const func integer: <b>length</b> (in bstring: bstri)</p><dl><dd>
<p>
Determine the length of a <i>bstring</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the length of the <i>bstring</i>.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="compare(in_bstring,in_bstring)"><h3>compare</h3></a>
<p>
const func integer: <b>compare</b> (in bstring: bstri1, in bstring: bstri2)</p><dl><dd>
<p>
Compare two bstrings.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>-1, 0 or 1 if the first argument is considered to be         respectively less than, equal to, or greater than the         second.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="hashCode(in_bstring)"><h3>hashCode</h3></a>
<p>
const func integer: <b>hashCode</b> (in bstring: bstri)</p><dl><dd>
<p>
Compute the hash value of a <i>bstring</i>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the hash value.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="for(inout_char)range(in_bstring)do(in_proc)end_for"><h3>for</h3></a>
<p>
const proc: <b>for</b> (inout char: forVar) range (in bstring: bstri) do
              (in proc: statements)
            end for</p><dl><dd>
<p>
For-loop which loops over the <a class="link" href="char.htm" title="characters">characters</a> of a <i>bstring</i>.
</p>
</dd>
</dl></div>
<hr />
<div><a name="bStriBe2BigInt(in_bstring,in_boolean)"><h3>bStriBe2BigInt</h3></a>
<p>
const func bigInteger: <b>bStriBe2BigInt</b> (in bstring: bstri,
    in boolean: isSigned)</p><dl><dd>
<p>
Convert a <a class="link" href="bstring.htm" title="bstring">bstring</a> (interpreted as big-endian) to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bstri</tt> - Bstring to be converted. The bytes are interpreted        as binary big-endian representation with a base of 256.</dd>
<dd><tt>isSigned</tt> - Defines if <i>bstri</i> is interpreted as signed value.        If <i>isSigned</i> is TRUE the twos-complement representation        is used. In this case the result is negative if the most        significant byte (the first byte) has an ordinal >= 128.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a bigInteger created from the big-endian bytes.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bStriLe2BigInt(in_bstring,in_boolean)"><h3>bStriLe2BigInt</h3></a>
<p>
const func bigInteger: <b>bStriLe2BigInt</b> (in bstring: bstri,
    in boolean: isSigned)</p><dl><dd>
<p>
Convert a <a class="link" href="bstring.htm" title="bstring">bstring</a> (interpreted as little-endian) to a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a>.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bstri</tt> - Bstring to be converted. The bytes are interpreted        as binary little-endian representation with a base of 256.</dd>
<dd><tt>isSigned</tt> - Defines if <i>bstri</i> is interpreted as signed value.        If <i>isSigned</i> is TRUE the twos-complement representation        is used. In this case the result is negative if the most        significant byte (the last byte) has an ordinal >= 128.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a bigInteger created from the little-endian bytes.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="bStriBe(in_bigInteger,in_boolean)"><h3>bStriBe</h3></a>
<p>
const func bstring: <b>bStriBe</b> (in bigInteger: number,
    in boolean: isSigned)</p><dl><dd>
<p>
Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> into a big-endian <a class="link" href="bstring.htm" title="bstring">bstring</a>.
The result uses binary representation with a base of 256.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - BigInteger number to be converted.</dd>
<dd><tt>isSigned</tt> - Determines the signedness of the result.        If <i>isSigned</i> is TRUE the result is encoded with the        twos-complement representation. In this case a negative        <i>number</i> is converted to a result where the most significant        byte (the first byte) has an ordinal >= 128.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a bstring with the big-endian representation.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>number</i> is negative and <i>isSigned</i> is FALSE.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="bStriLe(in_bigInteger,in_boolean)"><h3>bStriLe</h3></a>
<p>
const func bstring: <b>bStriLe</b> (in bigInteger: number,
    in boolean: isSigned)</p><dl><dd>
<p>
Convert a <a class="link" href="bigint.htm" title="bigInteger">bigInteger</a> into a little-endian <a class="link" href="bstring.htm" title="bstring">bstring</a>.
The result uses binary representation with a base of 256.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - BigInteger number to be converted.</dd>
<dd><tt>isSigned</tt> - Determines the signedness of the result.        If <i>isSigned</i> is TRUE the result is encoded with the        twos-complement representation. In this case a negative        <i>number</i> is converted to a result where the most significant        byte (the last byte) has an ordinal >= 128.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>a bstring with the little-endian representation.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>number</i> is negative and <i>isSigned</i> is FALSE.</dd>
<dd><tt>MEMORY_ERROR</tt> - Not enough memory to represent the result.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/browser.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/bytedata.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
