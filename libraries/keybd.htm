<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Keybd</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Keybd</big></b></td>
<td align="right"><a class="link" href="../lib/keybd.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/jpeg.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/keydescr.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#keyboard_file">keyboard_file</a></b></td></tr>
<tr><td width="30"></td><td>Interface type describing keyboard <a class="link" href="file.htm" title="files">files</a>.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="keyboard_file"><h3>keyboard_file</h3></a>
<p>
const type: <b>keyboard_file</b></p><dl><dd>
<p>
Interface type describing keyboard <a class="link" href="file.htm" title="files">files</a>.
This interface is implemented with <i>console_keybd_file</i> and
<i>graph_keybd_file</i>.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Variable Summary</td></tr>
<tr><td align="right" valign="top">console_keybd_file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#CONSOLE_KEYBOARD">CONSOLE_KEYBOARD</a></b></td></tr>
<tr><td width="30"></td><td>Keyboard file describing the console keyboard.</td></tr></table></td></tr>
<tr><td align="right" valign="top">graph_keybd_file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#GRAPH_KEYBOARD">GRAPH_KEYBOARD</a></b></td></tr>
<tr><td width="30"></td><td>Keyboard file describing the graphic keyboard.</td></tr></table></td></tr>
<tr><td align="right" valign="top">keyboard_file</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#KEYBOARD">KEYBOARD</a></b></td></tr>
<tr><td width="30"></td><td>Variable describing the keyboard.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#buttonPressed(in_keyboard_file,in_char)">buttonPressed</a></b> (in keyboard_file: keybd, in char: button)</td></tr>
<tr><td width="30"></td><td>Determine if a given <i>button</i> is currently pressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clickedXPos(in_keyboard_file)">clickedXPos</a></b> (in keyboard_file: keybd)</td></tr>
<tr><td width="30"></td><td>X position of the mouse cursor when a button was pressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clickedYPos(in_keyboard_file)">clickedYPos</a></b> (in keyboard_file: keybd)</td></tr>
<tr><td width="30"></td><td>Y position of the mouse cursor when a button was pressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getc(in_console_keybd_file)">getc</a></b> (in console_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Read a character from the console keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(in_console_keybd_file,in_integer)">gets</a></b> (in console_keybd_file: keybd, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Read a string with maximum length from the console keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#inputReady(in_console_keybd_file)">inputReady</a></b> (in console_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Determine if at least one character can be read without blocking.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getwd(inout_console_keybd_file)">getwd</a></b> (inout console_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Read a word from the console keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getln(inout_console_keybd_file)">getln</a></b> (inout console_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Read a line from the console keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getc(in_graph_keybd_file)">getc</a></b> (in graph_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Read a character from the graphic keyboard or mouse.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#gets(in_graph_keybd_file,in_integer)">gets</a></b> (in graph_keybd_file: keybd, in integer: maxLength)</td></tr>
<tr><td width="30"></td><td>Read a string with maximum length from the graphic keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#buttonPressed(in_graph_keybd_file,in_char)">buttonPressed</a></b> (in graph_keybd_file: keybd, in char: button)</td></tr>
<tr><td width="30"></td><td>Determine if a given <i>button</i> is currently pressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clickedXPos(in_graph_keybd_file)">clickedXPos</a></b> (in graph_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>X position of the mouse cursor when a button was pressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#clickedYPos(in_graph_keybd_file)">clickedYPos</a></b> (in graph_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Y position of the mouse cursor when a button was pressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#inputReady(in_graph_keybd_file)">inputReady</a></b> (in graph_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Determine if at least one character can be read without blocking.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getwd(inout_graph_keybd_file)">getwd</a></b> (inout graph_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Read a word from the graphic keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getln(inout_graph_keybd_file)">getln</a></b> (inout graph_keybd_file: keybd)</td></tr>
<tr><td width="30"></td><td>Read a line from the graphic keyboard file.</td></tr></table></td></tr>
<tr><td align="right" valign="top">char</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getc(inout_file,NO_WAIT)">getc</a></b> (inout file: inFile, NO_WAIT)</td></tr>
<tr><td width="30"></td><td>Read a char from <i>inFile</i> or return KEY_NONE if reading would wait (block).</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Variable Detail</td></tr></table></p>
<div><a name="CONSOLE_KEYBOARD"><h3>CONSOLE_KEYBOARD</h3></a>
<p>
var console_keybd_file: <b>CONSOLE_KEYBOARD</b></p><dl><dd>
<p>
Keyboard file describing the console keyboard.
The console keyboard belongs to a text/console window.
Characters typed at the keyboard are queued (first in first out)
and can be read directly, without the need to press ENTER or
RETURN. There is also no possibility to correct a key, once it
is pressed. Additionally KEYBOARD does not echo the characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="GRAPH_KEYBOARD"><h3>GRAPH_KEYBOARD</h3></a>
<p>
var graph_keybd_file: <b>GRAPH_KEYBOARD</b></p><dl><dd>
<p>
Keyboard file describing the graphic keyboard.
The graphic keyboard belongs to a graphic window.
Characters typed at the keyboard are queued (first in first out)
and can be read directly, without the need to press ENTER or
RETURN. There is also no possibility to correct a key, once it
is pressed. Additionally KEYBOARD does not echo the characters.
</p>
</dd>
</dl></div>
<hr />
<div><a name="KEYBOARD"><h3>KEYBOARD</h3></a>
<p>
var keyboard_file: <b>KEYBOARD</b></p><dl><dd>
<p>
Variable describing the keyboard.
Characters typed at the keyboard are queued (first in first out)
and can be read directly, without the need to press ENTER or
RETURN. There is also no possibility to correct a key, once it
is pressed. Additionally KEYBOARD does not echo the characters.
KEYBOARD delivers cursor keys and function keys as single
characters (e.g. KEY_LEFT or KEY_F1).
This variable is initialized with CONSOLE_KEYBOARD.
If a program wants to work with the graphic keyboard,
the following assignment is necessary:
</p>
<pre class="indent">
KEYBOARD := GRAPH_KEYBOARD;
</pre>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="buttonPressed(in_keyboard_file,in_char)"><h3>buttonPressed</h3></a>
<p>
const func boolean: <b>buttonPressed</b> (in keyboard_file: keybd, in char: button)</p><dl><dd>
<p>
Determine if a given <i>button</i> is currently pressed.
This function can determine if the last key read by <i>getc</i>
from the graphic keyboard is still pressed:
</p>
<pre class="indent">
buttonPressed(KEYBOARD, KEY_MOUSE1)
</pre>
<p>
The function can determine if num-lock, shift-lock or scroll-lock is
currently active:
</p>
<pre class="indent">
buttonPressed(KEYBOARD, KEY_SHIFT_LOCK_ON)
</pre>
<p>
If a button is pressed together with a modifier key (SHIFT, CTRL, ALT)
<i>getc</i> returns a character like KEY_CTL_MOUSE1. But no character
constants are defined for combinations with two modifier keys (there
is no KEY_SFT_CTL_MOUSE1). With <i>buttonPressed</i> it is possible to
recogize if two modifier key are combined with a key. E.g.:
</p>
<pre class="indent">
aKey := getc(KEYBOARD);
if (aKey = KEY_CTL_MOUSE1 and buttonPressed(KEYBOARD, KEY_SHIFT)) or
   (akey = KEY_SFT_MOUSE1 and buttonPressed(KEYBOARD, KEY_CONTROL)) then
  ...
</pre>
<p>
Note that <i>buttonPressed</i> does not actually read something so using
<i>buttonPressed</i> alone will not work. Instead <i>buttonPressed</i> must be
combined with <i>getc</i>, which does the reading.
</p>
<pre class="indent">
command := getc(KEYBOARD);
if command = KEY_MOUSE1 then
  while buttonPressed(KEYBOARD, KEY_MOUSE1) do
    ... do something as long as KEY_MOUSE1 is pressed ...
  end while;
  # KEY_MOUSE1 has been released.
end if;
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>button</i> is currently pressed,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="clickedXPos(in_keyboard_file)"><h3>clickedXPos</h3></a>
<p>
const func integer: <b>clickedXPos</b> (in keyboard_file: keybd)</p><dl><dd>
<p>
X position of the mouse cursor when a button was pressed.
The functions <i>clickedXPos</i> and <i>clickedYPos</i> can be used to
determine which position was "clicked".
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the X position of the mouse cursor at the time when         the last button was pressed.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="clickedYPos(in_keyboard_file)"><h3>clickedYPos</h3></a>
<p>
const func integer: <b>clickedYPos</b> (in keyboard_file: keybd)</p><dl><dd>
<p>
Y position of the mouse cursor when a button was pressed.
The functions <i>clickedXPos</i> and <i>clickedYPos</i> can be used to
determine which position was "clicked".
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the Y position of the mouse cursor at the time when         the last button was pressed.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getc(in_console_keybd_file)"><h3>getc</h3></a>
<p>
const func char: <b>getc</b> (in console_keybd_file: keybd)</p><dl><dd>
<p>
Read a character from the console keyboard file.
The function works synchronous. This means that it might wait (block)
until a key has been pressed. The function returns a normal Unicode
character or a special code (which may be or may not be a Unicode
character) for cursor- and function-keys. Character constants are
defined for various keys such as KEY_CTL_J for newline and KEY_ESC
for the ESCAPE key. If a button is pressed together with a modifier
key (SHIFT, CTRL, ALT) <i>getc</i> returns a character like KEY_CTL_A
or KEY_ALT_A. No character constants are defined for combinations
with two modifier keys (there is no KEY_SFT_CTL_A).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="gets(in_console_keybd_file,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (in console_keybd_file: keybd, in integer: maxLength)</p><dl><dd>
<p>
Read a string with maximum length from the console keyboard file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="inputReady(in_console_keybd_file)"><h3>inputReady</h3></a>
<p>
const func boolean: <b>inputReady</b> (in console_keybd_file: keybd)</p><dl><dd>
<p>
Determine if at least one character can be read without blocking.
Blocking means that <i>getc</i> would wait until a key has been pressed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if a character is available at the console keyboard file         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getwd(inout_console_keybd_file)"><h3>getwd</h3></a>
<p>
const func string: <b>getwd</b> (inout console_keybd_file: keybd)</p><dl><dd>
<p>
Read a word from the console keyboard file.
Before reading the word it skips spaces and tabs. The function
accepts words ending with " ", "\t", "\n", "\r\n" or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The word ending characters are not copied into the string.
That means that the "\r" of a "\r\n" sequence is silently removed.
When the function is left keybd.bufferChar contains ' ',
'\t', '\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the word read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getln(inout_console_keybd_file)"><h3>getln</h3></a>
<p>
const func string: <b>getln</b> (inout console_keybd_file: keybd)</p><dl><dd>
<p>
Read a line from the console keyboard file.
The function accepts lines ending with "\n", "\r\n" or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The line ending characters are not copied into the string.
That means that the "\r" of a "\r\n" sequence is silently removed.
When the function is left keybd.bufferChar contains '\n' or
<a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the line read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getc(in_graph_keybd_file)"><h3>getc</h3></a>
<p>
const func char: <b>getc</b> (in graph_keybd_file: keybd)</p><dl><dd>
<p>
Read a character from the graphic keyboard or mouse.
The function works synchronous. This means that it might wait (block)
until a key has been pressed. The function returns a normal Unicode
character or a special code (which may be or may not be a Unicode
character) for cursor-, function- and mouse-keys. Character constants
are defined for various keys such as KEY_CTL_J for newline and
KEY_MOUSE1 for the first mouse key. If a button is pressed together
with a modifier key (SHIFT, CTRL, ALT) <i>getc</i> returns a character
like KEY_CTL_MOUSE1. No character constants are defined for
combinations with two modifier keys (there is no KEY_SFT_CTL_MOUSE1).
The function <i>buttonPressed</i> can be used to read such combinations.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the character read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="gets(in_graph_keybd_file,in_integer)"><h3>gets</h3></a>
<p>
const func string: <b>gets</b> (in graph_keybd_file: keybd, in integer: maxLength)</p><dl><dd>
<p>
Read a string with maximum length from the graphic keyboard file.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the string read.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - The parameter <i>maxLength</i> is negative.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="buttonPressed(in_graph_keybd_file,in_char)"><h3>buttonPressed</h3></a>
<p>
const func boolean: <b>buttonPressed</b> (in graph_keybd_file: keybd, in char: button)</p><dl><dd>
<p>
Determine if a given <i>button</i> is currently pressed.
This function can determine if the last key read by <i>getc</i>
from the graphic keyboard is still pressed:
</p>
<pre class="indent">
buttonPressed(KEYBOARD, KEY_MOUSE1)
</pre>
<p>
The function can determine if num-lock, shift-lock or scroll-lock is
currently active:
</p>
<pre class="indent">
buttonPressed(KEYBOARD, KEY_SHIFT_LOCK_ON)
</pre>
<p>
If a button is pressed together with a modifier key (SHIFT, CTRL, ALT)
<i>getc</i> returns a character like KEY_CTL_MOUSE1. But no character
constants are defined for combinations with two modifier keys (there
is no KEY_SFT_CTL_MOUSE1). With <i>buttonPressed</i> it is possible to
recogize if two modifier key are combined with a key. E.g.:
</p>
<pre class="indent">
aKey := getc(KEYBOARD);
if (aKey = KEY_CTL_MOUSE1 and buttonPressed(KEYBOARD, KEY_SHIFT)) or
   (akey = KEY_SFT_MOUSE1 and buttonPressed(KEYBOARD, KEY_CONTROL)) then
  ...
</pre>
<p>
Note that <i>buttonPressed</i> does not actually read something so using
<i>buttonPressed</i> alone will not work. Instead <i>buttonPressed</i> must be
combined with <i>getc</i>, which does the reading.
</p>
<pre class="indent">
command := getc(KEYBOARD);
if command = KEY_MOUSE1 then
  while buttonPressed(KEYBOARD, KEY_MOUSE1) do
    ... do something as long as KEY_MOUSE1 is pressed ...
  end while;
  # KEY_MOUSE1 has been released.
end if;
</pre>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if <i>button</i> is currently pressed,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="clickedXPos(in_graph_keybd_file)"><h3>clickedXPos</h3></a>
<p>
const func integer: <b>clickedXPos</b> (in graph_keybd_file: keybd)</p><dl><dd>
<p>
X position of the mouse cursor when a button was pressed.
The functions <i>clickedXPos</i> and <i>clickedYPos</i> can be used to
determine which position was "clicked".
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the X position of the mouse cursor at the time when         the last button was pressed.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="clickedYPos(in_graph_keybd_file)"><h3>clickedYPos</h3></a>
<p>
const func integer: <b>clickedYPos</b> (in graph_keybd_file: keybd)</p><dl><dd>
<p>
Y position of the mouse cursor when a button was pressed.
The functions <i>clickedXPos</i> and <i>clickedYPos</i> can be used to
determine which position was "clicked".
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the Y position of the mouse cursor at the time when         the last button was pressed.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="inputReady(in_graph_keybd_file)"><h3>inputReady</h3></a>
<p>
const func boolean: <b>inputReady</b> (in graph_keybd_file: keybd)</p><dl><dd>
<p>
Determine if at least one character can be read without blocking.
Blocking means that <i>getc</i> would wait until a key has been pressed.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if a character is available at the graphic keyboard file         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getwd(inout_graph_keybd_file)"><h3>getwd</h3></a>
<p>
const func string: <b>getwd</b> (inout graph_keybd_file: keybd)</p><dl><dd>
<p>
Read a word from the graphic keyboard file.
Before reading the word it skips spaces and tabs. The function
accepts words ending with " ", "\t", "\n", "\r\n" or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The word ending characters are not copied into the string.
That means that the "\r" of a "\r\n" sequence is silently removed.
When the function is left keybd.bufferChar contains ' ',
'\t', '\n' or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the word read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getln(inout_graph_keybd_file)"><h3>getln</h3></a>
<p>
const func string: <b>getln</b> (inout graph_keybd_file: keybd)</p><dl><dd>
<p>
Read a line from the graphic keyboard file.
The function accepts lines ending with "\n", "\r\n" or <a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
The line ending characters are not copied into the string.
That means that the "\r" of a "\r\n" sequence is silently removed.
When the function is left keybd.bufferChar contains '\n' or
<a class="link" href="char.htm#EOF" title="EOF">EOF</a>.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the line read.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="getc(inout_file,NO_WAIT)"><h3>getc</h3></a>
<p>
const func char: <b>getc</b> (inout file: inFile, NO_WAIT)</p><dl><dd>
<p>
Read a char from <i>inFile</i> or return KEY_NONE if reading would wait (block).
This function never waits until a character is received (it does not block).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the char read from <i>inFile</i>, or         KEY_NONE IF no char is available.</dd></dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/jpeg.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/keydescr.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
