<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Elliptic</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Elliptic</big></b></td>
<td align="right"><a class="link" href="../prg/elliptic.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/editline.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/enable_io.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Types</td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ecPoint">ecPoint</a></b></td></tr>
<tr><td width="30"></td><td>Type to describe a point at an elliptic curve.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ellipticCurve">ellipticCurve</a></b></td></tr>
<tr><td width="30"></td><td>Type to describe the elliptic curve y**2 = x**3 + a*x + b  (mod p).</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#jacobianPoint">jacobianPoint</a></b></td></tr>
<tr><td width="30"></td><td>Alternate type to describe a point at an elliptic curve.</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#eccKeyPair">eccKeyPair</a></b></td></tr>
<tr><td width="30"></td><td>Type to describe a pair of ECC keys (private key and public key).</td></tr></table></td></tr>
<tr><td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ecdsaSignatureType">ecdsaSignatureType</a></b></td></tr>
<tr><td width="30"></td><td>Structure to hold an ECDSA signature.</td></tr></table></td></tr>
</table>
</div>
<div>
<div><a name="ecPoint"><h3>ecPoint</h3></a>
<p>
const type: <b>ecPoint</b></p><dl><dd>
<p>
Type to describe a point at an elliptic curve.
A point is either the neutral element or it is defined by x and y.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ellipticCurve"><h3>ellipticCurve</h3></a>
<p>
const type: <b>ellipticCurve</b></p><dl><dd>
<p>
Type to describe the elliptic curve y**2 = x**3 + a*x + b  (mod p).
The value p defines the finite field F.
The values a and b specify the elliptic curve.
</p>
</dd>
</dl></div>
<hr />
<div><a name="jacobianPoint"><h3>jacobianPoint</h3></a>
<p>
const type: <b>jacobianPoint</b></p><dl><dd>
<p>
Alternate type to describe a point at an elliptic curve.
The curve points are on the elliptic curve y**2 = x**3 + a*x + b  (mod p).
This coordinates eliminate the need for expensive inversions mod p.
</p>
</dd>
</dl></div>
<hr />
<div><a name="eccKeyPair"><h3>eccKeyPair</h3></a>
<p>
const type: <b>eccKeyPair</b></p><dl><dd>
<p>
Type to describe a pair of ECC keys (private key and public key).
</p>
</dd>
</dl></div>
<hr />
<div><a name="ecdsaSignatureType"><h3>ecdsaSignatureType</h3></a>
<p>
const type: <b>ecdsaSignatureType</b></p><dl><dd>
<p>
Structure to hold an ECDSA signature.
ECDSA is the Elliptic Curve Digital Signature Algorithm.
</p>
</dd>
</dl></div>
<br /></div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Constant Summary</td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#neutralEcPoint">neutralEcPoint</a></b></td></tr>
<tr><td width="30"></td><td>The neutral point of an elliptic curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp192k1">secp192k1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp192k1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp192r1">secp192r1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp192r1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp224k1">secp224k1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp224k1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp224r1">secp224r1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp224r1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp256k1">secp256k1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp256k1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp256r1">secp256r1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp256r1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp384r1">secp384r1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp384r1.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#secp521r1">secp521r1</a></b></td></tr>
<tr><td width="30"></td><td>The elliptical curve secp521r1.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Operator Summary</td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ecPoint: point1) <b><a class="link" href="#(in_ecPoint)=(in_ecPoint)">=</a></b> (in ecPoint: point2)</td></tr>
<tr><td width="30"></td><td>Check if two elliptic curve points are equal.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2">(in ecPoint: point1) <b><a class="link" href="#(in_ecPoint)&lt;>(in_ecPoint)">&lt;></a></b> (in ecPoint: point2)</td></tr>
<tr><td width="30"></td><td>Check if two elliptic curve points are not equal.</td></tr></table></td></tr>
</table>
</div>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ecPoint(in_bigInteger,in_bigInteger)">ecPoint</a></b> (in bigInteger: x, in bigInteger: y)</td></tr>
<tr><td width="30"></td><td>Create an elliptic curve point from the given coordinates x and y.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ellipticCurve</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ellipticCurve(in_integer,in_string,in_bigInteger,in_bigInteger,in_bigInteger,in_ecPoint,in_bigInteger)">ellipticCurve</a></b> (in integer: bits, in string: name, in bigInteger: p,
    in bigInteger: a, in bigInteger: b, in ecPoint: g, in bigInteger: n)</td></tr>
<tr><td width="30"></td><td>Create an elliptic curve from the given parameters.</td></tr></table></td></tr>
<tr><td align="right" valign="top">integer</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#getSizeInBytes(in_ellipticCurve)">getSizeInBytes</a></b> (in ellipticCurve: curve)</td></tr>
<tr><td width="30"></td><td>Get the size of an elliptic curve in bytes.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#element(in_ecPoint,in_ellipticCurve)">element</a></b> (in ecPoint: point, in ellipticCurve: curve)</td></tr>
<tr><td width="30"></td><td>Test, whether 'point' is on the given elliptic curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#double(in_ellipticCurve,in_ecPoint)">double</a></b> (in ellipticCurve: curve, in ecPoint: p)</td></tr>
<tr><td width="30"></td><td>Double the point p over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#add(in_ellipticCurve,in_ecPoint,in_ecPoint)">add</a></b> (in ellipticCurve: curve, in ecPoint: p1, in ecPoint: p2)</td></tr>
<tr><td width="30"></td><td>Add the points p1 and p2 over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#mult(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger)">mult</a></b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c)</td></tr>
<tr><td width="30"></td><td>Multiply point p1 by scalar c over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jacobianPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toJacobian(in_ecPoint)">toJacobian</a></b> (in ecPoint: p)</td></tr>
<tr><td width="30"></td><td>Transform point p given as (x, y) to jacobian coordinates.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromJacobian(in_jacobianPoint,in_bigInteger)">fromJacobian</a></b> (in jacobianPoint: jp, in bigInteger: n)</td></tr>
<tr><td width="30"></td><td>Transform a point from jacobian coordinates to (x, y) mod n.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jacobianPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#double(in_ellipticCurve,in_jacobianPoint)">double</a></b> (in ellipticCurve: curve, in jacobianPoint: jp)</td></tr>
<tr><td width="30"></td><td>Double the point jp in jacobian coordinates over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jacobianPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#add(in_ellipticCurve,in_jacobianPoint,in_jacobianPoint)">add</a></b> (in ellipticCurve: curve, in jacobianPoint: jp1, in jacobianPoint: jp2)</td></tr>
<tr><td width="30"></td><td>Add the points jp1 and jp2 in jacobian coordinates over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">jacobianPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#mult(in_ellipticCurve,in_var_jacobianPoint,in_var_bigInteger)">mult</a></b> (in ellipticCurve: curve, in var jacobianPoint: jp1, in var bigInteger: c)</td></tr>
<tr><td width="30"></td><td>Multiply point jp1 by scalar c in jacobian coordinates over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#multFast(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger)">multFast</a></b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c)</td></tr>
<tr><td width="30"></td><td>Multiply point p1 by scalar c over given curve.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#multAddFast(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger,in_var_ecPoint,in_var_bigInteger)">multAddFast</a></b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c1,
                                 in var ecPoint: p2, in var bigInteger: c2)</td></tr>
<tr><td width="30"></td><td>Compute the sum of two products (ecPoint times scalar).</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ecPointCompress(in_ellipticCurve,in_ecPoint)">ecPointCompress</a></b> (in ellipticCurve: curve, in ecPoint: point)</td></tr>
<tr><td width="30"></td><td>Encode an ecPoint in compressed form.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ecPointEncode(in_ellipticCurve,in_ecPoint)">ecPointEncode</a></b> (in ellipticCurve: curve, in ecPoint: point)</td></tr>
<tr><td width="30"></td><td>Encode an ecPoint in uncompressed form.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecPoint</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#ecPointDecode(in_ellipticCurve,in_string)">ecPointDecode</a></b> (in ellipticCurve: curve, in string: encoded)</td></tr>
<tr><td width="30"></td><td>ecode an ecPoint, which can be compressed or uncompressed.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#genPrivateKey(in_ellipticCurve)">genPrivateKey</a></b> (in ellipticCurve: curve)</td></tr>
<tr><td width="30"></td><td>Generate a private key for elliptic curve cryptography (ECC).</td></tr></table></td></tr>
<tr><td align="right" valign="top">eccKeyPair</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#genEccKeyPair(in_ellipticCurve)">genEccKeyPair</a></b> (in ellipticCurve: curve)</td></tr>
<tr><td width="30"></td><td>Generate a new ECC keyPair (private key and public key).</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#verifyKeyPair(in_ellipticCurve,in_eccKeyPair)">verifyKeyPair</a></b> (in ellipticCurve: curve, in eccKeyPair: keyPair)</td></tr>
<tr><td width="30"></td><td>Verify that public and private key of an ECC keyPair fit together.</td></tr></table></td></tr>
<tr><td align="right" valign="top">ecdsaSignatureType</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#sign(in_ellipticCurve,in_var_bigInteger,in_bigInteger)">sign</a></b> (in ellipticCurve: curve, in var bigInteger: message,
    in bigInteger: privateKey)</td></tr>
<tr><td width="30"></td><td>Compute the ECDSA signature of 'message'.</td></tr></table></td></tr>
<tr><td align="right" valign="top">boolean</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#verify(in_ellipticCurve,in_var_bigInteger,in_ecdsaSignatureType,in_ecPoint)">verify</a></b> (in ellipticCurve: curve, in var bigInteger: message,
    in ecdsaSignatureType: signature, in ecPoint: publicKey)</td></tr>
<tr><td width="30"></td><td>Verify that 'signature' is a valid ECDSA signature of 'message'.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Constant Detail</td></tr></table></p>
<div><a name="neutralEcPoint"><h3>neutralEcPoint</h3></a>
<p>
const ecPoint: <b>neutralEcPoint</b></p><dl><dd>
<p>
The neutral point of an elliptic curve.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp192k1"><h3>secp192k1</h3></a>
<p>
const ellipticCurve: <b>secp192k1</b></p><dl><dd>
<p>
The elliptical curve secp192k1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp192r1"><h3>secp192r1</h3></a>
<p>
const ellipticCurve: <b>secp192r1</b></p><dl><dd>
<p>
The elliptical curve secp192r1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp224k1"><h3>secp224k1</h3></a>
<p>
const ellipticCurve: <b>secp224k1</b></p><dl><dd>
<p>
The elliptical curve secp224k1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp224r1"><h3>secp224r1</h3></a>
<p>
const ellipticCurve: <b>secp224r1</b></p><dl><dd>
<p>
The elliptical curve secp224r1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp256k1"><h3>secp256k1</h3></a>
<p>
const ellipticCurve: <b>secp256k1</b></p><dl><dd>
<p>
The elliptical curve secp256k1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp256r1"><h3>secp256r1</h3></a>
<p>
const ellipticCurve: <b>secp256r1</b></p><dl><dd>
<p>
The elliptical curve secp256r1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp384r1"><h3>secp384r1</h3></a>
<p>
const ellipticCurve: <b>secp384r1</b></p><dl><dd>
<p>
The elliptical curve secp384r1.
</p>
</dd>
</dl></div>
<hr />
<div><a name="secp521r1"><h3>secp521r1</h3></a>
<p>
const ellipticCurve: <b>secp521r1</b></p><dl><dd>
<p>
The elliptical curve secp521r1.
</p>
</dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Operator Detail</td></tr></table></p>
<div><a name="(in_ecPoint)=(in_ecPoint)"><h3>=</h3></a>
<p>
const func boolean: (in ecPoint: point1) <b>=</b> (in ecPoint: point2)</p><dl><dd>
<p>
Check if two elliptic curve points are equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>TRUE if the two points are equal,         FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="(in_ecPoint)&lt;>(in_ecPoint)"><h3>&lt;></h3></a>
<p>
const func boolean: (in ecPoint: point1) <b>&lt;></b> (in ecPoint: point2)</p><dl><dd>
<p>
Check if two elliptic curve points are not equal.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>FALSE if both numbers are equal,         TRUE otherwise.</dd></dl></dd>
</dl></div>
<br /></div>
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="ecPoint(in_bigInteger,in_bigInteger)"><h3>ecPoint</h3></a>
<p>
const func ecPoint: <b>ecPoint</b> (in bigInteger: x, in bigInteger: y)</p><dl><dd>
<p>
Create an elliptic curve point from the given coordinates x and y.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ellipticCurve(in_integer,in_string,in_bigInteger,in_bigInteger,in_bigInteger,in_ecPoint,in_bigInteger)"><h3>ellipticCurve</h3></a>
<p>
const func ellipticCurve: <b>ellipticCurve</b> (in integer: bits, in string: name, in bigInteger: p,
    in bigInteger: a, in bigInteger: b, in ecPoint: g, in bigInteger: n)</p><dl><dd>
<p>
Create an elliptic curve from the given parameters.
Creates the elliptic curve y**2 = x**3 + a*x + b  (mod p).
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>bits</tt> - Number of bits in the elliptic curve.</dd>
<dd><tt>name</tt> - Name of the elliptic curve.</dd>
<dd><tt>p</tt> - In the finite field F all computations are (mod p).</dd>
<dd><tt>a</tt> - Possible negative factor from the curve formula.</dd>
<dd><tt>b</tt> - Possible negative constant from the curve formula.</dd>
<dd><tt>g</tt> - Base point of the elliptic curve.</dd>
<dd><tt>n</tt> - Order of g (mult(g, n) = neutralEcPoint).</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="getSizeInBytes(in_ellipticCurve)"><h3>getSizeInBytes</h3></a>
<p>
const func integer: <b>getSizeInBytes</b> (in ellipticCurve: curve)</p><dl><dd>
<p>
Get the size of an elliptic curve in bytes.
This is the number of bytes necessary to represent the x or y
coordinate of an ecPoint.
</p>
</dd>
</dl></div>
<hr />
<div><a name="element(in_ecPoint,in_ellipticCurve)"><h3>element</h3></a>
<p>
const func boolean: <b>element</b> (in ecPoint: point, in ellipticCurve: curve)</p><dl><dd>
<p>
Test, whether 'point' is on the given elliptic curve.
</p>
</dd>
</dl></div>
<hr />
<div><a name="double(in_ellipticCurve,in_ecPoint)"><h3>double</h3></a>
<p>
const func ecPoint: <b>double</b> (in ellipticCurve: curve, in ecPoint: p)</p><dl><dd>
<p>
Double the point p over given curve.
Double point in y**2 = x**3 + a*x + b  (mod p).
</p>
</dd>
</dl></div>
<hr />
<div><a name="add(in_ellipticCurve,in_ecPoint,in_ecPoint)"><h3>add</h3></a>
<p>
const func ecPoint: <b>add</b> (in ellipticCurve: curve, in ecPoint: p1, in ecPoint: p2)</p><dl><dd>
<p>
Add the points p1 and p2 over given curve.
Addition of points in y**2 = x**3 + a*x + b  (mod p).
</p>
</dd>
</dl></div>
<hr />
<div><a name="mult(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger)"><h3>mult</h3></a>
<p>
const func ecPoint: <b>mult</b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c)</p><dl><dd>
<p>
Multiply point p1 by scalar c over given curve.
Scalar multiplication p1 * c = p1 + p1 + ... + p1 (c times).
</p>
</dd>
</dl></div>
<hr />
<div><a name="toJacobian(in_ecPoint)"><h3>toJacobian</h3></a>
<p>
const func jacobianPoint: <b>toJacobian</b> (in ecPoint: p)</p><dl><dd>
<p>
Transform point p given as (x, y) to jacobian coordinates.
</p>
</dd>
</dl></div>
<hr />
<div><a name="fromJacobian(in_jacobianPoint,in_bigInteger)"><h3>fromJacobian</h3></a>
<p>
const func ecPoint: <b>fromJacobian</b> (in jacobianPoint: jp, in bigInteger: n)</p><dl><dd>
<p>
Transform a point from jacobian coordinates to (x, y) mod n.
</p>
</dd>
</dl></div>
<hr />
<div><a name="double(in_ellipticCurve,in_jacobianPoint)"><h3>double</h3></a>
<p>
const func jacobianPoint: <b>double</b> (in ellipticCurve: curve, in jacobianPoint: jp)</p><dl><dd>
<p>
Double the point jp in jacobian coordinates over given curve.
Double point in y**2 = x**3 + a*x + b  (mod p).
</p>
</dd>
</dl></div>
<hr />
<div><a name="add(in_ellipticCurve,in_jacobianPoint,in_jacobianPoint)"><h3>add</h3></a>
<p>
const func jacobianPoint: <b>add</b> (in ellipticCurve: curve, in jacobianPoint: jp1, in jacobianPoint: jp2)</p><dl><dd>
<p>
Add the points jp1 and jp2 in jacobian coordinates over given curve.
Addition of points in y**2 = x**3 + a*x + b  (mod p).
</p>
</dd>
</dl></div>
<hr />
<div><a name="mult(in_ellipticCurve,in_var_jacobianPoint,in_var_bigInteger)"><h3>mult</h3></a>
<p>
const func jacobianPoint: <b>mult</b> (in ellipticCurve: curve, in var jacobianPoint: jp1, in var bigInteger: c)</p><dl><dd>
<p>
Multiply point jp1 by scalar c in jacobian coordinates over given curve.
Scalar multiplication jp1 * c = jp1 + jp1 + ... + jp1 (c times).
</p>
</dd>
</dl></div>
<hr />
<div><a name="multFast(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger)"><h3>multFast</h3></a>
<p>
const func ecPoint: <b>multFast</b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c)</p><dl><dd>
<p>
Multiply point p1 by scalar c over given curve.
Scalar multiplication p1 * c = p1 + p1 + ... + p1 (c times).
Encapsulates the multiplication that is done with jacobian coordinates.
</p>
</dd>
</dl></div>
<hr />
<div><a name="multAddFast(in_ellipticCurve,in_var_ecPoint,in_var_bigInteger,in_var_ecPoint,in_var_bigInteger)"><h3>multAddFast</h3></a>
<p>
const func ecPoint: <b>multAddFast</b> (in ellipticCurve: curve, in var ecPoint: p1, in var bigInteger: c1,
                                 in var ecPoint: p2, in var bigInteger: c2)</p><dl><dd>
<p>
Compute the sum of two products (ecPoint times scalar).
Encapsulates the computation that is done with jacobian coordinates.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ecPointCompress(in_ellipticCurve,in_ecPoint)"><h3>ecPointCompress</h3></a>
<p>
const func string: <b>ecPointCompress</b> (in ellipticCurve: curve, in ecPoint: point)</p><dl><dd>
<p>
Encode an ecPoint in compressed form.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ecPointEncode(in_ellipticCurve,in_ecPoint)"><h3>ecPointEncode</h3></a>
<p>
const func string: <b>ecPointEncode</b> (in ellipticCurve: curve, in ecPoint: point)</p><dl><dd>
<p>
Encode an ecPoint in uncompressed form.
</p>
</dd>
</dl></div>
<hr />
<div><a name="ecPointDecode(in_ellipticCurve,in_string)"><h3>ecPointDecode</h3></a>
<p>
const func ecPoint: <b>ecPointDecode</b> (in ellipticCurve: curve, in string: encoded)</p><dl><dd>
<p>
ecode an ecPoint, which can be compressed or uncompressed.
</p>
</dd>
</dl></div>
<hr />
<div><a name="genPrivateKey(in_ellipticCurve)"><h3>genPrivateKey</h3></a>
<p>
const func bigInteger: <b>genPrivateKey</b> (in ellipticCurve: curve)</p><dl><dd>
<p>
Generate a private key for elliptic curve cryptography (ECC).
</p>
</dd>
</dl></div>
<hr />
<div><a name="genEccKeyPair(in_ellipticCurve)"><h3>genEccKeyPair</h3></a>
<p>
const func eccKeyPair: <b>genEccKeyPair</b> (in ellipticCurve: curve)</p><dl><dd>
<p>
Generate a new ECC keyPair (private key and public key).
</p>
</dd>
</dl></div>
<hr />
<div><a name="verifyKeyPair(in_ellipticCurve,in_eccKeyPair)"><h3>verifyKeyPair</h3></a>
<p>
const func boolean: <b>verifyKeyPair</b> (in ellipticCurve: curve, in eccKeyPair: keyPair)</p><dl><dd>
<p>
Verify that public and private key of an ECC keyPair fit together.
</p>
</dd>
</dl></div>
<hr />
<div><a name="sign(in_ellipticCurve,in_var_bigInteger,in_bigInteger)"><h3>sign</h3></a>
<p>
const func ecdsaSignatureType: <b>sign</b> (in ellipticCurve: curve, in var bigInteger: message,
    in bigInteger: privateKey)</p><dl><dd>
<p>
Compute the ECDSA signature of 'message'.
ECDSA is the Elliptic Curve Digital Signature Algorithm.
</p>
</dd>
</dl></div>
<hr />
<div><a name="verify(in_ellipticCurve,in_var_bigInteger,in_ecdsaSignatureType,in_ecPoint)"><h3>verify</h3></a>
<p>
const func boolean: <b>verify</b> (in ellipticCurve: curve, in var bigInteger: message,
    in ecdsaSignatureType: signature, in ecPoint: publicKey)</p><dl><dd>
<p>
Verify that 'signature' is a valid ECDSA signature of 'message'.
ECDSA is the Elliptic Curve Digital Signature Algorithm.
</p>
</dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../libraries/editline.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/enable_io.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
  </body>
</html>
