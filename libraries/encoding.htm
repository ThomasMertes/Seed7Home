<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Library: Encoding</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Libraries</big></a>
<a class="menu" href="aes.htm">AES</a>
<a class="menu" href="aes_gcm.htm">AES GCM</a>
<a class="menu" href="ar.htm">Ar</a>
<a class="menu" href="arc4.htm">ARC4</a>
<a class="menu" href="archive.htm">Archive</a>
<a class="menu" href="archive_base.htm">Archive base</a>
<a class="menu" href="array.htm">Array</a>
<a class="menu" href="asn1.htm">ASN.1</a>
<a class="menu" href="basearray.htm">Base idx array</a>
<a class="menu" href="bigfile.htm">Bigfile</a>
<a class="menu" href="bigint.htm">Bigint</a>
<a class="menu" href="bigrat.htm">Bigrat</a>
<a class="menu" href="bin32.htm">Bin32</a>
<a class="menu" href="bin64.htm">Bin64</a>
<a class="menu" href="bitdata.htm">Bitdata</a>
<a class="menu" href="bitmapfont.htm">Bitmapfont</a>
<a class="menu" href="bitset.htm">Bitset</a>
<a class="menu" href="bitsetof.htm">Bitsetof</a>
<a class="menu" href="blowfish.htm">Blowfish</a>
<a class="menu" href="bmp.htm">BMP</a>
<a class="menu" href="boolean.htm">Boolean</a>
<a class="menu" href="browser.htm">Browser</a>
<a class="menu" href="bstring.htm">Bstring</a>
<a class="menu" href="bytedata.htm">Bytedata</a>
<a class="menu" href="bzip2.htm">Bzip2</a>
<a class="menu" href="cards.htm">Cards</a>
<a class="menu" href="category.htm">Category</a>
<a class="menu" href="cc_conf.htm">CC config</a>
<a class="menu" href="ccittfax.htm">CCITT Fax</a>
<a class="menu" href="cgi.htm">Cgi</a>
<a class="menu" href="cgidialog.htm">Cgi dialog</a>
<a class="menu" href="char.htm">Char</a>
<a class="menu" href="charsets.htm">Charsets</a>
<a class="menu" href="cipher.htm">Cipher</a>
<a class="menu" href="clib_file.htm">Clib_file</a>
<a class="menu" href="color.htm">Color</a>
<a class="menu" href="cli_cmds.htm">CLI commands</a>
<a class="menu" href="complex.htm">Complex</a>
<a class="menu" href="compress.htm">Compress</a>
<a class="menu" href="console.htm">Console</a>
<a class="menu" href="cpio.htm">Cpio</a>
<a class="menu" href="crc32.htm">Crc32</a>
<a class="menu" href="csv.htm">Csv</a>
<a class="menu" href="db_prop.htm">DB properties</a>
<a class="menu" href="deflate.htm">Deflate</a>
<a class="menu" href="des.htm">DES</a>
<a class="menu" href="dialog.htm">Dialog</a>
<a class="menu" href="dir.htm">Dir</a>
<a class="menu" href="draw.htm">Draw</a>
<a class="menu" href="duration.htm">Duration</a>
<a class="menu" href="echo.htm">Echo</a>
<a class="menu" href="editline.htm">Editline</a>
<a class="menu" href="elf.htm">ELF</a>
<a class="menu" href="elliptic.htm">Elliptic</a>
<a class="menu" href="enable_io.htm">Enable_io</a>
<a class="menu" href="encoding.htm">Encoding</a>
<a class="menu" href="enumeration.htm">Enumeration</a>
<a class="menu" href="environment.htm">Environment</a>
<a class="menu" href="exif.htm">Exif</a>
<a class="menu" href="external_file.htm">External_file</a>
<a class="menu" href="file.htm">File</a>
<a class="menu" href="filesys.htm">File system</a>
<a class="menu" href="fileutil.htm">File utilities</a>
<a class="menu" href="fixarray.htm">Fixed size array</a>
<a class="menu" href="float.htm">Float</a>
<a class="menu" href="font.htm">Font</a>
<a class="menu" href="forloop.htm">Forloop</a>
<a class="menu" href="ftp.htm">Ftp</a>
<a class="menu" href="getf.htm">Getf</a>
<a class="menu" href="gethttp.htm">Gethttp</a>
<a class="menu" href="gethttps.htm">Gethttps</a>
<a class="menu" href="gif.htm">GIF</a>
<a class="menu" href="graph.htm">Graph</a>
<a class="menu" href="graph_file.htm">Graph_file</a>
<a class="menu" href="gzip.htm">Gzip</a>
<a class="menu" href="hash.htm">Hash</a>
<a class="menu" href="hashsetof.htm">Hashsetof</a>
<a class="menu" href="hmac.htm">Hmac</a>
<a class="menu" href="html.htm">HTML</a>
<a class="menu" href="html_ent.htm">Html_ent</a>
<a class="menu" href="htmldom.htm">Htmldom</a>
<a class="menu" href="httpserv.htm">Httpserv</a>
<a class="menu" href="http_response.htm">Http response</a>
<a class="menu" href="huffman.htm">Huffman</a>
<a class="menu" href="ico.htm">ICO format</a>
<a class="menu" href="idxarray.htm">Idxarray</a>
<a class="menu" href="image.htm">Image</a>
<a class="menu" href="imagefile.htm">Image file</a>
<a class="menu" href="inflate.htm">Inflate</a>
<a class="menu" href="inifile.htm">Inifile</a>
<a class="menu" href="integer.htm">Integer</a>
<a class="menu" href="iobuffer.htm">I/O Buffer</a>
<a class="menu" href="jpeg.htm">JPEG</a>
<a class="menu" href="json.htm">JSON</a>
<a class="menu" href="json_serde.htm">JSON serialize</a>
<a class="menu" href="keybd.htm">Keybd</a>
<a class="menu" href="keydescr.htm">Key descriptions</a>
<a class="menu" href="line.htm">Line</a>
<a class="menu" href="leb128.htm">LEB128</a>
<a class="menu" href="listener.htm">Listener</a>
<a class="menu" href="logfile.htm">Log file</a>
<a class="menu" href="lower.htm">Lower case filter</a>
<a class="menu" href="lzma.htm">LZMA</a>
<a class="menu" href="lzw.htm">LZW</a>
<a class="menu" href="magic.htm">Magic numbers</a>
<a class="menu" href="make.htm">Make</a>
<a class="menu" href="makedata.htm">Make data</a>
<a class="menu" href="math.htm">Math</a>
<a class="menu" href="mixarith.htm">Mixed arithmetic</a>
<a class="menu" href="more.htm">More filter</a>
<a class="menu" href="msgdigest.htm">Msgdigest</a>
<a class="menu" href="null_file.htm">Null_file</a>
<a class="menu" href="osfiles.htm">Osfiles</a>
<a class="menu" href="pem.htm">PEM</a>
<a class="menu" href="pic_util.htm">Picture utility</a>
<a class="menu" href="pixelimage.htm">Pixel image</a>
<a class="menu" href="pixmap_file.htm">Pixmap_file</a>
<a class="menu" href="pixmapfont.htm">Pixmapfont</a>
<a class="menu" href="pkcs1.htm">PKCS #1</a>
<a class="menu" href="png.htm">PNG</a>
<a class="menu" href="poll.htm">Poll</a>
<a class="menu" href="pbm.htm">PBM</a>
<a class="menu" href="pgm.htm">PGM</a>
<a class="menu" href="ppm.htm">PPM</a>
<a class="menu" href="process.htm">Process</a>
<a class="menu" href="progs.htm">Progs</a>
<a class="menu" href="propertyfile.htm">Propertyfile</a>
<a class="menu" href="rational.htm">Rational</a>
<a class="menu" href="reference.htm">Reference</a>
<a class="menu" href="ref_list.htm">Ref_list</a>
<a class="menu" href="rpm.htm">Rpm</a>
<a class="menu" href="rpmext.htm">Rpm extension</a>
<a class="menu" href="scanfile.htm">Scanfile</a>
<a class="menu" href="scanjson.htm">Scan JSON</a>
<a class="menu" href="scanstri.htm">Scanstri</a>
<a class="menu" href="scantoml.htm">Scan TOML</a>
<a class="menu" href="set.htm">Set</a>
<a class="menu" href="shell.htm">Shell</a>
<a class="menu" href="showtls.htm">Show TLS</a>
<a class="menu" href="smtp.htm">Smtp</a>
<a class="menu" href="sockbase.htm">Sockbase</a>
<a class="menu" href="socket.htm">Socket</a>
<a class="menu" href="sql_base.htm">SQL base</a>
<a class="menu" href="stars.htm">Stars</a>
<a class="menu" href="stdio.htm">Stdio</a>
<a class="menu" href="strifile.htm">Strifile</a>
<a class="menu" href="string.htm">String</a>
<a class="menu" href="stritext.htm">Stritext</a>
<a class="menu" href="struct_elem.htm">Struct element</a>
<a class="menu" href="subfile.htm">Sub file</a>
<a class="menu" href="subrange.htm">Subrange</a>
<a class="menu" href="tar.htm">Tar</a>
<a class="menu" href="tar_cmds.htm">Tar commands</a>
<a class="menu" href="tee.htm">Tee file</a>
<a class="menu" href="text.htm">Text</a>
<a class="menu" href="tga.htm">TGA</a>
<a class="menu" href="tiff.htm">Tiff</a>
<a class="menu" href="time.htm">Time</a>
<a class="menu" href="tls.htm">TLS/SSL</a>
<a class="menu" href="tdes.htm">Triple DES</a>
<a class="menu" href="unicode.htm">Unicode</a>
<a class="menu" href="upper.htm">Upper case filter</a>
<a class="menu" href="utf16.htm">Utf16</a>
<a class="menu" href="utf8.htm">Utf8</a>
<a class="menu" href="vectorfont.htm">Vectorfont</a>
<a class="menu" href="vector3d.htm">3D Vector</a>
<a class="menu" href="wildcard.htm">Wildcard</a>
<a class="menu" href="window.htm">Window</a>
<a class="menu" href="wrinum.htm">Wrinum</a>
<a class="menu" href="x509cert.htm">X.509</a>
<a class="menu" href="xmldom.htm">Xmldom</a>
<a class="menu" href="xml_ent.htm">Xml_ent</a>
<a class="menu" href="xz.htm">XZ</a>
<a class="menu" href="zip.htm">Zip</a>
<a class="menu" href="zstd.htm">Zstandard</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Libraries</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Encoding</big></b></td>
<td align="right"><a class="link" href="../lib/encoding.htm">Source&nbsp;Code</a></td>
<td>
<table width="10">
</table>
</td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/enable_io.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/enumeration.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<div><p></p>
<table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
Function Summary</td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toBase64(in_string)">toBase64</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with the Base64 encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromBase64(in_string)">fromBase64</a></b> (in string: base64)</td></tr>
<tr><td width="30"></td><td>Decode a Base64 encoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toQuotedPrintable(in_string)">toQuotedPrintable</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with the Quoted-printable encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromQuotedPrintable(in_string)">fromQuotedPrintable</a></b> (in string: quoted)</td></tr>
<tr><td width="30"></td><td>Decode a quoted-printable encoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toUuencoded(in_string)">toUuencoded</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with uuencoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromUuencoded(in_string)">fromUuencoded</a></b> (in string: uuencoded)</td></tr>
<tr><td width="30"></td><td>Decode an uuencoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toPercentEncoded(in_string)">toPercentEncoded</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with percent-encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromPercentEncoded(in_string)">fromPercentEncoded</a></b> (in string: percentEncoded)</td></tr>
<tr><td width="30"></td><td>Decode a percent-encoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toUrlEncoded(in_string)">toUrlEncoded</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with URL encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromUrlEncoded(in_string)">fromUrlEncoded</a></b> (in string: urlEncoded)</td></tr>
<tr><td width="30"></td><td>Decode an URL encoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toAscii85(in_string)">toAscii85</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with the Ascii85 encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromAscii85(in_string)">fromAscii85</a></b> (in string: ascii85)</td></tr>
<tr><td width="30"></td><td>Decode an Ascii85 encoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toAsciiHex(in_string)">toAsciiHex</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with the AsciiHex encoding.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromAsciiHex(in_string)">fromAsciiHex</a></b> (in string: asciiHex)</td></tr>
<tr><td width="30"></td><td>Decode an AsciiHex encoded string.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toBase(in_bigInteger,in_string)">toBase</a></b> (in bigInteger: number, in string: digits)</td></tr>
<tr><td width="30"></td><td>Encode a number with a positional numeric system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">bigInteger</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromBaseToBigInt(in_string,in_string)">fromBaseToBigInt</a></b> (in string: encoded, in string: digits)</td></tr>
<tr><td width="30"></td><td>Decode a string that has been encoded with a positional numeric system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toBase(in_string,in_string)">toBase</a></b> (in string: byteStri, in string: digits)</td></tr>
<tr><td width="30"></td><td>Encode a string of bytes with a positional numeric system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromBase(in_string,in_string)">fromBase</a></b> (in string: encoded, in string: digits)</td></tr>
<tr><td width="30"></td><td>Decode a string that has been encoded with a positional numeric system.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#toBase58(in_string)">toBase58</a></b> (in string: byteStri)</td></tr>
<tr><td width="30"></td><td>Encode a string with the Base58 encoding used by Bitcoin.</td></tr></table></td></tr>
<tr><td align="right" valign="top">string</td>
<td><table border="0" cellspacing="0" cellpadding="0">
<tr><td colspan="2"><b><a class="link" href="#fromBase58(in_string)">fromBase58</a></b> (in string: base58)</td></tr>
<tr><td width="30"></td><td>Decode a Base58 encoded string.</td></tr></table></td></tr>
</table>
</div>
<br />
<div>
<p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
Function Detail</td></tr></table></p>
<div><a name="toBase64(in_string)"><h3>toBase64</h3></a>
<p>
const func string: <b>toBase64</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with the Base64 encoding.
Base64 encodes a byte string as ASCII string. This is done by
taking packs of 6-bits and translating them into a radix-64
representation. The radix-64 digits are encoded with letters
(upper case followed by lower case), digits and the characters
'+' and '/'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the Base64 encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromBase64(in_string)"><h3>fromBase64</h3></a>
<p>
const func string: <b>fromBase64</b> (in string: base64)</p><dl><dd>
<p>
Decode a Base64 encoded string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>base64</tt> - Base64 encoded string without leading or trailing        whitespace characters.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>base64</i> is not in Base64 format.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toQuotedPrintable(in_string)"><h3>toQuotedPrintable</h3></a>
<p>
const func string: <b>toQuotedPrintable</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with the Quoted-printable encoding.
Quoted-printable encodes a byte string as ASCII string. This
is done by encoding printable ASCII characters except '=' as
themself. Other byte values are encoded with '=' followed by two
hexadecimal digits representing the byte's numeric value.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromQuotedPrintable(in_string)"><h3>fromQuotedPrintable</h3></a>
<p>
const func string: <b>fromQuotedPrintable</b> (in string: quoted)</p><dl><dd>
<p>
Decode a quoted-printable encoded string.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>quoted</i> is not in quoted-printable format.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toUuencoded(in_string)"><h3>toUuencoded</h3></a>
<p>
const func string: <b>toUuencoded</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with uuencoding.
Uuencode encodes a byte string as ASCII string. This is done
by taking packs of 6-bits and translating them into a radix-64
representation. The radix-64 digits are encoded with consecutive
ASCII characters starting from ' ' (which represents 0). Every
line starts with a radix-64 digit character indicating the number
of data bytes encoded on that line. Some newer uuencode tools use
grave accent ('`') instead of space (' ') to encode 0. This can
be emulated by using: replace(toUuencoded(source), " ", "`").
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromUuencoded(in_string)"><h3>fromUuencoded</h3></a>
<p>
const func string: <b>fromUuencoded</b> (in string: uuencoded)</p><dl><dd>
<p>
Decode an uuencoded string.
Space (' ') and grave accent ('`') both are used to encode 0.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>uuencoded</i> is not in uuencoded format.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toPercentEncoded(in_string)"><h3>toPercentEncoded</h3></a>
<p>
const func string: <b>toPercentEncoded</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with percent-encoding.
Percent-encoding encodes a byte string as ASCII string. This is done
by encoding all characters, which are not in the set of unreserved
characters (A-Z, a-z, 0-9 - _ . ~). The encoding uses a percent sign
('%') followed by two hexadecimal digits, which represent the ordinal
value of the encoded character.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromPercentEncoded(in_string)"><h3>fromPercentEncoded</h3></a>
<p>
const func string: <b>fromPercentEncoded</b> (in string: percentEncoded)</p><dl><dd>
<p>
Decode a percent-encoded string.
Percent-encoding encodes a byte string as ASCII string. It uses
the percent sign ('%') followed by two hexadecimal digits to
encode characters that otherwise would not be allowed in an
URL. Allowed URL characters are encoded as themself.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="toUrlEncoded(in_string)"><h3>toUrlEncoded</h3></a>
<p>
const func string: <b>toUrlEncoded</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with URL encoding.
URL encoding encodes a byte string as ASCII string. This is done
by encoding all characters, which are not in the set of unreserved
characters (A-Z, a-z, 0-9 - _ . ~). The encoding uses a percent sign
('%') followed by two hexadecimal digits, which represent the ordinal
value of the encoded character. A plus sign ('+') is used to encode
a space (' ').
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromUrlEncoded(in_string)"><h3>fromUrlEncoded</h3></a>
<p>
const func string: <b>fromUrlEncoded</b> (in string: urlEncoded)</p><dl><dd>
<p>
Decode an URL encoded string.
URL encoding encodes a byte string as ASCII string. It uses
the percent sign ('%') followed by two hexadecimal digits to
encode characters that otherwise would not be allowed in an
URL. A plus sign ('+') is used to encode a space (' ').
Allowed URL characters are encoded as themself.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="toAscii85(in_string)"><h3>toAscii85</h3></a>
<p>
const func string: <b>toAscii85</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with the Ascii85 encoding.
Ascii85 encodes a byte string as ASCII string. This is done by
encoding every four bytes with five printable ASCII characters.
Five radix 85 digits provide enough possible values to encode
the possible values of four bytes. The radix 85 digits are encoded
with the characters '!' (encodes 0) through 'u' (encodes 84).
If the last block of the byte string contains fewer than 4 bytes,
the block is padded with up to three null bytes before encoding.
After encoding, as many bytes as were added as padding are removed
from the end of the output. In files the end of an Ascii85 encoding
is marked with "~>" (this end marker is not added by toAscii85).
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the Ascii85 encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromAscii85(in_string)"><h3>fromAscii85</h3></a>
<p>
const func string: <b>fromAscii85</b> (in string: ascii85)</p><dl><dd>
<p>
Decode an Ascii85 encoded string.
Every block of five radix 85 characters is decoded to four bytes.
Radix 85 characters are between '!' (encodes 0) and 'u' (encodes 84).
The character 'z' is used to encode a block of four zero bytes.
White space in the Ascii85 encoded string is ignored.
The last block is padded to 5 bytes with the Ascii85 character 'u',
and as many bytes as were added as padding are omitted from the
end of the output.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>ascii85</i> is not in Ascii85 format.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toAsciiHex(in_string)"><h3>toAsciiHex</h3></a>
<p>
const func string: <b>toAsciiHex</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with the AsciiHex encoding.
AsciiHex encodes a byte string as ASCII string.
In AsciiHex each byte is encoded with two hexadecimal digits.
White-space characters in an AsciiHex encoded string are ignored.
The AsciiHex encoded string ends with the character '>'.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the AsciiHex encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromAsciiHex(in_string)"><h3>fromAsciiHex</h3></a>
<p>
const func string: <b>fromAsciiHex</b> (in string: asciiHex)</p><dl><dd>
<p>
Decode an AsciiHex encoded string.
In AsciiHex each byte is encoded with two hexadecimal digits.
White-space characters in an AsciiHex encoded string are ignored.
The AsciiHex encoded string ends with the character '>'.
If a '>' follows the first hexadecimal digit of an encoded byte
the decoding works as if a '0' is at the place of the '>'.
The decoder works also correctly if the '>' is missing.
</p>
</dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If <i>asciiHex</i> is not in AsciiHex format.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toBase(in_bigInteger,in_string)"><h3>toBase</h3></a>
<p>
const func string: <b>toBase</b> (in bigInteger: number, in string: digits)</p><dl><dd>
<p>
Encode a number with a positional numeric system.
The encoded string starts with the most significant digit.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>number</tt> - BigInteger number to be encoded.</dd>
<dd><tt>digits</tt> - The digits used by the positional numeric system.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
</dl></div>
<hr />
<div><a name="fromBaseToBigInt(in_string,in_string)"><h3>fromBaseToBigInt</h3></a>
<p>
const func bigInteger: <b>fromBaseToBigInt</b> (in string: encoded, in string: digits)</p><dl><dd>
<p>
Decode a string that has been encoded with a positional numeric system.
The encoded string starts with the most significant digit.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>encoded</tt> - String containing the encoded data.</dd>
<dd><tt>digits</tt> - The digits used by the positional numeric system.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded bigInteger Number.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters are present, that are not found                        in <i>digits</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toBase(in_string,in_string)"><h3>toBase</h3></a>
<p>
const func string: <b>toBase</b> (in string: byteStri, in string: digits)</p><dl><dd>
<p>
Encode a string of bytes with a positional numeric system.
The encoded string starts with the most significant digit.
Leading zero bytes in <i>byteStri</i> are converted into leading
zero digits in the encoded string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>byteStri</tt> - String of bytes to be encoded.</dd>
<dd><tt>digits</tt> - The digits used by the positional numeric system.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromBase(in_string,in_string)"><h3>fromBase</h3></a>
<p>
const func string: <b>fromBase</b> (in string: encoded, in string: digits)</p><dl><dd>
<p>
Decode a string that has been encoded with a positional numeric system.
The encoded string starts with the most significant digit.
Leading zero digits in the encoded string are converted into leading
zero bytes in the decoded string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>encoded</tt> - String containing the encoded data.</dd>
<dd><tt>digits</tt> - The digits used by the positional numeric system.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters are present, that are not found                        in <i>digits</i>.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="toBase58(in_string)"><h3>toBase58</h3></a>
<p>
const func string: <b>toBase58</b> (in string: byteStri)</p><dl><dd>
<p>
Encode a string with the Base58 encoding used by Bitcoin.
Leading zero bytes ('\0;') in <i>byteStri</i> are converted into
leading zero digits ('1') in the encoded string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>byteStri</tt> - String of bytes to be encoded.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the encoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters beyond '\255;' are present.</dd>
</dl></dd>
</dl></div>
<hr />
<div><a name="fromBase58(in_string)"><h3>fromBase58</h3></a>
<p>
const func string: <b>fromBase58</b> (in string: base58)</p><dl><dd>
<p>
Decode a Base58 encoded string.
Leading '1' characters in <i>base58</i> are converted into
leading zero bytes ('\0;') in the decoded string.
</p>
</dd>
<dd><dl><dt><b>Parameters:</b></dt>
<dd><tt>base58</tt> - String containing Base58 encoded data.</dd>
</dl></dd>
<dd><dl><dt><b>Returns:</b></dt>
<dd>the decoded string.</dd></dl></dd>
<dd><dl><dt><b>Raises:</b></dt>
<dd><tt>RANGE_ERROR</tt> - If characters are present, that are not valid                        in the Base58 encoding used by Bitcoin.</dd>
</dl></dd>
</dl></div>
<br /></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../libraries/enable_io.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../libraries/enumeration.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
