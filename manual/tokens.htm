<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Tokens</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#TOKENS"><big>Tokens</big></a>
<a class="menu" href="#White_space">White&nbsp;space</a>
<a class="menu" href="#Spaces">Spaces</a>
<a class="menu" href="#Comments">Comment</a>
<a class="menu" href="#Line_comments">Line&nbsp;comment</a>
<a class="menu" href="#Identifiers">Identifiers</a>
<a class="menu" href="#Name_identifiers">Names</a>
<a class="menu" href="#Special_identifiers">Special ids</a>
<a class="menu" href="#Brackets">Brackets</a>
<a class="menu" href="#Literals">Literals</a>
<a class="menu" href="#Integer_literals">integer</a>
<a class="menu" href="#BigInteger_literals">bigInteger</a>
<a class="menu" href="#Float_literals">float</a>
<a class="menu" href="#String_literals">string</a>
<a class="menu" href="#Character_literals">char</a>
<a class="menu" href="#Unicode_characters">Unicode</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Tokens</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/syntax.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/expr.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="TOKENS"><h2>10. TOKENS</h2></a>

<p>
    A program consists of a sequence of tokens which may be delimited
  by white space. There are two types of tokens:
</p><dl>
    <dd><a class="ebnf" href="#ebnf_identifier">identifier</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_literal">literal</a>s</dd>
</dl><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt>program ::=</dt><dd>
      { <a class="ebnf" href="#ebnf_white_space">white_space</a> | <a class="ebnf" href="#ebnf_token">token</a> } .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_token">token</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_identifier">identifier</a> | <a class="ebnf" href="#ebnf_literal">literal</a> .</dd>
</dl></tt></dd></dl><p>
  Characters that introduce neither white_space nor a token trigger a
  <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst255.sd7(1):5: <a name="CHAR_ILLEGAL_example"></a><a class="link" href="errors.htm#CHAR_ILLEGAL">Illegal character in text "\8;" (U+0008)</a>
(* Illegal character *) \b
------------------------^
</pre>

<a name="White_space"><h3>10.1 White space</h3></a>
<p>
    There are three types of white space
</p><dl>
    <dd><a class="ebnf" href="#ebnf_space">space</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_comment">comment</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_line_comment">line comment</a>s</dd>
</dl><p>
  White space always terminates a preceding <a class="link" href="#Identifiers">identifier</a>, <a class="link" href="#Integer_literals">integer</a>,
  <a class="link" href="#BigInteger_literals">bigInteger</a> or <a class="link" href="#Float_literals">float</a> literal. Some white space is required to
  separate otherwise adjacent tokens.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_white_space">white_space</a> ::=</dt><dd>
      ( <a class="ebnf" href="#ebnf_space">space</a> | <a class="ebnf" href="#ebnf_comment">comment</a> | <a class="ebnf" href="#ebnf_line_comment">line_comment</a> )<br />
      { <a class="ebnf" href="#ebnf_space">space</a> | <a class="ebnf" href="#ebnf_comment">comment</a> | <a class="ebnf" href="#ebnf_line_comment">line_comment</a> } .</dd>
</dl></tt></dd></dl><p></p>

<a name="Spaces"><h4>10.1.1 Spaces</h4></a>
<p>
    There are several types of space characters which are ignored
  except as they separate tokens:
</p><dl><dd>
    blanks, horizontal tabs, carriage returns and new lines.
</dd></dl><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_space">space</a> ::=</dt><dd>
      ' ' | TAB | CR | NL .</dd>
</dl></tt></dd></dl><p></p>

<a name="Comments"><h4>10.1.2 Comments</h4></a>
<p>
    Comments are introduced with the characters <span class="comment">(* and are
  terminated with the characters *)</span> . For example:
</p><pre class="indent">
<span class="comment">(* This is a comment *)</span>
</pre><p>
  Comments can span over multiple lines and comment nesting is
  allowed:
</p><pre class="indent">
<span class="comment">(* This is a comment that continues
   in the next line (* and has a nesting comment inside *) *)</span>
</pre><p>
  This allows commenting out a larger section of the program,
  which itself contains comments. Comments cannot occur within
  <a class="link" href="#String_literals">string</a> and <a class="link" href="#Character_literals">character literals</a>.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_comment">comment</a> ::=</dt><dd>
      '(*' { <a class="ebnf" href="#ebnf_any_character">any_character</a> } '*)' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_any_character">any_character</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_simple_literal_character">simple_literal_character</a> | <a class="ebnf" href="#ebnf_apostrophe">apostrophe</a> | '"' | '\' |<br />
      <a class="ebnf" href="#ebnf_control_character">control_character</a>  .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_control_character">control_character</a> ::=</dt><dd>
      NUL | SOH | STX | ETX | EOT | ENQ | ACK | BEL |<br />
      BS&nbsp; | TAB | LF&nbsp; | VT&nbsp; | FF&nbsp; | CR&nbsp; | SO&nbsp; | SI&nbsp; |<br />
      DLE | DC1 | DC2 | DC3 | DC4 | NAK | SYN | ETB |<br />
      CAN | EM&nbsp; | SUB | ESC | FS&nbsp; | GS&nbsp; | RS&nbsp; | US&nbsp; |<br />
      DEL .</dd>
</dl></tt></dd></dl><p>
  If a comment is not closed at the end of the main file a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>
  is triggered:
</p><pre class="indent">
*** tst256.sd7(2):6: <a name="COMMENTOPEN_example"<</a><a class="link" href="errors.htm#COMMENTOPEN">Unclosed comment</a>
(* Unclosed comment
</pre>

<a name="Line_comments"><h4>10.1.3 Line comments</h4></a>
<p>
    Line comments are introduced with the character <span class="comment"># and are
  terminated with the end of the line.</span><br />
  For example:
</p><pre class="indent">
<span class="comment"># This is a comment</span>
</pre><p>
  Comments cannot occur within <a class="link" href="#String_literals">string</a>, <a class="link" href="#Character_literals">character</a> and numerical
  literals.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_line_comment">line_comment</a> ::=</dt><dd>
      '#' { <a class="ebnf" href="#ebnf_any_character">any_character</a> } NL .</dd>
</dl></tt></dd></dl><p></p>

<a name="Identifiers"><h3>10.2 Identifiers</h3></a>
<p>
    There are three types of identifiers
</p><dl>
    <dd><a class="ebnf" href="#ebnf_name_identifier">name identifier</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_special_identifier">special identifier</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_bracket">bracket</a></dd>
</dl><p>
  Identifiers can be written adjacent except that between two
  name identifiers and between two special identifiers white space
  must be used to separate them.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_identifier">identifier</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_name_identifier">name_identifier</a> | <a class="ebnf" href="#ebnf_special_identifier">special_identifier</a> | <a class="ebnf" href="#ebnf_bracket">bracket</a> .</dd>
</dl></tt></dd></dl><p></p>

<a name="Name_identifiers"><h4>10.2.1 Name identifiers</h4></a>
<p>
    A name identifier is a sequence of letters, digits and
  underscores ( _ ). The first character must be a letter or an
  underscore. Examples of name identifiers are:
</p><pre class="indent">
NUMBER  integer  const  if  UPPER_LIMIT  LowerLimit  x5  _end
</pre><p>
  Upper and lower case letters are different. Name identifiers
  may have any length and all characters are significant. The
  name identifier is terminated with a character which is
  neither a letter (or _ ) nor a digit. The terminating
  character is not part of the name identifier.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_name_identifier">name_identifier</a> ::=</dt><dd>
      ( <a class="ebnf" href="#ebnf_letter">letter</a> | <a class="ebnf" href="#ebnf_underscore">underscore</a> ) { <a class="ebnf" href="#ebnf_letter">letter</a> | <a class="ebnf" href="#ebnf_digit">digit</a> | <a class="ebnf" href="#ebnf_underscore">underscore</a> } .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_letter">letter</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_upper_case_letter">upper_case_letter</a> | <a class="ebnf" href="#ebnf_lower_case_letter">lower_case_letter</a> .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_upper_case_letter">upper_case_letter</a> ::=</dt><dd>
      'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' |<br />
      'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' |<br />
      'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_lower_case_letter">lower_case_letter</a> ::=</dt><dd>
      'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' |<br />
      'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' |<br />
      'u' | 'v' | 'w' | 'x' | 'y' | 'z' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_digit">digit</a> ::=</dt><dd>
      '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_underscore">underscore</a> ::=</dt><dd>
      '_' .</dd>
</dl></tt></dd></dl><p></p>

<a name="Special_identifiers"><h4>10.2.2 Special identifiers</h4></a>
<p>
    A special identifier is a sequence of special characters.
  Examples of special identifiers are:
</p><pre class="indent">
+  :=  &lt;=  *  ->  ,  &amp;
</pre><p>
  Here is a list of all special characters:
</p><pre class="indent">
! $ % &amp; * + , - . / : ; &lt; = > ? @ \ ^ ` | ~
</pre><p>
  Special identifiers may have any length and all characters are
  significant. The special identifier is terminated with a character
  which is not a special character. The terminating character is
  not part of the special identifier.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_special_identifier">special_identifier</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_special_character">special_character</a> { <a class="ebnf" href="#ebnf_special_character">special_character</a> } .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_special_character">special_character</a> ::=</dt><dd>
      '!' | '$' | '%' | '&amp;' | '*' | '+' | ',' | '-' | '.' | '/' |<br />
      ':' | ';' | '&lt;' | '=' | '>' | '?' | '@' | '\' | '^' | '`' |<br />
      '|' | '~' .</dd>
</dl></tt></dd></dl><p></p>

<a name="Brackets"><h4>10.2.3 Brackets</h4></a>
<p>
    A bracket is one of the following characters:
</p><pre class="indent">
( ) [ ] { }
</pre><p>
  Note that a bracket consists of only one character. Except
  for the character sequence (* (which introduces a comment)
  a bracket is terminated with the next character.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_bracket">bracket</a> ::=</dt><dd>
      '(' | ')' | '[' | ']' | '{' | '}' .</dd>
</dl></tt></dd></dl><p></p>

<a name="Literals"><h3>10.3 Literals</h3></a>
<p>
    There are several types of literals
</p><dl>
    <dd><a class="ebnf" href="#ebnf_integer_literal">integer literal</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_biginteger_literal">biginteger literal</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_float_literal">float literal</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_character_literal">character literal</a>s</dd>
    <dd><a class="ebnf" href="#ebnf_string_literal">string literal</a>s</dd>
</dl><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_literal">literal</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_integer_literal">integer_literal</a> | <a class="ebnf" href="#ebnf_biginteger_literal">biginteger_literal</a> | <a class="ebnf" href="#ebnf_float_literal">float_literal</a> |<br />
      <a class="ebnf" href="#ebnf_character_literal">character_literal</a> | <a class="ebnf" href="#ebnf_string_literal">string_literal</a> .</dd>
</dl></tt></dd></dl><p></p>

<a name="Integer_literals"><h4>10.3.1 Integer literals</h4></a>
<p>
    An integer literal is a sequence of digits which is taken to
  be decimal. The sequence of digits may be followed by the letter
  E or e an optional + sign and a decimal exponent. <a name="based_integer"></a>Based numbers
  can be specified when the sequence of digits is followed by
  the # character and a sequence of extended digits. The decimal
  number in front of the # character specifies the base of the
  number which follows the # character. As base a number between
  2 and 36 is allowed. As extended digits the letters A or a can
  be used for 10, B or b can be used for 11 and so on to Z or z
  which can be used as 35.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_integer_literal">integer_literal</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_decimal_integer">decimal_integer</a> [ <a class="ebnf" href="#ebnf_exponent">exponent</a> | <a class="ebnf" href="#ebnf_based_integer">based_integer</a> ] .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_decimal_integer">decimal_integer</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_digit">digit</a> { <a class="ebnf" href="#ebnf_digit">digit</a> } .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_exponent">exponent</a> ::=</dt><dd>
      ( 'E' | 'e' ) [ '+' ] <a class="ebnf" href="#ebnf_decimal_integer">decimal_integer</a> .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_based_integer">based_integer</a> ::=</dt><dd>
      '#' <a class="ebnf" href="#ebnf_extended_digit">extended_digit</a> { <a class="ebnf" href="#ebnf_extended_digit">extended_digit</a> } .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_extended_digit">extended_digit</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_letter">letter</a> | <a class="ebnf" href="#ebnf_digit">digit</a> .</dd>
</dl></tt></dd></dl><p>
  If an integer literal cannot be read a <a class="link" href="errors.htm#Parsing_errors">parsing error</a> is triggered:
</p><pre class="indent">
*** tst256.sd7(2):10: <a name="CARD_DECIMAL_TOO_BIG_example"></a><a class="link" href="errors.htm#CARD_DECIMAL_TOO_BIG">Integer "12345678901234567890" too big</a>
const integer: tooBig is 12345678901234567890;
---------------------------------------------^
*** tst256.sd7(3):11: <a name="NEGATIVEEXPONENT_example"></a><a class="link" href="errors.htm#NEGATIVEEXPONENT">Negative exponent in integer literal</a>
const integer: negativeExponent is 1e-1;
-------------------------------------^
*** tst256.sd7(4):12: <a name="DIGITEXPECTED_example"></a><a class="link" href="errors.htm#DIGITEXPECTED">Digit expected found ";"</a>
const integer: digitExpected is 1e;
----------------------------------^
*** tst256.sd7(5):13: <a name="CARD_WITH_EXPONENT_TOO_BIG_example"></a><a class="link" href="errors.htm#CARD_WITH_EXPONENT_TOO_BIG">Integer "1E20" too big</a>
const integer: integerWithExponentTooBig is 1e20;
------------------------------------------------^
*** tst256.sd7(6):14: <a name="BASE2TO36ALLOWED_example"></a><a class="link" href="errors.htm#BASE2TO36ALLOWED">Integer base "37" not between 2 and 36</a>
const integer: baseNotBetween2To36 is 37#0;
----------------------------------------^
*** tst256.sd7(7):15: <a name="EXTDIGITEXPECTED_example"></a><a class="link" href="errors.htm#EXTDIGITEXPECTED">Extended digit expected found ";"</a>
const integer: extendedDigitExpected is 16#;
-------------------------------------------^
*** tst256.sd7(8):16: <a name="ILLEGALBASEDDIGIT_example"></a><a class="link" href="errors.htm#ILLEGALBASEDDIGIT">Illegal digit "G" in based integer "16#G"</a>
const integer: illegalBasedDigit is 16#G;
----------------------------------------^
*** tst256.sd7(9):17: <a name="CARD_BASED_TOO_BIG_example"></a><a class="link" href="errors.htm#CARD_BASED_TOO_BIG">Based integer "16#ffffffffffffffff" too big</a>
const integer: basedIntegerTooBig is 16#ffffffffffffffff;
--------------------------------------------------------^
</pre>

<a name="BigInteger_literals"><h4>10.3.2 BigInteger literals</h4></a>
<p>
    A bigInteger literal is a sequence of digits followed by the
  underline character. The sequence of digits is taken to be
  decimal. Based numbers can be specified when a sequence of
  digits is followed by the # character, a sequence of extended
  digits and the underline character. The decimal number in front
  of the # character specifies the base of the number which follows
  the # character. As base a number between 2 and 36 is allowed.
  As extended digits the letters A or a can be used for 10, B or b
  can be used for 11 and so on to Z or z which can be used as 35.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_biginteger_literal">biginteger_literal</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_decimal_integer">decimal_integer</a> [ <a class="ebnf" href="#ebnf_based_integer">based_integer</a> ] '_' .</dd>
</dl></tt></dd></dl><p></p>

<a name="Float_literals"><h4>10.3.3 Float literals</h4></a>
<p>
    A float literal consists of two decimal integer literals
  separated by a decimal point. The basic float literal may be
  followed by the letter E or e an optional + or - sign and a
  decimal exponent.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_float_literal">float_literal</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_decimal_integer">decimal_integer</a> '.' <a class="ebnf" href="#ebnf_decimal_integer">decimal_integer</a> [ <a class="ebnf" href="#ebnf_float_exponent">float_exponent</a> ] .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_float_exponent">float_exponent</a> ::=</dt><dd>
      ( 'E' | 'e' ) [ '+' | '-' ] <a class="ebnf" href="#ebnf_decimal_integer">decimal_integer</a> .</dd>
</dl></tt></dd></dl><p></p>

<a name="String_literals"><h4>10.3.4 String literals</h4></a>
<p>
    A string literal is a sequence of UTF-8 encoded Unicode
  characters surrounded by double quotes. For example:
</p><pre class="indent">
<span class="stri">""</span>   <span class="stri">" "</span>   <span class="stri">"\""</span>   <span class="stri">"'"</span>   <span class="stri">"\'"</span>   <span class="stri">"String"</span>   <span class="stri">"ch=\" "</span>   <span class="stri">"\n\n"</span>
<span class="stri">"Euro: \8364;"</span>   <span class="stri">"\16#ff;"</span>
</pre><p>
  In order to represent non-printable characters and certain
  printable characters the following escape sequences may be
  used.
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td>audible alert   </td> <td width="20"></td><td>BEL     </td> <td width="20"></td><td><tt><span class="stri">\a</span></tt></td></tr>
    <tr><td>backspace       </td> <td width="20"></td><td>BS      </td> <td width="20"></td><td><tt><span class="stri">\b</span></tt></td></tr>
    <tr><td>escape          </td> <td width="20"></td><td>ESC     </td> <td width="20"></td><td><tt><span class="stri">\e</span></tt></td></tr>
    <tr><td>formfeed        </td> <td width="20"></td><td>FF      </td> <td width="20"></td><td><tt><span class="stri">\f</span></tt></td></tr>
    <tr><td>newline         </td> <td width="20"></td><td>NL (LF) </td> <td width="20"></td><td><tt><span class="stri">\n</span></tt></td></tr>
    <tr><td>carriage return </td> <td width="20"></td><td>CR      </td> <td width="20"></td><td><tt><span class="stri">\r</span></tt></td></tr>
    <tr><td>horizontal tab  </td> <td width="20"></td><td>HT      </td> <td width="20"></td><td><tt><span class="stri">\t</span></tt></td></tr>
    <tr><td>vertical tab    </td> <td width="20"></td><td>VT      </td> <td width="20"></td><td><tt><span class="stri">\v</span></tt></td></tr>
    <tr><td>backslash       </td> <td width="20"></td><td>(\)     </td> <td width="20"></td><td><tt><span class="stri">\\</span></tt></td></tr>
    <tr><td>apostrophe      </td> <td width="20"></td><td>(')     </td> <td width="20"></td><td><tt><span class="stri">\'</span></tt></td></tr>
    <tr><td>double quote    </td> <td width="20"></td><td>(")     </td> <td width="20"></td><td><tt><span class="stri">\"</span></tt></td></tr>
    <tr><td>control-A       </td> <td width="20"></td><td>        </td> <td width="20"></td><td><tt><span class="stri">\A</span></tt></td></tr>
    <tr><td>  ...</td></tr>
    <tr><td>control-Z       </td> <td width="20"></td><td>        </td> <td width="20"></td><td><tt><span class="stri">\Z</span></tt></td></tr>
</table></dd></dl><p>
  Additionally there are the following possibilities:
</p><ul>
    <li>Two backslashes with a sequence of blanks, horizontal tabs,
      carriage returns and new lines between them are completely
      ignored. The ignored characters are not part of the string.
      This can be used to continue a string in the following line.
      Note that in this case the leading spaces in the new line
      are not part of the string.</li>

    <li>A backslash followed by an integer literal and a semicolon
      is interpreted as character with the specified ordinal number.
      Note that the integer literal is interpreted decimal unless
      it is written as <a class="link" href="#based_integer">based integer</a>.</li>
</ul><p>
  Strings are implemented with length field and UTF-32 encoding.
  Strings are not <tt><span class="stri">'\0;'</span></tt> terminated and therefore can also contain
  binary data.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_string_literal">string_literal</a> ::=</dt><dd>
      '"' { <a class="ebnf" href="#ebnf_string_literal_element">string_literal_element</a> } '"' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_string_literal_element">string_literal_element</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_simple_literal_character">simple_literal_character</a> | <a class="ebnf" href="#ebnf_escape_sequence">escape_sequence</a> | <a class="ebnf" href="#ebnf_apostrophe">apostrophe</a> .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_simple_literal_character">simple_literal_character</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_letter">letter</a> | <a class="ebnf" href="#ebnf_digit">digit</a> | <a class="ebnf" href="#ebnf_bracket">bracket</a> | <a class="ebnf" href="#ebnf_special_literal_character">special_literal_character</a> |<br />
      utf8_encoded_character .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_special_literal_character">special_literal_character</a> ::=</dt><dd>
      '&nbsp;' | '!' | '#' | '$' | '%' | '&amp;' | '*' | '+' | ',' | '-' |<br />
      '.' | '/' | ':' | ';' | '&lt;' | '=' | '>' | '?' | '@' | '^' |<br />
      '_' | '`' | '|' | '~' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_escape_sequence">escape_sequence</a> ::=</dt><dd>
      '\a' | '\b' | '\e' | '\f' | '\n' | '\r' | '\t' | '\v' |<br />
      '\\' | '\''' | '\"' | '\' <a class="ebnf" href="#ebnf_upper_case_letter">upper_case_letter</a> |<br />
      '\' { <a class="ebnf" href="#ebnf_space">space</a> } '\' | '\' <a class="ebnf" href="#ebnf_integer_literal">integer_literal</a> ';' .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_apostrophe">apostrophe</a> ::=</dt><dd>
      ''' .</dd>
</dl></tt></dd></dl><p>
  If a string literal cannot be read a <a class="link" href="errors.htm#Parsing_errors">parsing error</a> is triggered:
</p><pre class="indent">
*** tst256.sd7(2):20: <a name="WRONG_QUOTATION_REPRESENTATION_example"></a><a class="link" href="errors.htm#WRONG_QUOTATION_REPRESENTATION">Use \" instead of "" to represent " in a string</a>
const string: wrongQuotationRepresentation is "double "" quotations";
-------------------------------------------------------^
*** tst256.sd7(3):21: <a name="STRINGESCAPE_example"></a><a class="link" href="errors.htm#STRINGESCAPE">Illegal string escape "\z"</a>
const string: illegalStringEscape is "\z";
---------------------------------------^
*** tst256.sd7(4):22: <a name="WRONGNUMERICALESCAPE_example"></a><a class="link" href="errors.htm#WRONGNUMERICALESCAPE">Numerical escape sequences should end with ";" not "x"</a>
const string: wrongNumericEscape is "\1234xyz";
------------------------------------------^
*** tst256.sd7(5):23: <a name="NUMERICAL_ESCAPE_TOO_BIG_example"></a><a class="link" href="errors.htm#NUMERICAL_ESCAPE_TOO_BIG">The numerical escape sequence "\1234678123467892346;" is too big</a>
const string: numericEscapeTooBig is "asd\1234678123467892346;dfdfg";
-------------------------------------------------------------^
*** tst256.sd7(6):24: <a name="BACKSLASHEXPECTED_example"></a><a class="link" href="errors.htm#BACKSLASHEXPECTED">String continuations should end with "\" not "c"</a>
const string: backslashExpected is "string \      continuation";
--------------------------------------------------^
*** tst256.sd7(7):25: <a name="STRINGEXCEEDS_example"></a><a class="link" href="errors.htm#STRINGEXCEEDS">String literal exceeds source line</a>
const string: exceedsSourceLine is "abc
---------------------------------------^
*** tst256.sd7(8):27: <a name="CARD_EXPECTED_example"></a><a class="link" href="errors.htm#CARD_EXPECTED">Integer literal expected found "1.5"</a>
const string: integerExpected is "\1.5;";
--------------------------------------^
</pre>

<a name="Character_literals"><h4>10.3.5 Character literals</h4></a>
<p>
    A character literal is an UTF-8 encoded Unicode character
  enclosed in apostrophes. For example:
</p><pre class="indent">
<span class="stri">'a'</span>   <span class="stri">' '</span>   <span class="stri">'\n'</span>   <span class="stri">'!'</span>   <span class="stri">'\\'</span>   <span class="stri">'2'</span>   <span class="stri">'"' </span>  <span class="stri">'\"'</span>   <span class="stri">'\''</span>   <span class="stri">'\8;'</span>
</pre><p>
  To represent control characters and certain other characters in
  character literals the same escape sequences as for <a class="link" href="#String_literals">string
  literals</a> may be used.
</p><dl><dt>
  Syntax:
</dt><dd><tt><dl>
    <dt><a name="ebnf_character_literal">character_literal</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_apostrophe">apostrophe</a> <a class="ebnf" href="#ebnf_char_literal_element">char_literal_element</a> <a class="ebnf" href="#ebnf_apostrophe">apostrophe</a> .</dd>
<dt><br /></dt>
    <dt><a name="ebnf_char_literal_element">char_literal_element</a> ::=</dt><dd>
      <a class="ebnf" href="#ebnf_simple_literal_character">simple_literal_character</a> | <a class="ebnf" href="#ebnf_escape_sequence">escape_sequence</a> | <a class="ebnf" href="#ebnf_apostrophe">apostrophe</a> | '"' .</dd>
</dl></tt></dd></dl><p>
  If a char literal cannot be read a <a class="link" href="errors.htm#Parsing_errors">parsing error</a> is triggered:
</p><pre class="indent">
*** tst256.sd7(2):18: <a name="APOSTROPHEXPECTED_example"></a><a class="link" href="errors.htm#APOSTROPHEXPECTED">"'" expected found ";"</a>
const char: apostropheExpected is 'x;
------------------------------------^
*** tst256.sd7(3):19: <a name="CHAREXCEEDS_example"></a><a class="link" href="errors.htm#CHAREXCEEDS">Character literal exceeds source line</a>
const char: charExceeds is '
----------------------------^
</pre>

<a name="Unicode_characters"><h3>10.4 Unicode characters</h3></a>
<p>
    Seed7 source code may contain UTF-8 encoded Unicode characters.
  Unicode is allowed in <a class="link" href="#String_literals">string</a> and <a class="link" href="#Character_literals">char</a> literals. The <a class="link" href="decls.htm#Pragmas">pragma</a> <tt><span class="keywd">names</span></tt>
  can be used to allow Unicode in <a class="link" href="#Name_identifiers">name identifiers</a>:
</p><pre class="indent">
$ <span class="keywd">names</span> <span class="keywd">unicode</span>;
</pre><p>
  <a class="link" href="#Comments">Comments</a> and <a class="link" href="#Line_comments">line comments</a> may also contain Unicode, but they are
  not checked for valid UTF-8. This way code parts with invalid
  UTF-8 can be commented out. Invalid UTF-8 encodings in <a class="link" href="#Identifiers">identifiers</a>
  and <a class="link" href="#Literals">literals</a> trigger a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** err.sd7(90):58: <a name="OVERLONG_UTF8_ENCODING_example"></a><a class="link" href="errors.htm#OVERLONG_UTF8_ENCODING">Overlong UTF-8 encoding used for character "\0;" (U+0000)</a>
ignore("\0;");
-----------^
*** err.sd7(91):59: <a name="UTF16_SURROGATE_CHAR_FOUND_example"></a><a class="link" href="errors.htm#UTF16_SURROGATE_CHAR_FOUND">UTF-16 surrogate character found in UTF-8 encoding "\55296;" (U+d800)</a>
ignore("\55296;");
---------------^
*** err.sd7(92):60: <a name="CHAR_NOT_UNICODE_example"></a><a class="link" href="errors.htm#CHAR_NOT_UNICODE">Non Unicode character found "\1114112;" (U+110000)</a>
"\1114112;");
----------^
*** err.sd7(93):61: <a name="UTF8_CONTINUATION_BYTE_EXPECTED_example"></a><a class="link" href="errors.htm#UTF8_CONTINUATION_BYTE_EXPECTED">UTF-8 continuation byte expected found "A"</a>
ignore("í\128;A");
--------------^
*** err.sd7(94):62: <a name="UNEXPECTED_UTF8_CONTINUATION_BYTE_example"></a><a class="link" href="errors.htm#UNEXPECTED_UTF8_CONTINUATION_BYTE">Unexpected UTF-8 continuation byte found "\128;" (U+0080)</a>
ignore("\128;");
--------^
*** err.sd7(95):63: <a name="SOLITARY_UTF8_START_BYTE_example"></a><a class="link" href="errors.htm#SOLITARY_UTF8_START_BYTE">Solitary UTF-8 start byte found "\237;" (U+00ed)</a>
ignore("íA");
---------^
*** bom16(1):64: <a name="UTF16_BYTE_ORDER_MARK_FOUND_example"></a><a class="link" href="errors.htm#UTF16_BYTE_ORDER_MARK_FOUND">UTF-16 byte order mark found "\65279;" (U+feff)</a>
þÿ
-^
</pre>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/syntax.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/expr.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
