<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Errors</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#ERRORS"><big>Errors</big></a>
<a class="menu" href="#Parsing_errors">Parsing&nbsp;errors</a>
<a class="menu" href="#Compilation_errors">Compile&nbsp;errors</a>
<a class="menu" href="#Exceptions">Exceptions</a>
<a class="menu" href="#MEMORY_ERROR">Memory&nbsp;Error</a>
<a class="menu" href="#NUMERIC_ERROR">Numeric&nbsp;Error</a>
<a class="menu" href="#OVERFLOW_ERROR">Overflow&nbsp;Error</a>
<a class="menu" href="#INDEX_ERROR">Index&nbsp;Error</a>
<a class="menu" href="#RANGE_ERROR">Range&nbsp;Error</a>
<a class="menu" href="#FILE_ERROR">File&nbsp;Error</a>
<a class="menu" href="#DATABASE_ERROR">Database&nbsp;Error</a>
<a class="menu" href="#GRAPHIC_ERROR">Graphic&nbsp;Error</a>
<a class="menu" href="#ILLEGAL_ACTION">Illegal&nbsp;Action</a></ol></li>
<a class="menu" href="#Handlers">Handlers</a>
<a class="menu" href="#Trace_exceptions">Trace&nbsp;errors</a>
<a class="menu" href="#Stack_trace">Stack&nbsp;trace</a>
<a class="menu" href="#Suppressing_exception_checks">Suppr.&nbsp;checks</a>
<a class="menu" href="#Signals">Signals</a>
<a class="menu" href="#Other_errors_and_warnings">Other&nbsp;errors</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Errors</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/ffi.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<span class="navigation">next</span>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="ERRORS"><h2>17. ERRORS</h2></a>

<p></p>
<a name="Parsing_errors"><h3>17.1 Parsing errors</h3></a>
<p>
  Parsing errors are triggered by interpreter and compiler. The checks
  for these errors are done before the program is executed respectively
  compiled. The errors do not terminate parsing except for error 1
  (Out of heap space). If there are errors the program cannot
  be interpreted respectively compiled. The interpreter option
  <a class="link" href="../faq.htm#interpreter_option-x"><tt><b>-x</b></tt></a> can be used to execute even if the program contains
  errors. The following parsing errors exist:
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td align="right"> 1:</td> <td width="10"></td><td><a name="OUT_OF_HEAP_SPACE"                >Fatal Error: Out of heap space</a></td></tr>
    <tr><td align="right"> 2:</td> <td width="10"></td><td><a name="NO_SOURCEFILE"                    >File "%s" not found</a></td></tr>
    <tr><td align="right"> 3:</td> <td width="10"></td><td><a name="FILENOTFOUND"                     >Include file "%s" not found</a></td></tr>
    <tr><td align="right"> 4:</td> <td width="10"></td><td><a name="EOF_ENCOUNTERED"                  >"END OF FILE" encountered</a></td></tr>
    <tr><td align="right"> 5:</td> <td width="10"></td><td><a name="CHAR_ILLEGAL"                     ></a><a class="link" href="tokens.htm#CHAR_ILLEGAL_example"                     >Illegal character in text "%s" (U+%04x)</a></td></tr>
    <tr><td align="right"> 6:</td> <td width="10"></td><td><a name="COMMENTOPEN"                      ></a><a class="link" href="tokens.htm#COMMENTOPEN_example"                      >Unclosed comment</a></td></tr>
    <tr><td align="right"> 7:</td> <td width="10"></td><td><a name="ILLEGALPRAGMA"                    ></a><a class="link" href="decls.htm#ILLEGALPRAGMA_example"                     >Illegal pragma "%s"</a></td></tr>
    <tr><td align="right"> 8:</td> <td width="10"></td><td><a name="WRONGACTION"                      >Illegal action "%s"</a></td></tr>
    <tr><td align="right"> 9:</td> <td width="10"></td><td><a name="WRONGSYSTEM"                      >Illegal system declaration "%s"</a></td></tr>
    <tr><td align="right">10:</td> <td width="10"></td><td><a name="CARD_DECIMAL_TOO_BIG"             ></a><a class="link" href="tokens.htm#CARD_DECIMAL_TOO_BIG_example"             >Integer "%s" too big</a></td></tr>
    <tr><td align="right">11:</td> <td width="10"></td><td><a name="NEGATIVEEXPONENT"                 ></a><a class="link" href="tokens.htm#NEGATIVEEXPONENT_example"                 >Negative exponent in integer literal</a></td></tr>
    <tr><td align="right">12:</td> <td width="10"></td><td><a name="DIGITEXPECTED"                    ></a><a class="link" href="tokens.htm#DIGITEXPECTED_example"                    >Digit expected found "%s"</a></td></tr>
    <tr><td align="right">13:</td> <td width="10"></td><td><a name="CARD_WITH_EXPONENT_TOO_BIG"       ></a><a class="link" href="tokens.htm#CARD_WITH_EXPONENT_TOO_BIG_example"       >Integer "%dE%s" too big</a></td></tr>
    <tr><td align="right">14:</td> <td width="10"></td><td><a name="BASE2TO36ALLOWED"                 ></a><a class="link" href="tokens.htm#BASE2TO36ALLOWED_example"                 >Integer base "%ld" not between 2 and 36</a></td></tr>
    <tr><td align="right">15:</td> <td width="10"></td><td><a name="EXTDIGITEXPECTED"                 ></a><a class="link" href="tokens.htm#EXTDIGITEXPECTED_example"                 >Extended digit expected found "%s"</a></td></tr>
    <tr><td align="right">16:</td> <td width="10"></td><td><a name="ILLEGALBASEDDIGIT"                ></a><a class="link" href="tokens.htm#ILLEGALBASEDDIGIT_example"                >Illegal digit "%c" in based integer "%d#%s"</a></td></tr>
    <tr><td align="right">17:</td> <td width="10"></td><td><a name="CARD_BASED_TOO_BIG"               ></a><a class="link" href="tokens.htm#CARD_BASED_TOO_BIG_example"               >Based integer "%d#%s" too big</a></td></tr>
    <tr><td align="right">18:</td> <td width="10"></td><td><a name="APOSTROPHEXPECTED"                ></a><a class="link" href="tokens.htm#APOSTROPHEXPECTED_example"                >"'" expected found "%s"</a></td></tr>
    <tr><td align="right">19:</td> <td width="10"></td><td><a name="CHAREXCEEDS"                      ></a><a class="link" href="tokens.htm#CHAREXCEEDS_example"                      >Character literal exceeds source line</a></td></tr>
    <tr><td align="right">20:</td> <td width="10"></td><td><a name="WRONG_QUOTATION_REPRESENTATION"   ></a><a class="link" href="tokens.htm#WRONG_QUOTATION_REPRESENTATION_example"   >Use \" instead of "" to represent " in a string</a></td></tr>
    <tr><td align="right">21:</td> <td width="10"></td><td><a name="STRINGESCAPE"                     ></a><a class="link" href="tokens.htm#STRINGESCAPE_example"                     >Illegal string escape "\%s"</a></td></tr>
    <tr><td align="right">22:</td> <td width="10"></td><td><a name="WRONGNUMERICALESCAPE"             ></a><a class="link" href="tokens.htm#WRONGNUMERICALESCAPE_example"             >Numerical escape sequences should end with ";" not "%s"</a></td></tr>
    <tr><td align="right">23:</td> <td width="10"></td><td><a name="NUMERICAL_ESCAPE_TOO_BIG"         ></a><a class="link" href="tokens.htm#NUMERICAL_ESCAPE_TOO_BIG_example"         >The numerical escape sequence "\%u;" is too big</a></td></tr>
    <tr><td align="right">24:</td> <td width="10"></td><td><a name="BACKSLASHEXPECTED"                ></a><a class="link" href="tokens.htm#BACKSLASHEXPECTED_example"                >String continuations should end with "\" not "%s"</a></td></tr>
    <tr><td align="right">25:</td> <td width="10"></td><td><a name="STRINGEXCEEDS"                    ></a><a class="link" href="tokens.htm#STRINGEXCEEDS_example"                    >String literal exceeds source line</a></td></tr>
    <tr><td align="right">26:</td> <td width="10"></td><td><a name="NAMEEXPECTED"                     >Name expected found "%s"</a></td></tr>
    <tr><td align="right">27:</td> <td width="10"></td><td><a name="CARD_EXPECTED"                    ></a><a class="link" href="tokens.htm#CARD_EXPECTED_example"                    >Integer literal expected found "%s"</a></td></tr>
    <tr><td align="right">28:</td> <td width="10"></td><td><a name="STRI_EXPECTED"                    >String literal expected found "%s"</a></td></tr>
    <tr><td align="right">29:</td> <td width="10"></td><td><a name="IDENT_EXPECTED"                   >Identifier expected found "%s"</a></td></tr>
    <tr><td align="right">30:</td> <td width="10"></td><td><a name="EXPR_EXPECTED"                    >Expression expected found "%s"</a></td></tr>
    <tr><td align="right">31:</td> <td width="10"></td><td><a name="PARAM_DECL_FAILED"                >Declaration of parameter %s failed</a></td></tr>
    <tr><td align="right">32:</td> <td width="10"></td><td><a name="DECL_FAILED"                      ></a><a class="link" href="decls.htm#DECL_FAILED_example"                       >Declaration of "%s" failed</a></td></tr>
    <tr><td align="right">33:</td> <td width="10"></td><td><a name="EXCEPTION_RAISED"                 >Exception "%s" raised</a></td></tr>
    <tr><td align="right">34:</td> <td width="10"></td><td><a name="OBJTWICEDECLARED"                 ></a><a class="link" href="../faq.htm#OBJTWICEDECLARED_example"                 >Redeclaration of "%s"</a></td></tr>
    <tr><td align="right">35:</td> <td width="10"></td><td><a name="PREVIOUS_DECLARATION"             ></a><a class="link" href="../faq.htm#PREVIOUS_DECLARATION_example"             >Previous declaration of "%s"</a></td></tr>
    <tr><td align="right">36:</td> <td width="10"></td><td><a name="ILLEGAL_ASSOCIATIVITY"            >Associativity expected found "%s"</a></td></tr>
    <tr><td align="right">37:</td> <td width="10"></td><td><a name="ILLEGAL_PRIORITY"                 >Statement priority "%s" too big</a></td></tr>
    <tr><td align="right">38:</td> <td width="10"></td><td><a name="TWO_PARAMETER_SYNTAX"             >Syntax with two parameters before operator is illegal</a></td></tr>
    <tr><td align="right">39:</td> <td width="10"></td><td><a name="EMPTY_SYNTAX"                     >Empty syntax declaration</a></td></tr>
    <tr><td align="right">40:</td> <td width="10"></td><td><a name="SYNTAX_DECLARED_TWICE"            >Syntax %s declared twice</a></td></tr>
    <tr><td align="right">41:</td> <td width="10"></td><td><a name="DOT_EXPR_EXPECTED"                >Dot expression expected as syntax description, found %s</a></td></tr>
    <tr><td align="right">42:</td> <td width="10"></td><td><a name="FALSE_INFIX_PRIORITY"             ></a><a class="link" href="../faq.htm#FALSE_INFIX_PRIORITY_example"             >"%s" redeclared with infix priority %d not %d</a></td></tr>
    <tr><td align="right">43:</td> <td width="10"></td><td><a name="FALSE_PREFIX_PRIORITY"            >"%s" redeclared with prefix priority %d not %d</a></td></tr>
    <tr><td align="right">44:</td> <td width="10"></td><td><a name="WRONG_EXPR_PARAM_PRIORITY"        >Priority %d required for parameter after "%s" not %d</a></td></tr>
    <tr><td align="right">45:</td> <td width="10"></td><td><a name="WRONG_PREFIX_PRIORITY"            >Priority &lt;= %d expected found "%s" with priority %d</a></td></tr>
    <tr><td align="right">46:</td> <td width="10"></td><td><a name="DOT_EXPR_ILLEGAL"                 >"%s" must have priority %d not %d for dot expression</a></td></tr>
    <tr><td align="right">47:</td> <td width="10"></td><td><a name="EXPECTED_SYMBOL"                  ></a><a class="link" href="../faq.htm#EXPECTED_SYMBOL_example"                  >"%s" expected found "%s"</a></td></tr>
    <tr><td align="right">48:</td> <td width="10"></td><td><a name="LITERAL_TYPE_UNDEFINED"           >Undefined type for literal "%s"</a></td></tr>
    <tr><td align="right">49:</td> <td width="10"></td><td><a name="KIND_OF_IN_PARAM_UNDEFINED"       >Kind of in-parameter (val or ref) unspecified for type "%s"</a></td></tr>
    <tr><td align="right">50:</td> <td width="10"></td><td><a name="DOLLAR_VALUE_WRONG"               >"newtype", "subtype", "func", "enumlit" or "action" expected found "%s"</a></td></tr>
    <tr><td align="right">51:</td> <td width="10"></td><td><a name="DOLLAR_TYPE_WRONG"                >"func" or "type" expected found "%s"</a></td></tr>
    <tr><td align="right">52:</td> <td width="10"></td><td><a name="NO_MATCH"                         ></a><a class="link" href="decls.htm#NO_MATCH_example"                          >Match for %s failed</a></td></tr>
    <tr><td align="right">53:</td> <td width="10"></td><td><a name="WRONGACCESSRIGHT"                 ></a><a class="link" href="tutorial.htm#WRONGACCESSRIGHT_example"               >Variable expected in %s found %s</a></td></tr>
    <tr><td align="right">54:</td> <td width="10"></td><td><a name="TYPE_EXPECTED"                    >Type expected found %s</a></td></tr>
    <tr><td align="right">55:</td> <td width="10"></td><td><a name="PROC_EXPECTED"                    >Procedure expected found %s expression</a></td></tr>
    <tr><td align="right">56:</td> <td width="10"></td><td><a name="PARAM_SPECIFIER_EXPECTED"         >Parameter specifier expected found "%s"</a></td></tr>
    <tr><td align="right">57:</td> <td width="10"></td><td><a name="EVAL_TYPE_FAILED"                 >Evaluate type expression %s failed</a></td></tr>
    <tr><td align="right">58:</td> <td width="10"></td><td><a name="OVERLONG_UTF8_ENCODING"           ></a><a class="link" href="tokens.htm#OVERLONG_UTF8_ENCODING_example"           >Overlong UTF-8 encoding used for character "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">59:</td> <td width="10"></td><td><a name="UTF16_SURROGATE_CHAR_FOUND"       ></a><a class="link" href="tokens.htm#UTF16_SURROGATE_CHAR_FOUND_example"       >UTF-16 surrogate character found in UTF-8 encoding "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">60:</td> <td width="10"></td><td><a name="CHAR_NOT_UNICODE"                 ></a><a class="link" href="tokens.htm#CHAR_NOT_UNICODE_example"                 >Non Unicode character found "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">61:</td> <td width="10"></td><td><a name="UTF8_CONTINUATION_BYTE_EXPECTED"  ></a><a class="link" href="tokens.htm#UTF8_CONTINUATION_BYTE_EXPECTED_example"  >UTF-8 continuation byte expected found "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">62:</td> <td width="10"></td><td><a name="UNEXPECTED_UTF8_CONTINUATION_BYTE"></a><a class="link" href="tokens.htm#UNEXPECTED_UTF8_CONTINUATION_BYTE_example">Unexpected UTF-8 continuation byte found "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">63:</td> <td width="10"></td><td><a name="SOLITARY_UTF8_START_BYTE"         ></a><a class="link" href="tokens.htm#SOLITARY_UTF8_START_BYTE_example"         >Solitary UTF-8 start byte found "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">64:</td> <td width="10"></td><td><a name="UTF16_BYTE_ORDER_MARK_FOUND"      ></a><a class="link" href="tokens.htm#UTF16_BYTE_ORDER_MARK_FOUND_example"      >UTF-16 byte order mark found "%s" (U+%04x)</a></td></tr>
    <tr><td align="right">65:</td> <td width="10"></td><td><a name="WRONG_PATH_DELIMITER"             >Use / instead of \\ as path delimiter</a></td></tr>
    <tr><td align="right">   </td> <td width="10"></td><td>Undefined error</td></tr>
</table></dd></dl><p></p>

<a name="Compilation_errors"><h3>17.2 Compilation errors</h3></a>
<p>
  The compiler does checks when generating code. As a result of
  the checks some warnings might be written. The warning level can
  be specified with the option <a class="link" href="../scrshots/s7c.htm#compiler_option-w"><tt><b>-w</b><span class="keywd">n</span></tt></a>
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Level </th><th> Warning</th></tr>
    
    <tr><td>2     </td><td> Comparison with %s always evaluates to %s.</td></tr>
    <tr><td>2     </td><td> Expression raises "%s".</td></tr>
    <tr><td>1     </td><td> Catch of "%s" although the checks are suppressed.</td></tr>
    <tr><td>1     </td><td> Catch of otherwise although the checks for %s are suppressed.</td></tr>
    <tr><td>1     </td><td> Duplicate when values %s.</td></tr>
    <tr><td>1     </td><td> Previous usage of %s.</td></tr>
    <tr><td>1     </td><td> When value must be constant.</td></tr>
    <tr><td>1     </td><td> Forward defined function called.</td></tr>
    <tr><td>1     </td><td> Forward definition of the called function.</td></tr>
</table></dd></dl><p></p>

<a name="Exceptions"><h3>17.3 Exceptions</h3></a>
<p>
  An exception is an anomalous event that arises during program execution.
  Exceptions change the normal flow of program execution. An exception
  transfers the execution to a corresponding exception <a class="link" href="#Handlers">handler</a>. If no
  corresponding exception <a class="link" href="#Handlers">handler</a> exists the program is terminated.
  There are various exceptions, which can be raised: <tt><a class="exception" href="#MEMORY_ERROR">MEMORY_ERROR</a></tt>,
  <tt><a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a></tt>, <tt><a class="exception" href="#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt>, <tt><a class="exception" href="#INDEX_ERROR">INDEX_ERROR</a></tt>, <tt><a class="exception" href="#RANGE_ERROR">RANGE_ERROR</a></tt>, <tt><a class="exception" href="#FILE_ERROR">FILE_ERROR</a></tt>,
  <tt><a class="exception" href="#DATABASE_ERROR">DATABASE_ERROR</a></tt>, <tt><a class="exception" href="#GRAPHIC_ERROR">GRAPHIC_ERROR</a></tt> and <tt><a class="exception" href="#ILLEGAL_ACTION">ILLEGAL_ACTION</a></tt>. A program can raise
  an exception with the <tt><span class="keywd">raise</span></tt> statement. For example:
</p><pre class="indent">
<span class="keywd">raise</span> <a class="exception" href="#RANGE_ERROR">RANGE_ERROR</a>;
</pre><p>
  Additional exceptions can be declared with:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#enumeration">EXCEPTION</a>: MY_ERROR <span class="keywd">is</span> enumlit;
</pre><p></p>

<a name="MEMORY_ERROR"><h4>17.3.1 MEMORY_ERROR</h4></a>
<p>
  The exception <tt><span class="exception">MEMORY_ERROR</span></tt> is raised if there is not enough memory
  to store some data. This error can be raised from the run-time library
  or from the interpreter kernel. Catching a <tt><span class="exception">MEMORY_ERROR</span></tt> is possible,
  but it must be done with care. Variables involved in a <tt><span class="exception">MEMORY_ERROR</span></tt>
  may have an illegal value. A <tt><span class="exception">MEMORY_ERROR</span></tt> may be raised by various
  operations of the following types:
</p><dl><dt></dt><dd>
    <tt><a class="type" href="types.htm#array">array</a></tt>, <tt><a class="type" href="types.htm#struct">struct</a></tt>, <tt><a class="type" href="types.htm#hash">hash</a></tt>, <tt><a class="type" href="types.htm#file">file</a></tt>, <tt><a class="type" href="types.htm#func">func</a></tt>, <tt><a class="type" href="types.htm#proc">proc</a></tt>, <tt><a class="type" href="types.htm#reference">reference</a></tt>, <tt><a class="type" href="types.htm#string">string</a></tt>.</dd><dt></dt><dd>
    Additionally the interpreter kernel may raise this exception also.
</dd></dl><p></p>

<a name="NUMERIC_ERROR"><h4>17.3.2 NUMERIC_ERROR</h4></a>
<p>
  The exception <tt><span class="exception">NUMERIC_ERROR</span></tt> is raised if a numeric operation
  cannot deliver a correct result. This includes several things that
  are mathematically undefined such as division by zero, integer
  exponentiation with a negative exponent, square root of a negative
  number and logarithm of a negative number. <tt><span class="exception">NUMERIC_ERROR</span></tt> can be
  raised by operations of several types:
</p><dl><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#integer">integer</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/integer.htm#!(in_integer)">!</a>, <a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">**</a>, <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a>, <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a>, <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a>, <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a>, <a class="func" href="../libraries/integer.htm#sqrt(in_integer)">sqrt</a>, <a class="func" href="../libraries/integer.htm#log2(in_integer)">log2</a>, <a class="func" href="../libraries/integer.htm#log10(in_integer)">log10</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/bigint.htm#!(in_bigInteger)">!</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a>, <a class="func" href="../libraries/bigint.htm#sqrt(in_var_bigInteger)">sqrt</a>, <a class="func" href="../libraries/bigint.htm#log2(in_bigInteger)">log2</a>, <a class="func" href="../libraries/bigint.htm#log10(in_bigInteger)">log10</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#rational">rational</a></tt> operation:</dt><dd>
        <a class="op" href="../libraries/rational.htm#(in_rational)/(in_rational)">/</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#bigRational">bigRational</a></tt> operation:</dt><dd>
        <a class="op" href="../libraries/bigrat.htm#(in_bigRational)/(in_bigRational)">/</a>.</dd></dl>
<p>
  In detail the following conditions can cause a numeric error:
</p><ul>
    <li>Division (<a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a>, <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a>, <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a>, <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)/(in_bigRational)">/</a>) by zero.
       E.g.: <tt>1 <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 0</tt> raises <tt><span class="exception">NUMERIC_ERROR</span></tt>. Note that a <tt><a class="type" href="types.htm#float">float</a></tt> division
       by zero does not raise <tt><span class="exception">NUMERIC_ERROR</span></tt> but returns <tt><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt> or
       <tt><a class="op" href="../libraries/float.htm#-(in_float)">-</a><a class="var" href="../libraries/float.htm#Infinity">Infinity</a></tt> instead.</li>
    <li><a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">Exponentiation</a> (<a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">**</a>) if the exponent is a negative <tt><a class="type" href="types.htm#integer">integer</a></tt>.
       E.g.: <tt>2 <a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">**</a> (-1)</tt> raises <tt><span class="exception">NUMERIC_ERROR</span></tt>.</li>
    <li>Functions (<a class="func" href="../libraries/integer.htm#sqrt(in_integer)">sqrt</a>, <a class="func" href="../libraries/integer.htm#log2(in_integer)">log2</a>, <a class="func" href="../libraries/integer.htm#log10(in_integer)">log10</a>, <a class="op" href="../libraries/integer.htm#!(in_integer)">!</a>) that are only defined for
       positive arguments. E.g.: <tt><a class="func" href="../libraries/integer.htm#sqrt(in_integer)">sqrt</a>(-1)</tt> raises <tt><span class="exception">NUMERIC_ERROR</span></tt>.</li>
</ul><p></p>

<a name="OVERFLOW_ERROR"><h4>17.3.3 OVERFLOW_ERROR</h4></a>
<p>
  An integer overflow occurs if a calculation produces a result that
  cannot be stored in an <tt><a class="type" href="types.htm#integer">integer</a></tt> variable. This happens if the result
  is less than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a></tt> or greater than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a></tt>.
</p><dl><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#integer">integer</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/integer.htm#-(in_integer)">-</a> (sign), <a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a>, <a class="op" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a>, <a class="op" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a>, <a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">**</a>, <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a>, <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a>, <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a>, <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a>, <a class="op" href="../libraries/integer.htm#(in_integer)&lt;&lt;(in_integer)">&lt;&lt;</a>, <a class="op" href="../libraries/integer.htm#(in_integer)&gt;&gt;(in_integer)">&gt;&gt;</a>, <a class="op" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a>, <a class="op" href="../libraries/integer.htm#(inout_integer)-:=(in_integer)">-:=</a>,
        <a class="op" href="../libraries/integer.htm#(inout_integer)*:=(in_integer)">*:=</a>, <a class="op" href="../libraries/integer.htm#(inout_integer)&lt;&lt;:=(in_integer)">&lt;&lt;:=</a>, <a class="op" href="../libraries/integer.htm#(inout_integer)&gt;&gt;:=(in_integer)">&gt;&gt;:=</a>, <a class="op" href="../libraries/integer.htm#(in_integer)!(in_integer)">!</a>, <a class="func" href="../libraries/integer.htm#abs(in_integer)">abs</a>, <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>, <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>, <a class="func" href="../libraries/integer.htm#incr(inout_integer)">incr</a>, <a class="func" href="../libraries/integer.htm#decr(inout_integer)">decr</a>.</dd></dl>
<p>
  In detail the following conditions can cause an overflow:
</p><ul>
    <li><a class="link" href="../libraries/integer.htm#-(in_integer)">Negating</a> can overflow because in a two's complement representation
       there is no corresponding positive value for the <a class="link" href="../libraries/integer.htm#(attr_integer)._first">most negative
       integer</a>. E.g.: <tt><a class="op" href="../libraries/integer.htm#-(in_integer)">-</a><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a></tt> raises <tt><span class="exception">OVERFLOW_ERROR</span></tt>.</li>
    <li><a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">Addition</a>, <a class="op" href="../libraries/integer.htm#(in_integer)-(in_integer)">subtraction</a>, <a class="op" href="../libraries/integer.htm#(in_integer)*(in_integer)">multiplication</a> and <a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">exponentiation</a> (<a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a>, <a class="op" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a>,
       <a class="op" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a>, <a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">**</a>, <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>, <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>) trigger an overflow if the result would be
       less than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a></tt> or greater than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a></tt>.</li>
    <li>Arithmetic operations that change a variable (<a class="op" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a>, <a class="op" href="../libraries/integer.htm#(inout_integer)-:=(in_integer)">-:=</a>, <a class="op" href="../libraries/integer.htm#(inout_integer)*:=(in_integer)">*:=</a>, <a class="func" href="../libraries/integer.htm#incr(inout_integer)">incr</a>,
       <a class="func" href="../libraries/integer.htm#decr(inout_integer)">decr</a>) trigger an overflow if the variable would get a value that
       is less than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a></tt> or greater than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a></tt>.</li>
    <li>Division with <tt><a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> and <tt><a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a></tt> can overflow because a division by
       <tt>-1</tt> is the same as negating the dividend. E.g.: <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a> <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> -1</tt>
       raises <tt><span class="exception">OVERFLOW_ERROR</span></tt>.</li>
    <li><a class="link" href="../libraries/integer.htm#(in_integer)rem(in_integer)">Remainder</a> and <a class="link" href="../libraries/integer.htm#(in_integer)mod(in_integer)">modulo</a> are defined to raise <tt><span class="exception">OVERFLOW_ERROR</span></tt> if
       the dividend is the <a class="link" href="../libraries/integer.htm#(attr_integer)._first">most negative integer</a> and the divisor is <tt>-1</tt>.
       E.g.: <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a> <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> -1</tt> raises <tt><span class="exception">OVERFLOW_ERROR</span></tt>. This has been
       defined as overflow because it can trigger so called undefined
       behavior of the underlying C code.
    <li>All shift operations (<tt><a class="op" href="../libraries/integer.htm#(in_integer)&lt;&lt;(in_integer)">&lt;&lt;</a></tt>, <tt><a class="op" href="../libraries/integer.htm#(in_integer)&gt;&gt;(in_integer)">&gt;&gt;</a></tt>, <a class="op" href="../libraries/integer.htm#(inout_integer)&lt;&lt;:=(in_integer)">&lt;&lt;:=</a> and <tt><a class="op" href="../libraries/integer.htm#(inout_integer)&gt;&gt;:=(in_integer)">&gt;&gt;:=</a></tt>) trigger an
       overflow if the shift amount is negative or greater equal <tt>64</tt>.</li>
    <li>Left shift operations (<tt><a class="op" href="../libraries/integer.htm#(in_integer)&lt;&lt;(in_integer)">&lt;&lt;</a></tt> and <a class="op" href="../libraries/integer.htm#(inout_integer)&lt;&lt;:=(in_integer)">&lt;&lt;:=</a>) can also trigger an
       overflow if the shift result would be less than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a></tt>
       or greater than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a></tt>.</li>
    <li>Binomial coefficient (<tt><a class="op" href="../libraries/integer.htm#(in_integer)!(in_integer)">!</a></tt>) triggers an overflow if the result
       would be less than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a></tt> or greater than <tt><a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a></tt>.</li>
    <li>Computing the absolute value with <a class="func" href="../libraries/integer.htm#abs(in_integer)">abs</a> can overflow, if it is
       called with the <a class="link" href="../libraries/integer.htm#(attr_integer)._first">most negative integer</a>. E.g.: <tt><a class="func" href="../libraries/integer.htm#abs(in_integer)">abs</a>(<a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>)</tt>
       raises <tt><span class="exception">OVERFLOW_ERROR</span></tt>.</li>
</ul><p>
  The interpreter checks always for an integer overflow. By default the
  <a class="link" href="../scrshots/s7c.htm">compiler</a> generates code to check for an integer overflow. The option
  <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-so</b></tt></a> can be used to suppress the generation of integer overflow checks.
  If an overflow situation occurs, although overflow checking has been
  switched off (with <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-so</b></tt></a>), the behavior is undefined (see chapter
  <a class="link" href="errors.htm#Suppressing_exception_checks">17.6 Suppressing exception checks</a>).
</p><p>
  The separate overflow exception allows easy recognition of overflow
  situations. All overflow situations, where <tt><span class="exception">OVERFLOW_ERROR</span></tt> is raised
  correspond to C situations, which have undefined behavior. The
  overflow concept of Seed7 has been designed to allow, that simple
  C code is generated, if the overflow checks are switched off.
</p><p>
  <a class="link" href="../scrshots/s7c.htm">Compiler</a> optimizations (e.g. with <a class="link" href="../scrshots/s7c.htm#compiler_option-oc"><tt><b>-oc2</b></tt></a> or <a class="link" href="../scrshots/s7c.htm#compiler_option-oc"><tt><b>-oc3</b></tt></a>) can reduce the
  potential of overflow. In an optimized program an expression might
  be rephrased, such that an overflow is avoided and the correct
  result is computed instead. Consider the expression:
</p><pre class="indent">
number <a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> <a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a> <a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> <a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>
</pre><p>
  If <tt>number</tt> is between <tt><a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(<a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>)</tt> and <tt>0</tt> the expression
  can be evaluated and no overflow will occur. For other values of
  <tt>number</tt> the exception <tt><span class="exception">OVERFLOW_ERROR</span></tt> is raised. When the expression
  above is optimized it is rephrased to:
</p><pre class="indent">
<a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(number)
</pre><p>
  This expression only triggers <tt><span class="exception">OVERFLOW_ERROR</span></tt>, if number has the
  value <a class="type" href="types.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>.
</p><p>
  With overflow checks it is guaranteed that an integer overflow
  always raises <tt><span class="exception">OVERFLOW_ERROR</span></tt>. But you cannot rely on <tt><span class="exception">OVERFLOW_ERROR</span></tt>
  being raised if there is an alternate way to return the correct
  result.
</p>

<a name="INDEX_ERROR"><h4>17.3.4 INDEX_ERROR</h4></a>
<p>
  An <tt><span class="exception">INDEX_ERROR</span></tt> occurs if an index is used to access an <tt><a class="type" href="types.htm#array">array</a></tt>, <tt><a class="type" href="types.htm#string">string</a></tt>,
  <tt><a class="type" href="../libraries/bstring.htm#bstring">bstring</a></tt> or <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt> element beyond the elements that actually exist.
  E.g. An attempt to get an element of a <tt><a class="type" href="types.htm#string">string</a></tt>,
  <tt><a class="type" href="../libraries/bstring.htm#bstring">bstring</a></tt> or <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt> with a negative or zero index raises <tt><span class="exception">INDEX_ERROR</span></tt>.
</p><dl><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#array">array</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[index]</a>, <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">[index ..]</a>, <a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">[.. index]</a>, <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">[start .. stop]</a>, <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">[index len length]</a>, <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_baseType)">insert</a>, <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer)">remove</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#string">string</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)]">[index]</a>, <a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">[index ..]</a>, <a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">[.. index]</a>, <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">[start .. stop]</a>, <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">[index len length]</a>, <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">[index fixLen length]</a>, <a class="op" href="../libraries/string.htm#(inout_string)@:=_[(in_integer)](in_char)">@:= [index] char</a>, <a class="op" href="../libraries/string.htm#(inout_string)@:=_[(in_integer)](in_string)">@:= [index] string</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="../libraries/bstring.htm#bstring">bstring</a></tt> operation:</dt><dd>
        <a class="op" href="../libraries/bstring.htm#(in_bstring)[(in_integer)]">[index]</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#hash">hash</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">[</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer)]">[index]</a>, <a class="op" href="../libraries/ref_list.htm#(inout_ref_list)@:=_[(in_integer)](in_reference)">@:= [index] element</a>.</dd></dl>
<p>
  The interpreter checks always if an index refers to an existing element.
  By default the <a class="link" href="../scrshots/s7c.htm">compiler</a> generates code to check if indices refer to an
  existing element. The option <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-si</b></tt></a> can be used to suppress the generation
  of index checks. If a nonexistent element is referred, although index
  checking has been switched off (with <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-si</b></tt></a>), the behavior is undefined
  (see chapter <a class="link" href="errors.htm#Suppressing_exception_checks">17.6 Suppressing exception checks</a>).
</p>

<a name="RANGE_ERROR"><h4>17.3.5 RANGE_ERROR</h4></a>
<p>
  Many functions define a range of valid arguments and raise <tt><span class="exception">RANGE_ERROR</span></tt>
  if this range is violated.
</p><dl><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#boolean">boolean</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/boolean.htm#(attr_boolean)conv(in_integer)">conv</a>, <a class="op" href="../libraries/boolean.htm#(attr_boolean)parse(in_string)">parse</a>, <a class="func" href="../libraries/boolean.htm#boolean(in_integer)">boolean</a>, <a class="func" href="../libraries/boolean.htm#succ(ref_boolean)">succ</a>, <a class="func" href="../libraries/boolean.htm#pred(ref_boolean)">pred</a>, <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>, <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#integer">integer</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a>, <a class="op" href="../libraries/integer.htm#(in_integer)radix(in_integer)">radix</a>, <a class="op" href="../libraries/integer.htm#(in_integer)RADIX(in_integer)">RADIX</a>, <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a>, <a class="func" href="../libraries/integer.htm#rand(in_integer,in_integer)">rand</a>, <a class="func" href="../libraries/integer.htm#integer(in_string,in_integer)">integer</a>, <a class="func" href="../libraries/bytedata.htm#bytes(in_integer,in_signedness,in_endianness)">bytes</a>, <a class="func" href="../libraries/bytedata.htm#bytes2Int(in_string,in_signedness,in_endianness)">bytes2Int</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a>, <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)radix(in_integer)">radix</a>, <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)RADIX(in_integer)">RADIX</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a>, <a class="func" href="../libraries/bigint.htm#rand(in_bigInteger,in_bigInteger)">rand</a>, <a class="func" href="../libraries/bigint.htm#integer(in_bigInteger)">integer</a>, <a class="func" href="../libraries/bytedata.htm#bytes(in_bigInteger,in_signedness,in_endianness)">bytes</a>, <a class="func" href="../libraries/bytedata.htm#bytes2BigInt(in_string,in_signedness,in_endianness)">bytes2BigInt</a>, <a class="func" href="../libraries/bigint.htm#ord(in_bigInteger)">ord</a>, <a class="func" href="../libraries/bigint.htm#bigInteger(in_string,in_integer)">bigInteger</a>, <a class="func" href="../libraries/bigint.htm#bitLength(in_bigInteger)">bitLength</a>,
        <a class="func" href="../libraries/bigint.htm#modInverse(in_var_bigInteger,in_var_bigInteger)">modInverse</a>, <a class="func" href="../libraries/bigint.htm#modPow(in_var_bigInteger,in_var_bigInteger,in_bigInteger)">modPow</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#rational">rational</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_var_string)">parse</a>, <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a>, <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a>, <a class="func" href="../libraries/rational.htm#rational(in_var_string)">rational</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#bigRational">bigRational</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_var_string)">parse</a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a>, <a class="func" href="../libraries/bigrat.htm#bigRational(in_var_string)">bigRational</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#float">float</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a>, <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a>, <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a>, <a class="func" href="../libraries/float.htm#float(in_string)">float</a>, <a class="func" href="../libraries/float.htm#round(in_float)">round</a>, <a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>, <a class="func" href="../libraries/float.htm#rand(in_float,in_float)">rand</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#complex">complex</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/complex.htm#(attr_complex)parse(in_string)">parse</a>, <a class="op" href="../libraries/complex.htm#(in_complex)digits(in_integer)">digits</a>, <a class="op" href="../libraries/complex.htm#(in_complex)sci(in_integer)">sci</a>, <a class="func" href="../libraries/complex.htm#complex(in_string)">complex</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#char">char</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/char.htm#(attr_char)conv(in_integer)">conv</a>, <a class="op" href="../libraries/char.htm#(attr_char)parse(in_string)">parse</a>, <a class="func" href="../libraries/char.htm#chr(in_integer)">chr</a>, <a class="func" href="../libraries/char.htm#char(in_integer)">char</a>, <a class="func" href="../libraries/char.htm#rand(in_char,in_char)">rand</a>, <a class="func" href="../libraries/char.htm#char(in_string)">char</a>, <a class="func" href="../libraries/char.htm#trimValue(attr_char,in_string)">trimValue</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#string">string</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/string.htm#(in_string)mult(in_integer)">mult</a>, <a class="func" href="../libraries/string.htm#pos(in_string,in_string,in_integer)">pos</a>, <a class="func" href="../libraries/string.htm#rpos(in_string,in_string,in_integer)">rpos</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#set">bitset</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/bitset.htm#(attr_integer)conv(in_bitset)">conv</a>, <a class="op" href="../libraries/bitset.htm#(attr_bitset)parse(in_var_string)">parse</a>, <a class="func" href="../libraries/bitset.htm#rand(in_bitset)">rand</a>, <a class="func" href="../libraries/bitset.htm#min(in_bitset)">min</a>, <a class="func" href="../libraries/bitset.htm#max(in_bitset)">max</a>, <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>, <a class="func" href="../libraries/bitset.htm#integer(in_bitset)">integer</a>, <a class="func" href="../libraries/bitset.htm#bitset(in_integer)">bitset</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#array">array</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a>, <a class="func" href="../libraries/array.htm#rand(in_arrayType)">rand</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="../libraries/bin32.htm#bin32">bin32</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/bin32.htm#(in_bin32)radix(in_integer)">radix</a>, <a class="op" href="../libraries/bin32.htm#(in_bin32)RADIX(in_integer)">RADIX</a>, <a class="func" href="../libraries/bin32.htm#bytes(in_bin32,BE,in_integer)">bytes</a>, <a class="func" href="../libraries/bin32.htm#float2MbfBits(in_float,SINGLE)">float2MbfBits</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="../libraries/bin64.htm#bin64">bin64</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/bin64.htm#(in_bin64)radix(in_integer)">radix</a>, <a class="op" href="../libraries/bin64.htm#(in_bin64)RADIX(in_integer)">RADIX</a>, <a class="func" href="../libraries/bin64.htm#bin64(in_bigInteger)">bin64</a>, <a class="func" href="../libraries/bin64.htm#bytes(in_bin64,BE,in_integer)">bytes</a>, <a class="func" href="../libraries/bin64.htm#float2MbfBits(in_float,DOUBLE)">float2MbfBits</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#category">category</a></tt> operations:</dt><dd>
        <a class="op" href="../libraries/category.htm#(attr_category)parse(in_string)">parse</a>, <a class="func" href="../libraries/category.htm#category(in_string)">category</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt> operations:</dt><dd>
        <a class="func" href="../libraries/ref_list.htm#pos(in_ref_list,in_reference,in_integer)">pos</a>.</dd><dt>
    It may be raised from the following <tt><a class="type" href="types.htm#file">file</a></tt> operations:</dt><dd>
        <a class="func" href="../libraries/external_file.htm#open(in_string,in_string)">open</a>, <a class="func" href="../libraries/utf8.htm#openUtf8(in_string,in_string)">openUtf8</a>, <a class="func" href="../libraries/utf16.htm#openUtf16le(in_string,in_string)">openUtf16le</a>, <a class="func" href="../libraries/utf16.htm#openUtf16be(in_string,in_string)">openUtf16be</a>, <a class="func" href="../libraries/utf16.htm#openUtf16(in_string,in_string)">openUtf16</a>, <a class="func" href="../libraries/socket.htm#openInetSocket(in_integer)">openInetSocket</a>,
        <a class="func" href="../libraries/file.htm#write(inout_file,in_string)">write</a>, <a class="func" href="../libraries/file.htm#writeln(inout_file,in_string)">writeln</a>, <a class="func" href="../libraries/file.htm#gets(inout_file,in_integer)">gets</a>, <a class="func" href="../libraries/file.htm#length(inout_file)">length</a>, <a class="func" href="../libraries/file.htm#truncate(inout_file,in_integer)">truncate</a>, <a class="func" href="../libraries/file.htm#seek(inout_file,in_integer)">seek</a>, <a class="func" href="../libraries/file.htm#tell(in_file)">tell</a>, <a class="func" href="../libraries/file.htm#skip(inout_file,in_var_integer)">skip</a>.</dd></dl>
<p></p>

<a name="FILE_ERROR"><h4>17.3.6 FILE_ERROR</h4></a>
<p>
  A <tt><span class="exception">FILE_ERROR</span></tt> occurs if an illegal operation with a file is done.
</p><dl><dt>
    It may be raised by the following functions:</dt><dd>
        <a class="func" href="os.htm#fileType">fileType</a>, <a class="func" href="os.htm#fileType">fileTypeSL</a>, <a class="func" href="os.htm#fileSize">fileSize</a>, <a class="func" href="os.htm#fileSize">bigFileSize</a>, <a class="func" href="os.htm#getFileMode">getFileMode</a>, <a class="func" href="os.htm#setFileMode">setFileMode</a>,
        <a class="func" href="os.htm#getATime">getATime</a>, <a class="func" href="os.htm#setATime">setATime</a>, <a class="func" href="os.htm#getCTime">getCTime</a>, <a class="func" href="os.htm#getMTime">getMTime</a>, <a class="func" href="os.htm#setMTime">setMTime</a>, <a class="func" href="os.htm#getOwner">getOwner</a>, <a class="func" href="os.htm#setOwner">setOwner</a>,
        <a class="func" href="os.htm#getGroup">getGroup</a>, <a class="func" href="os.htm#setGroup">setGroup</a>, <a class="func" href="os.htm#readDir">readDir</a>, <a class="func" href="os.htm#removeFile">removeFile</a>, <a class="func" href="os.htm#removeTree">removeTree</a>, <a class="func" href="os.htm#moveFile">moveFile</a>, <a class="func" href="os.htm#cloneFile">cloneFile</a>,
        <a class="func" href="os.htm#copyFile">copyFile</a>, <a class="func" href="os.htm#readlink">readlink</a>, <a class="func" href="os.htm#symlink">symlink</a>, hasNext, seek, tell, bigTell, setbuf, write,
        <a class="func" href="../libraries/sockbase.htm#inetSocketAddress(in_string,in_integer)">inetSocketAddress</a>, <a class="func" href="../libraries/sockbase.htm#inetListenerAddress(in_integer)">inetListenerAddress</a>, <a class="func" href="../libraries/socket.htm#openInetSocket(in_string,in_integer)">openInetSocket</a>, <a class="func" href="../libraries/listener.htm#openInetListener(in_integer)">openInetListener</a>.</dd></dl>
<p></p>

<a name="DATABASE_ERROR"><h4>17.3.7 DATABASE_ERROR</h4></a>
<p>
  The exception <tt><span class="exception">DATABASE_ERROR</span></tt> may be raised by database
  functions. If a <tt><span class="exception">DATABASE_ERROR</span></tt> is caught it is possible
  to get some information about the cause of the error with:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: <b><span class="func">errMessage</span></b> (<span class="exception">DATABASE_ERROR</span>)
</pre><p>
  There are messages coming from the database and from the Seed7
  database driver. The database driver may have a message like:
</p><pre class="indent">
Searching for dynamic libraries failed: libclntsh.so
</pre><p>
  This indicates that the connector library could not be found.
  In this case the environment variable LD_LIBRARY_PATH could
  be used to specify the place of the connector library.
</p>

<a name="GRAPHIC_ERROR"><h4>17.3.8 GRAPHIC_ERROR</h4></a>
<p>
  The exception <tt><span class="exception">GRAPHIC_ERROR</span></tt> may be raised by graphic drivers.
  If an underlying graphic library function reports an error a
  <tt><span class="exception">GRAPHIC_ERROR</span></tt> is raised.
</p>

<a name="ILLEGAL_ACTION"><h4>17.3.9 ILLEGAL_ACTION</h4></a>
<p>
  The exception <tt><span class="exception">ILLEGAL_ACTION</span></tt> may be raised by the interpreter
  kernel, if a primitive action does not point to any legal action.
  This check is only done if the s7 interpreter is compiled with
  <tt>'#define WITH_ACTION_CHECK'</tt>. The <tt><span class="exception">ILLEGAL_ACTION</span></tt> exception
  is also raised if the primitive action ACT_ILLEGAL is executed.
</p>

<a name="Handlers"><h3>17.4 Handlers</h3></a>
<p>
  To catch an EXCEPTION the following handler construct can be used:
</p><pre class="indent">
<span class="keywd">block</span>
  number := 1 <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 0;
<span class="keywd">exception</span>
  <span class="keywd">catch</span> <a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a>:
    number := 1;
<span class="keywd">end block</span>;
</pre><p>
  It is also possible to catch several exceptions:
</p><pre class="indent">
<span class="keywd">block</span>
  doSomething(someValue);
<span class="keywd">exception</span>
  <span class="keywd">catch</span> <a class="exception" href="#MEMORY_ERROR">MEMORY_ERROR</a>:  writeln(<span class="stri">"MEMORY_ERROR"</span>);
  <span class="keywd">catch</span> <a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a>: writeln(<span class="stri">"NUMERIC_ERROR"</span>);
<span class="keywd">end block</span>;
</pre><p>
  An <tt><span class="keywd">otherwise</span></tt> handler catches exceptions, that are not caught
  by the other handlers:
</p><pre class="indent">
<span class="keywd">block</span>
  doSomething(someValue);
<span class="keywd">exception</span>
  <span class="keywd">catch</span> <a class="exception" href="#RANGE_ERROR">RANGE_ERROR</a>: writeln(<span class="stri">"RANGE_ERROR"</span>);
  <span class="keywd">otherwise</span>:         writeln(<span class="stri">"Any other exception"</span>);
<span class="keywd">end block</span>;
</pre><p></p>

<a name="Trace_exceptions"><h3>17.5 Trace exceptions</h3></a>
<p>
  The interpreter option <a class="link" href="../faq.htm#interpreter_option-t"><tt><b>-t</b><span class="keywd">e</span></tt></a> can be used to trace exceptions and handlers.
  If an exception occurs the following is written:
</p><pre class="indent">
*** Exception NUMERIC_ERROR raised at integer.s7i(118)
{160000 div fuel_max } at lander.sd7(836)
*** Action "INT_DIV"

*** The following commands are possible:
  RETURN  Continue
  *       Terminate
  #       Terminate with stack trace
  /       Trigger SIGFPE
  !n      Raise exception with number (e.g.: !1 raises MEMORY_ERROR)
</pre><p>
  In detail:
<ul>
    <li>After pressing RETURN the program continues without any change.</li>
    <li>Pressing <tt>*</tt> and RETURN terminates the program immediately.</li>
    <li>Pressing <tt>#</tt> and RETURN writes a stack trace and terminates the program. E.g.:
</p><pre class="indent">
*** Program terminated after exception NUMERIC_ERROR raised with
{integer: <SYMBOLOBJECT> *NULL_ENTITY_OBJECT* div fuel_max }

Stack:
in (val integer: dividend) div (val integer: divisor) at integer.s7i(118)
in init_display at lander.sd7(836)
in setup at lander.sd7(906)
in main at lander.sd7(1536)
</pre></li>
    <li>Pressing <tt>/</tt> and RETURN triggers the signal SIGFPE. If the interpreter has
       been started from a debugger, this triggers the debugger.</li>
</ul>

<a name="Stack_trace"><h3>17.6 Stack trace</h3></a>
<p>
  If an exception is not caught the program is terminated and the s7
  interpreter writes a stack trace:
</p><pre class="indent">
*** Uncaught exception NUMERIC_ERROR raised with
{integer: &lt;SYMBOLOBJECT> *NULL_ENTITY_OBJECT* div fuel_max }

Stack:
in (val integer: dividend) div (val integer: divisor) at integer.s7i(118)
in init_display at lander.sd7(836)
in setup at lander.sd7(906)
in main at lander.sd7(1536)
</pre><p>
  The stack trace shows that a <tt><a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a></tt> was raised by the <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> operation.
  This operation is defined in line 118 of <tt><a class="lib" href="../prg/integer.htm">integer.s7i</a></tt>. More interesting is that
  <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> was called from the function <tt>'init_display'</tt> in
  line 836 of <tt><a class="prog" href="../prg/lander.htm">lander.sd7</a></tt>. A <tt><a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a></tt> with <tt><a class="keywd" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> is
  probably caused by a zero division. A short examination in <tt><a class="prog" href="../prg/lander.htm">lander.sd7</a></tt> shows that an assignment to
  <tt>'fuel_max'</tt> was commented out to show how stack traces work.
</p><p>
  A compiled program creates a much shorter crash message:
</p><pre class="indent">
*** Uncaught exception NUMERIC_ERROR raised at sigutl.c(218)
</pre><p>
  To get more information there are two possibilities:
</p><ul>
    <li>Start the program in the interpreter instead.</li>
    <li>Compile the program with the options <a class="link" href="../scrshots/s7c.htm#compiler_option-g"><tt><b>-g</b></tt></a> <a class="link" href="../scrshots/s7c.htm#compiler_option-e"><tt><b>-e</b></tt></a> and start it
       from a debugger.</li>
</ul><p>
  If <a class="link" href="../scrshots/s7c.htm">s7c</a> is called with the option <a class="link" href="../scrshots/s7c.htm#compiler_option-g"><tt><b>-g</b></tt></a> it instructs the
  C compiler to generate debugging information. This way a debugger
  like gdb can run the program and provide information. The option
  <a class="link" href="../scrshots/s7c.htm#compiler_option-e"><tt><b>-e</b></tt></a> tells the compiler to generate code which sends a signal,
  if an uncaught exception occurs. This option allows debuggers
  to handle uncaught Seed7 exceptions. Note that <a class="link" href="../scrshots/s7c.htm#compiler_option-e"><tt><b>-e</b></tt></a> sends the
  signal SIGFPE. This is done even if the exception is not
  related to floating point operations.
</p><pre class="indent">
./s7 s7c -g -e lander
gdb ./lander
</pre><p>
  Then the debugger should be able to run the program and to
  write a backtrace if a crash occurs:
</p><pre class="indent">
(gdb) run
Starting program: /home/tm/seed7_5/prg/lander

Program received signal SIGFPE, Arithmetic exception.
0x000000000041b942 in o_3912_init_display () at lander.sd7:839
839         fuel_gauge := 40 * rocket.fuel div fuel_max;
(gdb) bt
#0  0x000000000041b942 in o_3912_init_display () at lander.sd7:839
#1  0x000000000041c2e5 in o_3917_setup () at lander.sd7:908
#2  0x0000000000421fe1 in main (argc=1, argv=0x7fffffffdf28) at lander.sd7:1541
</pre><p>
  Sometimes it is helpful to debug the generated C program instead of
  the Seed7 source. The option <a class="link" href="../scrshots/s7c.htm#compiler_option-g"><tt><b>-g-debug_c</b></tt></a> creates debug information,
  which refers to the C program generated by the Seed7 compiler:
</p><pre class="indent">
./s7 s7c -g-debug_c -e lander
gdb ./lander
</pre><p>
  Now the debugger refers to the temporary file <tt><span class="stri">tmp_lander.c</span></tt>:
</p><pre class="indent">
(gdb) run
Starting program: /home/tm/seed7_5/prg/lander

Program received signal SIGFPE, Arithmetic exception.
0x08068518 in o_2541_init_display () at tmp_lander.c:19727
19727   o_2428_fuel_gauge=((40) * (((structType)(o_2338_rocket))->stru[10].value.intValue/*->o_2336_fuel*/)) / (o_2431_fuel_max);
(gdb) bt
#0  0x08068518 in o_2541_init_display () at tmp_lander.c:19727
#1  0x08068c21 in o_2546_setup () at tmp_lander.c:19864
#2  0x0806c304 in main (argc=1, argv=0xbffff324) at tmp_lander.c:21188
</pre><p>
  Some Seed7 exceptions do not send signals. This hinders the debugger
  to recognize that an uncaught exception occurred. The compiler option <a class="link" href="../scrshots/s7c.htm#compiler_option-e"><tt><b>-e</b></tt></a>
  can help in this situation. It instructs the compiler to generate
  code which sends a signal if an uncaught exception occurs. This
  allows the debugger to show a backtrace for uncaught Seed7 exceptions.
</p>

<a name="Suppressing_exception_checks"><h3>17.7 Suppressing exception checks</h3></a>
<p>
  A Seed7 program can be <a class="link" href="../scrshots/s7c.htm">compiled</a> with the option <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-s</b><span class="keywd">x</span></tt></a>, to suppress the
  generation of checks for exceptions. The suppressed checks <span class="keywd">x</span> are
  specified with letters from the following list:
</p><ul>
    <li><b>d</b> Suppress the generation of checks for <a class="link" href="#NUMERIC_ERROR">integer division by zero</a>.</li>
    <li><b>i</b> Suppress the generation of <a class="link" href="#INDEX_ERROR">index checks</a> (e.g. string, array).</li>
    <li><b>o</b> Suppress the generation of <a class="link" href="#OVERFLOW_ERROR">integer overflow</a> checks.</li>
    <li><b>r</b> Suppress the generation of <a class="link" href="#RANGE_ERROR">range</a> checks.</li>
</ul><p>
  If an exception situation occurs, although exception checking has
  been switched off (with <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-s</b></tt></a>), the behavior is undefined. In this
  case the following things can happen:
</p><ul>
    <li>The exception is still raised.</li>
    <li>A different exception is raised.</li>
    <li>The program hangs.</li>
    <li>The program crashes.</li>
    <li>The computation continues with some garbage value. This garbage
       value can then trigger dangerous things: The X-ray dose computed
       by your program might be totally wrong. Your program might compute
       the statics of a bridge wrong.</li>
</ul><p>
  Undefined behavior is a term used in the language specification
  of C and in other programming languages. Undefined behavior usually
  means that the behavior of the program is unpredictable. Normally
  Seed7 has a well defined behavior in all situations. Even in
  situations where the language specification of C refers to
  undefined behavior.
</p><p>
  A <a class="link" href="#Handlers">handler</a> for an exception can only work reliable if the checks
  for the exception are done. The <a class="link" href="../scrshots/s7c.htm">compiler</a> warns if <a class="link" href="../scrshots/s7c.htm#compiler_option-s"><tt><b>-s</b></tt></a> is used
  and there is a <a class="link" href="#Handlers">handler</a> for an exception. e.g.:
</p><pre class="indent">
*** example.sd7(123): Catch of <span class="exception">OVERFLOW_ERROR</span> although the checks are suppressed.
</pre><p>
  Only a program that never raises the specific exception and that
  does not have a <a class="link" href="#Handlers">handler</a> for this exception can be considered
  to be compiled without checks for that exception. Careful program
  analysis and testing (the exception should never be raised) is
  necessary to decide about the omission of exception checking.
</p>

<a name="Signals"><h3>17.8 Signals</h3></a>
<p>
  A signal is an asynchronous notification of an event. The event
  can come from outside such as a request to terminate the program.
  The event can also come from the program itself such as a memory
  access violation (segfault). Several signals are handled by the
  Seed7 run-time library. The interpreter respectively compiler
  option <a class="link" href="../scrshots/s7c.htm#compiler_option-t"><tt><b>-ts</b></tt></a> can be used to influence the behavior, if a signal
  is sent to a Seed7 program (see below). The following signals are
  handled by Seed7:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  <tr><th>Signal  </th><th> Special handler      </th><th> Behavior without <a class="link" href="../scrshots/s7c.htm#compiler_option-t"><tt><b>-ts</b></tt></a>   </th><th> Behavior with <a class="link" href="../scrshots/s7c.htm#compiler_option-t"><tt><b>-ts</b></tt></a></th></tr>
  
  <tr><td><a name="SIGABRT">SIGABRT</a> </td><td> raise <tt><a class="exception" href="#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt> </td><td> Raises exception       </td><td> Dialog to decide</td></tr>
  <tr><td><a name="SIGILL">SIGILL</a>  </td><td> raise <tt><a class="exception" href="#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt> </td><td> Raises exception       </td><td> Dialog to decide</td></tr>
  <tr><td><a name="SIGTRAP">SIGTRAP</a> </td><td> raise <tt><a class="exception" href="#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt> </td><td> Raises exception       </td><td> Dialog to decide</td></tr>
  <tr><td><a name="SIGINT">SIGINT</a>  </td><td> -                    </td><td> Terminate with message </td><td> Dialog to decide</td></tr>
  <tr><td><a name="SIGFPE">SIGFPE</a>  </td><td> raise <tt><a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a></tt>  </td><td> Raises exception       </td><td> Dialog to decide</td></tr>
  <tr><td><a name="SIGTERM">SIGTERM</a> </td><td> -                    </td><td> Terminate with message </td><td> Terminate with message</td></tr>
  <tr><td><a name="SIGSEGV">SIGSEGV</a> </td><td> -                    </td><td> Terminate program      </td><td> Terminate with message</td></tr>
  <tr><td><a name="SIGPIPE">SIGPIPE</a> </td><td> -                    </td><td> Ignored                </td><td> Ignored</td></tr>
  <tr><td><a name="SIGWINCH">SIGWINCH</a></td><td> Resize console       </td><td> -                      </td><td> -</td></tr>
  <tr><td><a name="SIGALRM">SIGALRM</a> </td><td> Wait for some time   </td><td> -                      </td><td> -</td></tr>
</table></dd></dl><p>
  Depending on the actual C compiler and operating system the
  signals SIGABRT, SIGILL or SIGTRAP might be used to raise
  <tt><a class="exception" href="#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt> and the signal SIGFPE might be used to raise
  <tt><a class="exception" href="#NUMERIC_ERROR">NUMERIC_ERROR</a></tt>.
</p><p>
  If the interpreter respectively compiler option <a class="link" href="../scrshots/s7c.htm#compiler_option-t"><tt><b>-ts</b></tt></a> has been
  used some signals (see table above) trigger a dialog at the
  console. E.g.:
</p><pre class="indent">
*** SIGNAL SIGINT RAISED

*** The following commands are possible:
  RETURN  Continue
  *       Terminate
  /       Trigger SIGFPE
  !n      Raise exception with number (e.g.: !1 raises MEMORY_ERROR)
</pre><p>
  The user can enter a command and activate it with RETURN.
  If the program was waiting for an input at the console the
  input can be entered again:
</p><pre class="indent">
re-enter input>
</pre><p>
  Triggering SIGFPE is useful if the program runs in a debugger.
  In this case SIGFPE will activate the debugger prompt. Raising
  an exception (e.g.: MEMORY_ERROR) can be used to get a stack
  trace (this works only in the interpreter). A compiled program
  must be executed with a debugger to get a stack trace.
</p>

<a name="Other_errors_and_warnings"><h3>17.9 Other errors and warnings</h3></a>
<p><dl><dt>
  No more memory. Parsing terminated.</dt><dd>
    This error message is displayed after the parsing error 1
    (<a class="link" href="#OUT_OF_HEAP_SPACE">Out of heap space</a>). The file name and line number of the
    analyzer source code where this happens is displayed together
    with internal heap information.</dd><dt>

  System declaration for main missing</dt><dd>
    Each program must contain a system declaration that describes
    which procedure to start as first one.</dd><dt>

  Exception %s raised with</dt><dd>
    If your trace level specifies exception tracing exceptions
    and handlers are displayed with this messages and the user
    must type the ENTER-key to accept.</dd><dt>

  Action $%s requires %s not %s</dt><dd>
    This error can happen if an action tries to do something
    with the wrong primitive value. For example adding an
    integer to a string with INT_ADD. Since the analyze phase
    checks for the right types this error can only happen if the
    basic libraries are defined wrong.</dd><dt>

  Action $%s with empty value</dt><dd>
    This error can happen if an action tries to do something
    with NULL and NULL is not allowed as value. If parsing works
    correct this should never happen.</dd><dt>

  Action $%s requires variable %s not constant</dt><dd>
    This error can happen with actions which assign a value to
    a constant. Since the analyze phase checks for variable objects
    this error can only happen if the basic libraries are defined
    wrong. Principally this error is possible with the following
    operations: :=, incr, decr, wrd_rd, lin_rd</dd><dt>
</dl><p></p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/ffi.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<span class="navigation">next</span>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
