<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Tutorial</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#TUTORIAL"><big>Tutorial</big></a>
<a class="menu" href="#Hello_world">Hello&nbsp;world</a>
<a class="menu" href="#Greeting">Greeting</a>
<a class="menu" href="#Local_declarations_and_expressions">Local&nbsp;decls</a>
<a class="menu" href="#For_loop_and_float_expressions">For&nbsp;loop</a>
<a class="menu" href="#For_loop_and_containers">For&nbsp;each&nbsp;loop</a>
<a class="menu" href="#Parameters">Parameters</a>
<a class="menu" href="#Declare_a_statement">Decl&nbsp;stat</a>
<a class="menu" href="#Template_declaring_a_statement">Template</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Tutorial</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/intro.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/decls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="TUTORIAL"><h2>2. TUTORIAL</h2></a>

<p>
    At the beginning we show how the basic features, that every programming
  language has, look like in Seed7.
</p>

<a name="Hello_world"><h3>2.1 Hello world</h3></a>
<p>
    Below is the hello world program of Seed7:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"hello world"</span>);
  <span class="keywd">end func</span>;
</pre><p>
  Save this program to the file hello.sd7 and start it in a console with:
</p><pre class="indent">
s7 hello
</pre><p>
  The Seed7 interpreter writes something like
</p><pre class="indent">
SEED7 INTERPRETER Version 5.0.11428  Copyright (c) 1990-2020 Thomas Mertes
hello world
</pre><p>
  You get information about the Seed7 interpreter and
  the output of the hello.sd7 program:
</p><pre class="indent">
hello world
</pre><p>
  The option <b>-q</b> can be used to suppress the information line
  of the Seed7 interpreter:
</p><pre class="indent">
s7 -q hello
</pre><p>
  The first line of the program
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
</pre><p>
  includes all definitions of the standard library. In contrast to
  other libraries the seed7_05.s7i library contains not only function
  declarations but also declarations of statements and operators.
  Additionally the seed7_05.s7i library defines the '<tt>main</tt>' function
  as entry point for a Seed7 program.
</p><p>
  In the example above <tt>'main'</tt> is declared as constant and <tt><a class="type" href="types.htm#proc">proc</a></tt>
  is the type of <tt>'main'</tt>. Declaring <tt>'main'</tt> with the type
  <tt><a class="type" href="types.htm#proc">proc</a></tt> makes a procedure out of it. The object <tt>'main'</tt> gets a
</p><pre class="indent">
<span class="keywd">func</span> ... <span class="keywd">end func</span>
</pre><p>
  construct as value. The <tt>'<span class="keywd">func</span>'</tt> construct is similar to
  <tt><span class="keywd">begin</span> ... <span class="keywd">end</span></tt> in PASCAL and <tt>{ ... }</tt> in C. Inside the <tt>'<span class="keywd">func</span>'</tt> is a
  <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt> statement with the <tt><span class="stri">"hello world"</span></tt> string. The
  <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt> statement is used to write a <tt><a class="type" href="types.htm#string">string</a></tt> followed by a
  newline character.
</p>

<a name="Greeting"><h3>2.2 Greeting</h3></a>
<p>
    The program below starts a little dialog:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<span class="stri">"What's your name? "</span>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"Hi "</span> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> <span class="stri">"!"</span>);
  <span class="keywd">end func</span>;
</pre><p>
  Save this program to the file greeting.sd7 and start it in a console
  with:
</p><pre class="indent">
s7 greeting
</pre><p>
  The program asks you for your name with:
</p><pre class="indent">
What's your name?
</pre><p>
  After you entered your name and pressed enter it will greet you.
  This program uses the variable <tt>'name'</tt> to store the name you entered.
  Variables must be defined. The place to to define and initialize
  all variables of a function is after the keyword <span class="keywd">local</span>.
</p><pre class="indent">
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
</pre><p>
  This defines the <tt><a class="type" href="types.htm#string">string</a></tt> variable <tt>'name'</tt>. This definition assigns
  also the initial value <span class="stri">""</span> to <tt>'name'</tt>. In Seed7 variables must be
  defined and always get an initial value. This seems unnecessary in
  small programs, but if programs grow bigger it helps readability a lot.
</p><p>
  The <tt><a class="func" href="../libraries/stdio.htm#write(in_string)">write</a></tt> statement is similar to <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt>, but it does not write
  a newline character. The <tt><a class="func" href="../libraries/stdio.htm#readln(inout_string)">readln</a></tt> statement reads a line from the
  standard input file and assigns this line to the given variable.
  This function allows the usage of backspace the correct the input.
  By pressing enter the line is sent to the program. The final
  <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt> statement contains the operator <tt><a class="op" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a></tt> to concatenate strings.
  If necessary the <tt><a class="op" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a></tt> operator converts values to <tt><a class="type" href="types.htm#string">string</a></tt>.
</p><p>
  The greeting program above has a problem. If someone refuses to
  type his name and just presses enter the program writes:
</p><pre class="indent">
Hi !
</pre><p>
  To avoid this we improve the program to check for special cases:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<span class="stri">"What's your name? "</span>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <span class="stri">""</span> <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"Greetings to the person who pressed enter!"</span>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">elsif</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <span class="stri">"name"</span> <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"Interesting, your name is name."</span>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">else</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"Hi "</span> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> <span class="stri">"!"</span>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  There can be zero or more <tt><span class="keywd">elsif</span></tt> parts, and the <tt><span class="keywd">else</span></tt> part
  is optional. As you can see the equality of strings is checked with <tt><a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a></tt>.
  An if-statement is one way to improve the greeting program.
  Alternatively we can use a loop to insist on entering a name:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">repeat</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<span class="stri">"What's your name? "</span>);
      <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">until</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&gt;(in_string)">&lt;&gt;</a> <span class="stri">""</span>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"Hi "</span> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> <span class="stri">"!"</span>);
  <span class="keywd">end func</span>;
</pre><p>
  The <tt><span class="keywd">repeat</span> ... <span class="keywd">until</span></tt> loop repeats the statements
  between the two keywords until the condition <tt>name <a class="op" href="../libraries/string.htm#(in_string)<&gt;(in_string)">&lt;&gt;</a> <span class="stri">""</span></tt> is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>.
  Note that the statements in the <tt><a class="keywd" href="stats.htm#repeat-statement">repeat</a></tt> loop are executed
  at least once. A solution with a <tt><a class="keywd" href="stats.htm#while-statement">while</a></tt> loop is:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<span class="stri">"What's your name? "</span>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <span class="stri">""</span> <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<span class="stri">"Just pressing enter is not okay. What's your name? "</span>);
      <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"Hi "</span> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> <span class="stri">"!"</span>);
  <span class="keywd">end func</span>;
</pre><p>
  The <tt><a class="keywd" href="stats.htm#while-statement">while</a></tt> loop repeats the statements between the keywords
  <tt><span class="keywd">do</span></tt> and <tt><span class="keywd">end</span></tt> as long as the condition <tt>name <a class="op" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <span class="stri">""</span></tt> is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>.
  Note that the statements in a <tt><a class="keywd" href="stats.htm#while-statement">while</a></tt> loop might not be executed at all.
  In the example above this happens if a non-empty name is entered
  after the question: What's your name?
</p>

<a name="Local_declarations_and_expressions"><h3>2.3 Local declarations and expressions</h3></a>
<p>
    To write a Fahrenheit to Celsius conversion table we use
  the following program:
</p><pre class="indent">
<span class="comment">(* Print a Fahrenheit-Celsius table
   for Fahrenheit values between 0 and 300 *)</span>

$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: lower <span class="keywd">is</span> 0;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: upper <span class="keywd">is</span> 300;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: increment <span class="keywd">is</span> 20;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: fahr <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: celsius <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    fahr := lower;
    <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<=(in_integer)">&lt;=</a> upper <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
      celsius := 5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32) <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 9;
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)&lt;&amp;(in_string)">&lt;&amp;</a> <span class="stri">" "</span> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)&lt;&amp;(in_aType)">&lt;&amp;</a> celsius);
      fahr <a class="op_no_ul" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a> increment;
    <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
  <span class="keywd">end func</span>;
</pre><p>
  Everything between <span class="comment">(* and *)</span> is a <a class="link" href="tokens.htm#Comments">comment</a>, which is ignored. This
  program contains local constants and variables of the type <tt><a class="type" href="types.htm#integer">integer</a></tt>.
  The constants and variables must be initialized when they are declared.
  This program contains also an <a class="link" href="stats.htm#Assignment">assignment</a> (<span class="op">:=</span>), a <a class="link" href="stats.htm#while-statement">while-statement</a> and
  the expression to compute the <tt>'celsius'</tt> value. The variable <tt>'fahr'</tt> is
  incremented with the <tt><a class="op" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a></tt> operator. The expression to compute the
  <tt>'celsius'</tt> value uses an integer division (<tt><a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt>). The output produced
  by this program is
</p><pre class="indent">
0 -17
20 -6
40 4
60 15
80 26
100 37
120 48
140 60
160 71
180 82
200 93
220 104
240 115
260 126
280 137
300 148
</pre><p></p>

<a name="For_loop_and_float_expressions"><h3>2.4 For loop and float expressions</h3></a>
<p>
    An improved version of the program to write the Fahrenheit
  to Celsius conversion table is:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"<a class="lib" href="../libraries/float.htm">float.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: lower <span class="keywd">is</span> 0;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: upper <span class="keywd">is</span> 300;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: increment <span class="keywd">is</span> 20;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: fahr <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#float">float</a>: celsius <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../manual/stats.htm#for-step-statement">for</a> fahr <a class="keywd_no_ul" href="../manual/stats.htm#for-step-statement">range</a> lower <a class="keywd_no_ul" href="../manual/stats.htm#for-step-statement">to</a> upper <a class="keywd_no_ul" href="../manual/stats.htm#for-step-statement">step</a> increment <a class="keywd_no_ul" href="../manual/stats.htm#for-step-statement">do</a>
      celsius := <a class="func_no_ul" href="../libraries/float.htm#flt(in_integer)">flt</a>(5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32)) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 9.0;
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 3 <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <span class="stri">" "</span> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> celsius <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 6);
    <a class="keywd_no_ul" href="../manual/stats.htm#for-step-statement">end for</a>;
  <span class="keywd">end func</span>;
</pre><p>
  To use the type <tt><a class="type" href="types.htm#float">float</a></tt> it is necessary to include <tt><a class="lib" href="../libraries/float.htm">float.s7i</a></tt>.
  The <tt><a class="type" href="types.htm#float">float</a></tt> variable <tt>'celsius'</tt> must be initialized with 0.0
  (instead of 0). The <tt><a class="link" href="stats.htm#for-statement">for-loop</a></tt> executes the loop body with
  different values of <tt>fahr</tt> (0, 20, 40 .. 280, 300). Omitting
  the <tt><span class="keywd">step</span></tt> part corresponds to a step of 1:
</p><pre class="indent">
<span class="keywd">for</span> fahr <span class="keywd">range</span> lower <span class="keywd">to</span> upper <span class="keywd">do</span>
  celsius := <a class="func_no_ul" href="../libraries/float.htm#flt(in_integer)">flt</a>(5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32)) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 9.0;
  <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 3 <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <span class="stri">" "</span> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> celsius <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 6);
<span class="keywd">end for</span>;
</pre><p>
  The keyword <tt><span class="keywd">downto</span></tt> can be used to run the <tt><a class="link" href="stats.htm#for-statement">for-loop</a></tt> backward:
</p><pre class="indent">
<span class="keywd">for</span> fahr <span class="keywd">range</span> upper <span class="keywd">downto</span> lower <span class="keywd">do</span>
  celsius := <a class="func_no_ul" href="../libraries/float.htm#flt(in_integer)">flt</a>(5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32)) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 9.0;
  <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 3 <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <span class="stri">" "</span> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> celsius <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 6);
<span class="keywd">end for</span>;
</pre><p>
  Since Seed7 is strong typed <tt><a class="type" href="types.htm#integer">integer</a></tt> and <tt><a class="type" href="types.htm#float">float</a></tt> values
  cannot be mixed in expressions. Therefore the <tt><a class="type" href="types.htm#integer">integer</a></tt>
  expression <tt>'5 * (fahr - 32)'</tt> is converted to <tt><a class="type" href="types.htm#float">float</a></tt> with
  the function <tt><a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a></tt>. For the same reason a <tt>'<a class="func" href="../libraries/float.htm#(in_float)/(in_float)">/</a>'</tt> division and
  the value <tt>'9.0'</tt> must be used. The <tt><a class="op" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a></tt> operator is used to
  concatenate elements before writing. If the right operand of
  the <tt><a class="op" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a></tt> operator has not the type <tt><a class="type" href="types.htm#string">string</a></tt> it is converted to
  a <tt><a class="type" href="types.htm#string">string</a></tt> using the <tt>'str'</tt> function. The <tt><a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a></tt> operator
  converts the value of <tt>'fahr'</tt> to a string and pads spaces to
  the left until the string has length 3. The <tt><a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a></tt> operator
  converts the value of <tt>'celsius'</tt> to a string with 2 decimal
  digits. The resulting string is padded left up to a length
  of 6.
</p>

<a name="For_loop_and_containers"><h3>2.5 For loop and containers</h3></a>
<p>
    A <tt><a class="link" href="stats.htm#for-each-statement">for-loop</a></tt> can be used to iterate over the elements of an <tt><a class="type" href="types.htm#array">array</a></tt>
  (so it is actually a <tt><a class="link" href="stats.htm#for-each-statement">for-each-loop</a></tt>):
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">for</a> number <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">range</a> [] (0, 1, 2, 3, 5, 8, 13, 20, 40, 100) <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(number <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)&lt;&amp;(in_string)">&lt;&amp;</a> <span class="stri">" "</span>);
    <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  In the example above <tt>[] (0, 1, 2, 3, 5, 8, 13, 20, 40, 100)</tt>
  is an array literal. <tt><a class="link" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">For-loops</a></tt> can also iterate over the elements
  of a <tt><a class="type" href="types.htm#set">set</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: innerPlanet <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">for</a> innerPlanet <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">range</a> {<span class="stri">"Mercury"</span>, <span class="stri">"Venus"</span>, <span class="stri">"Earth"</span>, <span class="stri">"Mars"</span>} <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(innerPlanet <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <span class="stri">" "</span>);
    <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  In the example above <tt>{<span class="stri">"Mercury"</span>, <span class="stri">"Venus"</span>, <span class="stri">"Earth"</span>, <span class="stri">"Mars"</span>}</tt> is a set
  literal. <tt><a class="link" href="stats.htm#for-each-statement">For-loops</a></tt> can iterate over the characters of a <tt><a class="type" href="types.htm#string">string</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#set">set of</a> <a class="type_no_ul" href="types.htm#char">char</a>: vowels <span class="keywd">is</span> {<span class="stri">'a'</span>, <span class="stri">'e'</span>, <span class="stri">'i'</span>, <span class="stri">'o'</span>, <span class="stri">'u'</span>};
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: letter <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">for</a> letter <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">range</a> <span class="stri">"the quick brown fox jumps over the lazy dog"</span> <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">do</a>
      <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> letter <a class="op_no_ul" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> vowels <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
        <a class="func_no_ul" href="../libraries/enable_io.htm#write(in_aType)">write</a>(letter);
      <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
    <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  A <tt><a class="type" href="types.htm#hash">hash</a></tt> is similar to an <tt><a class="type" href="types.htm#array">array</a></tt> with the difference that the index
  can be any type (not just one that can be converted to <tt><a class="type" href="types.htm#integer">integer</a></tt>). The
  type <tt><a class="type" href="types.htm#hash">hash</a> <span class="type">[</span><a class="type" href="types.htm#string">string</a><span class="type">]</span> <a class="type" href="types.htm#integer">integer</a></tt> defines a hash with a <tt><a class="type" href="types.htm#string">string</a></tt> as index
  and an <tt><a class="type" href="types.htm#integer">integer</a></tt> as value. The example below uses <tt><a class="var" href="../libraries/keydescr.htm#keyDescription">keyDescription</a></tt>
  which is defined as <tt><a class="type" href="types.htm#hash">hash</a> <span class="type">[</span><a class="type" href="types.htm#char">char</a><span class="type">]</span> <a class="type" href="types.htm#string">string</a></tt> in <tt><span class="lib">"</span><a class="lib" href="../libraries/keydescr.htm">keydescr.s7i</a><span class="lib">"</span></tt>. It
  contains descriptive texts for keyboard keys. A <tt><a class="link" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">for-loop</a></tt> can loop
  over the values of a <tt><a class="type" href="types.htm#hash">hash</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/keydescr.htm">keydescr.s7i</a><span class="lib">"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: description <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">for</a> description <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">range</a> <a class="var"  href="../libraries/keydescr.htm#keyDescription">keyDescription</a> <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/enable_io.htm#write(in_aType)">write</a>(description <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <span class="stri">" "</span>);
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  A <tt><a class="link" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">for-loop</a></tt> can also loop over the keys (indices) and values of a <tt><a class="type" href="types.htm#hash">hash</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/keydescr.htm">keydescr.s7i</a><span class="lib">"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: aChar <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: description <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">for</a> description <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">key</a> aChar <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">range</a> <a class="var"  href="../libraries/keydescr.htm#keyDescription">keyDescription</a> <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"const char: "</span> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> description <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <span class="stri">" is "</span> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="func_no_ul" href="../libraries/char.htm#literal(in_char)">literal</a>(aChar));
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">end for</a>;
  <span class="keywd">end func</span>;
</pre><p>
  A <tt><a class="link" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">for-loop</a></tt> can loop over the keys (indices) and values of a <tt><a class="type" href="types.htm#array">array</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">for</a> name <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">key</a> number <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">range</a> [0] (<span class="stri">"zero"</span>, <span class="stri">"one"</span>, <span class="stri">"two"</span>, <span class="stri">"three"</span>, <span class="stri">"four"</span>,
                                   <span class="stri">"five"</span>, <span class="stri">"six"</span>, <span class="stri">"seven"</span>, <span class="stri">"eight"</span>, <span class="stri">"nine"</span>) <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(number <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)&lt;&amp;(in_string)">&lt;&amp;</a> <span class="stri">": "</span> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> name);
    <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">end for</a>;
  <span class="keywd">end func</span>;
</pre><p>
  All loops that iterate over a container can be combined with an <tt><span class="func">until</span></tt> condition:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: testText <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: controlCharFound <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<span class="stri">"Enter text: "</span>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(testText);
    <span class="keywd">for</span> ch <span class="keywd">range</span> testText <span class="keywd">until</span> controlCharFound <span class="keywd">do</span>
      controlCharFound := <a class="func_no_ul" href="../libraries/integer.htm#ord(in_integer)">ord</a>(ch) &lt; 32;
    <span class="keywd">end for</span>;
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> controlCharFound <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<span class="stri">"The text contains control chars."</span>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre>

<a name="Parameters"><h3>2.6 Parameters</h3></a>
<p>
    Most parameters are not changed inside a function. Seed7
  uses <tt>'<span class="keywd">in</span>'</tt> parameters to describe this situation:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: negate (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: num1) <span class="keywd">is</span>
  <span class="keywd">return</span> <a class="op_no_ul" href="../libraries/integer.htm#-(in_integer)">-</a>num1;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: fib (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: num1) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: fib <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> num1 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<>(in_integer)">&lt;></a> 1 <a class="op_no_ul" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> num1 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<>(in_integer)">&lt;></a> 2 <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      fib := fib(pred(num1)) <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> fib(num1 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 2);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  The functions above use <tt>'<span class="keywd">in</span>'</tt> parameters named <tt>'num1'</tt>.
  An assignment to <tt>'num1'</tt> is not allowed. A formal <tt>'<span class="keywd">in</span>'</tt>
  parameter like <tt>'num1'</tt> behaves like a constant.
  Trying to change a formal <tt>'<span class="keywd">in</span>'</tt> parameter:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: wrong (<span class="keywd">in</span> <span class="type">integer</span>: num2) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    num2 := 0;
  <span class="keywd">end func</span>;
</pre><p>
  results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst77.sd7(5):53: <a class="link" href="errors.htm#WRONGACCESSRIGHT">Variable expected in {num2 := 0 } found parameter (in integer: num2)</a>
    num2 := 0;
</pre><p>
  When a function wants to change the value of the actual
  parameter it can use an <tt>'<span class="keywd">inout</span>'</tt> parameter:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: reset (<span class="keywd">inout</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: num2) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    num2 := 0;
  <span class="keywd">end func</span>;
</pre><p>
  If you call this function with
</p><pre class="indent">
reset(number);
</pre><p>
  the variable <tt>'number'</tt> has the value 0 afterwards. Calling
  <tt>'reset'</tt> with a constant instead of a variable:
</p><pre class="indent">
reset(8);
</pre><p>
  results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst77.sd7(12):53: <a class="link" href="errors.htm#WRONGACCESSRIGHT">Variable expected in {8 reset } found constant integer: 8</a>
    reset(8);
</pre><p>
  Sometimes an <tt>'<span class="keywd">in</span>'</tt> parameter is needed, but you need to change
  the formal parameter in the function without affecting the
  actual parameter. In this case we use the <tt>'<span class="keywd">in var</span>'</tt> parameter:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#string">string</a>: oct_str (<span class="keywd">in var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> number >= 0 <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <span class="keywd">repeat</span>
        stri := str(number <span class="op">mod</span> 8) &amp; stri;
        number := number <span class="op">mdiv</span> 8;
      <span class="keywd">until</span> number = 0;
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  As you can see this works like a combination of an <tt>'<span class="keywd">in</span>'</tt>
  parameter with a local <tt>'<span class="keywd">var</span>'</tt>.
</p><p>
  Conventionally there are two kinds of parameters:
  <tt>'call by value'</tt> and <tt>'call by reference'</tt>. When taking the
  access right (constant or variable) into account we get
  the following table:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
    
    <tr><th> parameter </th><th>  call by  </th><th> access right </th></tr>
    
    <tr><td> val       </td><td align="center">   value   </td><td> const        </td></tr>
    <tr><td> ref       </td><td align="center"> reference </td><td> const        </td></tr>
    <tr><td> in        </td><td align="center"> val / ref </td><td> const        </td></tr>
    <tr><td> in var    </td><td align="center">   value   </td><td> var          </td></tr>
    <tr><td> inout     </td><td align="center"> reference </td><td> var          </td></tr>
    
</table></dd></dl><p>
  Additionally to the parameters we already know this table
  describes also <tt>'<span class="keywd">val</span>'</tt> and <tt>'<span class="keywd">ref</span>'</tt> parameters which use
  'call by value' and 'call by reference' and have a constant
  formal parameter. The <tt>'<span class="keywd">in</span>'</tt> parameter is called by
  <tt>'val / ref'</tt> in this table which is easily explained:
</p><dl><dd>
    An <tt>'<span class="keywd">in</span>'</tt> parameter is either a <tt>'<span class="keywd">val</span>'</tt> or a <tt>'<span class="keywd">ref</span>'</tt> parameter
    depending on the type of the parameter.
</dd></dl><p>
  The parameter
</p><pre class="indent">
<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number
</pre><p>
  is a 'val' parameter which could also be declared as
</p><pre class="indent">
<span class="keywd">val</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number
</pre><p>
  while the parameter
</p><pre class="indent">
<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#string">string</a>: stri
</pre><p>
  is a 'ref' parameter which could also be declared as
</p><pre class="indent">
<span class="keywd">ref</span> <a class="type_no_ul" href="types.htm#string">string</a>: stri
</pre><p>
  The meaning of the <tt>'<span class="keywd">in</span>'</tt> parameter is predefined for most
  types. Usually types with small amounts of data use <tt>'<span class="keywd">val</span>'</tt>
  as <tt>'<span class="keywd">in</span>'</tt> parameter while types with bigger data amounts use
  <tt>'<span class="keywd">ref</span>'</tt>. Most of the time it is not necessary to care if an
  <tt>'<span class="keywd">in</span>'</tt> parameter is really a <tt>'<span class="keywd">val</span>'</tt> or <tt>'<span class="keywd">ref</span>'</tt> parameter.
</p><p>
  In rare cases a <tt>'<span class="keywd">ref</span>'</tt> parameter would have undesired side
  effects with global variables or other <tt>'<span class="keywd">ref</span>'</tt> parameters.
  In these cases an explicit <tt>'<span class="keywd">val</span>'</tt> parameter instead of an
  <tt>'<span class="keywd">in</span>'</tt> parameter makes sense.
</p><p>
  In all normal cases an <tt>'<span class="keywd">in</span>'</tt> parameter should be preferred
  over an explicit <tt>'<span class="keywd">val</span>'</tt> and <tt>'<span class="keywd">ref</span>'</tt> parameter.
</p>

<a name="Declare_a_statement"><h3>2.7 Declare a statement</h3></a>
<p>
    This example program writes its arguments
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;       <span class="comment"># Standard Seed7 library</span>

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> stri <span class="keywd">range</span> argv(PROGRAM) <span class="keywd">do</span>
      write(stri &lt;& <span class="stri">" "</span>);
    <span class="keywd">end for</span>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  The <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> iterates over <tt><a class="func" href="../manual/os.htm#argv_PROGRAM">argv</a>(PROGRAM)</tt>.
  The function <tt><a class="func" href="../manual/os.htm#argv_PROGRAM">argv</a>(PROGRAM)</tt> returns an <tt><a class="type" href="types.htm#array">array string</a></tt>
  (=<tt><a class="type" href="types.htm#array">array</a></tt> of <tt><a class="type" href="types.htm#string">string</a></tt> elements). The <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> is overloaded
  for various collection types. In the standard Seed7 library
  <tt><span class="lib">seed7_05.s7i</span></tt> the <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> for <a class="type" href="types.htm#array">array</a>s is declared as
  follows:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: for (<span class="keywd">inout</span> <span class="type">baseType</span>: variable) range (<span class="keywd">in</span> <span class="type">arrayType</span>: arr_obj) do
              (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: statements)
            end for <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(arr_obj) <span class="keywd">do</span>
      variable := arr_obj[number];
      statements;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre><p>
  The syntax of this <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> is declared as:
</p><pre class="indent">
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .for.().range.().to.().do.().end.for <span class="keywd">is</span>              -> 25;
</pre><p>
  Additionally everybody can overload the <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> also.
  Because of these powerful features Seed7 does not need iterators.
</p>

<a name="Template_declaring_a_statement"><h3>2.8 Template declaring a statement</h3></a>
<p>
  Templates are just normal functions with <a class="type" href="types.htm#type">type</a>s as parameters.
  The following template function declares <tt><a class="link" href="stats.htm#for-statement">for-statements</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: FOR_DECLS (<span class="keywd">in</span> <span class="type">type</span>: aType) <span class="keywd">is func</span>
  <span class="keywd">begin</span>

    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: for (<span class="keywd">inout</span> <span class="type">aType</span>: variable) range (<span class="keywd">in</span> <span class="type">aType</span>: low) to (<span class="keywd">in</span> <span class="type">aType</span>: high) do
        (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: statements) end for <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        variable := low;
        <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> variable &lt;= high <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
          statements;
          <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> variable &lt; high <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
            incr(variable);
            statements;
          <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
        <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
      <span class="keywd">end func</span>;

  <span class="keywd">end func</span>;

FOR_DECLS(<span class="type">char</span>);
FOR_DECLS(<span class="type">boolean</span>);
</pre><p>
  The body of the 'FOR_DECLS' function contains a declaration of
  the <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> for the type <tt><span class="type">aType</span></tt>. Calling 'FOR_DECLS' with
  <tt><a class="type" href="types.htm#char">char</a></tt> and <tt><a class="type" href="types.htm#boolean">boolean</a></tt> as parameter creates corresponding declarations
  of <tt><a class="link" href="stats.htm#for-statement">for-statements</a></tt>. The example above is a simplified part of
  the library <tt><a class="lib" href="../libraries/forloop.htm">forloop.s7i</a></tt>.
</p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/intro.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/decls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
