<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Tutorial</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#TUTORIAL"><big>Tutorial</big></a>
<a class="menu" href="#Hello_world">Hello&nbsp;world</a>
<a class="menu" href="#Greeting">Greeting</a>
<a class="menu" href="#Assignment">Assignment</a>
<a class="menu" href="#Constants">Constants</a>
<a class="menu" href="#For_loop_and_float_expressions">For&nbsp;loop</a>
<a class="menu" href="#Arrays">Arrays</a>
<a class="menu" href="#Hashes">Hashes</a>
<a class="menu" href="#For_loop_and_containers">For&nbsp;each&nbsp;loop</a>
<a class="menu" href="#Functions">Functions</a>
<a class="menu" href="#Parameters">Parameters</a>
<a class="menu" href="#Overloading">Overloading</a>
<a class="menu" href="#Templates">Templates</a>
<a class="menu" href="#Declare_a_statement">Decl&nbsp;statement</a>
<a class="menu" href="#Template_declaring_a_statement">Stmt template</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Tutorial</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/intro.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/decls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="TUTORIAL"><h2>2. TUTORIAL</h2></a>


<a name="Hello_world"><h3>2.1 Hello world</h3></a>
<p>
    Below is the hello world program of Seed7:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"hello world"</a>);
  <span class="keywd">end func</span>;
</pre><p>
  Save this program to the file hello.sd7 and start it in a console with:
</p><pre class="indent">
s7 hello
</pre><p>
  The Seed7 interpreter writes something like
</p><pre class="indent">
SEED7 INTERPRETER Version 5.1.790  Copyright (c) 1990-2023 Thomas Mertes
hello world
</pre><p>
  You get information about the Seed7 interpreter and
  the output of the hello.sd7 program:
</p><pre class="indent">
hello world
</pre><p>
  The option <a class="link" href="../faq.htm#interpreter_option-q"><tt><b>-q</b></tt></a> can be used to suppress the information line
  of the Seed7 interpreter:
</p><pre class="indent">
s7 -q hello
</pre><p>
  The first line of the program
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
</pre><p>
  includes all definitions of the standard library. In contrast to
  other libraries the seed7_05.s7i library contains not only function
  declarations but also declarations of statements and operators.
  Additionally the seed7_05.s7i library defines the <tt><span class="func">main</span></tt> function
  as entry point for a Seed7 program.
</p><p>
  In the example above <tt><span class="func">main</span></tt> is declared as constant and <tt><a class="type" href="types.htm#proc">proc</a></tt>
  is the type of <tt><span class="func">main</span></tt>. Declaring <tt><span class="func">main</span></tt> with the type
  <tt><a class="type" href="types.htm#proc">proc</a></tt> makes a procedure out of it. The object <tt><span class="func">main</span></tt> gets a
</p><pre class="indent">
<span class="keywd">func</span> ... <span class="keywd">end func</span>
</pre><p>
  construct as value. The <tt>'<span class="keywd">func</span>'</tt> construct is similar to
  <tt><span class="keywd">begin</span> ... <span class="keywd">end</span></tt> in PASCAL and <tt>{ ... }</tt> in C. Inside the <tt>'<span class="keywd">func</span>'</tt> is a
  <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt> statement with the <tt><a class="stri" href="tokens.htm#String_literals">"hello world"</a></tt> string. The
  <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt> statement is used to write a <tt><a class="type" href="types.htm#string">string</a></tt> followed by a
  newline character.
</p>

<a name="Greeting"><h3>2.2 Greeting</h3></a>
<p>
    The program below starts a little dialog:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"What's your name? "</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Hi "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">"!"</a>);
  <span class="keywd">end func</span>;
</pre><p>
  Save this program to the file greeting.sd7 and start it in a console
  with:
</p><pre class="indent">
s7 greeting
</pre><p>
  The program asks you for your name with:
</p><pre class="indent">
What's your name?
</pre><p>
  After you entered your name and pressed enter it will greet you.
  This program uses the variable <tt>'name'</tt> to store the name you entered.
  Variables must be defined. The place to to define and initialize
  all variables of a function is after the keyword <span class="keywd">local</span>.
</p><pre class="indent">
<span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
</pre><p>
  This defines the <tt><a class="type" href="types.htm#string">string</a></tt> variable <tt>'name'</tt>. This definition assigns
  also the initial value <a class="stri" href="tokens.htm#String_literals">""</a> to <tt>'name'</tt>. The value <a class="stri" href="tokens.htm#String_literals">""</a> is the empty string
  (it contains no characters). In Seed7 variables must be defined and
  always get an initial value.
</p><p>
  The <tt><a class="func" href="../libraries/stdio.htm#write(in_string)">write</a></tt> statement is similar to <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt>, but it does not write
  a newline character. The <tt><a class="func" href="../libraries/stdio.htm#readln(inout_string)">readln</a></tt> statement reads a line from the
  standard input file and assigns this line to the given variable.
  This function allows the usage of backspace to correct the input.
  By pressing enter the line is sent to the program. The final
  <tt><a class="func" href="../libraries/stdio.htm#writeln(in_string)">writeln</a></tt> statement contains the operator <tt><a class="op" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a></tt> to concatenate strings.
  If necessary the <tt><a class="op" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a></tt> operator converts values to <tt><a class="type" href="types.htm#string">string</a></tt>.
</p><p>
  The greeting program above has a problem. If someone refuses to
  type his name and just presses enter the program writes:
</p><pre class="indent">
Hi !
</pre><p>
  To avoid this we improve the program to check for special cases:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"What's your name? "</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <a class="stri" href="tokens.htm#String_literals">""</a> <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Greetings to the person who pressed enter!"</a>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">elsif</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <a class="stri" href="tokens.htm#String_literals">"name"</a> <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Interesting, your name is name."</a>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">else</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Hi "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">"!"</a>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  There can be zero or more <tt><span class="keywd">elsif</span></tt> parts, and the <tt><span class="keywd">else</span></tt> part is
  optional. As you can see the equality of strings is checked with <tt><a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a></tt>.
  The conditions of an <a class="link" href="stats.htm#if-statement">if-statement</a> decide what to do. By chance both
  conditions in the example above use the variable <tt>name</tt>. This special
  case opens the oportunity to use a <a class="link" href="stats.htm#case-statement">case-statement</a> instead:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"What's your name? "</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#case-statement">case</a> name <a class="keywd_no_ul" href="stats.htm#case-statement">of</a>
      <a class="keywd_no_ul" href="stats.htm#case-statement">when</a> {<a class="stri" href="tokens.htm#String_literals">""</a>}:
        <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Greetings to the person who pressed enter!"</a>);
      <a class="keywd_no_ul" href="stats.htm#case-statement">when</a> {<a class="stri" href="tokens.htm#String_literals">"name"</a>}:
        <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Interesting, your name is name."</a>);
      <a class="keywd_no_ul" href="stats.htm#case-statement">when</a> {<a class="stri" href="tokens.htm#String_literals">"Linus"</a>, <a class="stri" href="tokens.htm#String_literals">"Torvalds"</a>}:
        <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Are you the inventor of Linux?"</a>);
      <a class="keywd_no_ul" href="stats.htm#case-statement">otherwise</a>:
        <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Hi "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">"!"</a>);
    <a class="keywd_no_ul" href="stats.htm#case-statement">end case</a>;
  <span class="keywd">end func</span>;
</pre><p>
  As it can be seen, the keyword <tt><a class="keywd_no_ul" href="stats.htm#case-statement">when</a></tt> is followed
  by a comma-separated list of values surrounded by braces.
  This is the set of values covered by this when-part.
  Depending on the value of 'name' one when-part is executed.
  If no when-part fits the otherwise-part is executed.
</p><p>
  This is not the only way to improve the greeting program.
  Alternatively we can use a loop to insist on entering a name:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">repeat</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"What's your name? "</a>);
      <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">until</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&gt;(in_string)">&lt;&gt;</a> <a class="stri" href="tokens.htm#String_literals">""</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Hi "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">"!"</a>);
  <span class="keywd">end func</span>;
</pre><p>
  The <tt><span class="keywd">repeat</span> ... <span class="keywd">until</span></tt> loop repeats the statements
  between the two keywords until the condition <tt>name <a class="op" href="../libraries/string.htm#(in_string)<&gt;(in_string)">&lt;&gt;</a> <a class="stri" href="tokens.htm#String_literals">""</a></tt> is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>.
  Note that the statements in the <tt><a class="keywd" href="stats.htm#repeat-statement">repeat</a></tt> loop are executed
  at least once. A solution with a <tt><a class="keywd" href="stats.htm#while-statement">while</a></tt> loop is:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"What's your name? "</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <a class="stri" href="tokens.htm#String_literals">""</a> <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"Just pressing enter is not okay. What's your name? "</a>);
      <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Hi "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">"!"</a>);
  <span class="keywd">end func</span>;
</pre><p>
  The <tt><a class="keywd" href="stats.htm#while-statement">while</a></tt> loop repeats the statements between the keywords
  <tt><span class="keywd">do</span></tt> and <tt><span class="keywd">end</span></tt> as long as the condition <tt>name <a class="op" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <a class="stri" href="tokens.htm#String_literals">""</a></tt> is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>.
  Note that the statements in a <tt><a class="keywd" href="stats.htm#while-statement">while</a></tt> loop might not be executed at all.
  In the example above this happens if a non-empty name is entered
  after the question: What's your name?
</p>

<a name="Assignment"><h3>2.3 Assignment</h3></a>
<p>
    The following program writes the numbers from 1 to 10:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: count <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> count <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<=(in_integer)">&lt;=</a> 10 <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(count);
      count <a class="op_no_ul" href="stats.htm#Assignment">:=</a> count <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> 1;
    <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
  <span class="keywd">end func</span>;
</pre><p>
  This program declares a local variable of the type <tt><a class="type" href="types.htm#integer">integer</a></tt>:
</p><pre class="indent">
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: count <span class="keywd">is</span> 1;
</pre><p>
  The variable <tt>count</tt> above is initialized with <tt>1</tt>.
  The value of a variable can be changed with an <a class="link" href="stats.htm#Assignment">assignment</a> (<tt><span class="op">:=</span></tt>):
</p><pre class="indent">
    count <a class="op_no_ul" href="stats.htm#Assignment">:=</a> count <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> 1;
</pre><p>
  The expression at the right of the <tt><span class="op">:=</span></tt> symbol is evaluated and
  assigned to the variable left of the <tt><span class="op">:=</span></tt> symbol. In the case
  above the variable <tt>count</tt> is incremented by one. For this special
  case there is a shortcut that could be used instead of the assignment:
</p><pre class="indent">
    <a class="func_no_ul" href="../libraries/integer.htm#incr(inout_integer)">incr</a>(count);
</pre><p>
  The output produced by this program is
</p><pre class="indent">
1
2
3
4
5
6
7
8
9
10
</pre><p>
  What changes are necessary to count down from 10 to 0 instead?
</p>

<a name="Constants"><h3>2.4 Constants</h3></a>
<p>
    To write a Fahrenheit to Celsius conversion table we use
  the following program:
</p><pre class="indent">
<a class="comment" href="tokens.htm#Comments">(* Print a Fahrenheit-Celsius table
   for Fahrenheit values between 0 and 300 *)</a>

$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: upper <span class="keywd">is</span> 300;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: increment <span class="keywd">is</span> 20;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: fahr <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: celsius <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<=(in_integer)">&lt;=</a> upper <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
      celsius <a class="op_no_ul" href="stats.htm#Assignment">:=</a> 5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32) <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 9;
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> celsius);
      fahr <a class="op_no_ul" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a> increment;
    <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
  <span class="keywd">end func</span>;
</pre><p>
  Everything between <a class="comment" href="tokens.htm#Comments">(* and *)</a> is a <a class="link" href="tokens.htm#Comments">comment</a>, which is ignored. This
  program contains local constants and variables of the type <tt><a class="type" href="types.htm#integer">integer</a></tt>.
  Constant declarations are introduced with <tt><span class="keywd">const</span></tt>:
</p><pre class="indent">
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: upper <span class="keywd">is</span> 300;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: increment <span class="keywd">is</span> 20;
</pre><p>
  Like variables constants must be initialized with a value that is
  specified after the keyword <tt><span class="keywd">is</span></tt>. Constants like <tt>upper</tt> cannot be
  changed. All constants just keep the initialization value. An attempt
  to change a constant results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst352.sd7(14):53: <a name="WRONGACCESSRIGHT_example"></a><a class="link" href="errors.htm#WRONGACCESSRIGHT">Variable expected in {lower := 10 } found constant integer: lower</a>
    lower := 10;
</pre><p>
  Note that the error is reported before the program execution starts.
</p><p>
  The program contains a <a class="link" href="stats.htm#while-statement">while-statement</a> and the expression to compute
  the <tt>'celsius'</tt> value. The variable <tt>'fahr'</tt> is incremented with the
  <tt><a class="op" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a></tt> operator. The statement:
</p><pre class="indent">
      fahr <a class="op_no_ul" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a> increment;
</pre><p>
  is a shortcut for the statement:
</p><pre class="indent">
      fahr <a class="op_no_ul" href="stats.htm#Assignment">:=</a> fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> increment;
</pre><p>
  The expression to compute the <tt>'celsius'</tt> value uses an integer
  division (<tt><a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt>). The output produced by this program is
</p><pre class="indent">
0 -17
20 -6
40 4
60 15
80 26
100 37
120 48
140 60
160 71
180 82
200 93
220 104
240 115
260 126
280 137
300 148
</pre><p></p>

<a name="For_loop_and_float_expressions"><h3>2.5 For loop and float expressions</h3></a>
<p>
    An improved version of the program to write the Fahrenheit
  to Celsius conversion table is:
</p><pre class="indent">
<a class="comment" href="tokens.htm#Line_comments"># Print a Fahrenheit-Celsius table with floating point numbers.</a>

$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;  <a class="comment" href="tokens.htm#Line_comments"># This must be included first.</a>
  <span class="keywd">include</span> <span class="lib">"<a class="lib" href="../libraries/float.htm">float.s7i</a>"</span>;     <a class="comment" href="tokens.htm#Line_comments"># Subsequent includes do not need a $.</a>

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: lower <span class="keywd">is</span> 0;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: upper <span class="keywd">is</span> 300;
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: increment <span class="keywd">is</span> 20;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: fahr <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#float">float</a>: celsius <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#for-step-statement">for</a> fahr <a class="keywd_no_ul" href="stats.htm#for-step-statement">range</a> lower <a class="keywd_no_ul" href="stats.htm#for-step-statement">to</a> upper <a class="keywd_no_ul" href="stats.htm#for-step-statement">step</a> increment <a class="keywd_no_ul" href="stats.htm#for-step-statement">do</a>
      celsius <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/float.htm#flt(in_integer)">flt</a>(5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32)) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 9.0;
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 3 <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> celsius <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 6);
    <a class="keywd_no_ul" href="stats.htm#for-step-statement">end for</a>;
  <span class="keywd">end func</span>;
</pre><p>
  Everything between <tt><a class="comment" href="tokens.htm#Line_comments">#</a></tt> the end of the line is a <a class="link" href="tokens.htm#Line_comments">line comment</a>,
  which is ignored. To use the type <tt><a class="type" href="types.htm#float">float</a></tt> it is necessary
  to include <tt><a class="lib" href="../libraries/float.htm">float.s7i</a></tt>. The <tt><a class="type" href="types.htm#float">float</a></tt> variable <tt>'celsius'</tt>
  must be initialized with 0.0 (instead of 0). The <tt><a class="link" href="stats.htm#for-statement">for-loop</a></tt>
  executes the loop body with different values of <tt>fahr</tt>
  (0, 20, 40 .. 280, 300). Omitting the <tt><span class="keywd">step</span></tt> part corresponds
  to a step of 1:
</p><pre class="indent">
<span class="keywd">for</span> fahr <span class="keywd">range</span> lower <span class="keywd">to</span> upper <span class="keywd">do</span>
  celsius <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/float.htm#flt(in_integer)">flt</a>(5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32)) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 9.0;
  <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 3 <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> celsius <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 6);
<span class="keywd">end for</span>;
</pre><p>
  The keyword <tt><span class="keywd">downto</span></tt> can be used to run the <tt><a class="link" href="stats.htm#for-statement">for-loop</a></tt> backward:
</p><pre class="indent">
<span class="keywd">for</span> fahr <span class="keywd">range</span> upper <span class="keywd">downto</span> lower <span class="keywd">do</span>
  celsius <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/float.htm#flt(in_integer)">flt</a>(5 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a> (fahr <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 32)) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 9.0;
  <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>(fahr <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 3 <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> celsius <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> 6);
<span class="keywd">end for</span>;
</pre><p>
  Since Seed7 is strong typed <tt><a class="type" href="types.htm#integer">integer</a></tt> and <tt><a class="type" href="types.htm#float">float</a></tt> values
  cannot be mixed in expressions. Therefore the <tt><a class="type" href="types.htm#integer">integer</a></tt>
  expression <tt>'5 * (fahr - 32)'</tt> is converted to <tt><a class="type" href="types.htm#float">float</a></tt> with
  the function <tt><a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a></tt>. For the same reason a <tt>'<a class="func" href="../libraries/float.htm#(in_float)/(in_float)">/</a>'</tt> division and
  the value <tt>'9.0'</tt> must be used. The <tt><a class="op" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a></tt> operator is used to
  concatenate elements before writing. If the right operand of
  the <tt><a class="op" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a></tt> operator has not the type <tt><a class="type" href="types.htm#string">string</a></tt> it is converted to
  a <tt><a class="type" href="types.htm#string">string</a></tt> using the <tt>'str'</tt> function. The <tt><a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a></tt> operator
  converts the value of <tt>'fahr'</tt> to a string and pads spaces to
  the left until the string has length 3. The <tt><a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a></tt> operator
  converts the value of <tt>'celsius'</tt> to a string with 2 decimal
  digits. The resulting string is padded left up to a length
  of 6.
</p>

<a name="Arrays"><h3>2.6 Arrays</h3></a>
<p>
    Arrays allow a variable to contain several values. E.g.:
  An array can be used to store a mapping from a day number to
  a day name:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#array">array</a> <a class="type_no_ul" href="types.htm#string">string</a>: weekdayName <span class="keywd">is</span> 7 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <a class="stri" href="tokens.htm#String_literals">""</a>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>1<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"monday"</a>;
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>2<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"tuesday"</a>;
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>3<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"wednesday"</a>;
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>4<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"thursday"</a>;
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>5<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"friday"</a>;
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>6<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"saturday"</a>;
    weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>7<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a> <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="stri" href="tokens.htm#String_literals">"sunday"</a>;
    <a class="keywd_no_ul" href="stats.htm#for-statement">for</a> number <a class="keywd_no_ul" href="stats.htm#for-statement">range</a> 1 <a class="keywd_no_ul" href="stats.htm#for-statement">to</a> 7 <a class="keywd_no_ul" href="stats.htm#for-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>number<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a>);
    <a class="keywd_no_ul" href="stats.htm#for-statement">end</a> <a class="keywd_no_ul" href="stats.htm#for-statement">for</a>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre><p>
  Since <tt>weekdayName</tt> is not changed after its values have been
  assigned, it can be declared as constant that is initialized
  with an array literal:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#array">array</a> <a class="type_no_ul" href="types.htm#string">string</a>: weekdayName <span class="keywd">is</span> [] (<a class="stri" href="tokens.htm#String_literals">"monday"</a>, <a class="stri" href="tokens.htm#String_literals">"tuesday"</a>, <a class="stri" href="tokens.htm#String_literals">"wednesday"</a>, <a class="stri" href="tokens.htm#String_literals">"thursday"</a>, <a class="stri" href="tokens.htm#String_literals">"friday"</a>, <a class="stri" href="tokens.htm#String_literals">"saturday"</a>, <a class="stri" href="tokens.htm#String_literals">"sunday"</a>);
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#for-statement">for</a> number <a class="keywd_no_ul" href="stats.htm#for-statement">range</a> 1 <a class="keywd_no_ul" href="stats.htm#for-statement">to</a> 7 <a class="keywd_no_ul" href="stats.htm#for-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>number<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a>);
    <a class="keywd_no_ul" href="stats.htm#for-statement">end</a> <a class="keywd_no_ul" href="stats.htm#for-statement">for</a>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre><p>
  The example above uses the array literal
</p><pre class="indent">
[] (<a class="stri" href="tokens.htm#String_literals">"monday"</a>, <a class="stri" href="tokens.htm#String_literals">"tuesday"</a>, <a class="stri" href="tokens.htm#String_literals">"wednesday"</a>, <a class="stri" href="tokens.htm#String_literals">"thursday"</a>, <a class="stri" href="tokens.htm#String_literals">"friday"</a>, <a class="stri" href="tokens.htm#String_literals">"saturday"</a>, <a class="stri" href="tokens.htm#String_literals">"sunday"</a>)
</pre><p>
  This array literal has the type <tt><a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a></tt> and it is
  indexed beginning from 1. A corresponding array literal
  indexed beginning from 0 would be:
</p><pre class="indent">
[0] (<a class="stri" href="tokens.htm#String_literals">"monday"</a>, <a class="stri" href="tokens.htm#String_literals">"tuesday"</a>, <a class="stri" href="tokens.htm#String_literals">"wednesday"</a>, <a class="stri" href="tokens.htm#String_literals">"thursday"</a>, <a class="stri" href="tokens.htm#String_literals">"friday"</a>, <a class="stri" href="tokens.htm#String_literals">"saturday"</a>, <a class="stri" href="tokens.htm#String_literals">"sunday"</a>)
</pre><p>
  The <a class="link" href="stats.htm#for-statement">for-loop</a> above uses the literal <tt>7</tt> as upper bound. The function
  <tt><a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a></tt> can be used instead:
</p><pre class="indent">
<a class="keywd_no_ul" href="stats.htm#for-statement">for</a> number <a class="keywd_no_ul" href="stats.htm#for-statement">range</a> 1 <a class="keywd_no_ul" href="stats.htm#for-statement">to</a> <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>(weekdayName) <a class="keywd_no_ul" href="stats.htm#for-statement">do</a>
</pre><p>
  This works as long as the array <tt>weekdayName</tt> is indexed beginning from 1.
  If this is not the case the functions <tt><a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a></tt> and <tt><a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a></tt> can be used:
</p><pre class="indent">
<a class="keywd_no_ul" href="stats.htm#for-statement">for</a> number <a class="keywd_no_ul" href="stats.htm#for-statement">range</a> <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(weekdayName) <a class="keywd_no_ul" href="stats.htm#for-statement">to</a> <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(weekdayName) <a class="keywd_no_ul" href="stats.htm#for-statement">do</a>
</pre><p>
  For this case there is a convenient <a class="link" href="stats.htm#for-key-statement">for-key-loop</a>:
</p><pre class="indent">
<a class="keywd_no_ul" href="stats.htm#for-key-statement">for</a> <a class="keywd_no_ul" href="stats.htm#for-key-statement">key</a> number <a class="keywd_no_ul" href="stats.htm#for-key-statement">range</a> weekdayName <a class="keywd_no_ul" href="stats.htm#for-key-statement">do</a>
  <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(weekdayName<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a>number<a class="op_no_ul" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a>);
<a class="keywd_no_ul" href="stats.htm#for-key-statement">end for</a>;
</pre><p>
  This <a class="link" href="stats.htm#for-key-statement">for-key-loop</a> loops over the indices of the <tt><a class="type" href="types.htm#array">array</a></tt> <tt>weekdayName</tt>
  (from 1 to 7). In the loop body the index is just used to access an
  element from the array. For this case there is a convenient <a class="link" href="stats.htm#for-each-statement">for-each-loop</a>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#array">array</a> <a class="type_no_ul" href="types.htm#string">string</a>: weekdayName <span class="keywd">is</span> [] (<a class="stri" href="tokens.htm#String_literals">"monday"</a>, <a class="stri" href="tokens.htm#String_literals">"tuesday"</a>, <a class="stri" href="tokens.htm#String_literals">"wednesday"</a>, <a class="stri" href="tokens.htm#String_literals">"thursday"</a>, <a class="stri" href="tokens.htm#String_literals">"friday"</a>, <a class="stri" href="tokens.htm#String_literals">"saturday"</a>, <a class="stri" href="tokens.htm#String_literals">"sunday"</a>);
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#for-each-statement">for</a> name <a class="keywd_no_ul" href="stats.htm#for-each-statement">range</a> weekdayName <a class="keywd_no_ul" href="stats.htm#for-each-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#for-each-statement">end</a> <a class="keywd_no_ul" href="stats.htm#for-each-statement">for</a>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre><p>
  A <a class="link" href="stats.htm#for-each-statement">for-each-loop</a> iterates over the elements of an <tt><a class="type" href="types.htm#array">array</a></tt>.
  Sometimes the elements and a corresponding index are needed.
  This is supported by the <a class="link" href="stats.htm#for-each-key-statement">for-each-key-loop</a>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#array">array</a> <a class="type_no_ul" href="types.htm#string">string</a>: weekdayName <span class="keywd">is</span> [] (<a class="stri" href="tokens.htm#String_literals">"monday"</a>, <a class="stri" href="tokens.htm#String_literals">"tuesday"</a>, <a class="stri" href="tokens.htm#String_literals">"wednesday"</a>, <a class="stri" href="tokens.htm#String_literals">"thursday"</a>, <a class="stri" href="tokens.htm#String_literals">"friday"</a>, <a class="stri" href="tokens.htm#String_literals">"saturday"</a>, <a class="stri" href="tokens.htm#String_literals">"sunday"</a>);
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#for-each-key-statement">for</a> name <a class="keywd_no_ul" href="stats.htm#for-each-key-statement">key</a> index <a class="keywd_no_ul" href="stats.htm#for-each-key-statement">range</a> weekdayName <a class="keywd_no_ul" href="stats.htm#for-each-key-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"day "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> index <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">": "</a> <a class="op_no_ul" href="../libraries/enable_io.htm#(in_string)<&(in_aType)">&lt;&amp;</a> name);
    <a class="keywd_no_ul" href="stats.htm#for-each-key-statement">end</a> <a class="keywd_no_ul" href="stats.htm#for-each-key-statement">for</a>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre><p>
  Another example of a <tt><a class="link" href="stats.htm#for-each-statement">for-each-loop</a></tt> is:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#for-each-statement">for</a> number <a class="keywd_no_ul" href="stats.htm#for-each-statement">range</a> [] (0, 1, 2, 3, 5, 8, 13, 20, 40, 100) <a class="keywd_no_ul" href="stats.htm#for-each-statement">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(number <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a>);
    <a class="keywd_no_ul" href="stats.htm#for-each-statement">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  The example above uses the array literal
</p><pre class="indent">
[] (0, 1, 2, 3, 5, 8, 13, 20, 40, 100)
</pre><p>
  This array literal has the type <tt><a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#integer">integer</a></tt>. The index type of
  an array is not restricted to integers. A type like <tt><a class="type" href="types.htm#char">char</a></tt>, that
  has a 1:1 mapping to <tt><a class="type" href="types.htm#integer">integer</a></tt>, can also be used as index:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#array">array</a> [<a class="type_no_ul" href="types.htm#char">char</a>] <a class="type_no_ul" href="types.htm#string">string</a>: digitName <span class="keywd">is</span>
        [<a class="stri" href="tokens.htm#Character_literals">'0'</a>] (<a class="stri" href="tokens.htm#String_literals">"zero"</a>, <a class="stri" href="tokens.htm#String_literals">"one"</a>, <a class="stri" href="tokens.htm#String_literals">"two"</a>, <a class="stri" href="tokens.htm#String_literals">"three"</a>, <a class="stri" href="tokens.htm#String_literals">"four"</a>, <a class="stri" href="tokens.htm#String_literals">"five"</a>, <a class="stri" href="tokens.htm#String_literals">"six"</a>, <a class="stri" href="tokens.htm#String_literals">"seven"</a>, <a class="stri" href="tokens.htm#String_literals">"eight"</a>, <a class="stri" href="tokens.htm#String_literals">"nine"</a>);
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: ch <span class="keywd">is</span> <a class="stri" href="tokens.htm#Character_literals">' '</a>;
  <span class="keywd">begin</span>
    number <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/integer.htm#rand(in_integer,in_integer)">rand</a>(1, 9999999);
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(number <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">": "</a>);
    <a class="keywd_no_ul" href="../libraries/idxarray.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">for</a> ch <a class="keywd_no_ul" href="../libraries/idxarray.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">range</a> <a class="func_no_ul" href="../libraries/integer.htm#str(in_integer)">str</a>(number) <a class="keywd_no_ul" href="../libraries/idxarray.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(digitName[ch] <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a>);
    <a class="keywd_no_ul" href="../libraries/idxarray.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  The example above uses the array literal
</p><pre class="indent">
[<a class="stri" href="tokens.htm#Character_literals">'0'</a>] (<a class="stri" href="tokens.htm#String_literals">"zero"</a>, <a class="stri" href="tokens.htm#String_literals">"one"</a>, <a class="stri" href="tokens.htm#String_literals">"two"</a>, <a class="stri" href="tokens.htm#String_literals">"three"</a>, <a class="stri" href="tokens.htm#String_literals">"four"</a>, <a class="stri" href="tokens.htm#String_literals">"five"</a>, <a class="stri" href="tokens.htm#String_literals">"six"</a>, <a class="stri" href="tokens.htm#String_literals">"seven"</a>, <a class="stri" href="tokens.htm#String_literals">"eight"</a>, <a class="stri" href="tokens.htm#String_literals">"nine"</a>)
</pre><p>
  This array literal has the type <tt><a class="type_no_ul" href="types.htm#array">array</a> [<a class="type_no_ul" href="types.htm#char">char</a>] <a class="type_no_ul" href="types.htm#string">string</a></tt>. The minimum index of this array is the character <tt><a class="stri" href="tokens.htm#Character_literals">'0'</a></tt>.
</p>

<a name="Hashes"><h3>2.7 Hashes</h3></a>
<p>
    A <tt><a class="type" href="types.htm#hash">hash</a></tt> is similar to an <tt><a class="type" href="types.htm#array">array</a></tt> with the difference that the index
  can be any type (not just one that can be converted to <tt><a class="type" href="types.htm#integer">integer</a></tt>). The
  type <tt><a class="type" href="types.htm#hash">hash</a> <span class="type">[</span><a class="type" href="types.htm#string">string</a><span class="type">]</span> <a class="type" href="types.htm#integer">integer</a></tt> defines a hash with a <tt><a class="type" href="types.htm#string">string</a></tt> as index
  and an <tt><a class="type" href="types.htm#integer">integer</a></tt> as value. This type can be used in a type declaration:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#type">type</a>: nameToDigitType <span class="keywd">is</span> <a class="type_no_ul" href="types.htm#hash">hash</a> [<a class="type_no_ul" href="types.htm#string">string</a>] <a class="type_no_ul" href="types.htm#integer">integer</a>;
</pre><p>
  A hash literal can be used to initialize hash constants or variables:
</p><pre class="indent">
const <span class="type">nameToDigitType</span>: nameToDigit <span class="keywd">is</span> [] (
    [<a class="stri" href="tokens.htm#String_literals">"zero"</a> : 0], [<a class="stri" href="tokens.htm#String_literals">"one"</a> : 1], [<a class="stri" href="tokens.htm#String_literals">"two"</a>   : 2], [<a class="stri" href="tokens.htm#String_literals">"three"</a> : 3], [<a class="stri" href="tokens.htm#String_literals">"four"</a> : 4],
    [<a class="stri" href="tokens.htm#String_literals">"five"</a> : 5], [<a class="stri" href="tokens.htm#String_literals">"six"</a> : 6], [<a class="stri" href="tokens.htm#String_literals">"seven"</a> : 7], [<a class="stri" href="tokens.htm#String_literals">"eight"</a> : 8], [<a class="stri" href="tokens.htm#String_literals">"nine"</a> : 9]);
</pre><p>
  Like with arrays an element in the hash can be accessed with
</p><pre class="indent">
nameToDigit<a class=op_no_ul" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">[</a>name<a class=op_no_ul" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">]</a>
</pre><p>
  The following example asks for digit names and writes the
  corresponding digit:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#type">type</a>: nameToDigitType <span class="keywd">is</span> <a class="type_no_ul" href="types.htm#hash">hash</a> [<a class="type_no_ul" href="types.htm#string">string</a>] <a class="type_no_ul" href="types.htm#integer">integer</a>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    const <span class="type">nameToDigitType</span>: nameToDigit <span class="keywd">is</span> [] (
        [<a class="stri" href="tokens.htm#String_literals">"zero"</a> : 0], [<a class="stri" href="tokens.htm#String_literals">"one"</a> : 1], [<a class="stri" href="tokens.htm#String_literals">"two"</a>   : 2], [<a class="stri" href="tokens.htm#String_literals">"three"</a> : 3], [<a class="stri" href="tokens.htm#String_literals">"four"</a> : 4],
        [<a class="stri" href="tokens.htm#String_literals">"five"</a> : 5], [<a class="stri" href="tokens.htm#String_literals">"six"</a> : 6], [<a class="stri" href="tokens.htm#String_literals">"seven"</a> : 7], [<a class="stri" href="tokens.htm#String_literals">"eight"</a> : 8], [<a class="stri" href="tokens.htm#String_literals">"nine"</a> : 9]);
    var string: name is "";
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/enable_io.htm#write(in_aType)">write</a>(<a class="stri" href="tokens.htm#String_literals">"Enter the name of a digit: "</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(name);
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> name <a class="op_no_ul" href="../libraries/hash.htm#(in_keyType)in(in_hashType)">in</a> nameToDigit <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"The value of "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" is "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> nameToDigit<a class=op_no_ul" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">[</a>name<a class=op_no_ul" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">]</a>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">else</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"You entered "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> name <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">", which is not the name of a digit."</a>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  In the example above
</p><pre class="indent">
name <a class="op_no_ul" href="../libraries/hash.htm#(in_keyType)in(in_hashType)">in</a> nameToDigit
</pre><p>
  checks if the key <tt>name</tt> is in the hash table <tt>nameToDigit</tt>. This
  assures that getting the corresponding value with
</p><pre class="indent">
nameToDigit<a class=op_no_ul" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">[</a>name<a class=op_no_ul" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">]</a>
</pre><p>
  succeeds. For-each loops can be used with hash tables as well.
  The example below uses <tt><a class="var" href="../libraries/keydescr.htm#keyDescription">keyDescription</a></tt> which is defined as
  <tt><a class="type" href="types.htm#hash">hash</a> <span class="type">[</span><a class="type" href="types.htm#char">char</a><span class="type">]</span> <a class="type" href="types.htm#string">string</a></tt> in <tt><span class="lib">"</span><a class="lib" href="../libraries/keydescr.htm">keydescr.s7i</a><span class="lib">"</span></tt>. It contains descriptive
  texts for keyboard keys. A <tt><a class="link" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">for-loop</a></tt> can loop over the values of
  a <tt><a class="type" href="types.htm#hash">hash</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/keydescr.htm">keydescr.s7i</a><span class="lib">"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: description <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">for</a> description <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">range</a> <a class="var"  href="../libraries/keydescr.htm#keyDescription">keyDescription</a> <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/enable_io.htm#write(in_aType)">write</a>(description <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a>);
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  A <tt><a class="link" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">for-loop</a></tt> can also loop over the keys (indices) and values of a <tt><a class="type" href="types.htm#hash">hash</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/keydescr.htm">keydescr.s7i</a><span class="lib">"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: aChar <span class="keywd">is</span> <a class="stri" href="tokens.htm#Character_literals">' '</a>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: description <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">for</a> description <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">key</a> aChar <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">range</a> <a class="var"  href="../libraries/keydescr.htm#keyDescription">keyDescription</a> <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"const char: "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> description <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" is "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="func_no_ul" href="../libraries/char.htm#literal(in_char)">literal</a>(aChar));
    <a class="keywd_no_ul" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">end for</a>;
  <span class="keywd">end func</span>;
</pre><p></p>

<a name="For_loop_and_containers"><h3>2.8 For loop and containers</h3></a>
<p>
    <tt><a class="link" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">For-loops</a></tt> can also iterate over the elements of a <tt><a class="type" href="types.htm#set">set</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: innerPlanet <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">for</a> innerPlanet <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">range</a> {<a class="stri" href="tokens.htm#String_literals">"Mercury"</a>, <a class="stri" href="tokens.htm#String_literals">"Venus"</a>, <a class="stri" href="tokens.htm#String_literals">"Earth"</a>, <a class="stri" href="tokens.htm#String_literals">"Mars"</a>} <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(innerPlanet <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">" "</a>);
    <a class="keywd_no_ul" href="../libraries/hashsetof.htm#for(inout_baseType)range(in_setType)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  In the example above <tt>{<a class="stri" href="tokens.htm#String_literals">"Mercury"</a>, <a class="stri" href="tokens.htm#String_literals">"Venus"</a>, <a class="stri" href="tokens.htm#String_literals">"Earth"</a>, <a class="stri" href="tokens.htm#String_literals">"Mars"</a>}</tt> is a set
  literal. The type of this literal is <tt><a class="type" href="types.htm#set">set</a> <a class="type" href="types.htm#set">of</a> <a class="type" href="types.htm#string">string</a></tt>. Other set literals are:
</p><pre class="indent">
{1, 2}
{<a class="stri" href="tokens.htm#Character_literals">'a'</a>, <a class="stri" href="tokens.htm#Character_literals">'e'</a>, <a class="stri" href="tokens.htm#Character_literals">'i'</a>, <a class="stri" href="tokens.htm#Character_literals">'o'</a>, <a class="stri" href="tokens.htm#Character_literals">'u'</a>}
</pre><p>
  <tt><a class="link" href="stats.htm#for-each-statement">For-loops</a></tt> can iterate over the characters of a <tt><a class="type" href="types.htm#string">string</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#set">set of</a> <a class="type_no_ul" href="types.htm#char">char</a>: vowels <span class="keywd">is</span> {<a class="stri" href="tokens.htm#Character_literals">'a'</a>, <a class="stri" href="tokens.htm#Character_literals">'e'</a>, <a class="stri" href="tokens.htm#Character_literals">'i'</a>, <a class="stri" href="tokens.htm#Character_literals">'o'</a>, <a class="stri" href="tokens.htm#Character_literals">'u'</a>};
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: letter <span class="keywd">is</span> <a class="stri" href="tokens.htm#Character_literals">' '</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">for</a> letter <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">range</a> <a class="stri" href="tokens.htm#String_literals">"the quick brown fox jumps over the lazy dog"</a> <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">do</a>
      <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> letter <a class="op_no_ul" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> vowels <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
        <a class="func_no_ul" href="../libraries/enable_io.htm#write(in_aType)">write</a>(letter);
      <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
    <a class="keywd_no_ul" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">end for</a>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  A <tt><a class="link" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">for-loop</a></tt> can loop over the keys (indices) and values of a <tt><a class="type" href="types.htm#array">array</a></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: name <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">for</a> name <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">key</a> number <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">range</a> [0] (<a class="stri" href="tokens.htm#String_literals">"zero"</a>, <a class="stri" href="tokens.htm#String_literals">"one"</a>, <a class="stri" href="tokens.htm#String_literals">"two"</a>, <a class="stri" href="tokens.htm#String_literals">"three"</a>, <a class="stri" href="tokens.htm#String_literals">"four"</a>,
                                   <a class="stri" href="tokens.htm#String_literals">"five"</a>, <a class="stri" href="tokens.htm#String_literals">"six"</a>, <a class="stri" href="tokens.htm#String_literals">"seven"</a>, <a class="stri" href="tokens.htm#String_literals">"eight"</a>, <a class="stri" href="tokens.htm#String_literals">"nine"</a>) <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">do</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(number <a class="op_no_ul" href="../libraries/enable_io.htm#(in_aType)<&(in_string)">&lt;&amp;</a> <a class="stri" href="tokens.htm#String_literals">": "</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> name);
    <a class="keywd_no_ul" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">end for</a>;
  <span class="keywd">end func</span>;
</pre><p>
  All loops that iterate over a container can be combined with an <tt><span class="func">until</span></tt> condition:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: testText <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: ch <span class="keywd">is</span> <a class="stri" href="tokens.htm#Character_literals">' '</a>;
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: controlCharFound <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"Enter text: "</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#readln(inout_string)">readln</a>(testText);
    <span class="keywd">for</span> ch <span class="keywd">range</span> testText <span class="keywd">until</span> controlCharFound <span class="keywd">do</span>
      controlCharFound <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/integer.htm#ord(in_integer)">ord</a>(ch) <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<(in_integer)">&lt;</a> 32;
    <span class="keywd">end for</span>;
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> controlCharFound <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"The text contains control chars."</a>);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre>

<a name="Functions"><h3>2.9 Functions</h3></a>
<p>
    The program below uses the function <tt><span class="func">flipCoin</span></tt> to flip
  a coin until the result is heads:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: flipCoin <span class="keywd">is</span>
  <span class="keywd">return</span> <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>);

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: heads <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">repeat</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"Press enter to flip the coin. "</a>);
      <a class="func_no_ul" href="../libraries/stdio.htm#readln">readln</a>;
      heads <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <span class="func">flipCoin</span>;
      <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(heads <a class="op_no_ul" href="../libraries/boolean.htm#(in_boolean)?(ref_func_aType):(ref_func_aType)">?</a> <a class="stri" href="tokens.htm#String_literals">"heads"</a> <a class="op_no_ul" href="../libraries/boolean.htm#(in_boolean)?(ref_func_aType):(ref_func_aType)">:</a> <a class="stri" href="tokens.htm#String_literals">"tails"</a>);
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">until</a> heads;
  <span class="keywd">end func</span>;
</pre><p>
  In the example above, the function <tt><span class="func">flipCoin</span></tt> is declared as
  constant. As <tt><span class="keywd">const</span></tt> the code of <tt><span class="func">flipCoin</span></tt> will not change
  during run-time. The type <tt><a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#boolean">boolean</a></tt> determines that the
  function returns a <tt><a class="type" href="types.htm#boolean">boolean</a></tt> value. The task of the function
  <tt><span class="func">flipCoin</span></tt> is to return a random <tt><a class="type_no_ul" href="types.htm#boolean">boolean</a></tt> value. This is
  done with:
</p><pre class="indent">
<span class="keywd">return</span> <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>);
</pre><p>
  The actual random value is computed with the expression
</p><pre class="indent">
<a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>);
</pre><p>
  The statement
</p><pre class="indent">
heads <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <span class="func">flipCoin</span>;
</pre><p>
  assigns the result of <tt><span class="func">flipCoin</span></tt> to <tt>heads</tt>. Afterwards
  <tt>heads</tt> is written with the <a class="link" href="../libraries/boolean.htm#(in_boolean)?(ref_func_aType):(ref_func_aType)">ternary operator</a> (<tt><a class="op_no_ul" href="../libraries/boolean.htm#(in_boolean)?(ref_func_aType):(ref_func_aType)">?:</a></tt>). If <tt>heads</tt>
  is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, it writes <tt><a class="stri" href="tokens.htm#String_literals">"heads"</a></tt> otherwise <tt><a class="stri" href="tokens.htm#String_literals">"tails"</a></tt>.
</p><p>
  The program below reads a multi-line paragraph:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#string">string</a>: readMultiLineParagraph <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: multiLineParagraph <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: line <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">repeat</a>
      <a class="func_no_ul" href="../libraries/stdio.htm#write(in_string)">write</a>(<a class="stri" href="tokens.htm#String_literals">"line: "</a>);
      line <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/file.htm#getln(inout_file)">getln</a>(<a class="var" href="../libraries/stdio.htm#IN">IN</a>);
      multiLineParagraph <a class="op_no_ul" href="../libraries/string.htm#(inout_string)&:=(in_string)">&amp;:=</a> line <a class="op_no_ul" href="../libraries/string.htm#(in_string)&(in_string)">&amp;</a> <a class="stri" href="tokens.htm#String_literals">"\n"</a>;
    <a class="keywd_no_ul" href="stats.htm#repeat-statement">until</a> line <a class="op_no_ul" href="../libraries/string.htm#(in_string)=(in_string)">=</a> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"Enter a multi line paragraph. An empty line ends the paragraph."</a>);
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"\nThe paragraph is:\n"</a> <a class="op_no_ul" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a> readMultiLineParagraph);
  <span class="keywd">end func</span>;
</pre><p>
  The declaration of <tt><span class="func">readMultiLineParagraph</span></tt> above contains the construct:
</p><pre class="indent">
<span class="keywd">func</span>
...
<span class="keywd">end func</span>
</pre><p>
  The function <tt><span class="func">readMultiLineParagraph</span></tt> gets the
  <tt><span class="keywd">func</span> ... <span class="keywd">end func</span></tt> construct as value. This construct can be used to initialize
  functions and procedures. Note that <tt><a class="type" href="types.htm#proc">proc</a></tt> is just a shortcut
  for <tt><a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#void">void</a></tt> and that <tt><a class="type" href="types.htm#void">void</a></tt> describes the empty type.
  Inside of the <tt><span class="keywd">func</span> ... <span class="keywd">end func</span></tt> construct are the keywords
  <tt><span class="keywd">result</span></tt>, <tt><span class="keywd">local</span></tt> and <tt><span class="keywd">begin</span></tt>:
</p><ul>
<li>The keyword <tt><span class="keywd">result</span></tt> introduces the declaration of the
    result variable. When the function is finished, it will
    return the current value of the result variable.</li>
<li>The keyword <tt><span class="keywd">local</span></tt> introduces constant and variable
    declarations that are local to the function.</li>
<li>The keyword <tt><span class="keywd">begin</span></tt> introduces a sequence of statements
    that is executed when the function is called.</li>
</ul><p>
  As can be seen from the function <tt><span class="func">main</span></tt> above, the <tt><span class="keywd">result</span></tt> and
  <tt><span class="keywd">local</span></tt> parts are optional. If the function type is <tt><a class="type" href="types.htm#proc">proc</a></tt>,
  the <tt><span class="keywd">result</span></tt> part must be omitted. For all other functions
  the <tt><span class="keywd">result</span></tt> part is mandatory.
</p>

<a name="Parameters"><h3>2.10 Parameters</h3></a>
<p>
    Most parameters are not changed inside a function. Seed7
  uses <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameters to describe this situation:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: negate (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: num1) <span class="keywd">is</span>
  <span class="keywd">return</span> <a class="op_no_ul" href="../libraries/integer.htm#-(in_integer)">-</a>num1;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: fib (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: num1) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: fib <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> num1 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<>(in_integer)">&lt;></a> 1 <a class="op_no_ul" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> num1 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)<>(in_integer)">&lt;></a> 2 <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      fib <a class="op_no_ul" href="stats.htm#Assignment">:=</a> fib(<a class="func_no_ul" href="../libraries/integer.htm#pred(in_integer)">pred</a>(num1)) <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> fib(num1 <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a> 2);
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  The functions above use <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameters named <tt>'num1'</tt>.
  An assignment to <tt>'num1'</tt> is not allowed. A formal <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt>
  parameter like <tt>'num1'</tt> behaves like a constant.
  Trying to change a formal <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: wrong (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: num2) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    num2 <a class="op_no_ul" href="stats.htm#Assignment">:=</a> 0;
  <span class="keywd">end func</span>;
</pre><p>
  results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst77.sd7(5):53: <a class="link" href="errors.htm#WRONGACCESSRIGHT">Variable expected in {num2 := 0 } found parameter (in integer: num2)</a>
    num2 := 0;
</pre><p>
  When a function wants to change the value of the actual
  parameter it can use an <tt>'<a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a>'</tt> parameter:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: reset (<a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: num2) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    num2 <a class="op_no_ul" href="stats.htm#Assignment">:=</a> 0;
  <span class="keywd">end func</span>;
</pre><p>
  If you call this function with
</p><pre class="indent">
reset(number);
</pre><p>
  the variable <tt>'number'</tt> has the value 0 afterwards. Calling
  <tt>'reset'</tt> with a constant instead of a variable:
</p><pre class="indent">
reset(8);
</pre><p>
  results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst77.sd7(12):53: <a class="link" href="errors.htm#WRONGACCESSRIGHT">Variable expected in {8 reset } found constant integer: 8</a>
    reset(8);
</pre><p>
  Sometimes an <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter is needed, but you need to change
  the formal parameter in the function without affecting the
  actual parameter. In this case we use the <tt>'<a class="keywd_no_ul" href="params.htm#in_var_parameter">in var</a>'</tt> parameter:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#string">string</a>: oct_str (<a class="keywd_no_ul" href="params.htm#in_var_parameter">in var</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: number) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: stri <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> number <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)>=(in_integer)">&gt;=</a> 0 <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
      <a class="keywd_no_ul" href="stats.htm#repeat-statement">repeat</a>
        stri <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func_no_ul" href="../libraries/integer.htm#str(in_integer)">str</a>(number <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 8) <a class="op_no_ul" href="../libraries/string.htm#(in_string)&(in_string)">&amp;</a> stri;
        number <a class="op_no_ul" href="stats.htm#Assignment">:=</a> number <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 8;
      <a class="keywd_no_ul" href="stats.htm#repeat-statement">until</a> number <a class="op_no_ul" href="../libraries/integer.htm#(in_integer)=(in_integer)">=</a> 0;
    <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
  <span class="keywd">end func</span>;
</pre><p>
  As you can see this works like a combination of an <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt>
  parameter with a local <tt>'<span class="keywd">var</span>'</tt>.
</p><p>
  Conventionally there are two kinds of parameters:
  <tt>'call by value'</tt> and <tt>'call by reference'</tt>. When taking the
  access right (constant or variable) into account we get
  the following table:
</p><table border="1" cellspacing="0" cellpadding="5">
    
    <tr><th> parameter </th><th>  call by  </th><th> access right </th></tr>
    
    <tr><td> <tt><a class="keywd_no_ul" href="params.htm#val_parameter">val</a></tt>       </td><td align="center">   value   </td><td> const        </td></tr>
    <tr><td> <tt><a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a></tt>       </td><td align="center"> reference </td><td> const        </td></tr>
    <tr><td> <tt><a class="keywd_no_ul" href="params.htm#in_parameter">in</a></tt>        </td><td align="center"> val / ref </td><td> const        </td></tr>
    <tr><td> <tt><a class="keywd_no_ul" href="params.htm#in_var_parameter">in var</a></tt>    </td><td align="center">   value   </td><td> var          </td></tr>
    <tr><td> <tt><a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a></tt>     </td><td align="center"> reference </td><td> var          </td></tr>
    
</table><p>
  Additionally to the parameters we already know this table
  describes also <tt>'<a class="keywd_no_ul" href="params.htm#val_parameter">val</a>'</tt> and <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt> parameters which use
  'call by value' and 'call by reference' and have a constant
  formal parameter. The <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter is called by
  <tt>'val / ref'</tt> in this table which is easily explained:
</p><dl><dd>
    An <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter is either a <tt>'<a class="keywd_no_ul" href="params.htm#val_parameter">val</a>'</tt> or a <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt> parameter
    depending on the type of the parameter.
</dd></dl><p>
  The parameter
</p><pre class="indent">
<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: number
</pre><p>
  is a 'val' parameter which could also be declared as
</p><pre class="indent">
<a class="keywd_no_ul" href="params.htm#val_parameter">val</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: number
</pre><p>
  while the parameter
</p><pre class="indent">
<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#string">string</a>: stri
</pre><p>
  is a 'ref' parameter which could also be declared as
</p><pre class="indent">
<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="types.htm#string">string</a>: stri
</pre><p>
  The meaning of the <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter is predefined for most
  types. Usually types with small amounts of data use <tt>'<a class="keywd_no_ul" href="params.htm#val_parameter">val</a>'</tt>
  as <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter while types with bigger data amounts use
  <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt>. Most of the time it is not necessary to care if an
  <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter is really a <tt>'<a class="keywd_no_ul" href="params.htm#val_parameter">val</a>'</tt> or <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt> parameter.
</p><p>
  In rare cases a <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt> parameter would have undesired side
  effects with global variables or other <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt> parameters.
  In these cases an explicit <tt>'<a class="keywd_no_ul" href="params.htm#val_parameter">val</a>'</tt> parameter instead of an
  <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter makes sense.
</p><p>
  In all normal cases an <tt>'<a class="keywd_no_ul" href="params.htm#in_parameter">in</a>'</tt> parameter should be preferred
  over an explicit <tt>'<a class="keywd_no_ul" href="params.htm#val_parameter">val</a>'</tt> and <tt>'<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a>'</tt> parameter.
</p>

<a name="Overloading"><h3>2.11 Overloading</h3></a>
<p>
    Functions are not only identified by identifiers but also
  via the types of their parameters. So several versions of a
  function can be defined:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/float.htm">float.s7i</a><span class="lib">"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/bigint.htm">bigint.s7i</a><span class="lib">"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/bigrat.htm">bigrat.s7i</a><span class="lib">"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>:       tenPercent (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#float">float</a>: amount)      <span class="keywd">is</span> <span class="keywd">return</span> amount <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 10.0;
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>:       tenPercent (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: amount)    <span class="keywd">is</span> <span class="keywd">return</span> <a class="func_no_ul" href="../libraries/float.htm#float(in_integer)">float</a>(amount) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> 10.0;
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#bigRational">bigRational</a>: tenPercent (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#bigInteger">bigInteger</a>: amount) <span class="keywd">is</span> <span class="keywd">return</span> amount <a class="op_no_ul" href="../libraries/bigrat.htm#(in_bigInteger)/(in_bigInteger)">/</a> 10_;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(tenPercent(123));
    <a class="func_no_ul" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(tenPercent(123.0));
    <a class="func_no_ul" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(tenPercent(123_));
  <span class="keywd">end func</span>;
</pre><p>
  The example above defines the function <tt>tenPercent</tt> for the
  types <tt><a class="type" href="types.htm#float">float</a></tt>, <tt><a class="type" href="types.htm#integer">integer</a></tt> and <tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt>. Two of these
  functions return a <tt><a class="type" href="types.htm#float">float</a></tt> and one returns a <tt><a class="type" href="types.htm#bigRational">bigRational</a></tt>.
  This reuse of the same function name is called overloading.
  The literals <tt>123</tt>, <tt>123.0</tt> and <tt>123_</tt> have the types
  <tt><a class="type" href="types.htm#float">float</a></tt>, <tt><a class="type" href="types.htm#integer">integer</a></tt> and <tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt> respectively. This
  allows an easy identification of the <tt>tenPercent</tt> function
  used. Note that <tt><a class="func" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a></tt> is also overloaded. Otherwise
  <tt><a class="func" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a></tt> would not be able to accept <tt><a class="type" href="types.htm#float">float</a></tt> and
  <tt><a class="type" href="types.htm#bigRational">bigRational</a></tt> arguments.
</p><p>
  Overloading does not consider the result of a function.
  The following example attempts to overload <tt>addOne</tt>
  with the same parameter type and a different result type:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: addOne (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: num) <span class="keywd">is</span> <span class="keywd">return</span> num <a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a> 1;
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>:   addOne (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: num) <span class="keywd">is</span> <span class="keywd">return</span> <a class="func_no_ul" href="../libraries/float.htm#float(in_integer)">float</a>(num) <a class="op" href="../libraries/float.htm#(in_float)+(in_float)">+</a> 1.0;
</pre><p>
  Return type overloading is not supported. Therefore
  the attempt above results in the <a class="link" href="errors.htm#Parsing_errors">compile-time error</a>:
</p><pre class="indent">
*** tst344.sd7(5):34: <a class="link" href="errors.htm#OBJTWICEDECLARED">Redeclaration of "addOne (val integer: num)"</a>
const func float:   addOne (in integer: num) is return float(num) + 1.0;
------------------------------------------------------------------------^
*** tst344.sd7(4):35: <a class="link" href="errors.htm#PREVIOUS_DECLARATION">Previous declaration of "addOne (val integer: num)"
const func integer: addOne (in integer: num) is return num + 1;
</pre><p>
  The absence of return type overloading improves readability,
  since:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5"><tr><td>
    &nbsp;The type of every expression (and sub expression) is independent of the context.
</td></tr></table></dd></dl><p>
  You don't need to look where an expression is used. The
  expression alone gives you enough information to determine
  the type of the expression.
</p><p>
  Operators like <tt><span class="op">+</span></tt> can be overloaded with:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;
  <span class="keywd">include</span> <span class="lib">"</span><a class="lib" href="../libraries/float.htm">float.s7i</a><span class="lib">"</span>;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>: (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: summand1) + (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#float">float</a>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> <a class="func_no_ul" href="../libraries/float.htm#float(in_integer)">float</a>(summand1) <a class="op_no_ul" href="../libraries/float.htm#(in_float)+(in_float)">+</a> summand2;

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>: (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#float">float</a>: summand1) + (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: summand2) <span class="keywd">is</span>
    <span class="keywd">return</span> summand1 <a class="op_no_ul" href="../libraries/float.htm#(in_float)+(in_float)">+</a> <a class="func_no_ul" href="../libraries/float.htm#float(in_integer)">float</a>(summand2);

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(123 <a class="op_no_ul" href="../libraries/mixarith.htm#(in_integer)+(in_float)">+</a> 123.456);
    <a class="func_no_ul" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(123.456 <a class="op_no_ul" href="../libraries/mixarith.htm#(in_float)+(in_integer)">+</a> 123);
  <span class="keywd">end func</span>;
</pre><p>
  The definitions of the <tt><span class="op">+</span></tt> operator above allow mixing of
  <tt><a class="type_no_ul" href="types.htm#integer">integer</a></tt> and <tt><a class="type_no_ul" href="types.htm#float">float</a></tt> arguments. The overloaded <tt><span class="op">+</span></tt> operators
  above are taken from the <tt><a class="lib" href="../libraries/mixarith.htm">mixarith.s7i</a></tt> library.
</p>

<a name="Templates"><h3>2.12 Templates</h3></a>
<p>
    Templates allow the declaration of functions where the actual
  types are specified later. The function declarations are done
  inside a procedure that has a type as parameter. The library
  <a class="lib" href="../libraries/integer.htm">integer.s7i</a> defines the template <tt>DECLARE_MIN_MAX</tt> as:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: DECLARE_MIN_MAX (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#type">type</a>: aType) <span class="keywd">is func</span>
  <span class="keywd">begin</span>

    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <span class="type">aType</span>: min (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">aType</span>: value1, <a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">aType</span>: value2) is
        <span class="keywd">return</span> value1 < value2 ? value1 : value2;

    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <span class="type">aType</span>: max (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">aType</span>: value1, <a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">aType</span>: value2) is
        <span class="keywd">return</span> value1 > value2 ? value1 : value2;

  <span class="keywd">end func</span>;
</pre><p>
  The template procedure <tt>DECLARE_MIN_MAX</tt> uses the type parameter
  <tt><span class="type_no_ul">aType</span></tt> to declare the functions <tt><a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a></tt> and <tt><a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a></tt>. The template is
  instantiated for every actual type which needs <tt><a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a></tt> and <tt><a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a></tt>. E.g.:
</p><pre class="indent">
DECLARE_MIN_MAX(<a class="type_no_ul" href="types.htm#integer">integer</a>);     <a class="comment" href="tokens.htm#Line_comments"># Instantiated in the integer.s7i library</a>
DECLARE_MIN_MAX(<a class="type_no_ul" href="types.htm#bigInteger">bigInteger</a>);  <a class="comment" href="tokens.htm#Line_comments"># Instantiated in the bigint.s7i library</a>
DECLARE_MIN_MAX(<a class="type_no_ul" href="types.htm#float">float</a>);       <a class="comment" href="tokens.htm#Line_comments"># Instantiated in the float.s7i library</a>
</pre><p>
  This allows for expressions like <tt>min(2, 5)</tt> or <tt>min(PI, E)</tt>.
</p>

<a name="Declare_a_statement"><h3>2.13 Declare a statement</h3></a>
<p>
    This example program writes its arguments
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;       <a class="comment" href="tokens.htm#Line_comments"># Standard Seed7 library</a>

<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: stri <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> stri <span class="keywd">range</span> argv(PROGRAM) <span class="keywd">do</span>
      write(stri &lt;& <a class="stri" href="tokens.htm#String_literals">" "</a>);
    <span class="keywd">end for</span>;
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln">writeln</a>;
  <span class="keywd">end func</span>;
</pre><p>
  The <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> iterates over <tt><a class="func" href="os.htm#argv_PROGRAM">argv</a>(PROGRAM)</tt>.
  The function <tt><a class="func" href="os.htm#argv_PROGRAM">argv</a>(PROGRAM)</tt> returns an <tt><a class="type" href="types.htm#array">array string</a></tt>
  (=<tt><a class="type" href="types.htm#array">array</a></tt> of <tt><a class="type" href="types.htm#string">string</a></tt> elements). The <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> is overloaded
  for various collection types. In the standard Seed7 library
  <tt><span class="lib">seed7_05.s7i</span></tt> the <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> for <a class="type" href="types.htm#array">array</a>s is declared as
  follows:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: for (<a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a> <span class="type">baseType</span>: variable) range (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">arrayType</span>: arr_obj) do
              (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#proc">proc</a>: statements)
            end for <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(arr_obj) <span class="keywd">do</span>
      variable <a class="op_no_ul" href="stats.htm#Assignment">:=</a> arr_obj[number];
      statements;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre><p>
  The syntax of this <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> is declared as:
</p><pre class="indent">
$ <span class="keywd">syntax</span> <span class="type">expr</span>: .for.().range.().to.().do.().end.for <span class="keywd">is</span>              -> 25;
</pre><p>
  Additionally everybody can overload the <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> also.
  Because of these powerful features Seed7 does not need iterators.
</p>

<a name="Template_declaring_a_statement"><h3>2.14 Template declaring a statement</h3></a>
<p>
  Templates are just normal functions with <a class="type" href="types.htm#type">type</a>s as parameters.
  The following template function declares <tt><a class="link" href="stats.htm#for-statement">for-statements</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: FOR_DECLS (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">type</span>: aType) <span class="keywd">is func</span>
  <span class="keywd">begin</span>

    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: for (<a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a> <span class="type">aType</span>: variable) range (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">aType</span>: low) to (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">aType</span>: high) do
        (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#proc">proc</a>: statements) end for <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        variable <a class="op_no_ul" href="stats.htm#Assignment">:=</a> low;
        <a class="keywd_no_ul" href="stats.htm#if-statement">if</a> variable &lt;= high <a class="keywd_no_ul" href="stats.htm#if-statement">then</a>
          statements;
          <a class="keywd_no_ul" href="stats.htm#while-statement">while</a> variable &lt; high <a class="keywd_no_ul" href="stats.htm#while-statement">do</a>
            incr(variable);
            statements;
          <a class="keywd_no_ul" href="stats.htm#while-statement">end while</a>;
        <a class="keywd_no_ul" href="stats.htm#if-statement">end if</a>;
      <span class="keywd">end func</span>;

  <span class="keywd">end func</span>;

FOR_DECLS(<span class="type">char</span>);
FOR_DECLS(<span class="type">boolean</span>);
</pre><p>
  The body of the 'FOR_DECLS' function contains a declaration of
  the <tt><a class="link" href="stats.htm#for-statement">for-statement</a></tt> for the type <tt><span class="type">aType</span></tt>. Calling 'FOR_DECLS' with
  <tt><a class="type" href="types.htm#char">char</a></tt> and <tt><a class="type" href="types.htm#boolean">boolean</a></tt> as parameter creates corresponding declarations
  of <tt><a class="link" href="stats.htm#for-statement">for-statements</a></tt>. The example above is a simplified part of
  the library <tt><a class="lib" href="../libraries/forloop.htm">forloop.s7i</a></tt>.
</p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/intro.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/decls.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
