<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Database abstraction API</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#DATABASE_ABSTRACTION_API"><big>Database&nbsp;API</big></a>
<a class="menu" href="#Opening_a_database_connection">Open</a>
<a class="menu" href="#Other_ways_to_open_a_database_connection">Open (2)</a>
<a class="menu" href="#Prepared_statements">Prepare</a>
<a class="menu" href="#Bind_values_to_placeholders">Bind</a>
<a class="menu" href="#Execute_a_prepared_statement">Execute</a>
<a class="menu" href="#Fetch_records_from_the_result_set">Fetch</a>
<a class="menu" href="#Get_columns_from_fetched_records">Column</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Database</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/os.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/graphic.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="DATABASE_ABSTRACTION_API"><h2>13. DATABASE ABSTRACTION API</h2></a>

<p>
    Seed7 provides an abstraction layer for database access. There
  is an application programming interface (API), which defines how
  a client may access a database. Seed7 accomplishes database
  independence by using database drivers as abstraction layers
  between the application and the database. There are database
  drivers for MySQL, MariaDB, SQLLite, PostgreSQL, Oracle, Firebird,
  Interbase, Db2, Informix and SQL Server databases. Databases can
  also be accessed via the ODBC interface. The following example
  uses the database abstraction API:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: dbDemo <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../libraries/sql_base.htm#database">database</a>: currDb <span class="keywd">is</span> <a class="type" href="../libraries/sql_base.htm#database">database</a>.value;
    <span class="keywd">var</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement <span class="keywd">is</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>.value;
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_MYSQL</a>, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
    <span class="keywd">if</span> currDb <a class="op" href="../libraries/sql_base.htm#(in_sqlStatement)&lt;&gt;(in_sqlStatement)">&lt;></a> <a class="type" href="../libraries/sql_base.htm#database">database</a>.value <span class="keywd">then</span>
      statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT * FROM testTable"</span>);
      <a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
      <span class="keywd">while</span> <a class="func" href="../libraries/sql_base.htm#fetch(in_sqlStatement)">fetch</a>(statement) <span class="keywd">do</span>
        <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> <a class="func" href="../libraries/sql_base.htm#columnCount(in_sqlStatement)">columnCount</a>(statement) <span class="keywd">do</span>
          write(<a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_string)">column</a>(statement, index, <a class="type" href="types.htm#string">string</a>) <span class="op">&lt;&amp;</span> <span class="stri">", "</span>);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        writeln;
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <a class="func" href="../libraries/sql_base.htm#close(in_database)">close</a>(currDb);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>

<a name="Opening_a_database_connection"><h3>13.1 Opening a database connection</h3></a>
<p>
  To open a database connection you need to provide several things:
</p><ul>
    <li>The database type used.</li>
    <li>The <tt>host</tt> where the database is running.
      An empty <tt>host</tt> name (<tt><span class="stri">""</span></tt>) specifies the local machine (<tt><span class="stri">"localhost"</span></tt>).</li>
    <li>The <tt>port</tt> to access the database.
      A <tt>port</tt> of 0 specifies the default port of the database.</li>
    <li>The <tt>name</tt> of the database.</li>
    <li>A database <tt>user</tt> name.</li>
    <li>The <tt>password</tt> of the database user.</li>
</ul><p>
  Depending on the database a corresponding database driver must
  be used:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  <tr><th>Database Type </th><th> Driver        </th><th> Default port </th><th> Comment</th></tr>
  
  <tr><td>MySQL         </td><td> DB_MYSQL      </td><td>   3306       </td><td></td></tr>
  <tr><td>MariaDB       </td><td> DB_MYSQL      </td><td>   3306       </td><td></td></tr>
  <tr><td>SQLLite       </td><td> DB_SQLITE     </td><td>              </td><td> Host must be <tt><span class="stri">""</span></tt> and port must be 0.</td></tr>
  <tr><td>PostgreSQL    </td><td> DB_POSTGRESQL </td><td>   5432       </td><td></td></tr>
  <tr><td>Oracle        </td><td> DB_OCI        </td><td>   1521       </td><td></td></tr>
  <tr><td>Firebird      </td><td> DB_FIRE       </td><td>              </td><td></td></tr>
  <tr><td>Interbase     </td><td> DB_FIRE       </td><td>              </td><td></td></tr>
  <tr><td>Db2           </td><td> DB_DB2        </td><td>  50000       </td><td></td></tr>
  <tr><td>Informix      </td><td> DB_INFORMIX   </td><td>   1526       </td><td></td></tr>
  <tr><td>SQL Server    </td><td> DB_SQL_SERVER </td><td>   1433       </td><td></td></tr>
  <tr><td> various DBs  </td><td> DB_ODBC       </td><td>              </td><td> Needs an ODBC driver to connect to a database.</td></tr>
  <tr><td>Sybase based  </td><td> DB_TDS        </td><td>   1433       </td><td> Supports SQL Server and Sybase.</td></tr>
</table></dd></dl><p>
  A basic function to open a database is:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/sql_base.htm#database">database</a>: <b><a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#dbCategory">dbCategory</a>: driver, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: host,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: port, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dbName,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: user, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: password)
</pre><p>
  The following statements each open a database:
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_MYSQL</a>, <span class="stri">"www.example.org"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_MYSQL</a>, <span class="stri">"192.0.2.235"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_POSTGRESQL</a>, <span class="stri">"1234:feed::dead:beef"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_POSTGRESQL</a>, <span class="stri">"localhost"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a>, <span class="stri">""</span>, 0, <span class="stri">"aServiceName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a>, <span class="stri">"www.example.org"</span>, 2345, <span class="stri">"aServiceName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a>, <span class="stri">"192.0.2.235"</span>, 0, <span class="stri">"aSid"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_DB2</a>, <span class="stri">"www.example.org"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQL_SERVER</a>, <span class="stri">"192.168.1.13"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_TDS</a>, <span class="stri">"192.168.1.13"</span>, 0, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre><p>
  The <tt>host</tt> can be specified by name (e.g.: <tt><span class="stri">"www.example.org"</span></tt>),
  by an IPv4 address (e.g.: <tt><span class="stri">"192.0.2.235"</span></tt>) or by an IPv6
  address in colon notation (e.g.: <tt><span class="stri">"1234:feed::dead:beef"</span></tt>).
  Specifying <tt><span class="stri">""</span></tt> as <tt>host</tt> means <tt><span class="stri">"localhost"</span></tt>.
</p>

<a name="Opening_an_Oracle_database_connection"><h4>13.1.1 Opening an Oracle database connection</h4></a>
<p>
  When using the <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a></tt> driver you can either supply a <tt>net_service_name</tt>
  from <tt><span class="stri">tnsnames.ora</span></tt> or a <tt>service_name</tt> or a <tt>sid</tt> as <tt>dbName</tt>. If
  <tt><span class="stri">tnsnames.ora</span></tt> is used the parameter <tt>host</tt> must be <tt><span class="stri">""</span></tt> and the
  parameter <tt>port</tt> must be 0.
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a>, <span class="stri">""</span>, 0, <span class="stri">"tnsnamesOraEntryName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre>

<a name="Opening_a_Db2_database_connection"><h4>13.1.2 Opening a Db2 database connection</h4></a>
<p>
  When using the <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_DB2</a></tt> driver you can either supply a <tt>DSN</tt>
  (data source name) from <tt><span class="stri">db2cli.ini</span></tt> (or <tt><span class="stri">db2dsdriver.cfg</span></tt>) or a
  <tt>database name</tt> as <tt>dbName</tt>. If a <tt>DSN</tt> is used the parameter
  <tt>host</tt> must be <tt><span class="stri">""</span></tt> and the parameter <tt>port</tt> must be 0.
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_DB2</a>, <span class="stri">""</span>, 0, <span class="stri">"databaseAlias"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre>

<a name="Opening_a_SQL_Server_database_connection"><h4>13.1.3 Opening a SQL Server database connection</h4></a>
<p>
  When using the <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQL_SERVER</a></tt> driver you can either supply a <tt>database name</tt>
  from the local machine or a database that can be accessed via
  TCP/IP. To access a database at the local machine the parameter
  <tt>host</tt> must be <tt><span class="stri">""</span></tt> and the parameter <tt>port</tt> must be 0.
  If TCP/IP is used it must be enabled in the database.
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQL_SERVER</a>, <span class="stri">""</span>, 0, <span class="stri">"localDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre>

<a name="Opening_a_SQLite_database_connection"><h4>13.1.4 Opening a SQLite database connection</h4></a>
<p>
  A SQLite database can be opened with:
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQLITE</a>, <span class="stri">""</span>, 0, <span class="stri">"aDir/dbName.db"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQLITE</a>, <span class="stri">""</span>, 0, <span class="stri">"aDir/dbName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre><p>
  The path to the database file (in the example above <tt><span class="stri">"aDir/dbName"</span></tt>)
  can be specified with or without the extension <tt><span class="stri">".db"</span></tt>.
  For a SQLite database <tt>host</tt> must be <tt><span class="stri">""</span></tt> and <tt>port</tt> must be 0.
</p>

<a name="Opening_an_Informix_database_connection"><h4>13.1.5 Opening an Informix database connection</h4></a>
<p>
  When using the <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_INFORMIX</a></tt> driver you need to specify also a <tt>server</tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/sql_base.htm#database">database</a>: <b><a class="func" href="../libraries/sql_base.htm#openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)">openDatabase</a></b> (<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_INFORMIX</a>, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: host, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: port,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: server, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dbName,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: user, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: password)
</pre><p>
  A Informix database can be opened with:
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_INFORMIX</a>, <span class="stri">""</span>, 0, <span class="stri">"serverName"</span>, <span class="stri">"databaseName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_INFORMIX</a>, <span class="stri">"www.example.org"</span>, 0, <span class="stri">"testServer"</span>, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre>

<a name="Opening_an_ODBC_database_connection"><h4>13.1.6 Opening an ODBC database connection</h4></a>
<p>
  The Seed7 database driver <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a></tt> is special, as the ODBC
  interface itself allows connecting to several database types.
  The ODBC interface library accomplishes this by using ODBC drivers.
  Unfortunately these drivers do come in varying quality. Accessing
  a database directly via the Seed7 driver should be the preferred
  method. For SQL Server ODBC is the only connection interface.
  Opening an ODBC database can be done with the following function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/sql_base.htm#database">database</a>: <b><a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a></b> (<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a>, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: odbcDriver,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: server, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dbName,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: user, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: password)
</pre><p>
  A SQL Server can be opened with:
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a>, <span class="stri">"sqlserver"</span>, <span class="stri">""</span>, <span class="stri">""</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a>, <span class="stri">"sqlserver"</span>, <span class="stri">""</span>, <span class="stri">""</span>, <span class="stri">""</span>, <span class="stri">""</span>);
</pre><p>
  If <tt>server</tt> or <tt>dbName</tt> are empty (<tt><span class="stri">""</span></tt>) the default values of the
  ODBC driver are used. The ODBC driver may provide also default
  values for <tt>user</tt> and <tt>password</tt>.
</p><p>
  ODBC uses also data source names (DSNs) to specify possible
  database connections. It is possible to open an ODBC database
  by specifying the data source name (DSN) in the parameter
  <tt>dbName</tt>. In this case the parameters <tt>odbcDriver</tt> and <tt>server</tt>
  must be <tt><span class="stri">""</span></tt>.
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a>, <span class="stri">""</span>, <span class="stri">""</span>, <span class="stri">"dsnName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a>, <span class="stri">""</span>, <span class="stri">""</span>, <span class="stri">"dsnName"</span>, <span class="stri">""</span>, <span class="stri">""</span>);
</pre><p>
  When opening using a DSN succeeds, the parameters <tt>odbcDriver</tt>
  and <tt>server</tt> are ignored. A DSN might also specify <tt>user</tt>
  and <tt>password</tt>. In this case this parameters can be left empty,
  when <tt><a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a>()</tt> is called.
</p><p>
  When using windows the DSNs and the ODBC drivers can be managed
  with:
</p><dl><dd>
    Start -> Control Panel -> Administrative Tools -> Data Sources (ODBC).
</dd></dl><p>
  The data source names (DSNs) of unixODBC are specified in the
  file <tt><span class="stri">odbc.ini</span></tt>. The ODBC drivers of unixODBC are specified
  in the file <tt><span class="stri">odbcinst.ini</span></tt>.
</p>

<a name="Other_ways_to_open_a_database_connection"><h3>13.2 Other ways to open a database connection</h3></a>
<p>
  There is another variant of opening a database:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/sql_base.htm#database">database</a>: <b><a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#dbCategory">dbCategory</a>: driver, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dbPath,
                                   <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: user, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: password)
</pre><p>
  The <tt>dbPath</tt> can be given in one of these forms:
</p><ul>
    <li>host:port/dbName</li>
    <li>host/dbName</li>
    <li>dbName</li>
</ul><p>
  The <tt>host</tt> can be specified by name (e.g.: <tt><span class="stri">"www.example.org"</span></tt>),
  or by IPv4 address (e.g.: <tt><span class="stri">"192.0.2.235"</span></tt>) or by IPv6 address in
  colon notation (e.g.: <tt><span class="stri">"[1234:feed::dead:beef]"</span></tt>). Note that an
  IPv6 address must be enclosed in brackets. If <tt>host</tt> is not
  specified the default host (<tt><span class="stri">"localhost"</span></tt>) will be used. If <tt>port</tt>
  is not specified the default port of the driver will be used. The
  following statements each open a database:
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_MYSQL</a>, <span class="stri">"www.example.org:1234/testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_MYSQL</a>, <span class="stri">"[1234:feed::dead:beef]:1234/testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_POSTGRESQL</a>, <span class="stri">"192.0.2.235/testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_POSTGRESQL</a>, <span class="stri">"testDb"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a>, <span class="stri">"sidOrServiceName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);

currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_OCI</a>, <span class="stri">"tnsnamesOraEntryName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre><p>
  If <tt>driver</tt> is <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_ODBC</a></tt> the <tt>dbPath</tt> can be specified in one
  of these forms:
</p><ul>
    <li>odbcDriver:dbServer/dbName</li>
    <li>odbcDriver:dbServer</li>
    <li>dbServer/dbName</li>
    <li>odbcDataSourceName</li>
</ul><p>
  Use a value like <tt><span class="stri">"sqlserver"</span></tt> for <tt>odbcDriver</tt>.
</p><p>
  If <tt>driver</tt> is <tt><a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQLITE</a></tt> then <tt>dbPath</tt> is the path of a
  database file:
</p><ul>
    <li>sqlitePath</li>
</ul><p>
  The <tt>sqlitePath</tt> uses the Seed7 <a class="link" href="os.htm#Standard_path_representation">standard path representation</a>.
  A SQLite database can be opened with:
</p><pre class="indent">
currDb := <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(<a class="var" href="../libraries/sql_base.htm#dbCategory">DB_SQLITE</a>, <span class="stri">"aDir/dbName"</span>, <span class="stri">"testUser"</span>, <span class="stri">"testPassword"</span>);
</pre><p>
  It is also possible ot open a database with a connect string:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/sql_base.htm#database">database</a>: <b><a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string)">openDatabase</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#dbCategory">dbCategory</a>: driver, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: connectStri)
</pre><p>
  The <tt>connectStri</tt> must be in one of the forms
</p><ul>
    <li>user:password@dbPath</li>
    <li>user@dbPath</li>
    <li>dbPath</li>
</ul><p>
  If no <tt>user</tt> is specified the user <tt><span class="stri">"guest"</span></tt> will be used. If no
  <tt>password</tt> is specified the password <tt><span class="stri">"guest"</span></tt> will be used. The
  <tt>dbPath</tt> is specified as before.
</p>

<a name="Prepared_statements"><h3>13.3 Prepared statements</h3></a>
<p>
  All SQL statements (e.g. SELECT, CREATE, INSERT, UPDATE) can be
  executed by using prepared statements. The database abstraction
  API does not provide a way to execute SQL without a prepared
  statement. After a prepared statement has been created it can be
  executed multiple times. Databases usually optimize prepared
  statements for fast execution. Prepared statements are created
  with the following function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: <b><a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#database">database</a>: db, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: sqlStatementStri)
</pre><p>
  Regarding the parameter <tt>sqlStatementStri</tt> some things must be considered:
</p><ul>
    <li>A question mark (<tt>?</tt>) will be used as placeholder for bind variables.</li>
    <li>Strings in a SQL statement are enclosed in apostrophes (e.g. <tt>'abc'</tt>).<ul>
      <li>A string consists of all characters between the enclosing
        apostrophes.</li>
      <li>Apostrophe characters (<tt>'</tt>) in a string must be doubled to
        get one apostrophe character in the string.</li></ul></li>
    <li>Comments in a SQL statement start with <tt>/*</tt> and end with <tt>*/</tt>.</li>
    <li>Line comments in a SQL statement start with <tt>--</tt> and end
      with a newline character (<tt>'\n'</tt>).</li>
    <li>Table and field names can be enclosed in double quotes (e.g. <tt>"aTable"</tt>).<ul>
      <li>This way a table or field name may contain spaces or other
        characters, that are normally not allowed.</li>
      <li>Double quotes in a quoted name must be doubled (be aware that several
        databases do not allow double quotes in names).</li></ul></li>
</ul><p>
  The following statements each create a prepared SQL statement:
</p><pre class="indent">
statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"CREATE TABLE customers (name CHAR(128), area CHAR(128))"</span>);

statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT * FROM customers"</span>);

statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT * FROM customers /* comment */ WHERE name = 'adam'"</span>);

statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT * FROM customers -- Comment\n  WHERE name != 'adam'"</span>);

statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT * FROM customers WHERE name = ?"</span>);

statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT * FROM customers WHERE name LIKE '%''%'"</span>);

statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT \"a field\" FROM \"a table\""</span>);
</pre><p>
  Preparing a statement fails with a <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>, if the database
  is not open. This is checked by the driver. Other things are
  checked by the database. The database might raise the exception
  <tt><a class="exception" href="errors.htm#DATABASE_ERROR">DATABASE_ERROR</a></tt>. Note that some databases do not check everything,
  when preparing the statement. So an invalid SQL statement might
  be accepted by <tt><a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>()</tt>, but executing the prepared statement
  later will fail.
</p><p>
  Executing a prepared statement that neither has bind variables
  nor returns a result is quite simple:
</p><pre class="indent">
statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"CREATE TABLE customers (name CHAR(128), area CHAR(128))"</span>);
<a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
</pre><p></p>

<a name="Bind_values_to_placeholders"><h3>13.4 Bind values to placeholders</h3></a>
<p>
  Question marks (<tt>?</tt>) in a prepared statement string are used as
  placeholder for bind variables. Before a prepared statement is
  executed it is necessary to bind values to the placeholders (<tt>?</tt>).
  Prepared statements without placeholders do not need a binding.
  It is possible to bind the same placeholder as often as you like.
  even with values from different types. This can be used to
  execute the same prepared statement multiple times with
  different values. The binding is done with a <tt><span class="func">bind</span>()</tt> function.
  For several types <tt><span class="func">bind</span>()</tt> functions are defined:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bigInteger)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#bigInteger">bigInteger</a>: num)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bigRational)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#bigRational">bigRational</a>: num)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_boolean)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#boolean">boolean</a>: flag)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bstring)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="../libraries/bstring.htm">bstring</a>: bstri)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_float)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#float">float</a>: number)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_integer)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: number)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,NULL)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, NULL)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_string)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: stri)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_time)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#time">time</a>: timeData)

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_duration)">bind</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: pos, <span class="keywd">in</span> <a class="type" href="types.htm#duration">duration</a>: durationData)
</pre><p>
  Binding fails with a <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>, if the statement has not
  been <a class="link" href="#Prepared_statements">prepared</a>. Binding is done by position. Position numbers
  start with 1. To bind the <tt><a class="type" href="types.htm#integer">integer</a></tt> 12345 to the third
  placeholder (<tt>?</tt>) of a prepared statement do:
</p><pre class="indent">
<a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,NULL)">bind</a>(statement, 3, 12345);
</pre><p>
  The <tt><span class="func">bind</span>()</tt> functions check the given position (<tt>pos</tt>) and raise
  the exception <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>, if no corresponding placeholder (<tt>?</tt>)
  is found. This happens if <tt>pos &lt;= 0</tt> holds or if <tt>pos</tt> is greater
  than the number of placeholders. The <tt><span class="func">bind</span>()</tt> functions check
  also, if the type of the given value fits to the database
  column. If the type does not fit the exception <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt> is
  raised.
</p><p>
  Another example with binding is:
</p><pre class="indent">
write(<span class="stri">"name? "</span>);
readln(name);
statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT name, area FROM customers WHERE name = ?"</span>);
<a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_string)">bind</a>(statement, 1, name);
<a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
. . .  Write a list of names and areas.
</pre><p>
  Binding protects against SQL injection. SQL injection is a
  technique to attack applications. SQL injection is possible,
  if the SQL statement is build from user input. Suppose we
  do the example above without binding:
</p><pre class="indent">
write(<span class="stri">"name? "</span>);
readln(name);
statement := <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(currDb, <span class="stri">"SELECT name, area FROM customers WHERE name = '"</span> &lt;&amp; name &lt;&amp; <span class="stri">"'"</span>);
<a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
. . .  Write a list of names and areas.
</pre><p>
  Suppose the user enters (when asked for the <tt>name</tt>):
</p><pre class="indent">
' UNION SELECT login, password FROM user --
</pre><p>
  This would prepare and execute the SQL statement:
</p><pre class="indent">
SELECT name, area FROM customers WHERE name = '' UNION SELECT login, password FROM user --'
</pre><p>
  The result would additionally contain secret data you certainly would not like to be displayed.
</p>

<a name="Execute_a_prepared_statement"><h3>13.5 Execute a prepared statement</h3></a>
<p>
  To make a prepared statement run it must be executed.
  Prepared statements are executed with the following function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: <b><a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a></b> (<span class="keywd">inout</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement)
</pre><p>
  The following statement executes a prepared SQL statement:
</p><pre class="indent">
<a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
</pre><p>
  Executing fails with a <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>, if the statement has not
  been prepared. Executing fails with a <tt><a class="exception" href="errors.htm#DATABASE_ERROR">DATABASE_ERROR</a></tt>, if
  not all parameters have been <a class="link" href="#Bind_values_to_placeholders">bound</a>. If the database returns
  an error the exception <tt><a class="exception" href="errors.htm#DATABASE_ERROR">DATABASE_ERROR</a></tt> gets also raised. Note
  that invalid SQL statements might raise a <tt><a class="exception" href="errors.htm#DATABASE_ERROR">DATABASE_ERROR</a></tt> in
  <tt><a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>()</tt> or in <tt><a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>()</tt>. When the exception is raised
  depends on the database.
</p><p>
  There are prepared statements, that return a result set of
  records (e.g.: SELECT) and others that do not
  return data (e.g.: UPDATE). After <a class="link" href="#Execute_a_prepared_statement">executing</a> a prepared
  statement the number of columns in a record (row) of the
  result set can be retrieved with the following function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: <b><a class="func" href="../libraries/sql_base.htm#columnCount(in_sqlStatement)">columnCount</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement)
</pre><p>
  If a prepared statement does not return data <tt><a class="func" href="../libraries/sql_base.htm#columnCount(in_sqlStatement)">columnCount</a>()</tt>
  returns 0. The names of the columns in a record (row) of
  the result set can be obtained with the function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: <b><a class="func" href="../libraries/sql_base.htm#columnName(in_sqlStatement,in_integer)">columnName</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column)
</pre><p>
  These functions can be combined to write the column names
  of a prepared statement:
</p><pre class="indent">
<a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
<span class="keywd">for</span> columnNum <span class="keywd">range</span> 1 <span class="keywd">to</span> <a class="func" href="../libraries/sql_base.htm#columnCount(in_sqlStatement)">columnCount</a>(statement) <span class="keywd">do</span>
  write(<a class="func" href="../libraries/sql_base.htm#columnName(in_sqlStatement,in_integer)">columnName</a>(statement, columnNum) &lt;&amp; <span class="stri">" "</span>);
<span class="keywd">end</span> <span class="keywd">for</span>;
writeln;
</pre>

<a name="Fetch_records_from_the_result_set"><h3>13.6 Fetch records from the result set</h3></a>
<p>
  After <a class="link" href="#Execute_a_prepared_statement">executing</a> a prepared statement that returns data
  (e.g.: SELECT), the records (rows) can be fetched one by one
  with <tt><a class="func" href="../libraries/sql_base.htm#fetch(in_sqlStatement)">fetch</a>()</tt>. After <a class="link" href="#Execute_a_prepared_statement">executing</a> a prepared statement
  returning no data fetching is not necessary. Fetching is done
  with the following function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#boolean">boolean</a>: <b><a class="func" href="../libraries/sql_base.htm#fetch(in_sqlStatement)">fetch</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement)
</pre><p>
  The function returns <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if a record of the result set
  could be fetched successfully. The function returns <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt>,
  if there is no data (e.g.: UPDATE) or no more row (record)
  to fetch. The following example shows how <tt><a class="func" href="../libraries/sql_base.htm#fetch(in_sqlStatement)">fetch</a>()</tt> is usually
  used:
</p><pre class="indent">
<a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement);
while <a class="func" href="../libraries/sql_base.htm#fetch(in_sqlStatement)">fetch</a>(statement) do
  . . .  Process a record from the result set.
end while;
</pre><p></p>

<a name="Get_columns_from_fetched_records"><h3>13.7 Get columns from fetched records</h3></a>
<p>
  After a record (row) has been <a class="link" href="#Fetch_records_from_the_result_set">fetched</a> from a result set
  individual column data can be retrieved with a <tt><span class="func">column</span>()</tt> function.
  For several types <tt><span class="func">column</span>()</tt> functions are defined:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#bigInteger">bigInteger</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bigInteger)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#bigInteger">bigInteger</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#bigRational">bigRational</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bigRational)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#bigRational">bigRational</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#boolean">boolean</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_boolean)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#boolean">boolean</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="../libraries/bstring.htm">bstring</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bstring)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="../libraries/bstring.htm">bstring</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#duration">duration</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_duration)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#duration">duration</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#float">float</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_float)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#float">float</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_integer)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#integer">integer</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_string)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#string">string</a>)

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#time">time</a>: <b><a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_time)">column</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column, <span class="keywd">attr</span> <a class="type" href="types.htm#time">time</a>)
</pre><p>
  Getting a column fails with a <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>, if no record
  has been <a class="link" href="#Fetch_records_from_the_result_set">fetched</a> from the result set. Column numbers start
  with 1. To get column number four from the current result
  record (row) as <tt><a class="type" href="types.htm#integer">integer</a></tt> do:
</p><pre class="indent">
<a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_integer)">column</a>(statement, 4, <a class="type" href="types.htm#integer">integer</a>);
</pre><p>
  The <tt><span class="func">column</span>()</tt> functions check the given position (<tt>column</tt>) and
  raise the exception <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>, if no corresponding column
  exists in the result record. This happens if <tt>column &lt;= 0</tt>
  is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt> or if <tt>column</tt> is greater than the number of columns
  (which can be obtained with <tt><a class="func" href="../libraries/sql_base.htm#columnCount(in_sqlStatement)">columnCount</a>()</tt>). Database columns can
  be <tt>NULL</tt>. This can be checked with the following function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#boolean">boolean</a>: <b><a class="func" href="../libraries/sql_base.htm#isNull(in_sqlStatement,in_integer)">isNull</a></b> (<span class="keywd">in</span> <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>: statement, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: column)
</pre><p>
  The function <tt><a class="func" href="../libraries/sql_base.htm#isNull(in_sqlStatement,in_integer)">isNull</a>()</tt> returns <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, if the specified column
  is <tt>NULL</tt>. Otherwise <tt><a class="func" href="../libraries/sql_base.htm#isNull(in_sqlStatement,in_integer)">isNull</a>()</tt> returns <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt>. The <tt><span class="func">column</span>()</tt>
  functions return a default value, if a column is <tt>NULL</tt>. The
  following default values are used:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  <tr><th>Type        </th><th> Default value</th></tr>
  
  <tr><td><tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt>  </td><td> <tt>0_</tt></td></tr>
  <tr><td><tt><a class="type" href="types.htm#bigRational">bigRational</a></tt> </td><td> <tt>0_/1_</tt></td></tr>
  <tr><td><tt><a class="type" href="types.htm#boolean">boolean</a></tt>     </td><td> <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt></td></tr>
  <tr><td><tt><a class="type" href="../libraries/bstring.htm">bstring</a></tt>     </td><td> <tt><a class="func" href="../libraries/bstring.htm#bstring(in_string)">bstring</a>(<span class="stri">""</span>)</td></tr>
  <tr><td><tt><a class="type" href="types.htm#duration">duration</a></tt>    </td><td> <tt><a class="type" href="types.htm#duration">duration</a>.value</tt></td></tr>
  <tr><td><tt><a class="type" href="types.htm#float">float</a></tt>       </td><td> <tt>0.0</tt></td></tr>
  <tr><td><tt><a class="type" href="types.htm#integer">integer</a></tt>     </td><td> <tt>0</tt></td></tr>
  <tr><td><tt><a class="type" href="types.htm#string">string</a></tt>      </td><td> <tt><span class="stri">""</span></tt></td></tr>
  <tr><td><tt><a class="type" href="types.htm#time">time</a></tt>        </td><td> <tt><a class="type" href="types.htm#time">time</a>.value</tt></td></tr>
</table></dd></dl><p></p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/os.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/graphic.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
