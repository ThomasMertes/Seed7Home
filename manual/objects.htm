<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Object orientation</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#OBJECT_ORIENTATION"><big>Objects</big></a>
<a class="menu" href="#interface_and_implementation">Interface</a>
<a class="menu" href="#dynamic_dispatch">Dynamic</a>
<a class="menu" href="#inheritance">Inheritance</a>
<a class="menu" href="#class_methods">Class&nbsp;methods</a>
<a class="menu" href="#multiple_dispatch">Dispatch</a>
<a class="menu" href="#replacing_pointers">Pointers</a>
</div>
<div class="content">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Objects</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/params.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/file.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="OBJECT_ORIENTATION"><h2>7. OBJECT ORIENTATION</h2></a>

<p>
    Many people will be familiar with object-orientation from
  languages like C++, Smalltalk, and Java. Seed7 follows the
  route of declaring "interfaces". An interface is a common
  set of operations supported by an object. For instance
  cars, motorcycles, lorries and vans can all accelerate or
  brake, if they are legal to drive on the road they can all
  indicate right and left.
</p><p>
  This view isn't new. C provides a primitive form of
  interfacing. When you write to a <tt>'file'</tt> in C you use the same
  interface (<tt>'fprintf'</tt>) for hard disk files, console output and
  printer output. The implementation does totally different
  things for these files. Unix has used the "everything is a
  file" philosophy for ages (even network communication uses
  the <tt>'file'</tt> interface (see <tt><a class="type" href="file.htm#Sockets">sockets</a></tt>)).
</p><p>
  For short: An interface defines which methods are supported
  while the implementation describes how this is done.
  Several types with different method implementations can
  share the same interface.
</p>

<a name="interface_and_implementation"><h3>7.1 Interface and implementation</h3></a>
<p>
  Seed7 uses interface types and implementation types.
  Objects declared with an interface type refer to a value
  which has an implementation type. This situation is
  described with the following picture:
</p><pre class="box">
              +----------------+
    declared  |    interface   |&lt;--- interface type
    object:   |     object     |     (known at compile-time)
              +----------------+
                      |
                      | refer to value
                      V
              +----------------+
    value:    | implementation |&lt;--- implementation type
              |     object     |     (unknown at compile-time)
              +----------------+
</pre><p>
  The interface type of an object can always be determined
  at compile-time. Several implementation types can belong
  to one interface type (they implement the interface type).
  E.g.: The types <tt><a class="type" href="../libraries/null_file.htm#null_file">null_file</a></tt>, <tt><a class="type" href="../libraries/external_file.htm#external_file">external_file</a></tt> and <tt><a class="type" href="../libraries/socket.htm#socket">socket</a></tt>
  implement the <tt><a class="type" href="types.htm#file">file</a></tt> interface. On the other hand: An
  implementation type can also implement several interface
  types. An interface object can only refer to a value with
  an implementation type that implements the interface.
  E.g.: A <tt><span class="type">shape</span></tt> variable cannot refer to a <tt><a class="type" href="../libraries/socket.htm#socket">socket</a></tt>.
</p><p>
  A new interface type is declared with:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: shape <span class="keywd">is</span> <span class="keywd">new interface</span>;
</pre><p>
  Interface (DYNAMIC) functions describe what can be done
  with objects of an interface type. An interface function
  for a <tt><span class="type">shape</span></tt> could be:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: draw (<span class="keywd">in</span> <span class="type">shape</span>: aShape, <span class="keywd">inout</span> <span class="type">window</span>: aWindow) <span class="keywd">is DYNAMIC</span>;
</pre><p>
  Now we know that it is possible to <tt>'draw'</tt> a <tt><span class="type">shape</span></tt> to a
  <tt><span class="type">window</span></tt>. How this drawing is done is described in the
  implementation type. An implementation type for <tt><span class="type">shape</span></tt> is:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: circle <span class="keywd">is</span> <span class="keywd">new struct</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: radius <span class="keywd">is</span> 0;
  <span class="keywd">end struct</span>;
</pre><p>
  The fact that the type <tt><span class="type">circle</span></tt> is an implementation type of
  <tt><span class="type">shape</span></tt> is described with:
</p><pre class="indent">
type_implements_interface(<span class="type">circle</span>, <span class="type">shape</span>);
</pre><p>
  The function which implements <tt>'draw'</tt> for <tt><span class="type">circle</span>s</tt> is:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: draw (<span class="keywd">in</span> <span class="type">circle</span>: aCircle, <span class="keywd">inout</span> <span class="type">window</span>: aWindow) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    circle(aWindow.win, aWindow.currX, aWindow.currY,
        aCircle.radius, aWindow.foreground);
  <span class="keywd">end func</span>;
</pre><p>
  In the classic OOP philosophy a message is sent to an object.
  To express this situation classic OO languages use the
  following method call syntax:
</p><pre class="indent">
param1.method(param2, param3)
</pre><p>
  In the method the receiving object is referred with <tt>'self'</tt> or
  <tt>'this'</tt>. The other parameters use the same mechanisms as in
  procedural programming languages (value or reference parameter).
  Seed7 uses a different approach: Instead of an implicit defined
  <tt>'self'</tt> or <tt>'this'</tt> parameter, all formal parameters get a user
  defined name. To reflect this symmetric approach a Seed7 method
  call looks like a normal function call:
</p><pre class="indent">
method(param1, param2, param3)
</pre><p>
  The definition of the <tt>'draw'</tt> function above uses the formal
  parameter <tt>'aCircle'</tt> in the role of a <tt>'self'</tt> or <tt>'this'</tt> parameter.
  Formal parameters which have an implementation type are
  automatically in the role of a <tt>'self'</tt> or <tt>'this'</tt> parameter.
</p><p>
  A function to create new circle objects can also be helpful:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">circle</span>: circle (<span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: radius) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">circle</span>: aCircle <span class="keywd">is</span> <span class="type">circle</span>.value;
  <span class="keywd">begin</span>
    aCircle.radius := radius;
  <span class="keywd">end func</span>;
</pre><p>
  Now we can draw a <tt><span class="type">circle</span></tt> object with:
</p><pre class="indent">
draw(circle(50), aWindow);
</pre><p>
  Although the statement above does exactly what it should
  do and the separation between interface and implementation
  is obvious, most OO enthusiasts would not be thrilled. All
  decisions which implementation function should be called
  can be made at compile time. To please the OO fans such
  decisions must be made at runtime. This decision process
  is called dynamic dispatch.
</p>

<a name="dynamic_dispatch"><h3>7.2 Dynamic dispatch</h3></a>
<p>
    When the implementation types have different implementations
  of the same function (method) a dynamic dispatch is necessary.
  The type of the value, referred by an interface object, is not
  known at compile-time. In this case the program must decide at
  runtime which implementation of the function should be invoked.
  This decision is based on the implementation type of the value
  (referred by the interface object). A dynamic dispatch only
  takes place when a DYNAMIC (or interface) function is called.
  When the program is analyzed (in the interpreter or compiler)
  the interface functions take precedence over normal functions
  when both are to be considered.
</p><p>
  To demonstrate the dynamic dispatch we define the type <tt><span class="type">line</span></tt>
  which also implements a <tt><span class="type">shape</span></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: line <span class="keywd">is</span> <span class="keywd">new struct</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: xLen <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: yLen <span class="keywd">is</span> 0.0;
  <span class="keywd">end func</span>;

type_implements_interface(<span class="type">line</span>, <span class="type">shape</span>);

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: draw (<span class="keywd">in</span> <span class="type">line</span>: aLine, <span class="keywd">in</span> <span class="type">window</span>: aWindow) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    line(aWindow.win, aWindow.currX, aWindow.currY,
        aLine.xLen, aLine.yLen, aWindow.foreground);
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">line</span>: line (<span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: xLen, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: yLen) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">line</span>: aLine <span class="keywd">is</span> <span class="type">line</span>.value;
  <span class="keywd">begin</span>
    aLine.xLen := xLen;
    aLine.yLen := yLen;
  <span class="keywd">end func</span>;
</pre><p>
  In addition we define a normal (not DYNAMIC) function
  which draws <tt><span class="type">shape</span>s</tt> to the <tt>'currWindow'</tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: draw (<span class="keywd">in</span> <span class="type">shape</span>: aShape) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    draw(aShape, currWindow);
  <span class="keywd">end func</span>;
</pre><p>
  In the example above the call of the (DYNAMIC) interface
  function is <tt>'draw(aShape, currWindow)'</tt>. The
  interface function declared with
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: draw (<span class="keywd">in</span> <span class="type">shape</span>: aShape, <span class="keywd">inout</span> <span class="type">window</span>: aWindow) <span class="keywd">is DYNAMIC</span>;
</pre><p>
  decides which implementation function has to be called.
  The dynamic dispatch works as follows:
</p><ul>
<li>For all parameters which have an interface type the
    parameter is replaced with its value. In this case the
    parameter <tt>'aShape'</tt> is replaced by a value of type
    <tt><span class="type">circle</span></tt> or <tt><span class="type">line</span></tt>.</li>

<li>The same logic as in the analyze part of the compiler
    is used to find the matching function. In this search
    normal functions take precedence over interface functions.</li>

<li>When a matching function is found it is called.</li>
</ul><p>
  This process describes the principal logic of the dynamic
  dispatch. In practice it is not necessary to execute the
  analyze part of the compiler during the runtime. It is
  possible to simplify this process with tables and function
  pointers.
</p>

<a name="inheritance"><h3>7.3 Inheritance</h3></a>
<p>
    When a new <tt><a class="type" href="types.htm#struct">struct</a></tt> type is defined it is possible to
  inherit from an existing <tt><a class="type" href="types.htm#struct">struct</a></tt> type. E.g.:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: external_file <span class="keywd">is</span> <span class="keywd">sub</span> <a class="type" href="../libraries/null_file.htm#null_file">null_file</a> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: ext_file <span class="keywd">is</span> PRIMITIVE_NULL_FILE;
    <span class="keywd">var</span> <a class="type" href="types.htm#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end struct</span>;
</pre><p>
  That way the type <tt><a class="type" href="../libraries/external_file.htm#external_file">external_file</a></tt> inherits the fields and
  methods of <tt><a class="type" href="../libraries/null_file.htm#null_file">null_file</a></tt>, which is declared as:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: null_file <span class="keywd">is</span> <span class="keywd">new struct</span>
  <span class="keywd">var</span> <a class="type" href="types.htm#char">char</a>: bufferChar <span class="keywd">is</span> '\n';
<span class="keywd">end struct</span>;
</pre><p>
  In most situations it makes sense when the implementation
  types inherit from a basic implementation type such as
  <tt><a class="type" href="../libraries/null_file.htm#null_file">null_file</a></tt>. That way it is possible to define functions
  which are inherited by all derived implementation types.
  In the standard library <tt><a class="func" href="../libraries/null_file.htm#getln(inout_null_file)">getln</a></tt> is such a function:
<p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: getln (<span class="keywd">inout</span> <a class="type" href="../libraries/null_file.htm#null_file">null_file</a>: aFile) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#string">string</a>: stri <span class="keywd">is</span> "";
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#string">string</a>: buffer <span class="keywd">is</span> "";
  <span class="keywd">begin</span>
    buffer := gets(aFile, 1);
    <span class="keywd">while</span> buffer &lt;> <span class="stri">"\n"</span> <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> buffer &lt;> <span class="stri">""</span> <span class="keywd">do</span>
      stri &amp;:= buffer;
      buffer := gets(aFile, 1);
    <span class="keywd">end while</span>;
    aFile.bufferChar := buffer[1];
  <span class="keywd">end func</span>;
</pre><p>
  All inherited types of <tt><a class="type" href="../libraries/null_file.htm#null_file">null_file</a></tt> inherit the function
  <tt><a class="func" href="../libraries/null_file.htm#getln(inout_null_file)">getln</a></tt>, but they are also free to redefine it. In the
  <tt><a class="func" href="../libraries/null_file.htm#getln(inout_null_file)">getln</a></tt> function above the function call <tt>'<a class="func" href="../libraries/file.htm#gets(inout_file,in_integer)">gets</a>(aFile, 1)'</tt>
  uses the (DYNAMIC) interface function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: gets (<span class="keywd">inout</span> <a class="type" href="types.htm#file">file</a>: inFile, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: maxLength) <span class="keywd">is DYNAMIC</span>;
</pre><p>
  In other OO languages the distinction between interface type
  and basic implementation type is not done. Such languages
  either use a dynamic dispatch for every method call (as Java
  does) or need a keyword to request a dynamic dispatch (as C++
  does with the <tt>'virtual'</tt> keyword).
</p><p>
  When assignments take place between inherited implementation
  types it is important to note that structure assignments are
  done with (deep) copies. Naturally such assignments can only
  copy the elements that are present in both structures.
  In the following example just the <tt><a class="type" href="../libraries/null_file.htm#null_file">null_file</a></tt> elements
  are copied from <tt>'anExternalFile'</tt> to <tt>'aNullFile'</tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: example <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../libraries/null_file.htm#null_file">null_file</a>: aNullFile <span class="keywd">is</span> <a class="type" href="../libraries/null_file.htm#null_file">null_file</a>.value;
    <span class="keywd">var</span> <a class="type" href="../libraries/external_file.htm#external_file">external_file</a>: anExternalFile <span class="keywd">is</span> <a class="type" href="../libraries/external_file.htm#external_file">external_file</a>.value;
  <span class="keywd">begin</span>
    aNullFile := anExternalFile;
    write(aNullFile, "hello");
  <span class="keywd">end func</span>;
</pre><p>
  Although the variable <tt>'anExternalFile'</tt> is assigned to
  <tt>'aNullFile'</tt>, the statement <tt>'<a class="func" href="../libraries/null_file.htm#write(in_null_file,in_string)">write</a>(aNullFile, "hello")'</tt>
  calls the <tt><a class="func" href="../libraries/null_file.htm#write(in_null_file,in_string)">write</a></tt> function (method) of the type <tt><a class="type" href="../libraries/null_file.htm#null_file">null_file</a></tt>.
</p><p>
  A new interface type can also inherit from an existing
  interface type:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: shape <span class="keywd">is</span> <span class="keywd">sub</span> <span class="type">object</span> <span class="keywd">interface</span>;
</pre><p>
  Although inheritance is a very powerful feature it should
  be used with care. In many situations it makes more sense
  that a new type has an element of another type (so called
  has-a relation) instead of inheriting from that type (so
  called is-a relation).
</p>

<a name="class_methods"><h3>7.4 Class methods</h3></a>
<p>
    Many object-oriented programming languages support methods
  that are associated with a class instead of an instantiated
  object. Such methods are called class methods or static
  methods. Seed7 supports class methods via attribute (<tt>'<span class="keywd">attr</span>'</tt>)
  parameters which allow that a function is attached to a <tt><a class="type" href="types.htm#type">type</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">circle</span>: create (<span class="keywd">attr</span> <span class="type">circle</span>, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: radius) <span class="keywd">is</span>
  <span class="keywd">return</span> circle(radius);
</pre><p>
  This <tt>'create'</tt> function is attached to the type <tt><span class="type">circle</span></tt> and can be called with
</p><pre class="indent">
create(<span class="type">circle</span>, 10)
</pre><p>
  Many languages require that the class name must precede the
  method name when a class method is called (E.g. <tt>'circle::create(10)'</tt>
  in C++). In contrast to that <tt>'<span class="keywd">attr</span>'</tt> parameters are not
  restricted to a specific parameter position. They can be used
  in any parameter position as in the following example:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">circle</span>: create (<span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: radius, <span class="keywd">attr</span> <span class="type">circle</span>) <span class="keywd">is</span>
  <span class="keywd">return</span> circle(radius);
</pre><p>
  This function can be called with
</p><pre class="indent">
create(10, <span class="type">circle</span>)
</pre><p>
  Attribute parameters can be used for any type not just for
  interface and implementation types. Objects which do not
  have a function type such as a character constant can also
  be attached to a type:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#char">char</a>: (<span class="keywd">attr</span> <a class="type" href="types.htm#char">char</a>) . value <span class="keywd">is</span> <span class="stri">' '</span>;
</pre><p>
  This way attributes can be used to specify properties
  of a type such as its default <tt>'value'</tt>.
  Programming languages such as Seed7 which support function
  definitions outside a class can also use normal functions
  instead of class methods. It is a matter of taste if a
  function should be grouped to a type or if it should
  exist stand alone and is called with:
</p><pre class="indent">
circle(10)
</pre><p>
</p>

<a name="multiple_dispatch"><h3>7.5 Multiple dispatch</h3></a>
<p>
    The Seed7 object system allows multiple dispatch (not to
  be confused with multiple inheritance). The methods are
  not assigned to one type (class). The decision which
  function (method) is called at runtime is done based upon
  the types of several arguments. The classic object
  orientation is a special case where a method is connected
  to one class and the dispatch decision is done based on
  the type of the <tt>'self'</tt> or <tt>'this'</tt> parameter.
  The classic object orientation is a single dispatch system.
</p><p>
  In the following example the type <tt><span class="type">Number</span></tt> is introduced
  which is capable to unify numerical types. The type
  <tt><span class="type">Number</span></tt> is an interface type which defines
  the interface function for the <tt>'+'</tt> operation:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: Number <span class="keywd">is</span> <span class="keywd">sub</span> <span class="type">object</span> <span class="keywd">interface</span>;

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">Number</span>: (<span class="keywd">in</span> <span class="type">Number</span>: a) + (<span class="keywd">in</span> <span class="type">Number</span>: b) <span class="keywd">is DYNAMIC</span>;
</pre><p>
  The interface type <tt><span class="type">Number</span></tt> can represent an <tt>'<span class="type">Integer</span>'</tt> or a <tt>'<span class="type">Float</span>'</tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: Integer <span class="keywd">is</span> <span class="keywd">new struct</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: data <span class="keywd">is</span> 0;
  <span class="keywd">end struct</span>;

type_implements_interface(<span class="type">Integer</span>, <span class="type">Number</span>);

<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: Float <span class="keywd">is</span> <span class="keywd">new struct</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#float">float</a>: data <span class="keywd">is</span> 0.0;
  <span class="keywd">end struct</span>;

type_implements_interface(<span class="type">Float</span>, <span class="type">Number</span>);
</pre><p>
  The declarations of the converting <tt>'+'</tt> operators are:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">Float</span>: (<span class="keywd">in</span> <span class="type">Integer</span>: a) + (<span class="keywd">in</span> <span class="type">Float</span>: b) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">Float</span>: sum <span class="keywd">is</span> <span class="type">Float</span>.value;
  <span class="keywd">begin</span>
    sum.data := flt(a.data) + b.data;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">Float</span>: (<span class="keywd">in</span> <span class="type">Float</span>: a) + (<span class="keywd">in</span> <span class="type">Integer</span>: b) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">Float</span>: sum <span class="keywd">is</span> <span class="type">Float</span>.value;
  <span class="keywd">begin</span>
    sum.data := a.data + flt(b.data);
  <span class="keywd">end func</span>;
</pre><p>
  The declarations of the normal <tt>'+'</tt> operators (which do not convert) are:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">Integer</span>: (<span class="keywd">in</span> <span class="type">Integer</span>: a) + (<span class="keywd">in</span> <span class="type">Integer</span>: b) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">Integer</span>: sum <span class="keywd">is</span> <span class="type">Integer</span>.value;
  <span class="keywd">begin</span>
    sum.data := a.data + b.data;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">Float</span>: (<span class="keywd">in</span> <span class="type">Float</span>: a) + (<span class="keywd">in</span> <span class="type">Float</span>: b) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">Float</span>: sum <span class="keywd">is</span> <span class="type">Float</span>.value;
  <span class="keywd">begin</span>
    sum.data := a.data + b.data;
  <span class="keywd">end func</span>;
</pre><p>
  The type <tt><span class="type">Number</span></tt> can be extended to support other
  operators and there can be also implementations using
  <tt><a class="type" href="types.htm#complex">complex</a></tt>, <tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt>, <tt><a class="type" href="types.htm#bigRational">bigRational</a></tt>, etc. . That way
  <tt><span class="type">Number</span></tt> can be used as universal type for math
  calculation. Further extending can lead to an universal
  type. Such an universal type is loved by proponents of
  dynamic typed languages, but there are also good reasons
  to have distinct types for different purposes.
</p>

<a name="replacing_pointers"><h3>7.6 Replacing pointers with interface types</h3></a>
<p>
    Many languages have the concept of a pointer. It is possible
  to implement data structures, such as lists and trees, with
  pointers. Although Seed7 supports the concept of a pointer, they
  are not well suited to describe such data structures. Instead of
  pointers interface types can be used. This way list, trees and
  other advanced data structures can be defined.
</p><p>
  The following example shows how to do this:
  The interface type <tt><span class="type">element</span></tt> will be used as "pointer":
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: element <span class="keywd">is</span> <span class="keywd">new interface</span>;
</pre><p>
  An implementation type for the empty <tt><span class="type">element</span></tt> (emptyElement)
  can be used as basic implementation type from which other
  implementation types can inherit:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: emptyElement <span class="keywd">is</span> <span class="keywd">new struct</span>
  <span class="keywd">end struct</span>;
</pre><p>
  That the implementation type <tt><span class="type">emptyElement</span></tt> implements the
  interface type <tt><span class="type">element</span></tt> is described with:
</p><pre class="indent">
type_implements_interface(<span class="type">emptyElement</span>, <span class="type">element</span>);
</pre><p>
  Since every Seed7 expression has exactly one type, it is
  necessary to define a special <tt>'NIL'</tt> value (used with  <tt>'<span class="type">element</span>.NIL'</tt>)
  for the type <tt><span class="type">element</span></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <span class="type">element</span>: (<span class="keywd">attr</span> element) . NIL <span class="keywd">is</span> <span class="type">emptyElement</span>.value;
</pre><p>
  Now the struct with two "pointers" and an <tt><a class="type" href="types.htm#integer">integer</a></tt> can be
  declared:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#type">type</a>: treeElement <span class="keywd">is</span> <span class="keywd">sub</span> <span class="type">emptyElement</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">element</span>: left <span class="keywd">is</span> <span class="type">element</span>.NIL;
    <span class="keywd">var</span> <span class="type">element</span>: right <span class="keywd">is</span> <span class="type">element</span>.NIL;
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: item <span class="keywd">is</span> 0;
  <span class="keywd">end struct</span>;
</pre><p>
  Finally the type <tt><span class="type">treeElement</span></tt> is defined as implementation
  of the type <tt><span class="type">element</span></tt>:
</p><pre class="indent">
type_implements_interface(<span class="type">treeElement</span>, <span class="type">element</span>);
</pre><p>
  To allow the direct access to the structure elements <tt>'left'</tt>, <tt>'right'</tt>
  and <tt>'item'</tt> for objects of type <tt><span class="type">element</span></tt> the following declarations
  are necessary:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a>    <span class="type">element</span>: (<span class="keywd">ref</span>   <span class="type">element</span>: anElem).left  <span class="keywd">is DYNAMIC</span>;
<span class="keywd">const</span> <a class="type" href="types.htm#varfunc">varfunc</a> <span class="type">element</span>: (<span class="keywd">inout</span> <span class="type">element</span>: anElem).left  <span class="keywd">is DYNAMIC</span>;
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a>    <span class="type">element</span>: (<span class="keywd">ref</span>   <span class="type">element</span>: anElem).right <span class="keywd">is DYNAMIC</span>;
<span class="keywd">const</span> <a class="type" href="types.htm#varfunc">varfunc</a> <span class="type">element</span>: (<span class="keywd">inout</span> <span class="type">element</span>: anElem).right <span class="keywd">is DYNAMIC</span>;
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a>    <a class="type" href="types.htm#integer">integer</a>: (<span class="keywd">ref</span>   <span class="type">element</span>: anElem).item  <span class="keywd">is DYNAMIC</span>;
<span class="keywd">const</span> <a class="type" href="types.htm#varfunc">varfunc</a> <a class="type" href="types.htm#integer">integer</a>: (<span class="keywd">inout</span> <span class="type">element</span>: anElem).item  <span class="keywd">is DYNAMIC</span>;
</pre><p>
  When all this was declared the following code is possible:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: addItem (<span class="keywd">inout</span> <span class="type">element</span>: anElem, <span class="keywd">in</span> <a class="type" href="types.htm#integer">integer</a>: item) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> anElem = <span class="type">element</span>.NIL <span class="keywd">then</span>
      anElem := xalloc(<span class="type">treeElement</span>.value);
      anElem.item := item;
    <span class="keywd">elsif</span> item < anElem.item <span class="keywd">then</span>
      addItem(anElem.left, item);
    <span class="keywd">elsif</span> item > anElem.item <span class="keywd">then</span>
      addItem(anElem.right, item);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: listItems (<span class="keywd">in</span> <span class="type">element</span>: anElem) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> anElem &lt;> <span class="type">element</span>.NIL <span class="keywd">then</span>
      listItems(anElem.left);
      write(<span class="stri">" "</span> &lt;&amp; anElem.item);
      listItems(anElem.right);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: sum (<span class="keywd">in</span> <span class="type">element</span>: anElem) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="types.htm#integer">integer</a>: sum <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> anElem &lt;> <span class="type">element</span>.NIL <span class="keywd">then</span>
      sum := anElem.item + sum(anElem.left) + sum(anElem.right);
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre><p>
  New elements can be created with the function 'xalloc'.
  This way interface and implementation types help to provide the
  pointer functionality.
</p><p>
  Pointers and interface types are not always the best solution.
  Abstract data types like dynamic arrays, hash tables, struct
  types and set types can also be used to declare data structures.
</p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/params.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/file.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
  </body>
</html>
