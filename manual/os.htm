<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Operating system access</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#OPERATING_SYSTEM_ACCESS"><big>OS access</big></a>
<a class="menu" href="#Standard_path_representation">standard path</a>
<a class="menu" href="#readDir">readDir</a>
<a class="menu" href="#openDir">openDir</a>
<a class="menu" href="#getcwd">getcwd</a>
<a class="menu" href="#chdir">chdir</a>
<a class="menu" href="#mkdir">mkdir</a>
<a class="menu" href="#homeDir">homeDir</a>
<a class="menu" href="#fileType">fileType</a>
<a class="menu" href="#fileMode">fileMode</a>
<a class="menu" href="#setFileMode">setFileMode</a>
<a class="menu" href="#fileSize">fileSize</a>
<a class="menu" href="#getATime">getATime</a>
<a class="menu" href="#getCTime">getCTime</a>
<a class="menu" href="#getMTime">getMTime</a>
<a class="menu" href="#setATime">setATime</a>
<a class="menu" href="#setMTime">setMTime</a>
<a class="menu" href="#readlink">readlink</a>
<a class="menu" href="#symlink">symlink</a>
<a class="menu" href="#removeFile">removeFile</a>
<a class="menu" href="#removeTree">removeTree</a>
<a class="menu" href="#copyFile">copyFile</a>
<a class="menu" href="#cloneFile">cloneFile</a>
<a class="menu" href="#moveFile">moveFile</a>
<a class="menu" href="#argv_PROGRAM">argv</a>
<a class="menu" href="#name_PROGRAM">program name</a>
<a class="menu" href="#path_PROGRAM">program path</a>
<a class="menu" href="#dir_PROGRAM">program dir</a>
<a class="menu" href="#file_PROGRAM">program file</a>
<a class="menu" href="#getenv">getenv</a>
<a class="menu" href="#setenv">setenv</a>
<a class="menu" href="#unsetenv">unsetenv</a>
<a class="menu" href="#environment">environment</a>
</div>
<div class="content">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>OS&nbsp;access</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/expr.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/database.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="OPERATING_SYSTEM_ACCESS"><h2>12. OPERATING SYSTEM ACCESS</h2></a>

<p>
    Seed7 provides a portable access to the services provided
  by an operating system. This interface is oriented towards
  Posix and Unix. The functions in this chapter are defined
  in the libraries <span class="stri">"<a class="lib" href="../libraries/osfiles.htm">osfiles.s7i</a>"</span>, <span class="stri">"<a class="lib" href="../libraries/dir.htm">dir.s7i</a>"</span> and <span class="stri">"<a class="lib" href="../libraries/environment.htm">environment.s7i</a>"</span>.
</p>

<a name="Standard_path_representation"><h3>12.1 Standard path representation</h3></a>
<p>
    A path specifies the location of a file in a file system.
  Operating systems have different concepts how a path should
  look like. Seed7 compensates this differences with a standard
  path representation. Standard paths are used by all Seed7
  functions dealing with paths. The standard path representation
  uses <tt><a class="type" href="types.htm#string">string</a>s</tt> with the following properties to describe paths:
</p><ul>
    <li>The slash (<tt><span class="stri">'/'</span></tt>) is used as path delimiter.</li>
    <li>Drive letters are not allowed, but there is a solution
      to replace them.</li>
    <li>Except for the path <tt><span class="stri">"/"</span></tt> a standard path is not allowed
      to end with a slash.
</ul><p>
  When a function like <tt><a class="func" href="../libraries/external_file.htm#open(in_string,in_string)">open</a></tt> is called with a path that is not
  <tt><span class="stri">"/"</span></tt>, but ends with a slash, the exception <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt> is
  raised. Under Windows a standard path like <tt><span class="stri">"/c"</span></tt> is mapped to
  the drive <tt><span class="stri">"C:"</span></tt>. Reading the directory <tt><span class="stri">"/"</span></tt> under Windows
  returns a list of available drives. A path with a backslash
  or with a drive letter may raise the exception <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt>,
  when a function like <tt><a class="func" href="../libraries/external_file.htm#open(in_string,in_string)">open</a></tt> is called.
</p><p>
  An absolute path specifies an unique location in the file
  system. Absolute paths always start with a slash. A relative
  path specifies a location relative to the current working
  directory of the program. Although standard paths are defined
  in a portable way, an absolute path will usually not be portable.
</p>

<a name="readDir"><h3>12.2 readDir</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#readDir(in_string)">readDir</a></tt> provides a portable access to the
  contents of directories in the file system. It reads the
  specified directory and the filenames are stored in the
  string-array result. The files <tt><span class="stri">"."</span></tt> and <tt><span class="stri">".."</span></tt> are left out from
  the result. Note that the strings contain only the filenames.
  Additional information must be obtained with other calls.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a>: readDir (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dirPath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    An array of strings containing the names of all
    files in the specified directory, except <tt><span class="stri">"."</span></tt> and <tt><span class="stri">".."</span></tt>
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'dirPath'</tt> to the system
        path type or not enough memory to represent the result
        <tt><a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a></tt>.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'dirPath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    After the declaration
</p><pre class="indent">
<span class="keywd">var</span> <a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a>: dir_array <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
</pre><p>
    the statement
</p><pre class="indent">
dir_array := readDir(<span class="stri">"."</span>);
</pre><p>
    reads the current working directory and stores it into the
    string-array <tt>'dir_array'</tt>. The components of the directory
    can now be accessed via indexing:
</p><pre class="indent">
<span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(dir_array) <span class="keywd">do</span>
  writeln(dir_array[index]);
<span class="keywd">end for</span>;
</pre><p></p></dd></dl></div><p></p>

<a name="openDir"><h3>12.3 openDir</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/dir.htm#openDir(in_string)">openDir</a></tt> opens the specified directory as file.
  Each line in this directory file contains the filename of a
  file present in the the directory. The files <tt><span class="stri">"."</span></tt> and <tt><span class="stri">".."</span></tt> are
  left out from the directory file. Note that only filenames can
  be read from the directory file. Additional information must be
  obtained with other calls.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#file">file</a>: openDir (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dirPath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The directory file of the specified directory.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'dirPath'</tt> to the system
        path type or not enough memory to represent the result
        <tt><a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a></tt>.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'dirPath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><pre class="indent">
...

<span class="keywd">include</span> <span class="stri">"dir.s7i"</span>;

<span class="keywd">var</span> <a class="type" href="types.htm#file">file</a>: aDirFile <span class="keywd">is</span> STD_NULL;
<span class="keywd">var</span> <a class="type" href="types.htm#string">string</a>: fileName <span class="keywd">is</span> <span class="stri">""</span>;

...

aDirFile := openDir(<span class="stri">"."</span>);
fileName := getln(aDirFile);
<span class="keywd">while</span> fileName &lt;> <span class="stri">""</span> <span class="keywd">do</span>
  writeln(fileName);
  fileName := getln(aDirFile);
<span class="keywd">end while</span>;
</pre><p></p></dd></dl></div><p></p>

<a name="getcwd"><h3>12.4 getcwd</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#getcwd">getcwd</a></tt> returns the current working directory
  of the calling process as absolute path.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: getcwd <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the current working directory.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to represent the result <tt><a class="type" href="types.htm#string">string</a></tt>.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>The system function returns an error.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
</p><pre class="indent">
my_dir := getcwd;
</pre><p>
    assigns the full path of the current working directory to
    the <tt><a class="type" href="types.htm#string">string</a></tt> variable <tt>'my_dir'</tt>.
</p></dd></dl></div><p></p>

<a name="chdir"><h3>12.5 chdir</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#chdir(in_string)">chdir</a></tt> changes the current working directory
  of the calling process to the specified directory.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: chdir (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: name) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'name'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
</p><pre class="indent">
chdir(<span class="stri">"/usr/bin"</span>);
</pre><p>
    changes the current working directory to <tt><span class="stri">"/usr/bin"</span></tt>.
</p></dd></dl></div><p></p>

<a name="mkdir"><h3>12.6 mkdir</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#mkdir(in_string)">mkdir</a></tt> creates a new directory.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: mkdir (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: name) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'name'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
</p><pre class="indent">
mkdir(<span class="stri">"my_dir"</span>);
</pre><p>
    creates the directory <tt><span class="stri">"my_dir"</span></tt>.
</p></dd></dl></div><p></p>

<a name="homeDir"><h3>12.7 homeDir</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#homeDir">homeDir</a></tt> returns the home directory of the user
  as absolute path.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: homeDir <span class="keywd">is</span> ...
</pre><p>
  This function should be preferred over the use of an environment
  variable such as <tt>$HOME</tt>. <tt>$HOME</tt> is not supported under all operating
  systems and it is not guaranteed, that it uses the <a class="link" href="#Standard_path_representation">standard path
  representation</a>.
</p>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the home directory.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to represent the result <tt><a class="type" href="types.htm#string">string</a></tt>.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>Not able to determine the home directory.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Examples:</p></dt><dd><p>
    The statement
</p><pre class="indent">
my_dir := homeDir;
</pre><p>
    assigns the full path of the home directory to the
    <tt><a class="type" href="types.htm#string">string</a></tt> variable <tt>'my_dir'</tt>.
</p></dd></dl></div><p></p>

<a name="fileType"><h3>12.8 fileType</h3></a>
<p>
    The type of a file can determined with <tt><a class="func" href="../libraries/osfiles.htm#fileType(in_string)">fileType</a></tt> or <tt><a class="func" href="../libraries/osfiles.htm#fileTypeSL(in_string)">fileTypeSL</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: fileType (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: fileTypeSL (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre><p>
  The function <tt><a class="func" href="../libraries/osfiles.htm#fileType(in_string)">fileType</a></tt> does follow symbolic links. Therefore
  <tt><a class="func" href="../libraries/osfiles.htm#fileType(in_string)">fileType</a></tt> never returns <tt><a class="var" href="#FILE_SYMLINK">FILE_SYMLINK</a></tt>. The function <tt><a class="func" href="../libraries/osfiles.htm#fileTypeSL(in_string)">fileTypeSL</a></tt>
  can also return <tt><a class="var" href="#FILE_SYMLINK">FILE_SYMLINK</a></tt>, because it does not follow symbolic
  links. All functions which use a file path, except <tt><a class="func" href="../libraries/osfiles.htm#fileTypeSL(in_string)">fileTypeSL</a></tt>
  and <tt><a class="func" href="../libraries/osfiles.htm#readLink(in_string)">readLink</a></tt> follow symbolic links.  A return value of
  <tt><a class="var" href="#FILE_ABSENT">FILE_ABSENT</a></tt> does not imply that a file with this name can be
  created, since missing directories and invalid file names cause
  also <tt><a class="var" href="#FILE_ABSENT">FILE_ABSENT</a></tt>.
</p>
  <div><dl><dt><p>Returns:</p></dt><dd><dl>
    <dt><a name="FILE_ABSENT">FILE_ABSENT</a></dt>
        <dd>A component of path does not exist.</dd>
    <dt><a name="FILE_UNKNOWN">FILE_UNKNOWN</a></dt>
        <dd>The file exists but has an unknown type.</dd>
    <dt><a name="FILE_REGULAR">FILE_REGULAR</a></dt>
        <dd>The file is a regular file.</dd>
    <dt><a name="FILE_DIR">FILE_DIR</a></dt>
        <dd>The file is a directory.</dd>
    <dt><a name="FILE_CHAR">FILE_CHAR</a></dt>
        <dd>The file is a character special file.</dd>
    <dt><a name="FILE_BLOCK">FILE_BLOCK</a></dt>
        <dd>The file is a block special file.</dd>
    <dt><a name="FILE_FIFO">FILE_FIFO</a></dt>
        <dd>The file is a pipe or FIFO special file.</dd>
    <dt><a name="FILE_SYMLINK">FILE_SYMLINK</a></dt>
        <dd>The file is a symbolic link.</dd>
    <dt><a name="FILE_SOCKET">FILE_SOCKET</a></dt>
        <dd>The file is a socket.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>The system function returns an error other than ENOENT,
        ENOTDIR, ENAMETOOLONG or EACCES.</dd>
</dl></dd></dl></div><p></p>

<a name="fileMode"><h3>12.9 fileMode</h3></a>
<p>
    The permissions of a file can determined with <tt><a class="func" href="../libraries/osfiles.htm#fileMode(in_string)">fileMode</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <span class="type">fileMode</span>: fileMode (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The <tt><span class="type">fileMode</span></tt> which is defined as <tt><a class="type" href="types.htm#set">set</a> <span class="type">of</span> <span class="type">filePermission</span></tt>.
</p></dd></dl></div>
  <div><dl><dt><p>The literal values of <tt><span class="type">filePermission</span></tt> are:</p></dt><dd><dl>
    <dt>EXEC_OTHER</dt>
        <dd>others have execute permission</dd>
    <dt>WRITE_OTHER</dt>
        <dd>others have write permission</dd>
    <dt>READ_OTHER</dt>
        <dd>others have read permission</dd>
    <dt>EXEC_GROUP</dt>
        <dd>group has execute permission</dd>
    <dt>WRITE_GROUP</dt>
        <dd>group has write permission</dd>
    <dt>READ_GROUP</dt>
        <dd>group has read permission</dd>
    <dt>EXEC_USER</dt>
        <dd>owner has execute permission</dd>
    <dt>WRITE_USER</dt>
        <dd>owner has write permission</dd>
    <dt>READ_USER</dt>
        <dd>owner has read permission</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="setFileMode"><h3>12.10 setFileMode</h3></a>
<p>
    The permissions of a file can changed with <tt><a class="func" href="../libraries/osfiles.htm#setFileMode(in_string,in_fileMode)">setFileMode</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: setFileMode (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath, <span class="keywd">in</span> <span class="type">fileMode</span>: newFileMode) <span class="keywd">is</span> ...
</pre><p>
  The type <tt><span class="type">fileMode</span></tt> is defined as <tt>'<a class="type" href="types.htm#set">set</a> <span class="type">of</span> <span class="type">filePermission</span>'</tt>.
</p>
  <div><dl><dt><p>The literal values of <tt><span class="type">filePermission</span></tt> are:</p></dt><dd><dl>
    <dt>EXEC_OTHER</dt>
        <dd>others have execute permission</dd>
    <dt>WRITE_OTHER</dt>
        <dd>others have write permission</dd>
    <dt>READ_OTHER</dt>
        <dd>others have read permission</dd>
    <dt>EXEC_GROUP</dt>
        <dd>group has execute permission</dd>
    <dt>WRITE_GROUP</dt>
        <dd>group has write permission</dd>
    <dt>READ_GROUP</dt>
        <dd>group has read permission</dd>
    <dt>EXEC_USER</dt>
        <dd>owner has execute permission</dd>
    <dt>WRITE_USER</dt>
        <dd>owner has write permission</dd>
    <dt>READ_USER</dt>
        <dd>owner has read permission</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="fileSize"><h3>12.11 fileSize</h3></a>
<p>
    The size of a file can be determined with <tt><a class="func" href="../libraries/osfiles.htm#fileSize(in_string)">fileSize</a></tt> and <tt><a class="func" href="../libraries/osfiles.htm#bigFileSize(in_string)">bigFileSize</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: fileSize (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#bigInteger">bigInteger</a>: bigFileSize (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    For directories a size of 0 is returned. For other file types
    the operating system functions <tt>'stat()'</tt> and <tt>'seek()'</tt> are
    used to determine the size of a file. The functions <tt><a class="func" href="../libraries/osfiles.htm#fileSize(in_string)">fileSize</a></tt>
    and <tt><a class="func" href="../libraries/osfiles.htm#bigFileSize(in_string)">bigFileSize</a></tt> succeed when at least one strategy to determine
    the file size succeeds.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd>The file size is not representable as <tt><a class="type" href="types.htm#integer">integer</a></tt>
        (this exception is not raised by <tt><a class="func" href="../libraries/osfiles.htm#bigFileSize(in_string)">bigFileSize</a></tt>).</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>It was not possible to determine the file size.</dd>
</dl></dd></dl></div><p></p>

<a name="getATime"><h3>12.12 getATime</h3></a>
<p>
    The access time of a file is returned by the function <tt><a class="func" href="../libraries/osfiles.htm#getATime(in_string)">getATime</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#time">time</a>: getATime (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="getCTime"><h3>12.13 getCTime</h3></a>
<p>
    The change time of a file is returned by the function <tt><a class="func" href="../libraries/osfiles.htm#getCTime(in_string)">getCTime</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#time">time</a>: getCTime (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="getMTime"><h3>12.14 getMTime</h3></a>
<p>
    The modification time of a file is returned by the function <tt><a class="func" href="../libraries/osfiles.htm#getMTime(in_string)">getMTime</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#time">time</a>: getMTime (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="setATime"><h3>12.15 setATime</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#setATime(in_string,in_time)">setATime</a></tt> sets the access time of a file:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: setATime (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath, <span class="keywd">in</span> <a class="type" href="types.htm#time">time</a>: aTime) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type or <tt>'aTime'</tt>
        is invalid or cannot be converted to the system file time.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="setMTime"><h3>12.16 setMTime</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#setMTime(in_string,in_time)">setMTime</a></tt> sets the modification time of a file:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: setMTime (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath, <span class="keywd">in</span> <a class="type" href="types.htm#time">time</a>: aTime) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type or <tt>'aTime'</tt>
        is invalid or cannot be converted to the system file time.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="readLink"><h3>12.17 readLink</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#readLink(in_string)">readLink</a></tt> reads the destination of a symbolic link:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: readLink (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The symbolic link referred by <tt>'filePath'</tt>.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type or not
        enough memory to represent the result <tt><a class="type" href="types.htm#string">string</a></tt>.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>The file described with <tt>'filePath'</tt> does not exist or is not a symbolic link.</dd>
</dl></dd></dl></div><p></p>

<a name="symlink"><h3>12.18 symlink</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#symlink(in_string,in_string)">symlink</a></tt> creates a symbolic link called <tt>'dest'</tt>
  that contains the string referred by <tt>'source'</tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: symlink (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: source, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: dest) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Parameters:</p></dt><dd><dl>
    <dt>source</dt>
        <dd>String to be contained in the symbolic link.</dd>
    <dt>dest</dt>
        <dd>Name of the symbolic link to be created.</dd>
</dl></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'source'</tt> or <tt>'dest'</tt>
        to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'source'</tt> or <tt>'dest'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path
        representation</a> or one of them cannot be converted to the
        system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>A system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="removeFile"><h3>12.19 removeFile</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#removeFile(in_string)">removeFile</a></tt> removes a file of any type unless it
  is a directory that is not empty. An attempt to remove a directory
  that is not empty triggers <a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a>. 
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: removeFile (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>The file does not exist or a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="removeTree"><h3>12.20 removeTree</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#removeTree(in_string)">removeTree</a></tt> removes a file of any type inclusive
  a directory tree:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: removeTree (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: filePath) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'filePath'</tt> to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'filePath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path representation</a>
        or it cannot be converted to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>The file does not exist or a system function returns an error.</dd>
</dl></dd></dl></div>

<a name="copyFile"><h3>12.21 copyFile</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#copyFile(in_string,in_string)">copyFile</a></tt> copies a file or directory tree:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: copyFile (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: sourcePath, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: destPath) <span class="keywd">is</span> ...
</pre><p>
  Permissions/mode, ownership and timestamps of the destination file
  are determined independent of the corresponding source properties.
  The destination file gets the permissions/mode defined by umask.
  The user executing the program is the owner of the destination file.
  The timestamps of the destination file are set to the current time.
  Symbolic links in sourcePath are always followed. Therefore
  <tt><a class="func" href="../libraries/osfiles.htm#copyFile(in_string,in_string)">copyFile</a></tt> will never create a symbolic link. Note that <tt><a class="func" href="../libraries/osfiles.htm#copyFile(in_string,in_string)">copyFile</a></tt>
  does not preserve hard links (they are resolved to distinct files).
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'sourcePath'</tt> or <tt>'destPath'</tt>
        to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'sourcePath'</tt> or <tt>'destPath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path
        representation</a> or one of them cannot be converted to the
        system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>Source file does not exist, destination file already exists or
        a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="cloneFile"><h3>12.22 cloneFile</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#cloneFile(in_string,in_string)">cloneFile</a></tt> clones a file or directory tree:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: cloneFile (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: sourcePath, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: destPath) <span class="keywd">is</span> ...
</pre><p>
  Permissions/mode, ownership and timestamps of the original are
  preserved. Symlinks are not followed. Instead the symlink
  is copied. Note that <tt><a class="func" href="../libraries/osfiles.htm#cloneFile(in_string,in_string)">cloneFile</a></tt> does not preserve hard
  links (they are resolved to distinct files).
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'sourcePath'</tt> or <tt>'destPath'</tt>
        to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'sourcePath'</tt> or <tt>'destPath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path
        representation</a> or one of them cannot be converted to the
        system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>Source file does not exist, destination file already exists or
        a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="moveFile"><h3>12.23 moveFile</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/osfiles.htm#moveFile(in_string,in_string)">moveFile</a></tt> moves and/or renames a file or
  directory tree:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: moveFile (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: sourcePath, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: destPath) <span class="keywd">is</span> ...
</pre><p>
  The function uses the C <tt>'rename()'</tt> function. When <tt>'rename()'</tt> fails
  the file (or directory tree) is cloned with <tt><a class="func" href="#cloneFile">cloneFile</a></tt> (which
  preserves permissions/mode, ownership and timestamps) to the new
  place and with the new name. When <tt><a class="func" href="#cloneFile">cloneFile</a></tt> succeeds the original
  file is deleted. When <tt><a class="func" href="#cloneFile">cloneFile</a></tt> fails (no space on device or
  other reason) all remains of the failed clone are removed. Note
  that <tt><a class="func" href="#cloneFile">cloneFile</a></tt> works for symbolic links but does not preserve
  hard links (they are resolved to distinct files).
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'sourcePath'</tt> or <tt>'destPath'</tt>
        to the system path type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'sourcePath'</tt> or <tt>'destPath'</tt> does not use the <a class="link" href="#Standard_path_representation">standard path
        representation</a> or one of them cannot be converted to the
        system path type.</dd>
    <dt><a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a></dt>
        <dd>Source file does not exist, destination file already exists or
        a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="argv_PROGRAM"><h3>12.24 argv(PROGRAM)</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#argv(PROGRAM)">argv(PROGRAM)</a></tt> returns the argument vector of
  the program as array of strings. The name of the program is
  not part of the argument vector.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a>: argv (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    An array of strings containing the argument vector.
</p></dd></dl></div><p></p>

<a name="name_PROGRAM"><h3>12.25 name(PROGRAM)</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#name(PROGRAM)">name(PROGRAM)</a></tt> returns the name of the program
  without path and extension. The name returned by <tt><span class="func">name(PROGRAM)</span></tt>
  is the same for interpreted and compiled programs. The function
  <tt><span class="func">name(PROGRAM)</span></tt> does not follow symbolic links. It determines,
  with which name a program was called. When several symbolic
  links refer to one program <tt><span class="func">name(PROGRAM)</span></tt> returns the name
  of the symbolic link.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: name (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The name of the program.
</p></dd></dl></div><p></p>

<a name="path_PROGRAM"><h3>12.26 path(PROGRAM)</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#path(PROGRAM)">path(PROGRAM)</a></tt> returns the absolute path
  of the program. For an interpreted program this is the
  absolute path of the source file. For a compiled program
  this is the absolute path of the executable. The function
  <tt><span class="func">path(PROGRAM)</span></tt> does follow symbolic links.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: path (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the program.
</p></dd></dl></div><p></p>

<a name="dir_PROGRAM"><h3>12.27 dir(PROGRAM)</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#dir(PROGRAM)">dir(PROGRAM)</a></tt> returns the absolute path of the
  directory containing the program. The function <tt><span class="func">dir(PROGRAM)</span></tt>
  allows placing configuration data in the directory of the program.
  <tt><span class="func">dir(PROGRAM)</span></tt> is based on <tt><a class="func" href="#path_PROGRAM">path(PROGRAM)</a></tt>.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: dir (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The absolute path of the directory containing the program.
</p></dd></dl></div><p></p>

<a name="file_PROGRAM"><h3>12.28 file(PROGRAM)</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#file(PROGRAM)">file(PROGRAM)</a></tt> returns the filename of the
  program without path. <tt><span class="func">file(PROGRAM)</span></tt> is based on <tt><a class="func" href="#path_PROGRAM">path(PROGRAM)</a></tt>.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: file (PROGRAM) <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The filename of the program.
</p></dd></dl></div><p></p>

<a name="getenv"><h3>12.29 getenv</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#getenv(in_string)">getenv</a></tt> determines the value of an
  environment variable.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#string">string</a>: getenv (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: name) <span class="keywd">is</span> ...
</pre><p>
  The function <tt><span class="func">getenv</span></tt> searches the environment for an
  environment variable with the given <tt>'name'</tt>. When such
  an environment variable exists the corresponding <tt><a class="type" href="types.htm#string">string</a></tt>
  value is returned.
</p>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The value of an environment variable or <span class="stri">""</span>
    when the requested environment variable does not exist.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system string type or not
        enough memory to represent the result <tt><a class="type" href="types.htm#string">string</a></tt>.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd>'name' cannot be converted to the system string
        type or a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="setenv"><h3>12.30 setenv</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#setenv(in_string,in_string)">setenv</a></tt> adds or changes an environment
  variable.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: setenv (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: name, <span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: value) <span class="keywd">is</span> ...
</pre><p>
  The function <tt><span class="func">setenv</span></tt> searches the environment for an
  environment variable with the given <tt>'name'</tt>. When such
  an environment variable exists the corresponding value is
  changed to <tt>'value'</tt>. When no environment variable with
  the given <tt>'name'</tt> exists a new environment variable
  <tt>'name'</tt> with the value <tt>'value'</tt> is created.
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'name'</tt> or <tt>'value'</tt> to
        the system string type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'name'</tt> or <tt>'value'</tt> cannot be converted to the
        system string type or a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="unsetenv"><h3>12.31 unsetenv</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#unsetenv(in_string)">unsetenv</a></tt> removes an environment variable.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: unsetenv (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: name) <span class="keywd">is</span> ...
</pre><p>
  The function <tt><span class="func">unsetenv</span></tt> searches the environment for an
  environment variable with the given <tt>'name'</tt>. When such
  an environment variable exists it is removed from the
  environment. When no environment variable with the given
  <tt>'name'</tt> exists the function succeeds, and the
  environment is unchanged.
</p>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to convert <tt>'name'</tt> to the system string type.</dd>
    <dt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></dt>
        <dd><tt>'name'</tt> cannot be converted to the system string
        type or a system function returns an error.</dd>
</dl></dd></dl></div><p></p>

<a name="environment"><h3>12.32 environment</h3></a>
<p>
    The function <tt><a class="func" href="../libraries/environment.htm#environment">environment</a></tt> returns the list of
  environment variable names as array of strings.
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#array">array</a> <a class="type" href="types.htm#string">string</a>: environment <span class="keywd">is</span> ...
</pre>
  <div><dl><dt><p>Returns:</p></dt><dd><p>
    The list of environment variable names.
</p></dd></dl></div>
  <div><dl><dt><p>Possible exceptions:</p></dt><dd><dl>
    <dt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></dt>
        <dd>Not enough memory to create the result.</dd>
</dl></dd></dl></div><p></p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/expr.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/database.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
  </body>
</html>
