<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Declarations</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#DECLARATIONS"><big>Declarations</big></a>
<a class="menu" href="#Normal_declarations">Normal</a>
<a class="menu" href="#Syntax_declarations">Syntax</a>
<a class="menu" href="#System_declarations">System</a>
<a class="menu" href="#Pragmas">Pragmas</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Declarations</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/tutorial.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/stats.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="DECLARATIONS"><h2>3. DECLARATIONS</h2></a>

<p>
    A declaration specifies the identifier, type, and other
  aspects of language elements such as variables, constants
  and functions. In Seed7 everything must be declared before
  it is used. Seed7 uses three kinds of declarations:
</p><ul>
    <li>Normal declarations</li>
    <li>Syntax declarations</li>
    <li>System declarations</li>
</ul><p>
  which are described in detail in the following sub-chapters.
</p>

<a name="Normal_declarations"><h3>3.1 Normal declarations</h3></a>
<p>
    Normal declarations are the most commonly used form of
  declarations. To contrast them to the syntax declarations normal
  declarations are sometimes called semantic declarations. Seed7
  uses uniform looking declaration constructs to declare variables,
  constants, types, functions and parameters. For example:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: ONE <span class="keywd">is</span> 1;
</pre><p>
  declares the <tt><a class="type" href="types.htm#integer">integer</a></tt> constant <tt>'ONE'</tt> which is initialized with the
  value 1. Variable declarations are also possible. For example:
</p><pre class="indent">
<span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
</pre><p>
  declares the <tt><a class="type" href="types.htm#integer">integer</a></tt> variable <tt>'number'</tt> which is initialized with
  the value 0. Type declarations are done as constant declarations
  where the type of the declared constant is <tt><a class="type" href="types.htm#type">type</a></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#type">type</a>: myChar <span class="keywd">is</span> <a class="type_no_ul" href="types.htm#char">char</a>;
</pre><p>
  Function declarations are also a form of constant declaration:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: flipCoin <span class="keywd">is</span>
  <span class="keywd">return</span> <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>);
</pre><p>
  Each object declared with a <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt> declaration obtains
  an initial value. It is not possible to use <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt>
  declarations without initial value. Declarations with
  initialization expressions are also possible. For example
</p><pre class="indent">
<span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: fileName <span class="keywd">is</span> NAME & <span class="stri">".txt"</span>;
</pre><p>
  The expression is evaluated and the result is assigned to
  the new object. This is done in the analyze phase of the
  interpreter or compiler, before the execution of the program
  starts. The initialization expressions may contain any
  function (or operator) call. That way user defined functions
  can also be used to initialize a constant or variable:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: maybe <span class="keywd">is</span> flipCoin;
</pre><p>
  Constant and variable declarations can be global or local.
  The mechanism to define a parameter like <tt>'x'</tt> is similar to the
  <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt> declarations:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>: inverse (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#float">float</a>: x) <span class="keywd">is</span>
  <span class="keywd">return</span> 1/x;
</pre><p>
  Function parameters, such as the parameter <tt>'statement'</tt> in
  the example below, act as call-by-name parameters:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: possiblyDo (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: statement) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> flipCoin <span class="keywd">then</span>
      statement;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre><p>
  Abstract data types such as <tt><span class="type">subtype</span></tt>, <tt><a class="type" href="types.htm#struct">struct</a></tt>, <tt><span class="type">subrange</span></tt>, <tt><a class="type" href="types.htm#array">array</a></tt>, <tt><a class="type" href="types.htm#hash">hash</a></tt>, <tt><a class="type" href="types.htm#set">set</a></tt>,
  <tt><span class="type">interface</span></tt> and <tt><span class="type">enum</span></tt> are realized as
  functions which return a type. E.g.: The type <tt><a class="type" href="types.htm#array">array</a></tt> is defined in the
  <tt><span class="lib">seed7_05.s7i</span></tt> library with the following header:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#type">type</a>: array (<span class="keywd">in</span> <a class="type_no_ul" href="types.htm#type">type</a>: baseType) <span class="keywd">is func</span>
</pre><p>
  User defined abstract data types are also possible.
</p><p>
  The initialization uses the creation operation ( ::= ).
  Explicit calls of the create operation are not needed.
</p><p>
  The lifetime of an object goes like this:
</p><ol><li>
  Memory is reserved for the new object (stack or heap memory
     make no difference here).
</li><li>
  The content of the new memory is undefined (It may contain
     garbage), therefore a create statement is necessary instead of
     an assignment.
</li><li>
  The create statements copies the right expression to the left
     expression taking into account that the left expression is
     undefined.
</li><li>
  If the object is variable other values can be assigned using
     the assign statement ( := ). The assignment can assume that the
     left expression contains a legal value. This allows that for
     strings (and some other types which are just references to a
     memory area) the memory containing the old string value (and
     not the memory of the object itself) can be freed when
     necessary.
</li><li>
  At the end of the lifetime of an object the destroy statement
     is executed. For strings (and some other types which are just
     references to a memory area) the memory containing the string
     value (and not the memory of the object itself) is freed.
</li><li>
  The memory of the object is freed.
</li></ol><p>
  The first three steps are usually hidden in the declaration
  statement. The expression
</p><pre class="indent">
ONE . ::= . 1
</pre><p>
  is executed to assign 1 to the object ONE. There are two
  reasons to use ::= instead of := to assign the initialization
  value.
</p><ol><li>
  The assignment ( := ) can only be used to assign a value
    to a variable and initialization is also needed for
    constants.
</li><li>
  Sometimes some initializations are needed for the new
    object in addition to the pure assignment.
</li></ol><p>
  For all predefined types the creation operator ( ::= )
  is already defined. To allow the declaration of objects of a
  new user defined type the constructor operation for this type
  must be defined.
</p>

<a name="Syntax_declarations"><h3>3.2 Syntax declarations</h3></a>
<p>
    Syntax declarations are used to specify the syntax, priority
  and associativity of operators, statements, declarations and
  other constructs. A syntax declaration which defines the
  <tt>'+'</tt> operator is:
</p><pre class="indent">
$ <span class="keywd">syntax</span> <a class="type" href="types.htm#expr">expr</a>: .(). + .()   <span class="keywd">is</span> ->  7;
</pre><p>
  Most syntax definitions can be found in the file <tt><a class="lib" href="../prg/syntax.htm">syntax.s7i</a></tt>.
  A detailed description of the syntax declarations can be
  found in <a class="link" href="syntax.htm">chapter 9 (Structured syntax definition)</a>
  There is also a hard coded syntax for function calls with
  a parenthesis enclosed parameter list where the parameters
  are separated by commas. The hard coded syntax is described
  in <a class="link" href="expr.htm">chapter 11 (Expressions)</a>.
  Here we use a more complex syntax description:
</p>

<a name="System_declarations"><h3>3.3 System declarations</h3></a>
<p>
    With system declarations the analyzer and the interpreter
  are informed about which objects should be used for various system
  internal purposes. An example of a system declaration is
</p><pre class="indent">
$ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> <a class="type_no_ul" href="types.htm#integer">integer</a>;
</pre><p>
  This defines that the type of all integer literals is <tt><a class="type" href="types.htm#integer">integer</a></tt>.
  Additionally <tt><a class="type" href="types.htm#integer">integer</a></tt> is used as type for all integers generated
  by primitive actions.
  There are different objects which are defined by a
  system declaration
</p><ul>
    <li>The types of literals and simple expressions for example:
        <tt><a class="type" href="types.htm#string">string</a></tt> for strings and <tt><a class="type" href="types.htm#integer">integer</a></tt> for integers</li>

    <li>Which objects should be used as result values for
      primitive actions for example:<dl><dd>
        <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> and <tt><a class="var" href="types.htm#void">empty</a></tt></dd></dl></li>

    <li>The EXCEPTIONS which are to be raised by
      primitive actions for example:<dl><dd>
        <tt><a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></tt> and <tt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></tt></dd></dl></li>

    <li>Which objects should be used for several implicit
      actions for example:<dl><dd>
        <tt>:=</tt> <tt>::=</tt> <tt><span class="func">destroy</span></tt> <tt><span class="func">write</span></tt> and <tt><span class="func">flush</span></tt></dd></dl></li>
</ul><p>
  The following system declarations exist
</p><pre class="indent">
$ <span class="keywd">system</span> <span class="stri">"expr"</span> <span class="keywd">is</span> <a class="type" href="types.htm#expr">expr</a>;
$ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> <a class="type" href="types.htm#integer">integer</a>;
$ <span class="keywd">system</span> <span class="stri">"bigInteger"</span> <span class="keywd">is</span> <a class="type" href="types.htm#bigInteger">bigInteger</a>;
$ <span class="keywd">system</span> <span class="stri">"char"</span> <span class="keywd">is</span> <a class="type" href="types.htm#char">char</a>;
$ <span class="keywd">system</span> <span class="stri">"string"</span> <span class="keywd">is</span> <a class="type" href="types.htm#string">string</a>;
$ <span class="keywd">system</span> <span class="stri">"proc"</span> <span class="keywd">is</span> <a class="type" href="types.htm#proc">proc</a>;
$ <span class="keywd">system</span> <span class="stri">"float"</span> <span class="keywd">is</span> <a class="type" href="types.htm#float">float</a>;

$ <span class="keywd">system</span> <span class="stri">"true"</span> <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>;
$ <span class="keywd">system</span> <span class="stri">"false"</span> <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>;
$ <span class="keywd">system</span> <span class="stri">"empty"</span> <span class="keywd">is</span> <a class="var" href="types.htm#void">empty</a>;

$ <span class="keywd">system</span> <span class="stri">"memory_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"numeric_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"overflow_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"range_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"index_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"file_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"database_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#DATABASE_ERROR">DATABASE_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"illegal_action"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#ILLEGAL_ACTION">ILLEGAL_ACTION</a>;

$ <span class="keywd">system</span> <span class="stri">"assign"</span> <span class="keywd">is</span> := ;
$ <span class="keywd">system</span> <span class="stri">"create"</span> <span class="keywd">is</span> ::= ;
$ <span class="keywd">system</span> <span class="stri">"destroy"</span> <span class="keywd">is</span> destroy;
$ <span class="keywd">system</span> <span class="stri">"ord"</span> <span class="keywd">is</span> ord;
$ <span class="keywd">system</span> <span class="stri">"in"</span> <span class="keywd">is</span> <span class="keywd">in</span>;
$ <span class="keywd">system</span> <span class="stri">"prot_outfile"</span> <span class="keywd">is</span> PROT_OUTFILE;
$ <span class="keywd">system</span> <span class="stri">"flush"</span> <span class="keywd">is</span> flush;
$ <span class="keywd">system</span> <span class="stri">"write"</span> <span class="keywd">is</span> write;
$ <span class="keywd">system</span> <span class="stri">"writeln"</span> <span class="keywd">is</span> writeln;
$ <span class="keywd">system</span> <span class="stri">"main"</span> <span class="keywd">is</span> main;
</pre>

<a name="Pragmas"><h3>3.4 Pragmas</h3></a>
<p>
    Pragmas specify how a program is processed. Like
  <a class="link" href="decls.htm#System_declarations">system declarations</a> pragmas are introduced with a dollar
  sign ($) followed by the name of the pragma. The following
  pragmas exist:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  
  <tr><th> pragma    </th><th> parameter        </th><th> comment                                       </th></tr>
  
  <tr><td> <tt>$ <span class="keywd">library</span></tt> </td><td> <tt><a class="type" href="types.htm#string">string</a></tt>           </td><td> Specify additional directory for *.s7i files. </td></tr>
  <tr><td> <tt>$ <span class="keywd">message</span></tt> </td><td> <tt><a class="type" href="types.htm#string">string</a></tt>           </td><td> Writes a message during parsing.              </td></tr>
  <tr><td> <tt>$ <span class="keywd">info</span></tt>    </td><td> <tt><span class="keywd">on</span></tt> or <tt><span class="keywd">off</span></tt>        </td><td> Switch compilation info on or off.            </td></tr>
  <tr><td> <tt>$ <span class="keywd">trace</span></tt>   </td><td> <tt><a class="type" href="types.htm#string">string</a></tt>           </td><td> Sets compile-time tracing flags.              </td></tr>
  <tr><td> <tt>$ <span class="keywd">decls</span></tt>   </td><td> -                </td><td> Traces the declarations.                      </td></tr>
  <tr><td> <tt>$ <span class="keywd">names</span></tt>   </td><td> <tt><span class="keywd">unicode</span></tt> or <tt><span class="keywd">ascii</span></tt> </td><td> Allows Unicode (or Ascii) identifiers.        </td></tr>
  
</table></dd></dl><p>
  An unknown pragma results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** pragma.sd7(1):7: <a class="link" href="errors.htm#ILLEGALPRAGMA">Illegal pragma "unknownPragma"</a>
$ unknownPragma
---------------^
</pre><p>
  The pragma <tt><span class="keywd">message</span></tt> can be used to write a message during
  parsing. To write <tt><span class="stri">"hello world"</span></tt> during parsing use:
</p><pre class="indent">
$ <span class="keywd">message</span> <span class="stri">"hello world"</span>;
</pre><p>
  The pragma <tt><span class="keywd">info</span></tt> can be used to change the verbosity level of
  the parsing phase. This overrules the <a class="link" href="../faq.htm#interpreter_option-v"><tt><b>-v</b><span class="keywd">n</span></tt></a> option of the
  <a class="link" href="../faq.htm#interpreter">interpreter</a>. With
</p><pre class="indent">
$ <span class="keywd">info</span> <span class="keywd">on</span>;
</pre><p>
  the parser writes information about library names and the
  number of the line currently processed. With
</p><pre class="indent">
$ <span class="keywd">info</span> <span class="keywd">off</span>;
</pre><p>
  no such information is written.
</p><p>
  The pragma <tt><span class="keywd">trace</span></tt> can be used to turn interpreter tracing
  on or off during the parsing of the program. This
  overrules the <a class="link" href="../faq.htm#interpreter_option-d"><tt><b>-d</b><span class="keywd">x</span></tt></a> option of the <a class="link" href="../faq.htm#interpreter">interpreter</a>. The <tt><a class="type" href="types.htm#string">string</a></tt>
  parameter of the <tt><span class="keywd">trace</span></tt> pragma allows a sequence of the
  characters <tt><span class="keywd">+</span></tt>, <tt><span class="keywd">-</span></tt>, <tt><span class="keywd">a</span></tt>, <tt><span class="keywd">c</span></tt>, <tt><span class="keywd">d</span></tt>, <tt><span class="keywd">e</span></tt>, <tt><span class="keywd">h</span></tt>, <tt><span class="keywd">m</span></tt>, <tt><span class="keywd">u</span></tt>, <tt><span class="keywd">s</span></tt> and <tt><span class="keywd">*</span></tt>. These
  characters have the following meaning:
</p><ul>
    <li><b>+</b> Turn the following flags on (default)</li>
    <li><b>-</b> Turn the following flags off</li>
    <li><b>a</b> Trace primitive actions</li>
    <li><b>c</b> Do action check</li>
    <li><b>d</b> Trace dynamic calls</li>
    <li><b>e</b> Trace exceptions and handlers</li>
    <li><b>h</b> Trace heap size (in combination with 'a')</li>
    <li><b>m</b> Trace matching of expressions</li>
    <li><b>u</b> Trace exec utility functions</li>
    <li><b>s</b> Trace signals</li>
    <li><b>*</b> All flags</li>
</ul><p>
  The pragma <tt><span class="keywd">names</span></tt> can be used to allow Unicode in
  <a class="link" href="tokens.htm#Name_identifiers">name identifiers</a>:
</p><pre class="indent">
$ <span class="keywd">names</span> <span class="keywd">unicode</span>;
</pre><p>
  This allows variables with e.g. German umlauts or Cyrillic letters. This way
  beginners can use variable and function names from their native language.
</p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="silver">
<td>&nbsp;<a class="navigation" href="../manual/tutorial.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/stats.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
