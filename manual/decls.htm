<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Declarations</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../scrshots/index.htm">Programs</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#DECLARATIONS"><big>Declarations</big></a>
<a class="menu" href="#Normal_declarations">Normal</a>
<a class="menu" href="#Syntax_declarations">Syntax</a>
<a class="menu" href="#System_declarations">System</a>
<a class="menu" href="#Pragmas">Pragmas</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Declarations</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/tutorial.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/stats.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="DECLARATIONS"><h2>3. DECLARATIONS</h2></a>

<p>
    A declaration specifies the identifier, type, and other aspects
  of language elements such as variables, constants and functions.
  In Seed7 everything must be declared before it is used. All
  declarations are introduced with a specific keyword and follow a
  common pattern. The keyword is followed by a type (in example code <span class="type">red</span> is used for types). In the table
  below <tt><span class="type"><b><i>aType</i></b></span></tt> is a placeholder for any <a class="link" href="types.htm">type</a>.
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  
  <tr><th> Declaration                              </th><th> Comment                                 </th></tr>
  
  <tr><td> <tt><a class="keywd_no_ul" href="#Variable_declarations">var</a> <span class="type"><b><i>aType</i></b></span>: name <span class="keywd">is</span> ...</tt>                   </td><td> A <a class="link" href="#Variable_declarations">variable declaration</a>                  </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="#Constant_declarations">const</a> <span class="type"><b><i>aType</i></b></span>: name <span class="keywd">is</span> ...</tt>                 </td><td> A <a class="link" href="#Constant_declarations">constant declaration</a>                  </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="params.htm#val_parameter">val</a> <span class="type"><b><i>aType</i></b></span>: name</tt>                          </td><td> Declaration of a <a class="link" href="params.htm#val_parameter">value-parameter</a>        </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <span class="type"><b><i>aType</i></b></span>: name</tt>                          </td><td> Declaration of a <a class="link" href="params.htm#ref_parameter">reference-parameter</a>    </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type"><b><i>aType</i></b></span>: name</tt>                           </td><td> Declaration of an <a class="link" href="params.htm#in_parameter">in-parameter</a>          </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="params.htm#in_var_parameter">in var</a> <span class="type"><b><i>aType</i></b></span>: name</tt>                       </td><td> Declaration of an <a class="link" href="params.htm#in_var_parameter">in-var-parameter</a>      </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a> <span class="type"><b><i>aType</i></b></span>: name</tt>                        </td><td> Declaration of an <a class="link" href="params.htm#inout_parameter">inout-parameter</a>       </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#func">func</a> <span class="type"><b><i>aType</i></b></span>: name</tt>                      </td><td> Declaration of a <a class="link" href="params.htm#call_by_name_parameter">call-by-name parameter</a> </td></tr>
  <tr><td> <tt><span class="keywd">const</span> <a class="type_no_ul" href="types.htm#type">type</a>: name <span class="keywd">is</span> ...</tt>                  </td><td> A <a class="link" href="#Type_declarations">type declaration</a>                      </td></tr>
  <tr><td> <tt><span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: name <span class="keywd">is</span> ...</tt>                  </td><td> A <a class="link" href="#Procedure_declarations">procedure declaration</a>                 </td></tr>
  <tr><td> <tt><span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <span class="type"><b><i>aType</i></b></span>: name <span class="keywd">is</span> ...</tt>            </td><td> A <a class="link" href="#Function_declarations">function declaration</a>                  </td></tr>
  <tr><td> <tt><span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#type">type</a>: name <span class="keywd">is</span> ...</tt>             </td><td> Declaration of an <a class="link" href="#Abstract_data_type">abstract data type</a>    </td></tr>
  <tr><td> <tt><span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: name (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#type">type</a>: <span class="type"><b><i>aType</i></b></span>) <span class="keywd">is</span> ...</tt> </td><td> Declaration of a <a class="link" href="#Template">template</a>               </td></tr>
  <tr><td> <tt><a class="keywd_no_ul" href="#Syntax_declarations">syntax</a> <a class="type_no_ul" href="types.htm#expr">expr</a>: pattern <span class="keywd">is</span> ...</tt>              </td><td> A <a class="link" href="#Syntax_declarations">syntax declaration</a>                    </td></tr>
  
</table></dd></dl><p></p>

<a name="Variable_declarations"><h3>3.1 Variable declarations</h3></a>
<p>
    A variable is a named place for a value. The value of a variable
  can be changed with an <a class="link" href="stats.htm#Assignment">assignment</a>. Variables must be declared
  before they can be used. E.g.:
</p><pre class="indent">
<span class="keywd">var</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: number <span class="keywd">is</span> 0;
</pre><p>
  This declares the <tt><a class="type" href="types.htm#integer">integer</a></tt> variable <tt>'number'</tt>. The variable is
  initialized with the value 0. Later the value of the variable can
  be changed with e.g.:
</p><pre class="indent">
number <a class="op_no_ul" href="stats.htm#Assignment">:=</a> 1;
</pre><p>
  Variables can only hold values of their type. An attempt to
  assign a value with the wrong type results in a compile error:
</p><pre class="indent">
*** tst545.sd7(7):52: <a name="NO_MATCH_example"></a><a class="link" href="errors.htm#NO_MATCH">Match for {number := "hello" } failed</a>
    number := "hello";
</pre><p></p>

<a name="Constant_declarations"><h3>3.2 Constant declarations</h3></a>
<p>
    A constant is a named value that cannot change during run-time.
  Constants must be declared before they can be used. E.g.:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#integer">integer</a>: ONE <span class="keywd">is</span> 1;
</pre><p>
  This declares the <tt><a class="type" href="types.htm#integer">integer</a></tt> constant <tt>'ONE'</tt> with the value 1.
  An attempt to change a constant results in an compile error:
</p><pre class="indent">
*** tst544.sd7(7):53: <a class="link" href="errors.htm#WRONGACCESSRIGHT">Variable expected in {ONE := 2 } found constant integer: ONE</a>
    ONE := 2;
</pre><p></p>

<a name="Type_declarations"><h4>3.2.1 Type declarations</h4></a>
<p>
    Type declarations define a name for a type. Type declarations
  are done as constant declarations where the type of the declared
  constant is <tt><a class="type" href="types.htm#type">type</a></tt>. E.g.:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#type">type</a>: myChar <span class="keywd">is</span> <a class="type_no_ul" href="types.htm#char">char</a>;
</pre><p>
  Afterwards the new type can be used in other declarations. E.g.:
</p><pre class="indent">
<span class="keywd">var</span> <span class="type">myChar</span>: aChar <span class="keywd">is</span> <a class="stri" href="tokens.htm#Char_literals">'x'</a>;
</pre><p></p>

<a name="Procedure_declarations"><h4>3.2.2 Procedure declarations</h4></a>
<p>
    The code of a procedure does not change at run-time.
  Thus procedures are declared with a constant declaration:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: helloWorld <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(<a class="stri" href="tokens.htm#String_literals">"hello world"</a>);
  <span class="keywd">end func</span>;
</pre><p>
  Local declarations can be added to a procedure with the
  keyword <tt><span class="keywd">local</span></tt>. E.g.:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: helloWorld <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#string">string</a>: greeting <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">"hello world"</a>;
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(greeting);
  <span class="keywd">end func</span>;
</pre><p>
  A procedure with a parameter (<tt>greeting</tt>) is defined with:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: hello (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#string">string</a>: greeting) <span class="keywd">is func</span>
  <span class="keywd">begin</span>
    <a class="func_no_ul" href="../libraries/stdio.htm#writeln(in_string)">writeln</a>(greeting);
  <span class="keywd">end func</span>;
</pre><p>
  Procedure and function parameters are explained in <a class="link" href="syntax.htm">chapter 6
  (PARAMETERS)</a>.
</p>

<a name="Function_declarations"><h4>3.2.3 Function declarations</h4></a>
<p>
    Like with procedures the code of a function does not change
  at run-time. Thus functions are also declared with a constant
  declaration:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: flipCoin <span class="keywd">is</span>
  <span class="keywd">return</span> <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>);
</pre><p>
  Note that <tt>return</tt> is not a statement. Instead <tt>return</tt> is a
  shortcut for a function declaration with a result variable:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: flipCoin <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: coinState <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>;
  <span class="keywd">begin</span>
    coinState <a class="op_no_ul" href="stats.htm#Assignment">:=</a> <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre><p>
  The keyword <tt>local</tt> allows the introduction of local
  declarations:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#string">string</a>: alphabet <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: abc <span class="keywd">is</span> <a class="stri" href="tokens.htm#String_literals">""</a>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type_no_ul" href="types.htm#char">char</a>: ch <span class="keywd">is</span> <a class="stri" href="tokens.htm#Char_literals">' '</a>;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="stats.htm#for-statement">for</a> ch <a class="keywd_no_ul" href="stats.htm#for-statement">range</a> <a class="stri" href="tokens.htm#Char_literals">'a'</a> <a class="keywd_no_ul" href="stats.htm#for-statement">to</a> <a class="stri" href="tokens.htm#Char_literals">'z'</a> <a class="keywd_no_ul" href="stats.htm#for-statement">do</a>
      abc <a class="op_no_ul" href="../libraries/string.htm#(inout_string)&:=(in_char)">&:=</a> ch;
    <a class="keywd_no_ul" href="stats.htm#for-statement">end</a> <a class="keywd_no_ul" href="stats.htm#for-statement">for</a>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre><p>
  A function with a parameter (<tt>number</tt>) is defined with:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#float">float</a>: inverse (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#float">float</a>: number) <span class="keywd">is</span>
  <span class="keywd">return</span> 1 <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> number;
</pre>
  Procedure and function parameters are explained in <a class="link" href="syntax.htm">chapter 6
  (PARAMETERS)</a>.
</p>

<a name="Abstract_data_type"><h4>3.2.4 Abstract data type</h4></a>
<p>
    An abstract data type is a type that requires additional
  information. E.g.: The abstract data type <tt><a class="type" href="types.htm#array">array</a></tt> requires
  the type of the array elements as additional information.
  Predefined abstract data types are <tt><a class="type" href="types.htm#array">array</a></tt>, <tt><span class="type">subtype</span></tt>, <tt><a class="type" href="types.htm#struct">struct</a></tt>,
  <tt><span class="type">subrange</span></tt>, <tt><a class="type" href="types.htm#hash">hash</a></tt>, <tt><a class="type" href="types.htm#set">set</a></tt>, <tt><span class="type">interface</span></tt> and <tt><span class="type">enum</span></tt>. The
  definition of the predefined abstract data type <tt><a class="type" href="types.htm#array">array</a></tt> in the
  library <a class="lib" href="../libraries/array.htm">array.s7i</a> starts with:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#func">func</a> <a class="type_no_ul" href="types.htm#type">type</a>: array (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#type">type</a>: baseType) <span class="keywd">is</span> ...
</pre><p>
  The parameter <tt><span class="type">baseType</span></tt> specifies the type of the <tt><a class="type" href="types.htm#array">array</a></tt>
  elements. The abstract data type <tt><a class="type" href="types.htm#array">array</a></tt> can be used in
  declarations:
</p><pre class="indent">
<span class="keywd">var</span> <a class="type_no_ul" href="types.htm#array">array</a> <a class="type_no_ul" href="types.htm#integer">integer</a>: numbers <span class="keywd">is</span> [] (1);
</pre><p>
  Other abstract data types are declared similar to the
  declaration of <tt><a class="type" href="types.htm#array">array</a></tt>.
</p><p>
  User defined abstract data types are also possible.
</p>

<a name="Template"><h4>3.2.5 Template</h4></a>
<p>
    Templates do declarations for a given type. Templates are
  executed at compile-time. The function <tt>FOR_ENUM_DECLS</tt> from
  the library <a class="lib" href="../libraries/forloop.htm">forloop.s7i</a> defines a for-loop that loops over
  all values of a given enumeration type:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: FOR_ENUM_DECLS (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#type">type</a>: <span class="type">aType</span>) <span class="keywd">is func</span>
  <span class="keywd">begin</span>

    <span class="keywd">const</span> <a class="type_no_ul" href="types.htm#proc">proc</a>: for (<a class="keywd_no_ul" href="params.htm#inout_parameter">inout</a> <span class="type">aType</span>: variable) range (<span class="keywd">attr</span> <span class="type">aType</span>) do
        (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="types.htm#proc">proc</a>: statements) end for <span class="keywd">is func</span>
      <span class="keywd">begin</span>
        <span class="keywd">for</span> variable <span class="keywd">range</span> aType.first <span class="keywd">to</span> aType.last <span class="keywd">do</span>
          statements;
        <span class="keywd">end for</span>;
      <span class="keywd">end func</span>;

  <span class="keywd">end func</span>;
</pre><p>
  The template <tt>FOR_ENUM_DECLS</tt> is invoked in the library
  <a class="lib" href="../libraries/enumeration.htm">enumeration.s7i</a> with:
</p><pre class="indent">
FOR_ENUM_DECLS(enumType);
</pre><p></p>

<a name="Initialization"><h3>3.3 Initialization</h3></a>
<p>
    Each object declared with a <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt> declaration obtains
  an initial value. It is not possible to use <tt>'<span class="keywd">const</span>'</tt> or <tt>'<span class="keywd">var</span>'</tt>
  declarations without initial value. The type of the initial value
  must fit to the type of the variable or constant. A compile error
  is triggered if this is not the case:
</p><pre class="indent">
*** tst546.sd7(3):52: <a class="link" href="errors.htm#NO_MATCH">Match for {number ::= ' ' } failed</a>
var integer: number is ' ';
---------------------------^
*** tst546.sd7(3):32: <a name="DECL_FAILED_example"></a><a class="link" href="errors.htm#DECL_FAILED">Declaration of "number" failed</a>
var integer: number is ' ';
</pre><p>
  Expressions can be used as initial value. E.g.:
</p><pre class="indent">
<span class="keywd">var</span> <a class="type_no_ul" href="types.htm#string">string</a>: fileName <span class="keywd">is</span> NAME <a class="op_no_ul" href="../libraries/string.htm#(in_string)&(in_string)">&amp;</a> <span class="stri">".txt"</span>;
</pre><p>
  The expression is evaluated and the result is assigned to the
  new object. This is done at compile-time by the interpreter or
  compiler. The initialization expressions may contain any function
  (or operator) call. That way user defined functions can also be
  used to initialize a constant or variable:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type_no_ul" href="types.htm#boolean">boolean</a>: maybe <span class="keywd">is</span> flipCoin;
</pre><p></p>

<a name="How_the_initialization_works"><h4>3.3.1 How the initialization works</h4></a>
<p>
    The initialization of variables and constants is done at
  compile-time. The initialization uses the create statement
  ( <tt><span class="op">::=</span></tt> ). Note that <tt><span class="op">::=</span></tt> is used internally by the interpreter
  and compiler. Explicit calls of <tt><span class="op">::=</span></tt> in user programs are not
  needed. A create statement is similar to an assignment ( <tt><span class="op">:=</span></tt> ),
  but with two important differences:
</p><ol><li>
  Assignments can assume that the destination has a legal value.
     Create statements assume that the destination has an undefined
     value. A create statement needs to do all the initializations
     necessary.
</li><li>
  Assignments can only be used to assign a value to a variable.
     Create statements are not restricted to variables. Interpreter
     and compiler use <tt><span class="op">::=</span></tt> to initialize constants.
</li></ol><p>
  The lifetime of an object goes like this:
</p><ol><li>
  Memory is reserved for the new object (stack or heap memory
     make no difference here).
</li><li>
  The content of the new memory is undefined (It may contain
     garbage), therefore a create statement is necessary instead of
     an assignment.
</li><li>
  The create statement ( <tt><span class="op">::=</span></tt> ) copies the right expression
     to the left expression taking into account that the left
     expression is undefined.
</li><li>
  If the object is a variable other values can be assigned using
     the assignment statement ( <tt><span class="op">:=</span></tt> ). The assignment can assume that
     the destination contains a legal value.
</li><li>
  Strings (and some other types) are just references to a memory
     area where the data resides. These references are the sole
     owner of the memory area. This allows that an assignment
     can reallocate the memory area.
</li><li>
  At the end of the lifetime of an object the destroy statement
     is executed. For strings (and some other types which are just
     references to a memory area) the referenced memory is freed.
</li><li>
  The memory of the object is freed.
</li></ol><p>
  The first three steps are usually hidden in the declaration
  statement. The expression
</p><pre class="indent">
ONE . ::= . 1
</pre><p>
  is executed to assign 1 to the object ONE.
</p><p>
  For all predefined types the create statement ( ::= ) is
  already defined. To allow the declaration of objects of a
  new user defined type the create statement for this type
  must be defined.
</p>

<a name="Syntax_declarations"><h3>3.4 Syntax declarations</h3></a>
<p>
    Syntax declarations are used to specify the syntax, priority
  and associativity of operators, statements, declarations and
  other constructs. A syntax declaration which defines the
  <tt>'+'</tt> operator is:
</p><pre class="indent">
$ <span class="keywd">syntax</span> <a class="type" href="types.htm#expr">expr</a>: .(). + .()   <span class="keywd">is</span> ->  7;
</pre><p>
  Most syntax definitions can be found in the file <tt><a class="lib" href="../prg/syntax.htm">syntax.s7i</a></tt>.
  A detailed description of the syntax declarations can be
  found in <a class="link" href="syntax.htm">chapter 9 (Structured syntax definition)</a>
  There is also a hard coded syntax for function calls with
  a parenthesis enclosed parameter list where the parameters
  are separated by commas. The hard coded syntax is described
  in <a class="link" href="expr.htm">chapter 11 (Expressions)</a>.
  Here we use a more complex syntax description:
</p>

<a name="System_declarations"><h3>3.5 System declarations</h3></a>
<p>
    With system declarations the analyzer and the interpreter
  are informed about which objects should be used for various system
  internal purposes. An example of a system declaration is
</p><pre class="indent">
$ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> <a class="type_no_ul" href="types.htm#integer">integer</a>;
</pre><p>
  This defines that the type of all integer literals is <tt><a class="type" href="types.htm#integer">integer</a></tt>.
  Additionally <tt><a class="type" href="types.htm#integer">integer</a></tt> is used as type for all integers generated
  by primitive actions.
  There are different objects which are defined by a
  system declaration
</p><ul>
    <li>The types of literals and simple expressions for example:
        <tt><a class="type" href="types.htm#string">string</a></tt> for strings and <tt><a class="type" href="types.htm#integer">integer</a></tt> for integers</li>

    <li>Which objects should be used as result values for
      primitive actions for example:<dl><dd>
        <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>, <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt> and <tt><a class="var" href="types.htm#void">empty</a></tt></dd></dl></li>

    <li>The EXCEPTIONS which are to be raised by
      primitive actions for example:<dl><dd>
        <tt><a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a></tt> and <tt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></tt></dd></dl></li>

    <li>Which objects should be used for several implicit
      actions for example:<dl><dd>
        <tt>:=</tt> <tt>::=</tt> <tt><span class="func">destroy</span></tt> <tt><span class="func">write</span></tt> and <tt><span class="func">flush</span></tt></dd></dl></li>
</ul><p>
  The following system declarations exist
</p><pre class="indent">
$ <span class="keywd">system</span> <span class="stri">"expr"</span> <span class="keywd">is</span> <a class="type" href="types.htm#expr">expr</a>;
$ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> <a class="type" href="types.htm#integer">integer</a>;
$ <span class="keywd">system</span> <span class="stri">"bigInteger"</span> <span class="keywd">is</span> <a class="type" href="types.htm#bigInteger">bigInteger</a>;
$ <span class="keywd">system</span> <span class="stri">"char"</span> <span class="keywd">is</span> <a class="type" href="types.htm#char">char</a>;
$ <span class="keywd">system</span> <span class="stri">"string"</span> <span class="keywd">is</span> <a class="type" href="types.htm#string">string</a>;
$ <span class="keywd">system</span> <span class="stri">"proc"</span> <span class="keywd">is</span> <a class="type" href="types.htm#proc">proc</a>;
$ <span class="keywd">system</span> <span class="stri">"float"</span> <span class="keywd">is</span> <a class="type" href="types.htm#float">float</a>;

$ <span class="keywd">system</span> <span class="stri">"true"</span> <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>;
$ <span class="keywd">system</span> <span class="stri">"false"</span> <span class="keywd">is</span> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>;
$ <span class="keywd">system</span> <span class="stri">"empty"</span> <span class="keywd">is</span> <a class="var" href="types.htm#void">empty</a>;

$ <span class="keywd">system</span> <span class="stri">"memory_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"numeric_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"overflow_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"range_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"index_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"file_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#FILE_ERROR">FILE_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"database_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#DATABASE_ERROR">DATABASE_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"graphic_error"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#GRAPHIC_ERROR">GRAPHIC_ERROR</a>;
$ <span class="keywd">system</span> <span class="stri">"illegal_action"</span> <span class="keywd">is</span> <a class="exception" href="errors.htm#ILLEGAL_ACTION">ILLEGAL_ACTION</a>;

$ <span class="keywd">system</span> <span class="stri">"assign"</span> <span class="keywd">is</span> := ;
$ <span class="keywd">system</span> <span class="stri">"create"</span> <span class="keywd">is</span> ::= ;
$ <span class="keywd">system</span> <span class="stri">"destroy"</span> <span class="keywd">is</span> destroy;
$ <span class="keywd">system</span> <span class="stri">"ord"</span> <span class="keywd">is</span> ord;
$ <span class="keywd">system</span> <span class="stri">"in"</span> <span class="keywd">is</span> <span class="keywd">in</span>;
$ <span class="keywd">system</span> <span class="stri">"prot_outfile"</span> <span class="keywd">is</span> PROT_OUTFILE;
$ <span class="keywd">system</span> <span class="stri">"flush"</span> <span class="keywd">is</span> flush;
$ <span class="keywd">system</span> <span class="stri">"write"</span> <span class="keywd">is</span> write;
$ <span class="keywd">system</span> <span class="stri">"writeln"</span> <span class="keywd">is</span> writeln;
$ <span class="keywd">system</span> <span class="stri">"main"</span> <span class="keywd">is</span> main;
</pre>

<a name="Pragmas"><h3>3.6 Pragmas</h3></a>
<p>
    Pragmas specify how a program is processed. Like
  <a class="link" href="decls.htm#System_declarations">system declarations</a> pragmas are introduced with a dollar
  sign ($) followed by the name of the pragma. The following
  pragmas exist:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  
  <tr><th> pragma    </th><th> parameter        </th><th> comment                                       </th></tr>
  
  <tr><td> <tt>$ <span class="keywd">library</span></tt> </td><td> <tt><a class="type" href="types.htm#string">string</a></tt>           </td><td> Specify additional directory for *.s7i files. </td></tr>
  <tr><td> <tt>$ <span class="keywd">message</span></tt> </td><td> <tt><a class="type" href="types.htm#string">string</a></tt>           </td><td> Writes a message during parsing.              </td></tr>
  <tr><td> <tt>$ <span class="keywd">info</span></tt>    </td><td> <tt><span class="keywd">on</span></tt> or <tt><span class="keywd">off</span></tt>        </td><td> Switch compilation info on or off.            </td></tr>
  <tr><td> <tt>$ <span class="keywd">trace</span></tt>   </td><td> <tt><a class="type" href="types.htm#string">string</a></tt>           </td><td> Sets compile-time tracing flags.              </td></tr>
  <tr><td> <tt>$ <span class="keywd">decls</span></tt>   </td><td> -                </td><td> Traces the declarations.                      </td></tr>
  <tr><td> <tt>$ <span class="keywd">names</span></tt>   </td><td> <tt><span class="keywd">unicode</span></tt> or <tt><span class="keywd">ascii</span></tt> </td><td> Allows Unicode (or Ascii) identifiers.        </td></tr>
  
</table></dd></dl><p>
  An unknown pragma results in a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** pragma.sd7(1):7: <td><a name="ILLEGALPRAGMA_example"></a><a class="link" href="errors.htm#ILLEGALPRAGMA">Illegal pragma "unknownPragma"</a>
$ unknownPragma
---------------^
</pre><p>
  The pragma <tt><span class="keywd">message</span></tt> can be used to write a message during
  parsing. To write <tt><span class="stri">"hello world"</span></tt> during parsing use:
</p><pre class="indent">
$ <span class="keywd">message</span> <span class="stri">"hello world"</span>;
</pre><p>
  The pragma <tt><span class="keywd">info</span></tt> can be used to change the verbosity level of
  the parsing phase. This overrules the <a class="link" href="../faq.htm#interpreter_option-v"><tt><b>-v</b><span class="keywd">n</span></tt></a> option of the
  <a class="link" href="../faq.htm#interpreter">interpreter</a>. With
</p><pre class="indent">
$ <span class="keywd">info</span> <span class="keywd">on</span>;
</pre><p>
  the parser writes information about library names and the
  number of the line currently processed. With
</p><pre class="indent">
$ <span class="keywd">info</span> <span class="keywd">off</span>;
</pre><p>
  no such information is written.
</p><p>
  The pragma <tt><span class="keywd">trace</span></tt> can be used to turn interpreter tracing
  on or off during the parsing of the program. This
  overrules the <a class="link" href="../faq.htm#interpreter_option-d"><tt><b>-d</b><span class="keywd">x</span></tt></a> option of the <a class="link" href="../faq.htm#interpreter">interpreter</a>. The <tt><a class="type" href="types.htm#string">string</a></tt>
  parameter of the <tt><span class="keywd">trace</span></tt> pragma allows a sequence of the
  characters <tt><span class="keywd">+</span></tt>, <tt><span class="keywd">-</span></tt>, <tt><span class="keywd">a</span></tt>, <tt><span class="keywd">c</span></tt>, <tt><span class="keywd">d</span></tt>, <tt><span class="keywd">e</span></tt>, <tt><span class="keywd">h</span></tt>, <tt><span class="keywd">m</span></tt>, <tt><span class="keywd">u</span></tt>, <tt><span class="keywd">s</span></tt> and <tt><span class="keywd">*</span></tt>. These
  characters have the following meaning:
</p><ul>
    <li><b>+</b> Turn the following flags on (default)</li>
    <li><b>-</b> Turn the following flags off</li>
    <li><b>a</b> Trace primitive actions</li>
    <li><b>c</b> Do action check</li>
    <li><b>d</b> Trace dynamic calls</li>
    <li><b>e</b> Trace exceptions and handlers</li>
    <li><b>h</b> Trace heap size (in combination with 'a')</li>
    <li><b>m</b> Trace matching of expressions</li>
    <li><b>u</b> Trace exec utility functions</li>
    <li><b>s</b> Trace signals</li>
    <li><b>*</b> All flags</li>
</ul><p>
  The pragma <tt><span class="keywd">names</span></tt> can be used to allow Unicode in
  <a class="link" href="tokens.htm#Name_identifiers">name identifiers</a>:
</p><pre class="indent">
$ <span class="keywd">names</span> <span class="keywd">unicode</span>;
</pre><p>
  This allows variables with e.g. German umlauts or Cyrillic letters. This way
  beginners can use variable and function names from their native language.
</p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/tutorial.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/stats.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
