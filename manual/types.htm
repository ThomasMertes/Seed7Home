<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Predefined types</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#PREDEFINED_TYPES"><big>Types</big></a>
<a class="menu" href="#boolean">boolean</a>
<a class="menu" href="#integer">integer</a>
<a class="menu" href="#bigInteger">bigInteger</a>
<a class="menu" href="#rational">rational</a>
<a class="menu" href="#bigRational">bigRational</a>
<a class="menu" href="#float">float</a>
<a class="menu" href="#complex">complex</a>
<a class="menu" href="#char">char</a>
<a class="menu" href="#string">string</a>
<a class="menu" href="#array">array</a>
<a class="menu" href="#hash">hash</a>
<a class="menu" href="#set">set</a>
<a class="menu" href="#struct">struct</a>
<a class="menu" href="#enumeration">enumeration</a>
<a class="menu" href="#bin64">bin64</a>
<a class="menu" href="#bin32">bin32</a>
<a class="menu" href="#bstring">bstring</a>
<a class="menu" href="#color">color</a>
<a class="menu" href="#time">time</a>
<a class="menu" href="#duration">duration</a>
<a class="menu" href="#file">file</a>
<a class="menu" href="#text">text</a>
<a class="menu" href="#fileSys">fileSys</a>
<a class="menu" href="#database">database</a>
<a class="menu" href="#sqlStatement">sqlStatement</a>
<a class="menu" href="#process">process</a>
<a class="menu" href="#category">category</a>
<a class="menu" href="#reference">reference</a>
<a class="menu" href="#ref_list">ref_list</a>
<a class="menu" href="#structElement">structElement</a>
<a class="menu" href="#program">program</a>
<a class="menu" href="#ptr">ptr</a>
<a class="menu" href="#func">func</a>
<a class="menu" href="#varfunc">varfunc</a>
<a class="menu" href="#void">void</a>
<a class="menu" href="#proc">proc</a>
<a class="menu" href="#creator">creator</a>
<a class="menu" href="#destroyer">destroyer</a>
<a class="menu" href="#type">type</a>
<a class="menu" href="#object">object</a>
<a class="menu" href="#expr">expr</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Types</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/stats.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/params.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="PREDEFINED_TYPES"><h2>5. PREDEFINED TYPES</h2></a>

<p>
    In the following sub-chapters the predefined types of the
  standard library are introduced. The operators have, if not
  stated otherwise, the type described in the sub-chapter as
  parameter type and result type. The relations have also the
  type described in the sub-chapter as parameter type and
  a result of type <tt><a class="type" href="#boolean">boolean</a></tt>. In the descriptions <tt><b>&rArr;</b></tt> is used
  to show an equivalent expression.
</p>

<a name="boolean"><h3>5.1 boolean</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/boolean.htm#boolean">boolean</a></tt> consists of the two truth values
  <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt> and <tt><a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a></tt>. The <tt><a class="type" href="../libraries/boolean.htm#boolean">boolean</a></tt> functions are defined in
  the library <span class="stri">"<a class="lib" href="../libraries/boolean.htm">boolean.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/boolean.htm#boolean">boolean</a>.<a class="var" href="../libraries/boolean.htm#(attr_boolean)._value">value</a>  Default value of <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> (<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>)
      <a class="type" href="../libraries/boolean.htm#boolean">boolean</a>.<a class="var" href="../libraries/boolean.htm#(attr_boolean)._first">first</a>  Minimum value of <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> (<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>)
      <a class="type" href="../libraries/boolean.htm#boolean">boolean</a>.<a class="var" href="../libraries/boolean.htm#(attr_boolean)._last">last</a>   Maximum value of <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> (<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>)
    Prefix operators:
      <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a>       Negation
                  ( <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> )
    Infix operators:
      <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a>       Logical and
                  ( <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> B <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> else )
      <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>        Inclusive logical or
                  ( <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> B <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> else )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/boolean.htm#boolean">boolean</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)conv(in_integer)">conv</a> 0 <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)conv(in_integer)">conv</a> 1 <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> )
      <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/boolean.htm#boolean">boolean</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)parse(in_string)">parse</a> <span class="stri">"FALSE"</span> <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)parse(in_string)">parse</a> <span class="stri">"TRUE"</span> <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)parse(in_string)">parse</a> <span class="stri">"TRUE "</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="type" href="../libraries/boolean.htm#boolean">boolean</a> <a class="op" href="../libraries/boolean.htm#(attr_boolean)parse(in_string)">parse</a> <span class="stri">"ASDF"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/boolean.htm#(in_boolean)=(in_boolean)">=</a>, <a class="op" href="../libraries/boolean.htm#(in_boolean)<&gt;(in_boolean)">&lt;></a>, <a class="op" href="../libraries/boolean.htm#(in_boolean)<(in_boolean)">&lt;</a>, <a class="op" href="../libraries/boolean.htm#(in_boolean)&lt;=(in_boolean)">&lt;=</a>, <a class="op" href="../libraries/boolean.htm#(in_boolean)&gt;(in_boolean)">></a>, <a class="op" href="../libraries/boolean.htm#(in_boolean)&gt;=(in_boolean)">>=</a>
                  ( A relation B <b>&rArr;</b>
                    ord(A) relation ord(B) )
    Functions:
      <a class="func" href="../libraries/boolean.htm#ord(in_boolean)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/boolean.htm#ord(in_boolean)">ord</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/boolean.htm#ord(in_boolean)">ord</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/boolean.htm#integer(in_boolean)">integer</a>(A) Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/boolean.htm#integer(in_boolean)">integer</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/boolean.htm#integer(in_boolean)">integer</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/boolean.htm#succ(ref_boolean)">succ</a>(A)   Successor
                  ( <a class="func" href="../libraries/boolean.htm#succ(ref_boolean)">succ</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <a class="func" href="../libraries/boolean.htm#succ(ref_boolean)">succ</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/boolean.htm#pred(ref_boolean)">pred</a>(A)   Predecessor
                  ( <a class="func" href="../libraries/boolean.htm#pred(ref_boolean)">pred</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
                    <a class="func" href="../libraries/boolean.htm#pred(ref_boolean)">pred</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a class="func" href="../libraries/boolean.htm#boolean(in_integer)">boolean</a>(A) Convert an <a class="type" href="#integer">integer</a> to a boolean value
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_integer)">boolean</a>(0) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_integer)">boolean</a>(1) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_integer)">boolean</a>(2) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_integer)">boolean</a>(-1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>(A) Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/boolean.htm#boolean">boolean</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>(<span class="stri">"FALSE"</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>(<span class="stri">"TRUE"</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>(<span class="stri">"TRUE "</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>(<span class="stri">"true"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="func" href="../libraries/boolean.htm#boolean(in_string)">boolean</a>(<span class="stri">"ASDF"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/boolean.htm#str(in_boolean)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/boolean.htm#str(in_boolean)">str</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> <span class="stri">"FALSE"</span>,
                    <a class="func" href="../libraries/boolean.htm#str(in_boolean)">str</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> <span class="stri">"TRUE"</span> )
      <a class="func" href="../libraries/boolean.htm#literal(in_boolean)">literal</a>(A) Convert a boolean value to a boolean literal.
                  ( Type of result: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/boolean.htm#literal(in_boolean)">literal</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> <span class="stri">"FALSE"</span>,
                    <a class="func" href="../libraries/boolean.htm#literal(in_boolean)">literal</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> <span class="stri">"TRUE"</span> )
      <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(A, B) Random value in the range [A, B]
                 The random values are uniform distributed.
                  ( <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(A, B) returns a random value such that
                    A &lt;= <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(A, B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(A, B) &lt;= B holds.
                    <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(A, A) <b>&rArr;</b> A,
                    <a class="func" href="../libraries/boolean.htm#rand(in_boolean,in_boolean)">rand</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>, <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/boolean.htm#compare(in_boolean,in_boolean)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/boolean.htm#compare(in_boolean,in_boolean)">compare</a>(<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> -1,
                    <a class="func" href="../libraries/boolean.htm#compare(in_boolean,in_boolean)">compare</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>, <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/boolean.htm#compare(in_boolean,in_boolean)">compare</a>(<a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>, <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/boolean.htm#hashCode(in_boolean)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/boolean.htm#incr(inout_boolean)">incr</a>(A)   Increment
                  ( <a class="func" href="../libraries/boolean.htm#incr(inout_boolean)">incr</a>(A) <b>&rArr;</b> A:=succ(A) )
      <a class="func" href="../libraries/boolean.htm#decr(inout_boolean)">decr</a>(A)   Decrement
                  ( <a class="func" href="../libraries/boolean.htm#decr(inout_boolean)">decr</a>(A) <b>&rArr;</b> A:=pred(A) )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p>

    The logical operators <tt><a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a></tt> and <tt><a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a></tt> work strictly left
  to right. First they evaluate the left operand and then
  the right operand. If the result of the operation can be
  determined after evaluation of the left operand the right
  operand is not evaluated. This can be used to check for
  a boundary in a boolean expression. Naturally side effects
  of the right operand of the <tt><a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a></tt> and <tt><a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a></tt> operator only
  take place when the operand is executed.

</p><p>
  Table for the behavior of different boolean expressions:
</p><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th rowspan="2"> Expression                  </th><th align="center" colspan="2">  Result when the first  
      operand evaluates to   </th></tr>
    
    <tr><th align="center">   <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>    </th><th align="center">    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>    </th></tr>
    
    <tr><td> <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A                       </td><td align="center">    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>    </td><td align="center">   <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>    </td></tr>
    
    <tr><td> A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> B  <b>respectively</b><br />       
     <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a>((<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A)<a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>(<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B))       </td><td align="center">   <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>    </td><td align="center">     B      </td></tr>
    
    <tr><td> A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>  B  <b>respectively</b><br />       
     <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a>((<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A)<a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a>(<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B))      </td><td align="center">     B      </td><td align="center">    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>    </td></tr>
    
    <tr><td> A >  B  <b>respectively</b><br />        
     A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a>(<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B)                </td><td align="center">   <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>    </td><td align="center">   <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B    </td></tr>
    
    <tr><td> A >= B  <b>respectively</b><br />        
     A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>(<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B)                 </td><td align="center">   <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B    </td><td align="center">    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>    </td></tr>
    
    <tr><td> A &lt;  B  <b>respectively</b><br />        
     (<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A)<a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> B                </td><td align="center">     B      </td><td align="center">   <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>    </td></tr>
    
    <tr><td> A &lt;= B  <b>respectively</b><br />        
     (<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A)<a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> B                 </td><td align="center">    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>    </td><td align="center">     B      </td></tr>
    
    <tr><td> <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> (A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> B)  <b>respectively</b><br /> 
     (<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A)<a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>(<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B)            </td><td align="center">    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>    </td><td align="center">   <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B    </td></tr>
    
    <tr><td> <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> (A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a> B)  <b>respectively</b><br />  
     (<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> A)<a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a>(<a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B)           </td><td align="center">   <a class="op" href="../libraries/boolean.htm#not(in_boolean)">not</a> B    </td><td align="center">   <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>    </td></tr>
    
</table></dd></dl><p>

  Optimizing boolean expressions:
</p><p>
    If the result of a boolean expression can be
  determined at compile time, the expression can be
  replaced by a constant. Additionally the following
  equations can be used:
</p><pre class="box">
    (A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>  B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> (A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>  C)  =  A <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>  (B <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> C)
    (A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> B) <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>  (A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> C)  =  A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> (B <a class="op" href="../libraries/boolean.htm#(in_boolean)or(ref_func_boolean)">or</a>  C)
</pre><p></p>

<a name="integer"><h3>5.2 integer</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/integer.htm#integer">integer</a></tt> consists of signed 64-bit integer
  numbers. An integer <a class="link" href="tokens.htm#Integer_literals">integer literal</a> is a sequence of digits
  which is taken to be decimal. The sequence of digits may be
  followed by the letter E or e an optional + sign and a
  decimal exponent. <a name="based_integer"></a>Based numbers can be specified when the
  sequence of digits is followed by the # character and a
  sequence of extended digits. The decimal number in front of
  the # character specifies the base of the number which
  follows the # character. As base a number between 2 and 36
  is allowed. As extended digits the letters A or a can be
  used for 10, B or b can be used for 11 and so on to Z or z
  which can be used as 35. Examples of <tt><a class="type" href="../libraries/integer.htm#integer">integer</a></tt> literals are:
</p><pre class="box">
    0   2147483647   1E6   2e+9   16#c0   16#FFFF   8#177777   2#1010101010
</pre><p>
  If an <tt><a class="type" href="../libraries/integer.htm#integer">integer</a></tt> operation <a class="link" href="errors.htm#OVERFLOW_ERROR">overflows</a> it raises the exception
  <tt><a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt>. The <tt><a class="type" href="../libraries/integer.htm#integer">integer</a></tt> functions are defined
  in the library <span class="stri">"<a class="lib" href="../libraries/integer.htm">integer.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._value">value</a>  Default value of <a class="type" href="../libraries/integer.htm#integer">integer</a> (0)
      <a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>  Minimum value of <a class="type" href="../libraries/integer.htm#integer">integer</a> (-9223372036854775808)
      <a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a>   Maximum value of <a class="type" href="../libraries/integer.htm#integer">integer</a> (9223372036854775807)
    Prefix operators:
      <a class="op" href="../libraries/integer.htm#+(in_integer)">+</a>         Identity
      <a class="op" href="../libraries/integer.htm#-(in_integer)">-</a>         Change sign
      <a class="op" href="../libraries/integer.htm#!(in_integer)">!</a>         Factorial
    Infix operators:
      <a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a>         Addition
      <a class="op" href="../libraries/integer.htm#(in_integer)-(in_integer)">-</a>         Subtraction
      <a class="op" href="../libraries/integer.htm#(in_integer)*(in_integer)">*</a>         Multiplication
      <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a>       Integer division truncated towards zero
                  ( A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B <b>&rArr;</b> trunc(float(A) / float(B)),
                    A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> 0 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a>       Reminder of integer division <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a>
                  ( A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B <b>&rArr;</b> A - (A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B) * B,
                    A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> 0 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a>      Integer division truncated towards negative infinity
                  ( A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B <b>&rArr;</b> round(floor(float(A) / float(B))),
                    A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 0 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a>       Reminder of integer division <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a>
                  ( A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B <b>&rArr;</b> A - (A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B) * B,
                    A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> 0 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/integer.htm#(in_integer)**(in_integer)">**</a>        Power
                  ( A ** B is okay for B >= 0,
                    A ** 0 <b>&rArr;</b> 1 for every A, even for A = 0,
                    1 ** B <b>&rArr;</b> 1 for B >= 0,
                    A ** B <b>&rArr;</b> -(-A) ** B for A &lt;= 0 and B >= 0 and odd(B),
                    A ** B <b>&rArr;</b> (-A) ** B for A &lt;= 0 and B >= 0 and not odd(B),
                    A ** -1 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      A <a class="op" href="../libraries/integer.htm#(in_integer)<<(in_integer)">&lt;&lt;</a> B    Shift left
                  ( A &lt;&lt; B is okay for B >= 0 and B &lt;= 63,
                    A &lt;&lt; B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for B &lt; 0 or B >= 64,
                    A &lt;&lt; B <b>&rArr;</b> A * 2 ** B,
                    A &lt;&lt; 0 <b>&rArr;</b> A )
      A <a class="op" href="../libraries/integer.htm#(in_integer)&gt;&gt;(in_integer)">>></a> B    Arithmetic shift right
                  ( A >> B is okay for B >= 0 and B &lt;= 63,
                    A >> B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for B &lt; 0 or B >= 64,
                    A >> B <b>&rArr;</b> A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 2 ** B  for B &lt;= 62,
                    A >> 0 <b>&rArr;</b> A,
                    A >> B <b>&rArr;</b> C for A >= 0 holds: C >= 0,
                    A >> B <b>&rArr;</b> C for A &lt; 0 holds: C &lt; 0,
                    A >> B <b>&rArr;</b> 0 for A >= 0 and B > ord(log2(A)),
                    A >> B <b>&rArr;</b> -1 for A &lt; 0 and B > ord(log2(-A)),
                    0 >> B <b>&rArr;</b> 0 )
      <a class="op" href="../libraries/integer.htm#(in_integer)!(in_integer)">!</a>         Binomial coefficient
                  ( n ! k <b>&rArr;</b> 0 for k &lt; 0,
                    n ! 0 <b>&rArr;</b> 1,
                    n ! 1 <b>&rArr;</b> n,
                    n ! k <b>&rArr;</b> 0 for n >= 0 and k > n,
                    n ! k <b>&rArr;</b> !n <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> (!k * !(n - k)) for k >= 0 and k &lt;= n,
                    n ! k <b>&rArr;</b> (-1) ** k * (n + k - 1 ! k) for n &lt; 0 and k >= 0 )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      A <a class="op" href="../libraries/integer.htm#(in_integer)radix(in_integer)">radix</a> B  Convert the <a class="type" href="../libraries/integer.htm#integer">integer</a> A to a <a class="type" href="#string">string</a>. The conversion
                 uses the numeral system with the base B.
                  ( Type of result: <a class="type" href="#string">string</a>,
                    48879 <a class="op" href="../libraries/integer.htm#(in_integer)radix(in_integer)">radix</a> 16 <b>&rArr;</b> <span class="stri">"beef"</span>,
                    -48879 <a class="op" href="../libraries/integer.htm#(in_integer)radix(in_integer)">radix</a> 16 <b>&rArr;</b> <span class="stri">"-beef"</span>,
                    123 <a class="op" href="../libraries/integer.htm#(in_integer)radix(in_integer)">radix</a> 37 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      A <a class="op" href="../libraries/integer.htm#(in_integer)RADIX(in_integer)">RADIX</a> B  Convert the <a class="type" href="../libraries/integer.htm#integer">integer</a> A to a <a class="type" href="#string">string</a>. The conversion
                 uses the numeral system with the base B.
                  ( Type of result: <a class="type" href="#string">string</a>,
                    48879 <a class="op" href="../libraries/integer.htm#(in_integer)RADIX(in_integer)">RADIX</a> 16 <b>&rArr;</b> <span class="stri">"BEEF"</span>,
                    -48879 <a class="op" href="../libraries/integer.htm#(in_integer)RADIX(in_integer)">RADIX</a> 16 <b>&rArr;</b> <span class="stri">"-BEEF"</span>,
                    123 <a class="op" href="../libraries/integer.htm#(in_integer)RADIX(in_integer)">RADIX</a> 37 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>      Left padding with spaces
                  ( 123 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  8 <b>&rArr;</b> <span class="stri">"     123"</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  4 <b>&rArr;</b> <span class="stri">" 123"</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  3 <b>&rArr;</b> <span class="stri">"123"</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  2 <b>&rArr;</b> <span class="stri">"123"</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a> -8 <b>&rArr;</b> <span class="stri">"123"</span> )
                    -12 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  4 <b>&rArr;</b> <span class="stri">" -12"</span>,
                    -12 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  3 <b>&rArr;</b> <span class="stri">"-12"</span>,
                    -12 <a class="op" href="../libraries/enable_io.htm#(in_aType)lpad(in_integer)">lpad</a>  2 <b>&rArr;</b> <span class="stri">"-12"</span> )
      <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>     Left padding with zeros
                  ( 123 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  8 <b>&rArr;</b> <span class="stri">"00000123"</span>,
                    123 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  4 <b>&rArr;</b> <span class="stri">"0123"</span>,
                    123 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  3 <b>&rArr;</b> <span class="stri">"123"</span>,
                    123 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  2 <b>&rArr;</b> <span class="stri">"123"</span>,
                    123 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a> -8 <b>&rArr;</b> <span class="stri">"123"</span>,
                    -12 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  4 <b>&rArr;</b> <span class="stri">"-012"</span>,
                    -12 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  3 <b>&rArr;</b> <span class="stri">"-12"</span>,
                    -12 <a class="op" href="../libraries/integer.htm#(in_integer)lpad0(in_integer)">lpad0</a>  2 <b>&rArr;</b> <span class="stri">"-12"</span> )
      <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>      Right padding with spaces
                  ( 123 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  8 <b>&rArr;</b> <span class="stri">"123     "</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  4 <b>&rArr;</b> <span class="stri">"123 "</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  3 <b>&rArr;</b> <span class="stri">"123"</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  2 <b>&rArr;</b> <span class="stri">"123"</span>,
                    123 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a> -8 <b>&rArr;</b> <span class="stri">"123"</span> )
                    -12 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  4 <b>&rArr;</b> <span class="stri">"-12 "</span>,
                    -12 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  3 <b>&rArr;</b> <span class="stri">"-12"</span>,
                    -12 <a class="op" href="../libraries/enable_io.htm#(in_aType)rpad(in_integer)">rpad</a>  2 <b>&rArr;</b> <span class="stri">"-12"</span> )
      <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a>       Conversion to a <a class="type" href="#string">string</a> in scientific notation
                  ( Type of result: <a class="type" href="#string">string</a>,
                    12345 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 4 <b>&rArr;</b> <span class="stri">"1.2345e+4"</span>,
                    12345 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"1.235e+4"</span>,
                    12345 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"1.23e+4"</span>,
                    3141592 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+6"</span>,
                    27182818 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+7"</span>,
                    2**62 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"4.611686e+18"</span>,
                    -1 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"-1.000e+0"</span>,
                    -0 <a class="op" href="../libraries/integer.htm#(in_integer)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"0.00e+0"</span> )
      <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)conv(in_integer)">conv</a> A   Identity
                  ( <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)conv(in_integer)">conv</a> A <b>&rArr;</b> A )
      <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/integer.htm#integer">integer</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> <span class="stri">"123"</span> <b>&rArr;</b> 123,
                    <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> <span class="stri">"-123"</span> <b>&rArr;</b> -123,
                    <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> <span class="stri">"+5"</span> <b>&rArr;</b> 5,
                    <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> <span class="stri">" 1"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> <span class="stri">"10 "</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="type" href="../libraries/integer.htm#integer">integer</a> <a class="op" href="../libraries/integer.htm#(attr_integer)parse(in_string)">parse</a> <span class="stri">"ASDF"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/integer.htm#(in_integer)=(in_integer)">=</a>, <a class="op" href="../libraries/integer.htm#(in_integer)<&gt;(in_integer)">&lt;></a>, <a class="op" href="../libraries/integer.htm#(in_integer)<(in_integer)">&lt;</a>, <a class="op" href="../libraries/integer.htm#(in_integer)&lt;=(in_integer)">&lt;=</a>, <a class="op" href="../libraries/integer.htm#(in_integer)&gt;(in_integer)">></a>, <a class="op" href="../libraries/integer.htm#(in_integer)&gt;=(in_integer)">>=</a>
    Functions:
      <a class="func" href="../libraries/integer.htm#ord(in_integer)">ord</a>(A)    Identity
      <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(A)   Successor
                  ( succ(A) <b>&rArr;</b> A+1,
                    succ(<a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(A)   Predecessor
                  ( pred(A) <b>&rArr;</b> A-1,
                    pred(<a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#abs(in_integer)">abs</a>(A)    Absolute value
                  ( abs(A) <b>&rArr;</b> A for A >= 0,
                  ( abs(A) <b>&rArr;</b> -A for A &lt; 0,
                  ( abs(<a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#odd(in_integer)">odd</a>(A)    Odd value
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/integer.htm#str(in_integer)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(12345) <b>&rArr;</b> <span class="stri">"12345"</span> )
      <a class="func" href="../libraries/integer.htm#literal(in_integer)">literal</a>(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#string">string</a>,
                    literal(A) <b>&rArr;</b> str(A) )
      <a class="func" href="../libraries/integer.htm#integer(in_string)">integer</a>(A) Conversion of string to integer
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    integer(<span class="stri">"123"</span>) <b>&rArr;</b> 123,
                    integer(<span class="stri">"-123"</span>) <b>&rArr;</b> -123,
                    integer(<span class="stri">"+5"</span>) <b>&rArr;</b> 5,
                    integer(<span class="stri">" 1"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    integer(<span class="stri">"10 "</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    integer(<span class="stri">"ASDF"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#integer(in_string,in_integer)">integer</a>(A, B) Convert numeric string, with specified radix, to an integer
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    integer(<span class="stri">"beef"</span>, 16) <b>&rArr;</b> 48879,
                    integer(<span class="stri">"-177"</span>, 8) <b>&rArr;</b> -127,
                    integer(<span class="stri">"10101010"</span>, 2) <b>&rArr;</b> 170,
                    integer(<span class="stri">"Cafe"</span>, 16) <b>&rArr;</b> 51966,
                    integer(<span class="stri">"0"</span>, 1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    integer(<span class="stri">"qwertyuiop"</span>, 37) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bytedata.htm#bytes(in_integer,in_signedness,in_endianness)">bytes</a>(A, S, E) Convert an integer into a <a class="type" href="#string">string</a> of bytes
                  ( Type of argument S: <a class="type" href="../libraries/bytedata.htm#signedness">signedness</a> (UNSIGNED and SIGNED),
                    Type of argument E: <a class="type" href="../libraries/bytedata.htm#endianness">endianness</a> (LE and BE),
                    Type of result: <a class="type" href="#string">string</a>,
                    bytes(1413829460, SIGNED, BE) <b>&rArr;</b> "TEST",
                    bytes(1497451343, SIGNED, LE) <b>&rArr;</b> "OKAY" )
      <a class="func" href="../libraries/bytedata.htm#bytes(in_integer,in_signedness,in_endianness,in_integer)">bytes</a>(A, S, E, len) Convert an integer into a <a class="type" href="#string">string</a> of len bytes
                  ( Type of argument S: <a class="type" href="../libraries/bytedata.htm#signedness">signedness</a> (UNSIGNED and SIGNED),
                    Type of argument E: <a class="type" href="../libraries/bytedata.htm#endianness">endianness</a> (LE and BE),
                    Type of result: <a class="type" href="#string">string</a>,
                    bytes(1413829460, SIGNED, BE, 5) <b>&rArr;</b> "\0;TEST"
                    bytes(1413829460, SIGNED, BE, 4) <b>&rArr;</b> "TEST"
                    bytes(1413829460, SIGNED, BE, 3) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bytedata.htm#bytes2Int(in_string,in_signedness,in_endianness)">bytes2Int</a>(A, S, E) Convert a <a class="type" href="#string">string</a> of bytes to an integer
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    Type of argument S: <a class="type" href="../libraries/bytedata.htm#signedness">signedness</a> (UNSIGNED and SIGNED),
                    Type of argument E: <a class="type" href="../libraries/bytedata.htm#endianness">endianness</a> (LE and BE),
                    bytes2Int("\210;\2;\150;I", UNSIGNED, LE) <b>&rArr;</b> 1234567890 )
      <a class="func" href="../libraries/integer.htm#sqrt(in_integer)">sqrt</a>(A)   Integer square root
                  ( sqrt(A) is okay for A >= 0,
                    sqrt(A) <b>&rArr;</b> trunc(sqrt(float(A))),
                    sqrt(-1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#log10(in_integer)">log10</a>(A)  Truncated base 10 logarithm
                  ( log10(A) is defined for A >= 0,
                    log10(10 ** A) = A for A >= 0,
                    log10(pred(10 ** A)) = pred(A) for A >= 0,
                    log10(10) <b>&rArr;</b> 1,
                    log10(1) <b>&rArr;</b> 0,
                    log10(0) <b>&rArr;</b> -1,
                    log10(-1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#log2(in_integer)">log2</a>(A)   Truncated base 2 logarithm
                  ( log2(A) returns the position of the
                    highest bit set. It is defined for A >= 0
                    log2(2 ** A) = A for A >= 0,
                    log2(pred(2 ** A)) = pred(A) for A >= 0,
                    log2(2) <b>&rArr;</b> 1,
                    log2(1) <b>&rArr;</b> 0,
                    log2(0) <b>&rArr;</b> -1,
                    log2(-1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#bitLength(in_integer)">bitLength</a>(A) Number of bits in the minimum two's-complement
                   representation, excluding the sign bit.
                  ( bitLength(A) <b>&rArr;</b> succ(log2(A)) for A >= 0,
                    bitLength(A) <b>&rArr;</b> bitLength(pred(-A)) for A &lt; 0,
                    bitLength(0) <b>&rArr;</b> 0,
                    bitLength(-1) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/integer.htm#lowestSetBit(in_integer)">lowestSetBit</a>(A) Index of the lowest-order one bit
                      For A &lt;> 0 this is equal to the number of
                      lowest-order zero bits.
                  ( A >> B &lt;&lt; B = A for A &lt;> 0 and B = lowestSetBit(A),
                    lowestSetBit(0) <b>&rArr;</b> -1,
                    lowestSetBit(1) <b>&rArr;</b> 0,
                    lowestSetBit(2) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/integer.htm#rand(in_integer,in_integer)">rand</a>(A, B) Random number in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> rand(A, B) &lt;= B holds.
                    rand(A, A) <b>&rArr;</b> A,
                    rand(1, 0) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a>(A, B) Minimum of two numbers.
                  ( min(1, 2) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a>(A, B) Maximum of two numbers.
                  ( max(1, 2) <b>&rArr;</b> 2 )
      <a class="func" href="../libraries/integer.htm#compare(in_integer,in_integer)">compare</a>(A, B) Compare function
                  ( compare(1, 2) <b>&rArr;</b> -1,
                    compare(5, 5) <b>&rArr;</b> 0,
                    compare(8, 7) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/integer.htm#hashCode(in_integer)">hashCode</a>(A) Hash function
    Statements:
      A <a class="op" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a> B   Increment A by B
                  ( A +:= B <b>&rArr;</b> A := A + B )
      A <a class="op" href="../libraries/integer.htm#(inout_integer)-:=(in_integer)">-:=</a> B   Decrement A by B
                  ( A -:= B <b>&rArr;</b> A := A - B )
      A <a class="op" href="../libraries/integer.htm#(inout_integer)*:=(in_integer)">*:=</a> B   Multiplying copy
                  ( A *:= B <b>&rArr;</b> A := A * B )
      A <a class="op" href="../libraries/integer.htm#(inout_integer)<<:=(in_integer)">&lt;&lt;:=</a> B  Shift left copy
                  ( A &lt;&lt;:= B <b>&rArr;</b> A := A &lt;&lt; B )
      A <a class="op" href="../libraries/integer.htm#(inout_integer)&gt;&gt;:=(in_integer)">>>:=</a> B  Shift right copy
                  ( A >>:= B <b>&rArr;</b> A := A >> B )
      <a class="func" href="../libraries/integer.htm#incr(inout_integer)">incr</a>(A)   Increment with 1
                  ( incr(A) <b>&rArr;</b> A +:= 1,
                    incr(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for A = <a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a> )
      <a class="func" href="../libraries/integer.htm#decr(inout_integer)">decr</a>(A)   Decrement with 1
                  ( decr(A) <b>&rArr;</b> A -:= 1,
                    decr(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for A = <a class="type" href="../libraries/integer.htm#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p>
  <a name="div_rem_mdiv_mod_properties"></a>For the operations <tt><a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt> and <tt><a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a></tt> holds for all A:</p><pre class="box">
    (A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B) * B + A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B = A           when B &lt;> 0
    -A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B = -(A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B)                 when B &lt;> 0
    -A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B = -(A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B)                 when B &lt;> 0
    A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B >= 0 <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B &lt; abs(B)     when B &lt;> 0 and A >= 0
    A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B &lt;= 0 <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B > -abs(B)    when B &lt;> 0 and A &lt;= 0
</pre><p>
  For the operations <tt><a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a></tt> and <tt><a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a></tt> holds for all A:</p><pre class="box">
    (A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B) * B + A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B = A          when B &lt;> 0
    -A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B = A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> -B                 when B &lt;> 0
    -A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> -B = -(A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B)                when B &lt;> 0
    A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B >= 0 <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B &lt; B          when B > 0
    A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B &lt;= 0 <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B > B          when B &lt; 0
</pre><p>
  For the operation <tt><a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a></tt> holds:</p><pre class="box">
    A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B = A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B - 1            when A and B have different
                                      signs and A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B &lt;> 0 holds.
    A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B = A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B                when A and B have the same
                                      sign or A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B = 0 holds.
    A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B = (A - 1) <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B - 1      when A > 0 and B &lt; 0 holds.
    A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B = (A + 1) <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B - 1      when A &lt; 0 and B > 0 holds.
    A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> 2 ** B = A >> B            when B >= 0 holds
</pre><p>
  For the operation <tt><a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a></tt> holds:</p><pre class="box">
    A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B = A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B + B      when A and B have different
                               signs and A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B &lt;> 0 holds.
    A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B = A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B          when A and B have the same
                               sign or A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B = 0 holds.
</pre><p>

  <a name="div_rem_mdiv_mod_tables"></a>Tables for the behavior of <tt><a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a></tt>, <tt><a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a></tt>, <tt><a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a></tt> and <tt><a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a></tt>:
</p><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th>  A  </th><th>  B  </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B </th></tr>
    
    <tr><td align="center">  5  </td><td align="center">  3  </td><td align="center">    1    </td><td align="center">    2    </td><td align="center">     1    </td><td align="center">    2    </td></tr>
    <tr><td align="center">  4  </td><td align="center">  3  </td><td align="center">    1    </td><td align="center">    1    </td><td align="center">     1    </td><td align="center">    1    </td></tr>
    <tr><td align="center">  3  </td><td align="center">  3  </td><td align="center">    1    </td><td align="center">    0    </td><td align="center">     1    </td><td align="center">    0    </td></tr>
    <tr><td align="center">  2  </td><td align="center">  3  </td><td align="center">    0    </td><td align="center">    2    </td><td align="center">     0    </td><td align="center">    2    </td></tr>
    <tr><td align="center">  1  </td><td align="center">  3  </td><td align="center">    0    </td><td align="center">    1    </td><td align="center">     0    </td><td align="center">    1    </td></tr>
    <tr><td align="center">  0  </td><td align="center">  3  </td><td align="center">    0    </td><td align="center">    0    </td><td align="center">     0    </td><td align="center">    0    </td></tr>
    <tr><td align="center"> -1  </td><td align="center">  3  </td><td align="center">    0    </td><td align="center">   -1    </td><td align="center">    -1    </td><td align="center">    2    </td></tr>
    <tr><td align="center"> -2  </td><td align="center">  3  </td><td align="center">    0    </td><td align="center">   -2    </td><td align="center">    -1    </td><td align="center">    1    </td></tr>
    <tr><td align="center"> -3  </td><td align="center">  3  </td><td align="center">   -1    </td><td align="center">    0    </td><td align="center">    -1    </td><td align="center">    0    </td></tr>
    <tr><td align="center"> -4  </td><td align="center">  3  </td><td align="center">   -1    </td><td align="center">   -1    </td><td align="center">    -2    </td><td align="center">    2    </td></tr>
    <tr><td align="center"> -5  </td><td align="center">  3  </td><td align="center">   -1    </td><td align="center">   -2    </td><td align="center">    -2    </td><td align="center">    1    </td></tr>
    
</table></dd></dl><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th>  A  </th><th>  B  </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)div(in_integer)">div</a> B </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)rem(in_integer)">rem</a> B </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)mdiv(in_integer)">mdiv</a> B </th><th> A <a class="op" href="../libraries/integer.htm#(in_integer)mod(in_integer)">mod</a> B </th></tr>
    
    <tr><td align="center">  5  </td><td align="center"> -3  </td><td align="center">   -1    </td><td align="center">    2    </td><td align="center">    -2    </td><td align="center">   -1    </td></tr>
    <tr><td align="center">  4  </td><td align="center"> -3  </td><td align="center">   -1    </td><td align="center">    1    </td><td align="center">    -2    </td><td align="center">   -2    </td></tr>
    <tr><td align="center">  3  </td><td align="center"> -3  </td><td align="center">   -1    </td><td align="center">    0    </td><td align="center">    -1    </td><td align="center">    0    </td></tr>
    <tr><td align="center">  2  </td><td align="center"> -3  </td><td align="center">    0    </td><td align="center">    2    </td><td align="center">    -1    </td><td align="center">   -1    </td></tr>
    <tr><td align="center">  1  </td><td align="center"> -3  </td><td align="center">    0    </td><td align="center">    1    </td><td align="center">    -1    </td><td align="center">   -2    </td></tr>
    <tr><td align="center">  0  </td><td align="center"> -3  </td><td align="center">    0    </td><td align="center">    0    </td><td align="center">     0    </td><td align="center">    0    </td></tr>
    <tr><td align="center"> -1  </td><td align="center"> -3  </td><td align="center">    0    </td><td align="center">   -1    </td><td align="center">     0    </td><td align="center">   -1    </td></tr>
    <tr><td align="center"> -2  </td><td align="center"> -3  </td><td align="center">    0    </td><td align="center">   -2    </td><td align="center">     0    </td><td align="center">   -2    </td></tr>
    <tr><td align="center"> -3  </td><td align="center"> -3  </td><td align="center">    1    </td><td align="center">    0    </td><td align="center">     1    </td><td align="center">    0    </td></tr>
    <tr><td align="center"> -4  </td><td align="center"> -3  </td><td align="center">    1    </td><td align="center">   -1    </td><td align="center">     1    </td><td align="center">   -1    </td></tr>
    <tr><td align="center"> -5  </td><td align="center"> -3  </td><td align="center">    1    </td><td align="center">   -2    </td><td align="center">     1    </td><td align="center">   -2    </td></tr>
    
</table></dd></dl><p>

  <a name="binomial_cofficient_table"></a>Tables for the behavior of <tt><a class="op" href="../libraries/integer.htm#(in_integer)!(in_integer)">!</a></tt> (Binomial coefficient):
</p><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th rowspan="2" colspan="2"> n ! k  </th><th colspan="11">                           k                             </th></tr>
    
    <tr><th> -5 </th><th> -4 </th><th> -3 </th><th> -2 </th><th> -1 </th><th>  0 </th><th>  1 </th><th>  2 </th><th>   3 </th><th>  4 </th><th>    5 </th></tr>
    
    <tr><td rowspan="11"><b> n </b></td><td align="center"><b> -5 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center"> -5 </td><td align="center"> 15 </td><td align="center"> -35 </td><td align="center"> 70 </td><td align="center"> -126 </td></tr>
    
    <tr><td align="center"><b> -4 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center"> -4 </td><td align="center"> 10 </td><td align="center"> -20 </td><td align="center"> 35 </td><td align="center">  -56 </td></tr>
    
    <tr><td align="center"><b> -3 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center"> -3 </td><td align="center">  6 </td><td align="center"> -10 </td><td align="center"> 15 </td><td align="center">  -21 </td></tr>
    
    <tr><td align="center"><b> -2 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center"> -2 </td><td align="center">  3 </td><td align="center">  -4 </td><td align="center">  5 </td><td align="center">   -6 </td></tr>
    
    <tr><td align="center"><b> -1 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center"> -1 </td><td align="center"> -1 </td><td align="center">  -1 </td><td align="center"> -1 </td><td align="center">   -1 </td></tr>
    
    <tr><td align="center"><b>  0 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">   0 </td><td align="center">  0 </td><td align="center">    0 </td></tr>
    
    <tr><td align="center"><b>  1 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center">  1 </td><td align="center">  0 </td><td align="center">   0 </td><td align="center">  0 </td><td align="center">    0 </td></tr>
    
    <tr><td align="center"><b>  2 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center">  2 </td><td align="center">  1 </td><td align="center">   0 </td><td align="center">  0 </td><td align="center">    0 </td></tr>
    
    <tr><td align="center"><b>  3 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center">  3 </td><td align="center">  3 </td><td align="center">   1 </td><td align="center">  0 </td><td align="center">    0 </td></tr>
    
    <tr><td align="center"><b>  4 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center">  4 </td><td align="center">  6 </td><td align="center">   4 </td><td align="center">  1 </td><td align="center">    0 </td></tr>
    
    <tr><td align="center"><b>  5 </b></td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  0 </td><td align="center">  1 </td><td align="center">  5 </td><td align="center"> 10 </td><td align="center">  10 </td><td align="center">  5 </td><td align="center">    1 </td></tr>
    
</table></dd></dl><p>

  For the <tt><a class="func" href="../libraries/integer.htm#sqrt(in_integer)">sqrt</a></tt> function holds (when A >= 0):</p><pre class="box">
    sqrt(A) * sqrt(A) &lt;= A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a>
    (sqrt(A) + 1) * (sqrt(A) + 1) > A
</pre><p></p>

<a name="bigInteger"><h3>5.3 bigInteger</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a></tt> describes signed integer numbers of
  unlimited size. A <a class="link" href="tokens.htm#BigInteger_literals">bigInteger literal</a> is a sequence of digits
  followed by an underscore character (for example 1_ ). Based
  numbers can be specified when the sequence of digits is
  followed by the # character and a sequence of extended digits.
  The decimal number in front of the # character specifies the
  base of the number which follows the # character. As base a
  number between 2 and 36 is allowed. As extended digits the
  letters A or a can be used for 10, B or b can be used for 11
  and so on to Z or z which can be used as 35. Like decimal
  <tt><a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a></tt> literals the extended digits must be followed by
  an underscore character. Examples of <tt><a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a></tt> literals are:
</p><pre class="box">
    0_   18446744073709551616_ 16#deadbeefcafe_
</pre><p>
  Although <tt><a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a></tt> operations cannot overflow, it can happen
  that there is not enough memory to represent a <tt><a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a></tt> value.
  In this case the exception <tt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></tt> is raised. The <tt><a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a></tt>
  functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/bigint.htm">bigint.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a>.<a class="var" href="../libraries/bigint.htm#(attr_bigInteger)._value">value</a>  Default value of <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> (0_)
    Prefix operators:
      <a class="op" href="../libraries/bigint.htm#+(in_bigInteger)">+</a>         Identity
      <a class="op" href="../libraries/bigint.htm#-(in_bigInteger)">-</a>         Change sign
      <a class="op" href="../libraries/bigint.htm#!(in_bigInteger)">!</a>         Factorial
    Infix operators:
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)+(in_bigInteger)">+</a>         Addition
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)-(in_bigInteger)">-</a>         Subtraction
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)*(in_bigInteger)">*</a>         Multiplication
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a>       Integer division truncated towards zero
                  ( A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B <b>&rArr;</b> trunc(A / B),
                    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> 0_ <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a>       Reminder of integer division <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a>
                  ( A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B <b>&rArr;</b> A - (A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B) * B,
                    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> 0_ <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a>      Integer division truncated towards negative infinity
                  ( A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B <b>&rArr;</b> floor(A / B),
                    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 0_ <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a>       Reminder of integer division <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a>
                  ( A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B <b>&rArr;</b> A - (A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B) * B,
                    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> 0_ <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)**(in_integer)">**</a> B    Power
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A ** B is okay for B >= 0,
                    A ** 0 <b>&rArr;</b> 1_ for every A, even for A = 0_,
                    1_ ** B <b>&rArr;</b> 1_ for B >= 0,
                    A ** B <b>&rArr;</b> -(-A) ** B for A &lt;= 0_ and B >= 0 and odd(B),
                    A ** B <b>&rArr;</b> (-A) ** B for A &lt;= 0_ and B >= 0 and not odd(B),
                    A ** -1 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)<<(in_integer)">&lt;&lt;</a> B    Shift left
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A &lt;&lt; B <b>&rArr;</b> A * 2_ ** B  for B >= 0,
                    A &lt;&lt; B <b>&rArr;</b> A >> -B for B &lt; 0,
                    A &lt;&lt; 0 <b>&rArr;</b> A,
                    0_ &lt;&lt; B <b>&rArr;</b> 0_ for every B )
      A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)&gt;&gt;(in_integer)">>></a> B    Arithmetic shift right
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A >> B <b>&rArr;</b> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 2_ ** B for B >= 0,
                    A >> B <b>&rArr;</b> A &lt;&lt; -B for B &lt; 0,
                    A >> 0 <b>&rArr;</b> A,
                    A >> B <b>&rArr;</b> C for A >= 0_ holds: C >= 0_,
                    A >> B <b>&rArr;</b> C for A &lt; 0_ holds: C &lt; 0_,
                    A >> B <b>&rArr;</b> 0_ for A >= 0_ and B > ord(log2(A)),
                    A >> B <b>&rArr;</b> -1_ for A &lt; 0_ and B > ord(log2(-A)),
                    0_ >> B <b>&rArr;</b> 0_ for every B )
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)!(in_var_bigInteger)">!</a>   Binomial coefficient
                  ( n ! k <b>&rArr;</b> 0_ for k &lt; 0_,
                    n ! 0_ <b>&rArr;</b> 1_,
                    n ! 1_ <b>&rArr;</b> n,
                    n ! k <b>&rArr;</b> 0_ for n >= 0_ and k > n,
                    n ! k <b>&rArr;</b> !n <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> (!k * !(n - k)) for k >= 0_ and k &lt;= n,
                    n ! k <b>&rArr;</b> (-1) ** k * (n + k - 1 ! k) for n &lt; 0_ and k >= 0_ )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      A <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)radix(in_integer)">radix</a> B  Convert the <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> A to a <a class="type" href="#string">string</a>. The conversion
                 uses the numeral system with the base B.
                  ( Type of result: <a class="type" href="#string">string</a>,
                    3735928559_ <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)radix(in_integer)">radix</a> 16 <b>&rArr;</b> <span class="stri">"deadbeef"</span>,
                    -3735928559_ <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)radix(in_integer)">radix</a> 16 ) <b>&rArr;</b> <span class="stri">"-deadbeef"</span>,
                    123_ <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)radix(in_integer)">radix</a> 37 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      A <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)RADIX(in_integer)">RADIX</a> B  Convert the <a class="type" href="#integer">integer</a> A to a <a class="type" href="#string">string</a>. The conversion
                 uses the numeral system with the base B.
                  ( Type of result: <a class="type" href="#string">string</a>,
                    3735928559_ <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)RADIX(in_integer)">RADIX</a> 16 <b>&rArr;</b> <span class="stri">"DEADBEEF"</span>,
                    -3735928559_ <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)RADIX(in_integer)">RADIX</a> 16 ) <b>&rArr;</b> <span class="stri">"-DEADBEEF"</span>,
                    123_ <a class="op" href="../libraries/bigint.htm#(in_var_bigInteger)RADIX(in_integer)">RADIX</a> 37 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a>       Conversion to a <a class="type" href="#string">string</a> in scientific notation
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    12345_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 4 <b>&rArr;</b> <span class="stri">"1.2345e+4"</span>,
                    12345_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"1.235e+4"</span>,
                    12345_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"1.23e+4"</span>,
                    3141592_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+6"</span>,
                    27182818_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+7"</span>,
                    2_**62 <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"4.611686e+18"</span>,
                    -1_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"-1.000e+0"</span>,
                    -0_ <a class="op" href="../libraries/bigint.htm#(in_bigInteger)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"0.00e+0"</span> )
      <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)conv(in_integer)">conv</a> 1 <b>&rArr;</b> 1_ )
      <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="#integer">integer</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> <span class="stri">"123"</span> <b>&rArr;</b> 123_,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> <span class="stri">"-123"</span> <b>&rArr;</b> -123_,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> <span class="stri">"+5"</span> <b>&rArr;</b> 5_,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> <span class="stri">" 1"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> <span class="stri">"10 "</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="type" href="../libraries/bigint.htm#bigInteger">bigInteger</a> <a class="op" href="../libraries/bigint.htm#(attr_bigInteger)parse(in_string)">parse</a> <span class="stri">"ASDF"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/bigint.htm#(in_bigInteger)=(in_bigInteger)">=</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)<&gt;(in_bigInteger)">&lt;></a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)<(in_bigInteger)">&lt;</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)&lt;=(in_bigInteger)">&lt;=</a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)&gt;(in_bigInteger)">></a>, <a class="op" href="../libraries/bigint.htm#(in_bigInteger)&gt;=(in_bigInteger)">>=</a>
    Functions:
      <a class="func" href="../libraries/bigint.htm#ord(in_bigInteger)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
                    ord(99999999999999999999_) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bigint.htm#integer(in_bigInteger)">integer</a>(A)  Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
                    integer(99999999999999999999_) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bigint.htm#succ(in_bigInteger)">succ</a>(A)   Successor
                  ( succ(A) <b>&rArr;</b> A+1_ )
      <a class="func" href="../libraries/bigint.htm#pred(in_bigInteger)">pred</a>(A)   Predecessor
                  ( pred(A) <b>&rArr;</b> A-1_ )
      <a class="func" href="../libraries/bigint.htm#abs(in_bigInteger)">abs</a>(A)    Absolute value
      <a class="func" href="../libraries/bigint.htm#odd(in_bigInteger)">odd</a>(A)    Odd value
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/bigint.htm#str(in_bigInteger)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(9876543210_) <b>&rArr;</b> <span class="stri">"9876543210"</span> )
      <a class="func" href="../libraries/bigint.htm#literal(in_bigInteger)">literal</a>(A) Convert a bigInteger number to a bigInteger literal.
                  ( Type of result: <a class="type" href="#string">string</a>,
                    literal(9876543210_) <b>&rArr;</b> <span class="stri">"9876543210_"</span> )
      <a class="func" href="../libraries/bigint.htm#bigInteger(in_integer)">bigInteger</a>(A) Convert an <a class="type" href="#integer">integer</a> to a bigInteger
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    bigInteger(1) <b>&rArr;</b> 1_ )
      <a class="func" href="../libraries/bigint.htm#bigInteger(in_string)">bigInteger</a>(A) Convert a numeric string to a bigInteger
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    bigInteger(<span class="stri">"123"</span>) <b>&rArr;</b> 123_,
                    bigInteger(<span class="stri">"-123"</span>) <b>&rArr;</b> -123_,
                    bigInteger(<span class="stri">"+5"</span>) <b>&rArr;</b> 5_,
                    bigInteger(<span class="stri">" 1"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    bigInteger(<span class="stri">"10 "</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    bigInteger(<span class="stri">"ASDF"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bigint.htm#bigInteger(in_string,in_integer)">bigInteger</a>(A, B) Convert numeric string, with specified radix, to a bigInteger
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#integer">integer</a>,
                    bigInteger(<span class="stri">"deadbeef"</span>, 16) <b>&rArr;</b> 3735928559_,
                    bigInteger(<span class="stri">"-77777777777"</span>, 8) <b>&rArr;</b> -8589934591_,
                    bigInteger(<span class="stri">"10101010"</span>, 2) <b>&rArr;</b> 170_,
                    bigInteger(<span class="stri">"Cafe"</span>, 16) <b>&rArr;</b> 51966_,
                    bigInteger(<span class="stri">"0"</span>, 1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    bigInteger(<span class="stri">"qwertyuiop"</span>, 37) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bytedata.htm#bytes(in_bigInteger,in_signedness,in_endianness)">bytes</a>(A, S, E) Convert a bigInteger into a <a class="type" href="#string">string</a> of bytes
                  ( Type of argument S: <a class="type" href="../libraries/bytedata.htm#signedness">signedness</a> (UNSIGNED and SIGNED),
                    Type of argument E: <a class="type" href="../libraries/bytedata.htm#endianness">endianness</a> (LE and BE),
                    Type of result: <a class="type" href="#string">string</a>,
                    bytes(1413829460_, SIGNED, BE) <b>&rArr;</b> "TEST",
                    bytes(1497451343_, SIGNED, LE) <b>&rArr;</b> "OKAY" )
      <a class="func" href="../libraries/bytedata.htm#bytes(in_bigInteger,in_signedness,in_endianness,in_integer)">bytes</a>(A, S, E, len) Convert a bigInteger into a <a class="type" href="#string">string</a> of len bytes
                  ( Type of argument S: <a class="type" href="../libraries/bytedata.htm#signedness">signedness</a> (UNSIGNED and SIGNED),
                    Type of argument E: <a class="type" href="../libraries/bytedata.htm#endianness">endianness</a> (LE and BE),
                    Type of result: <a class="type" href="#string">string</a>,
                    bytes(1413829460_, SIGNED, BE, 5) <b>&rArr;</b> "\0;TEST"
                    bytes(1413829460_, SIGNED, BE, 4) <b>&rArr;</b> "TEST"
                    bytes(1413829460_, SIGNED, BE, 3) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bytedata.htm#bytes2BigInt(in_string,in_signedness,in_endianness)">bytes2BigInt</a>(A, S, E) Convert a <a class="type" href="#string">string</a> of bytes to a bigInteger
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    Type of argument S: <a class="type" href="../libraries/bytedata.htm#signedness">signedness</a> (UNSIGNED and SIGNED),
                    Type of argument E: <a class="type" href="../libraries/bytedata.htm#endianness">endianness</a> (LE and BE),
                    bytes2BigInt("\210;\2;\150;I", UNSIGNED, LE) <b>&rArr;</b> 1234567890_ )
      <a class="func" href="../libraries/bigint.htm#sqrt(in_var_bigInteger)">sqrt</a>(A)   Integer square root
                  ( sqrt(A) is okay for A >= 0_
                    sqrt(A) <b>&rArr;</b> trunc(sqrt(float(A))),
                    sqrt(-1_) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="func" href="../libraries/bigint.htm#modInverse(in_var_bigInteger,in_var_bigInteger)">modInverse</a>(A, B) Compute the modular multiplicative inverse of A modulo B
      <a class="func" href="../libraries/bigint.htm#modPow(in_var_bigInteger,in_var_bigInteger,in_bigInteger)">modPow</a>(A, B, C) Compute the modular exponentiation of A ** B
      <a class="func" href="../libraries/bigint.htm#log10(in_bigInteger)">log10</a>(A)  Truncated base 10 logarithm
                  ( log10(A) is defined for A >= 0_
                    log10(10_ ** A) = A for A >= 0_,
                    log10(pred(10_ ** A)) = pred(A) for A >= 0_,
                    log10(10_) <b>&rArr;</b> 1_,
                    log10(1_) <b>&rArr;</b> 0_,
                    log10(0_) <b>&rArr;</b> -1_,
                    log10(-1_) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="func" href="../libraries/bigint.htm#log2(in_bigInteger)">log2</a>(A)   Truncated base 2 logarithm
                  ( log2(A) returns the position of the
                    highest bit set. It is defined for A >= 0
                    log2(2_ ** A) = A for A >= 0,
                    log2(pred(2_ ** A)) = pred(A) for A >= 0,
                    log2(2_) <b>&rArr;</b> 1_,
                    log2(1_) <b>&rArr;</b> 0_,
                    log2(0_) <b>&rArr;</b> -1_,
                    log2(-1_) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#NUMERIC_ERROR">NUMERIC_ERROR</a> )
      <a class="func" href="../libraries/bigint.htm#gcd(in_bigInteger,in_bigInteger)">gcd</a>(A, B) Greatest common divisor of A and B.
                  ( gcd(A, B) = gcd(B, A),
                    gcd(A, B) = gcd(-A, B),
                    gcd(A, 0) = abs(A) )
      <a class="func" href="../libraries/bigint.htm#bitLength(in_bigInteger)">bitLength</a>(A) Number of bits in the minimum two's-complement
                   representation, excluding the sign bit.
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    bitLength(A) <b>&rArr;</b> ord(succ(log2(A))) for A >= 0_,
                    bitLength(A) <b>&rArr;</b> bitLength(pred(-A)) for A &lt; 0_,
                    bitLength(0_) <b>&rArr;</b> 0,
                    bitLength(-1_) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/bigint.htm#lowestSetBit(in_bigInteger)">lowestSetBit</a>(A) Index of the lowest-order one bit
                      For A &lt;> 0_ this is equal to the number of
                      lowest-order zero bits.
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    A >> B &lt;&lt; B = A for A &lt;> 0_ and B = lowestSetBit(A),
                    lowestSetBit(0_) <b>&rArr;</b> -1,
                    lowestSetBit(1_) <b>&rArr;</b> 0,
                    lowestSetBit(2_) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/bigint.htm#rand(in_bigInteger,in_bigInteger)">rand</a>(A, B) Random number in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> rand(A, B) &lt;= B holds.
                    rand(A, A) <b>&rArr;</b> A,
                    rand(1_, 0_) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a>(A, B) Minimum of two numbers.
                  ( min(1_, 2_) <b>&rArr;</b> 1_ )
      <a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a>(A, B) Maximum of two numbers.
                  ( max(1_, 2_) <b>&rArr;</b> 2_ )
      <a class="func" href="../libraries/bigint.htm#compare(in_bigInteger,in_bigInteger)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    compare(1_, 2_) <b>&rArr;</b> -1,
                    compare(5_, 5_) <b>&rArr;</b> 0,
                    compare(8_, 7_) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/bigint.htm#hashCode(in_bigInteger)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/bigint.htm#(inout_bigInteger)+:=(in_bigInteger)">+:=</a> B   Increment A by B
                  ( A +:= B <b>&rArr;</b> A := A + B )
      A <a class="op" href="../libraries/bigint.htm#(inout_bigInteger)-:=(in_bigInteger)">-:=</a> B   Decrement A by B
                  ( A -:= B <b>&rArr;</b> A := A - B )
      A <a class="op" href="../libraries/bigint.htm#(inout_bigInteger)*:=(in_bigInteger)">*:=</a> B   Multiplying copy
                  ( A *:= B <b>&rArr;</b> A := A * B )
      A <a class="op" href="../libraries/bigint.htm#(inout_bigInteger)<<:=(in_integer)">&lt;&lt;:=</a> B  Shift left copy
                  ( A &lt;&lt;:= B <b>&rArr;</b> A := A &lt;&lt; B )
      A <a class="op" href="../libraries/bigint.htm#(inout_bigInteger)&gt;&gt;:=(in_integer)">>>:=</a> B  Shift right copy
                  ( A >>:= B <b>&rArr;</b> A := A >> B )
      <a class="func" href="../libraries/bigint.htm#incr(inout_bigInteger)">incr</a>(A)   Increment with 1
                  ( incr(A) <b>&rArr;</b> A +:= 1_ )
      <a class="func" href="../libraries/bigint.htm#decr(inout_bigInteger)">decr</a>(A)   Decrement with 1
                  ( decr(A) <b>&rArr;</b> A -:= 1_ )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p>
  For the operations <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a></tt> and <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a></tt> holds for all A:</p><pre class="box">
    (A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B) * B + A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B = A           when B &lt;> 0_
    -A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B = -(A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B)                 when B &lt;> 0_
    -A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B = -(A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B)                 when B &lt;> 0_
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B >= 0_ <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B &lt; abs(B)    when B &lt;> 0_ and A >= 0_
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B &lt;= 0_ <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B > -abs(B)   when B &lt;> 0_ and A &lt;= 0_
</pre><p>
  For the operations <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a></tt> and <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a></tt> holds for all A:</p><pre class="box">
    (A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B) * B + A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B = A          when B &lt;> 0_
    -A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B = A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> -B                 when B &lt;> 0_
    -A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> -B = -(A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B)                when B &lt;> 0_
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B >= 0_ <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B &lt; B         when B > 0_
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B &lt;= 0_ <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B > B         when B &lt; 0_
</pre><p>
  For the operation <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a></tt> holds:</p><pre class="box">
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B = A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B - 1_           when A and B have different
                                      signs and A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B &lt;> 0_ holds.
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B = A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B                when A and B have the same
                                      sign or A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B = 0_ holds.
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B = (A - 1_) <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B - 1_    when A > 0_ and B &lt; 0_ holds.
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B = (A + 1_) <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B - 1_    when A &lt; 0_ and B > 0_ holds.
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> 2_ ** B = A >> B           when B >= 0 holds
</pre><p>
  For the operation <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a></tt> holds:</p><pre class="box">
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B = A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B + B      when A and B have different
                               signs and A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B &lt;> 0_ holds.
    A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B = A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B          when A and B have the same
                               sign or A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B = 0_ holds.
</pre><p>

  Tables for the behavior of <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a></tt>, <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a></tt>, <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a></tt> and <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a></tt>:
</p><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th>  A  </th><th>  B  </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B </th></tr>
    
    <tr><td align="center">  5_ </td><td align="center">  3_ </td><td align="center">    1_   </td><td align="center">    2_   </td><td align="center">     1_   </td><td align="center">    2_   </td></tr>
    <tr><td align="center">  4_ </td><td align="center">  3_ </td><td align="center">    1_   </td><td align="center">    1_   </td><td align="center">     1_   </td><td align="center">    1_   </td></tr>
    <tr><td align="center">  3_ </td><td align="center">  3_ </td><td align="center">    1_   </td><td align="center">    0_   </td><td align="center">     1_   </td><td align="center">    0_   </td></tr>
    <tr><td align="center">  2_ </td><td align="center">  3_ </td><td align="center">    0_   </td><td align="center">    2_   </td><td align="center">     0_   </td><td align="center">    2_   </td></tr>
    <tr><td align="center">  1_ </td><td align="center">  3_ </td><td align="center">    0_   </td><td align="center">    1_   </td><td align="center">     0_   </td><td align="center">    1_   </td></tr>
    <tr><td align="center">  0_ </td><td align="center">  3_ </td><td align="center">    0_   </td><td align="center">    0_   </td><td align="center">     0_   </td><td align="center">    0_   </td></tr>
    <tr><td align="center"> -1_ </td><td align="center">  3_ </td><td align="center">    0_   </td><td align="center">   -1_   </td><td align="center">    -1_   </td><td align="center">    2_   </td></tr>
    <tr><td align="center"> -2_ </td><td align="center">  3_ </td><td align="center">    0_   </td><td align="center">   -2_   </td><td align="center">    -1_   </td><td align="center">    1_   </td></tr>
    <tr><td align="center"> -3_ </td><td align="center">  3_ </td><td align="center">   -1_   </td><td align="center">    0_   </td><td align="center">    -1_   </td><td align="center">    0_   </td></tr>
    <tr><td align="center"> -4_ </td><td align="center">  3_ </td><td align="center">   -1_   </td><td align="center">   -1_   </td><td align="center">    -2_   </td><td align="center">    2_   </td></tr>
    <tr><td align="center"> -5_ </td><td align="center">  3_ </td><td align="center">   -1_   </td><td align="center">   -2_   </td><td align="center">    -2_   </td><td align="center">    1_   </td></tr>
    
</table></dd></dl><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th>  A  </th><th>  B  </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)div(in_bigInteger)">div</a> B </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)rem(in_bigInteger)">rem</a> B </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mdiv(in_bigInteger)">mdiv</a> B </th><th> A <a class="op" href="../libraries/bigint.htm#(in_bigInteger)mod(in_bigInteger)">mod</a> B </th></tr>
    
    <tr><td align="center">  5_ </td><td align="center"> -3_ </td><td align="center">   -1_   </td><td align="center">    2_   </td><td align="center">    -2_   </td><td align="center">   -1_   </td></tr>
    <tr><td align="center">  4_ </td><td align="center"> -3_ </td><td align="center">   -1_   </td><td align="center">    1_   </td><td align="center">    -2_   </td><td align="center">   -2_   </td></tr>
    <tr><td align="center">  3_ </td><td align="center"> -3_ </td><td align="center">   -1_   </td><td align="center">    0_   </td><td align="center">    -1_   </td><td align="center">    0_   </td></tr>
    <tr><td align="center">  2_ </td><td align="center"> -3_ </td><td align="center">    0_   </td><td align="center">    2_   </td><td align="center">    -1_   </td><td align="center">   -1_   </td></tr>
    <tr><td align="center">  1_ </td><td align="center"> -3_ </td><td align="center">    0_   </td><td align="center">    1_   </td><td align="center">    -1_   </td><td align="center">   -2_   </td></tr>
    <tr><td align="center">  0_ </td><td align="center"> -3_ </td><td align="center">    0_   </td><td align="center">    0_   </td><td align="center">     0_   </td><td align="center">    0_   </td></tr>
    <tr><td align="center"> -1_ </td><td align="center"> -3_ </td><td align="center">    0_   </td><td align="center">   -1_   </td><td align="center">     0_   </td><td align="center">   -1_   </td></tr>
    <tr><td align="center"> -2_ </td><td align="center"> -3_ </td><td align="center">    0_   </td><td align="center">   -2_   </td><td align="center">     0_   </td><td align="center">   -2_   </td></tr>
    <tr><td align="center"> -3_ </td><td align="center"> -3_ </td><td align="center">    1_   </td><td align="center">    0_   </td><td align="center">     1_   </td><td align="center">    0_   </td></tr>
    <tr><td align="center"> -4_ </td><td align="center"> -3_ </td><td align="center">    1_   </td><td align="center">   -1_   </td><td align="center">     1_   </td><td align="center">   -1_   </td></tr>
    <tr><td align="center"> -5_ </td><td align="center"> -3_ </td><td align="center">    1_   </td><td align="center">   -2_   </td><td align="center">     1_   </td><td align="center">   -2_   </td></tr>
    
</table></dd></dl><p>

  <a name="binomial_cofficient_table"></a>Tables for the behavior of <tt><a class="op" href="../libraries/bigint.htm#(in_bigInteger)!(in_var_bigInteger)">!</a></tt> (Binomial coefficient):
</p><dl><dd><table class="tt" border="1" cellspacing="0" cellpadding="3">
    
    <tr><th rowspan="2" colspan="2"> n ! k   </th><th colspan="11">                                k                                   </th></tr>
    
    <tr><th> -5_ </th><th> -4_ </th><th> -3_ </th><th> -2_ </th><th> -1_ </th><th>  0_ </th><th>  1_ </th><th>  2_ </th><th>   3_ </th><th>  4_ </th><th>    5_ </th></tr>
    
    <tr><td rowspan="11"><b> n </b></td><td align="center"><b> -5_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center"> -5_ </td><td align="center"> 15_ </td><td align="center"> -35_ </td><td align="center"> 70_ </td><td align="center"> -126_ </td></tr>
    
    <tr><td align="center"><b> -4_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center"> -4_ </td><td align="center"> 10_ </td><td align="center"> -20_ </td><td align="center"> 35_ </td><td align="center">  -56_ </td></tr>
    
    <tr><td align="center"><b> -3_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center"> -3_ </td><td align="center">  6_ </td><td align="center"> -10_ </td><td align="center"> 15_ </td><td align="center">  -21_ </td></tr>
    
    <tr><td align="center"><b> -2_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center"> -2_ </td><td align="center">  3_ </td><td align="center">  -4_ </td><td align="center">  5_ </td><td align="center">   -6_ </td></tr>
    
    <tr><td align="center"><b> -1_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center"> -1_ </td><td align="center"> -1_ </td><td align="center">  -1_ </td><td align="center"> -1_ </td><td align="center">   -1_ </td></tr>
    
    <tr><td align="center"><b>  0_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">   0_ </td><td align="center">  0_ </td><td align="center">    0_ </td></tr>
    
    <tr><td align="center"><b>  1_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center">  1_ </td><td align="center">  0_ </td><td align="center">   0_ </td><td align="center">  0_ </td><td align="center">    0_ </td></tr>
    
    <tr><td align="center"><b>  2_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center">  2_ </td><td align="center">  1_ </td><td align="center">   0_ </td><td align="center">  0_ </td><td align="center">    0_ </td></tr>
    
    <tr><td align="center"><b>  3_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center">  3_ </td><td align="center">  3_ </td><td align="center">   1_ </td><td align="center">  0_ </td><td align="center">    0_ </td></tr>
    
    <tr><td align="center"><b>  4_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center">  4_ </td><td align="center">  6_ </td><td align="center">   4_ </td><td align="center">  1_ </td><td align="center">    0_ </td></tr>
    
    <tr><td align="center"><b>  5_ </b></td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  0_ </td><td align="center">  1_ </td><td align="center">  5_ </td><td align="center"> 10_ </td><td align="center">  10_ </td><td align="center">  5_ </td><td align="center">    1_ </td></tr>
    
</table></dd></dl><p>

  For the <tt><a class="func" href="../libraries/bigint.htm#sqrt(in_var_bigInteger)">sqrt</a></tt> function holds (when A >= 0_):</p><pre class="box">
    sqrt(A) * sqrt(A) &lt;= A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a>
    (sqrt(A) + 1_) * (sqrt(A) + 1_) > A
</pre><p></p>

<a name="rational"><h3>5.4 rational</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/rational.htm#rational">rational</a></tt> consists of rational numbers
  represented with an <tt><a class="type" href="#integer">integer</a></tt> numerator and an <tt><a class="type" href="#integer">integer</a></tt>
  denominator. The values of the type <tt><a class="type" href="../libraries/rational.htm#rational">rational</a></tt> are
  finite and periodical decimal numbers. Rational literals
  do not exist. If a <tt><a class="type" href="../libraries/rational.htm#rational"> rational</a></tt> operation <a class="link" href="errors.htm#OVERFLOW_ERROR">overflows</a> it raises
  the exception <tt><a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a></tt>. In <tt><a class="type" href="#integer">integer</a></tt> computations an
  overflow can only happen with very huge positive or negative
  numbers. In <tt><a class="type" href="../libraries/rational.htm#rational">rational</a></tt> computations an overflow can
  happen with small numbers. Because of widening big denominators
  can be produced easily. E.g.: <tt>1/1777 + 1/1999 = 3776/3552223</tt> .
  The <tt><a class="type" href="../libraries/rational.htm#rational">rational</a></tt> functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/rational.htm">rational.s7i</a>"</span>.
</p><pre class="tt">
    Elements:
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: numerator <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: denominator <span class="keywd">is</span> 1;
    Constants:
      <a class="type" href="../libraries/rational.htm#rational">rational</a>.<span class="var">value</span>  Default value of <a class="type" href="../libraries/rational.htm#rational">rational</a> (0/1)
    Prefix operators:
      <a class="op" href="../libraries/rational.htm#+(in_rational)">+</a>         Identity
      <a class="op" href="../libraries/rational.htm#-(in_rational)">-</a>         Change sign
    Infix operators:
      <a class="op" href="../libraries/rational.htm#(in_rational)+(in_rational)">+</a>         Addition
      <a class="op" href="../libraries/rational.htm#(in_rational)-(in_rational)">-</a>         Subtraction
      <a class="op" href="../libraries/rational.htm#(in_rational)*(in_rational)">*</a>         Multiplication
      <a class="op" href="../libraries/rational.htm#(in_rational)/(in_rational)">/</a>         Division
      <a class="op" href="../libraries/rational.htm#(in_integer)/(in_integer)">/</a>         Create <a class="type" href="../libraries/rational.htm#rational">rational</a> from numerator and denominator
                  ( Type of left operand: <a class="type" href="#integer">integer</a>,
                    Type of right operand: <a class="type" href="#integer">integer</a> )
      <a class="op" href="../libraries/rational.htm#(in_rational)**(in_integer)">**</a>        Power
                  ( <a class="type" href="../libraries/rational.htm#rational">rational</a> ** <a class="type" href="#integer">integer</a> )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)conv(ref_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/rational.htm#rational">rational</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)conv(ref_integer)">conv</a> 1 <b>&rArr;</b> 1 / 1 )
      <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a>    Conversion to <a class="type" href="#string">string</a> with specified precision
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    1/64 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 7 <b>&rArr;</b> <span class="stri">"0.0156250"</span>,
                    1/64 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 4 <b>&rArr;</b> <span class="stri">"0.0156"</span>,
                    1/64 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 2 <b>&rArr;</b> <span class="stri">"0.02"</span>,
                    355/113 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 6 <b>&rArr;</b> <span class="stri">"3.141593"</span>,
                    22/7 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 0 <b>&rArr;</b> <span class="stri">"3"</span>,
                    -1/2 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 1 <b>&rArr;</b> <span class="stri">"-1"</span>,
                    1/0 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 5 <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -1/0 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 6 <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    0/0 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 7 <b>&rArr;</b> <span class="stri">"NaN"</span>,
                    -1/2048 <a class="op" href="../libraries/rational.htm#(in_rational)digits(in_integer)">digits</a> 3 <b>&rArr;</b> <span class="stri">"0.000"</span> )
      <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a>       Conversion to a <a class="type" href="#string">string</a> in scientific notation
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    1/64 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 4 <b>&rArr;</b> <span class="stri">"1.5625e-2"</span>,
                    1/64 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"1.563e-2"</span>,
                    1/64 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"1.56e-2"</span>,
                    355/113 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"3.141593e+0"</span>,
                    22/7 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+0"</span>,
                    -1/2 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 1 <b>&rArr;</b> <span class="stri">"-5.0e-1"</span>,
                    1/0 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 5 <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -1/0 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    0/0 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 7 <b>&rArr;</b> <span class="stri">"NaN"</span>,
                    -1/2048 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"-4.883e-4"</span>,
                    -0/1 <a class="op" href="../libraries/rational.htm#(in_rational)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"0.00e+0"</span> )
      <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/rational.htm#rational">rational</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> <span class="stri">"3/5"</span> <b>&rArr;</b> 3 / 5,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> <span class="stri">"1.25"</span> <b>&rArr;</b> 5 / 4,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> <span class="stri">"0.(3)"</span> <b>&rArr;</b> 1 / 3,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> <span class="stri">"1.23(45)"</span> <b>&rArr;</b> 679 / 550,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> <span class="stri">"3.(142857)"</span> <b>&rArr;</b> 22 / 7,
                    <a class="type" href="../libraries/rational.htm#rational">rational</a> <a class="op" href="../libraries/rational.htm#(attr_rational)parse(in_string)">parse</a> <span class="stri">"0.(846153)"</span> <b>&rArr;</b> 11 / 13 )
    Relations:
      <a class="op" href="../libraries/rational.htm#(in_rational)=(in_rational)">=</a>, <a class="op" href="../libraries/rational.htm#(in_rational)<&gt;(in_rational)">&lt;></a>, <a class="op" href="../libraries/rational.htm#(in_rational)<(in_rational)">&lt;</a>, <a class="op" href="../libraries/rational.htm#(in_rational)&lt;=(in_rational)">&lt;=</a>, <a class="op" href="../libraries/rational.htm#(in_rational)&gt;(in_rational)">></a>, <a class="op" href="../libraries/rational.htm#(in_rational)&gt;=(in_rational)">>=</a>
    Functions:
      <a class="func" href="../libraries/rational.htm#abs(in_rational)">abs</a>(A)    Absolute value
      <a class="func" href="../libraries/rational.htm#rat(in_integer)">rat</a>(A)    Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/rational.htm#rational">rational</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    rat(1) <b>&rArr;</b> 1 / 1 )
      <a class="func" href="../libraries/rational.htm#rational(in_integer)">rational</a>(A)  Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/rational.htm#rational">rational</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    rational(1) <b>&rArr;</b> 1 / 1 )
      <a class="func" href="../libraries/rational.htm#rational(in_var_string)">rational</a>(A)  Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/rational.htm#rational">rational</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    rational(<span class="stri">"3/5"</span>) <b>&rArr;</b> 3 / 5,
                    rational(<span class="stri">"1.25"</span>) <b>&rArr;</b> 5 / 4,
                    rational(<span class="stri">"0.(3)"</span>) <b>&rArr;</b> 1 / 3,
                    rational(<span class="stri">"1.23(45)"</span>) <b>&rArr;</b> 679 / 550,
                    rational(<span class="stri">"3.(142857)"</span>) <b>&rArr;</b> 22 / 7,
                    rational(<span class="stri">"0.(846153)"</span>) <b>&rArr;</b> 11 / 13 )
      <a class="func" href="../libraries/rational.htm#floor(in_rational)">floor</a>(A)  Truncation towards negative infinity
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    floor(9/5) <b>&rArr;</b>  1, floor(1/1) <b>&rArr;</b>  1,
                    floor(-1/1) <b>&rArr;</b> -1, floor(-9/5) <b>&rArr;</b> -2 )
      <a class="func" href="../libraries/rational.htm#ceil(in_rational)">ceil</a>(A)   Rounding up towards positive infinity
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    ceil(6/5) <b>&rArr;</b>  2, ceil(1/1) <b>&rArr;</b>  1,
                    ceil(-1/1) <b>&rArr;</b> -1, ceil(-6/5) <b>&rArr;</b> -1 )
      <a class="func" href="../libraries/rational.htm#trunc(in_rational)">trunc</a>(A)  Truncation towards zero
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    trunc(9/5) <b>&rArr;</b>  1, trunc(1/1) <b>&rArr;</b>  1,
                    trunc(-1/1) <b>&rArr;</b> -1, trunc(-9/5) <b>&rArr;</b> -1 )
      <a class="func" href="../libraries/rational.htm#round(in_rational)">round</a>(A)  Round towards zero
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    round(1/2) <b>&rArr;</b> 1, round(-1/2) <b>&rArr;</b> -1,
                    round(2/5) <b>&rArr;</b> 0, round(-2/5) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/rational.htm#round10(in_rational,in_integer)">round10</a>(A, B)  Round with a decimal precision towards zero
                  ( Type of B: <a class="type" href="#integer">integer</a>,
                    round10(1/4, 1) <b>&rArr;</b> 3/10, round10(-1/4, 1) <b>&rArr;</b> -3/10,
                    round10(2/5, 0) <b>&rArr;</b> 0/1, round(-2/5, 0) <b>&rArr;</b> 0/1 )
      <a class="func" href="../libraries/rational.htm#str(in_rational)">str</a>(A)    Convert to a <a class="type" href="#string">string</a> with a decimal representation
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(1/3) <b>&rArr;</b> "0.(3)" )
      <a class="func" href="../libraries/rational.htm#fraction(in_rational)">fraction</a>(A)  Convert to a <a class="type" href="#string">string</a> with a fraction
                  ( Type of result: <a class="type" href="#string">string</a>,
                    fraction(rational("0.(3)")) <b>&rArr;</b> "1/3" )
      <a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a>(A, B) Minimum of two numbers.
                  ( min(2/5, 1/2) <b>&rArr;</b> 2/5 )
      <a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a>(A, B) Maximum of two numbers.
                  ( max(2/5, 1/2) <b>&rArr;</b> 1/2 )
      <a class="func" href="../libraries/rational.htm#compare(in_rational,in_rational)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    compare(19/10, 2/1) <b>&rArr;</b> -1,
                    compare(26/5, 26/5) <b>&rArr;</b> 0,
                    compare(8/1, 79/10) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/rational.htm#hashCode(in_rational)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/rational.htm#(inout_rational)+:=(in_rational)">+:=</a> B   Increment A by B
                  ( A +:= B <b>&rArr;</b> A := A + B )
      A <a class="op" href="../libraries/rational.htm#(inout_rational)-:=(in_rational)">-:=</a> B   Decrement A by B
                  ( A -:= B <b>&rArr;</b> A := A - B )
      A <a class="op" href="../libraries/rational.htm#(inout_rational)*:=(in_rational)">*:=</a> B   Multiplying copy
                  ( A *:= B <b>&rArr;</b> A := A * B )
      A <a class="op" href="../libraries/rational.htm#(inout_rational)/:=(in_rational)">/:=</a> B   Dividing copy
                  ( A /:= B <b>&rArr;</b> A := A / B )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p>
  All calculations with <tt><a class="type" href="../libraries/rational.htm#rational">rational</a></tt> numbers are done exact.
  (Without any rounding)
</p><p></p>

<a name="bigRational"><h3>5.5 bigRational</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a></tt> consists of rational numbers
  represented with an <tt><a class="type" href="#bigInteger">bigInteger</a></tt> numerator and an
  <tt><a class="type" href="#bigInteger">bigInteger</a></tt> denominator. The values of the type
  <tt><a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a></tt> are finite and periodical decimal numbers.
  BigRational literals do not exist. Although <tt><a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a></tt>
  operations cannot overflow, it can happen that there
  is not enough memory to represent a <tt><a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a></tt> value.
  In this case the exception <tt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></tt> is raised.
  The <tt><a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a></tt> functions are defined in the library
  <span class="stri">"<a class="lib" href="../libraries/bigrat.htm">bigrat.s7i</a>"</span>.
</p><pre class="tt">
    Elements:
      <span class="keywd">var</span> <a class="type" href="#bigInteger">bigInteger</a>: numerator <span class="keywd">is</span> 0_;
      <span class="keywd">var</span> <a class="type" href="#bigInteger">bigInteger</a>: denominator <span class="keywd">is</span> 1_;
    Constants:
      <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>.<span class="var">value</span>  Default value of <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> (0_/1_)
    Prefix operators:
      <a class="op" href="../libraries/bigrat.htm#+(in_bigRational)">+</a>         Identity
      <a class="op" href="../libraries/bigrat.htm#-(in_bigRational)">-</a>         Change sign
    Infix operators:
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)+(in_bigRational)">+</a>         Addition
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)-(in_bigRational)">-</a>         Subtraction
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)*(in_bigRational)">*</a>         Multiplication
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)/(in_bigRational)">/</a>         Division
      <a class="op" href="../libraries/bigrat.htm#(in_bigInteger)/(in_bigInteger)">/</a>         Create <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> from numerator and denominator
                  ( Type of left argument: <a class="type" href="#bigInteger">bigInteger</a>,
                    Type of right argument: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)**(in_integer)">**</a>        Power
                  ( <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> ** <a class="type" href="#integer">integer</a> )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)conv(in_integer)">conv</a> 1 <b>&rArr;</b> 1_ / 1_ )
      <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)conv(in_bigInteger)">conv</a> A   Conversion of <a class="type" href="#bigInteger">bigInteger</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#bigInteger">bigInteger</a>,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)conv(in_bigInteger)">conv</a> 1_ <b>&rArr;</b> 1_ / 1_ )
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a>    Conversion to <a class="type" href="#string">string</a> with specified precision
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    1_/64_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 7 <b>&rArr;</b> <span class="stri">"0.0156250"</span>,
                    1_/64_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 4 <b>&rArr;</b> <span class="stri">"0.0156"</span>,
                    1_/64_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 2 <b>&rArr;</b> <span class="stri">"0.02"</span>,
                    355_/113_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 6 <b>&rArr;</b> <span class="stri">"3.141593"</span>,
                    22_/7_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 0 <b>&rArr;</b> <span class="stri">"3"</span>,
                    -1_/2_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 1 <b>&rArr;</b> <span class="stri">"-1"</span>,
                    1_/0_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 5 <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -1_/0_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 6 <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    0_/0_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 7 <b>&rArr;</b> <span class="stri">"NaN"</span>,
                    -1_/2048_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)digits(in_integer)">digits</a> 3 <b>&rArr;</b> <span class="stri">"0.000"</span> )
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a>       Conversion to a <a class="type" href="#string">string</a> in scientific notation
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    1_/64_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 4 <b>&rArr;</b> <span class="stri">"1.5625e-2"</span>,
                    1_/64_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"1.563e-2"</span>,
                    1_/64_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"1.56e-2"</span>,
                    355_/113_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"3.141593e+0"</span>,
                    22_/7_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+0"</span>,
                    -1_/2_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 1 <b>&rArr;</b> <span class="stri">"-5.0e-1"</span>,
                    1_/0_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 5 <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -1_/0_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    0_/0_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 7 <b>&rArr;</b> <span class="stri">"NaN"</span>,
                    -1_/2048_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 3 <b>&rArr;</b> <span class="stri">"-4.883e-4"</span>,
                    -0_/1_ <a class="op" href="../libraries/bigrat.htm#(in_bigRational)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"0.00e+0"</span> )
      <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> <span class="stri">"3/5"</span <b>&rArr;</b> 3_ / 5_,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> <span class="stri">"1.25"</span> <b>&rArr;</b> 5_ / 4_,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> <span class="stri">"0.(3)"</span> <b>&rArr;</b> 1_ / 3_,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> <span class="stri">"1.23(45)"</span> <b>&rArr;</b> 679_ / 550_,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> <span class="stri">"3.(142857)"</span> <b>&rArr;</b> 22_ / 7_,
                    <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a> <a class="op" href="../libraries/bigrat.htm#(attr_bigRational)parse(in_string)">parse</a> <span class="stri">"0.(846153)"</span> <b>&rArr;</b> 11_ / 13_ )
    Relations:
      <a class="op" href="../libraries/bigrat.htm#(in_bigRational)=(in_bigRational)">=</a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)<&gt;(in_bigRational)">&lt;></a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)<(in_bigRational)">&lt;</a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)&lt;=(in_bigRational)">&lt;=</a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)&gt;(in_bigRational)">></a>, <a class="op" href="../libraries/bigrat.htm#(in_bigRational)&gt;=(in_bigRational)">>=</a>
    Functions:
      <a class="func" href="../libraries/bigrat.htm#abs(in_bigRational)">abs</a>(A)    Absolute value
      <a class="func" href="../libraries/bigrat.htm#rat(in_bigInteger)">rat</a>(A)    Conversion of <a class="type" href="#bigInteger">bigInteger</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#bigInteger">bigInteger</a>,
                    rat(1_) <b>&rArr;</b> 1_ / 1_ )
      <a class="func" href="../libraries/bigrat.htm#bigRational(in_integer)">bigRational</a>(A)  Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    bigRational(1) <b>&rArr;</b> 1_ / 1_ )
      <a class="func" href="../libraries/bigrat.htm#bigRational(in_bigInteger)">bigRational</a>(A)  Conversion of <a class="type" href="#bigInteger">bigInteger</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#bigInteger">bigInteger</a>,
                    bigRational(1_) <b>&rArr;</b> 1_ / 1_ )
      <a class="func" href="../libraries/bigrat.htm#bigRational(in_var_string)">bigRational</a>(A)  Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    bigRational(<span class="stri">"3/5"</span>) <b>&rArr;</b> 3_ / 5_,
                    bigRational(<span class="stri">"1.25"</span>) <b>&rArr;</b> 5_ / 4_,
                    bigRational(<span class="stri">"0.(3)"</span>) <b>&rArr;</b> 1_ / 3_,
                    bigRational(<span class="stri">"1.23(45)"</span>) <b>&rArr;</b> 679_ / 550_,
                    bigRational(<span class="stri">"3.(142857)"</span>) <b>&rArr;</b> 22_ / 7_,
                    bigRational(<span class="stri">"0.(846153)"</span>) <b>&rArr;</b> 11_ / 13_ )
      <a class="func" href="../libraries/bigrat.htm#floor(in_bigRational)">floor</a>(A)  Truncation towards negative infinity
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a>,
                    floor(9_/5_) <b>&rArr;</b>  1_, floor(1_/1_) <b>&rArr;</b>  1_,
                    floor(-1_/1_) <b>&rArr;</b> -1_, floor(-9_/5_) <b>&rArr;</b> -2_ )
      <a class="func" href="../libraries/bigrat.htm#ceil(in_bigRational)">ceil</a>(A)   Rounding up towards positive infinity
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a>,
                    ceil(6_/5_) <b>&rArr;</b>  2_, ceil(1_/1_) <b>&rArr;</b>  1_,
                    ceil(-1_/1_) <b>&rArr;</b> -1_, ceil(-6_/5_) <b>&rArr;</b> -1_ )
      <a class="func" href="../libraries/bigrat.htm#trunc(in_bigRational)">trunc</a>(A)  Truncation towards zero
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a>,
                    trunc(9_/5_) <b>&rArr;</b>  1_, trunc(1_/1_) <b>&rArr;</b>  1_,
                    trunc(-1_/1_) <b>&rArr;</b> -1_, trunc(-9_/5_) <b>&rArr;</b> -1_ )
      <a class="func" href="../libraries/bigrat.htm#round(in_bigRational)">round</a>(A)  Round towards zero
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a>,
                    round(1_/2_) <b>&rArr;</b> 1_, round(-1_/2_) <b>&rArr;</b> -1_,
                    round(2_/5_) <b>&rArr;</b> 0_, round(-2_/5_) <b>&rArr;</b> 0_ )
      <a class="func" href="../libraries/bigrat.htm#round10(in_bigRational,in_integer)">round10</a>(A, B)  Round with a decimal precision towards zero
                  ( Type of B: <a class="type" href="#integer">integer</a>,
                    round10(1_/4_, 1) <b>&rArr;</b> 3_/10_, round10(-1_/4_, 1) <b>&rArr;</b> -3_/10_,
                    round10(2_/5_, 0) <b>&rArr;</b> 0_/1_, round(-2_/5_, 0) <b>&rArr;</b> 0_/1_ )
      <a class="func" href="../libraries/bigrat.htm#str(in_bigRational)">str</a>(A)    Convert to a <a class="type" href="#string">string</a> with a decimal representation
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(1_/3_) <b>&rArr;</b> "0.(3)" )
      <a class="func" href="../libraries/bigrat.htm#fraction(in_bigRational)">fraction</a>(A)  Convert to a <a class="type" href="#string">string</a> with a fraction
                  ( Type of result: <a class="type" href="#string">string</a>,
                    fraction(bigRational("0.(3)")) <b>&rArr;</b> "1/3" )
      <a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a>(A, B) Minimum of two numbers.
                  ( min(2_/5_, 1_/2_) <b>&rArr;</b> 2_/5_ )
      <a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a>(A, B) Maximum of two numbers.
                  ( max(2_/5_, 1_/2_) <b>&rArr;</b> 1_/2_ )
      <a class="func" href="../libraries/bigrat.htm#compare(in_bigRational,in_bigRational)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    compare(19_/10_, 2_/1_) <b>&rArr;</b> -1,
                    compare(26_/5_, 26_/5_) <b>&rArr;</b> 0,
                    compare(8_/1_, 79_/10_) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/bigrat.htm#hashCode(in_bigRational)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/bigrat.htm#(inout_bigRational)+:=(in_bigRational)">+:=</a> B   Increment A by B
                  ( A +:= B <b>&rArr;</b> A := A + B )
      A <a class="op" href="../libraries/bigrat.htm#(inout_bigRational)-:=(in_bigRational)">-:=</a> B   Decrement A by B
                  ( A -:= B <b>&rArr;</b> A := A - B )
      A <a class="op" href="../libraries/bigrat.htm#(inout_bigRational)*:=(in_bigRational)">*:=</a> B   Multiplying copy
                  ( A *:= B <b>&rArr;</b> A := A * B )
      A <a class="op" href="../libraries/bigrat.htm#(inout_bigRational)/:=(in_bigRational)">/:=</a> B   Dividing copy
                  ( A /:= B <b>&rArr;</b> A := A / B )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p>
  All calculations with <tt><a class="type" href="../libraries/bigrat.htm#bigRational">bigRational</a></tt> numbers are done exact.
  (Without any rounding)
</p>

<a name="float"><h3>5.6 float</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/float.htm#float">float</a></tt> consists of double precision floating point
  numbers. <a class="link" href="tokens.htm#Float_literals">Float literals</a> use base 10 and contain a decimal point.
  There must be at least one digit before and after the decimal point.
  An exponent part, which is introduced with E or e, is optional.
  The exponent can be signed, but the mantissa is not. A literal does
  not have a sign, + or - are unary operations. Examples of <tt><a class="type" href="../libraries/float.htm#float">float</a></tt>
  literals are:
</p><pre class="box">
  3.14159265358979
  1.0E-12
  0.1234
</pre><p>
  The function <tt><a class="func" href="../libraries/float.htm#str(in_float)">str</a></tt> and the operators <tt><a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a></tt> and <tt><a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a></tt>
  create and accept float literals with sign. Basic <tt><a class="type" href="../libraries/float.htm#float">float</a></tt>
  functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/float.htm">float.s7i</a>"</span>.
  Trigonometric- and other mathematical functions are defined
  in the library <span class="stri">"<a class="lib" href="../libraries/math.htm">math.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/float.htm#float">float</a>.<a class="var" href="../libraries/float.htm#(attr_float)._value">value</a>  Default value of <a class="type" href="../libraries/float.htm#float">float</a> (0.0)
      <a class="var" href="../libraries/float.htm#Infinity">Infinity</a>     Positive infinity
      <a class="var" href="../libraries/float.htm#NaN">NaN</a>          Not-a-Number
      <a class="var" href="../libraries/math.htm#PI">PI</a>           Mathematical constant &pi;
      <a class="var" href="../libraries/math.htm#E">E</a>            Euler's number
    Prefix operators:
      <a class="op" href="../libraries/float.htm#+(in_float)">+</a>         Identity
      <a class="op" href="../libraries/float.htm#-(in_float)">-</a>         Change sign
    Infix operators:
      <a class="op" href="../libraries/float.htm#(in_float)+(in_float)">+</a>         Addition
      <a class="op" href="../libraries/float.htm#(in_float)-(in_float)">-</a>         Subtraction
      <a class="op" href="../libraries/float.htm#(in_float)*(in_float)">*</a>         Multiplication
      <a class="op" href="../libraries/float.htm#(in_float)/(in_float)">/</a>         Division
                  ( A / 0.0 <b>&rArr;</b>  Infinity for A > 0.0,
                    A / 0.0 <b>&rArr;</b> -Infinity for A &lt; 0.0,
                    0.0 / 0.0 <b>&rArr;</b> NaN )
      <a class="op" href="../libraries/float.htm#(in_float)**(in_float)">**</a>        Power
                  ( A ** B is okay for A > 0.0,
                    A ** B is okay for A &lt; 0.0 and B is integer,
                    A ** B <b>&rArr;</b> NaN for A &lt; 0.0 and B is not integer,
                    A ** 0.0 <b>&rArr;</b> 1.0,
                    NaN ** 0.0 <b>&rArr;</b> 1.0,
                    NaN ** B <b>&rArr;</b> NaN for B &lt;> 0.0,
                    0.0 ** B <b>&rArr;</b> 0.0 for B > 0.0,
                    0.0 ** 0.0 <b>&rArr;</b> 1.0,
                    0.0 ** B <b>&rArr;</b> Infinity for B &lt; 0.0,
                    (-0.0) ** B <b>&rArr;</b> -Infinity for B &lt; 0.0 and odd(B),
                    1.0 ** B <b>&rArr;</b> 1.0,
                    1.0 ** NaN <b>&rArr;</b> 1.0,
                    A ** NaN <b>&rArr;</b> NaN for A &lt;> 1.0 )
      <a class="op" href="../libraries/float.htm#(in_float)**(in_integer)">**</a>        Power
                  ( Type of right operand: <a class="type" href="#integer">integer</a>
                    A ** B is okay for A > 0.0,
                    A ** B is okay for A &lt; 0.0,
                    A ** 0 <b>&rArr;</b> 1.0,
                    NaN ** 0 <b>&rArr;</b> 1.0,
                    NaN ** B <b>&rArr;</b> NaN for B &lt;> 0,
                    0.0 ** B <b>&rArr;</b> 0.0 for B > 0,
                    0.0 ** 0 <b>&rArr;</b> 1.0,
                    0.0 ** B <b>&rArr;</b> Infinity for B &lt; 0,
                    (-0.0) ** B <b>&rArr;</b> -Infinity for B &lt; 0 and odd(B),
                    A ** B <b>&rArr;</b> 1.0 / A ** (-B) for B &lt; 0 )
      A <a class="op" href="../libraries/float.htm#(in_float)<<(in_integer)">&lt;&lt;</a> B    Shift left
                  ( Type of argument B: <a class="type" href="#integer">integer</a>
                    A &lt;&lt; B <b>&rArr;</b> A * 2.0 ** B,
                    A &lt;&lt; 0 <b>&rArr;</b> A,
                    0.0 &lt;&lt; B <b>&rArr;</b> 0.0 )
      A <a class="op" href="../libraries/float.htm#(in_float)&gt;&gt;(in_integer)">>></a> B    Arithmetic shift right
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A >> B <b>&rArr;</b> A / 2.0 ** B,
                    A >> 0 <b>&rArr;</b> A,
                    0.0 >> B <b>&rArr;</b> 0.0 )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/float.htm#float">float</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)conv(in_integer)">conv</a> 1 <b>&rArr;</b> 1.0 )
      <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a>    Conversion to <a class="type" href="#string">string</a> with specified precision
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    0.012345 <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 4 <b>&rArr;</b> <span class="stri">"0.0123"</span>,
                    1.2468 <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <b>&rArr;</b> <span class="stri">"1.25"</span>,
                    0.125 <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <b>&rArr;</b> <span class="stri">"0.12"</span>,
                    0.375 <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <b>&rArr;</b> <span class="stri">"0.38"</span>,
                    Infinity <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> A <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -Infinity <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> A <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    NaN <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> A <b>&rArr;</b> <span class="stri">"NaN"</span> )
      <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a>       Conversion to a <a class="type" href="#string">string</a> in scientific notation
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    0.012345 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 4 <b>&rArr;</b> <span class="stri">"1.2345e-2"</span>,
                    1.2468 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"1.25e+0"</span>,
                    3.1415 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 0 <b>&rArr;</b> <span class="stri">"3e+0"</span>,
                    0.125 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 1 <b>&rArr;</b> <span class="stri">"1.2e-1"</span>,
                    0.375 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 1 <b>&rArr;</b> <span class="stri">"3.8e-1"</span>,
                    Infinity <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 5 <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -Infinity <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 6 <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    NaN <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 7 <b>&rArr;</b> <span class="stri">"NaN"</span>,
                    -0.004 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"-4.00e-3"</span> )
      <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a>       Set the number of exponent digits in a scientific float notation.
                  ( Type of left operand: <a class="type" href="#string">string</a>,
                    Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    0.012345 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 4 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"1.2345e-02"</span>,
                    1.2468e15 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 2 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 1 <b>&rArr;</b> <span class="stri">"1.25e+15"</span>,
                    3.1415 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 0 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 3 <b>&rArr;</b> <span class="stri">"3e+000"</span>,
                    0.125 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 1 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"1.2e-01"</span>,
                    0.375 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 1 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"3.8e-01"</span>,
                    Infinity <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 5 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    -Infinity <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 6 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    NaN <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 7 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"NaN"</span>,
                    -0.004 <a class="op" href="../libraries/float.htm#(in_float)sci(in_integer)">sci</a> 2 <a class="op" href="../libraries/float.htm#(in_string)exp(in_integer)">exp</a> 2 <b>&rArr;</b> <span class="stri">"-4.00e-03"</span> )
      <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/float.htm#float">float</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"1.2345"</span>    <b>&rArr;</b>  1.2345,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"1.2345e6"</span>  <b>&rArr;</b>  1234500.0,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"-1.0e-308"</span> <b>&rArr;</b> -1.0e-308,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"1"</span>         <b>&rArr;</b>  1.0,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"2."</span>        <b>&rArr;</b>  2.0,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">".5"</span>        <b>&rArr;</b>  0.5,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"-.25"</span>      <b>&rArr;</b> -0.25,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"Infinity"</span>  <b>&rArr;</b>  Infinity,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"-Infinity"</span> <b>&rArr;</b> -Infinity,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"NaN"</span>       <b>&rArr;</b>  NaN,
                    <a class="type" href="../libraries/float.htm#float">float</a> <a class="op" href="../libraries/float.htm#(attr_float)parse(in_string)">parse</a> <span class="stri">"3.14PI"</span>    <b>&rArr;</b>  EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/float.htm#(in_float)=(in_float)">=</a>, <a class="op" href="../libraries/float.htm#(in_float)<&gt;(in_float)">&lt;></a>, <a class="op" href="../libraries/float.htm#(in_float)<(in_float)">&lt;</a>, <a class="op" href="../libraries/float.htm#(in_float)&lt;=(in_float)">&lt;=</a>, <a class="op" href="../libraries/float.htm#(in_float)&gt;(in_float)">></a>, <a class="op" href="../libraries/float.htm#(in_float)&gt;=(in_float)">>=</a>
    Functions:
      <a class="func" href="../libraries/float.htm#abs(in_float)">abs</a>(A)    Absolute value
      <a class="func" href="../libraries/float.htm#flt(in_integer)">flt</a>(A)    Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/float.htm#float">float</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    flt(1) <b>&rArr;</b> 1.0 )
      <a class="func" href="../libraries/float.htm#float(in_integer)">float</a>(A)  Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/float.htm#float">float</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    float(1) <b>&rArr;</b> 1.0 )
      <a class="func" href="../libraries/float.htm#float(in_string)">float</a>(A)  Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/float.htm#float">float</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    float(<span class="stri">"1.2345"</span>)    <b>&rArr;</b>  1.2345,
                    float(<span class="stri">"1.2345e6"</span>)  <b>&rArr;</b>  1234500.0,
                    float(<span class="stri">"-1.0e-308"</span>) <b>&rArr;</b> -1.0e-308,
                    float(<span class="stri">"1"</span>)         <b>&rArr;</b>  1.0,
                    float(<span class="stri">"2."</span>)        <b>&rArr;</b>  2.0,
                    float(<span class="stri">".5"</span>)        <b>&rArr;</b>  0.5,
                    float(<span class="stri">"-.25"</span>)      <b>&rArr;</b> -0.25,
                    float(<span class="stri">"Infinity"</span>)  <b>&rArr;</b>  Infinity,
                    float(<span class="stri">"-Infinity"</span>) <b>&rArr;</b> -Infinity,
                    float(<span class="stri">"NaN"</span>)       <b>&rArr;</b>  NaN,
                    float(<span class="stri">"3.14PI"</span>)    <b>&rArr;</b>  EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/math.htm#floor(in_float)">floor</a>(A)  Truncation towards negative infinity
                  ( floor( 1.8) <b>&rArr;</b>  1.0, floor( 1.0) <b>&rArr;</b>  1.0,
                    floor(-1.0) <b>&rArr;</b> -1.0, floor(-1.2) <b>&rArr;</b> -2.0,
                    floor( 0.9) <b>&rArr;</b>  0.0, floor(-0.1) <b>&rArr;</b> -1.0 )
      <a class="func" href="../libraries/math.htm#ceil(in_float)">ceil</a>(A)   Rounding up towards positive infinity
                  ( ceil( 1.2) <b>&rArr;</b>  2.0, ceil( 1.0) <b>&rArr;</b>  1.0,
                    ceil(-1.8) <b>&rArr;</b> -1.0, ceil(-1.0) <b>&rArr;</b> -1.0,
                    ceil( 0.1) <b>&rArr;</b>  1.0, ceil(-0.9) <b>&rArr;</b>  0.0 )
      <a class="func" href="../libraries/float.htm#trunc(in_float)">trunc</a>(A)  Truncation towards zero
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    trunc( 1.8) <b>&rArr;</b>  1, trunc( 1.0) <b>&rArr;</b>  1,
                    trunc(-1.8) <b>&rArr;</b> -1, trunc(-1.0) <b>&rArr;</b> -1,
                    trunc( 0.9) <b>&rArr;</b>  0, trunc(-0.9) <b>&rArr;</b>  0 )
      <a class="func" href="../libraries/float.htm#round(in_float)">round</a>(A)  Round towards zero
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    round(1.5) <b>&rArr;</b> 2, round(-1.5) <b>&rArr;</b> -2,
                    round(0.5) <b>&rArr;</b> 1, round(-0.5) <b>&rArr;</b> -1,
                    round(0.4) <b>&rArr;</b> 0, round(-0.4) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/float.htm#str(in_float)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(Infinity) <b>&rArr;</b> <span class="stri">"Infinity"</span>,
                    str(-Infinity) <b>&rArr;</b> <span class="stri">"-Infinity"</span>,
                    str(NaN) <b>&rArr;</b> <span class="stri">"NaN"</span> )
      <a class="func" href="../libraries/float.htm#isNaN(in_float)">isNaN</a>(A)  Check if A is Not-a-Number
      <a class="func" href="../libraries/float.htm#isNegativeZero(in_float)">isNegativeZero</a>(A)   Check if A is negative zero (-0.0)
      <a class="func" href="../libraries/float.htm#isPositiveZero(in_float)">isPositiveZero</a>(A)   Check if A is +0.0
      <a class="func" href="../libraries/math.htm#sin(in_float)">sin</a>(A)    Sine
      <a class="func" href="../libraries/math.htm#cos(in_float)">cos</a>(A)    Cosine
      <a class="func" href="../libraries/math.htm#tan(in_float)">tan</a>(A)    Tangent
      <a class="func" href="../libraries/math.htm#exp(in_float)">exp</a>(A)    Exponential function
      <a class="func" href="../libraries/math.htm#expm1(in_float)">expm1</a>(A)  Compute <a class="func" href="../libraries/math.htm#exp(in_float)">exp</a>(x) - 1.0
      <a class="func" href="../libraries/math.htm#log(in_float)">log</a>(A)    Natural logarithm
                  ( log(A) is okay for A > 0.0,
                    log(1.0)  <b>&rArr;</b>  0.0,
                    log(0.0)  <b>&rArr;</b> -Infinity,
                    log(-1.0) <b>&rArr;</b>  NaN )
      <a class="func" href="../libraries/math.htm#log1p(in_float)">log1p</a>(A)  Compute <a class="func" href="../libraries/math.htm#log(in_float)">log</a>(1.0 + x)
                  ( log1p(A) is okay for A > -1.0,
                    log1p(0.0)  <b>&rArr;</b>  0.0,
                    log1p(-1.0)  <b>&rArr;</b> -Infinity,
                    log1p(-2.0) <b>&rArr;</b>  NaN )
      <a class="func" href="../libraries/math.htm#log10(in_float)">log10</a>(A)  Base 10 logarithm
                  ( log10(A) is okay for A > 0.0,
                    log10(1.0)  <b>&rArr;</b>  0.0,
                    log10(0.0)  <b>&rArr;</b> -Infinity,
                    log10(-1.0) <b>&rArr;</b>  NaN )
      <a class="func" href="../libraries/math.htm#log2(in_float)">log2</a>(A)  Base 2 logarithm
                  ( log2(A) is okay for A > 0.0,
                    log2(1.0)  <b>&rArr;</b>  0.0,
                    log2(0.0)  <b>&rArr;</b> -Infinity,
                    log2(-1.0) <b>&rArr;</b>  NaN )
      <a class="func" href="../libraries/math.htm#sqrt(in_float)">sqrt</a>(A)   Square root
                  ( sqrt(A) is okay for A >= 0.0,
                    sqrt(-1.0) <b>&rArr;</b> NaN )
      <a class="func" href="../libraries/math.htm#asin(in_float)">asin</a>(A)   Inverse sine
                  ( asin(A) is okay for A >= -1.0 and A &lt;= 1.0,
                    asin(2.0) <b>&rArr;</b> NaN )
      <a class="func" href="../libraries/math.htm#acos(in_float)">acos</a>(A)   Inverse cosine
                  ( acos(A) is okay for A >= -1.0 and A &lt;= 1.0,
                    acos(2.0) <b>&rArr;</b> NaN )
      <a class="func" href="../libraries/math.htm#atan(in_float)">atan</a>(A)   Inverse tangent
      <a class="func" href="../libraries/math.htm#atan2(in_float,in_float)">atan2</a>(A, B) Inverse tangent of A / B
      <a class="func" href="../libraries/math.htm#sinh(in_float)">sinh</a>(A)   Hyperbolic sine
      <a class="func" href="../libraries/math.htm#cosh(in_float)">cosh</a>(A)   Hyperbolic cosine
      <a class="func" href="../libraries/math.htm#tanh(in_float)">tanh</a>(A)   Hyperbolic tangent
      <a class="func" href="../libraries/float.htm#rand(in_float,in_float)">rand</a>(A, B) Random number in the range [A, B)
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random number such that
                    A &lt;= rand(A, B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> rand(A, B) &lt; B holds.
                    rand(A, A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    rand(1.0, 0.0) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/integer.htm#min(in_aType,in_aType)">min</a>(A, B) Minimum of two numbers.
                  ( min(2.5, 4.5) <b>&rArr;</b> 2.5 )
      <a class="func" href="../libraries/integer.htm#max(in_aType,in_aType)">max</a>(A, B) Maximum of two numbers.
                  ( max(2.5, 4.5) <b>&rArr;</b> 4.5 )
      <a class="func" href="../libraries/float.htm#compare(in_float,in_float)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    compare(1.9, 2.1) <b>&rArr;</b> -1,
                    compare(5.3, 5.3) <b>&rArr;</b> 0,
                    compare(7.8, 7.7) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/float.htm#hashCode(in_float)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/float.htm#(inout_float)+:=(in_float)">+:=</a> B   Increment A by B
                  ( A +:= B <b>&rArr;</b> A := A + B )
      A <a class="op" href="../libraries/float.htm#(inout_float)-:=(in_float)">-:=</a> B   Decrement A by B
                  ( A -:= B <b>&rArr;</b> A := A - B )
      A <a class="op" href="../libraries/float.htm#(inout_float)*:=(in_float)">*:=</a> B   Multiplying copy
                  ( A *:= B <b>&rArr;</b> A := A * B )
      A <a class="op" href="../libraries/float.htm#(inout_float)/:=(in_float)">/:=</a> B   Dividing copy
                  ( A /:= B <b>&rArr;</b> A := A / B )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="complex"><h3>5.7 complex</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/complex.htm#complex">complex</a></tt> consists of complex numbers represented
  with a <tt><a class="type" href="#float">float</a></tt> real part and a <tt><a class="type" href="#float">float</a></tt> imaginary part.
  Complex literals do not exist. The <tt><a class="type" href="../libraries/complex.htm#complex">complex</a></tt> functions are
  defined in the library <span class="stri">"<a class="lib" href="../libraries/complex.htm">complex.s7i</a>"</span>.
</p><pre class="tt">
    Elements:
      <span class="keywd">var</span> <a class="type" href="#float">float</a>: re <span class="keywd">is</span> 0.0;
      <span class="keywd">var</span> <a class="type" href="#float">float</a>: im <span class="keywd">is</span> 0.0;
    Constants:
      <a class="type" href="../libraries/complex.htm#complex">complex</a>.<span class="var">value</span>  Default value of <a class="type" href="../libraries/complex.htm#complex">complex</a> (complex(0.0))
    Prefix operators:
      <a class="op" href="../libraries/complex.htm#+(in_complex)">+</a>         Identity
      <a class="op" href="../libraries/complex.htm#-(in_complex)">-</a>         Change sign
      <a class="op" href="../libraries/complex.htm#conj(in_complex)">conj</a>      Complex conjugate
    Infix operators:
      <a class="op" href="../libraries/complex.htm#(in_complex)+(in_complex)">+</a>         Addition
      <a class="op" href="../libraries/complex.htm#(in_complex)-(in_complex)">-</a>         Subtraction
      <a class="op" href="../libraries/complex.htm#(in_complex)*(in_complex)">*</a>         Multiplication
      <a class="op" href="../libraries/complex.htm#(in_complex)/(in_complex)">/</a>         Division
                  ( A / complex(0.0) <b>&rArr;</b> complex(NaN, NaN) )
      <a class="op" href="../libraries/complex.htm#(in_complex)**(in_integer)">**</a>        Power
                  ( Type of right operand: <a class="type" href="#integer">integer</a>
                    A ** B is okay for A > complex(0.0),
                    A ** B is okay for A &lt; complex(0.0),
                    A ** 0 <b>&rArr;</b> complex(1.0),
                    complex(0.0) ** B <b>&rArr;</b> complex(0.0) for B > 0,
                    complex(0.0) ** 0 <b>&rArr;</b> complex(1.0),
                    complex(0.0) ** B <b>&rArr;</b> complex(Infinity, NaN) for B &lt; 0 )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/complex.htm#complex">complex</a> <a class="op" href="../libraries/complex.htm#(attr_complex)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/complex.htm#complex">complex</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/complex.htm#complex">complex</a> <a class="op" href="../libraries/complex.htm#(attr_complex)conv(in_integer)">conv</a> A <b>&rArr;</b> complex(float(A)) )
      <a class="type" href="../libraries/complex.htm#complex">complex</a> <a class="op" href="../libraries/complex.htm#(attr_complex)conv(in_float)">conv</a> A   Conversion of <a class="type" href="#float">float</a> to <a class="type" href="../libraries/complex.htm#complex">complex</a>
                  ( Type of argument A: <a class="type" href="#float">float</a>,
                    <a class="type" href="../libraries/complex.htm#complex">complex</a> <a class="op" href="../libraries/complex.htm#(attr_complex)conv(in_float)">conv</a> A <b>&rArr;</b> complex(A) )
      <a class="op" href="../libraries/complex.htm#(in_complex)digits(in_integer)">digits</a>    Conversion to <a class="type" href="#string">string</a> with specified precision
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    complex(3.1415) <a class="op" href="../libraries/complex.htm#(in_complex)digits(in_integer)">digits</a> 2 <b>&rArr;</b> <span class="stri">"3.14+0.00i"</span> )
      <a class="op" href="../libraries/complex.htm#(in_complex)sci(in_integer)">sci</a>       Conversion to a <a class="type" href="#string">string</a> in scientific notation
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    complex(3.1415) <a class="op" href="../libraries/complex.htm#(in_complex)sci(in_integer)">sci</a> 2 <b>&rArr;</b> <span class="stri">"3.14e+0+0.00e+0i"</span> )
      <a class="type" href="../libraries/complex.htm#complex">complex</a> <a class="op" href="../libraries/complex.htm#(attr_complex)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/complex.htm#complex">complex</a>
                  ( Type of argument A: <a class="type" href="#string">string</a> )
    Relations:
      <a class="op" href="../libraries/complex.htm#(ref_complex)=(ref_complex)">=</a>, <a class="op" href="../libraries/complex.htm#(ref_complex)<&gt;(ref_complex)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/complex.htm#abs(in_complex)">abs</a>(A)    Absolute value
                  ( Type of result: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/complex.htm#sqrAbs(in_complex)">sqrAbs</a>(A) Square of absolute value
                  ( Type of result: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/complex.htm#arg(in_complex)">arg</a>(A)    Argument (=angle of the polar form of A)
                  ( Type of result: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/complex.htm#complex(in_float,in_float)">complex</a>(A, B)  Return a <a class="type" href="../libraries/complex.htm#complex">complex</a> number from its real and imaginary part
                  ( Type of argument A: <a class="type" href="#float">float</a>,
                    Type of argument B: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/complex.htm#complex(in_float)">complex</a>(A)  Return a <a class="type" href="../libraries/complex.htm#complex">complex</a> number from its real part
                  ( Type of argument A: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/complex.htm#complex(in_integer)">complex</a>(A)  Return a <a class="type" href="../libraries/complex.htm#complex">complex</a> number from its real part
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/complex.htm#polar(in_float,in_float)">polar</a>(A, B)  Return a <a class="type" href="../libraries/complex.htm#complex">complex</a> number from polar coordinates
                  ( Type of argument A: <a class="type" href="#float">float</a>,
                    Type of argument B: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/complex.htm#str(in_complex)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(complex(1.125)) <b>&rArr;</b> <span class="stri">"1.125+0.0i"</span> )
      <a class="func" href="../libraries/complex.htm#compare(in_complex,in_complex)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/complex.htm#hashCode(in_complex)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/complex.htm#(inout_complex)+:=(in_complex)">+:=</a> B   Increment A by B
                  ( A +:= B <b>&rArr;</b> A := A + B )
      A <a class="op" href="../libraries/complex.htm#(inout_complex)-:=(in_complex)">-:=</a> B   Decrement A by B
                  ( A -:= B <b>&rArr;</b> A := A - B )
      A <a class="op" href="../libraries/complex.htm#(inout_complex)*:=(in_complex)">*:=</a> B   Multiplying copy
                  ( A *:= B <b>&rArr;</b> A := A * B )
      A <a class="op" href="../libraries/complex.htm#(inout_complex)/:=(in_complex)">/:=</a> B   Dividing copy
                  ( A /:= B <b>&rArr;</b> A := A / B )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="char"><h3>5.8 char</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/char.htm#char">char</a></tt> describes Unicode characters encoded
  with UTF-32. In the source file a <a class="link" href="tokens.htm#Character_literals">character literal</a> is
  written as UTF-8 encoded Unicode character enclosed in
  single quotes. <a name="escape_sequences"></a>In order to represent non-printable
  characters and certain printable characters the following
  escape sequences may be used.
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td>audible alert   </td> <td width="20"></td><td>BEL     </td> <td width="20"></td><td><tt><span class="stri">\a</span></tt></td></tr>
    <tr><td>backspace       </td> <td width="20"></td><td>BS      </td> <td width="20"></td><td><tt><span class="stri">\b</span></tt></td></tr>
    <tr><td>escape          </td> <td width="20"></td><td>ESC     </td> <td width="20"></td><td><tt><span class="stri">\e</span></tt></td></tr>
    <tr><td>formfeed        </td> <td width="20"></td><td>FF      </td> <td width="20"></td><td><tt><span class="stri">\f</span></tt></td></tr>
    <tr><td>newline         </td> <td width="20"></td><td>NL (LF) </td> <td width="20"></td><td><tt><span class="stri">\n</span></tt></td></tr>
    <tr><td>carriage return </td> <td width="20"></td><td>CR      </td> <td width="20"></td><td><tt><span class="stri">\r</span></tt></td></tr>
    <tr><td>horizontal tab  </td> <td width="20"></td><td>HT      </td> <td width="20"></td><td><tt><span class="stri">\t</span></tt></td></tr>
    <tr><td>vertical tab    </td> <td width="20"></td><td>VT      </td> <td width="20"></td><td><tt><span class="stri">\v</span></tt></td></tr>
    <tr><td>backslash       </td> <td width="20"></td><td>(\)     </td> <td width="20"></td><td><tt><span class="stri">\\</span></tt></td></tr>
    <tr><td>apostrophe      </td> <td width="20"></td><td>(')     </td> <td width="20"></td><td><tt><span class="stri">\'</span></tt></td></tr>
    <tr><td>double quote    </td> <td width="20"></td><td>(")     </td> <td width="20"></td><td><tt><span class="stri">\"</span></tt></td></tr>
    <tr><td>control-A       </td> <td width="20"></td><td>        </td> <td width="20"></td><td><tt><span class="stri">\A</span></tt></td></tr>
    <tr><td>  ...</td></tr>
    <tr><td>control-Z       </td> <td width="20"></td><td>        </td> <td width="20"></td><td><tt><span class="stri">\Z</span></tt></td></tr>
</table></dd></dl><p>
  Additionally the following escape sequence can be used:
</p><ul>
    <li>A backslash followed by an integer literal and a semicolon
      is interpreted as character with the specified ordinal number.
      Note that the integer literal is interpreted decimal unless
      it is written as <a class="link" href="#based_integer">based integer</a>.</li>
</ul><p>
  Examples of character literals are:
</p><pre class="box">
    <span class="stri">'a'</span>   <span class="stri">' '</span>   <span class="stri">'\n'</span>   <span class="stri">'!'</span>   <span class="stri">'\\'</span>   <span class="stri">'2'</span>   <span class="stri">'"'</span>   <span class="stri">'\"'</span>   <span class="stri">'\''</span>   <span class="stri">'\8;'</span>
</pre><p>
  To use characters beyond ASCII (which is a subset of Unicode)
  in the source file make sure that the editor uses UTF-8
  encoded characters. The <tt><a class="type" href="../libraries/char.htm#char">char</a></tt> functions are defined in
  the library <span class="stri">"<a class="lib" href="../libraries/char.htm">char.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/char.htm#char">char</a>.<a class="var" href="../libraries/char.htm#(attr_char)._value">value</a>  Default value of <a class="type" href="../libraries/char.htm#char">char</a> (<span class="stri">' '</span>)
    Infix operators:
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/char.htm#char">char</a> <a class="op" href="../libraries/char.htm#(attr_char)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/char.htm#char">char</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/char.htm#char">char</a> <a class="op" href="../libraries/char.htm#(attr_char)conv(in_integer)">conv</a> 65 <b>&rArr;</b> 'A' )
      <a class="type" href="../libraries/char.htm#char">char</a> <a class="op" href="../libraries/char.htm#(attr_char)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/char.htm#char">char</a>
                  ( Type of argument A: <a class="type" href="#string">string</a> )
    Relations:
      <a class="op" href="../libraries/char.htm#(in_char)=(in_char)">=</a>, <a class="op" href="../libraries/char.htm#(in_char)<&gt;(in_char)">&lt;></a>, <a class="op" href="../libraries/char.htm#(in_char)<(in_char)">&lt;</a>, <a class="op" href="../libraries/char.htm#(in_char)&lt;=(in_char)">&lt;=</a>, <a class="op" href="../libraries/char.htm#(in_char)&gt;(in_char)">></a>, <a class="op" href="../libraries/char.htm#(in_char)&gt;=(in_char)">>=</a>
    Functions:
      <a class="func" href="../libraries/char.htm#ord(in_char)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/char.htm#integer(in_char)">integer</a>(A)  Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/char.htm#chr(in_integer)">chr</a>(A)    Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/char.htm#char">char</a>
                  ( Type of argument: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/char.htm#char(in_integer)">char</a>(A)   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/char.htm#char">char</a>
                  ( Type of argument: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/char.htm#char(in_string)">char</a>(A)   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/char.htm#char">char</a>
                  ( Type of argument A: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/char.htm#succ(in_char)">succ</a>(A)   Successor
                  ( succ(A) <b>&rArr;</b> chr(succ(ord(A))) )
      <a class="func" href="../libraries/char.htm#pred(in_char)">pred</a>(A)   Predecessor
                  ( pred(A) <b>&rArr;</b> chr(pred(ord(A))) )
      <a class="func" href="../libraries/char.htm#str(in_char)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(<span class="stri">'A'</span>) <b>&rArr;</b> <span class="stri">"A"</span> )
      <a class="func" href="../libraries/char.htm#literal(in_char)">literal</a>(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#string">string</a>,
                    literal(<span class="stri">'A'</span>) <b>&rArr;</b> <span class="stri">"'A'"</span> )
      <a class="func" href="../libraries/char.htm#upper(in_char)">upper</a>(A)  Conversion to upper case character
                  ( upper(<span class="stri">'A'</span>) <b>&rArr;</b> <span class="stri">'A'</span>,
                    upper(<span class="stri">'z'</span>) <b>&rArr;</b> <span class="stri">'Z'</span> )
      <a class="func" href="../libraries/char.htm#lower(in_char)">lower</a>(A)  Conversion to lower case character
                  ( lower(<span class="stri">'A'</span>) <b>&rArr;</b> <span class="stri">'a'</span>,
                    lower(<span class="stri">'z'</span>) <b>&rArr;</b> <span class="stri">'z'</span> )
      <a class="func" href="../libraries/char.htm#isLetter(in_char)">isLetter</a>  Is it an alphabetic Unicode character
                  ( isLetter(<span class="stri">'A'</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    isLetter(<span class="stri">'\16#4e2d;'</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    isLetter(<span class="stri">'4'</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    isLetter(<span class="stri">'+'</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    isLetter(<span class="stri">'\t'</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    isLetter(KEY_LEFT) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    isLetter(<a class="var" href="../libraries/char.htm#EOF">EOF</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a class="func" href="../libraries/char.htm#width(in_char)">width</a>  Number of screen columns occupied by a Unicode character
                  ( width(<span class="stri">'\n'</span>) <b>&rArr;</b> 0,
                    width(<span class="stri">'\t'</span>) <b>&rArr;</b> 0,
                    width(KEY_LEFT) <b>&rArr;</b> 0,
                    width(<a class="var" href="../libraries/char.htm#EOF">EOF</a>) <b>&rArr;</b> 0 )
                    width(<span class="stri">'A'</span>) <b>&rArr;</b> 1,
                    width(<span class="stri">'\16#4e2d;'</span>) <b>&rArr;</b> 2 )
      <a class="func" href="../libraries/char.htm#rand(in_char,in_char)">rand</a>(A, B) Random character in the range [A, B]
                 The random values are uniform distributed.
                  ( rand(A, B) returns a random character such that
                    A &lt;= rand(A, B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> rand(A, B) &lt;= B holds.
                    rand(A, A) <b>&rArr;</b> A,
                    rand(<span class="stri">'B'</span>, <span class="stri">'A'</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/char.htm#compare(in_char,in_char)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    compare(<span class="stri">'A'</span>, <span class="stri">'B'</span>) <b>&rArr;</b> -1,
                    compare(<span class="stri">'A'</span>, <span class="stri">'A'</span>) <b>&rArr;</b> 0,
                    compare(<span class="stri">'B'</span>, <span class="stri">'A'</span>) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/char.htm#hashCode(in_char)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/char.htm#incr(inout_char)">incr</a>(A)   Increment
                  ( incr(A) <b>&rArr;</b> A := succ(A) )
      <a class="func" href="../libraries/char.htm#decr(inout_char)">decr</a>(A)   Decrement
                  ( decr(A) <b>&rArr;</b> A := pred(A) )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="string"><h3>5.9 string</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/string.htm#string">string</a></tt> describes sequences of Unicode characters
  (including the empty string). The characters in the <tt><a class="type" href="../libraries/string.htm#string">string</a></tt>
  use the UTF-32 encoding. Strings are not <tt><span class="stri">'\0;'</span></tt> terminated.
  Therefore they can also contain binary data. Although <tt><a class="type" href="../libraries/string.htm#string">string</a></tt>s
  are allowed to grow very big, it can happen that there is not
  enough memory to represent a <tt><a class="type" href="../libraries/string.htm#string">string</a></tt> value. In this case the
  exception <tt><a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a></tt> is raised. In the source file a <a class="link" href="tokens.htm#String_literals">string
  literal</a> is a sequence of UTF-8 encoded Unicode characters
  surrounded by double quotes.
</p><p>
  To represent control characters and certain other characters
  in strings the same <a class="link" href="#escape_sequences">escape sequences</a> as for character literals
  may be used. E.g.: Quotation characters (") inside strings can
  be represented by preceding them with a backslash ( \" ).
  Additionally there is the following possibility:
</p><ul>
    <li><a name="string_continuation">Two backslashes with a sequence of blanks, horizontal tabs,
      carriage returns, new lines and <a class="link" href="tokens.htm#Line_comments">line comments</a> between them
      are completely ignored. The ignored characters are not part
      of the string. This can be used to continue a string in the
      following line. Note that in this case the leading spaces
      in the new line are not part of the string. It is an <a class="link" href="errors.htm#WRONG_STRING_CONTINUATION">error</a>
      if a backslash is followed by a sequence of white-space and
      there is not a second backslash which ends the sequence.
      Although this possibility exists also for character literals
      it is mentioned here, since it makes more sense to use it
      with string literals</li>
</ul><p>
  Examples of string literals are:
</p><pre class="box">
    <span class="stri">""</span>   <span class="stri">" "</span>   <span class="stri">"\""</span>   <span class="stri">"'"</span>   <span class="stri">"Gold"</span>   <span class="stri">"A\"B !"</span>   <span class="stri">"Euro: \8364;"</span>   <span class="stri">"CRLF\r\n"</span>
</pre><p>
  To use characters beyond ASCII (which is a subset of Unicode)
  in the source file make sure that the editor uses UTF-8
  encoded characters. The <tt><a class="type" href="../libraries/string.htm#string">string</a></tt> functions are defined in
  the library <span class="stri">"<a class="lib" href="../libraries/string.htm">string.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/string.htm#string">string</a>.<a class="var" href="../libraries/string.htm#(attr_string)._value">value</a>  Default value of <a class="type" href="../libraries/string.htm#string">string</a> (<span class="stri">""</span>)
    Infix operators:
      <a class="op" href="../libraries/string.htm#(in_string)&(in_string)">&amp;</a>         String concatenation
                  ( <span class="stri">"All "</span> &amp; <span class="stri">"OK"</span> <b>&rArr;</b> <span class="stri">"All OK"</span> )
      <a class="op" href="../libraries/string.htm#(in_string)<&(in_string)">&lt;&amp;</a>        String concatenation with weak priority
                Overloaded for various types with <a class="func" href="../libraries/enable_io.htm#enable_output(in_type)">enable_output</a> or <a class="func" href="../libraries/enable_io.htm#enable_io(in_type)">enable_io</a>
                  ( write(<span class="stri">"i="</span> &lt;&amp; i <a class="op" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 2 <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a> 6 &lt;&amp; <span class="stri">" $"</span>); )
      <a class="op" href="../libraries/string.htm#(in_string)mult(in_integer)">mult</a>      String multiplication
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    <span class="stri">"LA"</span> <a class="op" href="../libraries/string.htm#(in_string)mult(in_integer)">mult</a> 3 <b>&rArr;</b> <span class="stri">"LALALA"</span>,
                    <span class="stri">"WORD"</span> <a class="op" href="../libraries/string.htm#(in_string)mult(in_integer)">mult</a> 0 <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"ANY"</span> <a class="op" href="../libraries/string.htm#(in_string)mult(in_integer)">mult</a> -1 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a>      Left padding with spaces
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a>  8 <b>&rArr;</b> <span class="stri">"   HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a>  6 <b>&rArr;</b> <span class="stri">" HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a>  5 <b>&rArr;</b> <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a>  4 <b>&rArr;</b> <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a>  0 <b>&rArr;</b> <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad(in_integer)">lpad</a> -8 <b>&rArr;</b> <span class="stri">"HELLO"</span> )
      <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a>     Left padding with zeroes
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    <span class="stri">"12"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a>  5 <b>&rArr;</b> <span class="stri">"00012"</span>,
                    <span class="stri">"12"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a>  3 <b>&rArr;</b> <span class="stri">"012"</span>,
                    <span class="stri">"12"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a>  2 <b>&rArr;</b> <span class="stri">"12"</span>,
                    <span class="stri">"12"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a>  1 <b>&rArr;</b> <span class="stri">"12"</span>,
                    <span class="stri">"12"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a>  0 <b>&rArr;</b> <span class="stri">"12"</span>,
                    <span class="stri">"12"</span> <a class="op" href="../libraries/string.htm#(in_string)lpad0(in_integer)">lpad0</a> -5 <b>&rArr;</b> <span class="stri">"12"</span> )
      <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a>      Right padding with spaces
                  ( Type of right operand: <a class="type" href="#integer">integer</a>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a>  8 <b>&rArr;</b> <span class="stri">"HELLO   "</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a>  6 <b>&rArr;</b> <span class="stri">"HELLO "</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a>  5 <b>&rArr;</b> <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a>  4 <b>&rArr;</b> <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a>  0 <b>&rArr;</b> <span class="stri">"HELLO"</span>,
                    <span class="stri">"HELLO"</span> <a class="op" href="../libraries/string.htm#(in_string)rpad(in_integer)">rpad</a> -8 <b>&rArr;</b> <span class="stri">"HELLO"</span> )
      <a class="type" href="../libraries/string.htm#string">string</a> <a class="op" href="../libraries/string.htm#(attr_string)parse(in_string)">parse</a> A   Identity
    Indices:
      <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)]">[</a> A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)]">]</a>     Access one character
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#char">char</a>,
                    <span class="stri">"abcde"</span>[1] <b>&rArr;</b> <span class="stri">'a'</span>,
                    <span class="stri">"abcde"</span>[5] <b>&rArr;</b> <span class="stri">'e'</span>,
                    <span class="stri">"abcde"</span>[0] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[6] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">[</a> A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">..</a> B <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">]</a> Access a substring from position A to B
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a>,
                    S<a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">[</a>A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">..</a> B<a class="op" href="../libraries/string.htm#(in_string)[(in_integer)..(in_integer)]">]</a> is okay for A >= 1 and B >= pred(A),
                    <span class="stri">"abcde"</span>[2 .. 4] <b>&rArr;</b> <span class="stri">"bcd"</span>,
                    <span class="stri">"abcde"</span>[2 .. 7] <b>&rArr;</b> <span class="stri">"bcde"</span>,
                    <span class="stri">"abcde"</span>[4 .. 3] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[4 .. 2] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[6 .. 8] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[1 .. 3] <b>&rArr;</b> <span class="stri">"abc"</span>,
                    <span class="stri">"abcde"</span>[0 .. 3] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[1 .. 0] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[1 .. -1] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">[</a> A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">len</a> B <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">]</a> Access a substring from position A with length B
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a>,
                    S<a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">[</a>A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">len</a> B<a class="op" href="../libraries/string.htm#(in_string)[(in_integer)len(in_integer)]">]</a> is okay for A >= 1 and B >= 0,
                    <span class="stri">"abcde"</span>[2 <span class="keywd">len</span> 3] <b>&rArr;</b> <span class="stri">"bcd"</span>,
                    <span class="stri">"abcde"</span>[2 <span class="keywd">len</span> 5] <b>&rArr;</b> <span class="stri">"bcde"</span>,
                    <span class="stri">"abcde"</span>[3 <span class="keywd">len</span> 0] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[6 <span class="keywd">len</span> 2] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[3 <span class="keywd">len</span> -1] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[1 <span class="keywd">len</span> 2] <b>&rArr;</b> <span class="stri">"ab"</span>,
                    <span class="stri">"abcde"</span>[0 <span class="keywd">len</span> 2] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">[</a> A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">fixLen</a> B <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">]</a> Access a substring from position A with guaranteed length B
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a>,
                    S<a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">[</a>A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">fixLen</a> B<a class="op" href="../libraries/string.htm#(in_string)[(in_integer)fixLen(in_integer)]">]</a> is okay for A >= 1 and A <= length(S) and
                          B >= 0 and pred(A + B) <= length(S),
                    <span class="stri">"abcde"</span>[2 <span class="keywd">fixLen</span> 3] <b>&rArr;</b> <span class="stri">"bcd"</span>,
                    <span class="stri">"abcde"</span>[2 <span class="keywd">fixLen</span> 5] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[3 <span class="keywd">fixLen</span> 0] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[6 <span class="keywd">fixLen</span> 2] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[3 <span class="keywd">fixLen</span> -1] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    <span class="stri">"abcde"</span>[1 <span class="keywd">fixLen</span> 2] <b>&rArr;</b> <span class="stri">"ab"</span>,
                    <span class="stri">"abcde"</span>[0 <span class="keywd">fixLen</span> 2] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">[</a> A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">..</a> <a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">]</a>  Access a substring beginning at position A
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    S<a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">[</a>A <a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">..</a><a class="op" href="../libraries/string.htm#(in_string)[(in_integer).._]">]</a> is okay for A >= 1,
                    <span class="stri">"abcde"</span>[3 ..] <b>&rArr;</b> <span class="stri">"cde"</span>,
                    <span class="stri">"abcde"</span>[6 ..] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">""</span>[1 ..] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[1 ..] <b>&rArr;</b> <span class="stri">"abcde"</span>,
                    <span class="stri">"abcde"</span>[0 ..] <b>&rArr;</b>  EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">[</a> <a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">..</a> A <a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">]</a>  Access a substring ending at position A
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    S<a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">[</a><a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">..</a> A<a class="op" href="../libraries/string.htm#(in_string)[_..(in_integer)]">]</a> is okay for A >= 0,
                    <span class="stri">"abcde"</span>[.. 4] <b>&rArr;</b> <span class="stri">"abcd"</span>,
                    <span class="stri">"abcde"</span>[.. 6] <b>&rArr;</b> <span class="stri">"abcde"</span>,
                    <span class="stri">""</span>[.. 5] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[.. 0] <b>&rArr;</b> <span class="stri">""</span>,
                    <span class="stri">"abcde"</span>[.. -1] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/string.htm#(in_string)=(in_string)">=</a>, <a class="op" href="../libraries/string.htm#(in_string)<&gt;(in_string)">&lt;></a>, <a class="op" href="../libraries/string.htm#(in_string)<(in_string)">&lt;</a>, <a class="op" href="../libraries/string.htm#(in_string)&lt;=(in_string)">&lt;=</a>, <a class="op" href="../libraries/string.htm#(in_string)&gt;(in_string)">></a>, <a class="op" href="../libraries/string.htm#(in_string)&gt;=(in_string)">>=</a>
    Functions:
      <a class="func" href="../libraries/string.htm#length(in_string)">length</a>(A) Length of <a class="type" href="../libraries/string.htm#string">string</a>
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    length(<span class="stri">""</span>) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#pos(in_string,in_char)">pos</a>(A,B)  First position of <a class="type" href="#char">char</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument B: <a class="type" href="#char">char</a>,
                    Type of result: <a class="type" href="#integer">integer</a>,
                    pos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>) <b>&rArr;</b> 2,
                    pos(<span class="stri">"XYZ"</span>,<span class="stri">'A'</span>) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#pos(in_string,in_string)">pos</a>(A,B)  First position of <a class="type" href="../libraries/string.htm#string">string</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    pos(<span class="stri">"ABCDE ABCDE"</span>,<span class="stri">"BC"</span>) <b>&rArr;</b> 2,
                    pos(<span class="stri">"XYZXYZ"</span>,<span class="stri">"ZYX"</span>) <b>&rArr;</b> 0,
                    pos(<span class="stri">"123456789"</span>,<span class="stri">""</span>) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#pos(in_string,in_char,in_integer)">pos</a>(A,B,C) First position of <a class="type" href="#char">char</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                 The search starts at position C of <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument B: <a class="type" href="#char">char</a>,
                    Type of argument C: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a>,
                    pos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>, 3) <b>&rArr;</b> 5,
                    pos(<span class="stri">"XYZYX"</span>,<span class="stri">'Z'</span>, 4) <b>&rArr;</b> 0,
                    pos(<span class="stri">"12345"</span>,<span class="stri">'3'</span>, 7) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#pos(in_string,in_string,in_integer)">pos</a>(A,B,C) First position of <a class="type" href="../libraries/string.htm#string">string</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                 The search starts at position C of <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument C: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a>,
                    pos(<span class="stri">"ABCDE ABCDE"</span>,<span class="stri">"BC"</span>, 3) <b>&rArr;</b> 8,
                    pos(<span class="stri">"XYZXYZ"</span>,<span class="stri">"ZXY"</span>, 4) <b>&rArr;</b> 0,
                    pos(<span class="stri">"12345"</span>,<span class="stri">"34"</span>, 7) <b>&rArr;</b> 0 )
                    pos(<span class="stri">"123456789"</span>,<span class="stri">""</span>, 2) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#rpos(in_string,in_char)">rpos</a>(A,B) Last position of <a class="type" href="#char">char</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument B: <a class="type" href="#char">char</a>,
                    Type of result: <a class="type" href="#integer">integer</a>,
                    rpos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>) <b>&rArr;</b> 5,
                    rpos(<span class="stri">"XYZ"</span>,<span class="stri">'A'</span>) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#rpos(in_string,in_string)">rpos</a>(A,B) Last position of <a class="type" href="../libraries/string.htm#string">string</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    rpos(<span class="stri">"ABCDE ABCDE"</span>,<span class="stri">"BC"</span>) <b>&rArr;</b> 8,
                    rpos(<span class="stri">"XYZXYZ"</span>,<span class="stri">"ZYX"</span>) <b>&rArr;</b> 0,
                    rpos(<span class="stri">"123456789"</span>,<span class="stri">""</span>) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/string.htm#rpos(in_string,in_char,in_integer)">rpos</a>(A,B,C) Last position of <a class="type" href="#char">char</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                  The search starts at position C of <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument B: <a class="type" href="#char">char</a>,
                    Type of argument C: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a>,
                    rpos(<span class="stri">"ABCABC"</span>,<span class="stri">'B'</span>, 4) <b>&rArr;</b> 2,
                    rpos(<span class="stri">"XYZYX"</span>,<span class="stri">'Z'</span>, 2) <b>&rArr;</b> 0,
                    rpos(<span class="stri">"12345"</span>,<span class="stri">'3'</span>, 5) <b>&rArr;</b> 3 )
      <a class="func" href="../libraries/string.htm#rpos(in_string,in_string,in_integer)">rpos</a>(A,B,C) Last position of <a class="type" href="#char">char</a> B in <a class="type" href="../libraries/string.htm#string">string</a> A
                  The search starts at position C of <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument C: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a>,
                    rpos(<span class="stri">"ABCABC"</span>,<span class="stri">"BC"</span>, 4) <b>&rArr;</b> 2,
                    rpos(<span class="stri">"XYZYX"</span>,<span class="stri">"ZY"</span>, 2) <b>&rArr;</b> 0,
                    rpos(<span class="stri">"12345"</span>,<span class="stri">"34"</span>, 5) <b>&rArr;</b> 3 )
      <a class="func" href="../libraries/string.htm#startsWith(in_string,in_string)">startsWith</a>(A,B) Determine if a string starts with a prefix.
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    startsWith(<span class="stri">"tmp_s7c.c"</span>, <span class="stri">"tmp_"</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    startsWith(<span class="stri">"example"</span>, <span class="stri">"E"</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a class="func" href="../libraries/string.htm#endsWith(in_string,in_string)">endsWith</a>(A,B) Determine if a string ends with a suffix.
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    endsWith(<span class="stri">"hello.sd7"</span>, <span class="stri">".sd7"</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    endsWith(<span class="stri">"A string"</span>, <span class="stri">"\0;"</span>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a class="func" href="../libraries/string.htm#equalAtIndex(in_string,in_string,in_integer)">equalAtIndex</a>(A,B,C) Check if A has the searched characters B starting from C.
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    equalAtIndex(<span class="stri">"The quick brown fox"</span>, <span class="stri">"quick"</span>, 5) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    equalAtIndex(<span class="stri">"axis"</span>, <span class="stri">"xi"</span>, 3) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a class="func" href="../libraries/string.htm#replace(in_string,in_string,in_string)">replace</a>(A,B,C) Search A for occurrences of B and replace them with C
                  ( replace(<span class="stri">"old gold"</span>, <span class="stri">"old"</span>, <span class="stri">"one"</span>) <b>&rArr;</b> <span class="stri">"one gone"</span> )
      <a class="func" href="../libraries/string.htm#replace2(in_string,in_string,in_string,in_string)">replace2</a>(A,B,C,D) Search A for occurrences of B followed by C and
                replace them with D.
                  ( replace2(<span class="stri">"x := (*ord*) y;"</span>, <span class="stri">"(*"</span>, <span class="stri">"*)"</span>, <span class="stri">""</span>) <b>&rArr;</b> <span class="stri">"x :=  y;"</span> )
      <a name="split(in_string,in_char)">split</a>(A,B) Split A into strings delimited by B
                  ( Type of argument B: <a class="type" href="#char">char</a>,
                    Type of result: <a class="type" href="#array">array</a> <a class="type" href="../libraries/string.htm#string">string</a>,
                    split(<span class="stri">""</span>, <span class="stri">':'</span>) <b>&rArr;</b> [](<span class="stri">""</span>),
                    split(<span class="stri">":"</span>, <span class="stri">':'</span>) <b>&rArr;</b> [](<span class="stri">""</span>, <span class="stri">""</span>),
                    split(<span class="stri">"15:30"</span>, <span class="stri">':'</span>) <b>&rArr;</b> [](<span class="stri">"15"</span>, <span class="stri">"30"</span>) )
      <a name="split(in_string,in_string)">split</a>(A,B) Split A into strings delimited by B
                  ( Type of result: <a class="type" href="#array">array</a> <a class="type" href="../libraries/string.htm#string">string</a>,
                    split(<span class="stri">""</span>, <span class="stri">""</span>) <b>&rArr;</b> [](<span class="stri">""</span>),
                    split(<span class="stri">"ABC"</span>, <span class="stri">""</span>) <b>&rArr;</b> [](<span class="stri">"ABC"</span>),
                    split(<span class="stri">""</span>, <span class="stri">"; "</span>) <b>&rArr;</b> [](<span class="stri">""</span>),
                    split(<span class="stri">"writeln; readln;"</span>, <span class="stri">"; "</span>) <b>&rArr;</b> [](<span class="stri">"writeln"</span>, <span class="stri">"readln;"</span>) )
      <a name="join(in_array_string,in_char)">join</a>(A,B) Join the elements of A together with B's between them
                  ( Type of argument A: <a class="type" href="#array">array</a> <a class="type" href="../libraries/string.htm#string">string</a>,
                    Type of argument B: <a class="type" href="#char">char</a>,
                    join([](<span class="stri">"This"</span>, <span class="stri">"is"</span>, <span class="stri">"a"</span>, <span class="stri">"test"</span>), <span class="stri">' '</span>) <b>&rArr;</b> <span class="stri">"This is a test"</span> )
      <a name="join(in_array_string,in_string)">join</a>(A,B) Join the elements of A together with B's between them
                  ( Type of argument A: <a class="type" href="#array">array</a> <a class="type" href="../libraries/string.htm#string">string</a>,
                    Type of argument B: <a class="type" href="../libraries/string.htm#string">string</a>,
                    join([](<span class="stri">"pro"</span>, <span class="stri">"gram"</span>), <span class="stri">""</span>) <b>&rArr;</b> <span class="stri">"program"</span> )
      <a class="func" href="../libraries/string.htm#trim(in_string)">trim</a>(A)   Removes leading and trailing spaces and control chars
                  ( trim(<span class="stri">" /n xyz /r"</span>) <b>&rArr;</b> <span class="stri">"xyz"</span> )
      <a class="func" href="../libraries/string.htm#ltrim(in_string)">ltrim</a>(A)   Removes leading spaces and control chars
                  ( ltrim(<span class="stri">" /n xyz /r"</span>) <b>&rArr;</b> <span class="stri">"xyz /r"</span> )
      <a class="func" href="../libraries/string.htm#rtrim(in_string)">rtrim</a>(A)   Removes trailing spaces and control chars
                  ( rtrim(<span class="stri">" /n xyz /r"</span>) <b>&rArr;</b> <span class="stri">" /n xyz"</span> )
      <a class="func" href="../libraries/string.htm#str(in_string)">str</a>(A)    Conversion to <a class="type" href="../libraries/string.htm#string">string</a>
                  ( str(A) <b>&rArr;</b> A )
      literal(A) Conversion to a literal
                  ( literal(<span class="stri">"ABC"</span>) <b>&rArr;</b> <span class="stri">"\"ABC\""</span>,
                    literal(<span class="stri">"O' \"X\""</span>) <b>&rArr;</b> <span class="stri">"\"O\' \\\"X\\\"\""</span> )
      <a class="func" href="../libraries/string.htm#upper(in_string)">upper</a>(A)  Conversion to upper case characters
                  ( upper(<span class="stri">"Upper"</span>) <b>&rArr;</b> <span class="stri">"UPPER"</span> )
      <a class="func" href="../libraries/string.htm#lower(in_string)">lower</a>(A)  Conversion to lower case characters
                  ( lower(<span class="stri">"Lower"</span>) <b>&rArr;</b> <span class="stri">"lower"</span> )
      <a class="func" href="../libraries/string.htm#compare(in_string,in_string)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    compare(<span class="stri">"ABC"</span>, <span class="stri">"ABCD"</span>) <b>&rArr;</b> -1,
                    compare(<span class="stri">"ABC"</span>, <span class="stri">"ABC"</span>) <b>&rArr;</b> 0,
                    compare(<span class="stri">"ABCD"</span>, <span class="stri">"ABCC"</span>) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/string.htm#hashCode(in_string)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/string.htm#(inout_string)&:=(in_string)">&amp;:=</a> B   Append B to A
                  ( A &amp;:= B <b>&rArr;</b> A := A &amp; B )
      A <a class="op" href="../libraries/string.htm#(inout_string)&:=(in_char)">&amp;:=</a> B   Append B to A
                  ( Type of argument B: <a class="type" href="#char">char</a>,
                    A &amp;:= B <b>&rArr;</b> A := A &amp; str(B) )
      A <a class="op" href="../libraries/string.htm#(inout_string)@:=_[(in_integer)](in_char)">@:=</a> [B] C  Assign C to element B of <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    Type of argument C: <a class="type" href="#char">char</a>,
                    A @:= [B] C <b>&rArr;</b>
                        A := A[..pred(B)] &amp; str(C) &amp; A[succ(B)..],
                    A @:= [0] <span class="stri">'x'</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    A @:= [succ(length(A))] <span class="stri">'x'</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      A <a class="op" href="../libraries/string.htm#(inout_string)@:=_[(in_integer)](in_string)">@:=</a> [B] C  Assign C to the position B of <a class="type" href="../libraries/string.htm#string">string</a> A
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A @:= [B] C <b>&rArr;</b>
                        A := A[..pred(B)] &amp; C &amp; A[B+length(C)..],
                    A @:= [0] <span class="stri">"xyz"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    A @:= [pred(length(A))] <span class="stri">"xyz"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">range</a> aString <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)do(in_proc)end_for">for</a>   Loop over all elements of a string
                  ( Type of argument forVar: <a class="type" href="#char">char</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">for</a> <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">range</a> aString <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)do(in_proc)end_for">for</a>   Loop over all indices of a string
                  ( Type of argument keyVar: <a class="type" href="#integer">integer</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">range</a> aString <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)do(in_proc)end_for">for</a>   Loop over all elements and indices of a string
                  ( Type of argument forVar: <a class="type" href="#char">char</a>,
                    Type of argument keyVar: <a class="type" href="#integer">integer</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)until(ref_func_boolean)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)until(ref_func_boolean)do(in_proc)end_for">range</a> aString <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/forloop.htm#for(inout_char)range(in_string)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all elements of a string until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument forVar: <a class="type" href="#char">char</a>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">for</a> <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">range</a> aString <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/forloop.htm#for_key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all indices of a string until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument keyVar: <a class="type" href="#integer">integer</a>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">range</a> aString <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/forloop.htm#for(inout_char)key(inout_integer)range(in_string)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all elements and indices of a string until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument forVar: <a class="type" href="#char">char</a>,
                    Type of argument keyVar: <a class="type" href="#integer">integer</a>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="array"><h3>5.10 array</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/array.htm#array(in_type)">array</a> <span class="type">baseType</span></tt> describes sequences of <tt><span class="type">baseType</span></tt>
  elements (including the empty sequence). Examples of array type
  declarations are:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: striArrayType <span class="keywd">is</span> <a class="type" href="../libraries/array.htm#array(in_type)">array</a> <a class="type" href="#string">string</a>;
<span class="keywd">const</span> <a class="type" href="#type">type</a>: structArrayType <span class="keywd">is</span> <a class="type" href="../libraries/array.htm#array(in_type)">array</a> <span class="type">aStructType</span>;
</pre><p>
  This defines <tt><span class="type">striArrayType</span></tt> as an array type with <tt><a class="type" href="#string">string</a></tt> elements. The
  second line defines <tt><span class="type">structArrayType</span></tt> as an array type with <tt><span class="type">aStructType</span></tt>
  elements. Variables of these types are declared with:
</p><pre class="indent">
<span class="keywd">var</span> <span class="type">striArrayType</span>: striArr1 <span class="keywd">is</span> <span class="type">striArrayType</span>.value; <span class="comment"># Empty array with starting index 1.</span>
<span class="keywd">var</span> <span class="type">striArrayType</span>: striArr2 <span class="keywd">is</span> 0 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <span class="stri">""</span>;          <span class="comment"># Empty array with starting index 1.</span>
<span class="keywd">var</span> <span class="type">striArrayType</span>: striArr4 <span class="keywd">is</span> [0 .. -1] <a class="op" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> <span class="stri">""</span>;  <span class="comment"># Empty array with starting index 0.</span>
<span class="keywd">var</span> <span class="type">striArrayType</span>: striArr3 <span class="keywd">is</span> [0 len 0] <a class="op" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> <span class="stri">""</span>;  <span class="comment"># Empty array with starting index 0.</span>
<span class="keywd">var</span> <span class="type">striArrayType</span>: striArr5 <span class="keywd">is</span> [] (<span class="stri">"one"</span>, <span class="stri">"two"</span>);   <span class="comment"># Array with two string elements and starting index 1.</span>
<span class="keywd">var</span> <span class="type">striArrayType</span>: striArr6 <span class="keywd">is</span> [0] (<span class="stri">"zero"</span>, <span class="stri">"one"</span>); <span class="comment"># Array with two string elements and starting index 0.</span>
<span class="keywd">var</span> <span class="type">structArrayType</span>: structArr1 <span class="keywd">is</span> <span class="type">structArrayType</span>.value;
<span class="keywd">var</span> <span class="type">structArrayType</span>: structArr2 <span class="keywd">is</span> 10 <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <span class="type">aStructType</span>.value;
<span class="keywd">var</span> <span class="type">structArrayType</span>: structArr3 <span class="keywd">is</span> [42 .. 365] <a class="op" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> <span class="type">aStructType</span>.value;
</pre><p>
  An element of an array can be accessed with an <tt><a class="type" href="#integer">integer</a></tt> index.
  The minimum and maximum indices of an array are part of the value
  and can be obtained with the functions <tt><a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a></tt> and <tt><a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a></tt>.
  There are functions which generate arrays with the default minimum
  index of 1 and other functions which generate arrays with the minimum
  index taken from a parameter. The <tt><a class="type" href="../libraries/array.htm#array(in_type)">array</a></tt> functions are defined
  in the library <span class="stri">"<a class="lib" href="../libraries/array.htm#array(in_type)">array.s7i</a>"</span>.
</p><p>
  Arrays with non-integer index are defined in the library <span class="stri">"<a class="lib" href="../libraries/idxarray.htm">idxarray.s7i</a>"</span>.
  An array type with <tt><a class="type" href="#char">char</a></tt> index and <tt><a class="type" href="#bigInteger">bigInteger</a></tt> elements is defined as:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: charIndexArray <span class="keywd">is</span> <a class="type" href="../libraries/idxarray.htm#array_[(in_type)](in_type)">array</a> [<a class="type" href="#char">char</a>] <a class="type" href="#bigInteger">bigInteger</a>;
</pre><p>
  Variables of this type are declared with:
</p><pre class="indent">
<span class="keywd">var</span> <span class="type">charIndexArray</span>: bigArr1 <span class="keywd">is</span> <span class="type">charIndexArray</span>.value;
<span class="keywd">var</span> <span class="type">charIndexArray</span>: bigArr2 <span class="keywd">is</span> <a class="type" href="#char">char</a> <span class="op">times</span> 42_;
<span class="keywd">var</span> <span class="type">charIndexArray</span>: bigArr3 <span class="keywd">is</span> [<a class="type" href="#char">char</a>] (0_, 1_, 2_);
<span class="keywd">var</span> <span class="type">charIndexArray</span>: bigArr4 <span class="keywd">is</span> [<span class="stri">' '</span>] (32_, 33_, 34_);
</pre><p>
  The definition of <tt><span class="type">charIndexArray</span></tt> defines also the special <tt><span class="op">times</span></tt>
  operator from above and the special possibilities to define literals
  of <tt><span class="type">charIndexArray</span></tt>.
</p><pre class="tt">
    Literal:
      [] (elem1, elem2)      Create an <a class="type" href="../libraries/array.htm#array(in_type)">array</a> with the given elements.
                             Index type is <a class="type" href="#integer">integer</a> and starting index is 1.
      [0] (elem1, elem2)     Create an <a class="type" href="../libraries/array.htm#array(in_type)">array</a> with the given elements.
                             Index type is <a class="type" href="#integer">integer</a> and starting index is 0.
      [<a class="type" href="#char">char</a>] (elem1, elem2)  Create an <a class="type" href="../libraries/idxarray.htm#array_[(in_type)](in_type)">array</a> with the given elements.
                             Index type is <a class="type" href="#char">char</a> and starting index is <a class="type" href="#char">char</a>.<a class="var" href="../libraries/char.htm#(attr_char)._value">value</a> (<span class="stri">' '</span>).
      [<span class="stri">'A'</span>] (elem1, elem2)   Create an <a class="type" href="../libraries/idxarray.htm#array_[(in_type)](in_type)">array</a> with the given elements.
                             Index type is <a class="type" href="#char">char</a> and starting index is <span class="stri">'A'</span>.
    Infix operators:
      <a class="op" href="../libraries/array.htm#(in_arrayType)&(in_arrayType)">&amp;</a>         Array concatenation
      <a class="op" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a>     Array generation
                  ( Left operand: <a class="type" href="#integer">integer</a>,
                    Right operand: <span class="type">baseType</span>,
                    A <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> B Generates an <a class="type" href="../libraries/array.htm#array(in_type)">array</a> <span class="type">baseType</span> with A elements of B,
                    3 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> B <b>&rArr;</b> [] (B, B, B),
                    0 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> B <b>&rArr;</b> empty array with starting index 1,
                    (1 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> B)[1] <b>&rArr;</b> B,
                    (0 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> B)[1] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    -1 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      [ A .. B ] <a class="op" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> C    Array generation
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a>,
                    Type of argument C: <span class="type">baseType</span>,
                    [ A .. B ] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> C Generates an <a class="type" href="../libraries/array.htm#array(in_type)">array</a> <span class="type">baseType</span>
                    with pred(B - A) elements of C,
                    [ -1 .. -2 ] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> B <b>&rArr;</b> empty array with starting index -1,
                    [ -1 .. -3 ] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      [ A len L ] <a class="op" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> C    Array generation
                  ( Type of arguments A and L: <a class="type" href="#integer">integer</a>,
                    Type of argument C: <span class="type">baseType</span>,
                    [ A len L ] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> C Generates an <a class="type" href="../libraries/array.htm#array(in_type)">array</a> <span class="type">baseType</span>
                    with L elements of C,
                    [ -1 len 0 ] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> B <b>&rArr;</b> empty array with starting index -1,
                    [ -1 len -1 ] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <span class="type">indexType</span> <span class="op">times</span> A   Array generation for indices from <span class="type">indexType</span>.<span class="var">first</span>
                          to <span class="type">indexType</span>.<span class="var">last</span>.
                  ( Type of argument A: <span class="type">baseType</span>,
                    <a class="type" href="#boolean">boolean</a> <span class="op_no_ul">times</span> 5 <b>&rArr;</b> [<a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>] (5, 5) )
    Indices:
      <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">[</a> A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)]">]</a>     Access one array element
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    Type of result: <span class="type">baseType</span>,
                    A[<a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A)] <b>&rArr;</b> First element,
                    A[<a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A)] <b>&rArr;</b> Last element,
                    A[pred(<a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A))] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    A[succ(<a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A))] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">[</a> A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">..</a> B <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">]</a>  Get a sub array from the position A to the position B
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a>,
                    X<a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">[</a>A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">..</a> B<a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)..(in_integer)]">]</a> is okay for A >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(X) and B >= <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(A),
                    anArray[<a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(<a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray)) .. n] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    anArray[n .. n - 2] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">[</a> A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">len</a> B <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">]</a>  Get a sub array from the position A with maximum length B
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a>,
                    X<a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">[</a>A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">len</a> B<a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer)len(in_integer)]">]</a> is okay for A >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(X) and B >= 0,
                    anArray[<a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(<a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray)) len n] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    anArray[n len -1] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">[</a> A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">..</a> <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">]</a>  Get a sub array beginning at position A
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    X<a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">[</a>A <a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">..</a><a class="op" href="../libraries/array.htm#(in_arrayType)[(in_integer).._]">]</a> is okay for A >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(X),
                    anArray[<a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(<a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray)) ..] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">[</a> <a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">..</a> A <a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">]</a>  Get a sub array ending at position A
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    X<a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">[</a><a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">..</a> A<a class="op" href="../libraries/array.htm#(in_arrayType)[_..(in_integer)]">]</a> is okay for A >= <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(<a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(X)),
                    anArray[.. <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray) - 2] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
    Relations:
      =, &lt;>
    Functions:
      <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>(A) Length of array
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>(A) = succ(<a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A) - <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A)),
                    <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>([] (2, 3, 5))  <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>([0] (2, 3, 5)) <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>([2] (2, 3, 5)) <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/idxarray.htm#length(in_arrayType)">length</a>([<span class="stri">'a'</span>] (1, 2, 3)) <b>&rArr;</b> 3
                    <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>(0 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>(5 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 5 )
      <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A) Minimum index of array
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>([] (2, 3, 5))  <b>&rArr;</b> 1,
                    <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>([0] (2, 3, 5)) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>([2] (2, 3, 5)) <b>&rArr;</b> 2,
                    <a class="func" href="../libraries/idxarray.htm#minIdx(in_arrayType)">minIdx</a>([<span class="stri">'a'</span>] (1, 2, 3)) <b>&rArr;</b> <span class="stri">'a'</span>,
                    <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(3 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 1,
                    <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>([-1 .. 4] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> -1 )
      <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A) Maximum index of array
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>([] (2, 3, 5))  <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>([0] (2, 3, 5)) <b>&rArr;</b> 2,
                    <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>([2] (2, 3, 5)) <b>&rArr;</b> 4,
                    <a class="func" href="../libraries/idxarray.htm#maxIdx(in_arrayType)">maxIdx</a>([<span class="stri">'a'</span>] (1, 2, 3)) <b>&rArr;</b> <span class="stri">'c'</span>,
                    <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(3 <a class="op_no_ul" href="../libraries/array.htm#(in_integer)times(in_baseType)">times</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>([-1 .. 4] <a class="op_no_ul" href="../libraries/array.htm#(in_ARRAY_IDX_RANGE)times(in_baseType)">times</a> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>) <b>&rArr;</b> 4 )
      <a class="func" href="../libraries/array.htm#rand(in_arrayType)">rand</a>(A)   Random element from an array
                The random elements are uniform distributed.
                  ( Type of result:  <span class="type">baseType</span> )
      <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer)">remove</a>(A,B) Remove element with index B from array A and
                  return the removed element
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    Type of result: <span class="type">baseType</span>,
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer)">remove</a>(A,B) is okay for B >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A) and B &lt;= <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A),
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer)">remove</a>(anArray, 0) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray) = 1,
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer)">remove</a>(anArray, 5) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(anArray) = 4 )
      <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer,in_integer)">remove</a>(A,B,C) Remove the sub-array with with index B and length C from array A and
                    return the removed sub-array
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    Type of argument C: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer,in_integer)">remove</a>(A,B,C) is okay for B >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A) and B &lt;= <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A) and C >= 0,
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer,in_integer)">remove</a>(anArray, 0, 1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray) = 1,
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer,in_integer)">remove</a>(anArray, 6, 1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(anArray) = 4,
                    <a class="func" href="../libraries/array.htm#remove(inout_arrayType,in_integer,in_integer)">remove</a>(anArray, 1, -1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="func" href="../libraries/array.htm#sort(in_arrayType)">sort</a>(A)   Sort array using the compare(<span class="type">baseType</span>, <span class="type">baseType</span>) function
    Statements:
      A <a class="op" href="../libraries/array.htm#(inout_arrayType)&:=(in_arrayType)">&amp;:=</a> B   Append B to A
                  ( A &amp;:= B <b>&rArr;</b> A := A &amp; B )
      A <a class="op" href="../libraries/array.htm#(inout_arrayType)&:=(in_baseType)">&amp;:=</a> B   Append element B to A
                  ( Type of argument B: <span class="type">baseType</span>,
                    A &amp;:= B <b>&rArr;</b> A := A &amp; [] (B) )
      <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_baseType)">insert</a>(A,B,C) Insert element C into array A at index B
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    Type of argument C: <span class="type">baseType</span>,
                    <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_baseType)">insert</a>(A,B,C) is okay for B >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A) and B &lt;= <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(<a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A)),
                    <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_baseType)">insert</a>(anArray, 0, anElement) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray) = 1,
                    <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_baseType)">insert</a>(anArray, 6, anElement) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(anArray) = 4 )
      <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_arrayType)">insert</a>(A,B,C) Insert array C into array A at index B
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_arrayType)">insert</a>(A,B,C) is okay for B >= <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(A) and B &lt;= <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(<a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(A)),
                    <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_arrayType)">insert</a>(anArray, 0, anotherAnarry) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#minIdx(in_arrayType)">minIdx</a>(anArray) = 1,
                    <a class="func" href="../libraries/array.htm#insert(inout_arrayType,in_integer,in_arrayType)">insert</a>(anArray, 6, anotherAnarry) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> for <a class="func" href="../libraries/array.htm#maxIdx(in_arrayType)">maxIdx</a>(anArray) = 4 )
      insert(A, B) Insert B into the sorted array A
                  ( Type of argument B: <span class="type">baseType</span> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">range</a> anArray <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)do(in_proc)end_for">for</a>   Loop over all elements of an array
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">for</a> <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">range</a> anArray <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)do(in_proc)end_for">for</a>   Loop over all indices of an array
                  ( Type of argument keyVar: <span class="type">indexType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">range</a> anArray <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)do(in_proc)end_for">for</a>   Loop over all elements and indices of an array
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument keyVar: <span class="type">indexType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">range</a> anArray <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/array.htm#for(inout_baseType)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all elements of an array until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">for</a> <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">range</a> anArray <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/array.htm#for_key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all indices of an array until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument keyVar: <span class="type">indexType</span>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">range</a> anArray <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/array.htm#for(inout_baseType)key(inout_integer)range(in_arrayType)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all elements and indices of an array until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument keyVar: <span class="type">indexType</span>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="hash"><h3>5.11 hash</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/hash.htm#hash_[(in_type)](in_type)">hash</a> <span class="type">[keyType]</span> <span class="type">baseType</span></tt> describes hash tables with
  elements of <tt><span class="type">baseType</span></tt>. The elements can be accessed with an index
  of <tt><span class="type">keyType</span></tt>. An example of a hash type declaration is:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: aHashType <span class="keywd">is</span> <a class="type" href="../libraries/hash.htm#hash_[(in_type)](in_type)">hash</a> <span class="type">[</span><a class="type" href="#string">string</a><span class="type">]</span> <a class="type" href="#integer">integer</a>;
</pre><p>
  This defines <tt><span class="type">aHashType</span></tt> as a hash type with <tt><a class="type" href="#integer">integer</a></tt> elements and
  <tt><a class="type" href="#string">string</a></tt> keys. Variables of this type are declared with:
</p><pre class="indent">
<span class="keywd">var</span> <span class="type">aHashType</span>: aHashTable1 <span class="keywd">is</span> <span class="type">aHashType</span>.value;                <span class="comment"># Empty hash table.</span>
<span class="keywd">var</span> <span class="type">aHashType</span>: aHashTable2 <span class="keywd">is</span> [] ([<span class="stri">"one"</span> : 1], [<span class="stri">"two"</span> : 2]);  <span class="comment"># Hash with two elements which map strings to integers.</span>
</pre><p>
  The expressions <tt><span class="type">aHashType</span>.value</tt> and <tt><span class="type">aHashType</span>.EMPTY_HASH</tt> describe
  empty hash tables. Beside them there are no hash table literals.
  The <tt><span class="type">keyType</span></tt> of a hash needs to provide the functions <tt><span class="func">hashCode</span></tt>
  and <tt><span class="func">compare</span></tt>. Besides this the <tt><span class="type">keyType</span></tt> can be any type. The
  <tt><a class="type" href="../libraries/hash.htm#hash_[(in_type)](in_type)">hash</a></tt> functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/hash.htm">hash.s7i</a>"</span>.
</p><pre class="tt">
    Literal:
      [] ([key1 : value1], [key2 : value2])  Create a <a class="type" href="../libraries/hash.htm#hash_[(in_type)](in_type)">hash</a> with the given keys and corresponding values.
    Constants:
      <span class="type">hashType</span>.EMPTY_HASH  Empty hash table
    Infix operators:
      <a class="op" href="../libraries/hash.htm#(in_keyType)in(in_hashType)">in</a>        Element
                  ( Left argument: <span class="type">baseType</span>,
                    Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="op" href="../libraries/hash.htm#(in_keyType)not_in(in_hashType)">not in</a>    Is not Element
                  ( Left argument: <span class="type">baseType</span>,
                    Type of result: <a class="type" href="#boolean">boolean</a> )
    Indices:
      <a class="op" href="../libraries/hash.htm#(in_hashType)[(in_keyType)]">[</a> A ]     Access one hash table element
                  ( Type of argument A: <span class="type">keyType</span>,
                    Type of result: <span class="type">baseType</span> )
    Relations:
      =, &lt;>
    Functions:
      <a class="func" href="../libraries/hash.htm#length(in_hashType)">length</a>(A) Number of elements in hash table A
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    length(hashType.EMPTY_HASH) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/hash.htm#keys(in_hashType)">keys</a>(A)   Unsorted array of keys from hash table A
                  ( Type of result: <a class="type" href="#array">array</a> <span class="type">keyType</span> )
      <a class="func" href="../libraries/hash.htm#values(in_hashType)">values</a>(A) Unsorted array of values from hash table A
                  ( Type of result: <a class="type" href="#array">array</a> <span class="type">baseType</span> )
      <a class="func" href="../libraries/hash.htm#flip(in_hashType)">flip</a>(A)   Deliver a hash with keys and values flipped
                  ( Type of result: <a class="type" href="../libraries/hash.htm#hash_[(in_type)](in_type)">hash</a> <span class="type">[baseType]</span> <a class="type" href="#array">array</a> <span class="type">keyType</span> )
    Statements:
      <a class="func" href="../libraries/hash.htm#incl(inout_hashType,in_keyType,in_baseType)">incl</a>(A,B,C) Include element B to hash table A
                  ( Type of argument B: <span class="type">keyType</span>,
                    Type of argument C: <span class="type">baseType</span> )
      <a class="func" href="../libraries/hash.htm#excl(inout_hashType,in_keyType)">excl</a>(A,B) Exclude element B from hash table A
                  ( Type of argument B: <span class="type">keyType</span> )
      A <a class="op" href="../libraries/hash.htm#(inout_hashType)@:=_[(in_keyType)](in_baseType)">@:=</a> [B] C  Assign C to element B of hash table A
                  ( Type of argument B: <span class="type">keyType</span>,
                    Type of argument C: <span class="type">baseType</span> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">range</a> aHash <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)range(in_hashType)do(in_proc)end_for">for</a>   Unsorted loop over all values of a hash
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">for</a> <a class="keywd" href="../libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">range</a> aHash <a class="keywd" href="../libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/hash.htm#for_key(inout_keyType)range(in_hashType)do(in_proc)end_for">for</a>   Unsorted loop over all keys of a hash
                  ( Type of argument keyVar: <span class="type">keyType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">key</a> keyVar <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">range</a> aHash <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/hash.htm#for(inout_baseType)key(inout_keyType)range(in_hashType)do(in_proc)end_for">for</a>   Unsorted loop over all values and keys of a hash
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument keyVar: <span class="type">keyType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="set"><h3>5.12 set</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/set.htm#set_of(in_type)">set</a> <span class="type">of</span> <span class="type">baseType</span></tt> describes a set of elements of a
  <tt><span class="type">baseType</span></tt>. (including the empty set). An example of a set type
  declaration is:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: aSetType <span class="keywd">is</span> <a class="type" href="../libraries/bitsetof.htm#bitset(in_type)">set</a> <span class="type">of</span> <a class="type" href="#integer">integer</a>;
</pre><p>
  This defines <tt><span class="type">aSetType</span></tt> as a set type with <tt><a class="type" href="#integer">integer</a></tt> elements.
  Variables of this type are declared with:
</p><pre class="indent">
<span class="keywd">var</span> <span class="type">aSetType</span>: aSet <span class="keywd">is</span> <span class="type">aSetType</span>.value;
<span class="keywd">var</span> <span class="type">aSetType</span>: aSet <span class="keywd">is</span> {1, 2, 3};
<span class="keywd">var</span> <span class="type">aSetType</span>: aSet <span class="keywd">is</span> {1 .. 5};
</pre><p>
  The type <tt><a class="type" href="../libraries/set.htm#set_of(in_type)">set</a> <span class="type">of</span> <span class="type">baseType</span></tt> is
  defined in the library <span class="stri">"<a class="lib" href="../libraries/set.htm">set.s7i</a>"</span>. This abstract data type decides
  about the implementation of the set. When <tt><span class="type">baseType</span></tt> values can be
  mapped to <tt><a class="type" href="#integer">integer</a></tt> with the <tt><span class="func">ord</span></tt> function and <tt><span class="func">ord</span></tt> does never
  raise an exception the set is implemented as <tt><a class="type" href="../libraries/bitsetof.htm#bitset(in_type)">bitset(baseType)</a></tt>
  (defined in the library <span class="stri">"<a class="lib" href="../libraries/bitsetof.htm">bitsetof.s7i</a>"</span>), otherwise the set is
  implemented as <tt><a class="type" href="../libraries/hashsetof.htm#hashset(in_type)">hashset(baseType)</a></tt> (defined in the library
  <span class="stri">"<a class="lib" href="../libraries/hashsetof.htm">hashsetof.s7i</a>"</span>). The type <tt><a class="type" href="../libraries/bitsetof.htm#bitset(in_type)">set</a> <span class="type">of</span> <a class="type" href="#integer">integer</a></tt> is an alternate name
  for <tt><a class="type" href="../libraries/bitset.htm#bitset">bitset</a></tt>, which is defined in the library <span class="stri">"<a class="lib" href="../libraries/bitset.htm">bitset.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      {}                 Empty set of the type <a class="type" href="../libraries/bitset.htm#bitset">bitset</a>
      <span class="var">EMPTY_SET</span>          Empty set of the type <a class="type" href="../libraries/bitset.htm#bitset">bitset</a>
      {1, 2}             Set with 1 and 2 (type: <a class="type" href="../libraries/bitset.htm#bitset">bitset</a>)
      {<span class="stri">'a'</span>, <span class="stri">'b'</span>, <span class="stri">'c'</span>}    Set with three characters.
      {<span class="stri">"black"</span>, <span class="stri">"white"</span>} Set with two strings.
      <a class="type" href="../libraries/bitset.htm#bitset">bitset</a>.<a class="var" href="../libraries/bitset.htm#(attr_bitset)._value">value</a>       Default value of <a class="type" href="../libraries/bitset.htm#bitset">bitset</a> ({})
      <span class="type">setType</span>.<span class="var">EMPTY_SET</span>  Empty set of the type <span class="type">setType</span>
      <span class="type">setType</span>.<span class="var">value</span>      Default value of <span class="type">setType</span> (<span class="type">setType</span>.<span class="var">EMPTY_SET</span>)
    Infix operators:
      <a class="op" href="../libraries/bitset.htm#(in_bitset)|(in_bitset)">|</a>         Union
                  ( {1, 2} <a class="op_no_ul" href="../libraries/bitset.htm#(in_bitset)|(in_bitset)">|</a> {1, 3} <b>&rArr;</b> {1, 2, 3},
                    {<span class="stri">'a'</span>, <span class="stri">'b'</span>} <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_setType)|(in_setType)">|</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>} <b>&rArr;</b> {<span class="stri">'a'</span>, <span class="stri">'b'</span>, <span class="stri">'c'</span>},
                    {<span class="stri">"one"</span>, <span class="stri">"two"</span>} <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_setType)|(in_setType)">|</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>} <b>&rArr;</b> {<span class="stri">"one"</span>, <span class="stri">"two"</span>, <span class="stri">"three"</span>} )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)&(in_bitset)">&amp;</a>         Intersection
                  ( {1, 2} <a class="op_no_ul" href="../libraries/bitset.htm#(in_bitset)&(in_bitset)">&amp;</a> {1, 3} <b>&rArr;</b> {1},
                    {<span class="stri">'a'</span>, <span class="stri">'b'</span>} <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_setType)&(in_setType)">&amp;</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>} <b>&rArr;</b> {<span class="stri">'a'</span>},
                    {<span class="stri">"one"</span>, <span class="stri">"two"</span>} <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_setType)&(in_setType)">&amp;</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>} <b>&rArr;</b> {<span class="stri">"one"</span>} )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)-(in_bitset)">-</a>         Difference
                  ( {1, 2} <a class="op_no_ul" href="../libraries/bitset.htm#(in_bitset)-(in_bitset)">-</a> {1, 3} <b>&rArr;</b> {2},
                    {<span class="stri">'a'</span>, <span class="stri">'b'</span>} <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_setType)-(in_setType)">-</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>} <b>&rArr;</b> {<span class="stri">'b'</span>},
                    {<span class="stri">"one"</span>, <span class="stri">"two"</span>} <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_setType)-(in_setType)">-</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>} <b>&rArr;</b> {<span class="stri">"two"</span>} )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)&gt;&lt;(in_bitset)">>&lt;</a>        Symmetric Difference
                  ( {1, 2} <a class="op_no_ul" href="../libraries/bitset.htm#(in_bitset)&gt;&lt;(in_bitset)">>&lt;</a> {1, 3} <b>&rArr;</b> {2, 3},
                    {<span class="stri">'a'</span>, <span class="stri">'b'</span>} <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_setType)><(in_setType)">>&lt;</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>} <b>&rArr;</b> {<span class="stri">'b'</span>, <span class="stri">'c'</span>},
                    {<span class="stri">"one"</span>, <span class="stri">"two"</span>} <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_setType)><(in_setType)">>&lt;</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>} <b>&rArr;</b> {<span class="stri">"two"</span>, <span class="stri">"three"</span>} )
      <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a>        Element
                  ( Left argument: <span class="type">baseType</span>,
                    Type of result: <a class="type" href="#boolean">boolean</a>,
                    2 <a class="op_no_ul" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> {2, 3, 5, 7} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    4 <a class="op_no_ul" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> {2, 3, 5, 7} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <span class="stri">'a'</span> <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_baseType)in(in_setType)">in</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>, <span class="stri">'d'</span>} <b>&rArr;</b>  <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <span class="stri">'b'</span> <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_baseType)in(in_setType)">in</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>, <span class="stri">'d'</span>} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <span class="stri">"one"</span> <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_baseType)in(in_setType)">in</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>}) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <span class="stri">"two"</span> <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_baseType)in(in_setType)">in</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>}) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a class="op" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a>    Is not Element
                  ( Left argument: <span class="type">baseType</span>,
                    Type of result: <a class="type" href="#boolean">boolean</a>,
                    2 <a class="op_no_ul" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> {2, 3, 5, 7} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    4 <a class="op_no_ul" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> {2, 3, 5, 7} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <span class="stri">'a'</span> <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_baseType)not_in(in_setType)">not in</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>, <span class="stri">'d'</span>} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <span class="stri">'b'</span> <a class="op_no_ul" href="../libraries/bitsetof.htm#(in_baseType)not_in(in_setType)">not in</a> {<span class="stri">'a'</span>, <span class="stri">'c'</span>, <span class="stri">'d'</span>} <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <span class="stri">"one"</span> <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_baseType)not_in(in_setType)">not in</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>}) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    <span class="stri">"two"</span> <a class="op_no_ul" href="../libraries/hashsetof.htm#(in_baseType)not_in(in_setType)">not in</a> {<span class="stri">"one"</span>, <span class="stri">"three"</span>}) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> )
    Relations:
      <a class="op" href="../libraries/bitset.htm#(in_bitset)=(in_bitset)">=</a>, <a class="op" href="../libraries/bitset.htm#(in_bitset)<&gt;(in_bitset)">&lt;></a>     Equal and not equal
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)&lt;=(in_bitset)">&lt;=</a>        Subset
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    A &lt;= B <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> when no element X exists for which
                       X <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> X <a class="op" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> B
                    holds.
                    A &lt;= B <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> when an element X exists for which
                       X <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> A <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> X <a class="op" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> B
                    holds.
                    <span class="type">setType</span>.EMPTY_SET &lt;= A <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    A &lt;= <span class="type">setType</span>.EMPTY_SET <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> for A &lt;> EMPTY_SET,
                    A &lt;= B <b>&rArr;</b> B >= A )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)<(in_bitset)">&lt;</a>         Proper subset
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    A &lt; B <b>&rArr;</b> A &lt;= B <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A &lt;> B,
                    <span class="type">setType</span>.EMPTY_SET &lt; A <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> for A &lt;> EMPTY_SET,
                    A &lt; <span class="type">setType</span>.EMPTY_SET <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    A &lt; B <b>&rArr;</b> B > A )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)&gt;=(in_bitset)">>=</a>        Superset
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    A >= B <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> when no element X exists for which
                       X <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> X <a class="op" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> A
                    holds.
                    A >= B <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> when an element X exists for which
                       X <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> X <a class="op" href="../libraries/bitset.htm#(in_integer)not_in(in_bitset)">not in</a> A
                    holds.
                    A >= <span class="type">setType</span>.EMPTY_SET <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    <span class="type">setType</span>.EMPTY_SET >= A <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> for A &lt;> EMPTY_SET,
                    A >= B <b>&rArr;</b> B &lt;= A )
      <a class="op" href="../libraries/bitset.htm#(in_bitset)&gt;(in_bitset)">></a>         Proper superset
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    A > B <b>&rArr;</b> A >= B <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> A &lt;> B,
                    A > <span class="type">setType</span>.EMPTY_SET <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> for A &lt;> EMPTY_SET,
                    <span class="type">setType</span>.EMPTY_SET > A <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    A > B <b>&rArr;</b> B &lt; A )
    Functions:
      <a class="func" href="../libraries/bitset.htm#bitset(in_integer)">bitset</a>(A) Convert an <a class="type" href="#integer">integer</a> number to a <a class="type" href="../libraries/bitset.htm#bitset">bitset</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/bitset.htm#bitset(in_integer)">bitset</a>(2220) <b>&rArr;</b> {2, 3, 5, 7, 11} )
      <a class="func" href="../libraries/bitset.htm#bitset(in_var_string)">bitset</a>(A) Convert a <a class="type" href="#string">string</a> to a <a class="type" href="../libraries/bitset.htm#bitset">bitset</a>
                  ( Type of argumant A: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/bitset.htm#bitset(in_var_string)">bitset</a>("{}") <b>&rArr;</b> {},
                    <a class="func" href="../libraries/bitset.htm#bitset(in_var_string)">bitset</a>("{2, 3, 5, 7}") <b>&rArr;</b> {2, 3, 5, 7} )
      <a class="func" href="../libraries/bitset.htm#integer(in_bitset)">integer</a>(A) Convert a <a class="type" href="../libraries/bitset.htm#bitset">bitset</a> to an <a class="type" href="#integer">integer</a>
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/bitset.htm#integer(in_bitset)">integer</a>({2, 3, 5, 7, 11}) <b>&rArr;</b> 2220 )
      <a class="func" href="../libraries/bitset.htm#card(in_bitset)">card</a>(A)   Cardinality of a set
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/bitset.htm#card(in_bitset)">card</a>({2, 3, 5, 7, 11}) <b>&rArr;</b> 5,
                    <a class="func" href="../libraries/bitsetof.htm#card(in_setType)">card</a>({<span class="stri">'a'</span>, <span class="stri">'b'</span>, <span class="stri">'c'</span>}) <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/hashsetof.htm#card(in_setType)">card</a>({<span class="stri">"one"</span>, <span class="stri">"two"</span>, <span class="stri">"three"</span>}) <b>&rArr;</b> 3
                    <a class="func" href="../libraries/bitset.htm#card(in_bitset)">card</a>(<span class="type">setType</span>.EMPTY_SET) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/bitset.htm#min(in_bitset)">min</a>(A)    Minimum element
                  ( Type of result: <span class="type">baseType</span>,
                    Delivers the element from the set for
                    which the following condition holds:
                       Element &lt;= X
                    for all X which are in the set.
                    <a class="func" href="../libraries/bitset.htm#min(in_bitset)">min</a>({2, 3, 5, 7, 11}) <b>&rArr;</b> 2,
                    <a class="func" href="../libraries/bitsetof.htm#min(in_setType)">min</a>({<span class="stri">'a'</span>, <span class="stri">'b'</span>, <span class="stri">'c'</span>}) <b>&rArr;</b> <span class="stri">'a'</span>,
                    <a class="func" href="../libraries/bitset.htm#min(in_bitset)">min</a>(<span class="type">setType</span>.EMPTY_SET) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bitset.htm#max(in_bitset)">max</a>(A)    Maximum element
                  ( Type of result: <span class="type">baseType</span>,
                    Delivers the element from the set for
                    which the following condition holds:
                       Element >= X
                    for all X which are in the set.
                    <a class="func" href="../libraries/bitset.htm#max(in_bitset)">max</a>({2, 3, 5, 7, 11}) <b>&rArr;</b> 11,
                    <a class="func" href="../libraries/bitsetof.htm#max(in_setType)">max</a>({<span class="stri">'a'</span>, <span class="stri">'b'</span>, <span class="stri">'c'</span>}) <b>&rArr;</b> <span class="stri">'c'</span>,
                    <a class="func" href="../libraries/bitset.htm#max(in_bitset)">max</a>(<span class="type">setType</span>.EMPTY_SET) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>(A, B) Minimum element of set A that is larger than B
                  ( Type of argument B: <span class="type">baseType</span>,
                    Type of result: <span class="type">baseType</span>,
                    <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>({2, 3, 5, 7, 11}, 2) <b>&rArr;</b> 3,
                    <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>({2, 3, 5, 7, 11}, 3) <b>&rArr;</b> 5,
                    <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>({2, 3, 5, 7, 11}, 7) <b>&rArr;</b> 11,
                    <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>({2, 3, 5, 7, 11}, 11) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>({}, 1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <a class="func" href="../libraries/bitset.htm#next(in_bitset,in_integer)">next</a>(A, max(A)) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bitset.htm#str(in_bitset)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/bitset.htm#str(in_bitset)">str</a>(<span class="type">setType</span>.EMPTY_SET) <b>&rArr;</b> <span class="stri">"{}"</span>,
                    <a class="func" href="../libraries/bitset.htm#str(in_bitset)">str</a>({}) <b>&rArr;</b> <span class="stri">"{}"</span>,
                    <a class="func" href="../libraries/bitset.htm#str(in_bitset)">str</a>({1, 2}) <b>&rArr;</b> <span class="stri">"{1, 2}"</span> )
      <a class="func" href="../libraries/bitset.htm#rand(in_bitset)">rand</a>(A)   Random element from a set
                The random elements are uniform distributed.
                  ( Type of result: <span class="type">baseType</span>,
                    <a class="func" href="../libraries/bitset.htm#rand(in_bitset)">rand</a>(<span class="type">setType</span>.EMPTY_SET) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/bitset.htm#compare(in_bitset,in_bitset)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bitset.htm#hashCode(in_bitset)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bitset.htm#toArray(in_bitset)">toArray</a>(A)  Obtain an array containing all the values in A
                  ( Type of result: <a class="type" href="#array">array</a> <span class="type">baseType</span>,
                    <a class="func" href="../libraries/bitset.htm#toArray(in_bitset)">toArray</a>({2, 3, 5}) <b>&rArr;</b> [](2, 3, 5),
                    <a class="func" href="../libraries/bitsetof.htm#toArray(in_setType)">toArray</a>({'a', 'b', 'c'}) <b>&rArr;</b> []('a', 'b', 'c') )
    Statements:
      A <a class="op" href="../libraries/bitset.htm#(inout_bitset)|:=(in_bitset)">|:=</a> B   Assign the union of A and B to A
      A <a class="op" href="../libraries/bitset.htm#(inout_bitset)&:=(in_bitset)">&amp;:=</a> B   Assign the intersection of A and B to A
      A <a class="op" href="../libraries/bitset.htm#(inout_bitset)-:=(in_bitset)">-:=</a> B   Assign the difference of A and B to A
      A <a class="op" href="../libraries/bitset.htm#(inout_bitset)@:=_[(in_integer)](in_boolean)">@:=</a> [B] C  Add or remove B to respectively from A
                  ( Type of argument B: <span class="type">baseType</span>,
                    Type of argument C: <a class="type" href="#boolean">boolean</a>,
                    A <a class="op_no_ul" href="../libraries/bitset.htm#(inout_bitset)@:=_[(in_integer)](in_boolean)">@:=</a> [B] <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> <b>&rArr;</b> <a class="func" href="../libraries/bitset.htm#incl(inout_bitset,in_integer)">incl</a>(A,B),
                    A <a class="op_no_ul" href="../libraries/bitset.htm#(inout_bitset)@:=_[(in_integer)](in_boolean)">@:=</a> [B] <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> <b>&rArr;</b> <a class="func" href="../libraries/bitset.htm#excl(inout_bitset,in_integer)">excl</a>(A,B) )
      <a class="func" href="../libraries/bitset.htm#incl(inout_bitset,in_integer)">incl</a>(A,B) Include element B to set A
                  ( Type of argument B: <span class="type">baseType</span> )
      <a class="func" href="../libraries/bitset.htm#excl(inout_bitset,in_integer)">excl</a>(A,B) Exclude element B from set A
                  ( Type of argument B: <span class="type">baseType</span> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/bitset.htm#for(inout_integer)range(in_bitset)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/bitset.htm#for(inout_integer)range(in_bitset)do(in_proc)end_for">range</a> aSet <a class="keywd" href="../libraries/bitset.htm#for(inout_integer)range(in_bitset)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/bitset.htm#for(inout_integer)range(in_bitset)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/bitset.htm#for(inout_integer)range(in_bitset)do(in_proc)end_for">for</a>   Loop over all elements of a set
                  ( Type of argument forVar: <span class="type">baseType</span>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="struct"><h3>5.13 struct</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">struct</a></tt> describes all structured types. An example of a
  struct type declaration is:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: aStructType <span class="keywd">is</span> <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">new</a> <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">struct</a>
    <span class="keywd">var</span> <a class="type" href="#string">string</a>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">end</a> <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">struct</a>
</pre><p>
  Variables of this type are declared with:
</p><pre class="indent">
<span class="keywd">var</span> <span class="type">aStructType</span>: aStructVariable <span class="keywd">is</span> <span class="type">aStructType</span>.value;
</pre><p>
  In <tt><span class="type">aStructType</span>.value</tt> all elements have the initialisation values from
  the struct declaration of <tt><span class="type">aStructType</span></tt>. Besides <tt><span class="type">aStructType</span>.value</tt>
  there are no struct literals.
</p><pre class="tt">
    Type generators:
      <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">new</a> <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">struct</a>
        <span class="keywd">var</span> <span class="type">aType</span>: name <span class="keywd">is</span> value;
        ...
      <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">end</a> <a class="keywd_no_ul" href="../libraries/struct.htm#new_struct(ref_proc)end_struct">struct</a>
                Create new structure type

      <a class="keywd_no_ul" href="../libraries/struct.htm#new(in_type)struct(ref_proc)end_struct">new</a> <span class="type">baseType</span> <a class="keywd_no_ul" href="../libraries/struct.htm#new(in_type)struct(ref_proc)end_struct">struct</a>
        <span class="keywd">var</span> <span class="type">aType</span>: name <span class="keywd">is</span> value;
        ...
      <a class="keywd_no_ul" href="../libraries/struct.htm#new(in_type)struct(ref_proc)end_struct">end</a> <a class="keywd_no_ul" href="../libraries/struct.htm#new(in_type)struct(ref_proc)end_struct">struct</a>
                Create new structure type as subtype of <tt><span class="type">baseType</span></tt>,
                which is not a structure

      <a class="keywd_no_ul" href="../libraries/struct.htm#sub(in_type)struct(ref_proc)end_struct">sub</a> <span class="type">baseType</span> <a class="keywd_no_ul" href="../libraries/struct.htm#sub(in_type)struct(ref_proc)end_struct">struct</a>
        <span class="keywd">var</span> <span class="type">aType</span>: name <span class="keywd">is</span> value;
        ...
      <a class="keywd_no_ul" href="../libraries/struct.htm#sub(in_type)struct(ref_proc)end_struct">end</a> <a class="keywd_no_ul" href="../libraries/struct.htm#sub(in_type)struct(ref_proc)end_struct">struct</a>
                Create new structure type as subtype of <tt><span class="type">baseType</span></tt>,
                which is a structure type. The new structure type inherits all
                elements of the structure type <tt><span class="type">baseType</span></tt>.

      <span class="keywd">var</span> <span class="type">aType</span>: name <span class="keywd">is</span> value
                Declare structure element 'name' with 'value'

    Infix operators:
      .         Access Element of STRUCT
                  ( example.element )
      ->        Access Element of ptr STRUCT
                  ( example->element )
    Relations:
      =, &lt;>
    Statements:
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="enumeration"><h3>5.14 enumeration</h3></a>
<p>
    With
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: anEnumType <span class="keywd">is new enum</span>
    enum_literal1, enum_literal2
  <span class="keywd">end enum</span>;
</pre><p>
  a new enumeration type is declared. The values of this type are:
</p><pre class="box">
    enum_literal1 and enum_literal2
</pre><p>
  For an enumeration type only few operations are predefined.
  Additional operations must be defined separately. So it is
  necessary to define the functions <tt><span class="func">str</span></tt> and <tt><font color=blue>parse</font></tt> in order to
  do I/O for a new enumeration type. E.g.:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#func">func</a> <a class="type" href="#string">string</a>: str (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <span class="type">anEnumType</span>: enumValue) <span class="keywd">is</span>
    <span class="keywd">return</span> literal(enumValue);

enable_output(<span class="type">anEnumType</span>);
</pre><p>
  The need to define <tt><span class="func">str</span></tt> opens the oportunity to convert to
  strings, that differ from the original literals.
</p><pre class="tt">
    Constants:
      <span class="type">anEnumType</span>.<a class="var" href="../libraries/enumeration.htm#(attr_enumType)._value">value</a>  Default value of <span class="type">anEnumType</span> (enum_literal1)
      <span class="type">anEnumType</span>.<a class="var" href="../libraries/enumeration.htm#(attr_enumType)._first">first</a>  Minimum value of <span class="type">anEnumType</span> (enum_literal1)
      <span class="type">anEnumType</span>.<a class="var" href="../libraries/enumeration.htm#(attr_enumType)._last">last</a>   Maximum value of <span class="type">anEnumType</span> (enum_literal2)
    Infix operators:
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <span class="type">anEnumType</span> <a class="op" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> A  Conversion from <a class="type" href="#integer">integer</a> A to <span class="type">anEnumType</span>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <span class="type">anEnumType</span> <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> 0 <b>&rArr;</b> enum_literal1,
                    <span class="type">anEnumType</span> <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> 1 <b>&rArr;</b> enum_literal2,
                    <span class="type">anEnumType</span> <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> 2 <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    <span class="type">anEnumType</span> <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> (-1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="type" href="#integer">integer</a> <a class="op" href="../libraries/enumeration.htm#(attr_integer)conv(in_enumType)">conv</a> A   Conversion from <span class="type">anEnumType</span> A to <a class="type" href="#integer">integer</a>
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="#integer">integer</a> <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_integer)conv(in_enumType)">conv</a> enum_literal1 <b>&rArr;</b> 0,
                    <a class="type" href="#integer">integer</a> <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_integer)conv(in_enumType)">conv</a> enum_literal2 <b>&rArr;</b> 1 )
    Relations:
      <a class="op" href="../libraries/enumeration.htm#(in_enumType)=(in_enumType)">=</a>, <a class="op" href="../libraries/enumeration.htm#(in_enumType)<>(in_enumType)">&lt;></a>, &lt;, &lt;=, >, >=
    Functions:
      <a class="func" href="../libraries/enumeration.htm#ord(in_enumType)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/enumeration.htm#ord(in_enumType)">ord</a>(enum_literal1) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/enumeration.htm#ord(in_enumType)">ord</a>(enum_literal2) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/enumeration.htm#integer(in_enumType)">integer</a>(A) Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/enumeration.htm#integer(in_enumType)">integer</a>(enum_literal1) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/enumeration.htm#integer(in_enumType)">integer</a>(enum_literal2) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/enumeration.htm#succ(in_enumType)">succ</a>(A)   Successor
                  ( <a class="func" href="../libraries/enumeration.htm#succ(in_enumType)">succ</a>(A) <b>&rArr;</b> enumType <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> <a class="func" href="../libraries/integer.htm#succ(in_integer)">succ</a>(<a class="func" href="../libraries/enumeration.htm#ord(in_enumType)">ord</a>(A)),
                    <a class="func" href="../libraries/enumeration.htm#succ(in_enumType)">succ</a>(enum_literal1) <b>&rArr;</b> enum_literal2,
                    <a class="func" href="../libraries/enumeration.htm#succ(in_enumType)">succ</a>(<span class="type">anEnumType</span>.<a class="var" href="../libraries/enumeration.htm#(attr_enumType)._last">last</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/enumeration.htm#pred(in_enumType)">pred</a>(A)   Predecessor
                  ( <a class="func" href="../libraries/enumeration.htm#pred(in_enumType)">pred</a>(A) <b>&rArr;</b> enumType <a class="op_no_ul" href="../libraries/enumeration.htm#(attr_enumType)conv(in_integer)">conv</a> <a class="func" href="../libraries/integer.htm#pred(in_integer)">pred</a>(<a class="func" href="../libraries/enumeration.htm#ord(in_enumType)">ord</a>(A)),
                    <a class="func" href="../libraries/enumeration.htm#pred(in_enumType)">pred</a>(enum_literal2) <b>&rArr;</b> enum_literal1,
                    <a class="func" href="../libraries/enumeration.htm#pred(in_enumType)">pred</a>(<span class="type">anEnumType</span>.<a class="var" href="../libraries/enumeration.htm#(attr_enumType)._first">first</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/enumeration.htm#literal(in_enumType)">literal</a>(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/enumeration.htm#literal(in_enumType)">literal</a>(enum_literal1) <b>&rArr;</b> "enum_literal1",
                    <a class="func" href="../libraries/enumeration.htm#literal(in_enumType)">literal</a>(enum_literal2) <b>&rArr;</b> "enum_literal2" )
      <a class="func" href="../libraries/enumeration.htm#rand(in_enumType,in_enumType)">rand</a>(A, B) Random value in the range [A, B]
                 The random values are uniform distributed.
                  ( <a class="func" href="../libraries/enumeration.htm#rand(in_enumType,in_enumType)">rand</a>(A, B) returns a random enumeration value such that
                    A &lt;= <a class="func" href="../libraries/enumeration.htm#rand(in_enumType,in_enumType)">rand</a>(A, B) <a class="op" href="../libraries/boolean.htm#(in_boolean)and(ref_func_boolean)">and</a> <a class="func" href="../libraries/enumeration.htm#rand(in_enumType,in_enumType)">rand</a>(A, B) &lt;= B holds.
                    <a class="func" href="../libraries/enumeration.htm#rand(in_enumType,in_enumType)">rand</a>(A, A) <b>&rArr;</b> A,
                    <a class="func" href="../libraries/enumeration.htm#rand(in_enumType,in_enumType)">rand</a>(enum_literal2, enum_literal1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/enumeration.htm#compare(in_enumType,in_enumType)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/enumeration.htm#compare(in_enumType,in_enumType)">compare</a>(enum_literal1, enum_literal2) <b>&rArr;</b> -1,
                    <a class="func" href="../libraries/enumeration.htm#compare(in_enumType,in_enumType)">compare</a>(enum_literal1, enum_literal1) <b>&rArr;</b> 0,
                    <a class="func" href="../libraries/enumeration.htm#compare(in_enumType,in_enumType)">compare</a>(enum_literal2, enum_literal1) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/enumeration.htm#hashCode(in_enumType)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/enumeration.htm#incr(inout_enumType)">incr</a>(A)   Increment
                  ( <a class="func" href="../libraries/enumeration.htm#incr(inout_enumType)">incr</a>(A) <b>&rArr;</b> A:=<a class="func" href="../libraries/enumeration.htm#succ(in_enumType)">succ</a>(A) )
      <a class="func" href="../libraries/enumeration.htm#decr(inout_enumType)">decr</a>(A)   Decrement
                  ( <a class="func" href="../libraries/enumeration.htm#decr(inout_enumType)">decr</a>(A) <b>&rArr;</b> A:=<a class="func" href="../libraries/enumeration.htm#pred(in_enumType)">pred</a>(A) )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="bin64"><h3>5.15 bin64</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/bin64.htm#bin64">bin64</a></tt> describes bit-patterns with 64 bits. It uses
  the same representation as an <tt><a class="type" href="#integer">integer</a></tt>. There is a division of
  responsibility. The type <tt><a class="type" href="../libraries/bin64.htm#bin64">bin64</a></tt> is for bitwise operations and
  the type <tt><a class="type" href="#integer">integer</a></tt> is for arithmetic operations. In compiled
  programs conversions between <tt><a class="type" href="../libraries/bin64.htm#bin64">bin64</a></tt> and <tt><a class="type" href="#integer">integer</a></tt> have no
  overhead.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>.<a class="var" href="../libraries/bin64.htm#(attr_bin64)._value">value</a>  Default value of <a class="type" href="../libraries/bin64.htm#bin64">bin64</a> (<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(0))
    Prefix operators:
      <a class="op" href="../libraries/bin64.htm#~(in_bin64)">~</a>         Bitwise not
    Infix operators:
      <a class="op" href="../libraries/bin64.htm#(in_bin64)&(in_bin64)">&amp;</a>         Bitwise and
      <a class="op" href="../libraries/bin64.htm#(in_bin64)|(in_bin64)">|</a>         Bitwise inclusive or
      <a class="op" href="../libraries/bin64.htm#(in_bin64)&gt;<(in_bin64)">>&lt;</a>        Bitwise exclusive or (xor)
      A <a class="op" href="../libraries/bin64.htm#(in_bin64)<<(in_integer)">&lt;&lt;</a> B    Shift left
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A &lt;&lt; B is okay for B >= 0 and B &lt;= 63,
                    A &lt;&lt; B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for B &lt; 0 or B >= 64,
                    A &lt;&lt; 0 <b>&rArr;</b> A,
                    <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#1234567890abcde0) <a class="op" href="../libraries/bin64.htm#(in_bin64)<<(in_integer)">&lt;&lt;</a> 4 <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#234567890abcde00) )
      A <a class="op" href="../libraries/bin64.htm#(in_bin64)&gt;&gt;(in_integer)">>></a> B    Shift right
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A >> B is okay for B >= 0 and B &lt;= 63,
                    A >> B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for B &lt; 0 or B >= 64,
                    A >> 0 <b>&rArr;</b> A,
                    <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#1234567890abcde0) <a class="op" href="../libraries/bin64.htm#(in_bin64)&gt;&gt;(in_integer)">>></a> 4 <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#1234567890abcde) )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      A <a class="op" href="../libraries/bin64.htm#(in_bin64)radix(in_integer)">radix</a> B Convert to a string using a radix
                  ( Type of result: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#integer">integer</a> )
      A <a class="op" href="../libraries/bin64.htm#(in_bin64)RADIX(in_integer)">RADIX</a> B Convert to a string using a radix
                  ( Type of result: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#integer">integer</a> )
      <a class="type" href="#integer">integer</a> <a class="op" href="../libraries/bin64.htm#(attr_integer)conv(in_bin64)">conv</a> A  Convert to <a class="type" href="#integer">integer</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="type" href="../libraries/bin64.htm#bin64">bin64</a> <a class="op" href="../libraries/bin64.htm#(attr_bin64)conv(in_integer)">conv</a> A  Convert to <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
    Relations:
      <a class="op" href="../libraries/bin64.htm#(in_bin64)=(in_bin64)">=</a>, <a class="op" href="../libraries/bin64.htm#(in_bin64)<&gt;(in_bin64)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(A)  Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>
                  ( Type of argument: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin64.htm#bin64(in_bigInteger)">bin64</a>(A)  Conversion of <a class="type" href="#bigInteger">bigInteger</a> to <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>
                  ( Type of argument: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/bin64.htm#bin64(in_char)">bin64</a>(A)  Conversion of <a class="type" href="#char">char</a> to <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>
                  ( Type of argument: <a class="type" href="#char">char</a> )
      <a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(A)  Get bits in IEEE 754 double-precision representation from a <a class="type" href="#float">float</a>
                  ( Type of argument: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin64.htm#bin64(in_float)">bin64</a>(1.0) <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#3ff0000000000000) )
      <a class="func" href="../libraries/bin64.htm#ord(in_bin64)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin64.htm#integer(in_bin64)">integer</a>(A) Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin64.htm#big(in_bin64)">big</a>(A)    Conversion to <a class="type" href="#bigInteger">bigInteger</a>
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/bin64.htm#bigInteger(in_bin64)">bigInteger</a>(A) Conversion to <a class="type" href="#bigInteger">bigInteger</a>
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(A)  Get <a class="type" href="#float">float</a> from bits in IEEE 754 double-precision representation
                  ( Type of result: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin64.htm#float(in_bin64)">float</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#3ff0000000000000)) <b>&rArr;</b> 1.0 )
      <a class="func" href="../libraries/bin64.htm#compare(in_bin64,in_bin64)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin64.htm#hashCode(in_bin64)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin64.htm#bitLength(in_bin64)">bitLength</a>(A) Number of bits in the minimum binary representation.
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    bitLength(bin64(0)) <b>&rArr;</b> 0,
                    bitLength(bin64(1)) <b>&rArr;</b> 1,
                    bitLength(bin64(4)) <b>&rArr;</b> 3 )
      <a class="func" href="../libraries/bin64.htm#lowestSetBit(in_bin64)">lowestSetBit</a>(A) Number of lowest-order zero bits in the binary representation.
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    A >> B &lt;&lt; B = A for A &lt;> bin64(0) and B = lowestSetBit(A),
                    lowestSetBit(bin64(0)) <b>&rArr;</b> -1,
                    lowestSetBit(bin64(1)) <b>&rArr;</b> 0,
                    lowestSetBit(bin64(2)) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/bin64.htm#rand(attr_bin64)">rand</a>(<a class="type" href="../libraries/bin64.htm#bin64">bin64</a>) Random <a class="type" href="../libraries/bin64.htm#bin64">bin64</a> value
                 The random values are uniform distributed.
                  ( <a class="func" href="../libraries/bin64.htm#rand(attr_bin64)">rand</a>(<a class="type" href="../libraries/bin64.htm#bin64">bin64</a>) <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(<a class="func" href="../libraries/integer.htm#rand(in_integer,in_integer)">rand</a>(<a class="type" href="#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._first">first</a>, <a class="type" href="#integer">integer</a>.<a class="var" href="../libraries/integer.htm#(attr_integer)._last">last</a>)) )
      <a class="func" href="../libraries/bin64.htm#str(in_bin64)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/bin64.htm#str(in_bin64)">str</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_bigInteger)">bin64</a>(18446744073709551615_)) <b>&rArr;</b> <span class="stri">"18446744073709551615"</span> )
      <a class="func" href="../libraries/bin64.htm#bytes(in_bin64,BE,in_integer)">bytes</a>(aBin64, BE, len) Convert into a <a class="type" href="#string">string</a> of bytes with big-endian encoding
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bin64.htm#bytes(in_bin64,LE,in_integer)">bytes</a>(aBin64, LE, len) Convert into a <a class="type" href="#string">string</a> of bytes with little-endian encoding
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bin64.htm#rotLeft(in_bin64,in_integer)">rotLeft</a>(A, B)  Rotate the bits of a A left by B bits
                  ( <a class="func" href="../libraries/bin64.htm#rotLeft(in_bin64,in_integer)">rotLeft</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#76543210fedcba98), 12) <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#43210fedcba98765) )
      <a class="func" href="../libraries/bin64.htm#rotRight(in_bin64,in_integer)">rotRight</a>(A, B)  Rotate the bits of a A right by B bits
                  ( <a class="func" href="../libraries/bin64.htm#rotRight(in_bin64,in_integer)">rotRight</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#76543210fedcba98), 40) <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_integer)">bin64</a>(16#10fedcba98765432) )
      <a class="func" href="../libraries/bin64.htm#getBinary(in_bitset,in_integer)">getBinary</a>(aBitset, lowestBitNum)  Get 64 bits from aBitset starting with lowestBitNum
                  ( Type of argument aBitset: <a class="type" href="#set">bitset</a>,
                    Type of argument lowestBitNum: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin64.htm#float2MbfBits(in_float,DOUBLE)">float2MbfBits</a>(aFloat, DOUBLE) Get bits in MBF double-precision representation from aFloat
                 Microsoft Binary Format (MBF) is a format for floating point numbers.
                  ( Type of argument aFloat: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin64.htm#float2MbfBits(in_float,DOUBLE)">float2MbfBits</a>(1.0, DOUBLE) <b>&rArr;</b> <a class="func" href="../libraries/bin64.htm#bin64(in_bigInteger)">bin64</a>(16#8100000000000000_) )
      <a class="func" href="../libraries/bin64.htm#mbfBits2Float(in_bin64)">mbfBits2Float</a>(bits) Get a float from bits in MBF double-precision representation
                 Microsoft Binary Format (MBF) is a format for floating point numbers.
                  ( Type of result: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin64.htm#mbfBits2Float(in_bin64)">mbfBits2Float</a>(<a class="func" href="../libraries/bin64.htm#bin64(in_bigInteger)">bin64</a>(16#8100000000000000_)) <b>&rArr;</b> 1.0 )
      <a class="func" href="../libraries/bin64.htm#bin64(in_string,LE)">bin64</a>(bytes, LE) Convert <a class="type" href="#string">string</a> of little-endian bytes to <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>
                  ( Type of argument bytes: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bin64.htm#bin64(in_string,BE)">bin64</a>(bytes, BE) Convert <a class="type" href="#string">string</a> of big-endian bytes to <a class="type" href="../libraries/bin64.htm#bin64">bin64</a>
                  ( Type of argument bytes: <a class="type" href="#string">string</a> )
    Statements:
      A <a class="func" href="../libraries/bin64.htm#(inout_bin64)&:=(in_bin64)">&amp;:=</a> B   Bitwise and copy
                  ( A &amp;:= B ⇒ A := A &amp; B )
      A <a class="func" href="../libraries/bin64.htm#(inout_bin64)|:=(in_bin64)">|:=</a> B   Bitwise inclusive or copy
                  ( A |:= B ⇒ A := A | B )
      A <a class="func" href="../libraries/bin64.htm#(inout_bin64)&gt;<:=(in_bin64)">>&lt;:=</a> B  Bitwise exclusive or (xor) copy
                  ( A >&lt;:= B ⇒ A := A >&lt; B )
      A <a class="func" href="../libraries/bin64.htm#(inout_bin64)<<:=(in_integer)">&lt;&lt;:=</a> B  Shift left copy
                  ( A &lt;&lt;:= B ⇒ A := A &lt;&lt; B )
      A <a class="func" href="../libraries/bin64.htm#(inout_bin64)&gt;&gt;:=(in_integer)">>>:=</a> B  Shift right copy
                  ( A >>:= B ⇒ A := A >> B )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="bin32"><h3>5.16 bin32</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/bin32.htm#bin32">bin32</a></tt> describes bit-patterns with 32 bits. It uses
  the same representation as an <tt><a class="type" href="#integer">integer</a></tt>. There is a division of
  responsibility. The type <tt><a class="type" href="../libraries/bin32.htm#bin32">bin32</a></tt> is for bitwise operations and
  the type <tt><a class="type" href="#integer">integer</a></tt> is for arithmetic operations. In compiled
  programs conversions between <tt><a class="type" href="../libraries/bin32.htm#bin32">bin32</a></tt> and <tt><a class="type" href="#integer">integer</a></tt> have no
  overhead.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/bin32.htm#bin32">bin32</a>.<a class="var" href="../libraries/bin32.htm#(attr_bin32)._value">value</a>  Default value of <a class="type" href="../libraries/bin32.htm#bin32">bin32</a> (<a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(0))
    Prefix operators:
      <a class="op" href="../libraries/bin32.htm#~(in_bin32)">~</a>         Bitwise not
    Infix operators:
      <a class="op" href="../libraries/bin32.htm#(in_bin32)&(in_bin32)">&amp;</a>         Bitwise and
      <a class="op" href="../libraries/bin32.htm#(in_bin32)|(in_bin32)">|</a>         Bitwise inclusive or
      <a class="op" href="../libraries/bin32.htm#(in_bin32)&gt;<(in_bin32)">>&lt;</a>        Bitwise exclusive or (xor)
      A <a class="op" href="../libraries/bin32.htm#(in_bin32)<<(in_integer)">&lt;&lt;</a> B    Shift left
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A &lt;&lt; B is okay for B >= 0 and B &lt;= 63,
                    A &lt;&lt; B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for B &lt; 0 or B >= 64,
                    A &lt;&lt; 0 <b>&rArr;</b> A,
                    <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#abcdef) <a class="op" href="../libraries/bin32.htm#(in_bin32)<<(in_integer)">&lt;&lt;</a> 4 <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#abcdef0) )
      A <a class="op" href="../libraries/bin32.htm#(in_bin32)&gt;&gt;(in_integer)">>></a> B    Shift right
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    A >> B is okay for B >= 0 and B &lt;= 63,
                    A >> B <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#OVERFLOW_ERROR">OVERFLOW_ERROR</a> for B &lt; 0 or B >= 64,
                    A >> 0 <b>&rArr;</b> A,
                    <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#abcdef) <a class="op" href="../libraries/bin32.htm#(in_bin32)&gt;&gt;(in_integer)">>></a> 4 <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#abcde) )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      A <a class="op" href="../libraries/bin32.htm#(in_bin32)radix(in_integer)">radix</a> B Convert to a string using a radix
                  ( Type of result: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#integer">integer</a> )
      A <a class="op" href="../libraries/bin32.htm#(in_bin32)RADIX(in_integer)">RADIX</a> B Convert to a string using a radix
                  ( Type of result: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#integer">integer</a> )
      <a class="type" href="#integer">integer</a> <a class="op" href="../libraries/bin32.htm#(attr_integer)conv(in_bin32)">conv</a> A  Convert to <a class="type" href="#integer">integer</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="type" href="../libraries/bin32.htm#bin32">bin32</a> <a class="op" href="../libraries/bin32.htm#(attr_bin32)conv(in_integer)">conv</a> A  Convert to <a class="type" href="../libraries/bin32.htm#bin32">bin32</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
    Relations:
      <a class="op" href="../libraries/bin32.htm#(in_bin32)=(in_bin32)">=</a>, <a class="op" href="../libraries/bin32.htm#(in_bin32)<&gt;(in_bin32)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(A)  Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/bin32.htm#bin32">bin32</a>
                  ( Type of argument: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin32.htm#bin32(in_char)">bin32</a>(A)  Conversion of <a class="type" href="#char">char</a> to <a class="type" href="../libraries/bin32.htm#bin32">bin32</a>
                  ( Type of argument: <a class="type" href="#char">char</a> )
      <a class="func" href="../libraries/bin32.htm#bin32(in_float)">bin32</a>(A)  Get bits in IEEE 754 single-precision representation from a <a class="type" href="#float">float</a>
                  ( Type of argument: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin32.htm#bin32(in_float)">bin32</a>(1.0) <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#3f800000) )
      <a class="func" href="../libraries/bin32.htm#ord(in_bin32)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin32.htm#integer(in_bin32)">integer</a>(A) Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin32.htm#float(in_bin32)">float</a>(A)  Get <a class="type" href="#float">float</a> from bits in IEEE 754 single-precision representation
                  ( Type of result: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin32.htm#float(in_bin32)">float</a>(<a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#3f800000)) <b>&rArr;</b> 1.0 )
      <a class="func" href="../libraries/bin32.htm#compare(in_bin32,in_bin32)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin32.htm#hashCode(in_bin32)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bin32.htm#bitLength(in_bin32)">bitLength</a>(A) Number of bits in the minimum binary representation.
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    bitLength(bin32(0)) <b>&rArr;</b> 0,
                    bitLength(bin32(1)) <b>&rArr;</b> 1,
                    bitLength(bin32(4)) <b>&rArr;</b> 3 )
      <a class="func" href="../libraries/bin32.htm#lowestSetBit(in_bin32)">lowestSetBit</a>(A) Number of lowest-order zero bits in the binary representation.
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    A >> B &lt;&lt; B = A for A &lt;> bin32(0) and B = lowestSetBit(A),
                    lowestSetBit(bin32(0)) <b>&rArr;</b> -1,
                    lowestSetBit(bin32(1)) <b>&rArr;</b> 0,
                    lowestSetBit(bin32(2)) <b>&rArr;</b> 1 )
      <a class="func" href="../libraries/bin32.htm#rand(attr_bin32)">rand</a>(<a class="type" href="../libraries/bin32.htm#bin32">bin32</a>) Random <a class="type" href="../libraries/bin32.htm#bin32">bin32</a> value
                 The random values are uniform distributed.
                  ( <a class="func" href="../libraries/bin32.htm#rand(attr_bin32)">rand</a>(<a class="type" href="../libraries/bin32.htm#bin32">bin32</a>) <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(<a class="func" href="../libraries/integer.htm#rand(in_integer,in_integer)">rand</a>(0, 4294967295)) )
      <a class="func" href="../libraries/bin32.htm#str(in_bin32)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/bin32.htm#str(in_bin32)">str</a>(<a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(4294967295)) <b>&rArr;</b> <span class="stri">"4294967295"</span> )
      <a class="func" href="../libraries/bin32.htm#bytes(in_bin32,BE,in_integer)">bytes</a>(aBin32, BE, len) Convert into a <a class="type" href="#string">string</a> of bytes with big-endian encoding
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bin32.htm#bytes(in_bin32,LE,in_integer)">bytes</a>(aBin32, LE, len) Convert into a <a class="type" href="#string">string</a> of bytes with little-endian encoding
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bin32.htm#rotLeft(in_bin32,in_integer)">rotLeft</a>(A, B)  Rotate the bits of a A left by B bits
                  ( <a class="func" href="../libraries/bin32.htm#rotLeft(in_bin32,in_integer)">rotLeft</a>(<a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#12345678), 8) <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#34567812) )
      <a class="func" href="../libraries/bin32.htm#rotRight(in_bin32,in_integer)">rotRight</a>(A, B)  Rotate the bits of a A right by B bits
                  ( <a class="func" href="../libraries/bin32.htm#rotRight(in_bin32,in_integer)">rotRight</a>(<a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#12345678), 8) <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#78123456) )
      <a class="func" href="../libraries/bin32.htm#float2MbfBits(in_float,SINGLE)">float2MbfBits</a>(aFloat, SINGLE) Get bits in MBF single-precision representation from aFloat
                 Microsoft Binary Format (MBF) is a format for floating point numbers.
                  ( Type of argument aFloat: <a class="type" href="#float">float</a>,
                    <a class="func" href="../libraries/bin32.htm#float2MbfBits(in_float,SINGLE)">float2MbfBits</a>(1.0, SINGLE) <b>&rArr;</b> <a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#81000000) )
      <a class="func" href="../libraries/bin32.htm#mbfBits2Float(in_bin32)">mbfBits2Float</a>(bits) Get a float from bits in MBF single-precision representation
                 Microsoft Binary Format (MBF) is a format for floating point numbers.
                  ( Type of result: <a class="type" href="#float">float</a>
                    <a class="func" href="../libraries/bin32.htm#mbfBits2Float(in_bin32)">mbfBits2Float</a>(<a class="func" href="../libraries/bin32.htm#bin32(in_integer)">bin32</a>(16#81000000)) <b>&rArr;</b> 1.0 )
      <a class="func" href="../libraries/bin32.htm#bin32(in_string,LE)">bin32</a>(bytes, LE) Convert <a class="type" href="#string">string</a> of little-endian bytes to <a class="type" href="../libraries/bin32.htm#bin32">bin32</a>
                  ( Type of argument bytes: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bin32.htm#bin32(in_string,BE)">bin32</a>(bytes, BE) Convert <a class="type" href="#string">string</a> of big-endian bytes to <a class="type" href="../libraries/bin32.htm#bin32">bin32</a>
                  ( Type of argument bytes: <a class="type" href="#string">string</a> )
    Statements:
      A <a class="func" href="../libraries/bin32.htm#(inout_bin32)&:=(in_bin32)">&amp;:=</a> B   Bitwise and copy
                  ( A &amp;:= B ⇒ A := A &amp; B )
      A <a class="func" href="../libraries/bin32.htm#(inout_bin32)|:=(in_bin32)">|:=</a> B   Bitwise inclusive or copy
                  ( A |:= B ⇒ A := A | B )
      A <a class="func" href="../libraries/bin32.htm#(inout_bin32)&gt;<:=(in_bin32)">>&lt;:=</a> B  Bitwise exclusive or (xor) copy
                  ( A >&lt;:= B ⇒ A := A >&lt; B )
      A <a class="func" href="../libraries/bin32.htm#(inout_bin32)<<:=(in_integer)">&lt;&lt;:=</a> B  Shift left copy
                  ( A &lt;&lt;:= B ⇒ A := A &lt;&lt; B )
      A <a class="func" href="../libraries/bin32.htm#(inout_bin32)&gt;&gt;:=(in_integer)">>>:=</a> B  Shift right copy
                  ( A >>:= B ⇒ A := A >> B )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="bstring"><h3>5.17 bstring</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/bstring.htm#bstring">bstring</a></tt> describes strings of bytes. It is used to store binary data.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/bstring.htm#bstring">bstring</a>.<a class="var" href="../libraries/bstring.htm#(attr_bstring)._value">value</a>  Default value of <a class="type" href="../libraries/bstring.htm#bstring">bstring</a> (<a class="func" href="../libraries/bstring.htm#bstring(in_string)">bstring</a>(<span class="stri">""</span>))
    Infix operators:
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/bstring.htm#bstring">bstring</a> <a class="op" href="../libraries/bstring.htm#(attr_bstring)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/bstring.htm#bstring">bstring</a>
                  ( Type of argument A: <a class="type" href="#string">string</a> )
    Indices:
      <a class="op" href="../libraries/bstring.htm#(in_bstring)[(in_integer)]">[</a> A <a class="op" href="../libraries/bstring.htm#(in_bstring)[(in_integer)]">]</a>     Access one character
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#char">char</a> )
    Functions:
      <a class="func" href="../libraries/bstring.htm#str(in_bstring)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bstring.htm#literal(in_bstring)">literal</a>(A) Conversion to a literal
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bstring.htm#string(in_bstring)">string</a>(A) Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bstring.htm#bstring(in_string)">bstring</a>(A) Conversion to <a class="type" href="../libraries/bstring.htm#bstring">bstring</a>
                  ( Type of argument A: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/bstring.htm#length(in_bstring)">length</a>(A) Length of <a class="type" href="../libraries/bstring.htm#bstring">bstring</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bstring.htm#compare(in_bstring,in_bstring)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bstring.htm#hashCode(in_bstring)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/bstring.htm#bStriBe2BigInt(in_bstring,in_boolean)">bStriBe2BigInt</a>(A, isSigned) Convert a <a class="type" href="../libraries/bstring.htm#bstring">bstring</a> (interpreted as big-endian) to a <a class="type" href="#bigInteger">bigInteger</a>
                  ( Type of argument isSigned: <a class="type" href="#boolean">boolean</a>,
                    Type of result: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/bstring.htm#bStriLe2BigInt(in_bstring,in_boolean)">bStriLe2BigInt</a>(A, isSigned) Convert a <a class="type" href="../libraries/bstring.htm#bstring">bstring</a> (interpreted as little-endian) to a <a class="type" href="#bigInteger">bigInteger</a>
                  ( Type of argument isSigned: <a class="type" href="#boolean">boolean</a>,
                    Type of result: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/bstring.htm#bStriBe(in_bigInteger,in_boolean)">bStriBe</a>(A, isSigned) Convert a <a class="type" href="#bigInteger">bigInteger</a> into a big-endian <a class="type" href="../libraries/bstring.htm#bstring">bstring</a>
                  ( Type of argument A: <a class="type" href="#bigInteger">bigInteger</a>,
                    Type of argument isSigned: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/bstring.htm#bStriLe(in_bigInteger,in_boolean)">bStriLe</a>(A, isSigned) Convert a <a class="type" href="#bigInteger">bigInteger</a> into a little-endian <a class="type" href="../libraries/bstring.htm#bstring">bstring</a>
                  ( Type of argument A: <a class="type" href="#bigInteger">bigInteger</a>,
                    Type of argument isSigned: <a class="type" href="#boolean">boolean</a> )
    Relations:
      <a class="op" href="../libraries/bstring.htm#(in_bstring)=(in_bstring)">=</a>, <a class="op" href="../libraries/bstring.htm#(in_bstring)<>(in_bstring)">&lt;></a>
    Statements:
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/bstring.htm#for(inout_char)range(in_bstring)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/bstring.htm#for(inout_char)range(in_bstring)do(in_proc)end_for">range</a> bstri <a class="keywd" href="../libraries/bstring.htm#for(inout_char)range(in_bstring)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/bstring.htm#for(inout_char)range(in_bstring)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/bstring.htm#for(inout_char)range(in_bstring)do(in_proc)end_for">for</a>   Loop over all elements of a bstring
                  ( Type of argument forVar: <a class="type" href="#char">char</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="color"><h3>5.18 color</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/color.htm#color">color</a></tt> describes colors. It uses the additive color
  model with red, green and blue lights. The red, green and blue
  lights are specified with <tt><a class="type" href="#integer">integer</a></tt> values in the range 0 .. 65535.
  The <tt><a class="type" href="../libraries/color.htm#color">color</a></tt> functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/color.htm">color.s7i</a>"</span>.
</p><pre class="tt">
    Elements:
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: redLight <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: greenLight <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: blueLight <span class="keywd">is</span> 0;
    Constants:
      <a class="type" href="../libraries/color.htm#color">color</a>.<span class="var">value</span>    Default value of <a class="type" href="../libraries/color.htm#color">color</a> (black)
      black          color(0, 0, 0);
      dark_red       color(32768, 0, 0);
      dark_green     color(0, 32768, 0);
      brown          color(32768, 16384, 0);
      dark_blue      color(0, 0, 32768);
      dark_magenta   color(32768, 0, 32768);
      dark_cyan      color(0, 65535, 65535);
      light_gray     color(49152, 49152, 49152);
      dark_gray      color(16384, 16384, 16384);
      light_red      color(65535, 0, 0);
      light_green    color(0, 65535, 0);
      yellow         color(65535, 65535, 0);
      light_blue     color(0, 0, 65535);
      light_magenta  color(65535, 0, 65535);
      light_cyan     color(32768, 65535, 65535);
      white          color(65535, 65535, 65535);
      orange         color(65535, 32768, 0);
      amber          color(49152, 32768, 16384);
      pink           color(65535, 32768, 32768);
    Infix operators:
      <a class="op" href="../libraries/color.htm#(in_color)+(in_color)">+</a>         Add two colors in an additive color system
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
    Relations:
      <a class="op" href="../libraries/color.htm#(in_color)=(in_color)">=</a>, <a class="op" href="../libraries/color.htm#(in_color)<&gt;(in_color)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/color.htm#color(in_integer,in_integer,in_integer)">color</a>(R,G,B) Creates a color from Red, Green and Blue
                  ( Type of argument R: <a class="type" href="#integer">integer</a>,
                    Type of argument G: <a class="type" href="#integer">integer</a>,
                    Type of argument B: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/color.htm#gray(in_integer)">gray</a>(BR)  Create a gray color value from BR
                  ( Type of argument BR: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/color.htm#compare(in_color,in_color)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/color.htm#hashCode(in_color)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/draw.htm#clear(in_color)">clear</a>(A)  Clear current window
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="time"><h3>5.19 time</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/time.htm#time">time</a></tt> describes times and dates.
  For dates the proleptic Gregorian calendar is used (which assumes
  that the Gregorian calendar was even in effect at dates preceding
  its official introduction). This convention is used according to
  ISO 8601 which also defines that positive and negative years exist
  and that the year preceding 1 is 0. Time is measured in hours,
  minutes, seconds and micro seconds. Additionally information about
  the difference to UTC and a flag indicating daylight saving time
  is maintained also. The <tt><a class="type" href="../libraries/time.htm#time">time</a></tt> functions are defined in the
  library <span class="stri">"<a class="lib" href="../libraries/time.htm">time.s7i</a>"</span>.
</p><pre class="tt">
    Elements:
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: year <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: month <span class="keywd">is</span> 1;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: day <span class="keywd">is</span> 1;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: hour <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: minute <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: second <span class="keywd">is</span> 0;
      <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: micro_second <span class="keywd">is</span> 0;
    Constants:
      <a class="type" href="../libraries/time.htm#time">time</a>.<span class="var">value</span>  Default value of <a class="type" href="../libraries/time.htm#time">time</a> (time(0, 1, 1, 0, 0, 0))
    Infix operators:
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/time.htm#time">time</a> <a class="op" href="../libraries/time.htm#(attr_time)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/time.htm#time">time</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/time.htm#time">time</a> <a class="op" href="../libraries/time.htm#(attr_time)parse(in_string)">parse</a> <span class="stri">"2005-02-28 12:00:01"</span> <b>&rArr;</b> 2005-02-28 12:00:01,
                    <a class="type" href="../libraries/time.htm#time">time</a> <a class="op" href="../libraries/time.htm#(attr_time)parse(in_string)">parse</a> <span class="stri">"2005-02-29 12:00:01"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/time.htm#(in_time)=(in_time)">=</a>, <a class="op" href="../libraries/time.htm#(in_time)<&gt;(in_time)">&lt;></a>, <a class="op" href="../libraries/time.htm#(in_time)<(in_time)">&lt;</a>, <a class="op" href="../libraries/time.htm#(in_time)<=(in_time)">&lt;=</a>, <a class="op" href="../libraries/time.htm#(in_time)&gt;(in_time)">></a>, <a class="op" href="../libraries/time.htm#(in_time)&gt;=(in_time)">>=</a>
    Functions:
      <a class="func" href="../libraries/time.htm#time(NOW)">time</a>(NOW)  Gets the current time
      <a class="func" href="../libraries/time.htm#time(in_var_string)">time</a>(A)  Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/time.htm#time">time</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/time.htm#time(in_var_string)">time</a>(<span class="stri">"2005-02-28 12:00:01"</span>) <b>&rArr;</b> 2005-02-28 12:00:01,
                    <a class="func" href="../libraries/time.htm#time(in_var_string)">time</a>(<span class="stri">"2005-02-29 12:00:01"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/time.htm#str(in_time)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/time.htm#strDate(in_time)">strDate</a>(A)  Conversion of the date to <a class="type" href="#string">string</a>
                    with ISO 8601 YYYY-MM-DD date format
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/time.htm#strTime(in_time)">strTime</a>(A)  Conversion of the daytime to <a class="type" href="#string">string</a>
                    with ISO 8601 hh:mm:ss time format
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/time.htm#strDateTime(in_time)">strDateTime</a>(A)  Conversion of date and time to <a class="type" href="#string">string</a>
                    with ISO 8601 YYYY-MM-DD hh:mm:ss format
                  ( Type of result: <a class="type" href="#string">string</a> )
      strTimeZone(A)  Conversion of the time zone to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/time.htm#truncToSecond(in_time)">truncToSecond</a>(A)  Truncate a time to a second
      <a class="func" href="../libraries/time.htm#truncToMinute(in_time)">truncToMinute</a>(A)  Truncate a time to a minute
      <a class="func" href="../libraries/time.htm#truncToHour(in_time)">truncToHour</a>(A)  Truncate a time to a hour
      <a class="func" href="../libraries/time.htm#truncToDay(in_time)">truncToDay</a>(A)  Truncate a time to a day
      <a class="func" href="../libraries/time.htm#truncToMonth(in_time)">truncToMonth</a>(A)  Truncate a time to a month
      <a class="func" href="../libraries/time.htm#truncToYear(in_time)">truncToYear</a>(A)  Truncate a time to a year
      <a class="func" href="../libraries/time.htm#isLeapYear(in_integer)">isLeapYear</a>(A)  Determine if a given year is a leap year
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/time.htm#daysInYear(in_integer)">daysInYear</a>(Y)  Calculate the number of days in a year
                  ( Type of argument Y: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#daysInMonth(in_integer,in_integer)">daysInMonth</a>(Y, M)  Calculate the number of days in a month
                  ( Type of argument Y: <a class="type" href="#integer">integer</a>,
                    Type of argument M: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#daysInMonth(in_time)">daysInMonth</a>(A)  Calculate the number of days in a month
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#dayOfWeek(in_time)">dayOfWeek</a>(A)  Day of the week with Monday as 1
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#dayOfYear(in_time)">dayOfYear</a>(A)  Day of the year with 1 January as 1
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#weekOfYear(in_var_integer,in_integer)">weekOfYear</a>(Y, D)  Compute the week number of a year (0 to 53).
                    According to ISO 8601: Week number 1 of
                    every year contains the 4. of january.
                  ( Type of argument Y: <a class="type" href="#integer">integer</a>,
                    Type of argument D: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#weekOfYear(in_time)">weekOfYear</a>(A)  Compute the week number of a year (0 to 53).
                    According to ISO 8601: Week number 1 of
                    every year contains the 4. of january.
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#weekDateYear(in_time)">weekDateYear</a>(A)  Compute the year of the ISO 8601 week date
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#weekDateWeek(in_time)">weekDateWeek</a>(A)  Compute the week of the ISO 8601 week date
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#toUTC(in_time)">toUTC</a>(A)  Conversion to Coordinated Universal Time (UTC)
      <a class="func" href="../libraries/time.htm#toLocalTZ(in_time)">toLocalTZ</a>  Convert given time to a time in the local time zone.
      <a class="func" href="../libraries/time.htm#setLocalTZ(in_time)">setLocalTZ</a>  Sets timeZone and daylightSavingTime for a given time.
      <a class="func" href="../libraries/time.htm#julianDayNumber(in_time)">julianDayNumber</a>(A)  Number of days that have elapsed since
                January 1, 4713 BC in the proleptic Julian calendar
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#julianDayNumToTime(in_integer)">julianDayNumToTime</a>(A)  Convert julian day number to time
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#timestamp1970(in_time)">timestamp1970</a>(A)  Time expressed in seconds since the
                Unix epoch (1970-01-01 00:00:00 UTC)
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#timestamp1970ToTime(in_integer)">timestamp1970ToTime</a>(A)  Convert a Unix timestamp into a time from
                the local time zone
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#timestamp1601(in_time)">timestamp1601</a>(A)  100-nanosecond intervals since the
                Windows epoch (1601-01-01 00:00:00 UTC)
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#timestamp1601ToTime(in_integer)">timestamp1601ToTime</a>(A)  Convert a FILETIME into a time from
                the local time zone
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#compare(in_time,in_time)">compare</a>(A, B)  Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/time.htm#hashCode(in_time)">hashCode</a>(A)  Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/time.htm#await(ref_time)">await</a>(A)  Wait until the given time
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="duration"><h3>5.20 duration</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/duration.htm#duration">duration</a></tt> describes time and date durations.
  The <tt><a class="type" href="../libraries/duration.htm#duration">duration</a></tt> functions are defined in the library
  <span class="stri">"<a class="lib" href="../libraries/duration.htm">duration.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/duration.htm#duration">duration</a>.<span class="var">value</span>  Default value of <a class="type" href="../libraries/duration.htm#duration">duration</a> (duration(<span class="stri">"P0D"</span>))
    Prefix operators:
      <a class="op" href="../libraries/duration.htm#+(in_duration)">+</a>         Identity
      <a class="op" href="../libraries/duration.htm#-(in_duration)">-</a>         Change sign
    Infix operators:
      <a class="op" href="../libraries/duration.htm#(in_duration)+(in_duration)">+</a>         Add two durations
      <a class="op" href="../libraries/duration.htm#(in_duration)-(in_duration)">-</a>         Subtract two durations
      <a class="op" href="../libraries/duration.htm#(in_integer)*(in_duration)">*</a>         Multiply a duration by an <a class="type" href="#integer">integer</a>
                  ( Type of left operand: <a class="type" href="#integer">integer</a> )
      <a class="op" href="../libraries/duration.htm#(in_duration)*(in_integer)">*</a>         Multiply a duration by an <a class="type" href="#integer">integer</a>
                  ( Type of right operand: <a class="type" href="#integer">integer</a> )
      <a class="op" href="../libraries/duration.htm#(in_time)+(in_duration)">+</a>         Add a duration to a time
                  ( Type of left operand: <a class="type" href="#time">time</a>,
                    Type of result: <a class="type" href="#time">time</a> )
      <a class="op" href="../libraries/duration.htm#(in_time)-(in_duration)">-</a>         Subtract a duration from a time
                  ( Type of left operand: <a class="type" href="#time">time</a>,
                    Type of result: <a class="type" href="#time">time</a> )
      <a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a>         Subtract two times
                  ( Type of left operand: <a class="type" href="#time">time</a>,
                    Type of right operand: <a class="type" href="#time">time</a> )
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( Type of argument A: <a class="type" href="#boolean">boolean</a>,
                    <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/duration.htm#duration">duration</a> <a class="op" href="../libraries/duration.htm#(attr_duration)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/duration.htm#duration">duration</a> <a class="op" href="../libraries/duration.htm#(attr_duration)parse(in_string)">parse</a> <span class="stri">"P2M28DT12H1S"</span> <b>&rArr;</b> P2M28DT12H1S,
                    <a class="type" href="../libraries/duration.htm#duration">duration</a> <a class="op" href="../libraries/duration.htm#(attr_duration)parse(in_string)">parse</a> <span class="stri">"P13M28DT12H1S"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/duration.htm#(in_duration)=(in_duration)">=</a>, <a class="op" href="../libraries/duration.htm#(in_duration)<&gt;(in_duration)">&lt;></a>, <a class="op" href="../libraries/duration.htm#(in_duration)<(in_duration)">&lt;</a>, <a class="op" href="../libraries/duration.htm#(in_duration)<=(in_duration)">&lt;=</a>, <a class="op" href="../libraries/duration.htm#(in_duration)&gt;(in_duration)">></a>, <a class="op" href="../libraries/duration.htm#(in_duration)&gt;=(in_duration)">>=</a>
    Functions:
      <a class="func" href="../libraries/duration.htm#duration(in_var_string)">duration</a>(A)  Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/duration.htm#duration(in_var_string)">duration</a>(<span class="stri">"P2M28DT12H1S"</span>) <b>&rArr;</b> P2M28DT12H1S,
                    <a class="func" href="../libraries/duration.htm#duration(in_var_string)">duration</a>(<span class="stri">"P13M28DT12H1S"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/duration.htm#getYears(in_duration)">getYears</a>(A)  Obtains the years of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#getMonths(in_duration)">getMonths</a>(A) Obtains the months of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#getDays(in_duration)">getDays</a>(A)   Obtains the days of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#getHours(in_duration)">getHours</a>(A)  Obtains the hours of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#getMinutes(in_duration)">getMinutes</a>(A) Obtains the minutes of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#getSeconds(in_duration)">getSeconds</a>(A) Obtains the seconds of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#getMicroSeconds(in_duration)">getMicroSeconds</a>(A)  Obtains the micro seconds of a <a class="type" href="../libraries/duration.htm#duration">duration</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toYears(in_duration)">toYears</a>(A)  Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in years
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toMonths(in_duration)">toMonths</a>(A) Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in months
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toDays(in_duration)">toDays</a>(A)   Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in days
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toHours(in_duration)">toHours</a>(A)  Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in hours
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toMinutes(in_duration)">toMinutes</a>(A) Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in minutes
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toSeconds(in_duration)">toSeconds</a>(A) Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in seconds
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#toMicroSeconds(in_duration)">toMicroSeconds</a>(A)  Return the <a class="type" href="../libraries/duration.htm#duration">duration</a> in micro seconds
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#str(in_duration)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/duration.htm#compare(in_duration,in_duration)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/duration.htm#hashCode(in_duration)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      A <a class="op" href="../libraries/duration.htm#(inout_duration)+:=(in_duration)">+:=</a> B   Increment A by B
                  ( A <a class="op" href="../libraries/duration.htm#(inout_duration)+:=(in_duration)">+:=</a> B <b>&rArr;</b> A := A <a class="op" href="../libraries/duration.htm#(in_duration)+(in_duration)">+</a> B )
      A <a class="op" href="../libraries/duration.htm#(inout_duration)-:=(in_duration)">-:=</a> B   Decrement A by B
                  ( A <a class="op" href="../libraries/duration.htm#(inout_duration)-:=(in_duration)">-:=</a> B <b>&rArr;</b> A := A <a class="op" href="../libraries/duration.htm#(in_duration)-(in_duration)">-</a> B )
      A <a class="op" href="../libraries/duration.htm#(inout_time)+:=(in_duration)">+:=</a> B   Increment <a class="type" href="#time">time</a> A by B
                  ( Type of argument A: <a class="type" href="#time">time</a>,
                    A <a class="op" href="../libraries/duration.htm#(inout_time)+:=(in_duration)">+:=</a> B <b>&rArr;</b> A := A <a class="op" href="../libraries/duration.htm#(in_time)+(in_duration)">+</a> B )
      A <a class="op" href="../libraries/duration.htm#(inout_time)-:=(in_duration)">-:=</a> B   Decrement <a class="type" href="#time">time</a> A by B
                  ( Type of argument A: <a class="type" href="#time">time</a>,
                    A <a class="op" href="../libraries/duration.htm#(inout_time)-:=(in_duration)">-:=</a> B <b>&rArr;</b> A := A <a class="op" href="../libraries/duration.htm#(in_time)-(in_duration)">-</a> B )
      <a class="func" href="../libraries/duration.htm#wait(in_duration)">wait</a>(A)   Wait for given duration
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p>
  For the operations <tt><a class="op" href="../libraries/duration.htm#-(in_duration)">-</a></tt> (negate a <tt><a class="type" href="../libraries/duration.htm#duration">duration</a></tt>) and
  <tt><a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a></tt> (subtract two <tt><a class="type" href="#time">time</a></tt> values) holds:</p><pre class="box">
    (tim1 <a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a> tim2) <a class="op" href="../libraries/duration.htm#(in_duration)=(in_duration)">=</a> <a class="op" href="../libraries/duration.htm#-(in_duration)">-</a> (tim2 <a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a> tim1)
</pre><p>
  For the operations <tt><a class="op" href="../libraries/duration.htm#(in_time)+(in_duration)">+</a></tt> (add a <tt><a class="type" href="../libraries/duration.htm#duration">duration</a></tt> to a <tt><a class="type" href="#time">time</a></tt>) and
  <tt><a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a></tt> (subtract two <tt><a class="type" href="#time">time</a></tt> values) holds:</p><pre class="box">
    tim2 <a class="op" href="../libraries/duration.htm#(in_time)+(in_duration)">+</a> (tim1 <a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a> tim2) <a class="op" href="../libraries/duration.htm#(in_duration)=(in_duration)">=</a> tim1
</pre><p>
  For the operations <tt><a class="op" href="../libraries/duration.htm#(in_time)-(in_duration)">-</a></tt> (subtract a <tt><a class="type" href="../libraries/duration.htm#duration">duration</a></tt> from a <tt><a class="type" href="#time">time</a></tt>) and
  <tt><a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a></tt> (subtract two <tt><a class="type" href="#time">time</a></tt> values) holds:</p><pre class="box">
    tim1 <a class="op" href="../libraries/duration.htm#(in_time)-(in_duration)">-</a> (tim1 <a class="op" href="../libraries/duration.htm#(in_time)-(in_time)">-</a> tim2) <a class="op" href="../libraries/duration.htm#(in_duration)=(in_duration)">=</a> tim2
</pre><p></p>

<a name="file"><h3>5.21 file</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/file.htm#file">file</a></tt> is the interface type for sequential files.
  The <tt><a class="type" href="../libraries/file.htm#file">file</a></tt> functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/file.htm">file.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/file.htm#file">file</a>.<a class="var" href="../libraries/null_file.htm#(attr_file)._value">value</a>  Default value of <a class="type" href="../libraries/file.htm#file">file</a> (<a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a>)
    Variables:
      <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a>  Standard null file
      <a class="var" href="../libraries/stdio.htm#STD_IN">STD_IN</a>    Standard input of the operating system
      <a class="var" href="../libraries/stdio.htm#STD_OUT">STD_OUT</a>   Standard output of the operating system
      <a class="var" href="../libraries/stdio.htm#STD_ERR">STD_ERR</a>   Standard error output of the operating system
      <a class="var" href="../libraries/stdio.htm#IN">IN</a>        Standard input file used for file input
                  operations when no file is specified
                  ( <a class="var" href="../libraries/stdio.htm#IN">IN</a> is initialized with <a class="var" href="../libraries/stdio.htm#STD_IN">STD_IN</a> )
      <a class="var" href="../libraries/stdio.htm#OUT">OUT</a>       Standard output file used for file output
                  operations when no file is specified
                  ( <a class="var" href="../libraries/stdio.htm#OUT">OUT</a> is initialized with <a class="var" href="../libraries/stdio.htm#STD_OUT">STD_OUT</a> )
      <a class="var" href="../libraries/keybd.htm#CONSOLE_KEYBOARD">CONSOLE_KEYBOARD</a>  Keyboard file describing the console keyboard.
      <a class="var" href="../libraries/keybd.htm#GRAPH_KEYBOARD">GRAPH_KEYBOARD</a>    Keyboard file describing the graphic keyboard.
      <a class="var" href="../libraries/keybd.htm#KEYBOARD">KEYBOARD</a>  Variable describing the keyboard.
                  ( <a class="var" href="../libraries/keybd.htm#KEYBOARD">KEYBOARD</a> is initialized with <a class="var" href="../libraries/keybd.htm#CONSOLE_KEYBOARD">CONSOLE_KEYBOARD</a> )
    Elements:
      <span class="keywd">var</span> <a class="type" href="#char">char</a>: bufferChar <span class="keywd">is</span> <span class="stri">'\n'</span>;
                The <span class="var">bufferChar</span> variable is inherited from <a class="type" href="../libraries/null_file.htm#null_file">null_file</a>.
                <a class="func" href="../libraries/file.htm#getTerminatedString(inout_file,in_char)">getTerminatedString</a>, <a class="func" href="../libraries/file.htm#getwd(inout_file)">getwd</a> and <a class="func" href="../libraries/file.htm#getln(inout_file)">getln</a> store the termination character in <span class="var">bufferChar</span>.
                <a class="keywd" href="file.htm#Scanning_a_file">Scanner functions</a> use the <span class="var">bufferChar</span> variable to store the current character.
                If <span class="var">bufferChar</span> contains a digit the scanner will assume that a number follows
                and if <span class="var">bufferChar</span> contains a <span class="stri">"</span> a string literal follows, etc.
    Implementation types of the <a class="type" href="../libraries/file.htm#file">file</a> interface:
      <a class="type" href="../libraries/null_file.htm#null_file">null_file</a>      Base implementation type for the file interface
      <a class="type" href="../libraries/external_file.htm#external_file">external_file</a>  Files of the operating system
      <a class="type" href="../libraries/utf8.htm#utf8File">utf8File</a>       UTF-8 encoded files of the operating system
      <a class="type" href="../libraries/utf16.htm#utf16File">utf16File</a>      UTF-16 encoded files of the operating system
      <a class="type" href="../libraries/utf16.htm#utf16leFile">utf16leFile</a>    UTF-16LE encoded files of the operating system
      <a class="type" href="../libraries/utf16.htm#utf16beFile">utf16beFile</a>    UTF-16BE encoded files of the operating system
      <a class="type" href="../libraries/dir.htm#dirFile">dirFile</a>        Read the contents of a directory
      <a class="type" href="../libraries/echo.htm#echoFile">echoFile</a>       Generate an echo of the input
      <a class="type" href="../libraries/line.htm#lineFile">lineFile</a>       Read a baseFile line-wise
      <a class="type" href="../libraries/editline.htm#editLineFile">editLineFile</a>   Support line-wise editing with history
      <a class="type" href="../libraries/gzip.htm#gzipFile">gzipFile</a>       Read decompressed data from a GZIP file
      <a class="type" href="../libraries/gzip.htm#gzipWriteFile">gzipWriteFile</a>  Write compressed data into a GZIP file
      <a class="type" href="../libraries/iobuffer.htm#bufferFile">bufferFile</a>     Buffer (cache) data based on the given base file
      <a class="type" href="../libraries/lzma.htm#lzmaFile">lzmaFile</a>       Read decompressed data from a LZMA file
      <a class="type" href="../libraries/shell.htm#popenFile">popenFile</a>      Operating system pipes
      <a class="type" href="../libraries/shell.htm#popen8File">popen8File</a>     UTF-8 encoded operating system pipes
      <a class="type" href="../libraries/socket.htm#socket">socket</a>         Sockets of the operation system
      <a class="type" href="../libraries/tls.htm#tlsFile">tlsFile</a>        Transport Layer Security (TLS/SSL) sockets
      <a class="type" href="../libraries/strifile.htm#striFile">striFile</a>       Files stored in a string
      <a class="type" href="../libraries/tee.htm#teeFile">teeFile</a>        File that writes to several destination files at once
      <a class="type" href="../libraries/more.htm#moreFile">moreFile</a>       Filter file which shows another file screenwise
      <a class="type" href="../libraries/lower.htm#lowerFile">lowerFile</a>      Filter file which turns characters to lower case
      <a class="type" href="../libraries/upper.htm#upperFile">upperFile</a>      Filter file which turns characters to upper case
      <a class="type" href="../libraries/subfile.htm#subFile">subFile</a>        Read access to the sub segment of a base file
      <a class="type" href="../libraries/xz.htm#xzFile">xzFile</a>         Read decompressed data from a XZ file
      <a class="type" href="../libraries/zstd.htm#zstdFile">zstdFile</a>       Read decompressed data from a Zstandard file
    Relations:
      =, &lt;>
    Functions to open a <a class="type" href="../libraries/file.htm#file">file</a>:
      <a class="func" href="../libraries/external_file.htm#open(in_string,in_string)">open</a>(path, mode) Open external <a class="type" href="#file">file</a>
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/utf8.htm#openUtf8(in_string,in_string)">openUtf8</a>(path, mode) Open external UTF-8 encoded <a class="type" href="#file">file</a>
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/utf16.htm#openUtf16(in_string,in_string)">openUtf16</a>(path, mode) Open existing UTF-16LE or UTF-16BE encoded <a class="type" href="#file">file</a>
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/utf16.htm#openUtf16le(in_string,in_string)">openUtf16le</a>(path, mode) Open UTF-16LE encoded <a class="type" href="#file">file</a>
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/utf16.htm#openUtf16be(in_string,in_string)">openUtf16be</a>(path, mode) Open UTF-16BE encoded <a class="type" href="#file">file</a>
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/strifile.htm#openStriFile(in_string)">openStriFile</a>(content) Open a <a class="type" href="../libraries/strifile.htm#striFile">striFile</a> with the given string content
                  ( Type of argument content: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/strifile.htm#openStriFile">openStriFile</a> Open a <a class="type" href="../libraries/strifile.htm#striFile">striFile</a> with an empty string content
      <a class="func" href="../libraries/tee.htm#openTee(in_array_file)">openTee</a>(destFiles) Open a tee file to write to the given destination files
                  ( Type of argument destFiles: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/tee.htm#openTee(in_file,in_file)">openTee</a>(dest1, dest2) Open a tee file to write to the two destination files
      <a class="func" href="../libraries/more.htm#openMore(in_file,in_file,in_integer)">openMore</a>(dest, cmds, pageSize) Open a more filter file for viewing a file page by page
                  ( Type of argument pageSize: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/lower.htm#openLower(in_file)">openLower</a>(dest) Open a filter file which turns characters to lower case
      <a class="func" href="../libraries/upper.htm#openUpper(in_file)">openUpper</a>(dest) Open a filter file which turns characters to upper case
      <a class="func" href="../libraries/gzip.htm#openGzipFile(inout_file,READ)">openGzipFile</a>(compressed, <span class="var">READ</span>) Open a GZIP file for reading (decompression)
                  ( Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if the file is not in GZIP format )
      <a class="func" href="../libraries/gzip.htm#openGzipFile(inout_file,WRITE)">openGzipFile</a>(destFile, <span class="var">WRITE</span>) Open a GZIP file for writing (compression)
           The data written to this file is compressed with GZIP and written to destFile.
      <a class="func" href="../libraries/lzma.htm#openLzmaFile(inout_file)">openLzmaFile</a>(compressed) Open a LZMA file for reading (decompression)
                  ( Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if the file is not in LZMA format )
      <a class="func" href="../libraries/xz.htm#openXzFile(inout_file)">openXzFile</a>(compressed)  Open a XZ file for reading (decompression)
                  ( Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if the file is not in XZ format )
      <a class="func" href="../libraries/zstd.htm#openZstdFile(inout_file)">openZstdFile</a>(compressed) Open a Zstandard file for reading (decompression)
                  ( Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if the file is not in Zstandard format )
      <a class="func" href="../libraries/shell.htm#popen(in_string,in_string)">popen</a>(A, B) Open a pipe to a process
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if popen was not possible )
      <a class="func" href="../libraries/shell.htm#popen8(in_string,in_string)">popen8</a>(A, B) Open a UTF-8 pipe to a process
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    Type of argument B: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if popen8 was not possible )
      <a class="func" href="../libraries/socket.htm#openInetSocket(in_integer)">openInetSocket</a>(port) Open local Internet client socket
                  ( Type of argument port: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/socket.htm#openInetSocket(in_string,in_integer)">openInetSocket</a>(addr, port) Open Internet client socket
                  ( Type of argument addr: <a class="type" href="#string">string</a>,
                    Type of argument port: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/tls.htm#openTlsSocket(in_string,in_integer)">openTlsSocket</a>(addr, port) Open TLS socket
                  ( Type of argument addr: <a class="type" href="#string">string</a>,
                    Type of argument port: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#file">file</a>,
                    Returns <a class="var" href="../libraries/null_file.htm#STD_NULL">STD_NULL</a> if open was not possible )
      <a class="func" href="../libraries/dir.htm#openDir(in_string)">openDir</a>(directoryPath)  Open a directory file
                  ( Type of argument directoryPath: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/echo.htm#openEcho(in_file,in_file)">openEcho</a>(inFile, outFile) Open an echo file
      <a class="func" href="../libraries/line.htm#openLine(in_file)">openLine</a>(aFile) Open a lineFile to filter aFile line-wise
      <a class="func" href="../libraries/editline.htm#openEditLine(in_file,in_file)">openEditLine</a>(inFile, outFile) Open a Unicode filter file
                    for line-wise editing with history
      <a class="func" href="../libraries/editline.htm#openEditLineLatin1(in_file,in_file)">openEditLineLatin1</a>(inFile, outFile) Open a Latin-1 filter file
                    for line-wise editing with history
    Functions:
      <a class="func" href="../libraries/file.htm#length(inout_file)">length</a>(A) Length of <a class="type" href="#file">file</a> A
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/file.htm#tell(in_file)">tell</a>(A)   Return the actual <a class="type" href="#file">file</a> position
                  ( Type of argument: <a class="type" href="#file">file</a>,
                    The first position in the file is 1 )
      <a class="func" href="../libraries/file.htm#seekable(in_file)">seekable</a>(A) Determine if <a class="type" href="#file">file</a> A is seekable
      <a class="func" href="../libraries/file.htm#getc(inout_file)">getc</a>(A)   Get one character from <a class="type" href="#file">file</a> A
                  ( Type of result: <a class="type" href="#char">char</a> )
      <a class="func" href="../libraries/file.htm#gets(inout_file,in_integer)">gets</a>(A, B) Get <a class="type" href="#string">string</a> with maximum length B from <a class="type" href="#file">file</a> A
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    Type of argument B: <a class="type" href="#file">file</a>,
                    Type of result: <a class="type" href="#string">string</a>,
                    gets(A, -1) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/file.htm#getTerminatedString(inout_file,in_char)">getTerminatedString</a>(A, B)  Read a string from A until the character B is found.
                The string terminating character is assigned to A.bufferChar.
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#getwd(inout_file)">getwd</a>(A)  Get one word from <a class="type" href="#file">file</a> A.
                The word ending character is assigned to A.bufferChar.
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#getln(inout_file)">getln</a>(A)  Get one line from <a class="type" href="#file">file</a> A.
                The line ending character is assigned to A.bufferChar.
                  ( Type of result: <a class="type" href="#string">string</a> )
      eoln(A)   End of line
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/file.htm#eof(in_file)">eof</a>(A)    End of file
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/file.htm#hasNext(inout_file)">hasNext</a>(A) A call of getc would not return the EOF character
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/file.htm#inputReady(in_file)">inputReady</a>(A) At least one character can be read without blocking.
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/file.htm#compare(in_file,in_file)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/file.htm#hashCode(in_file)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/file.htm#write(inout_file,in_string)">write</a>(A, B) Write <a class="type" href="#string">string</a> B to <a class="type" href="#file">file</a> A
                  ( Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#writeln(inout_file)">writeln</a>(A) Write a new line to <a class="type" href="#file">file</a> A
      <a class="func" href="../libraries/file.htm#writeln(inout_file,in_string)">writeln</a>(A, B) Write <a class="type" href="#string">string</a> B and new line to <a class="type" href="#file">file</a> A
                  ( Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#read(inout_file,inout_string)">read</a>(A, B) Read a word from <a class="type" href="#file">file</a> A into <a class="type" href="#string">string</a> B
                  ( Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#read(inout_file,inout_string,in_string)">read</a>(A, B, C) Read a word from <a class="type" href="#file">file</a> A into B or use default value C
                  ( Type of argument B: <a class="type" href="#string">string</a>,
                    Type of argument C: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#readln(inout_file)">readln</a>(A)  Read a line from <a class="type" href="#file">file</a> A
      <a class="func" href="../libraries/file.htm#readln(inout_file,inout_string)">readln</a>(A, B) Read a line from <a class="type" href="#file">file</a> A into the <a class="type" href="#string">string</a> B
                  ( Type of right operand: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#readln(inout_file,inout_string,in_string)">readln</a>(A, B, C)  Read a line from <a class="type" href="#file">file</a> A into B or use default value C
                  ( Type of argument B: <a class="type" href="#string">string</a>,
                    Type of argument C: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#skip(inout_file,in_var_integer)">skip</a>(A, B) Skip B characters from <a class="type" href="#file">file</a> A
      backSpace(A) Write backspace to <a class="type" href="#file">file</a> A
      <a class="func" href="../libraries/file.htm#close(inout_file)">close</a>(A)  Close <a class="type" href="#file">file</a> A
      <a class="func" href="../libraries/file.htm#flush(inout_file)">flush</a>(A)  Flush <a class="type" href="#file">file</a> A
      <a class="func" href="../libraries/file.htm#seek(inout_file,in_integer)">seek</a>(A, B) Set actual file position of <a class="type" href="#file">file</a> A to B
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    seek(A, 1) <b>&rArr;</b> Set to file begin,
                    seek(A, length(A)) <b>&rArr;</b> Set to last position,
                    seek(A, length(A) + 1) <b>&rArr;</b> Set to end of file,
                    seek(A, 0) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/file.htm#truncate(inout_file,in_integer)">truncate</a>(A, B) Truncate <a class="type" href="#file">file</a> A to length B
                  ( Type of argument B: <a class="type" href="#integer">integer</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="text"><h3>5.22 text</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/text.htm#text">text</a></tt> is the interface type for two dimensional files.
  These files consist of lines with columns in them. The <tt><a class="type" href="../libraries/text.htm#text">text</a></tt>
  functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/text.htm">text.s7i</a>"</span>.
</p><pre class="tt">
    Variables:
      <a class="var" href="../libraries/console.htm#STD_CONSOLE">STD_CONSOLE</a>  Standard console file of the current process.
    Implementation types of the <a class="type" href="../libraries/text.htm#text">text</a> interface:
      <a class="type" href="../libraries/console.htm#console_file">console_file</a>    Write to the text console/window
      <a class="type" href="../libraries/graph_file.htm#graph_file">graph_file</a>      Write to a graphic window with the system font
      <a class="type" href="../libraries/window.htm#window_file">window_file</a>     Write to a rectangular area in another <a class="type" href="../libraries/text.htm#text">text</a>
      <a class="type" href="../libraries/pixmap_file.htm#pixmapFontFile">pixmapFontFile</a>  Write to a graphic window with a pixmap font
      <a class="type" href="../libraries/stritext.htm#striText">striText</a>        Text file stored in an array of strings
    Relations:
      =, &lt;>
    Functions to open a <a class="type" href="../libraries/text.htm#text">text</a>:
      <a class="func" href="../libraries/console.htm#open(CONSOLE)">open</a>(CONSOLE)  Creates console_file at the upper left corner of the console/window.
      <a class="func" href="../libraries/graph_file.htm#open(in_PRIMITIVE_WINDOW)">open</a>(graphWin)  Creates a graph_file at the upper left corner of graphWin
                  ( Type of argument graphWin: <span class="type">PRIMITIVE_WINDOW</span> )
      <a class="func" href="../libraries/graph_file.htm#open(in_PRIMITIVE_WINDOW,in_integer,in_integer)">open</a>(graphWin, minX, minY)  Creates a graph_file at (minX, minY) in graphWin
                  ( Type of argument graphWin: <span class="type">PRIMITIVE_WINDOW</span>,
                    Type of argument minX: <a class="type" href="#integer">integer</a>,
                    Type of argument minY: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/graph_file.htm#open(in_PRIMITIVE_WINDOW,in_integer,in_integer,in_integer,in_integer)">open</a>(graphWin, minX, minY, width, height)  Creates a graph_file at (minX, minY) in graphWin
                  ( Type of argument graphWin: <span class="type">PRIMITIVE_WINDOW</span>,
                    Type of argument minX: <a class="type" href="#integer">integer</a>,
                    Type of argument minY: <a class="type" href="#integer">integer</a>,
                    Type of argument width: <a class="type" href="#integer">integer</a>,
                    Type of argument height: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/window.htm#openWindow(ref_text,in_integer,in_integer,in_integer,in_integer)">openWindow</a>(outText, upper, left, height, width)  Creates a window_file at (left, upper) in outText
                  ( Type of argument upper: <a class="type" href="#integer">integer</a>,
                    Type of argument left: <a class="type" href="#integer">integer</a>,
                    Type of argument height: <a class="type" href="#integer">integer</a>,
                    Type of argument width: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/pixmap_file.htm#openPixmapFontFile(in_PRIMITIVE_WINDOW)">openPixmapFontFile</a>(win)  Creates a <a class="type" href="../libraries/pixmap_file.htm#pixmapFontFile">pixmapFontFile</a> at the upper left corner of win
                  ( Type of argument win: <span class="type">PRIMITIVE_WINDOW</span> )
      <a class="func" href="../libraries/pixmap_file.htm#openPixmapFontFile(in_PRIMITIVE_WINDOW,in_integer,in_integer)">openPixmapFontFile</a>(win, minX, minY)  Creates a <a class="type" href="../libraries/pixmap_file.htm#pixmapFontFile">pixmapFontFile</a> at (minX, minY) in win
                  ( Type of argument win: <span class="type">PRIMITIVE_WINDOW</span>,
                    Type of argument minX: <a class="type" href="#integer">integer</a>,
                    Type of argument minY: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/stritext.htm#openStriText(in_array_string)">openStriText</a>(content)  Open a striText with the given content
                  ( Type of argument content: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
    Functions:
      <a class="func" href="../libraries/text.htm#height(in_text)">height</a>(A) Height of the <a class="type" href="#text">text</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/text.htm#width(in_text)">width</a>(A)  Width of the <a class="type" href="#text">text</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/text.htm#line(in_text)">line</a>(A)   Current line of the <a class="type" href="#text">text</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/text.htm#column(in_text)">column</a>(A) Current column of the <a class="type" href="#text">text</a>
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/file.htm#write(inout_file,in_string)">write</a>(A, B) Write <a class="type" href="#string">string</a> B to <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#writeln(inout_file)">writeln</a>(A) Write a new line to <a class="type" href="#text">text</a> A
      <a class="func" href="../libraries/file.htm#writeln(inout_file,in_string)">writeln</a>(A, B) Write <a class="type" href="#string">string</a> B and new line to <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#read(inout_file,inout_string)">read</a>(A, B) Read a word from <a class="type" href="#text">text</a> A into <a class="type" href="#string">string</a> B
                  ( Type of right operand: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/file.htm#readln(inout_file)">readln</a>(A)  Read a line from <a class="type" href="#text">text</a> A
      <a class="func" href="../libraries/file.htm#readln(inout_file,inout_string)">readln</a>(A, B) Read a line from <a class="type" href="#text">text</a> A into the <a class="type" href="#string">string</a> B
                  ( Type of right operand: <a class="type" href="#string">string</a> )
      backSpace(A) Write backspace to <a class="type" href="#text">text</a> A
      <a class="func" href="../libraries/file.htm#close(inout_file)">close</a>(A)  Close <a class="type" href="#text">text</a> A
      <a class="func" href="../libraries/file.htm#flush(inout_file)">flush</a>(A)  Flush <a class="type" href="#text">text</a> A
      <a class="func" href="../libraries/text.htm#clear(inout_text)">clear</a>(A)  Clear the window
      <a class="func" href="../libraries/text.htm#clear(inout_text,in_integer,in_integer,in_integer,in_integer)">clear</a>(A, UP, LO, LE, RI)  Clear an area of the window
                  ( Type of argument UP: <a class="type" href="#integer">integer</a>
                    Type of argument LO: <a class="type" href="#integer">integer</a>
                    Type of argument LE: <a class="type" href="#integer">integer</a>
                    Type of argument RI: <a class="type" href="#integer">integer</a> )
      v_scroll(A) Scroll the window vertical
      h_scroll(A) Scroll the window horizontal
      <a class="func" href="../libraries/text.htm#color(inout_text,in_color)">color</a>(A, B) Set foreground color of the <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#color">color</a> )
      <a class="func" href="../libraries/text.htm#color(inout_text,in_color,in_color)">color</a>(A, B, C) Set foreground and background color of the <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#color">color</a>,
                    Type of argument C: <a class="type" href="#color">color</a> )
      <a class="func" href="../libraries/text.htm#setPos(inout_text,in_integer,in_integer)">setPos</a>(A, B, C) Set the current position of the <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#integer">integer</a>
                    Type of argument C: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/text.htm#setLine(in_text,in_integer)">setLine</a>(A, B) Set the current line of the <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/text.htm#setColumn(in_text,in_integer)">setColumn</a>(A, B) Set the current column of the <a class="type" href="#text">text</a> A
                  ( Type of argument B: <a class="type" href="#integer">integer</a> )
      box(A)    Write a box around the window
      clear_box(A) Clear the box around the window
      cursor_on(A) Make the cursor visible
      cursor_off(A) Make the cursor invisible
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="fileSys"><h3>5.23 fileSys</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a></tt> is the interface type for file systems. The
  files of the operating system and the contents of an archive file
  are both organized as file systems. The connection to files stored
  at a remote computer can also use the <tt><a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a></tt> interface.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a>  Default value of <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a> (<a class="type" href="../libraries/filesys.htm#emptyFileSys">emptyFileSys</a>.<span class="var">value</span>)
    Variables:
      <a class="var" href="../libraries/osfiles.htm#osFiles">osFiles</a>        File system of the operating system files
    Implementation types of the <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a> interface:
      <a class="type" href="../libraries/filesys.htm#emptyFileSys">emptyFileSys</a>   Empty file system (used as default value)
      <a class="type" href="../libraries/osfiles.htm#osFileSys">osFileSys</a>      File system to access operating system files
      <a class="type" href="../libraries/ar.htm#arArchive">arArchive</a>      Access to an AR archive
      <a class="type" href="../libraries/cpio.htm#cpioArchive">cpioArchive</a>    Access to a CPIO archive
      <a class="type" href="../libraries/rpm.htm#rpmArchive">rpmArchive</a>     Access to a RPM archive
      <a class="type" href="../libraries/tar.htm#tarArchive">tarArchive</a>     Access to a TAR archive
      <a class="type" href="../libraries/zip.htm#zipArchive">zipArchive</a>     Access to a ZIP archive
      <a class="type" href="../libraries/ftp.htm#ftpConnection">ftpConnection</a>  Connection to a FTP server
    Functions to open a <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>:
      <a class="func" href="../libraries/ar.htm#openAr(inout_file)">openAr</a>(arFile)  Open a AR archive with the given arFile
                  ( Type of argument arFile: <a class="type" href="#file">file</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/ar.htm#openAr(in_string)">openAr</a>(arFileName)  Open a AR archive with the given arFileName
                  ( Type of argument arFileName: <a class="type" href="#string">string</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/cpio.htm#openCpio(inout_file)">openCpio</a>(cpioFile)  Open a CPIO archive with the given cpioFile
                  ( Type of argument cpioFile: <a class="type" href="#file">file</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/cpio.htm#openCpio(in_string)">openCpio</a>(cpioFileName)  Open a CPIO archive with the given cpioFileName
                  ( Type of argument cpioFileName: <a class="type" href="#string">string</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/rpm.htm#openRpm(inout_file)">openRpm</a>(rpmFile)  Open a RPM archive with the given rpmFile
                  ( Type of argument rpmFile: <a class="type" href="#file">file</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/rpm.htm#openRpm(in_string)">openRpm</a>(rpmFileName)  Open a RPM archive with the given rpmFileName
                  ( Type of argument rpmFileName: <a class="type" href="#string">string</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/tar.htm#openTar(inout_file)">openTar</a>(tarFile)  Open a TAR archive with the given tarFile
                  ( Type of argument tarFile: <a class="type" href="#file">file</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/tar.htm#openTar(in_string)">openTar</a>(tarFileName)  Open a TAR archive with the given tarFileName
                  ( Type of argument tarFileName: <a class="type" href="#string">string</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/zip.htm#openZip(inout_file)">openZip</a>(zipFile)  Open a ZIP archive with the given zipFile
                  ( Type of argument zipFile: <a class="type" href="#file">file</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/zip.htm#openZip(in_string)">openZip</a>(zipFileName)  Open a ZIP archive with the given zipFileName
                  ( Type of argument zipFileName: <a class="type" href="#string">string</a>,
                    Returns <a class="type" href="../libraries/filesys.htm#fileSys">fileSys</a>.<a class="var" href="../libraries/filesys.htm#(attr_fileSys)._value">value</a> if open was not possible )
      <a class="func" href="../libraries/ftp.htm#openFtp(in_string,in_string,in_string,in_integer)">openFtp</a>(hostName, user, password, ftpControlPort)  Open a FTP file system
                  ( Type of argument hostName: <a class="type" href="#string">string</a>,
                    Type of argument user: <a class="type" href="#string">string</a>,
                    Type of argument password: <a class="type" href="#string">string</a>,
                    Type of argument ftpControlPort: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/ftp.htm#openFtp(in_string,in_string,in_string)">openFtp</a>(hostName, user, password)  Open a FTP file system
                  ( Type of argument hostName: <a class="type" href="#string">string</a>,
                    Type of argument user: <a class="type" href="#string">string</a>,
                    Type of argument password: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/ftp.htm#openFtp(in_string,in_integer)">openFtp</a>(connectStri, ftpControlPort)  Open a FTP file system
                  ( Type of argument connectStri: <a class="type" href="#string">string</a>,
                    Type of argument ftpControlPort: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/ftp.htm#openFtp(in_string)">openFtp</a>(connectStri)  Open a FTP file system
                  ( Type of argument connectStri: <a class="type" href="#string">string</a> )
    Functions:
      <a class="func" href="../libraries/filesys.htm#close(inout_fileSys)">close</a>(aFileSys)  Close a file system
      <a class="func" href="../libraries/filesys.htm#readDir(inout_fileSys,in_string)">readDir</a>(aFileSys, dirPath)  Read the file names of a directory
                  ( Type of argument dirPath: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#readDir(inout_fileSys,in_string,RECURSIVE)">readDir</a>(aFileSys, dirPath, RECURSIVE)  Read the file paths of a directory recursively
                  ( Type of argument dirPath: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#readDir(inout_fileSys)">readDir</a>(aFileSys)  Read the file names of the root directory
                  ( Type of result: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#readDir(inout_fileSys,RECURSIVE)">readDir</a>(aFileSys, RECURSIVE)  Read the file paths of the root directory recursively
                  ( Type of result: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#fileType(inout_fileSys,in_string)">fileType</a>(aFileSys, path)  Get the type of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="../libraries/filesys.htm#fileType">fileType</a> )
      <a class="func" href="../libraries/filesys.htm#fileTypeSL(inout_fileSys,in_string)">fileTypeSL</a>(aFileSys, path)  Get the type of a file (do not follow symbolic links)
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="../libraries/filesys.htm#fileType">fileType</a> )
      <a class="func" href="../libraries/filesys.htm#getFileMode(inout_fileSys,in_string)">getFileMode</a>(aFileSys, path)  Get the file mode (permissions) of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="../libraries/filesys.htm#fileMode">fileMode</a> )
      <a class="func" href="../libraries/filesys.htm#fileSize(inout_fileSys,in_string)">fileSize</a>(aFileSys, path)  Get the size of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/filesys.htm#bigFileSize(inout_fileSys,in_string)">bigFileSize</a>(aFileSys, path)  Get the size of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/filesys.htm#getMTime(inout_fileSys,in_string)">getMTime</a>(aFileSys, path)  Get the modification time of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#time">time</a> )
      <a class="func" href="../libraries/filesys.htm#getOwner(inout_fileSys,in_string)">getOwner</a>(aFileSys, path)  Get the name of the owner (UID) of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#getGroup(inout_fileSys,in_string)">getGroup</a>(aFileSys, path)  Get the name of the group (GID) to which a file belongs
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#open(inout_fileSys,in_string,in_string)">open</a>(aFileSys, filePath, mode)  Open a file with filePath and mode
                  ( Type of argument filePath: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#file">file</a> )
      <a class="func" href="../libraries/filesys.htm#getFile(inout_fileSys,in_string)">getFile</a>(aFileSys, filePath)  Get the contents of file filePath
                  ( Type of argument filePath: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#readLink(inout_fileSys,in_string)">readLink</a>(aFileSys, path)  Reads the destination of a symbolic link
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#string">string</a> )
    Statements:
      <a class="func" href="../libraries/filesys.htm#setFileMode(inout_fileSys,in_string,in_fileMode)">setFileMode</a>(aFileSys, path, mode)  Change the file mode (permissions) of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument mode: <a class="type" href="../libraries/filesys.htm#fileMode">fileMode</a> )
      <a class="func" href="../libraries/filesys.htm#setMTime(inout_fileSys,in_string,in_time)">setMTime</a>(aFileSys, path, modificationTime)
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument modificationTime: <a class="type" href="#time">time</a> )
      <a class="func" href="../libraries/filesys.htm#setOwner(inout_fileSys,in_string,in_string)">setOwner</a>(aFileSys, path, owner)  Set the owner of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument owner: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#setGroup(inout_fileSys,in_string,in_string)">setGroup</a>(aFileSys, path, group)  Set the group of a file
                  ( Type of argument path: <a class="type" href="#string">string</a>,
                    Type of argument group: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#putFile(inout_fileSys,in_string,in_string)">putFile</a>(aFileSys, filePath, stri)  Write stri to the file filePath using the file system
                  ( Type of argument filePath: <a class="type" href="#string">string</a>,
                    Type of argument stri: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#removeFile(inout_fileSys,in_string)">removeFile</a>(aFileSys, path)  Remove a file (except a nonempty directory)
                  ( Type of argument path: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#removeTree(inout_fileSys,in_string)">removeTree</a>(aFileSys, path)  Remove a file of any type inclusive a directory tree
                  ( Type of argument path: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#moveFile(inout_fileSys,in_string,in_string)">moveFile</a>(aFileSys, sourcePath, destPath)  Move and rename a file or directory tree
                  ( Type of argument sourcePath: <a class="type" href="#string">string</a>,
                    Type of argument destPath: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#makeDir(inout_fileSys,in_string)">makeDir</a>(aFileSys, dirPath)  Create a directory
                  ( Type of argument dirPath: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#makeLink(inout_fileSys,in_string,in_string)">makeLink</a>(aFileSys, symlinkPath, targetPath)  Create a symbolic link
                  ( Type of argument symlinkPath: <a class="type" href="#string">string</a>,
                    Type of argument targetPath: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#rmdir(inout_fileSys,in_string)">rmdir</a>(aFileSys, dirPath)  Delete an empty directory
                  ( Type of argument dirPath: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/filesys.htm#getcwd(inout_fileSys)">getcwd</a>(aFileSys)  Determine the current working directory
      <a class="func" href="../libraries/filesys.htm#chdir(inout_fileSys,in_string)">chdir</a>(aFileSys, dirPath)  Change the current working directory
                  ( Type of argument dirPath: <a class="type" href="#string">string</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="database"><h3>5.24 database</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/sql_base.htm#database">database</a></tt> describes database connections.
  The library <span class="stri">"<a class="lib" href="../libraries/sql_base.htm">sql_base.s7i</a>"</span> defines functions to manage database connections.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/sql_base.htm#database">database</a>.<a class="var" href="../libraries/sql_base.htm#(attr_database)._value">value</a>  Default value of <a class="type" href="../libraries/sql_base.htm#database">database</a> (empty database)
    Relations:
      <a class="op" href="../libraries/sql_base.htm#(in_database)=(in_database)">=</a>, <a class="op" href="../libraries/sql_base.htm#(in_database)<>(in_database)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_integer,in_string,in_string,in_string)">openDatabase</a>(driver, host, port, dbName, user, password)  Open database
                  ( Type of argument driver: <a class="type" href="../libraries/sql_base.htm#dbCategory">dbCategory</a>,
                    Type of argument host: <a class="type" href="#string">string</a>,
                    Type of argument port: <a class="type" href="#integer">integer</a>,
                    Type of argument dbName: <a class="type" href="#string">string</a>,
                    Type of argument user: <a class="type" href="#string">string</a>,
                    Type of argument password: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_ODBC,in_string,in_string,in_string,in_string,in_string)">openDatabase</a>(DB_ODBC, odbcDriver, server, dbName, user, password)  Open ODBC database
                  ( Type of argument odbcDriver: <a class="type" href="#string">string</a>,
                    Type of argument server: <a class="type" href="#string">string</a>,
                    Type of argument dbName: <a class="type" href="#string">string</a>,
                    Type of argument user: <a class="type" href="#string">string</a>,
                    Type of argument password: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#openDatabase(DB_INFORMIX,in_string,in_integer,in_string,in_string,in_string,in_string)">openDatabase</a>(DB_INFORMIX, host, port, server, dbName, user, password)  Open Informix database
                  ( Type of argument host: <a class="type" href="#string">string</a>,
                    Type of argument port: <a class="type" href="#integer">integer</a>,
                    Type of argument server: <a class="type" href="#string">string</a>,
                    Type of argument dbName: <a class="type" href="#string">string</a>,
                    Type of argument user: <a class="type" href="#string">string</a>,
                    Type of argument password: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string,in_string,in_string)">openDatabase</a>(driver, dbPath, user, password)  Open the database dbPath with the specified user and password
                  ( Type of argument driver: <a class="type" href="../libraries/sql_base.htm#dbCategory">dbCategory</a>,
                    Type of argument dbPath: <a class="type" href="#string">string</a>,
                    Type of argument user: <a class="type" href="#string">string</a>,
                    Type of argument password: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#openDatabase(in_dbCategory,in_string)">openDatabase</a>(driver, connectStri)  Open a database with the specified driver and connectStri
                  ( Type of argument driver: <a class="type" href="../libraries/sql_base.htm#dbCategory">dbCategory</a>,
                    Type of argument connectStri: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#close(in_database)">close</a>(db)  Close the specified database db
      <a class="func" href="../libraries/sql_base.htm#getAutoCommit(in_database)">getAutoCommit</a>(db)  Get the current auto-commit mode of db
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
    Statements:
      <a class="func" href="../libraries/sql_base.htm#setAutoCommit(in_database,in_boolean)">setAutoCommit</a>(db, autoCommit)  Set the auto-commit mode for db.
                  ( Type of argument autoCommit: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/sql_base.htm#commit(in_database)">commit</a>(db)  Execute a commit statement for db
      <a class="func" href="../libraries/sql_base.htm#rollback(in_database)">rollback</a> (db)  Execute a rollback statement for db
</pre><p></p>

<a name="sqlStatement"><h3>5.25 sqlStatement</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a></tt> describes prepared sql statements.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>.<a class="var" href="../libraries/sql_base.htm#(attr_sqlStatement)._value">value</a>  Default value of <a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a>
    Relations:
      <a class="op" href="../libraries/sql_base.htm#(in_sqlStatement)=(in_sqlStatement)">=</a>, <a class="op" href="../libraries/sql_base.htm#(in_sqlStatement)<>(in_sqlStatement)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/sql_base.htm#prepare(in_database,in_string)">prepare</a>(db, sqlStatementStri)  Create a prepared statement for db
                  ( Type of argument db: <a class="type" href="#database">database</a>
                    Type of argument sqlStatementStri: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#fetch(in_sqlStatement)">fetch</a>(statement)  Fetch a row from the result data of an executed statement
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bigInteger)">column</a>(statement, column, <a class="type" href="#bigInteger">bigInteger</a>)  Get the specified column of fetched data as <a class="type" href="#bigInteger">bigInteger</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bigRational)">column</a>(statement, column, <a class="type" href="#bigRational">bigRational</a>)  Get the specified column of fetched data as <a class="type" href="#bigRational">bigRational</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#bigRational">bigRational</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_boolean)">column</a>(statement, column, <a class="type" href="#boolean">boolean</a>)  Get the specified column of fetched data as <a class="type" href="#boolean">boolean</a
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_bstring)">column</a>(statement, column, <a class="type" href="#bstring">bstring</a>)  Get the specified column of fetched data as <a class="type" href="#bstring">bstring</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#bstring">bstring</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_duration)">column</a>(statement, column, <a class="type" href="#duration">duration</a>)  Get the specified column of fetched data as <a class="type" href="#duration">duration</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#duration">duration</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_float)">column</a>(statement, column, <a class="type" href="#float">float</a>)  Get the specified column of fetched data as <a class="type" href="#float">float</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_integer)">column</a>(statement, column, <a class="type" href="#integer">integer</a>)  Get the specified column of fetched data as <a class="type" href="#integer">integer</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_string)">column</a>(statement, column, <a class="type" href="#string">string</a>)  Get the specified column of fetched data as <a class="type" href="#string">string</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#column(in_sqlStatement,in_integer,attr_time)">column</a>(statement, column, <a class="type" href="#time">time</a>)  Get the specified column of fetched data as <a class="type" href="#time">time</a>
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#time">time</a> )
      <a class="func" href="../libraries/sql_base.htm#isNull(in_sqlStatement,in_integer)">isNull</a>(statement, column)  Determine if the specified column of fetched data is NULL
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/sql_base.htm#columnCount(in_sqlStatement)">columnCount</a>(statement)  Return the number of columns in the result data of a statement
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/sql_base.htm#columnName(in_sqlStatement,in_integer)">columnName</a>(statement, column)  Return the name of a column in the result data of a statement
                  ( Type of argument column: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#string">string</a> )
    Statements:
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bigInteger)">bind</a>(statement, pos, num)  Bind a bigInteger parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument num: <a class="type" href="#bigInteger">bigInteger</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bigRational)">bind</a>(statement, pos, bigRatData)  Bind a bigRational parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument bigRatData: <a class="type" href="#bigRational">bigRational</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_boolean)">bind</a>(statement, pos, flag)  Bind a boolean parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument flag: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_bstring)">bind</a>(statement, pos, bstri)  Bind a bstring parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument bstri: <a class="type" href="#bstring">bstring</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_float)">bind</a>(statement, pos, number)  Bind a float parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument number: <a class="type" href="#float">float</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_integer)">bind</a>(statement, pos, number)  Bind an integer parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument number: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,NULL)">bind</a>(statement, pos, NULL)  Bind a NULL parameter to a prepared SQL statement.
                  ( Type of argument pos: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_string)">bind</a>(statement, pos, stri)  Bind a string parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument : <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_time)">bind</a>(statement, pos, timeData)  Bind a time parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument timeData: <a class="type" href="#time">time</a> )
      <a class="func" href="../libraries/sql_base.htm#bind(inout_sqlStatement,in_integer,in_duration)">bind</a>(statement, pos, durationData)  Bind a duration parameter to a prepared SQL statement
                  ( Type of argument pos: <a class="type" href="#integer">integer</a>,
                    Type of argument durationData: <a class="type" href="#duration">duration</a> )
      <a class="func" href="../libraries/sql_base.htm#execute(inout_sqlStatement)">execute</a>(statement)  Execute the specified prepared SQL statement
</pre><p></p>

<a name="process"><h3>5.26 process</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/process.htm#process">process</a></tt> describes processes of the operating system.
  The library <span class="stri">"<a class="lib" href="../libraries/process.htm">process.s7i</a>"</span> defines functions to create and manage processes.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/process.htm#process">process</a>.<a class="var" href="../libraries/process.htm#(attr_process)._value">value</a>  Default value of <a class="type" href="../libraries/process.htm#process">process</a> (<a class="type" href="../libraries/process.htm#process">process</a>.<span class="var">EMPTY</span>)
    Relations:
      <a class="op" href="../libraries/process.htm#(in_process)=(in_process)">=</a>, <a class="op" href="../libraries/process.htm#(in_process)<>(in_process)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/process.htm#startProcess(in_string,in_array_string)">startProcess</a>(command, parameters)  Start a new process
                  ( Type of argument command: <a class="type" href="#string">string</a>,
                    Type of argument parameters: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/process.htm#startProcess(in_var_string)">startProcess</a>(cmdAndParams)  Start a new process
                  ( Type of argument cmdAndParams: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/process.htm#pipe2(in_string,in_array_string,inout_file,inout_file)">pipe2</a>(command, parameters, childStdin, childStdout)  Start a process
           Connect pipes to its standard I/O files.
                  ( Type of argument command: <a class="type" href="#string">string</a>,
                    Type of argument parameters: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a>,
                    Type of argument childStdin: <a class="type" href="#file">file</a>,
                    Type of argument childStdout: <a class="type" href="#file">file</a> )
      <a class="func" href="../libraries/process.htm#childStdIn(in_process)">childStdIn</a>(process)  The standard input file of process
                  ( Type of result: <a class="type" href="#file">file</a> )
      <a class="func" href="../libraries/process.htm#childStdOut(in_process)">childStdOut</a>(process)  The standard output file of process
                  ( Type of result: <a class="type" href="#file">file</a> )
      <a class="func" href="../libraries/process.htm#childStdErr(in_process)">childStdErr</a>(process)  The standard error file of process
                  ( Type of result: <a class="type" href="#file">file</a> )
      <a class="func" href="../libraries/process.htm#isAlive(in_process)">isAlive</a>(process)  Test whether the specified process is alive
                  ( Type of result: <a class="type" href="#boolean">boolean</a> )
      <a class="func" href="../libraries/process.htm#exitValue(in_process)">exitValue</a>(process)  The exit value of process
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/process.htm#compare(in_process,in_process)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/process.htm#hashCode(in_process)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/process.htm#str(in_process)">str</a>(process)  Get the process identifier (PID)
      <a class="func" href="../libraries/process.htm#getSearchPath">getSearchPath</a>  The search path of the operating system
                  ( Type of result: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/process.htm#commandPath(in_string)">commandPath</a>(command)  Search for an executable in the directories of the search path
                  ( Type of argument command: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/process.htm#commandDir(in_string)">commandDir</a>(command)  Search for the directory of an executable in the search path
                  ( Type of argument command: <a class="type" href="#string">string</a>,
                    Type of result: <a class="type" href="#string">string</a> )
    Statements:
      <a class="func" href="../libraries/process.htm#kill(in_process)">kill</a>(process)  Kill process
      <a class="func" href="../libraries/process.htm#waitFor(in_process)">waitFor</a>(process)  Wait until process has terminated
      <a class="func" href="../libraries/process.htm#setSearchPath(in_array_string)">setSearchPath</a>(searchPath)  Set the search path of the current process
                  ( Type of argument searchPath: <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="category"><h3>5.27 category</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/category.htm#category">category</a></tt> describes the category of a <tt><a class="type" href="#reference">reference</a></tt>.
  The <tt><a class="type" href="../libraries/category.htm#category">category</a></tt> functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/category.htm">category.s7i</a>"</span>.
</p><pre class="tt">
    Literals:
      <a name="category_SYMBOLOBJECT">SYMBOLOBJECT</a>, <a name="category_DECLAREDOBJECT">DECLAREDOBJECT</a>, <a name="category_FORWARDOBJECT">FORWARDOBJECT</a>, <a name="category_FWDREFOBJECT">FWDREFOBJECT</a>, <a name="category_BLOCKOBJECT">BLOCKOBJECT</a>,
      <a name="category_CALLOBJECT">CALLOBJECT</a>, <a name="category_MATCHOBJECT">MATCHOBJECT</a>, <a name="category_TYPEOBJECT">TYPEOBJECT</a>, <a name="category_FORMPARAMOBJECT">FORMPARAMOBJECT</a>, <a name="category_INTOBJECT">INTOBJECT</a>,
      <a name="category_BIGINTOBJECT">BIGINTOBJECT</a>, <a name="category_CHAROBJECT">CHAROBJECT</a>, <a name="category_STRIOBJECT">STRIOBJECT</a>, <a name="category_BSTRIOBJECT">BSTRIOBJECT</a>, <a name="category_ARRAYOBJECT">ARRAYOBJECT</a>,
      <a name="category_HASHOBJECT">HASHOBJECT</a>, <a name="category_HASHELEMOBJECT">HASHELEMOBJECT</a>, <a name="category_STRUCTOBJECT">STRUCTOBJECT</a>, <a name="category_STRUCTELEMOBJECT">STRUCTELEMOBJECT</a>,
      <a name="category_CLASSOBJECT">CLASSOBJECT</a>, <a name="category_INTERFACEOBJECT">INTERFACEOBJECT</a>, <a name="category_SETOBJECT">SETOBJECT</a>, <a name="category_FILEOBJECT">FILEOBJECT</a>, <a name="category_SOCKETOBJECT">SOCKETOBJECT</a>,
      <a name="category_POLLOBJECT">POLLOBJECT</a>, <a name="category_LISTOBJECT">LISTOBJECT</a>, <a name="category_FLOATOBJECT">FLOATOBJECT</a>, <a name="category_WINOBJECT">WINOBJECT</a>, <a name="category_POINTLISTOBJECT">POINTLISTOBJECT</a>,
      <a name="category_PROCESSOBJECT">PROCESSOBJECT</a>, <a name="category_ENUMLITERALOBJECT">ENUMLITERALOBJECT</a>, <a name="category_CONSTENUMOBJECT">CONSTENUMOBJECT</a>, <a name="category_VARENUMOBJECT">VARENUMOBJECT</a>,
      <a name="category_REFOBJECT">REFOBJECT</a>, <a name="category_REFLISTOBJECT">REFLISTOBJECT</a>, <a name="category_EXPROBJECT">EXPROBJECT</a>, <a name="category_ACTOBJECT">ACTOBJECT</a>, <a name="category_VALUEPARAMOBJECT">VALUEPARAMOBJECT</a>,
      <a name="category_REFPARAMOBJECT">REFPARAMOBJECT</a>, <a name="category_RESULTOBJECT">RESULTOBJECT</a>, <a name="category_LOCALVOBJECT">LOCALVOBJECT</a>, <a name="category_DATABASEOBJECT">DATABASEOBJECT</a>,
      <a name="category_SQLSTMTOBJECT">SQLSTMTOBJECT</a>, <a name="category_PROGOBJECT">PROGOBJECT</a>, <a name="category_ILLEGALOBJECT">ILLEGALOBJECT</a>
    Constants:
      <a class="type" href="../libraries/category.htm#category">category</a>.<a class="var" href="../libraries/category.htm#(attr_category)._value">value</a>  Default value of <a class="type" href="../libraries/category.htm#category">category</a> (SYMBOLOBJECT)
    Infix operators:
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
      <a class="type" href="../libraries/category.htm#category">category</a> <a class="op" href="../libraries/category.htm#(attr_category)conv(in_integer)">conv</a> A   Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/category.htm#category">category</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="type" href="../libraries/category.htm#category">category</a> <a class="op" href="../libraries/category.htm#(attr_category)conv(in_integer)">conv</a> ord(INTOBJECT) <b>&rArr;</b> INTOBJECT )
      <a class="type" href="../libraries/category.htm#category">category</a> <a class="op" href="../libraries/category.htm#(attr_category)parse(in_string)">parse</a> A   Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/category.htm#category">category</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="type" href="../libraries/category.htm#category">category</a> <a class="op" href="../libraries/category.htm#(attr_category)parse(in_string)">parse</a> <span class="stri">"FLOATOBJECT"</span> <b>&rArr;</b> FLOATOBJECT,
                    <a class="type" href="../libraries/category.htm#category">category</a> <a class="op" href="../libraries/category.htm#(attr_category)parse(in_string)">parse</a> <span class="stri">"does not exist"</span> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/category.htm#(in_category)=(in_category)">=</a>, <a class="op" href="../libraries/category.htm#(in_category)<&gt;(in_category)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/category.htm#ord(in_category)">ord</a>(A)    Ordinal number
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/category.htm#category(in_integer)">category</a>(A)  Conversion of <a class="type" href="#integer">integer</a> to <a class="type" href="../libraries/category.htm#category">category</a>
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    <a class="func" href="../libraries/category.htm#category(in_integer)">category</a>(ord(INTOBJECT)) <b>&rArr;</b> INTOBJECT )
      <a class="func" href="../libraries/category.htm#str(in_category)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    str(CHAROBJECT) <b>&rArr;</b> <span class="stri">"CHAROBJECT"</span> )
      <a class="func" href="../libraries/category.htm#category(in_string)">category</a>(A)  Conversion of <a class="type" href="#string">string</a> to <a class="type" href="../libraries/category.htm#category">category</a>
                  ( Type of argument A: <a class="type" href="#string">string</a>,
                    <a class="func" href="../libraries/category.htm#category(in_string)">category</a>(<span class="stri">"FLOATOBJECT"</span>) <b>&rArr;</b> FLOATOBJECT,
                    <a class="func" href="../libraries/category.htm#category(in_string)">category</a>(<span class="stri">"does not exist"</span>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Statements:
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">for</a> A <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">range</a> B <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">to</a> C <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">do</a>
        D
      <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)to(in_category)do(in_proc)end_for">for</a>   Loop over all categories from B to C
                  ( Type of argument D: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">for</a> A <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">range</a> B <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">downto</a> C <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">do</a>
        D
      <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/category.htm#for(inout_category)range(in_category)downto(in_category)do(in_proc)end_for">for</a>   Loop over all categories from B down to C
                  ( Type of argument D: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="reference"><h3>5.28 reference</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/reference.htm#reference">reference</a></tt> describes a reference to an object in the
  abstract syntax tree (AST) of a program. You cannot access the AST
  of the program that currently runs. Instead you can parse a program
  and access its AST. The <tt><a class="type" href="../libraries/reference.htm#reference">reference</a></tt> functions are defined in the
  library <span class="stri">"<a class="lib" href="../libraries/reference.htm">reference.s7i</a>"</span>.

</p><pre class="tt">
    Constants:
      <a class="var" href="../libraries/reference.htm#NIL">NIL</a>              Reference to no element.
      <a class="type" href="../libraries/reference.htm#reference">reference</a>.<a class="var" href="../libraries/reference.htm#(attr_reference)._value">value</a>  Default value of <a class="type" href="../libraries/reference.htm#reference">reference</a> (<a class="var" href="../libraries/reference.htm#NIL">NIL</a>)
    Relations:
      <a class="op" href="../libraries/reference.htm#(in_reference)=(in_reference)">=</a>, <a class="op" href="../libraries/reference.htm#(in_reference)<&gt;(in_reference)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/progs.htm#category(in_reference)">category</a>(A) Get the category of the referenced object
                  ( Type of result: <a class="type" href="#category">category</a>,
                    category(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/reference.htm#str(ref_reference)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/reference.htm#getType(in_reference)">getType</a>(A) Get the type of the referenced object
                  ( Type of result: <a class="type" href="#type">type</a>,
                    getType(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/progs.htm#objNumber(in_reference)">objNumber</a>(A) Delivers an unique number for each object
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    objNumber(NIL) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/progs.htm#isVar(in_reference)">isVar</a>(A)  Reference to a variable object
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    isVar(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/progs.htm#formalParams(in_reference)">formalParams</a>(A) Gets the formal parameters of a function
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a>,
                    formalParams(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/progs.htm#localVars(in_reference)">localVars</a>(A) Gets the local variables of a function
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a>,
                    localVars(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    localVars(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BLOCKOBJECT )
      <a class="func" href="../libraries/progs.htm#localConsts(in_reference)">localConsts</a>(A) Gets the local constants of a function
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a>,
                    localConsts(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    localConsts(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BLOCKOBJECT )
      <a class="func" href="../libraries/progs.htm#body(in_reference)">body</a>(A)   Gets the body of a function
                  ( body(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    body(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BLOCKOBJECT )
      <a class="func" href="../libraries/progs.htm#resultVar(in_reference)">resultVar</a>(A) Gets the result variable of a function
                  ( resultVar(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    resultVar(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BLOCKOBJECT )
      <a class="func" href="../libraries/progs.htm#resultInitValue(in_reference)">resultInitValue</a>(A) Gets the initialization value of the result
                         object of a function
                  ( resultInitValue(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    resultInitValue(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BLOCKOBJECT )
      arrayToList(A) Return the array elements as list
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a>,
                    arrayToList(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    arrayToList(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> ARRAYOBJECT )
      <a class="func" href="../libraries/progs.htm#arrayMinIdx(in_reference)">arrayMinIdx</a>(A) Return the minimum index of an array
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    arrayMinIdx(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    arrayMinIdx(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> ARRAYOBJECT )
      <a class="func" href="../libraries/progs.htm#arrayMaxIdx(in_reference)">arrayMaxIdx</a>(A) Return the maximum index of an array
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    arrayMaxIdx(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    arrayMaxIdx(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> ARRAYOBJECT )
      structToList(A) Return the struct elements as list
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a>,
                    structToList(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    structToList(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> STRUCTOBJECT )
      interfaceToStruct(A) Return the struct to which the interface object points.
                  ( interfaceToStruct(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    interfaceToStruct(A) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> INTERFACEOBJECT )
      <a class="func" href="../libraries/progs.htm#file(in_reference)">file</a>(A)   File name of the referenced object
                  ( Type of result: <a class="type" href="#string">string</a>,
                    file(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/progs.htm#path(in_reference)">path</a>(A)   Absolute file path of the referenced object
                  ( Type of result: <a class="type" href="#string">string</a>,
                    path(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/progs.htm#line(ref_reference)">line</a>(A)   Line number of the referenced object
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    line(NIL) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      alloc(A)  Create a copy of the object referenced by A
                The object value of the copy is set to NULL
      getValue(A, <a class="type" href="../libraries/reference.htm#reference">reference</a>) Dereference as <a class="type" href="../libraries/reference.htm#reference">reference</a>
                  ( Type of result: <a class="type" href="../libraries/reference.htm#reference">reference</a>,
                    getValue(NIL, <a class="type" href="../libraries/reference.htm#reference">reference</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="../libraries/reference.htm#reference">reference</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for
                        category(A) not in {FWDREFOBJECT, REFOBJECT, REFPARAMOBJECT, RESULTOBJECT,
                        LOCALVOBJECT, ENUMLITERALOBJECT, CONSTENUMOBJECT, VARENUMOBJECT} )
      getValue(A, <a class="type" href="#ref_list">ref_list</a>) Dereference as <a class="type" href="#ref_list">ref_list</a>
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a>,
                    getValue(NIL, <a class="type" href="#ref_list">ref_list</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#ref_list">ref_list</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for
                        category(A) not in {MATCHOBJECT, CALLOBJECT, REFLISTOBJECT} )
      getValue(A, <a class="type" href="#boolean">boolean</a>) Dereference as <a class="type" href="#boolean">boolean</a>
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    getValue(NIL, <a class="type" href="#boolean">boolean</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#boolean">boolean</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if A does not refer to <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> or <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> )
      getValue(A, <a class="type" href="#integer">integer</a>) Dereference as <a class="type" href="#integer">integer</a>
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    getValue(NIL, <a class="type" href="#integer">integer</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#integer">integer</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> INTOBJECT )
      getValue(A, <a class="type" href="#bigInteger">bigInteger</a>) Dereference as <a class="type" href="#bigInteger">bigInteger</a>
                  ( Type of result: <a class="type" href="#bigInteger">bigInteger</a>,
                    getValue(NIL, <a class="type" href="#bigInteger">bigInteger</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#bigInteger">bigInteger</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BIGINTOBJECT )
      getValue(A, <a class="type" href="#float">float</a>) Dereference as <a class="type" href="#float">float</a>
                  ( Type of result: <a class="type" href="#float">float</a>,
                    getValue(NIL, <a class="type" href="#float">float</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#float">float</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> FLOATOBJECT )
      getValue(A, <a class="type" href="#char">char</a>) Dereference as <a class="type" href="#char">char</a>
                  ( Type of result: <a class="type" href="#char">char</a>,
                    getValue(NIL, <a class="type" href="#char">char</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#char">char</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> CHAROBJECT )
      getValue(A, <a class="type" href="#string">string</a>) Dereference as <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a>,
                    getValue(NIL, <a class="type" href="#string">string</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#string">string</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> STRIOBJECT )
      getValue(A, <a class="type" href="#bstring">bstring</a>) Dereference as <a class="type" href="#bstring">bstring</a>
                  ( Type of result: <a class="type" href="#bstring">bstring</a>,
                    getValue(NIL, <a class="type" href="#bstring">bstring</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#bstring">bstring</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> BSTRIOBJECT )
      getValue(A, <a class="type" href="#set">bitset</a>) Dereference as <a class="type" href="#set">bitset</a>
                  ( Type of result: <a class="type" href="#set">bitset</a>,
                    getValue(NIL, <a class="type" href="#set">bitset</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#set">bitset</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> SETOBJECT )
      getValue(A, <a class="type" href="../libraries/clib_file.htm#clib_file">clib_file</a>) Dereference as <a class="type" href="../libraries/clib_file.htm#clib_file">clib_file</a>
                  ( Type of result: <a class="type" href="../libraries/clib_file.htm#clib_file">clib_file</a>,
                    getValue(NIL, <a class="type" href="../libraries/clib_file.htm#clib_file">clib_file</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="../libraries/clib_file.htm#clib_file">clib_file</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> FILEOBJECT )
      getValue(A, <a class="type" href="#program">program</a>) Dereference as <a class="type" href="#program">program</a>
                  ( Type of result: <a class="type" href="#program">program</a>,
                    getValue(NIL, <a class="type" href="#program">program</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#program">program</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> PROGOBJECT )
      getValue(A, <font color=red>ACTION</font>) Dereference as <font color=red>ACTION</font>
                  ( Type of result: <font color=red>ACTION</font>,
                    getValue(NIL, <font color=red>ACTION</font>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <font color=red>ACTION</font>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> ACTOBJECT )
      getValue(A, <a class="type" href="#type">type</a>) Dereference as <a class="type" href="#type">type</a>
                  ( Type of result: <a class="type" href="#type">type</a>,
                    getValue(NIL, <a class="type" href="#type">type</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>,
                    getValue(A, <a class="type" href="#type">type</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> for category(A) &lt;> TYPEOBJECT )
      <a class="func" href="../libraries/reference.htm#compare(in_reference,in_reference)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/reference.htm#hashCode(in_reference)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      <a class="func" href="../libraries/progs.htm#setVar(in_reference,in_boolean)">setVar</a>(A, B) Set var flag of referenced object A to B
                  ( Type of argument B: <a class="type" href="#boolean">boolean</a>,
                    setVar(NIL, B) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/progs.htm#setCategory(in_reference,in_category)">setCategory</a>(A, B) Set the category of the referenced object A to B
                  ( Type of argument B: <a class="type" href="#category">category</a>,
                    setCategory(NIL, B) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="../libraries/reference.htm#setType(in_reference,in_type)">setType</a>(A, B) Set the type of the referenced object A to B
                  ( Type of argument B: <a class="type" href="#type">type</a>,
                    setType(NIL, B) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      setValue(A, B) Set the value of the referenced object A to B
                  ( Type of argument B: <a class="type" href="#ref_list">ref_list</a> )
      setFormalParams(A, B) Set the formal parameters of a function
                  ( Type of argument B: <a class="type" href="#ref_list">ref_list</a>,
                    setFormalParams(NIL, B) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="ref_list"><h3>5.29 ref_list</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a></tt> describes a list of <tt><a class="type" href="#reference">reference</a></tt> objects. The
  <tt><a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a></tt> functions are defined in the library <span class="stri">"<a class="lib" href="../libraries/ref_list.htm">ref_list.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a>.<span class="var">EMPTY</span>  Empty reference list.
      <a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a>.<a class="var" href="../libraries/ref_list.htm#(attr_ref_list)._value">value</a>  Default value of <a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a> (ref_list.EMPTY)
    Infix operators:
      <a class="op" href="../libraries/ref_list.htm#(in_ref_list)&(in_ref_list)">&amp;</a>         Ref_list list concatenation
      A <a class="op" href="../libraries/ref_list.htm#(in_reference)in(in_ref_list)">in</a> B    Is element in ref_list
                  ( Type of argument A: <a class="type" href="#reference">reference</a>,
                    Type of result: <a class="type" href="#boolean">boolean</a> )
      A <a class="op" href="../libraries/ref_list.htm#(in_reference)not_in(in_ref_list)">not in</a> B  Is element not in ref_list
                  ( Type of argument A: <a class="type" href="#reference">reference</a>,
                    Type of result: <a class="type" href="#boolean">boolean</a> )
    Indices:
      <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer)]">[</a> A <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer)]">]</a>     Access one ref_list element
                  ( Type of argument A: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#reference">reference</a>,
                    A[1] <b>&rArr;</b> First element,
                    A[length(A)] <b>&rArr;</b> Last element,
                    A[0] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    A[succ(length(A))] <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer)..(in_integer)]">[</a> A <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer)..(in_integer)]">..</a> B <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer)..(in_integer)]">]</a>  Access a sub list
                  ( Type of arguments A and B: <a class="type" href="#integer">integer</a> )
      <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer).._]">[</a> A <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer).._]">..</a> <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[(in_integer).._]">]</a>  Access a sub list beginning at position A
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
      <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[_..(in_integer)]">[</a> <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[_..(in_integer)]">..</a> A <a class="op" href="../libraries/ref_list.htm#(in_ref_list)[_..(in_integer)]">]</a>  Access a sub list ending at position A
                  ( Type of argument A: <a class="type" href="#integer">integer</a> )
    Relations:
      <a class="op" href="../libraries/ref_list.htm#(in_ref_list)=(in_ref_list)">=</a>, <a class="op" href="../libraries/ref_list.htm#(in_ref_list)<&gt;(in_ref_list)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/ref_list.htm#length(in_ref_list)">length</a>(A) Length of ref_list
                  ( Type of result: <a class="type" href="#integer">integer</a>,
                    length(<a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a>.EMPTY) <b>&rArr;</b> 0 )
      <a class="func" href="../libraries/ref_list.htm#make_list(in_reference)">make_list</a>(A) Create ref_list with element A
                  ( Type of argument A: <a class="type" href="#reference">reference</a> )
      <a class="func" href="../libraries/ref_list.htm#pos(in_ref_list,in_reference)">pos</a>(A,B)  First position of <a class="type" href="#reference">reference</a> B in <a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a> A
                  ( Type of argument B: <a class="type" href="#reference">reference</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/ref_list.htm#pos(in_ref_list,in_reference,in_integer)">pos</a>(A,B,C) First position of <a class="type" href="#reference">reference</a> B in <a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a> A
                 The search starts at position C of <a class="type" href="../libraries/ref_list.htm#ref_list">ref_list</a> A
                  ( Type of argument B: <a class="type" href="#reference">reference</a>,
                    Type of argument C: <a class="type" href="#integer">integer</a>,
                    Type of result: <a class="type" href="#integer">integer</a> )
      incl(A, B) Include element in list
                  ( Type of argument B: <a class="type" href="#reference">reference</a> )
      excl(A, B) Exclude element from list
                  ( Type of argument B: <a class="type" href="#reference">reference</a> )
    Statements:
      A <a class="op" href="../libraries/ref_list.htm#(inout_ref_list)&:=(in_ref_list)">&amp;:=</a> B   Append B to A
                  ( A &amp;:= B <b>&rArr;</b> A := A &amp; B )
      A <a class="op" href="../libraries/ref_list.htm#(inout_ref_list)@:=_[(in_integer)](in_reference)">@:=</a> [B] C  Assign C to element B of ref_list A
                  ( Type of argument B: <a class="type" href="#integer">integer</a>,
                    Type of argument C: <a class="type" href="#reference">reference</a>,
                    A @:= [B] C <b>&rArr;</b>
                        A := A[..pred(B)] &amp; make_list(C) &amp; A[succ(B)..],
                    A @:= [0] C <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a>,
                    A @:= [succ(length(A))] C <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#INDEX_ERROR">INDEX_ERROR</a> )
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
      <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)do(in_proc)end_for">range</a> aRefList <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)do(in_proc)end_for">for</a>   Loop over all elements of a ref_list
                  ( Type of argument forVar: <a class="type" href="#reference">reference</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
      <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">for</a> forVar <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">range</a> aRefList <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">until</a> condition <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">do</a>
        statements
      <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">end</a> <a class="keywd" href="../libraries/ref_list.htm#for(inout_reference)range(in_ref_list)until(ref_func_boolean)do(in_proc)end_for">for</a>   Loop over all elements of a ref_list until condition is <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>
                Check the condition before the statements in the loop body are executed.
                  ( Type of argument forVar: <a class="type" href="#reference">reference</a>,
                    Type of argument condition: <a class="type" href="#boolean">boolean</a>,
                    Type of argument statements: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="structElement"><h3>5.30 structElement</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a></tt> describes an element of a <tt><a class="type" href="#struct">struct</a></tt>.
  A <tt><a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a></tt> value has two properties:
</p><ul>
    <li>The <tt><a class="type" href="#type">type</a></tt> of the struct element (this can be obtained with <tt><a class="func" href="../libraries/struct_elem.htm#getType(in_structElement)">getType</a></tt>).
    <li>The name of the struct element (this can be obtained with <tt><a class="func" href="../libraries/struct_elem.htm#getName(in_structElement)">getName</a></tt>).
</ul><p>
  The function <tt><a class="func" href="../libraries/struct_elem.htm#elements(in_type)">elements</a></tt> returns a <tt><a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a></tt> array, which
  describes the elements of a <tt><a class="type" href="#struct">struct</a></tt>:
</p><pre class="indent">
<a class="func" href="../libraries/struct_elem.htm#elements(in_type)">elements</a>(aStructType)
</pre><p>
  The program below writes the types and names of <tt><span class="type">exampleStruct</span></tt>:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type" href="#type">type</a>: exampleStruct is <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <a class="type" href="#string">string</a>: aKey <span class="keywd">is</span> "";
    <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: number <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <a class="type" href="#proc">proc</a>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a>: anElement <span class="keywd">is</span> <a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a>.<a class="var" href="../libraries/struct_elem.htm#(attr_structElement)._value">value</a>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> anElement <span class="keywd">range</span> <a class="func" href="../libraries/struct_elem.htm#elements(in_type)">elements</a>(exampleStruct) <span class="keywd">do</span>
      writeln(str(<a class="func" href="../libraries/struct_elem.htm#getType(in_structElement)">getType</a>(anElement)) <& ": " <& <a class="func" href="../libraries/struct_elem.htm#getName(in_structElement)">getName</a>(anElement));
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;
</pre><p>
  The output of this program is:
</p><pre class="indent">
string: aKey
integer: number
</pre><p>
  Element descriptions can be used in templates. The JSON
  serialization and de-serialization in the <span class="stri">"<a class="lib" href="../libraries/json_serde.htm">json_serde.s7i</a>"</span> library
  uses <tt><a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a></tt>. The <tt><a class="type" href="../libraries/structElement.htm#structElement">structElement</a></tt> functions are defined in
  the library <span class="stri">"<a class="lib" href="../libraries/struct_elem.htm">struct_elem.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a>.<a class="var" href="../libraries/struct_elem.htm#(attr_structElement)._value">value</a>  Empty struct element.
    Prefix operators:
      <a class="op" href="../libraries/struct_elem.htm#symb(in_structElement)">symb</a>    Convert into a <a class="link" href="params.htm#Symbol_parameter">symbol parameter</a>
                  ( Type of result: <span class="type">f_param</span>,
		    <a class="op_no_ul" href="../libraries/struct_elem.htm#symb(in_structElement)">symb</a> <a class="type_no_ul" href="../libraries/struct_elem.htm#structElement">structElement</a>.<a class="var_no_ul" href="../libraries/struct_elem.htm#(attr_structElement)._value">value</a> <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
    Relations:
      <a class="op" href="../libraries/struct_elem.htm#(in_structElement)=(in_structElement)">=</a>, <a class="op" href="../libraries/struct_elem.htm#(in_structElement)<>(in_structElement)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/struct_elem.htm#getName(in_structElement)">getName</a>(A) Name of a struct element
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/struct_elem.htm#getType(in_structElement)">getType</a>(A) Type of a struct element
                  ( Type of result: <a class="type" href="#type">type</a> )
      <a class="func" href="../libraries/struct_elem.htm#elements(in_type)">elements</a>(A) Get all struct elements from a struct type
                  ( Type of argument A: <a class="type" href="#type">type</a>,
                    Type of result: <a class="type" href="../libraries/struct_elem.htm#structElementArray">structElementArray</a>,
                    <a class="func" href="../libraries/struct_elem.htm#elements(in_type)">elements</a>(<a class="type" href="#boolean">boolean</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#ILLEGAL_ACTION">ILLEGAL_ACTION</a> )
      <a class="func" href="../libraries/struct_elem.htm#structElement(in_reference)">structElement</a>(A) Convert a <a class="type" href="#reference">reference</a> to a <a class="type" href="../libraries/struct_elem.htm#structElement">structElement</a>
                  ( Type of argument A: <a class="type" href="#reference">reference</a> )
      <a class="func" href="../libraries/struct_elem.htm#compare(in_structElement,in_structElement)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/struct_elem.htm#hashCode(in_structElement)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
</pre><p></p>

<a name="program"><h3>5.31 program</h3></a>
<p>
    The type <tt><a class="type" href="../libraries/progs.htm#program">program</a></tt> describes a Seed7 program. You cannot access
  the program that currently runs. Instead you can parse a program
  and access its data. The <tt><a class="type" href="../libraries/progs.htm#program">program</a></tt> functions are defined in the
  library <span class="stri">"<a class="lib" href="../libraries/progs.htm">progs.s7i</a>"</span>.
</p><pre class="tt">
    Constants:
      <a class="type" href="../libraries/progs.htm#program">program</a>.<span class="var">EMPTY</span>  Empty program.
      <a class="type" href="../libraries/progs.htm#program">program</a>.<a class="var" href="../libraries/progs.htm#(attr_program)._value">value</a>  Default value of <a class="type" href="../libraries/progs.htm#program">program</a> (program.EMPTY)
    Relations:
      <a class="op" href="../libraries/progs.htm#(in_program)=(in_program)">=</a>, <a class="op" href="../libraries/progs.htm#(in_program)<>(in_program)">&lt;></a>
    Functions:
      <a class="func" href="../libraries/progs.htm#name(in_program)">name</a>(A)   Name of program A without path and extension
      <a class="func" href="../libraries/progs.htm#path(in_program)">path</a>(A)   Absolute path of program A
      <a class="func" href="../libraries/progs.htm#parseFile(in_string)">parseFile</a>(A)  Parse the file with the name A
                  ( Type of argument A: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/progs.htm#parseStri(in_string)">parseStri</a>(A)  Parse the string A
                  ( Type of argument A: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/progs.htm#evaluate(ref_program,ref_reference)">evaluate</a>(A, B)  Evaluate the expression B which is part of program A
                  ( Type of result: <a class="type" href="#reference">reference</a>,
                    Type of argument B: <a class="type" href="#reference">reference</a> )
      <a class="func" href="../libraries/progs.htm#sysVar(in_program,in_string)">sysVar</a>(A, B)  Return a reference of the system var B of program A
                  ( Type of result: <a class="type" href="#reference">reference</a>,
                    Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/progs.htm#errorCount(in_program)">errorCount</a>(A)  Number of errors in the program A
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a class="func" href="../libraries/progs.htm#globalObjects(in_program)">globalObjects</a>(A)  List of global defined objects in the program A
                  ( Type of result: <a class="type" href="#ref_list">ref_list</a> )
      <a class="func" href="../libraries/progs.htm#syobject(in_program,in_string)">syobject</a>(A, B)  Return object with name B in program A
                  ( Type of result: <a class="type" href="#reference">reference</a>,
                    Type of argument B: <a class="type" href="#string">string</a> )
      <a class="func" href="../libraries/progs.htm#match(in_program,in_ref_list)">match</a>(A, B)  Return object from program A which matches B
                  ( Type of result: <a class="type" href="#reference">reference</a>,
                    Type of argument B: <a class="type" href="#ref_list">ref_list</a> )
    Statements:
      <a class="func" href="../libraries/progs.htm#execute(in_program)">execute</a>(A) Execute the program referred by A
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="ptr"><h3>5.32 ptr</h3></a>
<p>
    The type <tt><a class="type" href="#ptr">ptr</a> <span class="type">baseType</span></tt> describes a pointer to an object
  of a <tt><span class="type">baseType</span></tt>. With
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: ptrType <span class="keywd">is</span> <a class="type" href="#ptr">ptr</a> <span class="type">baseType</span>;
</pre><p>
  a new pointer type <tt><span class="type">ptrType</span></tt> is declared.
</p><pre class="tt">
    Constants:
      <span class="type">ptrType</span>.NIL   Reference to no element
    Prefix operators:
      &amp;         Address of
                  ( Type of operand: <span class="type">baseType</span> )
    Postfix operators:
      ^         Dereference
                  ( Type of result: <span class="type">baseType</span> )
    Infix operators:
      <span class="type">ptrType</span> <font color=blue>conv</font> A  Conversion from <a class="type" href="#reference">reference</a> A to <span class="type">ptrType</span>
      <a class="type" href="#reference">reference</a> <font color=blue>conv</font> A  Conversion from <span class="type">ptrType</span> A to <a class="type" href="#reference">reference</a>
    Relations:
      =, &lt;>
    Functions:
      base_type(<span class="type">ptrType</span>)  Gets the <span class="type">baseType</span> of a <span class="type">ptrType</span>
                  ( Type of argument <span class="type">ptrType</span>: <a class="type" href="#type">type</a> )
</pre><p></p>

<a name="func"><h3>5.33 func</h3></a>
<p>
    The type <tt><a class="type" href="#func">func</a> <span class="type">baseType</span></tt> describes functions which return
  a <tt><span class="type">baseType</span></tt>. For example: <tt><a class="type" href="#func">func</a> <a class="type" href="#integer">integer</a></tt> describes an <tt><a class="type" href="#integer">integer</a></tt>
  function.
</p><pre class="tt">
    Values:
      ord, str, abs, sqrt, rand, A + B, A * B, A ** B,
      trunc, round, sin, cos, compare, hashCode, pos,
      replace, trim, length, keys, color, dayOfWeek,
      ...
                Every function declared with <span class="keywd">const</span> <a class="type" href="#func">func</a> ... is a value

    Prefix operators:
      <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">baseType</span>: resultVariable <span class="keywd">is</span> <span class="type">baseType</span>.value;
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a <span class="type">baseType</span> function
                  ( Type of <tt>'statements'</tt>: <a class="type" href="#proc">proc</a>,
                    Type of result: <a class="type" href="#func">func</a> <span class="type">baseType</span> )

      <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">baseType</span>: resultVariable <span class="keywd">is</span> <span class="type">baseType</span>.value;
      <span class="keywd">local</span>
        declarations
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a <span class="type">baseType</span> function with local variables
                  ( Type of <tt>'declarations'</tt>: <a class="type" href="#proc">proc</a>,
                    Type of <tt>'statements'</tt>: <a class="type" href="#proc">proc</a>,
                    Type of result: <a class="type" href="#func">func</a> <span class="type">baseType</span> )

      <span class="keywd">return</span> value
                Create a function with the result type of value
                  ( Type of value: <span class="type">anyType</span> - which means: any type,
                    Type of result: <a class="type" href="#func">func</a> <span class="type">anyType</span> )
</pre><p>
  Functions are declared as constants with a <tt><a class="type" href="#func">func</a></tt> type and
  are initialized with a <tt><span class="keywd">func result</span> ...</tt> or <tt><span class="keywd">return</span> ...</tt> operator.
  For example:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#func">func</a> <a class="type" href="#integer">integer</a>: tak (<span class="keywd">in</span> <a class="type" href="#integer">integer</a>: x, <span class="keywd">in</span> <a class="type" href="#integer">integer</a>: y, <span class="keywd">in</span> <a class="type" href="#integer">integer</a>: z) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="#integer">integer</a>: tak <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> y >= x <span class="keywd">then</span>
      tak := z;
    <span class="keywd">else</span>
      tak := tak(tak(pred(x), y, z),
                 tak(pred(y), z, x),
                 tak(pred(z), x, y));
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>
</pre><p>
  Another example using the <tt><span class="keywd">return</span></tt> function:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#func">func</a> <a class="type" href="#float">float</a>: convertRadianToDegree (<span class="keywd">in</span> <a class="type" href="#float">float</a>: x) <span class="keywd">is</span>
  <span class="keywd">return</span> x * 57.295779513082320876798154814114;
</pre><p>
  This <tt><span class="keywd">return</span></tt> function should not be confused with a <tt><span class="keywd">return</span></tt>
  statement. It is important to note that no <tt><span class="keywd">return</span></tt> statement
  exists. The declaration for the <tt><span class="keywd">return</span></tt> function is as follows:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#func">func</a> <a class="type" href="#func">func</a> <span class="type">aType</span>: return (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type" href="#func">func</a> <span class="type">aType</span> <span class="keywd">param</span>)  <span class="keywd">is action</span> <span class="stri">"PRC_RETURN"</span>;
<span class="keywd">const</span> <a class="type" href="#func">func</a> <a class="type" href="#func">func</a> <span class="type">aType</span>: return (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <span class="type">aType</span> <span class="keywd">param</span>)       <span class="keywd">is action</span> <span class="stri">"PRC_RETURN"</span>;
</pre><p>
  The <tt><a class="type" href="#func">func</a></tt> types can also be used for parameters.
  Functions which use a <tt><a class="type" href="#func">func</a></tt> parameter do not evaluate this
  parameter before the function call. Instead this parameter can
  be evaluated zero or more times inside the function. For example:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#func">func</a> <a class="type" href="#boolean">boolean</a>: (<span class="keywd">in</span> <a class="type" href="#boolean">boolean</a>: first) and (<span class="keywd">in</span> <a class="type" href="#func">func</a> <a class="type" href="#boolean">boolean</a>: second) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="#boolean">boolean</a>: conjunction <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> first <span class="keywd">then</span>
      conjunction := second;
    <span class="keywd">end if</span>;
  <span class="keywd">end func</span>;
</pre><p>
  Here the second parameter is only evaluated if the first
  parameter is <tt><a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a></tt>.
</p>

<a name="varfunc"><h3>5.34 varfunc</h3></a>
<p>
    The type <tt><a class="type" href="#varfunc">varfunc</a> <span class="type">baseType</span></tt> describes functions which return
  a <tt><span class="type">baseType</span></tt> variable. For example: A function which returns an
  <tt><a class="type" href="#integer">integer</a></tt> variable is described with <tt><a class="type" href="#varfunc">varfunc</a> <a class="type" href="#integer">integer</a></tt>. A call
  of a <tt><a class="type" href="#varfunc">varfunc</a></tt> can be used at the left side of an assignment.
  Generally a <tt><a class="type" href="#varfunc">varfunc</a></tt> can be used at places where an <tt><span class="keywd">inout</span></tt>
  parameter requests a variable.
</p><pre class="tt">
    Prefix operators:
      <span class="keywd">return var</span> value;
                Create a varfunc which returns the variable <tt>'value'</tt>
                  ( Type of value: <span class="type">anyType</span> - which means: any type,
                    Accessright of value: <span class="keywd">var</span> = A variable, an <tt><span class="keywd">inout</span></tt> parameter or a <tt><a class="type" href="#varfunc">varfunc</a></tt>
                    Type of result: <a class="type" href="#varfunc">varfunc</a> <span class="type">anyType</span> )
</pre><p>
    Varfunctions are used to express <tt><a class="type" href="#array">array</a></tt>, <tt><a class="type" href="#hash">hash</a></tt> and <tt><a class="type" href="#struct">struct</a></tt>
  accesses which can be used at the left and right side of an
  assignment. The access function for a <tt><a class="type" href="#hash">hash</a></tt> is defined as:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#func">func</a> <span class="type">baseType</span>: (<span class="keywd">in</span> <span class="type">hashType</span>: aHash) [ (<span class="keywd">in</span> <span class="type">keyType</span>: aKey) ] <span class="keywd">is</span>
  <span class="keywd">return</span> INDEX(aHash, aKey, hashCode(aKey), <span class="type">hashType</span>.keyCompare);

<span class="keywd">const</span> <a class="type" href="#varfunc">varfunc</a> <span class="type">baseType</span>: (<span class="keywd">inout</span> <span class="type">hashType</span>: aHash) [ (<span class="keywd">in</span> <span class="type">keyType</span>: aKey) ] <span class="keywd">is</span>
  <span class="keywd">return var</span> INDEX(aHash, aKey, hashCode(aKey), <span class="type">hashType</span>.keyCompare);
</pre><p>
  The example above shows that functions with <tt><span class="keywd">in</span></tt> and <tt><span class="keywd">inout</span></tt>
  parameters can be overloaded. At the right side of an assignment
  the <tt><a class="type" href="#func">func</a></tt> is called, while at the left side the <tt><a class="type" href="#varfunc">varfunc</a></tt>
  is called. That way the access functions of <a class="type" href="#array">array</a>s, <a class="type" href="#hash">hash</a>es
  and <a class="type" href="#struct">struct</a>s can be used in the usual way.
</p>

<a name="void"><h3>5.35 void</h3></a>
<p>
    The type <tt><a class="type" href="#void">void</a></tt> describes the empty type.
</p><pre class="tt">
    Value:
      <a name="empty">empty</a>     This is the only value of the type <a class="type" href="#void">void</a>.
    Constants:
      <a class="type" href="#void">void</a>.<span class="var">value</span>  Default value of <a class="type" href="#void">void</a> (empty)
</pre><p></p>

<a name="proc"><h3>5.36 proc</h3></a>
<p>
    The type <tt><a class="type" href="#proc">proc</a></tt> describes procedures. The type <tt><a class="type" href="#proc">proc</a></tt>
  is defined as <tt><a class="type" href="#func">func</a> <a class="type" href="#void">void</a></tt>.
</p><pre class="tt">
    Values:
      noop;
      <span class="keywd">while</span> ... <span class="keywd">do</span> ... <span class="keywd">end while</span>;
      <span class="keywd">repeat</span> ... <span class="keywd">until</span> ... ;
      writeln( ... );
      A := B;
      incr(A);
      ...
                Every procedure declared with <span class="keywd">const</span> <a class="type" href="#proc">proc</a>: ... is a value
                The procedure <tt>'noop'</tt> does nothing and is used as empty procedure.

    Prefix operators:
      <span class="keywd">func</span>
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a procedure
                  ( Type of <tt>'statements'</tt>: <a class="type" href="#proc">proc</a>,
                    Type of result: <a class="type" href="#proc">proc</a> )

      <span class="keywd">func</span>
      <span class="keywd">local</span>
        declarations
      <span class="keywd">begin</span>
        statements
      <span class="keywd">end func</span>
                Create a procedure with local variables
                  ( Type of <tt>'declarations'</tt>: <a class="type" href="#proc">proc</a>,
                    Type of <tt>'statements'</tt>: <a class="type" href="#proc">proc</a>,
                    Type of result: <a class="type" href="#proc">proc</a> )
</pre><p></p>

<a name="creator"><h3>5.37 creator</h3></a>
<p>
    The type <tt><a class="type" href="#creator">creator</a></tt> describes create operators. Create operators ( <tt>::=</tt> )
  are used for initializations. They are similar to <a class="link" href="stats.htm#Assignment">assignment statements</a>
  ( <tt><a class="op_no_ul" href="stats.htm#Assignment">:=</a></tt> ) but they assume that the destination is undefined (It may contain
  garbage). Create operators are not called explicitly. They are called by
  constant- and variable-declarations instead. Value parameters use create
  operators for initialization as well. To allow declarations and value
  parameters a type needs a corresponding create operator. Examples of
  create operator declarations are:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#creator">creator</a>: (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#boolean">boolean</a>: dest) ::= (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="#boolean">boolean</a>: source)         <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"BLN_CREATE"</span>;
<span class="keywd">const</span> <a class="type" href="#creator">creator</a>: (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#integer">integer</a>: dest) ::= (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#integer">integer</a>: source)        <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"INT_CREATE"</span>;
<span class="keywd">const</span> <a class="type" href="#creator">creator</a>: (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#bigInteger">bigInteger</a>: dest) ::= (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#bigInteger">bigInteger</a>: source)  <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"BIG_CREATE"</span>;
<span class="keywd">const</span> <a class="type" href="#creator">creator</a>: (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#string">string</a>: dest) ::= (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type_no_ul" href="#string">string</a>: source)           <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"STR_CREATE"</span>;
<span class="keywd">const</span> <a class="type" href="#creator">creator</a>: (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#proc">proc</a>: dest) ::= (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#proc">proc</a>: source)              <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"PRC_CREATE"</span>;
</pre><p>
  The types <tt><a class="type_no_ul" href="#boolean">boolean</a></tt>, <tt><a class="type_no_ul" href="#integer">integer</a></tt>, <tt><a class="type_no_ul" href="#float">float</a></tt>, <tt><a class="type_no_ul" href="#char">char</a></tt>, <tt><a class="type_no_ul" href="#bin64.htm#bin64">bin64</a></tt>, <tt><a class="type_no_ul" href="#bin32.htm#bin64">bin32</a></tt> and
  <a class="link" href="#enumeration">enumeration types</a> don't use the heap. In this case the <tt>::=</tt> operator
  just copies some bytes from the source to the destination (like the
  assignment does).
</p><p>
  For types like <tt><a class="type_no_ul" href="#string">string</a></tt> and <tt><a class="type_no_ul" href="#bigInteger">bigInteger</a></tt> data is stored in the heap.
  In this case the <tt>::=</tt> operator allocates heap memory and copies data
  to the allocated area. Finally the pointer to the heap is stored in the
  destination.
</p><p>
  The type <tt><a class="type" href="#creator">creator</a></tt> is defined as <tt><a class="type" href="#func">func</a> <span class="type">create_result</span></tt>. The type
  <tt><a class="type" href="#creator">creator</a></tt> is similar to <tt><a class="type_no_ul" href="#proc">proc</a></tt>. The type <tt><a class="type" href="#creator">creator</a></tt> has been introduced
  to prohibit create operators in places where statements are required.
  An attempt to use <tt>::=</tt> as statement leads to an error:
</p><pre class="indent">
*** tst492.sd7(7):57: <a class="link" href="errors.htm#NO_MATCH">Match for {INT_CREATE({number ::= 1 }) ; {number writeln } } failed</a>
    number ::= 1;
</pre><p></p>

<a name="destroyer"><h3>5.38 destroyer</h3></a>
<p>
    The type <tt><a class="type" href="#destroyer">destroyer</a></tt> describes destroy operations. Destroy operations are
  used to free data. They are not called explicitly. Destroy operations are
  executed by the automatic memory management when a certain value cannot
  be accessed any more. Examples of destroy operation declarations are:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#destroyer">destroyer</a>: destroy (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#boolean">boolean</a>: aValue)     <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <a class="type" href="#destroyer">destroyer</a>: destroy (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#integer">integer</a>: aValue)     <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <a class="type" href="#destroyer">destroyer</a>: destroy (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#bigInteger">bigInteger</a>: aValue)  <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"BIG_DESTR"</span>;
<span class="keywd">const</span> <a class="type" href="#destroyer">destroyer</a>: destroy (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#bstring">bstring</a>: aValue)     <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"BST_DESTR"</span>;
<span class="keywd">const</span> <a class="type" href="#destroyer">destroyer</a>: destroy (<a class="keywd_no_ul" href="params.htm#ref_parameter">ref</a> <a class="type_no_ul" href="#proc">proc</a>: aValue)        <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"PRC_DESTR"</span>;
</pre><p>
  For the types <tt><a class="type_no_ul" href="#boolean">boolean</a></tt>, <tt><a class="type_no_ul" href="#integer">integer</a></tt>, <tt><a class="type_no_ul" href="#float">float</a></tt>, <tt><a class="type_no_ul" href="#char">char</a></tt>, <tt><a class="type_no_ul" href="#bin64.htm#bin64">bin64</a></tt>, <tt><a class="type_no_ul" href="#bin32.htm#bin64">bin32</a></tt> and
  for <a class="link" href="#enumeration">enumeration types</a> the destroy operation does nothing.
</p><p>
  For types like <tt><a class="type_no_ul" href="#string">string</a></tt> and <tt><a class="type_no_ul" href="#bigInteger">bigInteger</a></tt> the destroy operation frees the
  heap data.
</p><p>
  The type <tt><a class="type" href="#destroyer">destroyer</a></tt> is defined as <tt><a class="type" href="#func">func</a> <span class="type">destroy_result</span></tt>. The type
  <tt><a class="type" href="#destroyer">destroyer</a></tt> is similar to <tt><a class="type_no_ul" href="#proc">proc</a></tt>. The type <tt><a class="type" href="#destroyer">destroyer</a></tt> has been
  introduced to prohibit destroy operations in places where statements are
  required. An attempt to do use a destroy operation as statement leads to
  an error:
</p><pre class="indent">
*** tst493.sd7(8):57: <a class="link" href="errors.htm#NO_MATCH">Match for {GEN_DESTR({number destroy }) ; {number writeln } } failed</a>
    destroy(number);
</pre><p></p>

<a name="type"><h3>5.39 type</h3></a>
<p>
    The type <tt><a class="type" href="#type">type</a></tt> describes all types. Examples of type declarations are:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="#type">type</a>: intArrayType <span class="keywd">is</span> <a class="type" href="#array">array</a> <a class="type" href="#integer">integer</a>;
<span class="keywd">const</span> <a class="type" href="#type">type</a>: arrayIndexChar <span class="keywd">is</span> <a class="type" href="#array">array</a> [<a class="type" href="#char">char</a>] <a class="type" href="#string">string</a>;
<span class="keywd">const</span> <a class="type" href="#type">type</a>: hashType <span class="keywd">is</span> <a class="type" href="#hash">hash</a> [<a class="type" href="#string">string</a>] <span class="type">intArrayType</span>;
<span class="keywd">const</span> <a class="type" href="#type">type</a>: setType <span class="keywd">is</span> <a class="type" href="#set">set</a> <span class="type">of</span> <a class="type" href="#char">char</a>;
</pre><p>
  Note that type declarations should always be made at the top level. E.g.:
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="lib">"seed7_05.s7i"</span>;

<span class="keywd">const</span> <a class="type" href="#type">type</a>: intArrayType <span class="keywd">is</span> <a class="type" href="#array">array</a> <a class="type" href="#integer">integer</a>;

<span class="keywd">const</span> <a class="type" href="#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">intArrayType</span>: arr <span class="keywd">is</span> [](1, 2);
  <span class="keywd">begin</span>
    <a class="func" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(<a class="func" href="../libraries/array.htm#length(in_arrayType)">length</a>(arr));
  <span class="keywd">end func</span>;
</pre><p>
  If the type declaration of <tt><span class="type">intArrayType</span></tt> would be inside of the <tt><span class="keywd">local</span></tt>
  declaration block you would receive a <a class="link" href="errors.htm#Parsing_errors">parsing error</a>:
</p><pre class="indent">
*** tst249.sd7(6):57: <a class="link" href="errors.htm#NO_MATCH">Match for {var intArrayType : {arr } is {[ ] {1 , 2 } } } failed</a>
    var intArrayType: arr is [](1, 2);
</pre><p>
  A <tt><span class="keywd">local</span></tt> declaration block is parsed completely before it is executed.
  This causes that <tt><span class="type">intArrayType</span></tt> is not defined during the parsing.
</p><pre class="tt">
    Values:
      <a class="type" href="#void">void</a>, <a class="type" href="#boolean">boolean</a>, <a class="type" href="#integer">integer</a>, <a class="type" href="#rational">rational</a>, <a class="type" href="#float">float</a>, <a class="type" href="#char">char</a>,
      <a class="type" href="#string">string</a>, <a class="type" href="#reference">reference</a>, <a class="type" href="#ref_list">ref_list</a>, <a class="type" href="#color">color</a>, <a class="type" href="#time">time</a>, <a class="type" href="#duration">duration</a>
      <a class="type" href="#file">file</a>, <a class="type" href="#proc">proc</a>, <a class="type" href="#type">type</a>, ...
                Every type declared with <span class="keywd">const</span> <a class="type" href="#type">type</a>: ... is a value
                The type <a class="type" href="#void">void</a> is used as empty type.
    Constants:
      <a class="type" href="#type">type</a>.<span class="var">value</span>  Default value of <a class="type" href="#type">type</a> (<a class="type" href="#void">void</a>)
    Prefix operators:
      func      Function type
                  ( <a class="type" href="#func">func</a> <a class="type" href="#char">char</a> <b>&rArr;</b> Function which returns a <a class="type" href="#char">char</a> )
      varfunc   Varfunc type
                  ( <a class="type" href="#varfunc">varfunc</a> <a class="type" href="#char">char</a> <b>&rArr;</b> Function which returns a <a class="type" href="#char">char</a> variable )
      ptr       Pointer type
                  ( <a class="type" href="#ptr">ptr</a> <a class="type" href="#set">bitset</a> <b>&rArr;</b> Pointer to <a class="type" href="#set">bitset</a> )
      array     Array type
                  ( <a class="type" href="#array">array</a> <a class="type" href="#string">string</a> <b>&rArr;</b> Array of <a class="type" href="#string">string</a>s )
      set of    Set type
                  ( <a class="type" href="#set">set</a> <span class="type">of</span> <a class="type" href="#integer">integer</a> <b>&rArr;</b> Set of <a class="type" href="#integer">integer</a> )
      subtype   Create subtype of existing type
                  ( <font color=red>subtype</font> <a class="type" href="#char">char</a> <b>&rArr;</b> Subtype of <a class="type" href="#char">char</a> )
    Infix operators:
      A <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">?</a> B <a class="op" href="../libraries/boolean.htm#(in_boolean)%3F(ref_func_aType):(ref_func_aType)">:</a> C  Ternary operator condition ? thenValue : elseValue
                  ( <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> ? a : b <b>&rArr;</b> a,
                    <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> ? a : b <b>&rArr;</b> b )
    Relations:
      =, &lt;>
    Functions:
      <a name="str(in_type)">str</a>(A)    Conversion to <a class="type" href="#string">string</a>
                  ( Type of result: <a class="type" href="#string">string</a> )
      <a name="newtype">newtype</a>   Create a new type
      <a name="gentype">gentype</a>   Generate a type
      <a name="gensub(in_type">gensub</a>(A) Generate a subtype
      typeof(A) Get the type of an expression
                  ( Type of argument A: Defined for all types,
                    typeof(1) <b>&rArr;</b> <a class="type" href="#integer">integer</a>,
                    typeof(<span class="stri">"asdf"</span>) <b>&rArr;</b> <a class="type" href="#string">string</a> )
      <a name="isFunc(in_type)">isFunc</a>(A)  Is this type a <a class="type" href="#func">func</a> type
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    isFunc(<a class="type" href="#func">func</a> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    isFunc(<a class="type" href="#varfunc">varfunc</a> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
                    isFunc(<a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a name="isVarfunc(in_type)">isVarfunc</a>(A)  Is this type a <a class="type" href="#varfunc">varfunc</a> type
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    isVarfunc(<a class="type" href="#func">func</a> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a>,
                    isVarfunc(<a class="type" href="#varfunc">varfunc</a> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a>,
                    isVarfunc(<a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#FALSE">FALSE</a> )
      <a name="resultType(in_type)">resultType</a>(A)  Get the result type of a <a class="type" href="#func">func</a> or <a class="type" href="#varfunc">varfunc</a> type
                  ( resultType(<a class="type" href="#func">func</a> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="type" href="#char">char</a>,
                    resultType(<a class="type" href="#proc">proc</a>) <b>&rArr;</b> <a class="type" href="#void">void</a>,
                    resultType(<a class="type" href="#integer">integer</a>) <b>&rArr;</b> EXCEPTION <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> )
      <a name="isDerived(in_type)">isDerived</a>(A)  Is this type derived from another type
                  ( Type of result: <a class="type" href="#boolean">boolean</a>,
                    isDerived(<font color=red>subtype</font> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="var" href="../libraries/boolean.htm#TRUE">TRUE</a> )
      <a name="meta(in_type)">meta</a>(A)       Get the type from which type A is derived
                  ( meta(<font color=red>subtype</font> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="type" href="#char">char</a> )
      base_type(A)  Get the base type of an array, pointer or
                    set type
                  ( base_type(<a class="type" href="#array">array</a> <a class="type" href="#char">char</a>) <b>&rArr;</b> <a class="type" href="#char">char</a>,
                    base_type(<a class="type" href="#ptr">ptr</a> <a class="type" href="#string">string</a>) <b>&rArr;</b> <a class="type" href="#string">string</a>,
                    base_type(<a class="type" href="#set">set</a> <span class="type">of</span> <a class="type" href="#integer">integer</a>) <b>&rArr;</b> <a class="type" href="#integer">integer</a> )
      typeNumber(A)  Get an unique number for a type
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      typeObject(A)  Get a unique object (match object) of a type
                  ( Type of result: <a class="type" href="#reference">reference</a> )
      <a name="compare(in_type,in_type)">compare</a>(A, B) Compare function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
      <a name="hashCode(in_type)">hashCode</a>(A) Hash function
                  ( Type of result: <a class="type" href="#integer">integer</a> )
    Statements:
      addInterface(A, B)  Adds the interface type B to the implementation type A
      <span class="keywd">const</span> <span class="type">aType</span>: name <span class="keywd">is</span> value
                Declare constant 'name' with 'value'
      <span class="keywd">var</span> <span class="type">aType</span>: name <span class="keywd">is</span> value
                Declare variable 'name' with 'value'
      <a class="func" href="stats.htm#Ignoring_values">ignore</a>(A) Ignore value
</pre><p></p>

<a name="object"><h3>5.40 object</h3></a>
<p>
    The type <tt><a class="type" href="#object">object</a></tt> is used as meta type for various types.
  This allows defining common operations for all this types.
  The type <tt><a class="type" href="#object">object</a></tt> is not used as element type for container
  classes since this can be done much better and type safe
  with abstract data types like <tt><a class="type" href="#array">array</a></tt>, <tt><a class="type" href="#set">set</a></tt>, <tt><a class="type" href="#hash">hash</a></tt> and
  others.
</p><pre class="tt">
    Functions:
      TRACE_OBJ(A)  Write internal information
</pre><p></p>

<a name="expr"><h3>5.41 expr</h3></a>
<p>
    The type <tt><a class="type" href="#expr">expr</a></tt> is used to describe unmatched expressions.
  These are expressions where the recognizing of the functions
  and the type check is not done yet. This is used for example
  in the definition of function bodies.
</p><pre class="tt">
    Functions:
      WRITE_EXPR(A)
                Write expr A to FILE OUT
</pre><p></p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/stats.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/params.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
