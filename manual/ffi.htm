<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Foreign function interface</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#FOREIGN_FUNCTION_INTERFACE"><big>Foreign&nbsp;funcs</big></a>
<a class="menu" href="#C_types_used_by_the_implementation">C&nbsp;types</a>
<a class="menu" href="#System_variables">System vars</a>
<a class="menu" href="#String_conversions">Conversions</a>
<a class="menu" href="#Operating_system_string_and_path_conversions">OS&nbsp;+&nbsp;Path</a>
<a class="menu" href="#Macros_to_access_the_action_parameters">Parameters</a>
<a class="menu" href="#Functions_to_create_action_results">Create&nbsp;results</a>
<a class="menu" href="#Memory_management_macros">Memory</a>
<a class="menu" href="#Basic_conversion_functions">Basic&nbsp;functions</a>
<a class="menu" href="#Error_handling">Error&nbsp;handling</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Foreign&nbsp;funcs</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/actions.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/errors.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="FOREIGN_FUNCTION_INTERFACE"><h2>16. FOREIGN FUNCTION INTERFACE</h2></a>

<p>
    Foreign functions cannot be called directly. It is necessary to
  write wrapper functions. Several things must be done to call a
  foreign function:
</p><ul>
    <li>The <a class="link" href="#C_types_used_by_the_implementation">C types used by Seed7</a> must be <a class="link" href="#String_conversions">converted to the C types</a> used
      by the foreign function (E.g.: <tt><a class="type" href="types.htm#string">string</a></tt> and <a class="link" href="os.htm#Standard_path_representation">path</a> conversions).
      The result of the foreign function and parameters, which return
      a value, must be converted back. This conversions are usually
      done in a wrapper function.</li>
    <li>A function with the <a class="link" href="actions.htm">action</a> prototype (a function with a
      <tt><a class="type" href="#listType">listType</a></tt> parameter and an <tt><a class="type" href="#objectType">objectType</a></tt> result) must be
      defined. Predefined macros help to <a class="link" href="#Macros_to_access_the_action_parameters">access the action arguments</a>
      and to <a class="link" href="#Functions_to_create_action_results">create result values</a>. The action function must be
      registered in the file <tt><span class="lib">"primitiv.c"</span></tt>.</li>
    <li>The new action must be introduced to Seed7. This is usually
      done in an <tt>*.s7i</tt> library file, which introduces an action
      definition.</li>
</ul><p>
  In general two functions are needed: A wrapper function and an
  action function. The corresponding function definitions can be
  placed in two <tt>*.c</tt> files. Corresponding <tt>*.h</tt> files contain prototypes.
  Assume, we have the library <tt><span class="lib">"superlib"</span></tt> and the function <tt><a class="func" href="#doWurx1">doWurx1</a></tt>
  from <tt><span class="lib">"superlib"</span></tt> should be called from a Seed7 program. The three
  letter abbreviation <tt><b>sup</b></tt> is used to determine the file and function
  names for wrapper and action. The following files and functions are
  used:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5">
  <tr><th>File         </th><th> Function    </th><th> Comment</th></tr>
  
  <tr><td>superlib.a   </td><td> <tt><a class="func" href="#doWurx1">doWurx1</a></tt>     </td><td> External library (the extension may vary)</td></tr>
  <tr><td>superlib.h   </td><td> <tt><a class="func" href="#doWurx1">doWurx1</a></tt>     </td><td> Prototype of the external C function</td></tr>
  <tr><td>sup_rtl.c    </td><td> <tt><a class="func" href="#supDoWurx1">supDoWurx1</a></tt>  </td><td> Wrapper function</td></tr>
  <tr><td>sup_rtl.h    </td><td> <tt><a class="func" href="#supDoWurx1">supDoWurx1</a></tt>  </td><td> Prototype of the wrapper function</td></tr>
  <tr><td>suplib.c     </td><td> <tt><a class="func" href="#sup_doWurx1">sup_doWurx1</a></tt> </td><td> Action function</td></tr>
  <tr><td>suplib.h     </td><td> <tt><a class="func" href="#sup_doWurx1">sup_doWurx1</a></tt> </td><td> Prototype of the action function</td></tr>
  <tr><td>primitiv.c   </td><td> &nbsp;           </td><td> Alphabetical list of all primitive actions</td></tr>
  <tr><td>makefile     </td><td> &nbsp;           </td><td> Makefile name depends on operating system and C compiler</td></tr>
  <tr><td>superlib.s7i </td><td> <tt>doWurx1</tt>     </td><td> Introduces the external function to a Seed7 program</td></tr>
</table></dd></dl><p>
  The C prototype of <tt><a class="func" href="#doWurx1">doWurx1</a></tt> is defined in the file <tt><span class="lib">"superlib.h"</span></tt>:
</p><pre class="indent">
<span class="type">int</span> <a name="doWurx1">doWurx1</a> (<span class="type">char</span> *name);
</pre><p>
  This function accepts an UTF-8 <tt>'name'</tt> and it returns 0 on success.
  Every other return value indicates that the string is too long. In
  this case the exception <tt><a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a></tt> should be raised. The wrapper
  function is defined in the file <tt><span class="lib">"sup_rtl.c"</span></tt> with:
</p><pre class="indent">
#<span class="keywd">include</span> <span class="lib">"version.h"</span>
#<span class="keywd">include</span> <span class="lib">"stdio.h"</span>
#<span class="keywd">include</span> <span class="lib">"superlib.h"</span>
#<span class="keywd">include</span> <span class="lib">"common.h"</span>
#<span class="keywd">include</span> <span class="lib">"striutl.h"</span>
#<span class="keywd">include</span> <span class="lib">"rtl_err.h"</span>

<span class="type">void</span> <a name="supDoWurx1">supDoWurx1</a> (<span class="keywd">const</span> <a class="type" href="#striType">striType</a> name)
  {
    <a class="type" href="#cstriType">cstriType</a> cName;
    <a class="type" href="#errInfoType">errInfoType</a> err_info = OKAY_NO_ERROR;
    <span class="type">int</span> wurxResult;

    cName = <a class="func" href="#stri_to_cstri8">stri_to_cstri8</a>(name, &err_info);
    <span class="keywd">if</span> (cName == NULL) {
      <a class="func" href="#raise_error">raise_error</a>(err_info);
    } <span class="keywd">else</span> {
      wurxResult = <a class="func" href="#doWurx1">doWurx1</a>(cName);
      <a class="func" href="#free_cstri8">free_cstri8</a>(cName, name);
      <span class="keywd">if</span> (wurxResult != 0) {
        <a class="func" href="#raise_error">raise_error</a>(<a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a>);
      }
    }
  }
</pre><p>
  The prototype of <tt><a class="func" href="#supDoWurx1">supDoWurx1</a></tt> is defined in the file <tt><span class="lib">"sup_rtl.h"</span></tt> with:
</p><pre class="indent">
<span class="type">void</span> <a class="func" href="#supDoWurx1">supDoWurx1</a> (<span class="keywd">const</span> <a class="type" href="#striType">striType</a> name);
</pre><p>
  The action function for <tt><a class="func" href="#supDoWurx1">supDoWurx1</a></tt> is defined in the file
  <tt><span class="lib">"suplib.c"</span></tt> with:
</p><pre class="indent">
#<span class="keywd">include</span> <span class="lib">"version.h"</span>
#<span class="keywd">include</span> <span class="lib">"stdio.h"</span>
#<span class="keywd">include</span> <span class="lib">"common.h"</span>
#<span class="keywd">include</span> <span class="lib">"data.h"</span>
#<span class="keywd">include</span> <span class="lib">"syvarutl.h"</span>
#<span class="keywd">include</span> <span class="lib">"objutl.h"</span>
#<span class="keywd">include</span> <span class="lib">"sup_rtl.h"</span>

<a class="type" href="#objectType">objectType</a> <a name="sup_doWurx1">sup_doWurx1</a> (<a class="type" href="#listType">listType</a> arguments)
  {
    <a class="func" href="#isit_stri">isit_stri</a>(<a class="func" href="#arg_1">arg_1</a>(arguments));
    <a class="func" href="#supDoWurx1">supDoWurx1</a>(<a class="func" href="#take_stri">take_stri</a>(<a class="func" href="#arg_1">arg_1</a>(arguments)));
    <span class="keywd">return</span> <a class="func_no_ul" href="#SYS_EMPTY_OBJECT">SYS_EMPTY_OBJECT</a>;
  }
</pre><p>
  The prototype of <tt><a class="func" href="#sup_doWurx1">sup_doWurx1</a></tt> is defined in the file <tt><span class="lib">"suplib.h"</span></tt> with:
</p><pre class="indent">
<a class="type" href="#objectType">objectType</a> <a class="func" href="#sup_doWurx1">sup_doWurx1</a> (<a class="type" href="#listType">listType</a> arguments);
</pre><p>
  The action is introduced to the interpreter, by changing the file
  <tt><span class="lib">"primitiv.c"</span></tt>. An include directive for <tt><span class="lib">"suplib.h"</span></tt> must be added:
</p><pre class="indent">
#<span class="keywd">include</span> <span class="lib">"strlib.h"</span>
<b>#<span class="keywd">include</span> <span class="lib">"suplib.h"</span></b>
#<span class="keywd">include</span> <span class="lib">"timlib.h"</span>
</pre><p>
  The file <tt><span class="lib">"primitiv.c"</span></tt> contains a list of alphabetically sorted primitive
  actions. Each action entry takes a line. It is important to add the new
  action <tt><span class="stri">"SUP_DO_WURX"</span></tt> at the correct place:
</p><pre class="indent">
{ <span class="stri">"STR_VALUE"</span>,               <span class="func">str_value</span>,               },

<b>{ <span class="stri">"SUP_DO_WURX"</span>,             <a class="func" href="#sup_doWurx1">sup_doWurx1</a>,             },</b>

{ <span class="stri">"TIM_AWAIT"</span>,               <span class="func">tim_await</span>,               },
</pre><p>
  The new files must be added to the makefile. Depending on C compiler and
  operating system Seed7 uses several makefiles. In the correct <tt>"makefile"</tt>
  <tt>suplib</tt> and <tt>sup_rtl</tt> must be added to lists of source
  and object files. Adding the <tt>suplib</tt> object file results in:
</p><pre class="indent">
LOBJ = actlib.o arrlib.o biglib.o blnlib.o bstlib.o chrlib.o cmdlib.o conlib.o dcllib.o drwlib.o \
       enulib.o fillib.o fltlib.o hshlib.o intlib.o itflib.o kbdlib.o lstlib.o pollib.o prclib.o \
       prglib.o reflib.o rfllib.o sctlib.o setlib.o soclib.o strlib.o <b>suplib.o</b> timlib.o typlib.o ut8lib.o
</pre><p>
  Adding the <tt>"suplib"</tt> source file results in:
</p><pre class="indent">
LSRC = actlib.c arrlib.c biglib.c blnlib.c bstlib.c chrlib.c cmdlib.c conlib.c dcllib.c drwlib.c \
       enulib.c fillib.c fltlib.c hshlib.c intlib.c itflib.c kbdlib.c lstlib.c pollib.c prclib.c \
       prglib.c reflib.c rfllib.c sctlib.c setlib.c soclib.c strlib.c <b>suplib.c</b> timlib.c typlib.c ut8lib.c
</pre><p>
  and object files. Adding the <tt>sup_rtl</tt> object file results in:
</p><pre class="indent">
ROBJ = arr_rtl.o bln_rtl.o bst_rtl.o chr_rtl.o cmd_rtl.o con_rtl.o dir_rtl.o drw_rtl.o fil_rtl.o \
       flt_rtl.o hsh_rtl.o int_rtl.o set_rtl.o soc_rtl.o str_rtl.o <b>sup_rtl.o</b> tim_rtl.o ut8_rtl.o \
       heaputl.o striutl.o
</pre><p>
  Adding the <tt>"sup_rtl"</tt> source file results in:
</p><pre class="indent">
RSRC = arr_rtl.c bln_rtl.c bst_rtl.c chr_rtl.c cmd_rtl.c con_rtl.c dir_rtl.c drw_rtl.c fil_rtl.c \
       flt_rtl.c hsh_rtl.c int_rtl.c set_rtl.c soc_rtl.c str_rtl.c <b>sup_rtl.c</b> tim_rtl.c ut8_rtl.c \
       heaputl.c striutl.c
</pre><p>
  The external library <tt>"superlib"</tt> itself is added with:
</p><pre class="indent">
SYSTEM_LIBS = -lm <b>superlib.a</b>
</pre><p>
  The interpreter must be compiled, so the changes can take effect.
  To actually call the new function it must be introduced in a Seed7
  library. This is done with the library <tt><span class="lib">"super.s7i"</span></tt>:
</p><pre class="indent">
<span class="keywd">const</span> <a class="type" href="types.htm#proc">proc</a>: doWurx1 (<span class="keywd">in</span> <a class="type" href="types.htm#string">string</a>: name) <span class="keywd">is</span> <span class="keywd">action</span> <span class="stri">"SUP_DO_WURX"</span>;
</pre><p></p>

<a name="C_types_used_by_the_implementation"><h3>16.1 C types used by the implementation</h3></a>
<p>
  Several Seed7 types correspond to simple C types, which are
  defined in <tt><span class="lib">"common.h"</span></tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>       <th>C type</th>     <th>Comment</th></tr>
    <tr><td><tt><a class="type" href="types.htm#boolean">boolean</a></tt></td>          <td><a name="boolType">boolType</a></td>   <td>_Bool, bool or int</td></tr>
    <tr><td><tt><a class="type" href="types.htm#integer">integer</a></tt></td>          <td><a name="intType">intType</a></td>    <td>64-bit signed int</td></tr>
    <tr><td><tt><a class="type" href="types.htm#float">float</a></tt></td>            <td><a name="floatType">floatType</a></td>  <td>64-bit double</td></tr>
    <tr><td><tt><a class="type" href="types.htm#char">char</a></tt></td>             <td><a name="charType">charType</a></td>   <td>32-bit unsigned int</td></tr>
    <tr><td><tt><span class="type">clib_file</span></tt></td>        <td><a name="fileType">fileType</a></td>   <td>FILE *</td></tr>
    <tr><td><tt><span class="type">PRIMITIVE_SOCKET</span></tt></td> <td><a name="socketType">socketType</a></td> <td>int or unsigned int</td></tr>
</table><p>
  Other Seed7 types correspond to C pointers, which point to a struct.
  Some of this structs are used in all situations: In the interpreter
  and in the compiler and under different operation systems and with
  different runtime libraries. This invariant structs are defined
  in <tt><span class="lib">"common.h"</span></tt> and in <tt><span class="lib">"data.h"</span></tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>   <th>C type</th>      <th>C struct</th>             <th>Comment</th></tr>
    <tr><td><tt><a class="type" href="types.htm#string">string</a></tt></td>       <td><a name="striType">striType</a></td>    <td>struct striStruct</td>    <td>UTF-32 encoded, can contain null chars</td></tr>
    <tr><td><tt><a class="type" href="types.htm#set">set</a></tt></td>          <td><a name="setType">setType</a></td>     <td>struct setStruct</td>     <td>&nbsp;</td></tr>
    <tr><td><tt><span class="type">bstring</span></tt></td>      <td><a name="bstriType">bstriType</a></td>   <td>struct bstriStruct</td>   <td>Byte sequence, can contain null bytes</td></tr>
    <tr><td><tt><a class="type" href="types.htm#reference">reference</a></tt></td>    <td><a name="objectType">objectType</a></td>  <td>struct objectStruct</td>  <td>Interpreter type for Seed7 objects</td></tr>
    <tr><td><tt><a class="type" href="types.htm#ref_list">ref_list</a></tt></td>     <td><a name="listType">listType</a></td>    <td>struct listStruct</td>    <td>Interpreter type for Seed7 object lists</td></tr>
</table><p>
  Other Seed7 types also correspond to struct pointers, but the structs
  are different in interpreted and compiled Seed7 programs. The structs
  for interpreted programs are defined in <tt><span class="lib">"data.h"</span></tt> and the structs for
  compiled programs are defined in <tt><span class="lib">"data_rtl.h"</span></tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>  <th>C type (interpreted)</th>  <th>C struct (interpreted)</th>  <th>C type (compiled)</th>  <th>C struct (compiled)</th></tr>
    <tr><td><tt><a class="type" href="types.htm#array">array</a></tt></td>       <td><a name="arrayType">arrayType</a></td>             <td>struct arrayStruct</td>      <td>rtlArrayType</td>       <td>struct rtlArrayStruct</td></tr>
    <tr><td><tt><a class="type" href="types.htm#hash">hash</a></tt></td>        <td><a name="hashType">hashType</a></td>              <td>struct hashStruct</td>       <td>rtlHashType</td>        <td>struct rtlHashStruct</td></tr>
    <tr><td><tt><a class="type" href="types.htm#struct">struct</a></tt></td>      <td><a name="structType">structType</a></td>            <td>struct structStruct</td>     <td>rtlStructType</td>      <td>struct rtlStructStruct</td></tr>
</table><p>
  Because interpreter and compiler use different structs the
  functions from e.g. <tt><span class="lib">"arrlib.c"</span></tt> cannot use functions
  from <tt><span class="lib">"arr_rtl.c"</span></tt>.
</p><p>
  Some Seed7 types depend on the operating system or runtime
  library used:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Seed7 type</th>       <th>C type</th>       <th>Defined as</th>                        <th>Sourcefile</th>  <th>Comment</th></tr>
    <tr><td rowspan="2"><tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt></td>       <td><a name="bigIntType">bigIntType</a></td>   <td>struct bigIntStruct *</td>             <td>big_rtl.c</td>   <td>The built-in bigInteger library</td></tr>
    <tr><td>bigIntType</td>   <td>mpz_ptr</td>                           <td>big_gmp.c</td>   <td>The GNU Multiple Precision Arithmetic Library</td></tr>
    <tr><td rowspan="2"><tt><a class="type" href="../libraries/poll.htm#pollData">pollData</a></tt></td>         <td><a name="pollType">pollType</a></td>     <td>struct select_based_pollStruct *</td>  <td>pol_sel.c</td>   <td>Functions cast it to implementation dependent struct</td></tr>
    <tr><td>pollType</td>     <td>struct poll_based_pollStruct *</td>    <td>pol_unx.c</td>   <td>Functions cast it to implementation dependent struct</td></tr>
    <tr><td rowspan="3"><tt><span class="type">PRIMITIVE_WINDOW</span></tt></td> <td><a name="PRIMITIVE_WINDOW"></a><a name="winType">winType</a></td>      <td>x11_winRecord *</td>                   <td>drw_x11.c</td>   <td>Functions cast from struct winStruct * to x11_winRecord *</td></tr>
    <tr><td>winType</td>      <td>win_winRecord *</td>                   <td>drw_win.c</td>   <td>Functions cast from struct winStruct * to win_winRecord *</td></tr>
    <tr><td>winType</td>      <td>emc_winRecord *</td>                   <td>drw_emc.c</td>   <td>Functions cast from struct winStruct * to emc_winRecord *</td></tr>
    <tr><td rowspan="7"><tt><a class="type" href="../libraries/sql_base.htm#database">database</a></tt></td>         <td><a name="databaseType">databaseType</a></td> <td>dbType</td>                            <td>sql_cli.c</td>   <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td>databaseType</td> <td>dbType</td>                            <td>sql_fire.c</td>  <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td>databaseType</td> <td>dbType</td>                            <td>sql_lite.c</td>  <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td>databaseType</td> <td>dbType</td>                            <td>sql_my.c</td>    <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td>databaseType</td> <td>dbType</td>                            <td>sql_oci.c</td>   <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td>databaseType</td> <td>dbType</td>                            <td>sql_post.c</td>  <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td>databaseType</td> <td>dbType</td>                            <td>sql_tds.c</td>   <td>Functions cast from databaseType to dbType</td></tr>
    <tr><td rowspan="7"><tt><a class="type" href="../libraries/sql_base.htm#sqlStatement">sqlStatement</a></tt></td>     <td><a name="sqlStmtType">sqlStmtType</a></td>  <td>preparedStmtType</td>                  <td>sql_cli.c</td>   <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
    <tr><td>sqlStmtType</td>  <td>preparedStmtType</td>                  <td>sql_fire.c</td>  <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
    <tr><td>sqlStmtType</td>  <td>preparedStmtType</td>                  <td>sql_lite.c</td>  <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
    <tr><td>sqlStmtType</td>  <td>preparedStmtType</td>                  <td>sql_my.c</td>    <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
    <tr><td>sqlStmtType</td>  <td>preparedStmtType</td>                  <td>sql_oci.c</td>   <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
    <tr><td>sqlStmtType</td>  <td>preparedStmtType</td>                  <td>sql_post.c</td>  <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
    <tr><td>sqlStmtType</td>  <td>preparedStmtType</td>                  <td>sql_tds.c</td>   <td>Functions cast from sqlStmtType to preparedStmtType</td></tr>
</table><p>
  There are also C types without corresponding Seed7 type. They are
  defined in <tt><span class="lib">"common.h"</span></tt>:
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>C type</th>        <th>C definition</th>        <th>Comment</th></tr>
    <tr><td><tt><a class="type" name="int16Type">int16Type</a></tt></td>     <td>short int</td>           <td>It is assumed that sizeof(short int) == 2</td></tr>
    <tr><td><tt><a class="type" name="uint16Type">uint16Type</a></tt></td>    <td>unsigned short int</td>  <td>Unsigned integer type with the size of <tt><a class="type" href="#int16Type">int16Type</a></tt></td></tr>
    <tr><td rowspan="2"><tt><a class="type" name="int32Type">int32Type</a></tt></td>     <td>int</td>                 <td>If sizeof(int) == 4</td></tr>
    <tr><td>long</td>                <td>If sizeof(long) == 4</td></tr>
    <tr><td><tt><a class="type" name="uint32Type">uint32Type</a></tt></td>    <td>unsigned int32Type</td>  <td>Unsigned integer type with the size of <tt><a class="type" href="#int32Type">int32Type</a></tt></td></tr>
    <tr><td rowspan="3"><tt><a class="type" name="int64Type">int64Type</a></tt></td>     <td>long</td>                <td>If sizeof(long) == 8</td></tr>
    <tr><td>long long</td>           <td>If sizeof(long long) == 8</td></tr>
    <tr><td>__int64</td>             <td>If sizeof(__int64) == 8</td></tr>
    <tr><td><tt><a class="type" name="uint64Type">uint64Type</a></tt></td>    <td>unsigned int64Type</td>  <td>Unsigned integer type with the size of <tt><a class="type" href="#int64Type">int64Type</a></tt></td></tr>
    <tr><td rowspan="2"><tt><a class="type" name="int128Type">int128Type</a></tt></td>    <td>__int128</td>            <td>If sizeof(__int128) == 16</td></tr>
    <tr><td>__int128_t</td>          <td>If sizeof(__int128_t) == 16</td></tr>
    <tr><td rowspan="2"><tt><a class="type" name="uint128Type">uint128Type</a></tt></td>   <td>unsigned __int128</td>   <td>If sizeof(unsigned __int128) == 16</td></tr>
    <tr><td>__uint128_t</td>         <td>If sizeof(__uint128_t) == 16</td></tr>
    <tr><td><tt><a class="type" name="uintType">uintType</a></tt></td>      <td>unsigned intType</td>    <td>Unsigned integer type with the size of <tt><a class="type" href="#intType">intType</a></tt></td></tr>
    <tr><td><tt><a class="type" name="cstriType">cstriType</a></tt></td>     <td>char *</td>              <td>String type of the C compiler</td></tr>
    <tr><td><tt><a class="type" name="ustriType">ustriType</a></tt></td>     <td>unsigned char *</td>     <td>Helpful for unsigned comparisons</td></tr>
    <tr><td><tt><a class="type" name="utf16striType">utf16striType</a></tt></td> <td>uint16Type *</td>        <td>UTF-16 string</td></tr>
    <tr><td><tt><a class="type" name="utf32striType">utf32striType</a></tt></td> <td>uint32Type *</td>        <td>UTF-32 string</td></tr>
    <tr><td><tt><a class="type" name="strElemType">strElemType</a></tt></td>   <td>charType</td>            <td>UTF-32 character element of <tt><a class="type" href="#striType">string</a></tt>.</td></tr></tt></td>
    <tr><td rowspan="2"><tt><a class="type" name="os_striType">os_striType</a></tt></td>   <td>char *</td>              <td>If the OS uses UTF-8 chars</td></tr>
    <tr><td>wchar_t *</td>           <td>If the OS uses UTF-16 chars</td></tr>
    <tr><td rowspan="2"><tt><a class="type" name="memSizeType">memSizeType</a></tt></td>   <td>uint32Type</td>          <td>If C uses 32-bit pointers</td></tr>
    <tr><td>uint64Type</td>          <td>If C uses 64-bit pointers</td></tr>
    <tr><td><tt><a class="type" name="errInfoType">errInfoType</a></tt></td>   <td>int</td>                 <td>Represents predefined Exceptions</td></tr>
</table><p></p>

<a name="System_variables"><h3>16.2 System variables</h3></a>
<p>
  The interpreter uses several system variables which are initialized
  from <a class="link" href="decls.htm#System_declarations">system declarations.
</p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th><a class="link" href="decls.htm#System_declarations">System declaration</a></th>  <th>Seed7 name</th>      <th>C <a class="type_no_ul" href="#objectType">objectType</a> macro</th>         <th><a class="type_no_ul" href="#objectType">objectType</a> macro with argument</th></tr>
    <tr><td><tt><a class="link" href="decls.htm#empty"         >"empty"</a></tt></td>             <td><tt><a class="var_no_ul" href="types.htm#empty"               >empty</a></tt></td>           <td><tt><a name="SYS_EMPTY_OBJECT"         >SYS_EMPTY_OBJECT</a></tt></td>           <td><tt>EMPTY_OBJECT(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#memory_error"  >"memory_error"</a></tt></td>      <td><tt><a class="exception" href="errors.htm#MEMORY_ERROR"       >MEMORY_ERROR</a></tt></td>    <td><tt><a name="SYS_MEM_EXCEPTION"        >SYS_MEM_EXCEPTION</a></tt></td>          <td><tt>MEM_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#numeric_error" >"numeric_error"</a></tt></td>     <td><tt><a class="exception" href="errors.htm#NUMERIC_ERROR"      >NUMERIC_ERROR</a></tt></td>   <td><tt><a name="SYS_NUM_EXCEPTION"        >SYS_NUM_EXCEPTION</a></tt></td>          <td><tt>NUM_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#overflow_error">"overflow_error"</a></tt></td>    <td><tt><a class="exception" href="errors.htm#OVERFLOW_ERROR"     >OVERFLOW_ERROR</a></tt></td>  <td><tt><a name="SYS_OVF_EXCEPTION"        >SYS_OVF_EXCEPTION</a></tt></td>          <td><tt>OVF_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#range_error"   >"range_error"</a></tt></td>       <td><tt><a class="exception" href="errors.htm#RANGE_ERROR"        >RANGE_ERROR</a></tt></td>     <td><tt><a name="SYS_RNG_EXCEPTION"        >SYS_RNG_EXCEPTION</a></tt></td>          <td><tt>RNG_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#index_error"   >"index_error"</a></tt></td>       <td><tt><a class="exception" href="errors.htm#INDEX_ERROR"        >INDEX_ERROR</a></tt></td>     <td><tt><a name="SYS_IDX_EXCEPTION"        >SYS_IDX_EXCEPTION</a></tt></td>          <td><tt>IDX_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#file_error"    >"file_error"</a></tt></td>        <td><tt><a class="exception" href="errors.htm#FILE_ERROR"         >FILE_ERROR</a></tt></td>      <td><tt><a name="SYS_FIL_EXCEPTION"        >SYS_FIL_EXCEPTION</a></tt></td>          <td><tt>FIL_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#database_error">"database_error"</a></tt></td>    <td><tt><a class="exception" href="errors.htm#DATABASE_ERROR"     >DATABASE_ERROR</a></tt></td>  <td><tt><a name="SYS_DB_EXCEPTION"         >SYS_DB_EXCEPTION</a></tt></td>           <td><tt>DB_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#graphic_error" >"graphic_error"</a></tt></td>     <td><tt><a class="exception" href="errors.htm#GRAPHIC_ERROR"      >GRAPHIC_ERROR</a></tt></td>   <td><tt><a name="SYS_GRAPHIC_EXCEPTION"    >SYS_GRAPHIC_EXCEPTION</a></tt></td>      <td><tt>GRAPHIC_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#illegal_action">"illegal_action"</a></tt></td>    <td><tt><a class="exception" href="errors.htm#ILLEGAL_ACTION"     >ILLEGAL_ACTION</a></tt></td>  <td><tt><a name="SYS_ACT_ILLEGAL_EXCEPTION">SYS_ACT_ILLEGAL_EXCEPTION</a></tt></td>  <td><tt>ACT_ILLEGAL_EXCEPTION(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#false"         >"false"</a></tt></td>             <td><tt><a class="var_no_ul" href="../libraries/boolean.htm#FALSE">FALSE</a></tt></td>           <td><tt><a name="SYS_FALSE_OBJECT"         >SYS_FALSE_OBJECT</a></tt></td>           <td><tt>FALSE_OBJECT(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#true"          >"true"</a></tt></td>              <td><tt><a class="var_no_ul" href="../libraries/boolean.htm#TRUE" >TRUE</a></tt></td>            <td><tt><a name="SYS_TRUE_OBJECT"          >SYS_TRUE_OBJECT</a></tt></td>            <td><tt>TRUE_OBJECT(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#expr"          >"expr"</a></tt></td>              <td><tt><a class="type" href="types.htm#expr"                     >expr</a></tt></td>            <td><tt><a name="SYS_EXPR_TYPE"            >SYS_EXPR_TYPE</a></tt></td>              <td><tt>EXPR_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#f_param"       >"f_param"</a></tt></td>           <td><tt><span class="type"                                        >f_param</a></tt></td>         <td><tt><a name="SYS_F_PARAM_TYPE"         >SYS_F_PARAM_TYPE</a></tt></td>           <td><tt>F_PARAM_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#integer"       >"integer"</a></tt></td>           <td><tt><a class="type" href="types.htm#integer"                  >integer</a></tt></td>         <td><tt><a name="SYS_INT_TYPE"             >SYS_INT_TYPE</a></tt></td>               <td><tt>INT_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#bigInteger"    >"bigInteger"</a></tt></td>        <td><tt><a class="type" href="types.htm#bigInteger"               >bigInteger</a></tt></td>      <td><tt><a name="SYS_BIGINT_TYPE"          >SYS_BIGINT_TYPE</a></tt></td>            <td><tt>BIGINT_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#char"          >"char"</a></tt></td>              <td><tt><a class="type" href="types.htm#char"                     >char</a></tt></td>            <td><tt><a name="SYS_CHAR_TYPE"            >SYS_CHAR_TYPE</a></tt></td>              <td><tt>CHAR_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#string"        >"string"</a></tt></td>            <td><tt><a class="type" href="types.htm#string"                   >string</a></tt></td>          <td><tt><a name="SYS_STRI_TYPE"            >SYS_STRI_TYPE</a></tt></td>              <td><tt>STRI_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#proc"          >"proc"</a></tt></td>              <td><tt><a class="type" href="types.htm#proc"                     >proc</a></tt></td>            <td><tt><a name="SYS_PROC_TYPE"            >SYS_PROC_TYPE</a></tt></td>              <td><tt>PROC_TYPE(prog)</tt></td></tr>
    <tr><td><tt><a class="link" href="decls.htm#float"         >"float"</a></tt></td>             <td><tt><a class="type" href="types.htm#float"                    >float</a></tt></td>           <td><tt><a name="SYS_FLT_TYPE"             >SYS_FLT_TYPE</a></tt></td>               <td><tt>FLT_TYPE(prog)</tt></td></tr>
</table><p></p>

<a name="String_conversions"><h3>16.3 String conversions</h3></a>
<p>
  Seed7 strings are UTF-32 encoded and C strings are zero terminated
  byte sequences. C uses also byte sequences with a length. The byte
  sequences can be encoded with ISO-8859-1 or UTF-8. To convert between
  the different representations, <tt><span class="lib">"striutl.h"</span></tt> defines conversion functions
  between the types <tt><a class="type" href="#striType">striType</a></tt>, <tt><a class="type" href="#cstriType">cstriType</a></tt>, <tt><a class="type" href="#bstriType">bstriType</a></tt>, <tt><a class="type" href="#utf16striType">utf16striType</a></tt>
  and <tt><a class="type" href="#utf32striType">utf32striType</a></tt>. The types <tt><a class="type" href="#utf16striType">utf16striType</a></tt> and <tt><a class="type" href="#utf32striType">utf32striType</a></tt> are
  independent of the size of <tt><span class="type">wchar_t</span></tt>. Strings with <tt><a class="type" href="#utf16striType">utf16striType</a></tt> and
  <tt><a class="type" href="#utf32striType">utf32striType</a></tt> can be zero terminated or a buffer with a length, that
  is specified with a parameter.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Function Summary</td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#cstriType">cstriType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_cstri">stri_to_cstri</a></b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Create an ISO-8859-1 encoded C string from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#cstriType">cstriType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_cstri8">stri_to_cstri8</a></b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Create an UTF-8 encoded C string from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#cstriType">cstriType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_cstri8_buf">stri_to_cstri8_buf</a></b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#memSizeType">memSizeType</a> *length)</td></tr>
      <tr><td width="30"></td><td>Create an UTF-8 encoded C string buffer from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#bstriType">bstriType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_bstri">stri_to_bstri</a></b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Create an ISO-8859-1 encoded bstring from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#bstriType">bstriType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_bstri8">stri_to_bstri8</a></b> (<a class="type" href="#striType">const_striType</a> stri)</td></tr>
      <tr><td width="30"></td><td>Create an UTF-8 encoded bstring from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#utf16striType">utf16striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_wstri16">stri_to_wstri16</a></b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#memSizeType">memSizeType</a> *length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Create an UTF-16 encoded wide string buffer from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#utf32striType">utf32striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_wstri32">stri_to_wstri32</a></b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#memSizeType">memSizeType</a> *length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Create an UTF-32 encoded wide string buffer from a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cstri_to_stri">cstri_to_stri</a></b> (<a class="type" href="#cstriType">const_cstriType</a> cstri)</td></tr>
      <tr><td width="30"></td><td>Copy an ISO-8859-1 (Latin-1) encoded C string to a Seed7 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cstri_buf_to_stri">cstri_buf_to_stri</a></b> (<a class="type" href="#cstriType">const_cstriType</a> cstri, <a class="type" href="#memSizeType">memSizeType</a> length)</td></tr>
      <tr><td width="30"></td><td>Copy an ISO-8859-1 (Latin-1) encoded C string buffer to a Seed7 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cstri8_to_stri">cstri8_to_stri</a></b> (<a class="type" href="#cstriType">const_cstriType</a> cstri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Copy an UTF-8 encoded C string to a Seed7 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cstri8_buf_to_stri">cstri8_buf_to_stri</a></b> (<a class="type" href="#cstriType">const_cstriType</a> cstri, <a class="type" href="#memSizeType">memSizeType</a> length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Copy an UTF-8 encoded C string buffer to a Seed7 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cstri8_or_cstri_to_stri">cstri8_or_cstri_to_stri</a></b> (<a class="type" href="#cstriType">const_cstriType</a> cstri)</td></tr>
      <tr><td width="30"></td><td>Copy an UTF-8 or ISO-8859-1 encoded C string to a Seed7 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#wstri16_to_stri">wstri16_to_stri</a></b> (<a class="type" href="#utf16striType">const_utf16striType</a> wstri, <a class="type" href="#memSizeType">memSizeType</a> length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Copy an UTF-16 encoded wide string buffer to a Seed7 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#wstri32_to_stri">wstri32_to_stri</a></b> (<a class="type" href="#utf32striType">const_utf32striType</a> wstri, <a class="type" href="#memSizeType">memSizeType</a> length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Copy an UTF-32 encoded wide string buffer to a Seed7 string.</td></tr></table></td></tr>
</table></div><br /><div><p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
  Function Detail</td></tr></table></p>

  <div><a name="stri_to_cstri"><h3>stri_to_cstri</h3></a>
<p>
    <a class="type" href="#cstriType">cstriType</a> <b>stri_to_cstri</b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Create an ISO-8859-1 encoded C string from a Seed7 UTF-32 string.
      The memory for the zero byte terminated C string is allocated.
      The C string result must be freed with the macro <a class="func" href="#free_cstri">free_cstri</a>().
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if stri contains a null character
                          or a character that is higher than the
                          highest allowed ISO-8859-1 character (255).</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an ISO-8859-1 encoded null terminated C string, or
        NULL if the memory allocation failed or the
        conversion failed (the error is indicated by err_info).</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_cstri8"><h3>stri_to_cstri8</h3></a>
<p>
    <a class="type" href="#cstriType">cstriType</a> <b>stri_to_cstri8</b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Create an UTF-8 encoded C string from a Seed7 UTF-32 string.
      The memory for the zero byte terminated C string is allocated.
      The C string result must be freed with the macro <a class="func" href="#free_cstri8">free_cstri8</a>().
      This function is intended to create temporary strings, that
      are used as parameters. To get good performance the allocated
      memory for the C string is oversized.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if stri contains a null character
                          or a character that is higher than the
                          highest allowed Unicode character (U+10FFFF).</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-8 encoded null terminated C string, or
        NULL if the memory allocation failed or the
        conversion failed (the error is indicated by err_info).</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_cstri8_buf"><h3>stri_to_cstri8_buf</h3></a>
<p>
    <a class="type" href="#cstriType">cstriType</a> <b>stri_to_cstri8_buf</b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#memSizeType">memSizeType</a> *length)</p><dl><dd>
<p>
      Create an UTF-8 encoded C string buffer from a Seed7 UTF-32 string.
      The memory for the zero byte terminated C string is allocated.
      Zero bytes inside the string are copied to the C string.
      The C string result must be freed with the macro <a class="func" href="#free_cstri8">free_cstri8</a>().
      This function is intended to create temporary strings, that
      are used as parameters. To get good performance the allocated
      memory for the C string is oversized.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>length</tt> - Place to return the length of the result (without '\0').</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-8 encoded null terminated C string, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_bstri"><h3>stri_to_bstri</h3></a>
<p>
    <a class="type" href="#bstriType">bstriType</a> <b>stri_to_bstri</b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Create an ISO-8859-1 encoded bstring from a Seed7 UTF-32 string.
      The memory for the bstring is allocated. No zero byte is added
      to the end of the bstring. No special action is done, if the
      UTF-32 string contains a null character.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if stri contains a character
                          that is higher than the highest
                          allowed ISO-8859-1 character (255).</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an ISO-8859-1 encoded bstring, or
        NULL if the memory allocation failed or the
        conversion failed (the error is indicated by err_info).</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_bstri8"><h3>stri_to_bstri8</h3></a>
<p>
    <a class="type" href="#bstriType">bstriType</a> <b>stri_to_bstri8</b> (<a class="type" href="#striType">const_striType</a> stri)</p><dl><dd>
<p>
      Create an UTF-8 encoded bstring from a Seed7 UTF-32 string.
      The memory for the bstring is allocated. No zero byte is added
      to the end of the bstring. No special action is done, if
      the original string contains a null character.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-8 encoded bstring, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_wstri16"><h3>stri_to_wstri16</h3></a>
<p>
    <a class="type" href="#utf16striType">utf16striType</a> <b>stri_to_wstri16</b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#memSizeType">memSizeType</a> *length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Create an UTF-16 encoded wide string buffer from a Seed7 UTF-32 string.
      The memory for the zero byte terminated wide string is allocated.
      This function is intended to create temporary strings, that
      are used as parameters. To get good performance the allocated
      memory for the wide string is oversized.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>length</tt> - Place to return the character length of the result (without '\0').</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if stri contains a character
                          that is higher than the highest
                          allowed Unicode character (U+10FFFF).</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-16 encoded null terminated wide string, or
        NULL if the memory allocation failed or the
        conversion failed (the error is indicated by err_info).</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_wstri32"><h3>stri_to_wstri32</h3></a>
<p>
    <a class="type" href="#utf32striType">utf32striType</a> <b>stri_to_wstri32</b> (<span class="keywd">const</span> <a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#memSizeType">memSizeType</a> *length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Create an UTF-32 encoded wide string buffer from a Seed7 UTF-32 string.
      The memory for the zero byte terminated wide string is allocated.
      This function is intended to create temporary strings, that
      are used as parameters. To get good performance the allocated
      memory for the wide string is oversized.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>length</tt> - Place to return the character length of the result (without '\0').</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if stri contains a character
                          that is higher than the highest
                          allowed Unicode character (U+10FFFF).</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded null terminated wide string, or
        NULL if the memory allocation failed or the
        conversion failed (the error is indicated by err_info).</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cstri_to_stri"><h3>cstri_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>cstri_to_stri</b> (<a class="type" href="#cstriType">const_cstriType</a> cstri)</p><dl><dd>
<p>
      Copy an ISO-8859-1 (Latin-1) encoded C string to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - Null terminated ISO-8859-1 encoded C string.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cstri_buf_to_stri"><h3>cstri_buf_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>cstri_buf_to_stri</b> (<a class="type" href="#cstriType">const_cstriType</a> cstri, <a class="type" href="#memSizeType">memSizeType</a> length)</p><dl><dd>
<p>
      Copy an ISO-8859-1 (Latin-1) encoded C string buffer to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - ISO-8859-1 encoded C string buffer (not null terminated).</dd>
        <dd><tt>length</tt> - Byte length of the ISO-8859-1 encoded C string buffer.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cstri8_to_stri"><h3>cstri8_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>cstri8_to_stri</b> (<a class="type" href="#cstriType">const_cstriType</a> cstri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Copy an UTF-8 encoded C string to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - Null terminated UTF-8 encoded C string.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if the conversion failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed or
        invalid UTF-8 encodings are used.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cstri8_buf_to_stri"><h3>cstri8_buf_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>cstri8_buf_to_stri</b> (<a class="type" href="#cstriType">const_cstriType</a> cstri, <a class="type" href="#memSizeType">memSizeType</a> length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Copy an UTF-8 encoded C string buffer to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - UTF-8 encoded C string buffer (not null terminated).</dd>
        <dd><tt>length</tt> - Byte length of the UTF-8 encoded C string buffer.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if the conversion failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed or
        invalid UTF-8 encodings are used.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cstri8_or_cstri_to_stri"><h3>cstri8_or_cstri_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>cstri8_or_cstri_to_stri</b> (<a class="type" href="#cstriType">const_cstriType</a> cstri)</p><dl><dd>
<p>
      Copy an UTF-8 or ISO-8859-1 encoded C string to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - Null terminated UTF-8 or ISO-8859-1 encoded C string.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="wstri16_to_stri"><h3>wstri16_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>wstri16_to_stri</b> (<a class="type" href="#utf16striType">const_utf16striType</a> wstri, <a class="type" href="#memSizeType">memSizeType</a> length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Copy an UTF-16 encoded wide string buffer to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>wstri</tt> - UTF-16 encoded wide string buffer (not null terminated).</dd>
        <dd><tt>length</tt> - Character length of the UTF-16 encoded wide string buffer.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="wstri32_to_stri"><h3>wstri32_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>wstri32_to_stri</b> (<a class="type" href="#utf32striType">const_utf32striType</a> wstri, <a class="type" href="#memSizeType">memSizeType</a> length,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Copy an UTF-32 encoded wide string buffer to a Seed7 string.
      The memory for the UTF-32 encoded Seed7 string is allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>wstri</tt> - UTF-32 encoded wide string buffer (not null terminated).</dd>
        <dd><tt>length</tt> - Character length of the UTF-32 encoded wide string buffer.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 string, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div></div>

<a name="Operating_system_string_and_path_conversions"><h3>16.4 Operating system string and path conversions</h3></a>
<p>
  Operating systems disagree in their Unicode encoding (UTF-8 or UTF-16).
  To cope with this, <tt><span class="lib">"striutl.h"</span></tt> defines the type <tt><a class="type" href="#os_striType">os_striType</a></tt> and
  functions to convert to and from <tt><a class="type" href="#os_striType">os_striType</a></tt>. The different concepts
  to represent a file path (path delimiter and drive letter) are handled
  with <tt><a class="func" href="#cp_to_os_path">cp_to_os_path</a></tt> and <tt><a class="func" href="#cp_from_os_path">cp_from_os_path</a></tt>.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Function Summary</td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#conv_from_os_stri">conv_from_os_stri</a></b> (<span class="keywd">const</span> <a class="type" href="#os_striType">const_os_striType</a> os_stri, <a class="type" href="#memSizeType">memSizeType</a> length)</td></tr>
      <tr><td width="30"></td><td>Convert an os_striType string with length to a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#os_striType">os_striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_os_stri">stri_to_os_stri</a></b> (<a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Convert a Seed7 UTF-32 string to a null terminated os_striType string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#os_stri_to_stri">os_stri_to_stri</a></b> (<a class="type" href="#os_striType">const_os_striType</a> os_stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Convert a null terminated os_striType string to a Seed7 UTF-32 string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#os_striType">os_striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cp_to_os_path">cp_to_os_path</a></b> (<a class="type" href="#striType">const_striType</a> std_path, <span class="type">int</span> *path_info,
        <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Convert a Seed7 standard path to a path used by system calls.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#cp_from_os_path">cp_from_os_path</a></b> (<a class="type" href="#os_striType">const_os_striType</a> os_path, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</td></tr>
      <tr><td width="30"></td><td>Convert a path returned by a system call to a Seed7 standard path.</td></tr></table></td></tr>
</table></div><br /><div><p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
  Function Detail</td></tr></table></p>

  <div><a name="conv_from_os_stri"><h3>conv_from_os_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>conv_from_os_stri</b> (<span class="keywd">const</span> <a class="type" href="#os_striType">const_os_striType</a> os_stri,
        <a class="type" href="#memSizeType">memSizeType</a> length)</p><dl><dd>
<p>
      Convert an os_striType string with length to a Seed7 UTF-32 string.
      Many system calls return os_striType data with length. System calls
      are defined in "version.h" and "os_decls.h". They are prefixed
      with os_ and use strings of the type os_striType. Depending on the
      operating system os_striType can describe byte or wide char strings.
      The encoding can be Latin-1, UTF-8, UTF-16 or it can use a code page.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>os_stri</tt> - Possibly binary string (may contain null characters).</dd>
        <dd><tt>length</tt> - Length of os_stri in characters.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>a Seed7 UTF-32 string, or
        NULL if an error occurred.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_os_stri"><h3>stri_to_os_stri</h3></a>
<p>
    <a class="type" href="#os_striType">os_striType</a> <b>stri_to_os_stri</b> (<a class="type" href="#striType">const_striType</a> stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Convert a Seed7 UTF-32 string to a null terminated os_striType string.
      The memory for the null terminated os_striType string is allocated.
      The os_striType result is allocated with the macro <a class="func" href="#os_stri_alloc">os_stri_alloc</a>()
      and it must be freed with the macro <a class="func" href="#os_stri_free">os_stri_free</a>(). Strings allocated
      with <a class="func" href="#os_stri_alloc">os_stri_alloc</a>() must be freed in the reverse order of their
      creation. This allows that allocations work in a stack like manner.
      Many system calls have parameters with null terminated os_striType
      strings. System calls are defined in "version.h" and "os_decls.h".
      They are prefixed with os_ and use strings of the type os_striType.
      Depending on the operating system os_striType can describe byte or
      wide char strings. The encoding can be Latin-1, UTF-8, UTF-16 or
      it can use a code page.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>stri</tt> - Seed7 UTF-32 string to be converted.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if the conversion failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>a null terminated os_striType value used by system calls, or
        NULL if an error occurred.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="os_stri_to_stri"><h3>os_stri_to_stri</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>os_stri_to_stri</b> (<a class="type" href="#os_striType">const_os_striType</a> os_stri, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Convert a null terminated os_striType string to a Seed7 UTF-32 string.
      Many system calls return null terminated os_striType strings. System
      calls are defined in "version.h" and "os_decls.h". They are prefixed
      with os_ and use strings of the type os_striType. Depending on the
      operating system os_striType can describe byte or wide char strings.
      The encoding can be Latin-1, UTF-8, UTF-16 or it can use a code page.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>os_stri</tt> - Null terminated os_striType string to be converted.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>a Seed7 UTF-32 string, or
        NULL if an error occurred.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cp_to_os_path"><h3>cp_to_os_path</h3></a>
<p>
    <a class="type" href="#os_striType">os_striType</a> <b>cp_to_os_path</b> (<a class="type" href="#striType">const_striType</a> std_path, <span class="type">int</span> *path_info, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Convert a Seed7 standard path to a path used by system calls.
      The memory for the null terminated os_striType path is allocated.
      The os_striType result is allocated with the macro <a class="func" href="#os_stri_alloc">os_stri_alloc</a>()
      and it must be freed with the macro <a class="func" href="#os_stri_free">os_stri_free</a>(). Strings allocated
      with <a class="func" href="#os_stri_alloc">os_stri_alloc</a>() must be freed in the reverse order of their
      creation. This allows that allocations work in a stack like manner.
      System calls are defined in "version.h" and "os_decls.h". They are
      prefixed with os_ and use system paths of the type os_striType.
      Depending on the operating system os_striType can describe byte or
      wide char strings. The encoding can be Latin-1, UTF-8, UTF-16 or
      it can use a code page. Beyond the conversion to os_striType a
      mapping to drive letters might take place on some operating systems.
</p></dd>
    <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>std_path</tt> - UTF-32 encoded Seed7 standard path to be converted.</dd>
        <dd><tt>path_info</tt> - Unchanged if the function succeeds, and
                    PATH_IS_EMULATED_ROOT if the path is "/", and
                    PATH_NOT_MAPPED if the path cannot be mapped.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed, and
                   <a class="exception" href="errors.htm#RANGE_ERROR">RANGE_ERROR</a> if the path is not a standard path.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>a null terminated os_striType path used by system calls, or
        NULL if an error occurred.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="cp_from_os_path"><h3>cp_from_os_path</h3></a>
<p>
    <a class="type" href="#striType">striType</a> <b>cp_from_os_path</b> (<a class="type" href="#os_striType">const_os_striType</a> os_path, <a class="type" href="#errInfoType">errInfoType</a> *err_info)</p><dl><dd>
<p>
      Convert a path returned by a system call to a Seed7 standard path.
      System calls are defined in "version.h" and "os_decls.h". They are
      prefixed with os_ and use system paths of the type os_striType.
      Depending on the operating system os_striType can describe byte or
      wide char strings. The encoding can be Latin-1, UTF-8, UTF-16 or
      it can use a code page. Beyond the conversion from os_striType a
      mapping from drive letters might take place on some operating
      systems.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>os_path</tt> - Null terminated os_striType path to be converted.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if the memory allocation failed.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>an UTF-32 encoded Seed7 standard path, or
        NULL if the memory allocation failed.</dd></dl></dd>
</dl></div></div>

<a name="Macros_to_access_the_action_parameters"><h3>16.5 Macros to access the action parameters</h3></a>
<p>
  A primitive action function has one parameter named <tt>'arguments'</tt>. The
  <tt>'arguments'</tt> parameter has the type <tt><a class="type" href="#listType">listType</a></tt> and contains a list of
  objects. The header file <tt><span class="lib">"objutl.h"</span></tt> defines macros like <tt><a class="func" href="#arg_1">arg_1</a></tt>,
  <tt><a class="func" href="#arg_2">arg_2</a></tt>, <tt><a class="func" href="#arg_3">arg_3</a></tt>, etc. to get a specific object from the <tt>'arguments'</tt>.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Functions (macros) to get a Seed7 object from a list</td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="arg_1">arg_1</a></b> (<a class="type" href="#listType">listType</a> arguments)</td></tr>
      <tr><td width="30"></td><td>Take the first object from the list.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="arg_2">arg_2</a></b> (<a class="type" href="#listType">listType</a> arguments)</td></tr>
      <tr><td width="30"></td><td>Take the second object from the list.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="arg_3">arg_3</a></b> (<a class="type" href="#listType">listType</a> arguments)</td></tr>
      <tr><td width="30"></td><td>Take the third object from the list.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><b>. . .</b></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b>. . .</b></td></tr>
      </table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="arg_12">arg_12</a></b> (<a class="type" href="#listType">listType</a> arguments)</td></tr>
      <tr><td width="30"></td><td>Take the twelfth object from the list.</td></tr></table></td></tr>
</table></div><p>
  An object value contains a specific C implementation type. The header
  file <tt><span class="lib">"objutl.h"</span></tt> defines macros like <tt><a class="func" href="#isit_char">isit_char</a></tt> and <tt><a class="func" href="#isit_set">isit_set</a></tt> to
  check, if an object has the requested type. If the object has not
  the requested C implementation type and error message is written.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Functions (macros) to check the C type of Seed7 objects</td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_array">isit_array</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#arrayType">arrayType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_bigint">isit_bigint</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#bigIntType">bigIntType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_bool">isit_bool</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#boolType">boolType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_bstri">isit_bstri</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#bstriType">bstriType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_char">isit_char</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#charType">charType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_database">isit_database</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#databaseType">databaseType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_file">isit_file</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#fileType">fileType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_float">isit_float</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#floatType">floatType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_hash">isit_hash</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#hashType">hashType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_int">isit_int</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#intType">intType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_poll">isit_poll</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#pollType">pollType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_set">isit_set</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#setType">setType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_socket">isit_socket</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#socketType">socketType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_sqlstmt">isit_sqlstmt</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#sqlStmtType">sqlStmtType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_stri">isit_stri</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#striType">striType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_struct">isit_struct</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#structType">structType</a>.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="isit_win">isit_win</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Check if the object type is <a class="type" href="#winType">winType</a>.</td></tr></table></td></tr>
</table></div><p>
  The header file <tt><span class="lib">"objutl.h"</span></tt> defines macros like <tt><a class="func" href="#take_bool">take_bool</a></tt> and
  <tt><a class="func" href="#take_file">take_file</a></tt>. This macros return a value with the requested
  C implementation type.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Functions (macros) to get the C values of Seed7 objects</td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#arrayType">arrayType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_array">take_array</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the array value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#bigIntType">bigIntType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_bigint">take_bigint</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the bigInteger value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#boolType">boolType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_bool">take_bool</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the boolean value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#bstriType">bstriType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_bstri">take_bstri</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the bstring value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#charType">charType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_char">take_char</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the char value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#databaseType">databaseType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_database">take_database</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the database value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#fileType">fileType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_file">take_file</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the file value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#floatType">floatType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_float">take_float</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the float value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#hashType">hashType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_hash">take_hash</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the hash table value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#intType">intType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_int">take_int</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the integer value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#pollType">pollType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_poll">take_poll</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the poll data value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#setType">setType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_set">take_set</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the set value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#socketType">socketType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_socket">take_socket</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the socket value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#sqlStmtType">sqlStmtType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_sqlstmt">take_sqlstmt</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the SQL prepared statement value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#striType">striType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_stri">take_stri</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the string value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#structType">structType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_struct">take_struct</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the struct value from an object.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#winType">winType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="take_win">take_win</a></b> (<a class="type" href="#objectType">objectType</a> arg)</td></tr>
      <tr><td width="30"></td><td>Take the struct value from an object.</td></tr></table></td></tr>
</table></div>

<a name="Functions_to_create_action_results"><h3>16.6 Functions to create action results</h3></a>
<p>
  A primitive action function has a result of type <tt><a class="type" href="#objectType">objectType</a></tt>.
  The header file <tt><span class="lib">"objutl.h"</span></tt> defines macros like <tt><a class="func" href="#bld_bigint_temp">bld_bigint_temp</a></tt>
  and <tt><a class="func" href="#bld_stri_temp">bld_stri_temp</a></tt> to create an object with the specified type.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Functions to create Seed7 objects with a C value</td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_array_temp">bld_array_temp</a></b> (<a class="type" href="#arrayType">arrayType</a> temp_array)</td></tr>
      <tr><td width="30"></td><td>Create an object with an <a class="type" href="#arrayType">arrayType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_bigint_temp">bld_bigint_temp</a></b> (<a class="type" href="#bigIntType">bigIntType</a> temp_bigint)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#bigIntType">bigIntType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_bstri_temp">bld_bstri_temp</a></b> (<a class="type" href="#bstriType">bstriType</a> temp_bstri)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#bstriType">bstriType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_char_temp">bld_char_temp</a></b> (<a class="type" href="#charType">charType</a> temp_char)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#charType">charType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_database_temp">bld_database_temp</a></b> (<a class="type" href="#databaseType">databaseType</a> temp_database)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#databaseType">databaseType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_file_temp">bld_file_temp</a></b> (<a class="type" href="#fileType">fileType</a> temp_file)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#fileType">fileType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_float_temp">bld_float_temp</a></b> (<a class="type" href="#floatType">floatType</a> temp_float)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#floatType">floatType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_hash_temp">bld_hash_temp</a></b> (<a class="type" href="#hashType">hashType</a> temp_hash)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#hashType">hashType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_int_temp">bld_int_temp</a></b> (<a class="type" href="#intType">intType</a> temp_int)</td></tr>
      <tr><td width="30"></td><td>Create an object with an <a class="type" href="#intType">intType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_poll_temp">bld_poll_temp</a></b> (<a class="type" href="#pollType">pollType</a> temp_poll)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#pollType">pollType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_set_temp">bld_set_temp</a></b> (<a class="type" href="#setType">setType</a> temp_set)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#setType">setType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_socket_temp">bld_socket_temp</a></b> (<a class="type" href="#socketType">socketType</a> temp_socket)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#socketType">socketType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_sqlstmt_temp">bld_sqlstmt_temp</a></b> (<a class="type" href="#sqlStmtType">sqlStmtType</a> temp_sqlstmt)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#sqlStmtType">sqlStmtType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_stri_temp">bld_stri_temp</a></b> (<a class="type" href="#striType">striType</a> temp_stri)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#striType">striType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_struct_temp">bld_struct_temp</a></b> (<a class="type" href="#structType">structType</a> temp_struct)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#structType">structType</a> value.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#objectType">objectType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a name="bld_win_temp">bld_win_temp</a></b> (<a class="type" href="#winType">winType</a> temp_win)</td></tr>
      <tr><td width="30"></td><td>Create an object with a <a class="type" href="#winType">winType</a> value.</td></tr></table></td></tr>
</table></div>

<a name="Memory_management_macros"><h3>16.7 Memory management macros</h3></a>
<p>
  The conversion functions mentioned above use macros to do the
  memory management. Some of this macros are not based on malloc()
  but manage the memory in a stack. Therefore it is important to
  use the correct macro to allocate and free memory. The macros
  below are defined in the header file <tt><span class="lib">"striutl.h"</span></tt>.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Macro Summary</td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#free_cstri">free_cstri</b> (<a class="type" href="#cstriType">cstriType</a> cstri, <a class="type" href="#striType">striType</a> stri)</td></tr>
      <tr><td width="30"></td><td>Macro to free memory that has been allocated by <a class="func" href="#stri_to_cstri">stri_to_cstri</a>().</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#free_cstri8">free_cstri8</b> (<a class="type" href="#cstriType">cstriType</a> cstri, <a class="type" href="#striType">striType</a> stri)</td></tr>
      <tr><td width="30"></td><td>Macro to free memory that has been allocated by <a class="func" href="#stri_to_cstri8">stri_to_cstri8</a>() or <a class="func" href="#stri_to_cstri8_buf">stri_to_cstri8_buf</a>().</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#boolType">boolType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#os_stri_alloc">os_stri_alloc</a></b> (<a class="type" href="#os_striType">os_striType</a> &amp;var, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Macro to allocate memory for an <a class="type" href="#os_striType">os_striType</a> string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#os_stri_free">os_stri_free</a></b> (<a class="type" href="#os_striType">os_striType</a> var)</td></tr>
      <tr><td width="30"></td><td>Macro to free memory that has been allocated with <a class="func" href="#os_stri_alloc">os_stri_alloc</a>.</td></tr></table></td></tr>
</table></div><br /><div><p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
  Macro Detail</td></tr></table></p>

  <div><a name="free_cstri"><h3>free_cstri</h3></a>
<p>
    <span class="type">void</span> <b>free_cstri</b> (<a class="type" href="#cstriType">cstriType</a> cstri, <a class="type" href="#striType">striType</a> stri)</p><dl><dd>
<p>
      Macro to free memory that has been allocated by <a class="func" href="#stri_to_cstri">stri_to_cstri</a>().
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - The string to be freed.</dd>
        <dd><tt>stri</tt> - The parameter that was used when <a class="func" href="#stri_to_cstri">stri_to_cstri</a>() was called.</dd>
</dl></div>
<hr />
  <div><a name="free_cstri8"><h3>free_cstri8</h3></a>
<p>
    <span class="type">void</span> <b>free_cstri8</b> (<a class="type" href="#cstriType">cstriType</a> cstri, <a class="type" href="#striType">striType</a> stri)</p><dl><dd>
<p>
      Macro to free memory that has been allocated by <a class="func" href="#stri_to_cstri8">stri_to_cstri8</a>() or <a class="func" href="#stri_to_cstri8_buf">stri_to_cstri8_buf</a>().
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>cstri</tt> - The string to be freed.</dd>
        <dd><tt>stri</tt> - The parameter that was used when <a class="func" href="#stri_to_cstri8">stri_to_cstri8</a>() or <a class="func" href="#stri_to_cstri8_buf">stri_to_cstri8_buf</a>() was called.</dd>
</dl></div>
<hr />
  <div><a name="os_stri_alloc"><h3>os_stri_alloc</h3></a>
<p>
    <a class="type" href="#boolType">boolType</a> <b>os_stri_alloc</b> (<a class="type" href="#os_striType">os_striType</a> &amp;var, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Macro to allocate memory for an <a class="type" href="#os_striType">os_striType</a> string.
      Strings allocated with <a class="func" href="#os_stri_alloc">os_stri_alloc</a>() must be freed with
      <a class="func" href="#os_stri_free">os_stri_free</a>() in the reverse order of their creation. This allows
      that allocations work in a stack like manner.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>var</tt> - Reference to a variable to which the
                   allocated memory is assigned.</dd>
        <dd><tt>len</tt> - Size of the allocated memory in characters.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>TRUE if the allocation succeeds, and
        FALSE if the memory allocation failed.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="os_stri_free"><h3>os_stri_free</h3></a>
<p>
    <span class="type">void</span> <b>os_stri_free</b> (<a class="type" href="#os_striType">os_striType</a> var)</p><dl><dd>
<p>
      Macro to free memory that has been allocated with <a class="func" href="#os_stri_alloc">os_stri_alloc</a>.
      Strings allocated with <a class="func" href="#os_stri_alloc">os_stri_alloc</a>() must be freed with
      <a class="func" href="#os_stri_free">os_stri_free</a>() in the reverse order of their creation. This allows
      that allocations work in a stack like manner. The strings returned
      by <a class="func" href="#stri_to_os_stri">stri_to_os_stri</a> and <a class="func" href="#cp_to_os_path">cp_to_os_path</a> are also allocated with
      <a class="func" href="#os_stri_alloc">os_stri_alloc</a>. Therefore they must also be freed with
      <a class="func" href="#os_stri_free">os_stri_free</a>() in the reverse order of their creation.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>var</tt> - The string to be freed.</dd>
</dl></div></div>

<a name="Basic_conversion_functions"><h3>16.8 Basic conversion functions</h3></a>
<p>
  The conversion functions mentioned above are implemented with
  basic conversion functions. In some situations it might make sense
  to use the basic conversion functions directly. This functions are
  optimized for performance. Some functions use loop unrolling
  inspired by Duff's device. The basic conversion functions below
  are defined in the header file <tt><span class="lib">"striutl.h"</span></tt>.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Function Summary</td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#memcpy_to_strelem">memcpy_to_strelem</a></b> (<span class="keywd">register</span> <a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> dest,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#ustriType">const_ustriType</a> src, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Copy len bytes to Seed7 characters in a string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#memset_to_strelem">memset_to_strelem</a></b> (<span class="keywd">register</span> <a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> dest,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> ch, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Fill len Seed7 characters with the character ch.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#boolType">boolType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#memcpy_from_strelem">memcpy_from_strelem</a></b> (<span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#ustriType">const_ustriType</a> dest,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> src, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Copy len Seed7 characters to a byte string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *</td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#memchr_strelem">memchr_strelem</a></b> (<span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *mem,
        <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> ch, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Scan the first len Seed7 characters for the character ch.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#memSizeType">memSizeType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#utf8_to_stri">utf8_to_stri</a></b> (<a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> dest_stri,
        <a class="type" href="#memSizeType">memSizeType</a> *<span class="keywd">const</span> dest_len, <a class="type" href="#ustriType">const_ustriType</a> ustri, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Convert an UTF-8 encoded string to an UTF-32 encoded string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#memSizeType">memSizeType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_utf8">stri_to_utf8</a></b> (<span class="keywd">const</span> <a class="type" href="#ustriType">ustriType</a> out_stri,
        <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *strelem, <a class="type" href="#memSizeType">memSizeType</a> len)</td></tr>
      <tr><td width="30"></td><td>Convert an UTF-32 encoded string to an UTF-8 encoded string.</td></tr></table></td></tr>

    <tr><td align="right" valign="top"><a class="type" href="#memSizeType">memSizeType</a></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#stri_to_utf16">stri_to_utf16</a></b> (<span class="keywd">const</span> <a class="type" href="#utf16striType">utf16striType</a> out_wstri,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *strelem, <a class="type" href="#memSizeType">memSizeType</a> len,
        <a class="type" href="#errInfoType">errInfoType</a> *<span class="keywd">const</span> err_info)</td></tr>
      <tr><td width="30"></td><td>Convert an UTF-32 encoded string to an UTF-16 encoded string.</td></tr></table></td></tr>
</table></div><br /><div><p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
  Function Detail</td></tr></table></p>

  <div><a name="memcpy_to_strelem"><h3>memcpy_to_strelem</h3></a>
<p>
    <span class="type">void</span> <b>memcpy_to_strelem</b> (<span class="keywd">register</span> <a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> dest,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#ustriType">const_ustriType</a> src, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Copy len bytes to Seed7 characters in a string.
      This function works also correct if 'src' and 'dest' point
      to the same address. In other words it works correct for:
</p><pre>
       memcpy_to_strelem(mem, (ustriType) mem, num);
</pre></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>dest</tt> - Destination array with UTF-32 encoded characters.</dd>
        <dd><tt>src</tt> - Source array with ISO-8859-1 encoded bytes.</dd>
        <dd><tt>len</tt> - Number of bytes in 'src' and UTF-32 characters in 'dest'.</dd>
</dl></div>
<hr />
  <div><a name="memset_to_strelem"><h3>memset_to_strelem</h3></a>
<p>
    <span class="type">void</span> <b>memset_to_strelem</b> (<span class="keywd">register</span> <a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> dest,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> ch, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Fill len Seed7 characters with the character ch.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>dest</tt> - Destination array with UTF-32 encoded characters.</dd>
        <dd><tt>ch</tt> - UTF-32 encoded character to be filled into 'dest'.</dd>
        <dd><tt>len</tt> - Specifies how often 'ch' is filled into 'dest'.</dd>
</dl></div>
<hr />
 <div><a name="memcpy_from_strelem"><h3>memcpy_from_strelem</h3></a>
<p>
    <a class="type" href="#boolType">boolType</a> <b>memcpy_from_strelem</b> (<span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#ustriType">const_ustriType</a> dest,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> src, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Copy len Seed7 characters to a byte string.
      This function uses loop unrolling inspired by Duff's device
      and a trick with a binary or (|=) to check for allowed values.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>dest</tt> - Destination array with ISO-8859-1 encoded bytes.</dd>
        <dd><tt>src</tt> - Source array with UTF-32 encoded characters.</dd>
        <dd><tt>len</tt> - Number of UTF-32 characters in 'src' and bytes in 'dest'.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>TRUE if one of the characters does not fit into a byte,
        FALSE otherwise.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="memchr_strelem"><h3>memchr_strelem</h3></a>
<p>
    <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *<b>memchr_strelem</b> (<span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *mem,
        <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> ch, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Scan the first len Seed7 characters for the character ch.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>mem</tt> - Array with UTF-32 characters.</dd>
        <dd><tt>ch</tt> - UTF-32 character to be searched in 'mem'.</dd>
        <dd><tt>len</tt> - Number of UTF-32 characters in 'mem'.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>a pointer to the matching character, or NULL if the
        character does not occur in the given string area.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="utf8_to_stri"><h3>utf8_to_stri</h3></a>
<p>
    <a class="type" href="#memSizeType">memSizeType</a> <b>utf8_to_stri</b> (<a class="type" href="#strElemType">strElemType</a> *<span class="keywd">const</span> dest_stri,
        <a class="type" href="#memSizeType">memSizeType</a> *<span class="keywd">const</span> dest_len, <a class="type" href="#ustriType">const_ustriType</a> ustri, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Convert an UTF-8 encoded string to an UTF-32 encoded string.
      The source and destination strings are not '\0' terminated.
      The memory for the destination dest_stri is not allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>dest_stri</tt> - Destination of the UTF-32 encoded string.</dd>
        <dd><tt>dest_len</tt> - Place to return the length of dest_stri.</dd>
        <dd><tt>ustri</tt> - UTF-8 encoded string to be converted.</dd>
        <dd><tt>len</tt> - Number of bytes in ustri.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>the number of bytes in ustri that are left unconverted, or
        0 if ustri has been successfully converted.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_utf8"><h3>stri_to_utf8</h3></a>
<p>
    <a class="type" href="#memSizeType">memSizeType</a> <b>stri_to_utf8</b> (<span class="keywd">const</span> <a class="type" href="#ustriType">ustriType</a> out_stri,
        <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *strelem, <a class="type" href="#memSizeType">memSizeType</a> len)</p><dl><dd>
<p>
      Convert an UTF-32 encoded string to an UTF-8 encoded string.
      The source and destination strings are not '\0' terminated.
      The memory for the destination out_stri is not allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>out_stri</tt> - Destination of the UTF-8 encoded string.</dd>
        <dd><tt>strelem</tt> - UTF-32 encoded string to be converted.</dd>
        <dd><tt>len</tt> - Number of UTF-32 characters in strelem.</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>the length of the converted UTF-8 string.</dd></dl></dd>
</dl></div>
<hr />
  <div><a name="stri_to_utf16"><h3>stri_to_utf16</h3></a>
<p>
    <a class="type" href="#memSizeType">memSizeType</a> <b>stri_to_utf16</b> (<span class="keywd">const</span> <a class="type" href="#utf16striType">utf16striType</a> out_wstri,
        <span class="keywd">register</span> <span class="keywd">const</span> <a class="type" href="#strElemType">strElemType</a> *strelem, <a class="type" href="#memSizeType">memSizeType</a> len,
        <a class="type" href="#errInfoType">errInfoType</a> *<span class="keywd">const</span> err_info)</p><dl><dd>
<p>
      Convert an UTF-32 encoded string to an UTF-16 encoded string.
      The source and destination strings are not '\0' terminated.
      The memory for the destination out_wstri is not allocated.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>out_wstri</tt> - Destination of the UTF-16 encoded string.</dd>
        <dd><tt>strelem</tt> - UTF-32 encoded string to be converted.</dd>
        <dd><tt>len</tt> - Number of UTF-32 characters in strelem.</dd>
        <dd><tt>err_info</tt> - Unchanged if the function succeeds, and
                   <a class="exception" href="errors.htm#MEMORY_ERROR">MEMORY_ERROR</a> if *strelem contains a character
                          that is higher than the highest allowed
                          Unicode character (U+10FFFF).</dd>
</dl></dd>
      <dd><dl><dt><b>Returns:</b></dt>
        <dd>the length of the converted UTF-16 string in characters.</dd></dl></dd>
</dl></div></div>

<a name="Error_handling"><h3>16.9 Error handling</h3></a>
<p>
  The C programming language does not provide exceptions. Seed7 uses
  several methods to provide error handling. Before an actual exception
  is raised an error state can be handled in different ways:
</p><ul>
    <li>The integer type <tt><a class="type" href="#errInfoType">errInfoType</a></tt> is used to describe an
      error state. Usually a variable or parameter named <tt><span class="var">err_info</span></tt> is
      used to store the error state. The value <tt><span class="exception">OKAY_NO_ERROR</span></tt> is used
      to describe that no error occurred. Values like <tt><span class="exception">MEMORY_ERROR</span></tt>,
      <tt><span class="exception">NUMERIC_ERROR</span></tt>, <tt><span class="exception">OVERFLOW_ERROR</span></tt>, <tt><span class="exception">RANGE_ERROR</span></tt>, <tt><span class="exception">FILE_ERROR</span></tt>,
      <tt><span class="exception">DATABASE_ERROR</span></tt>, <tt><span class="exception">GRAPHIC_ERROR</span></tt> and <tt><span class="exception">ACTION_ERROR</span></tt> describe
      errors that occurred.</li>
    <li>In some situations a function has only one possible error
      situation (e.g. a <tt><span class="exception">MEMORY_ERROR</span></tt>). This is handled with functions
      that return NULL in case of a <tt><span class="exception">MEMORY_ERROR</span></tt>.</li>
</ul><p>
  C code can check the value of the <tt><span class="var">err_info</span></tt> variable, or check if a
  function returns NULL. In case of error it is possible to do some
  cleaning up. An error situation can be propagated this way over
  several function levels. It is important to assure that an existing
  error situation (<tt><span class="var">err_info</span></tt> has a value not equal to <tt><span class="exception">OKAY_NO_ERROR</span></tt>)
  is not reset to a situation that no error occurred.
</p><p>
  An actual exception can be triggered with the macro <tt><a class="func" href="#raise_error">raise_error</a></tt>.
  This macro takes an <tt><a class="type" href="#errInfoType">errInfoType</a></tt> parameter to describe the actual
  exception. Note that all cleaning up must be done before <tt><a class="func" href="#raise_error">raise_error</a></tt>
  is called. This macro calls the function <tt><span class="func">raise_exception2</span></tt> with
  the additional parameters __FILE__ and __LINE__. The function
  <tt><span class="func">raise_exception2</span></tt> has different implementations for interpreted
  and compiled programs:
</p><ul>
    <li>In the interpreter <tt><span class="func">raise_exception2</span></tt> sets a fail flag and the
      function is left normally.</li>
    <li>In compiled code <tt><span class="func">raise_exception2</span></tt> uses a <tt><span class="func">longjmp</span></tt> to continue
      executing at the handler code of the exception.</li>
</ul><p>
  That means that <tt><a class="func" href="#raise_error">raise_error</a></tt> also returns normally in the
  interpreter. Therefore a function that calls <tt><a class="func" href="#raise_error">raise_error</a></tt> must
  return after it has called this function. Surrounding functions
  must also return. This must be done up to the current action
  function. So either all these functions always return immediate
  or a special return value (e.g. NULL) signals them to return.
  Doing some clean up, when the special return value is received,
  will not work in compiled code. If cleaning up is necessary the
  call of <tt><a class="func" href="#raise_error">raise_error</a></tt> should be done in the outer function.
</p><div><table width="100%" border="1" cellspacing="0" cellpadding="3">
<tr><td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF" colspan="2">
  Function Summary</td></tr>

    <tr><td align="right" valign="top"><span class="type">void</span></td><td><table border="0" cellspacing="0" cellpadding="0"> <tr><td colspan="2"><b><a class="link" href="#raise_error">raise_error</a></b> (<a class="type" href="#errInfoType">errInfoType</a> err_info)</td></tr>
      <tr><td width="30"></td><td>Macro to raise an exception.</td></tr></table></td></tr>
</table></div><br /><div><p><table width="100%" border="1" cellspacing="0" cellpadding="2"><tr>
<td style="font-size: 22px; font-weight: bold; background-color: #C0C0FF">
  Function Detail</td></tr></table></p>

  <div><a name="raise_error"><h3>raise_error</h3></a>
<p>
    <span class="type">void</span> <b>raise_error</b> (<a class="type" href="#errInfoType">errInfoType</a> err_info)</p><dl><dd>
<p>
      Macro to raise an exception. This macro calls the function
      <span class="func">raise_exception2</span> with the additional parameters __FILE__ and
      __LINE__. The function <span class="func">raise_exception2</span> has different
      implementations for interpreted and compiled programs.
</p></dd>
      <dd><dl><dt><b>Parameters:</b></dt>
        <dd><tt>err_info</tt> - The exception to be raised.</dd>
</dl></div></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/actions.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/errors.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
