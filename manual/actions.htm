<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Primitive actions</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>

<br />

<a class="head" href="#PRIMITIVE_ACTIONS"><big>Actions</big></a>
<a class="menu" href="#ACTION">ACTION</a>
<a class="menu" href="#array">array</a>
<a class="menu" href="#bigInteger">bigInteger</a>
<a class="menu" href="#binary">binary</a>
<a class="menu" href="#boolean">boolean</a>
<a class="menu" href="#bstring">bstring</a>
<a class="menu" href="#char">char</a>
<a class="menu" href="#commands">commands</a>
<a class="menu" href="#console_output">console&nbsp;output</a>
<a class="menu" href="#declarations">declarations</a>
<a class="menu" href="#graphic_output">graphic</a>
<a class="menu" href="#enumeration">enumeration</a>
<a class="menu" href="#clib_file">clib_file</a>
<a class="menu" href="#float">float</a>
<a class="menu" href="#graphic_keyboard">graphic&nbsp;keybd</a>
<a class="menu" href="#hash">hash</a>
<a class="menu" href="#integer">integer</a>
<a class="menu" href="#interface">interface</a>
<a class="menu" href="#console_keyboard">console&nbsp;keybd</a>
<a class="menu" href="#list">list</a>
<a class="menu" href="#process">process</a>
<a class="menu" href="#pointList">pointList</a>
<a class="menu" href="#pollData">pollData</a>
<a class="menu" href="#proc">statements</a>
<a class="menu" href="#program">program</a>
<a class="menu" href="#reference">reference</a>
<a class="menu" href="#ref_list">ref_list</a>
<a class="menu" href="#struct">struct</a>
<a class="menu" href="#structElement">structElement</a>
<a class="menu" href="#set">set</a>
<a class="menu" href="#PRIMITIVE_SOCKET">socket</a>
<a class="menu" href="#database">database</a>
<a class="menu" href="#string">string</a>
<a class="menu" href="#time">time</a>
<a class="menu" href="#type">type</a>
<a class="menu" href="#utf8File">utf8File</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Actions</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/graphic.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/ffi.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="PRIMITIVE_ACTIONS"><h2>15. PRIMITIVE ACTIONS</h2></a>

<p>
    Not all functions can be described by calling other
  functions of the same language. For this reason and for
  performance reasons several functions are defined using a
  mechanism called action. For example: It is easy to define
  the <a class="link" href="stats.htm#while-statement">while-statement</a> by using recursion. But this would
  hurt performance and it would also use a huge amount of
  memory for the runtime stack. In practice an implementation
  of the <a class="link" href="stats.htm#while-statement">while-statement</a> can use a conditional jump
  instead of a subroutine call. Since Seed7 has no <tt><span class="keywd">goto</span></tt>
  statement, this is not an option. Instead the primitive
  action <tt><a class="link" href="#PRC_WHILE">PRC_WHILE</a></tt> can be used. The <a class="link" href="stats.htm#while-statement">while-statement</a> is
  defined in the basic Seed7 library <tt><span class="lib">"seed7_05.s7i"</span></tt> with:
</p><pre class="indent">
<a class="keywd_no_ul" href="decls.htm#Procedure_declarations">const</a> <a class="type" href="types.htm#proc">proc</a>: while (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#boolean">boolean</a>: condition) do
              (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#proc">proc</a>: statement)
            end while                           <span class="keywd">is</span> <span class="keywd">action</span> <a class="stri" href="#PRC_WHILE">"PRC_WHILE"</a>;
</pre><p>
  This declaration shows the types and the position of
  the parameters of a <a class="link" href="stats.htm#while-statement">while-statement</a>. Such an action
  declaration contains enough information to use the defined
  construct. The semantic of all primitive actions is
  hard coded in the interpreter and in the compiler. The
  parameters of the hard coded actions and the corresponding
  definitions in Seed7 must match. If you are interested in
  the Seed7 definitions of primitive actions just look into
  the file <tt><span class="lib">"seed7_05.s7i"</span></tt>.
</p><p>
    Currently there are several hundred primitive actions
  predefined in the interpreter. They all have names in upper
  case characters which have the form:
</p><pre class="indent">
TYPE_ACTION
</pre><p>
  Which means that for example all <tt><a class="type" href="types.htm#integer">integer</a></tt> actions start
  with <a class="link" href="#integer">INT_</a> and all assignment actions end with _CPY .
  The following list shows actions which are used with more
  than one type:
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td>_ABS      <td width="20"></td><td>Absolute value</td></tr>
    <tr><td>_ADD      <td width="20"></td><td>Addition</td></tr>
    <tr><td>_CAT      <td width="20"></td><td>Concatenation</td></tr>
    <tr><td>_CMP      <td width="20"></td><td>Compare</td></tr>
    <tr><td>_CPY      <td width="20"></td><td>Copy (Assignment)</td></tr>
    <tr><td>_CREATE   <td width="20"></td><td>Initialize (Construct)</td></tr>
    <tr><td>_DESTR    <td width="20"></td><td>Destroy (Destruct)</td></tr>
    <tr><td>_DECR     <td width="20"></td><td>Decrement</td></tr>
    <tr><td>_DIV      <td width="20"></td><td>Division</td></tr>
    <tr><td>_EQ       <td width="20"></td><td>Equal</td></tr>
    <tr><td>_GE       <td width="20"></td><td>Greater equal</td></tr>
    <tr><td>_GETC     <td width="20"></td><td>Get one character from a <span class="type">file</span></td></tr>
    <tr><td>_GETS     <td width="20"></td><td>Get <tt><a class="type" href="types.htm#string">string</a></tt> with maximum length from a <span class="type">file</span></td></tr>
    <tr><td>_GT       <td width="20"></td><td>Greater than</td></tr>
    <tr><td>_HASHCODE <td width="20"></td><td>Compute a hashCode</td></tr>
    <tr><td>_HEAD     <td width="20"></td><td>Head of <tt><a class="type" href="types.htm#string">string</a></tt>, <tt><a class="type" href="types.htm#array">array</a></tt> or <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt></td></tr>
    <tr><td>_ICONV    <td width="20"></td><td>Conversion of <tt><a class="type" href="types.htm#integer">integer</a></tt> to another type</td></tr>
    <tr><td>_IDX      <td width="20"></td><td>Index (Element) of <tt><a class="type" href="types.htm#string">string</a></tt>, <tt><a class="type" href="types.htm#array">array</a></tt> or <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt></td></tr>
    <tr><td>_INCR     <td width="20"></td><td>Increment</td></tr>
    <tr><td>_IPOW     <td width="20"></td><td>Power with <tt><a class="type" href="types.htm#integer">integer</a></tt> exponent</td></tr>
    <tr><td>_LE       <td width="20"></td><td>Less equal</td></tr>
    <tr><td>_LNG      <td width="20"></td><td>Length</td></tr>
    <tr><td>_LOG2     <td width="20"></td><td>Base 2 logarithm</td></tr>
    <tr><td>_LOWER    <td width="20"></td><td>Convert to lower case</td></tr>
    <tr><td>_LSHIFT   <td width="20"></td><td>Shift left</td></tr>
    <tr><td>_LT       <td width="20"></td><td>Less than</td></tr>
    <tr><td>_MDIV     <td width="20"></td><td>Modulo division (Integer division truncated towards negative infinity)</td></tr>
    <tr><td>_MOD      <td width="20"></td><td>Modulo (Reminder of _MDIV integer division)</td></tr>
    <tr><td>_MULT     <td width="20"></td><td>Multiply</td></tr>
    <tr><td>_NE       <td width="20"></td><td>Not equal</td></tr>
    <tr><td>_NEGATE   <td width="20"></td><td>Change sign</td></tr>
    <tr><td>_ODD      <td width="20"></td><td>Odd number</td></tr>
    <tr><td>_ORD      <td width="20"></td><td>Ordinal number</td></tr>
    <tr><td>_PARSE    <td width="20"></td><td>Conversion of <tt><a class="type" href="types.htm#string">string</a></tt> to another type</td></tr>
    <tr><td>_PLUS     <td width="20"></td><td>Positive sign (noop)</td></tr>
    <tr><td>_POW      <td width="20"></td><td>Power</td></tr>
    <tr><td>_PRED     <td width="20"></td><td>Predecessor</td></tr>
    <tr><td>_RAND     <td width="20"></td><td>Random value</td></tr>
    <tr><td>_RANGE    <td width="20"></td><td>Range of <tt><a class="type" href="types.htm#string">string</a></tt>, <tt><a class="type" href="types.htm#array">array</a></tt> or <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt></td></tr>
    <tr><td>_REM      <td width="20"></td><td>Remainder (Reminder of _DIV integer division)</td></tr>
    <tr><td>_RSHIFT   <td width="20"></td><td>Arithmetic shift right</td></tr>
    <tr><td>_SBTR     <td width="20"></td><td>Subtract</td></tr>
    <tr><td>_SCAN     <td width="20"></td><td>Convert from <tt><a class="type" href="types.htm#string">string</a></tt> to another type</td></tr>
    <tr><td>_SEEK     <td width="20"></td><td>Set actual file position of a <span class="type">file</span></td></tr>
    <tr><td>_SQRT     <td width="20"></td><td>Square root</td></tr>
    <tr><td>_STR      <td width="20"></td><td>Convert to <tt><a class="type" href="types.htm#string">string</a></tt></td></tr>
    <tr><td>_SUCC     <td width="20"></td><td>Successor</td></tr>
    <tr><td>_TAIL     <td width="20"></td><td>Tail of <tt><a class="type" href="types.htm#string">string</a></tt>, <tt><a class="type" href="types.htm#array">array</a></tt> or <tt><a class="type" href="types.htm#ref_list">ref_list</a></tt></td></tr>
    <tr><td>_TELL     <td width="20"></td><td>Return the actual <span class="type">file</span> position</td></tr>
    <tr><td>_UPPER    <td width="20"></td><td>Convert to upper case</td></tr>
    <tr><td>_VALUE    <td width="20"></td><td>Dereference a <tt><a class="type" href="types.htm#reference">reference</a></tt></td></tr>
    <tr><td>_WRITE    <td width="20"></td><td>Write <tt><a class="type" href="types.htm#string">string</a></tt> to <span class="type">file</span></td></tr>
</table></dd></dl><p>
  Primitive actions are defined for many types. The functions
  which implement the primitive actions are grouped together
  in *lib.c files. The following list contains the action
  prefix, the file containing the functions and a description:
</p><dl><dd><table border="0" cellspacing="0">
    <tr><td><a class="link" href="#ACTION"          >ACT_</a></td>  <td width="20"></td><td>actlib.c</td>  <td width="20"></td><td><tt><span class="type">ACTION</span></tt> operations</td></tr>
    <tr><td><a class="link" href="#array"           >ARR_</a></td>  <td width="20"></td><td>arrlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#array">array</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#bigInteger"      >BIG_</a></td>  <td width="20"></td><td>biglib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#bigInteger">bigInteger</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#binary"          >BIN_</a></td>  <td width="20"></td><td>binlib.c</td>  <td width="20"></td><td><tt><a class="type" href="../libraries/bin32.htm">bin32</a></tt> and <tt><a class="type" href="../libraries/bin64.htm">bin64</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#boolean"         >BLN_</a></td>  <td width="20"></td><td>blnlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#boolean">boolean</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#bstring"         >BST_</a></td>  <td width="20"></td><td>bstlib.c</td>  <td width="20"></td><td>Operations for byte strings</td></tr>
    <tr><td><a class="link" href="#char"            >CHR_</a></td>  <td width="20"></td><td>chrlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#char">char</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#commands"        >CMD_</a></td>  <td width="20"></td><td>cmdlib.c</td>  <td width="20"></td><td>Various directory, file and other commands</td></tr>
    <tr><td><a class="link" href="#console_output"  >CON_</a></td>  <td width="20"></td><td>conlib.c</td>  <td width="20"></td><td><tt><a class="type" href="../libraries/console.htm#console_file">console_file</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#declarations"    >DCL_</a></td>  <td width="20"></td><td>dcllib.c</td>  <td width="20"></td><td>Declaration operations</td></tr>
    <tr><td><a class="link" href="#graphic_output"  >DRW_</a></td>  <td width="20"></td><td>drwlib.c</td>  <td width="20"></td><td>Drawing operations</td></tr>
    <tr><td><a class="link" href="#enumeration"     >ENU_</a></td>  <td width="20"></td><td>enulib.c</td>  <td width="20"></td><td>Enumeration operations</td></tr>
    <tr><td><a class="link" href="#clib_file"       >FIL_</a></td>  <td width="20"></td><td>fillib.c</td>  <td width="20"></td><td><tt><span class="type">clib_file</span></tt> operations</td></tr>
    <tr><td><a class="link" href="#float"           >FLT_</a></td>  <td width="20"></td><td>fltlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#float">float</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#graphic_keyboard">GKB_</a></td>  <td width="20"></td><td>gkblib.c</td>  <td width="20"></td><td>Graphic keyboard operations</td></tr>
    <tr><td><a class="link" href="#hash"            >HSH_</a></td>  <td width="20"></td><td>hshlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#hash">hash</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#integer"         >INT_</a></td>  <td width="20"></td><td>intlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#integer">integer</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#interface"       >ITF_</a></td>  <td width="20"></td><td>itflib.c</td>  <td width="20"></td><td>Operations for interface types</td></tr>
    <tr><td><a class="link" href="#console_keyboard">KBD_</a></td>  <td width="20"></td><td>kbdlib.c</td>  <td width="20"></td><td>Keyboard operations</td></tr>
    <tr><td><a class="link" href="#list"            >LST_</a></td>  <td width="20"></td><td>lstlib.c</td>  <td width="20"></td><td>List operations</td></tr>
    <tr><td><a class="link" href="#process"         >PCS_</a></td>  <td width="20"></td><td>pcslib.c</td>  <td width="20"></td><td><tt><a class="type" href="../libraries/process.htm#process">process</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#pointList"       >PTL_</a></td>  <td width="20"></td><td>drwlib.c</td>  <td width="20"></td><td>pointList operations</td></tr>
    <tr><td><a class="link" href="#pollData"        >POL_</a></td>  <td width="20"></td><td>pollib.c</td>  <td width="20"></td><td><tt><a class="type" href="../libraries/poll.htm#pollData">pollData</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#proc"            >PRC_</a></td>  <td width="20"></td><td>prclib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#proc">proc</a></tt> operations and statements</td></tr>
    <tr><td><a class="link" href="#program"         >PRG_</a></td>  <td width="20"></td><td>prglib.c</td>  <td width="20"></td><td>Program operations</td></tr>
    <tr><td><a class="link" href="#reference"       >REF_</a></td>  <td width="20"></td><td>reflib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#reference">reference</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#ref_list"        >RFL_</a></td>  <td width="20"></td><td>rfllib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#ref_list">ref_list</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#struct"          >SCT_</a></td>  <td width="20"></td><td>sctlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#struct">struct</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#structElement"   >SEL_</a></td>  <td width="20"></td><td>sellib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#structElement">structElement</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#set"             >SET_</a></td>  <td width="20"></td><td>setlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#set">set</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#PRIMITIVE_SOCKET">SOC_</a></td>  <td width="20"></td><td>soclib.c</td>  <td width="20"></td><td><tt><span class="type">PRIMITIVE_SOCKET</span></tt> operations</td></tr>
    <tr><td><a class="link" href="#database"        >SQL_</a></td>  <td width="20"></td><td>sqllib.c</td>  <td width="20"></td><td><tt><a class="type" href="../libraries/sql_base.htm#database">database</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#string"          >STR_</a></td>  <td width="20"></td><td>strlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#string">string</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#time"            >TIM_</a></td>  <td width="20"></td><td>timlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#time">time</a></tt> and <tt><a class="type" href="types.htm#duration">duration</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#type"            >TYP_</a></td>  <td width="20"></td><td>typlib.c</td>  <td width="20"></td><td><tt><a class="type" href="types.htm#type">type</a></tt> operations</td></tr>
    <tr><td><a class="link" href="#utf8File"        >UT8_</a></td>  <td width="20"></td><td>ut8lib.c</td>  <td width="20"></td><td><tt><a class="type" href="../libraries/utf8.htm#utf8File">utf8File</a></tt> operations</td></tr>
</table></dd></dl><p>
  The C functions which implement primitive actions have
  lowercase names. E.g.: The action <tt><a class="link" href="#PRC_WHILE">PRC_WHILE</a></tt> is implemented
  with the C function <tt>'prc_while()'</tt> in the file <tt><span class="lib">"prclib.c"</span></tt>.
  The parameter list for all C action functions is identical.
  Every *lib.c file has a corresponding *lib.h file which
  contains the prototypes for the action functions.
</p><p>
  In a Seed7 program the operator <tt><a class="op_no_ul" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a></tt> is used to add two <tt><a class="type" href="types.htm#integer">integer</a></tt>
  values. The primitive action, which describes the addition of
  two integers, is <tt><a class="link" href="#INT_ADD">INT_ADD</a></tt>. The connection between <tt><a class="op" href="../libraries/integer.htm#(in_integer)+(in_integer)">+</a></tt>
  and <tt><a class="link" href="#INT_ADD">INT_ADD</a></tt> is done in the library <tt><span class="stri">"<a class="lib" href="../libraries/integer.htm">integer.s7i</a>"</span></tt> with the definition:
</p><pre class="indent">
<a class="keywd_no_ul" href="decls.htm#Function_declarations">const</a> <a class="type" href="types.htm#func">func</a> <a class="type" href="types.htm#integer">integer</a>: (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#integer">integer</a>: summand1) + (<a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#integer">integer</a>: summand2) <span class="keywd">is</span> <span class="keywd">action</span> <a class="stri" href="#INT_ADD">"INT_ADD"</a>;
</pre><p>
  To execute an action a corresponding C function must
  be present in the s7 interpreter. The function for the
  action <tt><a class="link" href="#INT_ADD">INT_ADD</a></tt> is <tt><a class="func" href="#int_add">int_add</a>()</tt>. The function <tt><a class="func" href="#int_add">int_add</a>()</tt>
  is defined in the file <tt><span class="lib">"intlib.c"</span></tt> with:
</p><pre class="indent">
<a class="type" href="ffi.htm#objectType">objectType</a> <a name="int_add">int_add</a> (<a class="type" href="ffi.htm#listType">listType</a> arguments)

  { <span class="comment">/* int_add */</span>
    <a class="func" href="ffi.htm#isit_int">isit_int</a>(<a class="func" href="ffi.htm#arg_1">arg_1</a>(arguments));
    <a class="func" href="ffi.htm#isit_int">isit_int</a>(<a class="func" href="ffi.htm#arg_3">arg_3</a>(arguments));
    <span class="keywd">return</span> <a class="func" href="ffi.htm#bld_int_temp">bld_int_temp</a>(
        <a class="func" href="ffi.htm#take_int">take_int</a>(<a class="func" href="ffi.htm#arg_1">arg_1</a>(arguments)) +
        <a class="func" href="ffi.htm#take_int">take_int</a>(<a class="func" href="ffi.htm#arg_3">arg_3</a>(arguments)));
  } <span class="comment">/* int_add */</span>
</pre><p>
  The function <tt><a class="func" href="#int_add">int_add</a>()</tt> adds the first and the third argument (the
  second argument contains the + symbol. The file <tt><span class="lib">"objutl.h"</span></tt>
  contains several macros and functions which help to handle the
  arguments (parameter list) of a C primitive action function.
<ul>
    <li>The macros <tt><a class="func" href="ffi.htm#arg_1">arg_1</a></tt>, <tt><a class="func" href="ffi.htm#arg_2">arg_2</a></tt>,
      <tt><a class="func" href="ffi.htm#arg_3">arg_3</a></tt>, etc. can be used to get an individual argument
      (E.g.: <tt><a class="func" href="ffi.htm#arg_3">arg_3</a>(arguments)</tt> ).</li>

    <li>The macros <tt><a class="func" href="ffi.htm#isit_int">isit_int</a></tt>, <tt><a class="func" href="ffi.htm#isit_stri">isit_stri</a></tt>,
      <tt><a class="func" href="ffi.htm#isit_file">isit_file</a></tt>, etc. can be used to check for the correct
      <tt><a class="type" href="types.htm#category">category</a></tt> of an argument
      (E.g.: <tt><a class="func" href="ffi.htm#isit_int">isit_int</a>(<a class="func" href="ffi.htm#arg_1">arg_1</a>(arguments))</tt> ).</li>

    <li>The macros <tt><a class="func" href="ffi.htm#take_char">take_char</a></tt>, <tt><a class="func" href="ffi.htm#take_float">take_float</a></tt>,
      <tt><a class="func" href="ffi.htm#take_bigint">take_bigint</a></tt>, etc. can be used to get the corresponding
      value of an argument (E.g.: <tt><a class="func" href="ffi.htm#take_int">take_int</a>(<a class="func" href="ffi.htm#arg_1">arg_1</a>(arguments))</tt> ).</li>

    <li>The functions <tt><a class="func" href="ffi.htm#bld_int_temp">bld_int_temp</a></tt>, <tt><a class="func" href="ffi.htm#bld_array_temp">bld_array_temp</a></tt>,
      <tt><a class="func" href="ffi.htm#bld_win_temp">bld_win_temp</a></tt>, etc. can be used to create the (<tt><a class="type" href="ffi.htm#objectType">objectType</a></tt>)
      result of a primitive action (E.g.: <tt>return <a class="func" href="ffi.htm#bld_int_temp">bld_int_temp</a>(0);</tt> ).</li>
</ul><p>
  The file <tt><span class="lib">"intlib.h"</span></tt> contains the prototype for the <tt><a class="func" href="#int_add">int_add</a>()</tt>
  function:
</p><pre class="indent">
<a class="type" href="ffi.htm#objectType">objectType</a> <a class="func" href="#int_add">int_add</a> (<a class="type" href="ffi.htm#listType">listType</a> arguments);
</pre><p>
  Additionally every primitive action is registered in the file
  <tt><span class="lib">"primitive.c"</span></tt>. The line which incorporates <tt><a class="link" href="#INT_ADD">INT_ADD</a></tt> is:
</p><pre class="indent">
{ <span class="stri">"INT_ADD"</span>,             <a class="func" href="#int_add">int_add</a>,             },
</pre><p>
  The entries of the primitive action in the file <tt><span class="lib">"primitive.c"</span></tt> are
  sorted alphabetically. With this definitions the s7 interpreter
  understands a primitive action.
</p><p>
  To allow a primitive function in a compiled Seed7 program the
  Seed7 compiler (s7c) needs to know the action also. The
  compiler function which creates code for the <tt><a class="link" href="#INT_ADD">INT_ADD</a></tt> action is:
</p><pre class="indent">
<a class="keywd_no_ul" href="decls.htm#Procedure_declarations">const</a> <a class="type" href="types.htm#proc">proc</a>: process (<a class="link" href="#INT_ADD">INT_ADD</a>, <a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#reference">reference</a>: function,
    <a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#ref_list">ref_list</a>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") + ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end func</span>;
</pre><p>
  This function is defined in <tt><span class="lib">"<a class="lib" href="../prg/comp/int_act.htm">seed7/lib/comp/int_act.s7i</a>"</span></tt> and
  called from the function <tt><span class="func">process_action</span></tt> with:
</p><pre class="indent">
<span class="keywd">elsif</span> action_name = <span class="stri">"INT_ADD"</span> <span class="keywd">then</span>
  process(<a class="link" href="#INT_ADD">INT_ADD</a>, function, params, c_expr);
</pre><p>
  Some primitive actions are more complicated and inline code would
  not be the best solution for it. In this case an additional helper
  function is used. The action <tt><a class="link" href="#INT_LOG2">INT_LOG2</a></tt> is such an action. The
  definition of the function <tt><span class="func">int_log2</span>()</tt> in the file <tt><span class="lib">"intlib.c"</span></tt> is:
</p><pre class="indent">
<a class="type" href="ffi.htm#objectType">objectType</a> <a name="int_log2">int_log2</a> (<a class="type" href="ffi.htm#listType">listType</a> arguments)

  { <span class="comment">/* int_log2 */</span>
    <a class="func" href="ffi.htm#isit_int">isit_int</a>(<a class="func" href="ffi.htm#arg_1">arg_1</a>(arguments));
    <span class="keywd">return</span> <a class="func" href="ffi.htm#bld_int_temp">bld_int_temp</a>(
        <a class="func" href="#intLog2">intLog2</a>(<a class="func" href="ffi.htm#take_int">take_int</a>(<a class="func" href="ffi.htm#arg_1">arg_1</a>(arguments))));
  } <span class="comment">/* int_log2 */</span>
</pre><p>
  The main work for the primitive action <tt><a class="link" href="#INT_LOG2">INT_LOG2</a></tt> is done in
  the helper function <tt><a class="func" href="#intLog2">intLog2</a>()</tt>. The helper function <tt><a class="func" href="#intLog2">intLog2</a>()</tt>
  can be found in the file <tt><span class="lib">"int_rtl.c"</span></tt>:
</p><pre class="indent">
<span class="comment">/**
 *  Compute the truncated base 2 logarithm of an integer number.
 *  @return the truncated base 2 logarithm.
 *  @exception NUMERIC_ERROR The number is negative.
 */</span>
<a class="type" href="ffi.htm#intType">intType</a> <a name="intLog2">intLog2</a> (<a class="type" href="ffi.htm#intType">intType</a> number)

  {
    int result;

  <span class="comment">/* intLog2 */</span>
    <span class="keywd">if</span> (unlikely(number &lt; 0)) {
      raise_error(NUMERIC_ERROR);
      result = 0;
    } <span class="keywd">else</span> {
      result = uintMostSignificantBit((<a class="type" href="ffi.htm#uintType">uintType</a>) number);
    } <span class="comment">/* if */</span>
    <span class="keywd">return</span> result;
  } <span class="comment">/* intLog2 */</span>
</pre><p>
  The file <tt><span class="lib">"int_rtl.h"</span></tt> contains a prototype definition for the
  <tt><a class="func" href="#intLog2">intLog2</a>()</tt> helper function:
</p><pre class="indent">
<a class="type" href="ffi.htm#intType">intType</a> <a class="func" href="#intLog2">intLog2</a> (<a class="type" href="ffi.htm#intType">intType</a> number);
</pre><p>
  The helper functions are also used in the code generated by
  the Seed7 compiler:
</p><pre class="indent">
<a class="keywd_no_ul" href="decls.htm#Procedure_declarations">const</a> <a class="type" href="types.htm#proc">proc</a>: process (<a class="link" href="#INT_LOG2">INT_LOG2</a>, <a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#reference">reference</a>: function,
    <a class="keywd_no_ul" href="params.htm#in_parameter">in</a> <a class="type" href="types.htm#ref_list">ref_list</a>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"intLog2("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end func</span>;
</pre><p>
  The compiler writes a prototype of <tt><a class="func" href="#intLog2">intLog2</a>()</tt> in the
  function <tt><span class="func">write_prototypes</span></tt>:
</p><pre class="indent">
declareExtern(<span class="stri">"intType     intLog2 (intType);"</span>);
</pre><p>
  All the *lib.c files containing primitive actions and various
  other files with their functions are grouped together in the
  <tt><span class="lib">"s7_comp.a"</span></tt> library (Licensed under GPL). Furthermore the C
  primitive action functions (E.g.: int_parse) of the *lib.c
  files may use corresponding functions (E.g.: intParse) which
  can be found in *_rtl.c files (E.g.: <tt><span class="lib">"int_rtl.c"</span></tt>). The *_rtl.c
  files are grouped together in the <tt><span class="lib">"seed7_05.a"</span></tt> library
  (Licensed under LGPL). When a Seed7 program is compiled with
  the Seed7 compiler (s7c) inline code is generated for many
  primitive actions. To implement the remaining primitive
  actions the functions of the <tt><span class="lib">"seed7_05.a"</span></tt> library are used.
</p>

<a name="ACTION"><h3>15.1 Actions for the type ACTION</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>actlib.c function</th>   <th>act_comp.c function</th></tr>
    <tr><td>ACT_ILLEGAL</td>         <td>act_illegal</td>         <td>&nbsp;</td></tr>
    <tr><td>ACT_CPY</td>             <td>act_cpy</td>             <td>=</td></tr>
    <tr><td>ACT_CREATE</td>          <td>act_create</td>          <td>&nbsp;</td></tr>
    <tr><td>ACT_EQ</td>              <td>act_eq</td>              <td>==</td></tr>
    <tr><td>ACT_GEN</td>             <td>act_gen</td>             <td>&nbsp;</td></tr>
    <tr><td>ACT_ICONV1</td>          <td>act_iconv1</td>          <td>actIConv</td></tr>
    <tr><td>ACT_ICONV3</td>          <td>act_iconv3</td>          <td>actIConv</td></tr>
    <tr><td>ACT_NE</td>              <td>act_ne</td>              <td>!=</td></tr>
    <tr><td>ACT_ORD</td>             <td>act_ord</td>             <td>actOrd</td></tr>
    <tr><td>ACT_STR</td>             <td>act_str</td>             <td>actStr</td></tr>
    <tr><td>ACT_VALUE</td>           <td>act_value</td>           <td>actValue</td></tr>
</table><p></p>

<a name="array"><h3>15.2 Actions for array types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>arrlib.c function</th>   <th>arr_rtl.c function</th></tr>
    <tr><td>ARR_APPEND</td>          <td>arr_append</td>          <td>arrAppend</td></tr>
    <tr><td>ARR_ARRLIT</td>          <td>arr_arrlit</td>          <td>arrArrlit</td></tr>
    <tr><td>ARR_ARRLIT2</td>         <td>arr_arrlit2</td>         <td>arrArrlit2</td></tr>
    <tr><td>ARR_BASELIT</td>         <td>arr_baselit</td>         <td>arrBaselit</td></tr>
    <tr><td>ARR_BASELIT2</td>        <td>arr_baselit2</td>        <td>arrBaselit2</td></tr>
    <tr><td>ARR_CAT</td>             <td>arr_cat</td>             <td>arrCat</td></tr>
    <tr><td>ARR_CONV</td>            <td>arr_conv</td>            <td>(noop)</td></tr>
    <tr><td>ARR_CPY</td>             <td>arr_cpy</td>             <td>cpy_ ...</td></tr>
    <tr><td>ARR_CREATE</td>          <td>arr_create</td>          <td>create_ ...</td></tr>
    <tr><td>ARR_DESTR</td>           <td>arr_destr</td>           <td>destr_ ...</td></tr>
    <tr><td>ARR_EMPTY</td>           <td>arr_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>ARR_EXTEND</td>          <td>arr_extend</td>          <td>arrExtend</td></tr>
    <tr><td>ARR_GEN</td>             <td>arr_gen</td>             <td>arrGen</td></tr>
    <tr><td>ARR_HEAD</td>            <td>arr_head</td>            <td>arrHead</td></tr>
    <tr><td>ARR_IDX</td>             <td>arr_idx</td>             <td>a-&gt;arr[b-a-&gt;min_position]</td></tr>
    <tr><td>ARR_INSERT</td>          <td>arr_insert</td>          <td>arrInsert</td></tr>
    <tr><td>ARR_INSERT_ARRAY</td>    <td>arr_insert_array</td>    <td>arrInsertArray</td></tr>
    <tr><td>ARR_LNG</td>             <td>arr_lng</td>             <td>a->max_position-a->min_position + 1</td></tr>
    <tr><td>ARR_MAXIDX</td>          <td>arr_maxidx</td>          <td>a->max_position</td></tr>
    <tr><td>ARR_MINIDX</td>          <td>arr_minidx</td>          <td>a->min_position</td></tr>
    <tr><td>ARR_PUSH</td>            <td>arr_push</td>            <td>arrPush</td></tr>
    <tr><td>ARR_RANGE</td>           <td>arr_range</td>           <td>arrRange</td></tr>
    <tr><td>ARR_REMOVE</td>          <td>arr_remove</td>          <td>arrRemove</td></tr>
    <tr><td>ARR_REMOVE_ARRAY</td>    <td>arr_remove_array</td>    <td>arrRemoveArray</td></tr>
    <tr><td>ARR_SORT</td>            <td>arr_sort</td>            <td>arrSort</td></tr>
    <tr><td>ARR_SORT_REVERSE</td>    <td>arr_sort_reverse</td>    <td>arrSortReverse</td></tr>
    <tr><td>ARR_SUBARR</td>          <td>arr_subarr</td>          <td>arrSubarr, arrSubarrTemp</td></tr>
    <tr><td>ARR_TAIL</td>            <td>arr_tail</td>            <td>arrTail</td></tr>
    <tr><td>ARR_TIMES</td>           <td>arr_times</td>           <td>times_ ...</td></tr>
</table><p></p>

<a name="bigInteger"><h3>15.3 Actions for the type bigInteger</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>biglib.c function</th>   <th>big_rtl.c function</th></tr>
    <tr><td>BIG_ABS</td>             <td>big_abs</td>             <td>bigAbs</td></tr>
    <tr><td>BIG_ADD</td>             <td>big_add</td>             <td>bigAdd, bigAddTemp</td></tr>
    <tr><td>BIG_ADD_ASSIGN</td>      <td>big_add_assign</td>      <td>bigAddAssign, bigAddAssignSignedDigit</td></tr>
    <tr><td>BIG_BIT_LENGTH</td>      <td>big_bit_length</td>      <td>bigBitLength</td></tr>
    <tr><td>BIG_CMP</td>             <td>big_cmp</td>             <td>bigCmp</td></tr>
    <tr><td>BIG_CONV</td>            <td>big_conv</td>            <td>(noop)</td></tr>
    <tr><td>BIG_CPY</td>             <td>big_cpy</td>             <td>bigCpy</td></tr>
    <tr><td>BIG_CREATE</td>          <td>big_create</td>          <td>bigCreate</td></tr>
    <tr><td>BIG_DECR</td>            <td>big_decr</td>            <td>bigDecr</td></tr>
    <tr><td>BIG_DESTR</td>           <td>big_destr</td>           <td>bigDestr</td></tr>
    <tr><td>BIG_DIV</td>             <td>big_div</td>             <td>bigDiv</td></tr>
    <tr><td>BIG_DIV_REM</td>         <td>big_div_rem</td>         <td>bigDivRem</td></tr>
    <tr><td>BIG_EQ</td>              <td>big_eq</td>              <td>bigEq</td></tr>
    <tr><td>BIG_FROM_BSTRI_BE</td>   <td>big_from_bstri_be</td>   <td>bigFromBStriBe</td></tr>
    <tr><td>BIG_FROM_BSTRI_LE</td>   <td>big_from_bstri_le</td>   <td>bigFromBStriLe</td></tr>
    <tr><td>BIG_GCD</td>             <td>big_gcd</td>             <td>bigGcd</td></tr>
    <tr><td>BIG_GE</td>              <td>big_ge</td>              <td>bigCmp >= 0</td></tr>
    <tr><td>BIG_GT</td>              <td>big_gt</td>              <td>bigCmp > 0</td></tr>
    <tr><td>BIG_HASHCODE</td>        <td>big_hashcode</td>        <td>bigHashCode</td></tr>
    <tr><td>BIG_ICONV1</td>          <td>big_iconv1</td>          <td>bigIConv</td></tr>
    <tr><td>BIG_ICONV3</td>          <td>big_iconv3</td>          <td>bigIConv</td></tr>
    <tr><td>BIG_INCR</td>            <td>big_incr</td>            <td>bigIncr</td></tr>
    <tr><td>BIG_IPOW</td>            <td>big_ipow</td>            <td>bigIPow</td></tr>
    <tr><td>BIG_LE</td>              <td>big_le</td>              <td>bigCmp &lt;= 0</td></tr>
    <tr><td>BIG_LOG10</td>           <td>big_log10</td>           <td>bigLog10</td></tr>
    <tr><td>BIG_LOG2</td>            <td>big_log2</td>            <td>bigLog2</td></tr>
    <tr><td>BIG_LOWEST_SET_BIT</td>  <td>big_lowest_set_bit</td>  <td>bigLowestSetBit</td></tr>
    <tr><td>BIG_LSHIFT</td>          <td>big_lshift</td>          <td>bigLShift</td></tr>
    <tr><td>BIG_LSHIFT_ASSIGN</td>   <td>big_lshift_assign</td>   <td>bigLShiftAssign</td></tr>
    <tr><td>BIG_LT</td>              <td>big_lt</td>              <td>bigCmp &lt; 0</td></tr>
    <tr><td>BIG_MDIV</td>            <td>big_mdiv</td>            <td>bigMDiv</td></tr>
    <tr><td>BIG_MOD</td>             <td>big_mod</td>             <td>bigMod</td></tr>
    <tr><td>BIG_MULT</td>            <td>big_mult</td>            <td>bigMult</td></tr>
    <tr><td>BIG_MULT_ASSIGN</td>     <td>big_mult_assign</td>     <td>bigMultAssign</td></tr>
    <tr><td>BIG_NE</td>              <td>big_ne</td>              <td>bigNe</td></tr>
    <tr><td>BIG_NEGATE</td>          <td>big_negate</td>          <td>bigNegate</td></tr>
    <tr><td>BIG_ODD</td>             <td>big_odd</td>             <td>bigOdd</td></tr>
    <tr><td>BIG_ORD</td>             <td>big_ord</td>             <td>bigOrd</td></tr>
    <tr><td>BIG_PARSE1</td>          <td>big_parse1</td>          <td>bigParse</td></tr>
    <tr><td>BIG_PARSE_BASED</td>     <td>big_parse_based</td>     <td>bigParseBased</td></tr>
    <tr><td>BIG_PLUS</td>            <td>big_plus</td>            <td>(noop)</td></tr>
    <tr><td>BIG_PRED</td>            <td>big_pred</td>            <td>bigPred</td></tr>
    <tr><td>BIG_RADIX</td>           <td>big_RADIX</td>           <td>bigRadix</td></tr>
    <tr><td>BIG_RAND</td>            <td>big_rand</td>            <td>bigRand</td></tr>
    <tr><td>BIG_REM</td>             <td>big_rem</td>             <td>bigRem</td></tr>
    <tr><td>BIG_RSHIFT</td>          <td>big_rshift</td>          <td>bigRShift</td></tr>
    <tr><td>BIG_RSHIFT_ASSIGN</td>   <td>big_rshift_assign</td>   <td>bigRShiftAssign</td></tr>
    <tr><td>BIG_SBTR</td>            <td>big_sbtr</td>            <td>bigSbtr, bigSbtrTemp</td></tr>
    <tr><td>BIG_SBTR_ASSIGN</td>     <td>big_sbtr_assign</td>     <td>bigSbtrAssign, bigAddAssignSignedDigit</td></tr>
    <tr><td>BIG_STR</td>             <td>big_str</td>             <td>bigStr</td></tr>
    <tr><td>BIG_SUCC</td>            <td>big_succ</td>            <td>bigSucc</td></tr>
    <tr><td>BIG_TO_BSTRI_BE</td>     <td>big_to_bstri_be</td>     <td>bigToBStriBe</td></tr>
    <tr><td>BIG_TO_BSTRI_LE</td>     <td>big_to_bstri_le</td>     <td>bigToBStriLe</td></tr>
    <tr><td>BIG_VALUE</td>           <td>big_value</td>           <td>bigValue</td></tr>
    <tr><td>BIG_radix</td>           <td>big_radix</td>           <td>bigRadix</td></tr>
</table><p></p>

<a name="binary"><h3>15.4 Actions for the types bin32 and bin64</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>binlib.c function</th>   <th>big_rtl.c or int_rtl.c function</th></tr>
    <tr><td>BIN_AND</td>             <td>bin_and</td>             <td>&amp;</td></tr>
    <tr><td>BIN_AND_ASSIGN</td>      <td>bin_and_assign</td>      <td>&amp;=</td></tr>
    <tr><td>BIN_BIG</td>             <td>bin_big</td>             <td>bigFromUInt64</td></tr>
    <tr><td>BIN_BINARY</td>          <td>bin_binary</td>          <td>bigToUInt64</td></tr>
    <tr><td>BIN_BIT_LENGTH</td>      <td>bin_bit_length</td>      <td>uint64MostSignificantBit</td></tr>
    <tr><td>BIN_BYTES_BE_2_UINT</td> <td>bin_bytes_be_2_uint</td> <td>uintBytesBe2UInt</td></tr>
    <tr><td>BIN_BYTES_LE_2_UINT</td> <td>bin_bytes_le_2_uint</td> <td>uintBytesLe2UInt</td></tr>
    <tr><td>BIN_CARD</td>            <td>bin_card</td>            <td>uintCard</td></tr>
    <tr><td>BIN_CMP</td>             <td>bin_cmp</td>             <td>uintCmp</td></tr>
    <tr><td>BIN_GET_BINARY_FROM_SET</td> <td>bin_get_binary_from_set</td> <td>setToUInt</td></tr>
    <tr><td>BIN_LOWEST_SET_BIT</td>  <td>bin_lowest_set_bit</td>  <td>(intType)(bits==0?-1:uint64LeastSignificantBit(bits))</td></tr>
    <tr><td>BIN_LSHIFT</td>          <td>bin_lshift</td>          <td>(intType)((uintType)(a&lt;&ltb))</td></tr>
    <tr><td>BIN_LSHIFT_ASSIGN</td>   <td>bin_lshift_assign</td>   <td>a=(intType)((uintType)(a&lt;&ltb))</td></tr>
    <tr><td>BIN_N_BYTES_BE</td>      <td>bin_n_bytes_be</td>      <td>uintNBytesBe</td></tr>
    <tr><td>BIN_N_BYTES_LE</td>      <td>bin_n_bytes_le</td>      <td>uintNBytesLe</td></tr>
    <tr><td>BIN_OR</td>              <td>bin_or</td>              <td>|</td></tr>
    <tr><td>BIN_OR_ASSIGN</td>       <td>bin_or_assign</td>       <td>|=</td></tr>
    <tr><td>BIN_RADIX</td>           <td>bin_RADIX</td>           <td>uintRadix</td></tr>
    <tr><td>BIN_RSHIFT</td>          <td>bin_rshift</td>          <td>(intType)((uintType)(a&gt;&gt;b))</td></tr>
    <tr><td>BIN_RSHIFT_ASSIGN</td>   <td>bin_rshift_assign</td>   <td>a=(intType)((uintType)(a&gt;&gt;b))</td></tr>
    <tr><td>BIN_STR</td>             <td>bin_str</td>             <td>uintStr</td></tr>
    <tr><td>BIN_XOR</td>             <td>bin_xor</td>             <td>^</td></tr>
    <tr><td>BIN_XOR_ASSIGN</td>      <td>bin_xor_assign</td>      <td>^=</td></tr>
    <tr><td>BIN_radix</td>           <td>bin_radix</td>           <td>uintRadix</td></tr>
</table><p></p>

<a name="boolean"><h3>15.5 Actions for the type boolean</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>blnlib.c function</th>   <th>bln_rtl.c function</th></tr>
    <tr><td>BLN_AND</td>             <td>bln_and</td>             <td>&amp;&amp;</td></tr>
    <tr><td>BLN_CPY</td>             <td>bln_cpy</td>             <td>blnCpy</td></tr>
    <tr><td>BLN_CREATE</td>          <td>bln_create</td>          <td>blnCreate</td></tr>
    <tr><td>BLN_EQ</td>              <td>bln_eq</td>              <td>==</td></tr>
    <tr><td>BLN_GE</td>              <td>bln_ge</td>              <td>&gt;=</td></tr>
    <tr><td>BLN_GT</td>              <td>bln_gt</td>              <td>&gt;</td></tr>
    <tr><td>BLN_ICONV1</td>          <td>bln_iconv1</td>          <td>&amp; 1</td></tr>
    <tr><td>BLN_ICONV3</td>          <td>bln_iconv3</td>          <td>&amp; 1</td></tr>
    <tr><td>BLN_LE</td>              <td>bln_le</td>              <td>&lt;=</td></tr>
    <tr><td>BLN_LT</td>              <td>bln_lt</td>              <td>&lt;</td></tr>
    <tr><td>BLN_NE</td>              <td>bln_ne</td>              <td>!=</td></tr>
    <tr><td>BLN_NOT</td>             <td>bln_not</td>             <td>!</td></tr>
    <tr><td>BLN_OR</td>              <td>bln_or</td>              <td>||</td></tr>
    <tr><td>BLN_ORD</td>             <td>bln_ord</td>             <td>(intType)</td></tr>
    <tr><td>BLN_PRED</td>            <td>bln_pred</td>            <td>-1</td></tr>
    <tr><td>BLN_SUCC</td>            <td>bln_succ</td>            <td>+1</td></tr>
    <tr><td>BLN_TERNARY</td>         <td>bln_ternary</td>         <td>((cond)?(thenExpr):(elseExpr))</td></tr>
    <tr><td>BLN_VALUE</td>           <td>bln_value</td>           <td>blnValue</td></tr>
</table><p></p>

<a name="bstring"><h3>15.6 Actions for byte strings</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>bstlib.c function</th>   <th>bst_rtl.c function</th></tr>
    <tr><td>BST_APPEND</td>          <td>bst_append</td>          <td>bstAppend</td></tr>
    <tr><td>BST_CAT</td>             <td>bst_cat</td>             <td>bstCat</td></tr>
    <tr><td>BST_CMP</td>             <td>bst_cmp</td>             <td>bstCmp</td></tr>
    <tr><td>BST_CPY</td>             <td>bst_cpy</td>             <td>bstCpy</td></tr>
    <tr><td>BST_CREATE</td>          <td>bst_create</td>          <td>bstCreate</td></tr>
    <tr><td>BST_DESTR</td>           <td>bst_destr</td>           <td>bstDestr</td></tr>
    <tr><td>BST_EMPTY</td>           <td>bst_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>BST_EQ</td>              <td>bst_eq</td>              <td>a->size==b->size &amp;&amp; memcmp(a,b,a->size*sizeof(unsigned char))==0</td></tr>
    <tr><td>BST_HASHCODE</td>        <td>bst_hashcode</td>        <td>bstHashCode</td></tr>
    <tr><td>BST_IDX</td>             <td>bst_idx</td>             <td>a-&gt;mem[b-1]</td></tr>
    <tr><td>BST_LNG</td>             <td>bst_lng</td>             <td>a->size</td></tr>
    <tr><td>BST_NE</td>              <td>bst_ne</td>              <td>a->size!=b->size || memcmp(a,b,a->size*sizeof(unsigned char))!=0</td></tr>
    <tr><td>BST_PARSE1</td>          <td>bst_parse1</td>          <td>bstParse</td></tr>
    <tr><td>BST_STR</td>             <td>bst_str</td>             <td>bstStr</td></tr>
    <tr><td>BST_VALUE</td>           <td>bst_value</td>           <td>bstValue</td></tr>
</table><p></p>

<a name="char"><h3>15.7 Actions for the type char</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>chrlib.c function</th>   <th>chr_rtl.c function</th></tr>
    <tr><td>CHR_CLIT</td>            <td>chr_clit</td>            <td>chrCLit</td></tr>
    <tr><td>CHR_CMP</td>             <td>chr_cmp</td>             <td>chrCmp</td></tr>
    <tr><td>CHR_CPY</td>             <td>chr_cpy</td>             <td>chrCpy</td></tr>
    <tr><td>CHR_CREATE</td>          <td>chr_create</td>          <td>chrCreate</td></tr>
    <tr><td>CHR_DECR</td>            <td>chr_decr</td>            <td>--</td></tr>
    <tr><td>CHR_EQ</td>              <td>chr_eq</td>              <td>==</td></tr>
    <tr><td>CHR_GE</td>              <td>chr_ge</td>              <td>&gt;=</td></tr>
    <tr><td>CHR_GT</td>              <td>chr_gt</td>              <td>&gt;</td></tr>
    <tr><td>CHR_HASHCODE</td>        <td>chr_hashcode</td>        <td>(intType)((scharType)a)</td></tr>
    <tr><td>CHR_ICONV1</td>          <td>chr_iconv1</td>          <td>(charType)</td></tr>
    <tr><td>CHR_ICONV3</td>          <td>chr_iconv3</td>          <td>(charType)</td></tr>
    <tr><td>CHR_INCR</td>            <td>chr_incr</td>            <td>++</td></tr>
    <tr><td>CHR_IS_LETTER</td>       <td>chr_is_letter</td>       <td>chrIsLetter</td></tr>
    <tr><td>CHR_LE</td>              <td>chr_le</td>              <td>&lt;=</td></tr>
    <tr><td>CHR_LOW</td>             <td>chr_low</td>             <td>chrLow</td></tr>
    <tr><td>CHR_LT</td>              <td>chr_lt</td>              <td>&lt;</td></tr>
    <tr><td>CHR_NE</td>              <td>chr_ne</td>              <td>!=</td></tr>
    <tr><td>CHR_ORD</td>             <td>chr_ord</td>             <td>(intType)</td></tr>
    <tr><td>CHR_PRED</td>            <td>chr_pred</td>            <td>-1</td></tr>
    <tr><td>CHR_STR</td>             <td>chr_str</td>             <td>chrStr</td></tr>
    <tr><td>CHR_SUCC</td>            <td>chr_succ</td>            <td>+1</td></tr>
    <tr><td>CHR_UP</td>              <td>chr_up</td>              <td>chrUp</td></tr>
    <tr><td>CHR_VALUE</td>           <td>chr_value</td>           <td>chrValue</td></tr>
    <tr><td>CHR_WIDTH</td>           <td>chr_width</td>           <td>chrWidth</td></tr>
</table><p></p>

<a name="commands"><h3>15.8 Actions for various directory, file and other commands</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>cmdlib.c function</th>   <th>cmd_rtl.c function</th></tr>
    <tr><td>CMD_BIG_FILESIZE</td>    <td>cmd_big_filesize</td>    <td>cmdBigFileSize</td></tr>
    <tr><td>CMD_CHDIR</td>           <td>cmd_chdir</td>           <td>cmdChdir</td></tr>
    <tr><td>CMD_CLONE_FILE</td>      <td>cmd_clone_file</td>      <td>cmdCloneFile</td></tr>
    <tr><td>CMD_CONFIG_VALUE</td>    <td>cmd_config_value</td>    <td>cmdConfigValue</td></tr>
    <tr><td>CMD_COPY_FILE</td>       <td>cmd_copy_file</td>       <td>cmdCopyFile</td></tr>
    <tr><td>CMD_ENVIRONMENT</td>     <td>cmd_environment</td>     <td>cmdEnvironment</td></tr>
    <tr><td>CMD_FILESIZE</td>        <td>cmd_filesize</td>        <td>cmdFileSize</td></tr>
    <tr><td>CMD_FILETYPE</td>        <td>cmd_filetype</td>        <td>cmdFileType</td></tr>
    <tr><td>CMD_FILETYPE_SL</td>     <td>cmd_filetype_sl</td>     <td>cmdFileTypeSL</td></tr>
    <tr><td>CMD_FINAL_PATH</td>      <td>cmd_final_path</td>      <td>cmdFinalPath</td></tr>
    <tr><td>CMD_GETCWD</td>          <td>cmd_getcwd</td>          <td>cmdGetcwd</td></tr>
    <tr><td>CMD_GETENV</td>          <td>cmd_getenv</td>          <td>cmdGetenv</td></tr>
    <tr><td>CMD_GET_ATIME</td>       <td>cmd_get_atime</td>       <td>cmdGetATime</td></tr>
    <tr><td>CMD_GET_ATIME_OF_SYMLINK</td> <td>cmd_get_atime_of_symlink</td> <td>cmdGetATimeOfSymlink</td></tr>
    <tr><td>CMD_GET_CTIME</td>       <td>cmd_get_ctime</td>       <td>cmdGetCTime</td></tr>
    <tr><td>CMD_GET_FILE_MODE</td>   <td>cmd_get_file_mode</td>   <td>cmdGetFileMode</td></tr>
    <tr><td>CMD_GET_FILE_MODE_OF_SYMLINK</td> <td>cmd_get_file_mode_of_symlink</td> <td>cmdGetFileModeOfSymlink</td></tr>
    <tr><td>CMD_GET_GROUP</td>       <td>cmd_get_group</td>       <td>cmdGetGroup</td></tr>
    <tr><td>CMD_GET_GROUP_OF_SYMLINK</td> <td>cmd_get_group_of_symlink</td> <td>cmdGetGroupOfSymlink</td></tr>
    <tr><td>CMD_GET_MTIME</td>       <td>cmd_get_mtime</td>       <td>cmdGetMTime</td></tr>
    <tr><td>CMD_GET_MTIME_OF_SYMLINK</td> <td>cmd_get_mtime_of_symlink</td> <td>cmdGetMTimeOfSymlink</td></tr>
    <tr><td>CMD_GET_OWNER</td>       <td>cmd_get_owner</td>       <td>cmdGetOwner</td></tr>
    <tr><td>CMD_GET_OWNER_OF_SYMLINK</td> <td>cmd_get_owner_of_symlink</td> <td>cmdGetOwnerOfSymlink</td></tr>
    <tr><td>CMD_GET_SEARCH_PATH</td> <td>cmd_get_search_path</td> <td>cmdGetSearchPath</td></tr>
    <tr><td>CMD_HOME_DIR</td>        <td>cmd_home_dir</td>        <td>cmdHomeDir</td></tr>
    <tr><td>CMD_MAKE_DIR</td>        <td>cmd_make_dir</td>        <td>cmdMakeDir</td></tr>
    <tr><td>CMD_MAKE_LINK</td>       <td>cmd_make_link</td>       <td>cmdMakeLink</td></tr>
    <tr><td>CMD_MOVE</td>            <td>cmd_move</td>            <td>cmdMove</td></tr>
    <tr><td>CMD_READ_DIR</td>        <td>cmd_read_dir</td>        <td>cmdReadDir</td></tr>
    <tr><td>CMD_READ_LINK</td>       <td>cmd_read_link</td>       <td>cmdReadLink</td></tr>
    <tr><td>CMD_READ_LINK_ABSOLUTE</td> <td>cmd_read_link_absolute</td> <td>cmdReadLinkAbsolute</td></tr>
    <tr><td>CMD_REMOVE_FILE</td>     <td>cmd_remove_file</td>     <td>cmdRemoveFile</td></tr>
    <tr><td>CMD_REMOVE_TREE</td>     <td>cmd_remove_tree</td>     <td>cmdRemoveTree</td></tr>
    <tr><td>CMD_SETENV</td>          <td>cmd_setenv</td>          <td>cmdSetenv</td></tr>
    <tr><td>CMD_SET_ATIME</td>       <td>cmd_set_atime</td>       <td>cmdSetATime</td></tr>
    <tr><td>CMD_SET_FILEMODE</td>    <td>cmd_set_filemode</td>    <td>cmdSetFileMode</td></tr>
    <tr><td>CMD_SET_GROUP</td>       <td>cmd_set_group</td>       <td>cmdSetGroup</td></tr>
    <tr><td>CMD_SET_GROUP_OF_SYMLINK</td> <td>cmd_set_group_of_symlink</td> <td>cmdSetGroupOfSymlink</td></tr>
    <tr><td>CMD_SET_MTIME</td>       <td>cmd_set_mtime</td>       <td>cmdSetMTime</td></tr>
    <tr><td>CMD_SET_MTIME_OF_SYMLINK</td> <td>cmd_set_mtime_of_symlink</td> <td>cmdSetMTimeOfSymlink</td></tr>
    <tr><td>CMD_SET_OWNER</td>       <td>cmd_set_owner</td>       <td>cmdSetOwner</td></tr>
    <tr><td>CMD_SET_OWNER_OF_SYMLINK</td> <td>cmd_set_owner_of_symlink</td> <td>cmdSetOwnerOfSymlink</td></tr>
    <tr><td>CMD_SET_SEARCH_PATH</td> <td>cmd_set_search_path</td> <td>cmdSetSearchPath</td></tr>
    <tr><td>CMD_SHELL</td>           <td>cmd_shell</td>           <td>cmdShell</td></tr>
    <tr><td>CMD_SHELL_ESCAPE</td>    <td>cmd_shell_escape</td>    <td>cmdShellEscape</td></tr>
    <tr><td>CMD_TO_OS_PATH</td>      <td>cmd_to_os_path</td>      <td>cmdToOsPath</td></tr>
    <tr><td>CMD_UNSETENV</td>        <td>cmd_unsetenv</td>        <td>cmdUnsetenv</td></tr>
</table><p></p>

<a name="console_output"><h3>15.9 Actions for text (console) screen output</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>scrlib.c function</th>   <th>con_inf.c/con_rtl.c/con_win.c function</th></tr>
    <tr><td>CON_CLEAR</td>           <td>con_clear</td>           <td>conClear</td></tr>
    <tr><td>CON_COLUMN</td>          <td>con_column</td>          <td>conColumn</td></tr>
    <tr><td>CON_CURSOR</td>          <td>con_cursor</td>          <td>conCursor</td></tr>
    <tr><td>CON_FLUSH</td>           <td>con_flush</td>           <td>conFlush</td></tr>
    <tr><td>CON_HEIGHT</td>          <td>con_height</td>          <td>conHeight</td></tr>
    <tr><td>CON_H_SCL</td>           <td>con_h_scl</td>           <td>conHScroll</td></tr>
    <tr><td>CON_LINE</td>            <td>con_line</td>            <td>conLine</td></tr>
    <tr><td>CON_OPEN</td>            <td>con_open</td>            <td>conOpen</td></tr>
    <tr><td>CON_SETPOS</td>          <td>con_setpos</td>          <td>conSetpos</td></tr>
    <tr><td>CON_V_SCL</td>           <td>con_v_scl</td>           <td>conVScroll</td></tr>
    <tr><td>CON_WIDTH</td>           <td>con_width</td>           <td>conWidth</td></tr>
    <tr><td>CON_WRITE</td>           <td>con_write</td>           <td>conWrite</td></tr>
</table><p></p>

<a name="declarations"><h3>15.10 Actions for declarations</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>dcllib.c function</th></tr>
    <tr><td>DCL_ATTR</td>            <td>dcl_attr</td></tr>
    <tr><td>DCL_CONST</td>           <td>dcl_const</td></tr>
    <tr><td>DCL_ELEMENTS</td>        <td>dcl_elements</td></tr>
    <tr><td>DCL_FWD</td>             <td>dcl_fwd</td></tr>
    <tr><td>DCL_FWDVAR</td>          <td>dcl_fwdvar</td></tr>
    <tr><td>DCL_GETFUNC</td>         <td>dcl_getfunc</td></tr>
    <tr><td>DCL_GETOBJ</td>          <td>dcl_getobj</td></tr>
    <tr><td>DCL_GLOBAL</td>          <td>dcl_global</td></tr>
    <tr><td>DCL_IN1</td>             <td>dcl_in1</td></tr>
    <tr><td>DCL_IN1VAR</td>          <td>dcl_in1var</td></tr>
    <tr><td>DCL_IN2</td>             <td>dcl_in2</td></tr>
    <tr><td>DCL_IN2VAR</td>          <td>dcl_in2var</td></tr>
    <tr><td>DCL_INOUT1</td>          <td>dcl_inout1</td></tr>
    <tr><td>DCL_INOUT2</td>          <td>dcl_inout2</td></tr>
    <tr><td>DCL_PARAM_ATTR</td>      <td>dcl_param_attr</td></tr>
    <tr><td>DCL_REF1</td>            <td>dcl_ref1</td></tr>
    <tr><td>DCL_REF2</td>            <td>dcl_ref2</td></tr>
    <tr><td>DCL_SYMB</td>            <td>dcl_symb</td></tr>
    <tr><td>DCL_SYNTAX</td>          <td>dcl_syntax</td></tr>
    <tr><td>DCL_VAL1</td>            <td>dcl_val1</td></tr>
    <tr><td>DCL_VAL2</td>            <td>dcl_val2</td></tr>
    <tr><td>DCL_VAR</td>             <td>dcl_var</td></tr>
</table><p></p>

<a name="graphic_output"><h3>15.11 Actions to do graphic output</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>drwlib.c function</th>   <th>drw_rtl.c/drw_x11.c/drw_win.c function</th></tr>
    <tr><td>DRW_ARC</td>             <td>drw_arc</td>             <td>drwArc</td></tr>
    <tr><td>DRW_ARC2</td>            <td>drw_arc2</td>            <td>drwArc2</td></tr>
    <tr><td>DRW_BACKGROUND</td>      <td>drw_background</td>      <td>drwBackground</td></tr>
    <tr><td>DRW_BORDER</td>          <td>drw_border</td>          <td>drwBorder</td></tr>
    <tr><td>DRW_CAPTURE</td>         <td>drw_capture</td>         <td>drwCapture</td></tr>
    <tr><td>DRW_CIRCLE</td>          <td>drw_circle</td>          <td>drwCircle</td></tr>
    <tr><td>DRW_CLEAR</td>           <td>drw_clear</td>           <td>drwClear</td></tr>
    <tr><td>DRW_CMP</td>             <td>drw_cmp</td>             <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>DRW_COLOR</td>           <td>drw_color</td>           <td>drwColor</td></tr>
    <tr><td>DRW_CONV_POINT_LIST</td> <td>drw_conv_point_list</td> <td>drwConvPointList</td></tr>
    <tr><td>DRW_COPYAREA</td>        <td>drw_copyarea</td>        <td>drwCopyArea</td></tr>
    <tr><td>DRW_CPY</td>             <td>drw_cpy</td>             <td>drwCpy</td></tr>
    <tr><td>DRW_CREATE</td>          <td>drw_create</td>          <td>drwCreate</td></tr>
    <tr><td>DRW_DESTR</td>           <td>drw_destr</td>           <td>drwDestr</td></tr>
    <tr><td>DRW_EMPTY</td>           <td>drw_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>DRW_EQ</td>              <td>drw_eq</td>              <td>==</td></tr>
    <tr><td>DRW_FARCCHORD</td>       <td>drw_farcchord</td>       <td>drwFArcChord</td></tr>
    <tr><td>DRW_FARCPIESLICE</td>    <td>drw_farcpieslice</td>    <td>drwFArcPieSlice</td></tr>
    <tr><td>DRW_FCIRCLE</td>         <td>drw_fcircle</td>         <td>drwFCircle</td></tr>
    <tr><td>DRW_FELLIPSE</td>        <td>drw_fellipse</td>        <td>drwFEllipse</td></tr>
    <tr><td>DRW_FLUSH</td>           <td>drw_flush</td>           <td>drwFlush</td></tr>
    <tr><td>DRW_FPOLY_LINE</td>      <td>drw_fpoly_line</td>      <td>drwFPolyLine</td></tr>
    <tr><td>DRW_GEN_POINT_LIST</td>  <td>drw_gen_point_list</td>  <td>drwGenPointList</td></tr>
    <tr><td>DRW_GET_IMAGE_PIXEL</td> <td>drw_get_image_pixel</td> <td>drwGetImagePixel</td></tr>
    <tr><td>DRW_GET_PIXEL</td>       <td>drw_get_pixel</td>       <td>drwGetPixel</td></tr>
    <tr><td>DRW_GET_PIXEL_ARRAY</td> <td>drw_get_pixel_array</td> <td>drwGetPixelArray</td></tr>
    <tr><td>DRW_GET_PIXEL_DATA</td>  <td>drw_get_pixel_data</td>  <td>drwGetPixelData</td></tr>
    <tr><td>DRW_GET_PIXEL_DATA_FROM_ARRAY</td> <td>drw_get_pixel_data_from_array</td> <td>drwGetPixelDataFromArray</td></tr>
    <tr><td>DRW_GET_PIXMAP</td>      <td>drw_get_pixmap</td>      <td>drwGetPixmap</td></tr>
    <tr><td>DRW_GET_PIXMAP_FROM_PIXELS</td> <td>drw_get_pixmap_from_pixels</td> <td>drwGetPixmapFromPixels</td></tr>
    <tr><td>DRW_HASHCODE</td>        <td>drw_hashcode</td>        <td>(intType)(((memSizeType)a)&gt;&gt;6)</td></tr>
    <tr><td>DRW_HEIGHT</td>          <td>drw_height</td>          <td>drwHeight</td></tr>
    <tr><td>DRW_LINE</td>            <td>drw_line</td>            <td>drwLine</td></tr>
    <tr><td>DRW_NE</td>              <td>drw_ne</td>              <td>!=</td></tr>
    <tr><td>DRW_NEW_PIXMAP</td>      <td>drw_new_pixmap</td>      <td>drwNewPixmap</td></tr>
    <tr><td>DRW_OPEN</td>            <td>drw_open</td>            <td>drwOpen</td></tr>
    <tr><td>DRW_OPEN_SUB_WINDOW</td> <td>drw_open_sub_window</td> <td>drwOpenSubWindow</td></tr>
    <tr><td>DRW_PARC</td>            <td>drw_parc</td>            <td>drwPArc</td></tr>
    <tr><td>DRW_PCIRCLE</td>         <td>drw_pcircle</td>         <td>drwPCircle</td></tr>
    <tr><td>DRW_PFARC</td>           <td>drw_pfarc</td>           <td>drwPFArc</td></tr>
    <tr><td>DRW_PFARCCHORD</td>      <td>drw_pfarcchord</td>      <td>drwPFArcChord</td></tr>
    <tr><td>DRW_PFARCPIESLICE</td>   <td>drw_pfarcpieslice</td>   <td>drwFArcPieSlice</td></tr>
    <tr><td>DRW_PFCIRCLE</td>        <td>drw_pfcircle</td>        <td>drwPFCircle</td></tr>
    <tr><td>DRW_PFELLIPSE</td>       <td>drw_pfellipse</td>       <td>drwPFEllipse</td></tr>
    <tr><td>DRW_PIXEL_TO_RGB</td>    <td>drw_pixel_to_rgb</td>    <td>drwPixelToRgb</td></tr>
    <tr><td>DRW_PLINE</td>           <td>drw_pline</td>           <td>drwPLine</td></tr>
    <tr><td>DRW_POINT</td>           <td>drw_point</td>           <td>drwPoint</td></tr>
    <tr><td>DRW_POINTER_XPOS</td>    <td>drw_pointer_xpos</td>    <td>drwPointerXpos</td></tr>
    <tr><td>DRW_POINTER_YPOS</td>    <td>drw_pointer_ypos</td>    <td>drwPointerYpos</td></tr>
    <tr><td>DRW_POLY_LINE</td>       <td>drw_poly_line</td>       <td>drwPolyLine</td></tr>
    <tr><td>DRW_PPOINT</td>          <td>drw_ppoint</td>          <td>drwPPoint</td></tr>
    <tr><td>DRW_PRECT</td>           <td>drw_prect</td>           <td>drwPRect</td></tr>
    <tr><td>DRW_PUT</td>             <td>drw_put</td>             <td>drwPut</td></tr>
    <tr><td>DRW_PUT_SCALED</td>      <td>drw_put_scaled</td>      <td>drwPutScaled</td></tr>
    <tr><td>DRW_RECT</td>            <td>drw_rect</td>            <td>drwRect</td></tr>
    <tr><td>DRW_RGBCOL</td>          <td>drw_rgbcol</td>          <td>drwRgbColor</td></tr>
    <tr><td>DRW_SCREEN_HEIGHT</td>   <td>drw_screen_height</td>   <td>drwScreenHeight</td></tr>
    <tr><td>DRW_SCREEN_WIDTH</td>    <td>drw_screen_width</td>    <td>drwScreenWidth</td></tr>
    <tr><td>DRW_SET_CLOSE_ACTION</td> <td>drw_set_close_action</td> <td>drwSetCloseAction</td></tr>
    <tr><td>DRW_SET_CONTENT</td>     <td>drw_set_content</td>     <td>drwSetContent</td></tr>
    <tr><td>DRW_SET_CURSOR_VISIBLE</td> <td>drw_set_cursor_visible</td> <td>drwSetCursorVisible</td></tr>
    <tr><td>DRW_SET_POINTER_POS</td> <td>drw_set_pointer_pos</td> <td>drwSetPointerPos</td></tr>
    <tr><td>DRW_SET_POS</td>         <td>drw_set_pos</td>         <td>drwSetPos</td></tr>
    <tr><td>DRW_SET_TRANSPARENT_COLOR</td> <td>drw_set_transparent_color</td> <td>drwSetTransparentColor</td></tr>
    <tr><td>DRW_SET_WINDOW_NAME</td> <td>drw_set_window_name</td> <td>drwSetWindowName</td></tr>
    <tr><td>DRW_TEXT</td>            <td>drw_text</td>            <td>drwText</td></tr>
    <tr><td>DRW_TO_BOTTOM</td>       <td>drw_to_bottom</td>       <td>drwToBottom</td></tr>
    <tr><td>DRW_TO_TOP</td>          <td>drw_to_top</td>          <td>drwToTop</td></tr>
    <tr><td>DRW_VALUE</td>           <td>drw_value</td>           <td>drwValue</td></tr>
    <tr><td>DRW_WIDTH</td>           <td>drw_width</td>           <td>drwWidth</td></tr>
    <tr><td>DRW_XPOS</td>            <td>drw_xpos</td>            <td>drwXPos</td></tr>
    <tr><td>DRW_YPOS</td>            <td>drw_ypos</td>            <td>drwYPos</td></tr>
</table><p></p>

<a name="enumeration"><h3>15.12 Actions for enumeration types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>enulib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>ENU_CONV</td>            <td>enu_conv</td>            <td>(noop)</td></tr>
    <tr><td>ENU_CPY</td>             <td>enu_cpy</td>             <td>=</td></tr>
    <tr><td>ENU_CREATE</td>          <td>enu_create</td>          <td>&nbsp;</td></tr>
    <tr><td>ENU_EQ</td>              <td>enu_eq</td>              <td>==</td></tr>
    <tr><td>ENU_GENLIT</td>          <td>enu_genlit</td>          <td>&nbsp;</td></tr>
    <tr><td>ENU_ICONV2</td>          <td>enu_iconv2</td>          <td>(noop)</td></tr>
    <tr><td>ENU_LIT</td>             <td>enu_lit</td>             <td>&nbsp;</td></tr>
    <tr><td>ENU_NE</td>              <td>enu_ne</td>              <td>!=</td></tr>
    <tr><td>ENU_ORD2</td>            <td>enu_ord2</td>            <td>(noop)</td></tr>
    <tr><td>ENU_VALUE</td>           <td>enu_value</td>           <td>enuValue</td></tr>
</table><p></p>

<a name="clib_file"><h3>15.13 Actions for the type clib_file</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>fillib.c function</th>   <th>fil_rtl.c function</th></tr>
    <tr><td>FIL_BIG_LNG</td>         <td>fil_big_lng</td>         <td>filBigLng</td></tr>
    <tr><td>FIL_BIG_SEEK</td>        <td>fil_big_seek</td>        <td>filBigSeek</td></tr>
    <tr><td>FIL_BIG_TELL</td>        <td>fil_big_tell</td>        <td>filBigTell</td></tr>
    <tr><td>FIL_CLOSE</td>           <td>fil_close</td>           <td>fclose</td></tr>
    <tr><td>FIL_CPY</td>             <td>fil_cpy</td>             <td>fltCpy</td></tr>
    <tr><td>FIL_CREATE</td>          <td>fil_create</td>          <td>fltCreate</td></tr>
    <tr><td>FIL_DESTR</td>           <td>fil_destr</td>           <td>filDestr</td></tr>
    <tr><td>FIL_EMPTY</td>           <td>fil_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>FIL_EOF</td>             <td>fil_eof</td>             <td>feof</td></tr>
    <tr><td>FIL_EQ</td>              <td>fil_eq</td>              <td>==</td></tr>
    <tr><td>FIL_ERR</td>             <td>fil_err</td>             <td>stderr</td></tr>
    <tr><td>FIL_FLUSH</td>           <td>fil_flush</td>           <td>fflush</td></tr>
    <tr><td>FIL_GETC</td>            <td>fil_getc</td>            <td>fgetc</td></tr>
    <tr><td>FIL_GETS</td>            <td>fil_gets</td>            <td>filGets</td></tr>
    <tr><td>FIL_HAS_NEXT</td>        <td>fil_has_next</td>        <td>filHasNext</td></tr>
    <tr><td>FIL_IN</td>              <td>fil_in</td>              <td>stdin</td></tr>
    <tr><td>FIL_INPUT_READY</td>     <td>fil_input_ready</td>     <td>filInputReady</td></tr>
    <tr><td>FIL_LINE_READ</td>       <td>fil_line_read</td>       <td>filLineRead</td></tr>
    <tr><td>FIL_LIT</td>             <td>fil_lit</td>             <td>filLit</td></tr>
    <tr><td>FIL_LNG</td>             <td>fil_lng</td>             <td>filLng</td></tr>
    <tr><td>FIL_NE</td>              <td>fil_ne</td>              <td>!=</td></tr>
    <tr><td>FIL_OPEN</td>            <td>fil_open</td>            <td>filOpen</td></tr>
    <tr><td>FIL_OPEN_NULL_DEVICE</td> <td>fil_open_null_device</td> <td>filOpenNullDevice</td></tr>
    <tr><td>FIL_OUT</td>             <td>fil_out</td>             <td>stdout</td></tr>
    <tr><td>FIL_PCLOSE</td>          <td>fil_pclose</td>          <td>filPclose</td></tr>
    <tr><td>FIL_PIPE</td>            <td>fil_pipe</td>            <td>filPipe</td></tr>
    <tr><td>FIL_POPEN</td>           <td>fil_popen</td>           <td>filPopen</td></tr>
    <tr><td>FIL_PRINT</td>           <td>fil_print</td>           <td>filPrint</td></tr>
    <tr><td>FIL_SEEK</td>            <td>fil_seek</td>            <td>filSeek</td></tr>
    <tr><td>FIL_SEEKABLE</td>        <td>fil_seekable</td>        <td>filSeekable</td></tr>
    <tr><td>FIL_SETBUF</td>          <td>fil_setbuf</td>          <td>filSetbuf</td></tr>
    <tr><td>FIL_TELL</td>            <td>fil_tell</td>            <td>filTell</td></tr>
    <tr><td>FIL_TERMINATED_READ</td> <td>fil_terminated_read</td> <td>filTerminatedRead</td></tr>
    <tr><td>FIL_TRUNCATE</td>        <td>fil_truncate</td>        <td>filTruncate</td></tr>
    <tr><td>FIL_VALUE</td>           <td>fil_value</td>           <td>filValue</td></tr>
    <tr><td>FIL_WORD_READ</td>       <td>fil_word_read</td>       <td>filWordRead</td></tr>
    <tr><td>FIL_WRITE</td>           <td>fil_write</td>           <td>filWrite</td></tr>
</table><p></p>

<a name="float"><h3>15.14 Actions for the type float</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>fltlib.c function</th>   <th>flt_rtl.c function</th></tr>
    <tr><td>FLT_ABS</td>             <td>flt_abs</td>             <td>fabs</td></tr>
    <tr><td>FLT_ACOS</td>            <td>flt_acos</td>            <td>acos</td></tr>
    <tr><td>FLT_ADD</td>             <td>flt_add</td>             <td>+</td></tr>
    <tr><td>FLT_ADD_ASSIGN</td>      <td>flt_add_assign</td>      <td>+=</td></tr>
    <tr><td>FLT_ASIN</td>            <td>flt_asin</td>            <td>asin</td></tr>
    <tr><td>FLT_ATAN</td>            <td>flt_atan</td>            <td>atan</td></tr>
    <tr><td>FLT_ATAN2</td>           <td>flt_atan2</td>           <td>atan2</td></tr>
    <tr><td>FLT_BITS2DOUBLE</td>     <td>flt_bits2double</td>     <td>(x.bits=a, x.aDouble)</td></tr>
    <tr><td>FLT_BITS2SINGLE</td>     <td>flt_bits2single</td>     <td>(x.bits=a, x.aSingle)</td></tr>
    <tr><td>FLT_CEIL</td>            <td>flt_ceil</td>            <td>ceil</td></tr>
    <tr><td>FLT_CMP</td>             <td>flt_cmp</td>             <td>fltCmp</td></tr>
    <tr><td>FLT_COS</td>             <td>flt_cos</td>             <td>cos</td></tr>
    <tr><td>FLT_COSH</td>            <td>flt_cosh</td>            <td>cosh</td></tr>
    <tr><td>FLT_CPY</td>             <td>flt_cpy</td>             <td>fltCpy</td></tr>
    <tr><td>FLT_CREATE</td>          <td>flt_create</td>          <td>fltCreate</td></tr>
    <tr><td>FLT_DECOMPOSE</td>       <td>flt_decompose</td>       <td>frexp</td></tr>
    <tr><td>FLT_DGTS</td>            <td>flt_dgts</td>            <td>fltDgts</td></tr>
    <tr><td>FLT_DIV</td>             <td>flt_div</td>             <td>/</td></tr>
    <tr><td>FLT_DIV_ASSIGN</td>      <td>flt_div_assign</td>      <td>/=</td></tr>
    <tr><td>FLT_DOUBLE2BITS</td>     <td>flt_double2bits</td>     <td>(x.aDouble=a, x.bits)</td></tr>
    <tr><td>FLT_EQ</td>              <td>flt_eq</td>              <td>==</td></tr>
    <tr><td>FLT_EXP</td>             <td>flt_exp</td>             <td>exp</td></tr>
    <tr><td>FLT_EXPM1</td>           <td>flt_expm1</td>           <td>expm1</td></tr>
    <tr><td>FLT_FLOOR</td>           <td>flt_floor</td>           <td>floor</td></tr>
    <tr><td>FLT_GE</td>              <td>flt_ge</td>              <td>&gt;=</td></tr>
    <tr><td>FLT_GT</td>              <td>flt_gt</td>              <td>&gt;</td></tr>
    <tr><td>FLT_HASHCODE</td>        <td>flt_hashcode</td>        <td>(x.floatValue=a, x.intValue)</td></tr>
    <tr><td>FLT_ICONV1</td>          <td>flt_iconv1</td>          <td>(float)</td></tr>
    <tr><td>FLT_ICONV3</td>          <td>flt_iconv3</td>          <td>(float)</td></tr>
    <tr><td>FLT_IPOW</td>            <td>flt_ipow</td>            <td>fltIPow</td></tr>
    <tr><td>FLT_ISNAN</td>           <td>flt_isnan</td>           <td>isnan</td></tr>
    <tr><td>FLT_ISNEGATIVEZERO</td>  <td>flt_isnegativezero</td>  <td>fltIsNegativeZero</td></tr>
    <tr><td>FLT_LE</td>              <td>flt_le</td>              <td>&lt;=</td></tr>
    <tr><td>FLT_LOG</td>             <td>flt_log</td>             <td>log</td></tr>
    <tr><td>FLT_LOG10</td>           <td>flt_log10</td>           <td>log10</td></tr>
    <tr><td>FLT_LOG1P</td>           <td>flt_log1p</td>           <td>log1p</td></tr>
    <tr><td>FLT_LOG2</td>            <td>flt_log2</td>            <td>log2</td></tr>
    <tr><td>FLT_LSHIFT</td>          <td>flt_lshift</td>          <td>ldexp</td></tr>
    <tr><td>FLT_LT</td>              <td>flt_lt</td>              <td>&lt;</td></tr>
    <tr><td>FLT_MOD</td>             <td>flt_mod</td>             <td>fltMod</td></tr>
    <tr><td>FLT_MULT</td>            <td>flt_mult</td>            <td>*</td></tr>
    <tr><td>FLT_MULT_ASSIGN</td>     <td>flt_mult_assign</td>     <td>*=</td></tr>
    <tr><td>FLT_NE</td>              <td>flt_ne</td>              <td>!=</td></tr>
    <tr><td>FLT_NEGATE</td>          <td>flt_negate</td>          <td>-</td></tr>
    <tr><td>FLT_PARSE1</td>          <td>flt_parse1</td>          <td>fltParse</td></tr>
    <tr><td>FLT_PLUS</td>            <td>flt_plus</td>            <td>(noop)</td></tr>
    <tr><td>FLT_POW</td>             <td>flt_pow</td>             <td>pow</td></tr>
    <tr><td>FLT_RAND</td>            <td>flt_rand</td>            <td>fltRand</td></tr>
    <tr><td>FLT_REM</td>             <td>flt_rem</td>             <td>fmod</td></tr>
    <tr><td>FLT_ROUND</td>           <td>flt_round</td>           <td>a&lt;0.0?-((intType)(0.5-a)):(intType)(0.5+a)</td></tr>
    <tr><td>FLT_RSHIFT</td>          <td>flt_rshift</td>          <td>ldexp</td></tr>
    <tr><td>FLT_SBTR</td>            <td>flt_sbtr</td>            <td>-</td></tr>
    <tr><td>FLT_SBTR_ASSIGN</td>     <td>flt_sbtr_assign</td>     <td>-=</td></tr>
    <tr><td>FLT_SCI</td>             <td>flt_sci</td>             <td>fltSci</td></tr>
    <tr><td>FLT_SIN</td>             <td>flt_sin</td>             <td>sin</td></tr>
    <tr><td>FLT_SINGLE2BITS</td>     <td>flt_single2bits</td>     <td>(x.aSingle=a, x.bits)</td></tr>
    <tr><td>FLT_SINH</td>            <td>flt_sinh</td>            <td>sinh</td></tr>
    <tr><td>FLT_SQRT</td>            <td>flt_sqrt</td>            <td>sqrt</td></tr>
    <tr><td>FLT_STR</td>             <td>flt_str</td>             <td>fltStr</td></tr>
    <tr><td>FLT_STR_SCIENTIFIC</td>  <td>flt_str_scientific</td>  <td>fltStrScientific</td></tr>
    <tr><td>FLT_TAN</td>             <td>flt_tan</td>             <td>tan</td></tr>
    <tr><td>FLT_TANH</td>            <td>flt_tanh</td>            <td>tanh</td></tr>
    <tr><td>FLT_TRUNC</td>           <td>flt_trunc</td>           <td>(intType)</td></tr>
    <tr><td>FLT_VALUE</td>           <td>flt_value</td>           <td>fltValue</td></tr>
</table><p></p>

<a name="graphic_keyboard"><h3>15.15 Actions to support the graphic keyboard</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>drwlib.c function</th>   <th>kbd_rtl.c/drw_x11.c/drw_win.c function</th></tr>
    <tr><td>GKB_BUTTON_PRESSED</td>  <td>gkb_button_pressed</td>  <td>gkbButtonPressed</td></tr>
    <tr><td>GKB_CLICKED_XPOS</td>    <td>gkb_clicked_xpos</td>    <td>gkbClickedXpos</td></tr>
    <tr><td>GKB_CLICKED_YPOS</td>    <td>gkb_clicked_ypos</td>    <td>gkbClickedYpos</td></tr>
    <tr><td>GKB_GETC</td>            <td>gkb_getc</td>            <td>gkbGetc</td></tr>
    <tr><td>GKB_GETS</td>            <td>gkb_gets</td>            <td>gkbGets</td></tr>
    <tr><td>GKB_INPUT_READY</td>     <td>gkb_input_ready</td>     <td>gkbInputReady</td></tr>
    <tr><td>GKB_LINE_READ</td>       <td>gkb_line_read</td>       <td>gkbLineRead</td></tr>
    <tr><td>GKB_RAW_GETC</td>        <td>gkb_raw_getc</td>        <td>gkbRawGetc</td></tr>
    <tr><td>GKB_SELECT_INPUT</td>    <td>gkb_select_input</td>    <td>gkbSelectInput</td></tr>
    <tr><td>GKB_WINDOW</td>          <td>gkb_window</td>          <td>gkbWindow</td></tr>
    <tr><td>GKB_WORD_READ</td>       <td>gkb_word_read</td>       <td>gkbWordRead</td></tr>
</table><p></p>

<a name="hash"><h3>15.16 Actions for hash types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>hshlib.c function</th>   <th>hsh_rtl.c function</th></tr>
    <tr><td>HSH_CONCAT_KEY_VALUE</td> <td>hsh_concat_key_value</td> <td>hshConcatKeyValue</td></tr>
    <tr><td>HSH_CONTAINS</td>        <td>hsh_contains</td>        <td>hshContains</td></tr>
    <tr><td>HSH_CPY</td>             <td>hsh_cpy</td>             <td>hshCpy</td></tr>
    <tr><td>HSH_CREATE</td>          <td>hsh_create</td>          <td>hshCreate</td></tr>
    <tr><td>HSH_DESTR</td>           <td>hsh_destr</td>           <td>hshDestr</td></tr>
    <tr><td>HSH_EMPTY</td>           <td>hsh_empty</td>           <td>hshEmpty</td></tr>
    <tr><td>HSH_EXCL</td>            <td>hsh_excl</td>            <td>hshExcl</td></tr>
    <tr><td>HSH_FOR</td>             <td>hsh_for</td>             <td>for</td></tr>
    <tr><td>HSH_FOR_DATA_KEY</td>    <td>hsh_for_data_key</td>    <td>for</td></tr>
    <tr><td>HSH_FOR_KEY</td>         <td>hsh_for_key</td>         <td>for</td></tr>
    <tr><td>HSH_GEN_HASH</td>        <td>hsh_gen_hash</td>        <td>hshGenHash</td></tr>
    <tr><td>HSH_GEN_KEY_VALUE</td>   <td>hsh_gen_key_value</td>   <td>hshGenKeyValue</td></tr>
    <tr><td>HSH_IDX</td>             <td>hsh_idx</td>             <td>hshIdx, hshIdxAddr</td></tr>
    <tr><td>HSH_IDX2</td>            <td>hsh_idx2</td>            <td>&nbsp;</td></tr>
    <tr><td>HSH_INCL</td>            <td>hsh_incl</td>            <td>hshIncl</td></tr>
    <tr><td>HSH_KEYS</td>            <td>hsh_keys</td>            <td>hshKeys</td></tr>
    <tr><td>HSH_LNG</td>             <td>hsh_lng</td>             <td>a->size</td></tr>
    <tr><td>HSH_RAND_KEY</td>        <td>hsh_rand_key</td>        <td>hshRand</td></tr>
    <tr><td>HSH_REFIDX</td>          <td>hsh_refidx</td>          <td>&nbsp;</td></tr>
    <tr><td>HSH_UPDATE</td>          <td>hsh_update</td>          <td>hshUpdate</td></tr>
    <tr><td>HSH_VALUES</td>          <td>hsh_values</td>          <td>hshValues</td></tr>
</table><p></p>

<a name="integer"><h3>15.17 Actions for the type integer</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>intlib.c function</th>   <th>int_rtl.c function</th></tr>
    <tr><td>INT_ABS</td>             <td>int_abs</td>             <td>labs</td></tr>
    <tr><td><a name="INT_ADD"        >INT_ADD</a></td>             <td>int_add</td>             <td>+</td></tr>
    <tr><td>INT_ADD_ASSIGN</td>      <td>int_add_assign</td>      <td>+=</td></tr>
    <tr><td>INT_BINOM</td>           <td>int_binom</td>           <td>intBinom</td></tr>
    <tr><td>INT_BIT_LENGTH</td>      <td>int_bit_length</td>      <td>intBitLength</td></tr>
    <tr><td>INT_BYTES_BE_2_INT</td>  <td>int_bytes_be_2_int</td>  <td>intBytesBe2Int</td></tr>
    <tr><td>INT_BYTES_BE_2_UINT</td> <td>int_bytes_be_2_uint</td> <td>intBytesBe2UInt</td></tr>
    <tr><td>INT_BYTES_BE_SIGNED</td> <td>int_bytes_be_signed</td> <td>intBytesBe</td></tr>
    <tr><td>INT_BYTES_BE_UNSIGNED</td> <td>int_bytes_be_unsigned</td> <td>intBytesBe</td></tr>
    <tr><td>INT_BYTES_LE_2_INT</td>  <td>int_bytes_le_2_int</td>  <td>intBytesLe2Int</td></tr>
    <tr><td>INT_BYTES_LE_2_UINT</td> <td>int_bytes_le_2_uint</td> <td>intBytesLe2UInt</td></tr>
    <tr><td>INT_BYTES_LE_SIGNED</td> <td>int_bytes_le_signed</td> <td>intBytesLe</td></tr>
    <tr><td>INT_BYTES_LE_UNSIGNED</td> <td>int_bytes_le_unsigned</td> <td>intBytesLe</td></tr>
    <tr><td>INT_CMP</td>             <td>int_cmp</td>             <td>intCmp</td></tr>
    <tr><td>INT_CPY</td>             <td>int_cpy</td>             <td>intCpy</td></tr>
    <tr><td>INT_CREATE</td>          <td>int_create</td>          <td>intCreate</td></tr>
    <tr><td>INT_DECR</td>            <td>int_decr</td>            <td>--</td></tr>
    <tr><td>INT_DIV</td>             <td>int_div</td>             <td>/</td></tr>
    <tr><td>INT_EQ</td>              <td>int_eq</td>              <td>==</td></tr>
    <tr><td>INT_FACT</td>            <td>int_fact</td>            <td>fact[a]</td></tr>
    <tr><td>INT_GE</td>              <td>int_ge</td>              <td>&gt;=</td></tr>
    <tr><td>INT_GT</td>              <td>int_gt</td>              <td>&gt;</td></tr>
    <tr><td>INT_HASHCODE</td>        <td>int_hashcode</td>        <td>(noop)</td></tr>
    <tr><td>INT_ICONV1</td>          <td>int_iconv1</td>          <td>(noop)</td></tr>
    <tr><td>INT_ICONV3</td>          <td>int_iconv3</td>          <td>(noop)</td></tr>
    <tr><td>INT_INCR</td>            <td>int_incr</td>            <td>++</td></tr>
    <tr><td>INT_LE</td>              <td>int_le</td>              <td>&lt;=</td></tr>
    <tr><td><a name="INT_LOG10"      >INT_LOG10</a></td>           <td>int_log10</td>           <td>intLog10</td></tr>
    <tr><td><a name="INT_LOG2"       >INT_LOG2</a></td>            <td>int_log2</td>            <td>intLog2</td></tr>
    <tr><td>INT_LOWEST_SET_BIT</td>  <td>int_lowest_set_bit</td>  <td>intLowestSetBit</td></tr>
    <tr><td>INT_LPAD0</td>           <td>int_lpad0</td>           <td>intLpad0</td></tr>
    <tr><td>INT_LSHIFT</td>          <td>int_lshift</td>          <td>&lt;&lt;</td></tr>
    <tr><td>INT_LSHIFT_ASSIGN</td>   <td>int_lshift_assign</td>   <td>&lt;&lt;=</td></tr>
    <tr><td>INT_LT</td>              <td>int_lt</td>              <td>&lt;</td></tr>
    <tr><td>INT_MDIV</td>            <td>int_mdiv</td>            <td>a&gt;0&amp;&amp;b&lt;0 ? (a-1)/b-1 : a&lt;0&amp;&amp;b&gt;0 ? (a+1)/b-1 : a/b</td></tr>
    <tr><td>INT_MOD</td>             <td>int_mod</td>             <td>c=a%b, ((a&gt;0&amp;&amp;b&lt;0) || (a&lt;0&amp;&amp;b&gt;0)) &amp;&amp; c!=0 ? c+b : c</td></tr>
    <tr><td>INT_MULT</td>            <td>int_mult</td>            <td>*</td></tr>
    <tr><td>INT_MULT_ASSIGN</td>     <td>int_mult_assign</td>     <td>*=</td></tr>
    <tr><td>INT_NE</td>              <td>int_ne</td>              <td>!=</td></tr>
    <tr><td>INT_NEGATE</td>          <td>int_negate</td>          <td>-</td></tr>
    <tr><td>INT_N_BYTES_BE_SIGNED</td>   <td>int_n_bytes_be_signed</td>   <td>intNBytesBeSigned</td></tr>
    <tr><td>INT_N_BYTES_BE_UNSIGNED</td> <td>int_n_bytes_be_unsigned</td> <td>intNBytesBeUnsigned</td></tr>
    <tr><td>INT_N_BYTES_LE_SIGNED</td>   <td>int_n_bytes_le_signed</td>   <td>intNBytesLeSigned</td></tr>
    <tr><td>INT_N_BYTES_LE_UNSIGNED</td> <td>int_n_bytes_le_unsigned</td> <td>intNBytesLeUnsigned</td></tr>
    <tr><td>INT_ODD</td>             <td>int_odd</td>             <td>&amp;1</td></tr>
    <tr><td>INT_PARSE1</td>          <td>int_parse1</td>          <td>intParse</td></tr>
    <tr><td>INT_PLUS</td>            <td>int_plus</td>            <td>(noop)</td></tr>
    <tr><td>INT_POW</td>             <td>int_pow</td>             <td>intPow</td></tr>
    <tr><td>INT_PRED</td>            <td>int_pred</td>            <td>--</td></tr>
    <tr><td>INT_RADIX</td>           <td>int_RADIX</td>           <td>intRadix</td></tr>
    <tr><td>INT_RAND</td>            <td>int_rand</td>            <td>intRand</td></tr>
    <tr><td>INT_REM</td>             <td>int_rem</td>             <td>%</td></tr>
    <tr><td>INT_RSHIFT</td>          <td>int_rshift</td>          <td>a&gt;&gt;b <span class="comment">/* C with arithmetic shift */</span><br />
                                            a&lt;0?~(~a&gt;&gt;b):a&gt;&gt;b <span class="comment">/* C with logical shift */</span></td></tr>
    <tr><td>INT_RSHIFT_ASSIGN</td>   <td>int_rshift_assign</td>   <td>a&gt;&gt;=b <span class="comment">/* C with arithmetic shift */</span><br />
                                            if (a<0) a= ~(~a&gt;&gt;b); else a&gt;&gt;=b; <span class="comment">/* C with logical shift */</span></td></tr>
    <tr><td>INT_SBTR</td>            <td>int_sbtr</td>            <td>-</td></tr>
    <tr><td>INT_SBTR_ASSIGN</td>     <td>int_sbtr_assign</td>     <td>-=</td></tr>
    <tr><td>INT_SQRT</td>            <td>int_sqrt</td>            <td>intSqrt</td></tr>
    <tr><td>INT_STR</td>             <td>int_str</td>             <td>intStr</td></tr>
    <tr><td>INT_SUCC</td>            <td>int_succ</td>            <td>+1</td></tr>
    <tr><td>INT_VALUE</td>           <td>int_value</td>           <td>intValue</td></tr>
    <tr><td>INT_radix</td>           <td>int_radix</td>           <td>intRadix</td></tr>
</table><p></p>

<a name="interface"><h3>15.18 Actions for interface types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>itflib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>ITF_CMP</td>             <td>itf_cmp</td>             <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>ITF_CONV2</td>           <td>itf_conv2</td>           <td>(noop)</td></tr>
    <tr><td>ITF_CPY</td>             <td>itf_cpy</td>             <td>=</td></tr>
    <tr><td>ITF_CPY2</td>            <td>itf_cpy2</td>            <td>=</td></tr>
    <tr><td>ITF_CREATE</td>          <td>itf_create</td>          <td>&nbsp;</td></tr>
    <tr><td>ITF_CREATE2</td>         <td>itf_create2</td>         <td>&nbsp;</td></tr>
    <tr><td>ITF_DESTR</td>           <td>itf_destr</td>           <td>itfDestr</td></tr>
    <tr><td>ITF_EQ</td>              <td>itf_eq</td>              <td>==</td></tr>
    <tr><td>ITF_HASHCODE</td>        <td>itf_hashcode</td>        <td>(intType)(((memSizeType)a)&gt;&gt;6)</td></tr>
    <tr><td>ITF_NE</td>              <td>itf_ne</td>              <td>!=</td></tr>
    <tr><td>ITF_SELECT</td>          <td>itf_select</td>          <td>&nbsp;</td></tr>
    <tr><td>ITF_TO_INTERFACE</td>    <td>itf_to_interface</td>    <td>&nbsp;</td></tr>
</table><p></p>

<a name="console_keyboard"><h3>15.19 Actions to support the text (console) screen keyboard</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>kbdlib.c function</th>   <th>kbd_rtl.c/kbd_inf.c function</th></tr>
    <tr><td>KBD_GETC</td>            <td>kbd_getc</td>            <td>kbdGetc</td></tr>
    <tr><td>KBD_GETS</td>            <td>kbd_gets</td>            <td>kbdGets</td></tr>
    <tr><td>KBD_INPUT_READY</td>     <td>kbd_input_ready</td>     <td>kbdInputReady</td></tr>
    <tr><td>KBD_LINE_READ</td>       <td>kbd_line_read</td>       <td>kbdLineRead</td></tr>
    <tr><td>KBD_RAW_GETC</td>        <td>kbd_raw_getc</td>        <td>kbdRawGetc</td></tr>
    <tr><td>KBD_WORD_READ</td>       <td>kbd_word_read</td>       <td>kbdWordRead</td></tr>
</table><p></p>

<a name="list"><h3>15.20 Actions for the list type</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>lstlib.c function</th></tr>
    <tr><td>LST_CAT</td>             <td>lst_cat</td></tr>
    <tr><td>LST_CPY</td>             <td>lst_cpy</td></tr>
    <tr><td>LST_CREATE</td>          <td>lst_create</td></tr>
    <tr><td>LST_DESTR</td>           <td>lst_destr</td></tr>
    <tr><td>LST_EMPTY</td>           <td>lst_empty</td></tr>
    <tr><td>LST_EXCL</td>            <td>lst_excl</td></tr>
    <tr><td>LST_HEAD</td>            <td>lst_head</td></tr>
    <tr><td>LST_IDX</td>             <td>lst_idx</td></tr>
    <tr><td>LST_INCL</td>            <td>lst_incl</td></tr>
    <tr><td>LST_LNG</td>             <td>lst_lng</td></tr>
    <tr><td>LST_RANGE</td>           <td>lst_range</td></tr>
    <tr><td>LST_TAIL</td>            <td>lst_tail</td></tr>
</table><p></p>

<a name="process"><h3>15.21 Actions for the type process</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>pcslib.c function</th>   <th>pcs_rtl.c function</th></tr>
    <tr><td>PCS_CHILD_STDERR</td>    <td>pcs_child_stderr</td>    <td>pcsChildStdErr</td></tr>
    <tr><td>PCS_CHILD_STDIN</td>     <td>pcs_child_stdin</td>     <td>pcsChildStdIn</td></tr>
    <tr><td>PCS_CHILD_STDOUT</td>    <td>pcs_child_stdout</td>    <td>pcsChildStdOut</td></tr>
    <tr><td>PCS_CMP</td>             <td>pcs_cmp</td>             <td>pcsCmp</td></tr>
    <tr><td>PCS_CPY</td>             <td>pcs_cpy</td>             <td>pcsCpy</td></tr>
    <tr><td>PCS_CREATE</td>          <td>pcs_create</td>          <td>pcsCreate</td></tr>
    <tr><td>PCS_DESTR</td>           <td>pcs_destr</td>           <td>pcsDestr</td></tr>
    <tr><td>PCS_EMPTY</td>           <td>pcs_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>PCS_EQ</td>              <td>pcs_eq</td>              <td>pcsEq</td></tr>
    <tr><td>PCS_EXIT_VALUE</td>      <td>pcs_exit_value</td>      <td>pcsExitValue</td></tr>
    <tr><td>PCS_HASHCODE</td>        <td>pcs_hashcode</td>        <td>pcsHashCode</td></tr>
    <tr><td>PCS_IS_ALIVE</td>        <td>pcs_is_alive</td>        <td>pcsIsAlive</td></tr>
    <tr><td>PCS_KILL</td>            <td>pcs_kill</td>            <td>pcsKill</td></tr>
    <tr><td>PCS_NE</td>              <td>pcs_ne</td>              <td>!pcsEq</td></tr>
    <tr><td>PCS_PIPE2</td>           <td>pcs_pipe2</td>           <td>pcsPipe2</td></tr>
    <tr><td>PCS_PTY</td>             <td>pcs_pty</td>             <td>pcsPty</td></tr>
    <tr><td>PCS_START</td>           <td>pcs_start</td>           <td>pcsStart</td></tr>
    <tr><td>PCS_START_PIPE</td>      <td>pcs_start_pipe</td>      <td>pcsStartPipe</td></tr>
    <tr><td>PCS_STR</td>             <td>pcs_str</td>             <td>pcsStr</td></tr>
    <tr><td>PCS_VALUE</td>           <td>pcs_value</td>           <td>pcsValue</td></tr>
    <tr><td>PCS_WAIT_FOR</td>        <td>pcs_wait_for</td>        <td>pcsWaitFor</td></tr>
</table><p></p>

<a name="pointList"><h3>15.22 Actions for the type pointList</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>drwlib.c function</th>   <th>bst_rtl.c function</th></tr>
    <tr><td>PLT_BSTRING</td>         <td>plt_bstring</td>         <td>(noop)</td></tr>
    <tr><td>PLT_CMP</td>             <td>plt_cmp</td>             <td>bstCmp</td></tr>
    <tr><td>PLT_CPY</td>             <td>plt_cpy</td>             <td>bstCpy</td></tr>
    <tr><td>PLT_CREATE</td>          <td>plt_create</td>          <td>bstCreate</td></tr>
    <tr><td>PLT_DESTR</td>           <td>plt_destr</td>           <td>bstDestr</td></tr>
    <tr><td>PLT_EMPTY</td>           <td>plt_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>PLT_EQ</td>              <td>plt_eq</td>              <td>a->size==b->size &amp;&amp; memcmp(a,b,a->size*sizeof(unsigned char))==0</td></tr>
    <tr><td>PLT_HASHCODE</td>        <td>plt_hashcode</td>        <td>bstHashCode</td></tr>
    <tr><td>PLT_NE</td>              <td>plt_ne</td>              <td>a->size!=b->size || memcmp(a,b,a->size*sizeof(unsigned char))!=0</td></tr>
    <tr><td>PLT_POINT_LIST</td>      <td>plt_point_list</td>      <td>(noop)</td></tr>
    <tr><td>PLT_VALUE</td>           <td>plt_value</td>           <td>pltValue</td></tr>
</table><p></p>

<a name="pollData"><h3>15.23 Actions for the type pollData</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>pollib.c function</th>   <th>pol_unx.c/pol_sel.c function</th></tr>
    <tr><td>POL_ADD_CHECK</td>       <td>pol_add_check</td>       <td>polAddCheck</td></tr>
    <tr><td>POL_CLEAR</td>           <td>pol_clear</td>           <td>polClear</td></tr>
    <tr><td>POL_CPY</td>             <td>pol_cpy</td>             <td>polCpy</td></tr>
    <tr><td>POL_CREATE</td>          <td>pol_create</td>          <td>polCreate</td></tr>
    <tr><td>POL_DESTR</td>           <td>pol_destr</td>           <td>polDestr</td></tr>
    <tr><td>POL_EMPTY</td>           <td>pol_empty</td>           <td>polEmpty</td></tr>
    <tr><td>POL_GET_CHECK</td>       <td>pol_get_check</td>       <td>polGetCheck</td></tr>
    <tr><td>POL_GET_FINDING</td>     <td>pol_get_finding</td>     <td>polGetFinding</td></tr>
    <tr><td>POL_HAS_NEXT</td>        <td>pol_has_next</td>        <td>polHasNext</td></tr>
    <tr><td>POL_ITER_CHECKS</td>     <td>pol_iter_checks</td>     <td>polIterChecks</td></tr>
    <tr><td>POL_ITER_FINDINGS</td>   <td>pol_iter_findings</td>   <td>polIterFindings</td></tr>
    <tr><td>POL_NEXT_FILE</td>       <td>pol_next_file</td>       <td>polNextFile</td></tr>
    <tr><td>POL_POLL</td>            <td>pol_poll</td>            <td>polPoll</td></tr>
    <tr><td>POL_REMOVE_CHECK</td>    <td>pol_remove_check</td>    <td>polRemoveCheck</td></tr>
    <tr><td>POL_VALUE</td>           <td>pol_value</td>           <td>polValue</td></tr>
</table><p></p>

<a name="proc"><h3>15.24 Actions for proc operations and statements</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>prclib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>PRC_ARGS</td>            <td>prc_args</td>            <td>arg_v</td></tr>
    <tr><td><a name="PRC_BEGIN"      >PRC_BEGIN</a></td>           <td>prc_begin</td>           <td>Executed at compile-time</td></tr>
    <tr><td><a name="PRC_BEGIN_NOOP" >PRC_BEGIN_NOOP</a></td>      <td>prc_begin_noop</td>      <td>Executed at compile-time</td></tr>
    <tr><td>PRC_BLOCK</td>           <td>prc_block</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_BLOCK_CATCH_ALL</td> <td>prc_block_catch_all</td> <td>&nbsp;</td></tr>
    <tr><td>PRC_BLOCK_OTHERWISE</td> <td>prc_block_otherwise</td> <td>&nbsp;</td></tr>
    <tr><td>PRC_CASE</td>            <td>prc_case</td>            <td>switch</td></tr>
    <tr><td>PRC_CASE_DEF</td>        <td>prc_case_def</td>        <td>switch</td></tr>
    <tr><td>PRC_CASE_HASHSET</td>    <td>prc_case_hashset</td>    <td>switch (hshIdxDefault0(...)</td></tr>
    <tr><td>PRC_CASE_HASHSET_DEF</td> <td>prc_case_hashset_def</td> <td>switch (hshIdxDefault0(...)</td></tr>
    <tr><td>PRC_CPY</td>             <td>prc_cpy</td>             <td>&nbsp;</td></tr>
    <tr><td>PRC_CREATE</td>          <td>prc_create</td>          <td>&nbsp;</td></tr>
    <tr><td>PRC_DECLS</td>           <td>prc_decls</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_DESTR</td>           <td>prc_destr</td>           <td>&nbsp;</td></tr>
    <tr><td>PRC_DYNAMIC</td>         <td>prc_dynamic</td>         <td>&nbsp;</td></tr>
    <tr><td>PRC_EXIT</td>            <td>prc_exit</td>            <td>exit</td></tr>
    <tr><td>PRC_FOR_DOWNTO</td>      <td>prc_for_downto</td>      <td>for</td></tr>
    <tr><td>PRC_FOR_DOWNTO_STEP</td> <td>prc_for_downto_step</td> <td>for</td></tr>
    <tr><td>PRC_FOR_TO</td>          <td>prc_for_to</td>          <td>for</td></tr>
    <tr><td>PRC_FOR_TO_STEP</td>     <td>prc_for_to_step</td>     <td>for</td></tr>
    <tr><td>PRC_HEAPSTAT</td>        <td>prc_heapstat</td>        <td>&nbsp;</td></tr>
    <tr><td>PRC_HSIZE</td>           <td>prc_hsize</td>           <td>heapsize</td></tr>
    <tr><td>PRC_IF</td>              <td>prc_if</td>              <td>if</td></tr>
    <tr><td>PRC_IF_ELSIF</td>        <td>prc_if_elsif</td>        <td>if</td></tr>
    <tr><td>PRC_IF_NOOP</td>         <td>prc_if_noop</td>         <td>if</td></tr>
    <tr><td><a name="PRC_INCLUDE"    >PRC_INCLUDE</a></td>         <td>prc_include</td>         <td>Executed at compile-time</td></tr>
    <tr><td>PRC_LINE</td>            <td>prc_line</td>            <td>&nbsp;</td></tr>
    <tr><td><a name="PRC_LOCAL"      >PRC_LOCAL</a></td>           <td>prc_local</td>           <td>Executed at compile-time</td></tr>
    <tr><td>PRC_NOOP</td>            <td>prc_noop</td>            <td>prcNoop</td></tr>
    <tr><td>PRC_RAISE</td>           <td>prc_raise</td>           <td>raise_error</td></tr>
    <tr><td><a name="PRC_REPEAT"     >PRC_REPEAT</a></td>          <td>prc_repeat</td>          <td>do {stmts} while (!(cond));</td></tr>
    <tr><td><a name="PRC_REPEAT_NOOP">PRC_REPEAT_NOOP</a></td>     <td>prc_repeat_noop</td>     <td>do {} while (!(cond));</td></tr>
    <tr><td><a name="PRC_RES_BEGIN"  >PRC_RES_BEGIN</a></td>       <td>prc_res_begin</td>       <td>Executed at compile-time</td></tr>
    <tr><td><a name="PRC_RES_LOCAL"  >PRC_RES_LOCAL</a></td>       <td>prc_res_local</td>       <td>Executed at compile-time</td></tr>
    <tr><td><a name="PRC_RETURN"     >PRC_RETURN</a></td>          <td>prc_return</td>          <td>Executed at compile-time</td></tr>
    <tr><td><a name="PRC_RETURN2"    >PRC_RETURN2</a></td>         <td>prc_return2</td>         <td>Executed at compile-time</td></tr>
    <tr><td><a name="PRC_RETURN_VAR" >PRC_RETURN_VAR</a></td>      <td>prc_return_var</td>      <td>Executed at compile-time</td></tr>
    <tr><td><a name="PRC_RETURN_VAR2">PRC_RETURN_VAR2</a></td>     <td>prc_return_var2</td>     <td>Executed at compile-time</td></tr>
    <tr><td>PRC_SETTRACE</td>        <td>prc_settrace</td>        <td>&nbsp;</td></tr>
    <tr><td>PRC_TRACE</td>           <td>prc_trace</td>           <td>&nbsp;</td></tr>
    <tr><td><a name="PRC_WHILE"      >PRC_WHILE</a></td>           <td>prc_while</td>           <td>while (cond) {stmts}</td></tr>
    <tr><td><a name="PRC_WHILE_NOOP" >PRC_WHILE_NOOP</a></td>      <td>prc_while_noop</td>      <td>while (cond) {}</td></tr>
</table><p></p>

<a name="program"><h3>15.25 Actions for the type program</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>prglib.c function</th>   <th>prg_comp.c function</th></tr>
    <tr><td>PRG_BSTRI_PARSE</td>     <td>prg_bstri_parse</td>     <td>prgBStriParse</td></tr>
    <tr><td>PRG_CMP</td>             <td>prg_cmp</td>             <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>PRG_CPY</td>             <td>prg_cpy</td>             <td>prgCpy</td></tr>
    <tr><td>PRG_CREATE</td>          <td>prg_create</td>          <td>&nbsp;</td></tr>
    <tr><td>PRG_DESTR</td>           <td>prg_destr</td>           <td>&nbsp;</td></tr>
    <tr><td>PRG_EMPTY</td>           <td>prg_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>PRG_EQ</td>              <td>prg_eq</td>              <td>==</td></tr>
    <tr><td>PRG_ERROR_COUNT</td>     <td>prg_error_count</td>     <td>prgErrorCount</td></tr>
    <tr><td>PRG_EVAL</td>            <td>prg_eval</td>            <td>prgEval</td></tr>
    <tr><td>PRG_EVAL_WITH_ARGS</td>  <td>prg_eval_with_args</td>  <td>prgEvalWithArgs</td></tr>
    <tr><td>PRG_EXEC</td>            <td>prg_exec</td>            <td>prgExec</td></tr>
    <tr><td>PRG_FIL_PARSE</td>       <td>prg_fil_parse</td>       <td>prgFilParse</td></tr>
    <tr><td>PRG_GET_ERROR</td>       <td>prg_get_error</td>       <td>prgGetError</td></tr>
    <tr><td>PRG_GLOBAL_OBJECTS</td>  <td>prg_global_objects</td>  <td>prgGlobalObjects</td></tr>
    <tr><td>PRG_HASHCODE</td>        <td>prg_hashcode</td>        <td>(intType)(((memSizeType)a)&gt;&gt;6)</td></tr>
    <tr><td>PRG_MATCH</td>           <td>prg_match</td>           <td>prgMatch</td></tr>
    <tr><td>PRG_MATCH_EXPR</td>      <td>prg_match_expr</td>      <td>prgMatchExpr</td></tr>
    <tr><td>PRG_NAME</td>            <td>prg_name</td>            <td>arg_0</td></tr>
    <tr><td>PRG_NE</td>              <td>prg_ne</td>              <td>!=</td></tr>
    <tr><td>PRG_OWN_NAME</td>        <td>prg_own_name</td>        <td>programName</td></tr>
    <tr><td>PRG_OWN_PATH</td>        <td>prg_own_path</td>        <td>programPath</td></tr>
    <tr><td>PRG_PATH</td>            <td>prg_path</td>            <td>programPath</td></tr>
    <tr><td>PRG_STRUCT_SYMBOLS</td>  <td>prg_struct_symbols</td>  <td>prgStructSymbols</td></tr>
    <tr><td>PRG_STR_PARSE</td>       <td>prg_str_parse</td>       <td>prgStrParse</td></tr>
    <tr><td>PRG_SYOBJECT</td>        <td>prg_syobject</td>        <td>prgSyobject</td></tr>
    <tr><td>PRG_SYSVAR</td>          <td>prg_sysvar</td>          <td>prgSysvar</td></tr>
    <tr><td>PRG_VALUE</td>           <td>prg_value</td>           <td>prgValue</td></tr>
</table><p></p>

<a name="reference"><h3>15.26 Actions for the type reference</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>reflib.c function</th>   <th>ref_data.c function</th></tr>
    <tr><td>REF_ADDR</td>            <td>ref_addr</td>            <td>&</td></tr>
    <tr><td>REF_ALLOC</td>           <td>ref_alloc</td>           <td>refAlloc</td></tr>
    <tr><td>REF_ALLOC_INT</td>       <td>ref_alloc_int</td>       <td>refAllocInt</td></tr>
    <tr><td>REF_ALLOC_STRI</td>      <td>ref_alloc_stri</td>      <td>refAllocStri</td></tr>
    <tr><td>REF_ALLOC_VAR</td>       <td>ref_alloc_var</td>       <td>refAllocVar</td></tr>
    <tr><td>REF_APPEND_PARAMS</td>   <td>ref_append_params</td>   <td>refAppendParams</td></tr>
    <tr><td>REF_ARRMAXIDX</td>       <td>ref_arrmaxidx</td>       <td>refArrmaxidx</td></tr>
    <tr><td>REF_ARRMINIDX</td>       <td>ref_arrminidx</td>       <td>refArrminidx</td></tr>
    <tr><td>REF_ARRTOLIST</td>       <td>ref_arrtolist</td>       <td>refArrtolist</td></tr>
    <tr><td>REF_BODY</td>            <td>ref_body</td>            <td>refBody</td></tr>
    <tr><td>REF_CAST</td>            <td>ref_cast</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_CATEGORY</td>        <td>ref_category</td>        <td>refCategory</td></tr>
    <tr><td>REF_CAT_PARSE</td>       <td>ref_cat_parse</td>       <td>refCatParse</td></tr>
    <tr><td>REF_CAT_STR</td>         <td>ref_cat_str</td>         <td>refCatStr</td></tr>
    <tr><td>REF_CMP</td>             <td>ref_cmp</td>             <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>REF_CONTENT</td>         <td>ref_content</td>         <td>&nbsp;</td></tr>
    <tr><td>REF_CPY</td>             <td>ref_cpy</td>             <td>=</td></tr>
    <tr><td>REF_CREATE</td>          <td>ref_create</td>          <td>=</td></tr>
    <tr><td>REF_DEREF</td>           <td>ref_deref</td>           <td>&nbsp;</td></tr>
    <tr><td>REF_EQ</td>              <td>ref_eq</td>              <td>==</td></tr>
    <tr><td>REF_FILE</td>            <td>ref_file</td>            <td>refFile</td></tr>
    <tr><td>REF_GETREF</td>          <td>ref_getref</td>          <td>refGetRef</td></tr>
    <tr><td>REF_HASHCODE</td>        <td>ref_hashcode</td>        <td>(intType)(((memSizeType)a)&gt;&gt;6)</td></tr>
    <tr><td>REF_HSHDATATOLIST</td>   <td>ref_hshdatatolist</td>   <td>refHshDataToList</td></tr>
    <tr><td>REF_HSHKEYSTOLIST</td>   <td>ref_hshkeystolist</td>   <td>refHshKeysToList</td></tr>
    <tr><td>REF_HSHLENGTH</td>       <td>ref_hshlength</td>       <td>refHshLength</td></tr>
    <tr><td>REF_ISSYMB</td>          <td>ref_issymb</td>          <td>&nbsp;</td></tr>
    <tr><td>REF_ISTEMP</td>          <td>ref_istemp</td>          <td>refIsTemp</td></tr>
    <tr><td>REF_ISVAR</td>           <td>ref_isvar</td>           <td>refIsvar</td></tr>
    <tr><td>REF_ITFTOSCT</td>        <td>ref_itftosct</td>        <td>refItftosct</td></tr>
    <tr><td>REF_LINE</td>            <td>ref_line</td>            <td>refLine</td></tr>
    <tr><td>REF_LOCAL_CONSTS</td>    <td>ref_local_consts</td>    <td>refLocalConsts</td></tr>
    <tr><td>REF_LOCAL_VARS</td>      <td>ref_local_vars</td>      <td>refLocalVars</td></tr>
    <tr><td>REF_MKREF</td>           <td>ref_mkref</td>           <td>&nbsp;</td></tr>
    <tr><td>REF_NE</td>              <td>ref_ne</td>              <td>!=</td></tr>
    <tr><td>REF_NIL</td>             <td>ref_nil</td>             <td>&nbsp;</td></tr>
    <tr><td>REF_NUM</td>             <td>ref_num</td>             <td>refNum</td></tr>
    <tr><td>REF_PARAMS</td>          <td>ref_params</td>          <td>refParams</td></tr>
    <tr><td>REF_PATH</td>            <td>ref_path</td>            <td>refPath</td></tr>
    <tr><td>REF_PROG</td>            <td>ref_prog</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_RESINI</td>          <td>ref_resini</td>          <td>refResini</td></tr>
    <tr><td>REF_RESULT</td>          <td>ref_result</td>          <td>refResult</td></tr>
    <tr><td>REF_SCAN</td>            <td>ref_scan</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_SCTTOLIST</td>       <td>ref_scttolist</td>       <td>refScttolist</td></tr>
    <tr><td>REF_SELECT</td>          <td>ref_select</td>          <td>a->stru[b]</td></tr>
    <tr><td>REF_SETCATEGORY</td>     <td>ref_setcategory</td>     <td>refSetCategory</td></tr>
    <tr><td>REF_SETPARAMS</td>       <td>ref_setparams</td>       <td>refSetParams</td></tr>
    <tr><td>REF_SETTYPE</td>         <td>ref_settype</td>         <td>refSetType</td></tr>
    <tr><td>REF_SETVAR</td>          <td>ref_setvar</td>          <td>refSetVar</td></tr>
    <tr><td>REF_STR</td>             <td>ref_str</td>             <td>refStr</td></tr>
    <tr><td>REF_SYMB</td>            <td>ref_symb</td>            <td>&nbsp;</td></tr>
    <tr><td>REF_TRACE</td>           <td>ref_trace</td>           <td>printf</td></tr>
    <tr><td>REF_TYPE</td>            <td>ref_type</td>            <td>refType</td></tr>
    <tr><td>REF_VALUE</td>           <td>ref_value</td>           <td>refValue</td></tr>
</table><p></p>

<a name="ref_list"><h3>15.27 Actions for the type ref_list</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>rfllib.c function</th>   <th>rfl_data.c function</th></tr>
    <tr><td>RFL_APPEND</td>          <td>rfl_append</td>          <td>rflAppend</td></tr>
    <tr><td>RFL_CAT</td>             <td>rfl_cat</td>             <td>rflCat</td></tr>
    <tr><td>RFL_CPY</td>             <td>rfl_cpy</td>             <td>rflCpy</td></tr>
    <tr><td>RFL_CREATE</td>          <td>rfl_create</td>          <td>rflCreate</td></tr>
    <tr><td>RFL_DESTR</td>           <td>rfl_destr</td>           <td>rflDestr</td></tr>
    <tr><td>RFL_ELEM</td>            <td>rfl_elem</td>            <td>rflElem</td></tr>
    <tr><td>RFL_ELEMCPY</td>         <td>rfl_elemcpy</td>         <td>rflElemcpy</td></tr>
    <tr><td>RFL_EMPTY</td>           <td>rfl_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>RFL_EQ</td>              <td>rfl_eq</td>              <td>rflEq</td></tr>
    <tr><td>RFL_EXCL</td>            <td>rfl_excl</td>            <td>&nbsp;</td></tr>
    <tr><td>RFL_EXPR</td>            <td>rfl_expr</td>            <td>&nbsp;</td></tr>
    <tr><td>RFL_FOR</td>             <td>rfl_for</td>             <td>for</td></tr>
    <tr><td>RFL_FOR_UNTIL</td>       <td>rfl_for_until</td>       <td>for</td></tr>
    <tr><td>RFL_HEAD</td>            <td>rfl_head</td>            <td>rflHead</td></tr>
    <tr><td>RFL_IDX</td>             <td>rfl_idx</td>             <td>rflIdx</td></tr>
    <tr><td>RFL_INCL</td>            <td>rfl_incl</td>            <td>rflIncl</td></tr>
    <tr><td>RFL_IPOS</td>            <td>rfl_ipos</td>            <td>rflIpos</td></tr>
    <tr><td>RFL_LNG</td>             <td>rfl_lng</td>             <td>rflLng</td></tr>
    <tr><td>RFL_MKLIST</td>          <td>rfl_mklist</td>          <td>rflMklist</td></tr>
    <tr><td>RFL_NE</td>              <td>rfl_ne</td>              <td>rflNe</td></tr>
    <tr><td>RFL_NOT_ELEM</td>        <td>rfl_not_elem</td>        <td>!rflElem</td></tr>
    <tr><td>RFL_POS</td>             <td>rfl_pos</td>             <td>rflPos</td></tr>
    <tr><td>RFL_RANGE</td>           <td>rfl_range</td>           <td>rflRange</td></tr>
    <tr><td>RFL_SET_VALUE</td>       <td>rfl_set_value</td>       <td>rflSetValue</td></tr>
    <tr><td>RFL_TAIL</td>            <td>rfl_tail</td>            <td>rflTail</td></tr>
    <tr><td>RFL_TRACE</td>           <td>rfl_trace</td>           <td>&nbsp;</td></tr>
    <tr><td>RFL_VALUE</td>           <td>rfl_value</td>           <td>rflValue</td></tr>
</table><p></p>

<a name="struct"><h3>15.28 Actions for struct types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>sctlib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>SCT_ALLOC</td>           <td>sct_alloc</td>           <td>&nbsp;</td></tr>
    <tr><td>SCT_CAT</td>             <td>sct_cat</td>             <td>&nbsp;</td></tr>
    <tr><td>SCT_CONV</td>            <td>sct_conv</td>            <td>&nbsp;</td></tr>
    <tr><td>SCT_CPY</td>             <td>sct_cpy</td>             <td>cpy_ ...</td></tr>
    <tr><td>SCT_CREATE</td>          <td>sct_create</td>          <td>create_ ...</td></tr>
    <tr><td>SCT_DESTR</td>           <td>sct_destr</td>           <td>destr_ ...</td></tr>
    <tr><td>SCT_EMPTY</td>           <td>sct_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>SCT_INCL</td>            <td>sct_incl</td>            <td>&nbsp;</td></tr>
    <tr><td>SCT_LNG</td>             <td>sct_lng</td>             <td>&nbsp;</td></tr>
    <tr><td>SCT_REFIDX</td>          <td>sct_refidx</td>          <td>&nbsp;</td></tr>
    <tr><td>SCT_SELECT</td>          <td>sct_select</td>          <td>a->stru[b]</td></tr>
</table><p></p>

<a name="structElement"><h3>15.29 Actions for the type structElement</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>sctlib.c function</th>   <th>&nbsp;</th></tr>
    <tr><td>SEL_CMP</td>             <td>sel_cmp</td>             <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>SEL_CONV1</td>           <td>sel_conv1</td>           <td>&nbsp;</td></tr>
    <tr><td>SEL_CPY</td>             <td>sel_cpy</td>             <td>=</td></tr>
    <tr><td>SEL_CREATE</td>          <td>sel_create</td>          <td>=</td></tr>
    <tr><td>SEL_EQ</td>              <td>sel_eq</td>              <td>==</td></tr>
    <tr><td>SEL_HASHCODE</td>        <td>sel_hashcode</td>        <td>(intType)(((memSizeType)a)&gt;&gt;6)</td></tr>
    <tr><td>SEL_NAME</td>            <td>sel_name</td>            <td>refStr</td></tr>
    <tr><td>SEL_NE</td>              <td>sel_ne</td>              <td>!=</td></tr>
    <tr><td>SEL_SYMB</td>            <td>sel_symb</td>            <td>refSymb</td></tr>
    <tr><td>SEL_TYPE</td>            <td>sel_type</td>            <td>refType</td></tr>
</table><p></p>

<a name="set"><h3>15.30 Actions for set types</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>setlib.c function</th>   <th>set_rtl.c function</th></tr>
    <tr><td>SET_ARRLIT</td>          <td>set_arrlit</td>          <td>setArrlit</td></tr>
    <tr><td>SET_BASELIT</td>         <td>set_baselit</td>         <td>setBaselit</td></tr>
    <tr><td>SET_CARD</td>            <td>set_card</td>            <td>setCard</td></tr>
    <tr><td>SET_CMP</td>             <td>set_cmp</td>             <td>setCmp</td></tr>
    <tr><td>SET_CONV1</td>           <td>set_conv1</td>           <td>(noop)</td></tr>
    <tr><td>SET_CONV3</td>           <td>set_conv3</td>           <td>(noop)</td></tr>
    <tr><td>SET_CPY</td>             <td>set_cpy</td>             <td>setCpy</td></tr>
    <tr><td>SET_CREATE</td>          <td>set_create</td>          <td>setCreate</td></tr>
    <tr><td>SET_DESTR</td>           <td>set_destr</td>           <td>setDestr</td></tr>
    <tr><td>SET_DIFF</td>            <td>set_diff</td>            <td>setDiff</td></tr>
    <tr><td>SET_DIFF_ASSIGN</td>     <td>set_diff_assign</td>     <td>setDiffAssign</td></tr>
    <tr><td>SET_ELEM</td>            <td>set_elem</td>            <td>setElem</td></tr>
    <tr><td>SET_EMPTY</td>           <td>set_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>SET_EQ</td>              <td>set_eq</td>              <td>setEq</td></tr>
    <tr><td>SET_EXCL</td>            <td>set_excl</td>            <td>setExcl</td></tr>
    <tr><td>SET_GE</td>              <td>set_ge</td>              <td>setIsSubset(b, a)</td></tr>
    <tr><td>SET_GT</td>              <td>set_gt</td>              <td>setIsProperSubset(b, a)</td></tr>
    <tr><td>SET_HASHCODE</td>        <td>set_hashcode</td>        <td>setHashCode</td></tr>
    <tr><td>SET_ICONV1</td>          <td>set_iconv1</td>          <td>setIConv</td></tr>
    <tr><td>SET_ICONV3</td>          <td>set_iconv3</td>          <td>setIConv</td></tr>
    <tr><td>SET_INCL</td>            <td>set_incl</td>            <td>setIncl</td></tr>
    <tr><td>SET_INTERSECT</td>       <td>set_intersect</td>       <td>setIntersect</td></tr>
    <tr><td>SET_INTERSECT_ASSIGN</td> <td>set_intersect_assign</td> <td>setIntersectAssign</td></tr>
    <tr><td>SET_LE</td>              <td>set_le</td>              <td>setIsSubset</td></tr>
    <tr><td>SET_LT</td>              <td>set_lt</td>              <td>setIsProperSubset</td></tr>
    <tr><td>SET_MAX</td>             <td>set_max</td>             <td>setMax</td></tr>
    <tr><td>SET_MIN</td>             <td>set_min</td>             <td>setMin</td></tr>
    <tr><td>SET_NE</td>              <td>set_ne</td>              <td>setNe</td></tr>
    <tr><td>SET_NEXT</td>            <td>set_next</td>            <td>setNext</td></tr>
    <tr><td>SET_NOT_ELEM</td>        <td>set_not_elem</td>        <td>!setElem</td></tr>
    <tr><td>SET_RAND</td>            <td>set_rand</td>            <td>setRand</td></tr>
    <tr><td>SET_RANGELIT</td>        <td>set_rangelit</td>        <td>setRangelit</td></tr>
    <tr><td>SET_SCONV1</td>          <td>set_sconv1</td>          <td>setSConv</td></tr>
    <tr><td>SET_SCONV3</td>          <td>set_sconv3</td>          <td>setSConv</td></tr>
    <tr><td>SET_SYMDIFF</td>         <td>set_symdiff</td>         <td>setSymdiff</td></tr>
    <tr><td>SET_UNION</td>           <td>set_union</td>           <td>setUnion</td></tr>
    <tr><td>SET_UNION_ASSIGN</td>    <td>set_union_assign</td>    <td>setUnionAssign</td></tr>
    <tr><td>SET_VALUE</td>           <td>set_value</td>           <td>setValue</td></tr>
</table><p></p>

<a name="PRIMITIVE_SOCKET"><h3>15.31 Actions for the type PRIMITIVE_SOCKET</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>strlib.c function</th>   <th>str_rtl.c function</th></tr>
    <tr><td>SOC_ACCEPT</td>          <td>soc_accept</td>          <td>socAccept</td></tr>
    <tr><td>SOC_ADDR_FAMILY</td>     <td>soc_addr_family</td>     <td>socAddrFamily</td></tr>
    <tr><td>SOC_ADDR_NUMERIC</td>    <td>soc_addr_numeric</td>    <td>socAddrNumeric</td></tr>
    <tr><td>SOC_ADDR_SERVICE</td>    <td>soc_addr_service</td>    <td>socAddrService</td></tr>
    <tr><td>SOC_BIND</td>            <td>soc_bind</td>            <td>socBind</td></tr>
    <tr><td>SOC_CLOSE</td>           <td>soc_close</td>           <td>socClose</td></tr>
    <tr><td>SOC_CONNECT</td>         <td>soc_connect</td>         <td>socConnect</td></tr>
    <tr><td>SOC_CPY</td>             <td>soc_cpy</td>             <td>=</td></tr>
    <tr><td>SOC_CREATE</td>          <td>soc_create</td>          <td>&nbsp;</td></tr>
    <tr><td>SOC_EMPTY</td>           <td>soc_empty</td>           <td>&nbsp;</td></tr>
    <tr><td>SOC_EQ</td>              <td>soc_eq</td>              <td>==</td></tr>
    <tr><td>SOC_GETC</td>            <td>soc_getc</td>            <td>socGetc</td></tr>
    <tr><td>SOC_GETS</td>            <td>soc_gets</td>            <td>socGets</td></tr>
    <tr><td>SOC_GET_HOSTNAME</td>    <td>soc_get_hostname</td>    <td>socGetHostname</td></tr>
    <tr><td>SOC_GET_LOCAL_ADDR</td>  <td>soc_get_local_addr</td>  <td>socGetLocalAddr</td></tr>
    <tr><td>SOC_GET_PEER_ADDR</td>   <td>soc_get_peer_addr</td>   <td>socGetPeerAddr</td></tr>
    <tr><td>SOC_HAS_NEXT</td>        <td>soc_has_next</td>        <td>socHasNext</td></tr>
    <tr><td>SOC_INET_ADDR</td>       <td>soc_inet_addr</td>       <td>socInetAddr</td></tr>
    <tr><td>SOC_INET_LOCAL_ADDR</td> <td>soc_inet_local_addr</td> <td>socInetLocalAddr</td></tr>
    <tr><td>SOC_INET_SERV_ADDR</td>  <td>soc_inet_serv_addr</td>  <td>socInetServAddr</td></tr>
    <tr><td>SOC_INPUT_READY</td>     <td>soc_input_ready</td>     <td>socInputReady</td></tr>
    <tr><td>SOC_LINE_READ</td>       <td>soc_line_read</td>       <td>socLineRead</td></tr>
    <tr><td>SOC_LISTEN</td>          <td>soc_listen</td>          <td>socListen</td></tr>
    <tr><td>SOC_NE</td>              <td>soc_ne</td>              <td>!=</td></tr>
    <tr><td>SOC_ORD</td>             <td>soc_ord</td>             <td>(intType)</td></tr>
    <tr><td>SOC_RECV</td>            <td>soc_recv</td>            <td>socRecv</td></tr>
    <tr><td>SOC_RECVFROM</td>        <td>soc_recvfrom</td>        <td>socRecvfrom</td></tr>
    <tr><td>SOC_SEND</td>            <td>soc_send</td>            <td>socSend</td></tr>
    <tr><td>SOC_SENDTO</td>          <td>soc_sendto</td>          <td>socSendto</td></tr>
    <tr><td>SOC_SET_OPT_BOOL</td>    <td>soc_set_opt_bool</td>    <td>socSetOptBool</td></tr>
    <tr><td>SOC_SOCKET</td>          <td>soc_socket</td>          <td>socSocket</td></tr>
    <tr><td>SOC_WORD_READ</td>       <td>soc_word_read</td>       <td>socWordRead</td></tr>
    <tr><td>SOC_WRITE</td>           <td>soc_write</td>           <td>socWrite</td></tr>
</table><p></p>

<a name="database"><h3>15.32 Actions for the types database and sqlStatement</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>sqllib.c function</th>   <th>sql_rtl.c function</th></tr>
    <tr><td>SQL_BIND_BIGINT</td>     <td>sql_bind_bigint</td>     <td>sqlBindBigInt</td></tr>
    <tr><td>SQL_BIND_BIGRAT</td>     <td>sql_bind_bigrat</td>     <td>sqlBindBigRat</td></tr>
    <tr><td>SQL_BIND_BOOL</td>       <td>sql_bind_bool</td>       <td>sqlBindBool</td></tr>
    <tr><td>SQL_BIND_BSTRI</td>      <td>sql_bind_bstri</td>      <td>sqlBindBStri</td></tr>
    <tr><td>SQL_BIND_DURATION</td>   <td>sql_bind_duration</td>   <td>sqlBindDuration</td></tr>
    <tr><td>SQL_BIND_FLOAT</td>      <td>sql_bind_float</td>      <td>sqlBindFloat</td></tr>
    <tr><td>SQL_BIND_INT</td>        <td>sql_bind_int</td>        <td>sqlBindInt</td></tr>
    <tr><td>SQL_BIND_NULL</td>       <td>sql_bind_null</td>       <td>sqlBindNull</td></tr>
    <tr><td>SQL_BIND_STRI</td>       <td>sql_bind_stri</td>       <td>sqlBindStri</td></tr>
    <tr><td>SQL_BIND_TIME</td>       <td>sql_bind_time</td>       <td>sqlBindTime</td></tr>
    <tr><td>SQL_CLOSE</td>           <td>sql_close</td>           <td>sqlClose</td></tr>
    <tr><td>SQL_CMP_DB</td>          <td>sql_cmp_db</td>          <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>SQL_CMP_STMT</td>        <td>sql_cmp_stmt</td>        <td>ptrCmp / ptrCmpGeneric</td></tr>
    <tr><td>SQL_COLUMN_BIGINT</td>   <td>sql_column_bigint</td>   <td>sqlColumnBigInt</td></tr>
    <tr><td>SQL_COLUMN_BIGRAT</td>   <td>sql_column_bigrat</td>   <td>sqlColumnBigRat</td></tr>
    <tr><td>SQL_COLUMN_BOOL</td>     <td>sql_column_bool</td>     <td>sqlColumnBool</td></tr>
    <tr><td>SQL_COLUMN_BSTRI</td>    <td>sql_column_bstri</td>    <td>sqlColumnBStri</td></tr>
    <tr><td>SQL_COLUMN_DURATION</td> <td>sql_column_duration</td> <td>sqlColumnDuration</td></tr>
    <tr><td>SQL_COLUMN_FLOAT</td>    <td>sql_column_float</td>    <td>sqlColumnFloat</td></tr>
    <tr><td>SQL_COLUMN_INT</td>      <td>sql_column_int</td>      <td>sqlColumnInt</td></tr>
    <tr><td>SQL_COLUMN_STRI</td>     <td>sql_column_stri</td>     <td>sqlColumnStri</td></tr>
    <tr><td>SQL_COLUMN_TIME</td>     <td>sql_column_time</td>     <td>sqlColumnTime</td></tr>
    <tr><td>SQL_COMMIT</td>          <td>sql_commit</td>          <td>sqlCommit</td></tr>
    <tr><td>SQL_CPY_DB</td>          <td>sql_cpy_db</td>          <td>sqlCpyDb</td></tr>
    <tr><td>SQL_CPY_STMT</td>        <td>sql_cpy_stmt</td>        <td>sqlCpyStmt</td></tr>
    <tr><td>SQL_CREATE_DB</td>       <td>sql_create_db</td>       <td>sqlCreateDb</td></tr>
    <tr><td>SQL_CREATE_STMT</td>     <td>sql_create_stmt</td>     <td>sqlCreateStmt</td></tr>
    <tr><td>SQL_DESTR_DB</td>        <td>sql_destr_db</td>        <td>sqlDestrDb</td></tr>
    <tr><td>SQL_DESTR_STMT</td>      <td>sql_destr_stmt</td>      <td>sqlDestrStmt</td></tr>
    <tr><td>SQL_DRIVER</td>          <td>sql_driver</td>          <td>sqlDriver</td></tr>
    <tr><td>SQL_EMPTY_DB</td>        <td>sql_empty_db</td>        <td>&nbsp;</td></tr>
    <tr><td>SQL_EMPTY_STMT</td>      <td>sql_empty_stmt</td>      <td>&nbsp;</td></tr>
    <tr><td>SQL_EQ_DB</td>           <td>sql_eq_db</td>           <td>==</td></tr>
    <tr><td>SQL_EQ_STMT</td>         <td>sql_eq_stmt</td>         <td>==</td></tr>
    <tr><td>SQL_ERR_CODE</td>        <td>sql_err_code</td>        <td>sqlErrCode</td></tr>
    <tr><td>SQL_ERR_DB_FUNC</td>     <td>sql_err_db_func</td>     <td>sqlErrDbFunc</td></tr>
    <tr><td>SQL_ERR_LIB_FUNC</td>    <td>sql_err_lib_func</td>    <td>sqlErrLibFunc</td></tr>
    <tr><td>SQL_ERR_MESSAGE</td>     <td>sql_err_message</td>     <td>sqlErrMessage</td></tr>
    <tr><td>SQL_EXECUTE</td>         <td>sql_execute</td>         <td>sqlExecute</td></tr>
    <tr><td>SQL_FETCH</td>           <td>sql_fetch</td>           <td>sqlFetch</td></tr>
    <tr><td>SQL_GET_AUTO_COMMIT</td> <td>sql_get_auto_commit</td> <td>sqlGetAutoCommit</td></tr>
    <tr><td>SQL_IS_NULL</td>         <td>sql_is_null</td>         <td>sqlIsNull</td></tr>
    <tr><td>SQL_NE_DB</td>           <td>sql_ne_db</td>           <td>!=</td></tr>
    <tr><td>SQL_NE_STMT</td>         <td>sql_ne_stmt</td>         <td>!=</td></tr>
    <tr><td>SQL_OPEN_DB2</td>        <td>sql_open_db2</td>        <td>sqlOpenDb2</td></tr>
    <tr><td>SQL_OPEN_FIRE</td>       <td>sql_open_fire</td>       <td>sqlOpenFire</td></tr>
    <tr><td>SQL_OPEN_INFORMIX</td>   <td>sql_open_informix</td>   <td>sqlOpenInformix</td></tr>
    <tr><td>SQL_OPEN_LITE</td>       <td>sql_open_lite</td>       <td>sqlOpenLite</td></tr>
    <tr><td>SQL_OPEN_MY</td>         <td>sql_open_my</td>         <td>sqlOpenMy</td></tr>
    <tr><td>SQL_OPEN_OCI</td>        <td>sql_open_oci</td>        <td>sqlOpenOci</td></tr>
    <tr><td>SQL_OPEN_ODBC</td>       <td>sql_open_odbc</td>       <td>sqlOpenOdbc</td></tr>
    <tr><td>SQL_OPEN_POST</td>       <td>sql_open_post</td>       <td>sqlOpenPost</td></tr>
    <tr><td>SQL_OPEN_SQLSRV</td>     <td>sql_open_sqlsrv</td>     <td>sqlOpenSqlServer</td></tr>
    <tr><td>SQL_OPEN_TDS</td>        <td>sql_open_tds</td>        <td>sqlOpenTds</td></tr>
    <tr><td>SQL_PREPARE</td>         <td>sql_prepare</td>         <td>sqlPrepare</td></tr>
    <tr><td>SQL_ROLLBACK</td>        <td>sql_rollback</td>        <td>sqlRollback</td></tr>
    <tr><td>SQL_SET_AUTO_COMMIT</td> <td>sql_set_auto_commit</td> <td>sqlSetAutoCommit</td></tr>
    <tr><td>SQL_STMT_COLUMN_COUNT</td> <td>sql_stmt_column_count</td> <td>sqlStmtColumnCount</td></tr>
    <tr><td>SQL_STMT_COLUMN_NAME</td>  <td>sql_stmt_column_name</td>  <td>sqlStmtColumnName</td></tr>
</table><p></p>

<a name="string"><h3>15.33 Actions for the type string</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>strlib.c function</th>   <th>str_rtl.c function</th></tr>
    <tr><td>STR_APPEND</td>          <td>str_append</td>          <td>strAppend</td></tr>
    <tr><td>STR_CAT</td>             <td>str_cat</td>             <td>strConcat, strConcatTemp</td></tr>
    <tr><td>STR_CHIPOS</td>          <td>str_chipos</td>          <td>strChIpos</td></tr>
    <tr><td>STR_CHPOS</td>           <td>str_chpos</td>           <td>strChPos</td></tr>
    <tr><td>STR_CHSPLIT</td>         <td>str_chsplit</td>         <td>strChSplit</td></tr>
    <tr><td>STR_CLIT</td>            <td>str_clit</td>            <td>strCLit</td></tr>
    <tr><td>STR_CMP</td>             <td>str_cmp</td>             <td>strCompare</td></tr>
    <tr><td>STR_CPY</td>             <td>str_cpy</td>             <td>strCopy</td></tr>
    <tr><td>STR_CREATE</td>          <td>str_create</td>          <td>strCreate</td></tr>
    <tr><td>STR_DESTR</td>           <td>str_destr</td>           <td>strDestr</td></tr>
    <tr><td>STR_ELEMCPY</td>         <td>str_elemcpy</td>         <td>a-&gt;mem[b-1]=c</td></tr>
    <tr><td>STR_EQ</td>              <td>str_eq</td>              <td>a->size==b->size &amp;&amp; memcmp(a,b,a->size*sizeof(strElemType))==0</td></tr>
    <tr><td>STR_FOR</td>             <td>str_for</td>             <td>for</td></tr>
    <tr><td>STR_FOR_KEY</td>         <td>str_for_key</td>         <td>for</td></tr>
    <tr><td>STR_FOR_VAR_KEY</td>     <td>str_for_var_key</td>     <td>for</td></tr>
    <tr><td>STR_FROM_UTF8</td>       <td>str_from_utf8</td>       <td>strFromUtf8</td></tr>
    <tr><td>STR_GE</td>              <td>str_ge</td>              <td>strGe</td></tr>
    <tr><td>STR_GT</td>              <td>str_gt</td>              <td>strGt</td></tr>
    <tr><td>STR_HASHCODE</td>        <td>str_hashcode</td>        <td>strHashCode</td></tr>
    <tr><td>STR_HEAD</td>            <td>str_head</td>            <td>strHead</td></tr>
    <tr><td>STR_IDX</td>             <td>str_idx</td>             <td>a-&gt;mem[b-1]</td></tr>
    <tr><td>STR_IPOS</td>            <td>str_ipos</td>            <td>strIpos</td></tr>
    <tr><td>STR_LE</td>              <td>str_le</td>              <td>strLe</td></tr>
    <tr><td>STR_LIT</td>             <td>str_lit</td>             <td>strLit</td></tr>
    <tr><td>STR_LNG</td>             <td>str_lng</td>             <td>a->size</td></tr>
    <tr><td>STR_LOW</td>             <td>str_low</td>             <td>strLow, strLowTemp</td></tr>
    <tr><td>STR_LPAD</td>            <td>str_lpad</td>            <td>strLpad</td></tr>
    <tr><td>STR_LPAD0</td>           <td>str_lpad0</td>           <td>strLpad0, strLpad0Temp</td></tr>
    <tr><td>STR_LT</td>              <td>str_lt</td>              <td>strLt</td></tr>
    <tr><td>STR_LTRIM</td>           <td>str_ltrim</td>           <td>strLtrim</td></tr>
    <tr><td>STR_MULT</td>            <td>str_mult</td>            <td>strMult</td></tr>
    <tr><td>STR_NE</td>              <td>str_ne</td>              <td>a->size!=b->size || memcmp(a,b,a->size*sizeof(strElemType))!=0</td></tr>
    <tr><td>STR_POS</td>             <td>str_pos</td>             <td>strPos</td></tr>
    <tr><td>STR_POSCPY</td>          <td>str_poscpy</td>          <td>memcpy</td></tr>
    <tr><td>STR_PUSH</td>            <td>str_push</td>            <td>strPush</td></tr>
    <tr><td>STR_RANGE</td>           <td>str_range</td>           <td>strRange</td></tr>
    <tr><td>STR_RCHIPOS</td>         <td>str_rchipos</td>         <td>strRChIpos</td></tr>
    <tr><td>STR_RCHPOS</td>          <td>str_rchpos</td>          <td>strRChPos</td></tr>
    <tr><td>STR_REPL</td>            <td>str_repl</td>            <td>strRepl</td></tr>
    <tr><td>STR_RIPOS</td>           <td>str_ripos</td>           <td>strRIPos</td></tr>
    <tr><td>STR_RPAD</td>            <td>str_rpad</td>            <td>strRpad</td></tr>
    <tr><td>STR_RPOS</td>            <td>str_rpos</td>            <td>strRpos</td></tr>
    <tr><td>STR_RTRIM</td>           <td>str_rtrim</td>           <td>strRtrim</td></tr>
    <tr><td>STR_SPLIT</td>           <td>str_split</td>           <td>strSplit</td></tr>
    <tr><td>STR_STR</td>             <td>str_str</td>             <td>(noop)</td></tr>
    <tr><td>STR_SUBSTR</td>          <td>str_substr</td>          <td>strSubstr</td></tr>
    <tr><td>STR_SUBSTR_FIXLEN</td>   <td>str_substr_fixlen</td>   <td>strSubstrFixLen</td></tr>
    <tr><td>STR_TAIL</td>            <td>str_tail</td>            <td>strTail</td></tr>
    <tr><td>STR_TO_UTF8</td>         <td>str_to_utf8</td>         <td>strToUtf8</td></tr>
    <tr><td>STR_TRIM</td>            <td>str_trim</td>            <td>strTrim</td></tr>
    <tr><td>STR_UP</td>              <td>str_up</td>              <td>strUp, strUpTemp</td></tr>
    <tr><td>STR_VALUE</td>           <td>str_value</td>           <td>strValue</td></tr>
</table><p></p>

<a name="time"><h3>15.34 Actions for the type time</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>timlib.c function</th>   <th>tim_unx.c/tim_win.c function</th></tr>
    <tr><td>TIM_AWAIT</td>           <td>tim_await</td>           <td>timAwait</td></tr>
    <tr><td>TIM_FROM_TIMESTAMP</td>  <td>tim_from_timestamp</td>  <td>timFromTimestamp</td></tr>
    <tr><td>TIM_NOW</td>             <td>tim_now</td>             <td>timNow</td></tr>
    <tr><td>TIM_SET_LOCAL_TZ</td>    <td>tim_set_local_tz</td>    <td>timSetLocalTZ</td></tr>
</table><p></p>

<a name="type"><h3>15.35 Actions for the type type</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>typlib.c function</th>   <th>typ_data.c function</th></tr>
    <tr><td>TYP_ADDINTERFACE</td>    <td>typ_addinterface</td>    <td>&nbsp;</td></tr>
    <tr><td>TYP_CMP</td>             <td>typ_cmp</td>             <td>typCmp</td></tr>
    <tr><td>TYP_CPY</td>             <td>typ_cpy</td>             <td>typCpy</td></tr>
    <tr><td>TYP_CREATE</td>          <td>typ_create</td>          <td>typCreate</td></tr>
    <tr><td>TYP_DESTR</td>           <td>typ_destr</td>           <td>typDestr</td></tr>
    <tr><td>TYP_EQ</td>              <td>typ_eq</td>              <td>==</td></tr>
    <tr><td>TYP_FUNC</td>            <td>typ_func</td>            <td>typFunc</td></tr>
    <tr><td>TYP_GENSUB</td>          <td>typ_gensub</td>          <td>&nbsp;</td></tr>
    <tr><td>TYP_GENTYPE</td>         <td>typ_gentype</td>         <td>&nbsp;</td></tr>
    <tr><td>TYP_HASHCODE</td>        <td>typ_hashcode</td>        <td>(intType)(((memSizeType)a)&gt;&gt;6)</td></tr>
    <tr><td>TYP_ISDECLARED</td>      <td>typ_isdeclared</td>      <td>&nbsp;</td></tr>
    <tr><td>TYP_ISDERIVED</td>       <td>typ_isderived</td>       <td>typIsDerived</td></tr>
    <tr><td>TYP_ISFORWARD</td>       <td>typ_isforward</td>       <td>&nbsp;</td></tr>
    <tr><td>TYP_ISFUNC</td>          <td>typ_isfunc</td>          <td>typIsFunc</td></tr>
    <tr><td>TYP_ISVARFUNC</td>       <td>typ_isvarfunc</td>       <td>typIsVarfunc</td></tr>
    <tr><td>TYP_MATCHOBJ</td>        <td>typ_matchobj</td>        <td>typMatchobj</td></tr>
    <tr><td>TYP_META</td>            <td>typ_meta</td>            <td>typMeta</td></tr>
    <tr><td>TYP_NE</td>              <td>typ_ne</td>              <td>!=</td></tr>
    <tr><td>TYP_NUM</td>             <td>typ_num</td>             <td>typNum</td></tr>
    <tr><td>TYP_RESULT</td>          <td>typ_result</td>          <td>typResult</td></tr>
    <tr><td>TYP_SET_IN_PARAM_REF</td>   <td>typ_set_in_param_ref</td>    <td>&nbsp;</td></tr>
    <tr><td>TYP_SET_IN_PARAM_VALUE</td> <td>typ_set_in_param_value</td>  <td>&nbsp;</td></tr>
    <tr><td>TYP_STR</td>             <td>typ_str</td>             <td>typStr</td></tr>
    <tr><td>TYP_VALUE</td>           <td>typ_value</td>           <td>typValue</td></tr>
    <tr><td>TYP_VARCONV</td>         <td>typ_varconv</td>         <td>&nbsp;</td></tr>
    <tr><td>TYP_VARFUNC</td>         <td>typ_varfunc</td>         <td>typVarfunc</td></tr>
</table><p></p>

<a name="utf8File"><h3>15.36 Actions for the type utf8File</h3></a>
<p></p><table border="1" cellspacing="0" cellpadding="5">
    <tr><th>Action name</th>         <th>ut8lib.c function</th>   <th>ut8_rtl.c function</th></tr>
    <tr><td>UT8_GETC</td>            <td>ut8_getc</td>            <td>ut8Getc</td></tr>
    <tr><td>UT8_GETS</td>            <td>ut8_gets</td>            <td>ut8Gets</td></tr>
    <tr><td>UT8_LINE_READ</td>       <td>ut8_line_read</td>       <td>ut8LineRead</td></tr>
    <tr><td>UT8_SEEK</td>            <td>ut8_seek</td>            <td>ut8Seek</td></tr>
    <tr><td>UT8_WORD_READ</td>       <td>ut8_word_read</td>       <td>ut8WordRead</td></tr>
    <tr><td>UT8_WRITE</td>           <td>ut8_write</td>           <td>ut8Write</td></tr>
</table><p></p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/graphic.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/ffi.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
