<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 Manual: Introduction</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Manual</big></a>
<a class="menu" href="intro.htm">Introduction</a>
<a class="menu" href="tutorial.htm">Tutorial</a>
<a class="menu" href="decls.htm">Declarations</a>
<a class="menu" href="stats.htm">Statements</a>
<a class="menu" href="types.htm">Types</a>
<a class="menu" href="params.htm">Parameters</a>
<a class="menu" href="objects.htm">Objects</a>
<a class="menu" href="file.htm">File I/O</a>
<a class="menu" href="syntax.htm">Syntax</a>
<a class="menu" href="tokens.htm">Tokens</a>
<a class="menu" href="expr.htm">Expressions</a>
<a class="menu" href="os.htm">OS&nbsp;access</a>
<a class="menu" href="database.htm">Database</a>
<a class="menu" href="graphic.htm">Graphic</a>
<a class="menu" href="actions.htm">Actions</a>
<a class="menu" href="ffi.htm">Foreign&nbsp;funcs</a>
<a class="menu" href="errors.htm">Errors</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Manual</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Introduction</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/index.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/tutorial.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<a name="file_start"></a><p></p>
<a name="INTRODUCTION"><h2>1. INTRODUCTION</h2></a>

<p></p>

<a name="What_is_Seed7"><h3>1.1 What is Seed7?</h3></a>
<p>
    Seed7 is a general-purpose programming language. It is a
  higher level language compared to Ada, C++ and Java. In Seed7
  new statements and operators can be defined easily. Functions
  with type results and type parameters are more elegant than
  the usual template or generics concept. Object orientation is
  used when it brings advantages and not in places when other
  solutions are more obvious. Although Seed7 contains several
  concepts of other programming languages it is generally not
  considered as a direct descendant of any other programming
  language.
</p><p>
  The programmer should concentrate on problem solving instead
  of administration or the fulfillment of some paradigm.
  Therefore Seed7 allows programming in the "problem space"
  instead of bending everything into a small syntactic or
  semantic concept. The predefined constructs of Seed7 are
  defined in a way to be easy readable and understandable. This
  practical approach can be summarized as:
</p><dl><dd><table border="1" cellspacing="0" cellpadding="5"><tr><td>
    <big><b><font color=orange>&nbsp;Programming should be fun&nbsp;</font></b></big>
</td></tr></table></dd></dl><p>
  Seed7 programs can be interpreted or compiled. Therefore Seed7
  can be used for scripting and for "real" programs.
</p>

<a name="Why_a_new_programming_language"><h3>1.2 Why a new programming language?</h3></a>
<p>
    Conventional programming languages have a firmly given
  syntactic structure. The form of the statements, operators,
  declarations, procedures and functions is fixed in the
  language definition and cannot be changed by the user. It is
  only possible to declare new procedures, functions and in
  some languages also new operators. However the syntax of
  procedure, function and operator calls cannot be changed.
  Although this rigid pattern is favorable for the portability
  of programs, the improvement of the programming language is
  almost impossible. Extensions are however desirable, in order
  to repair existing weaknesses, to introduce new more obvious
  constructs and to adapt the programming language to different
  application areas. E.g.: In the area of mathematics the
  readability of a program can be substantially increased by
  the introduction of matrix and vector operators. After
  declaring an inner product and an outer (or cross) product for
  vectors it is possible to write e.g.
</p><pre class="indent">
v1: = v2 <span class="op">cross</span> v3;   write(v1 * v2);
</pre><p>
  Programs which search for some data in a database can become
  more understandable by using a for statement to loop over the
  tables. A usage of such a for statement could be:
</p><pre class="indent">
<span class="keywd">for</span> person1, person2
<span class="keywd">where</span> person1.age = person2.age <span class="op">and</span>
     person1.mother = person2.mother <span class="op">and</span>
     person1 &lt;> person2 <span class="keywd">do</span>
   writeln(<span class="stri">"Twins: "</span> &lt;&amp; person1.name &lt;&amp; <span class="stri">" and "</span> &lt;&amp; person2.name);
<span class="keywd">end for</span>;
</pre><p>
  Such extensions make understanding, changing and debugging of
  a program easier.
</p>

<a name="Features_of_Seed7"><h3>1.3 Features of Seed7</h3></a>
<p>
  Seed7 has the following features
</p><ul>
    <li>User defined statements and operators.</li>

    <li>Types are first class objects and therefore templates and
      generics can be defined easily without special syntax.</li>

    <li>Predefined constructs like arrays or for-loops are
      defined in the language itself.</li>

    <li><a class="link" href="objects.htm">Object orientation</a> is based on interfaces, supports
      multiple dispatch and allows to connect methods to objects.</li>

    <li><a class="link" href="../faq.htm#static_type_checking">Static type checking</a> and no <a class="link" href="../faq.htm#automatic_casts">automatic casts</a>.</li>

    <li>There is <a class="link" href="errors.htm#Exceptions">exception handling</a></li>

    <li>There are checks for <a class="link" href="errors.htm#INDEX_ERROR">array indices</a> and <a class="link" href="../faq.htm#integer_overflow">integer overflow</a>.</li>

    <li><a class="link" href="tutorial.htm#Overloading">Overloading</a> of procedures/functions/operators/statements</li>

    <li>Various predefined types like resizable <a class="type" href="types.htm#array">arrays</a>, <a class="type" href="types.htm#hash">hashes</a>,
      <a class="type" href="types.htm#set">bitsets</a>, <a class="type" href="types.htm#struct">structs</a>, etc.</li>
</ul><p>
  But a new programming language differs not only from existing
  ones by new features. The real advantage comes from omitting
  features which are outdated.
</p><p>
  Several concepts in use by other languages are not present
</p><ul>
    <li>There is no Null.</li>

    <li>There is no goto statement.
      Hidden gotos like <a class="link" href="../faq.htm#break_and_continue">break- and continue-statements</a> are
      also omitted.</li>

    <li>There is no return statement. Instead a result variable
      can be defined to which the result of a function can
      be assigned.</li>

    <li>There are no <a class="link" href="../faq.htm#automatic_casts">automatic type conversions</a>.
      When a subprogram should be used for different types
      it must be overloaded.</li>

    <li>There is no implicit fall-through for control flow
      as in the switch statement of C.</li>

    <li>There is no <a class="link" href="../faq.htm#undefined_behavior">undefined behavior</a>.</li>

    <li>There is no manual <a class="link" href="../faq.htm#garbage_collection">memory management</a>.</li>

    <li>There is no <a class="link" href="../faq.htm#do_what_i_mean">"do what I mean"</a> heuristic,
      where the compiler tries to read the programmers mind.</li>

    <li>There is no preprocessor to accommodate for language
      features that should exist by default.</li>

    <li>There are no <a class="link" href="../faq.htm#variable_parameter_list">variable length parameter lists</a>.
      Instead it is possible to use arrays as parameters.</li>

    <li>There are no default parameters.
      But it is easy to define two subprograms: One with and
      one without an additional parameter.</li>

    <li>There is no special "parameter" called "self" or "this".
      In a procedure the receiving object is defined as
      formal parameter with a user-defined name.</li>

    <li>There is no macro feature since this mechanism is too
      similar to the subprogram feature. Instead subprograms
      can be used in a more flexible way than in other languages.</li>

    <li>There are no <a class="link" href="../faq.htm#reserved_words">reserved words</a>.</li>

    <li>There is no conceptual distinction between functions,
      operators, procedures and statements.</li>

    <li>The procedure calling mechanism is not based on a concept
      with an object-message pair (An object receives a message).
      Instead a match is done over a list of objects. This more
      general (and powerful) mechanism is called multiple dispatch
      and it includes the simple object-message mechanism as
      special case.</li>
</ul><p>
  There are several concepts which are also used by other languages:
</p><ul>
    <li><a class="link" href="tokens.htm#Comments">Block comments</a> start with <a class="comment" href="tokens.htm#Comments">(* and end with *)</a> and may be nested.</li>

    <li><a class="link" href="tokens.htm#Line_comments">Line comments</a> start with <a class="comment" href="tokens.htm#Line_comments"># and are terminated with the end of the line.</a></li>
</ul><p>
  There are several concepts which are new
</p><ul>
    <li>Variables and constants must be initialized when they are
      defined.</li>

    <li>Every expression has exactly one type.
      That means that overloaded functions are resolved with
      their actual parameters and not with the context of their
      call. (This is different to the overloading mechanism
      used by ADA)</li>

    <li>With a syntax declaration new operators and statements
      can be defined.</li>

    <li>Not only predefined operator symbols can be
      overloaded. Additionally it is possible to invent
      completely new operator symbols.</li>
</ul><p>
  Several restrictions of other languages are released
</p><ul>
    <li>There is no limitation in the length of an identifier and
      all characters of an identifier are significant.</li>

    <li>Statements and parentheses can be nested without limitation
      in depth.</li>

    <li>The number of parameters and local variables is not
      limited.</li>

    <li><a class="link" href="types.htm#string">Strings</a> can contain any characters (also the NUL character)
      This allows holding binary information in strings.</li>

    <li>Although strings are not NUL terminated they have
      no size limitation. (Except there is no more memory)</li>

    <li><a class="link" href="tokens.htm#String_literals">String literals</a> can have any length.</li>

    <li>There is no limitation in the length of a source line.</li>

    <li>There is no level limitation for nesting includes.</li>
</ul>

<a name="How_to_read_the_manual"><h3>1.4 How to read the manual</h3></a>
<p>
    You can have several views of the Seed7 programming language.
  Dependent on the view you can concentrate on specific
  chapters.
</p><p>
  For example Seed7 can be used as conventional programming language.
  In this case you are interested in how the statements look like,
  which types are available, which operators are predefined, how
  to declare variables and procedures and other things like these.
  The statements and the predefined types are described in <a class="link" href="stats.htm">chapter
  4 (Predefined statements)</a> and <a class="link" href="types.htm">chapter 5 (Predefined types)</a> and the
  declaration mechanism is described in <a class="link" href="decls.htm">chapter 3 (Declarations)</a>.
</p><p>
  But Seed7 is also an object oriented programming language.
  In this case you are interested in how to define new classes,
  how instances are generated, the method calling mechanism,
  the predefined class hierarchy and other things like these.
  The object orientation of Seed7 is described in <a class="link" href="objects.htm">chapter 7
  (Object orientation)</a>. A good example for classes and instances
  is the file system which is described in <a class="link" href="file.htm">chapter 8 (The file
  system)</a>.
</p><p>
  And Seed7 is also an extensible programming language.
  In this case you are interested in how to declare new
  statements, how to define new operators, assigning a priority
  and an associativity to operators and other things like these.
  An overview about syntax declarations can be found in
  <a class="link" href="decls.htm#Syntax_declarations">Chapter 3.2 (Syntax declarations)</a>. A detailed description
  of the Seed7 syntax definitions can be found in <a class="link" href="syntax.htm">chapter 9
  (Structured syntax definition)</a>. <a class="link" href="stats.htm">Chapter 4 (Predefined
  statements)</a> contains various examples of syntax and semantic
  declarations. The basic parts of the syntax are described in
  <a class="link" href="tokens.htm">chapter 10 (Tokens)</a> and <a class="link" href="expr.htm">chapter 11 (Expressions)</a>.
</p>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../manual/index.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../manual/tutorial.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
