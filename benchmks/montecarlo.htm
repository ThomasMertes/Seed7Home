<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Language comparison benchmark: Monte Carlo</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Benchmarks</big></a>
<a class="menu" href="sieve.htm">Eratosthenes</a>
<a class="menu" href="montecarlo.htm">Monte Carlo</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Benchmarks</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Monte Carlo</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../benchmks/sieve.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../benchmks/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<span class="navigation">next</span>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
The area under the curve y = sin(x<sup>2</sup>) and above the x-axis for x values between
0 and &radic;&pi; should be determined. This should be done with a Monte Carlo integration.
The program should check 10000000 random points inside a rectangle where x is
in the range [0, 2) and y is in the range [0. 1). A random point (x, y) is inside
the region if y &lt; sin(x<sup>2</sup>) holds.
</p>

<div><a name="c"><h3>C</h3></a>
<p>
</p><pre class="indent">
#<span class="keywd">include</span> &lt;stdio.h&gt;
#<span class="keywd">include</span> &lt;stdlib.h&gt;
#<span class="keywd">include</span> &lt;math.h&gt;
#<span class="keywd">include</span> &lt;sys/time.h&gt;

<span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> *argv[]) {
  <span class="type">struct</span> <span class="type">timeval</span> time;

  gettimeofday(&amp;time,NULL);
  srand48((unsigned int) time.tv_usec);

  <span class="type">int</span> i, N = 10000000, num = 0;
  <span class="type">double</span> x, y;

  <span class="keywd">for</span> (i = 0; i &lt; N; i++) {
    x = 2 * drand48();
    y = drand48();
    <span class="keywd">if</span> (y &lt; sin(x*x)) num++;
  }

  printf(<span class="stri">"%f\n"</span>, 2.0 * num / N);
  <span class="keywd">return</span> 0;
}
</pre><p>
Measurement:
</p><pre class="indent">
prompt> gcc -lm -O2 sinx2area.c -o sinx2area
prompt> time ./sinx2area
0.894774

real    0m0.431s
user    0m0.431s
sys     0m0.000s
</pre></div>

<div><a name="cpp"><h3>C++</h3></a>
<p>
</p><pre class="indent">
#<span class="keywd">include</span> &lt;cstdio&gt;
#<span class="keywd">include</span> &lt;cstdint&gt;
#<span class="keywd">include</span> &lt;random&gt;
#<span class="keywd">include</span> &lt;chrono&gt;

<span class="keywd">using</span> <span class="keywd">namespace</span> std;
<span class="keywd">using</span> <span class="type">randgen_t</span> = minstd_rand;
<span class="keywd">using</span> <span class="type">int32</span> = int_fast32_t;

<span class="keywd">static constexpr const</span> <span class="type">int32</span> N = 10'000'000;

<span class="type">int</span> main (<span class="type">int</span> argc, <span class="type">char</span> *argv[]) {
	<span class="type">minstd_rand::result_type</span> default_seed =
		<span class="type">std::chrono::system_clock</span>::now().time_since_epoch().count();
	<span class="type">randgen_t</span> rand_gen{default_seed};

	<span class="type">int32</span> n = 0;
	<span class="keywd">for</span> (<span class="type">int32</span> i = 0; i &lt; N; ++i) {
		<span class="type">double</span> x = (2.0 * rand_gen()) / <span class="type">randgen_t</span>::max();
		<span class="type">double</span> y = (1.0 * rand_gen()) / <span class="type">randgen_t</span>::max();
		<span class="keywd">if</span> (y &lt; sin(x*x)) {
			n++;
		}
	}
	
	printf(<span class="stri">"%f\n"</span>, (2.0 * n) / N);
}
</pre><p>
Measurement:
</p><pre class="indent">
prompt> g++ -O3 -flto sinx2area.cpp -lm -o sinx2area
prompt> time ./sinx2area
0.894844

real    0m0.290s
user    0m0.286s
sys     0m0.004s
</pre></div>

<div><a name="go"><h3>Go</h3></a>
<p>
</p><pre class="indent">
<span class="keywd">package</span> <span class="keywd">main</span>

<span class="keywd">import</span> (
   <span class="stri">"fmt"</span>
   <span class="stri">"math"</span>
   <span class="stri">"math/rand"</span>
   <span class="stri">"time"</span>
)

<span class="keywd">const</span> N = 10000000
<span class="keywd">var</span> x, y float64
<span class="keywd">var</span> num int = 0

<span class="keywd">func</span> <span class="keywd">main</span>() {
   rand.Seed(time.Now().UnixNano())
   <span class="keywd">for</span> i := 0; i &lt; N; i++ {
      x := 2.0*rand.Float64()
      y := rand.Float64()
      <span class="keywd">if</span> y &lt; math.Sin(x*x) {
         num++
      }
   }
   fmt.Printf(<span class="stri">"%.7f\n"</span>, 2.0*float64(num)/float64(N))
}
</pre><p>
Measurement:
</p><pre class="indent">
prompt> go build sinx2area.go
prompt> time ./sinx2area
0.8946618

real    0m0.608s
user    0m0.601s
sys     0m0.008s
</pre></div>

<div><a name="java"><h3>Java</h3></a>
<p>
</p><pre class="indent">
<span class="keywd">public</span> <span class="keywd">class</span> sinx2area {
   <span class="keywd">public</span> <span class="keywd">static</span> void main (<span class="type">String</span>[] args) {
      <span class="type">int</span> N = 10000000;
      <span class="type">int</span> num = 0;
      <span class="keywd">for</span> (<span class="type">int</span> i = 0; i &lt; N; i++) {
         <span class="type">double</span> x = 2.0 * Math.random();
         <span class="type">double</span> y = Math.random();
         <span class="keywd">if</span> (y &lt; Math.sin(x*x)) num += 1;
      }
      System.out.println(2.0 * num / N);
    }
}
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time java sinx2area
0.8944406

real    0m0.526s
user    0m0.539s
sys     0m0.016s
</pre></div>

<div><a name="javascript"><h3>JavaScript</h3></a>
<p>
</p><pre class="indent">
(<span class="keywd">function</span>(){
	<span class="keywd">var</span> N = 10000000;
	<span class="keywd">var</span> num = 0;
	<span class="keywd">for</span> (var i = 0; i &lt; N; i ++) {
		<span class="keywd">var</span> x = 2 * Math.random();
		<span class="keywd">var</span> y = Math.random();
		<span class="keywd">if</span> (y &lt; Math.sin(x * x))
			num++;
	}
	console.log(2 * num / N);
})();
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time node sinx2area.js
0.8952678

real    0m0.475s
user    0m0.453s
sys     0m0.024s
</pre></div>

<div><a name="perl"><h3>Perl</h3></a>
<p>
</p><pre class="indent">
#!/usr/bin/perl

$n=10000000;
$tot=0;

<span class="keywd">for</span>($i=1;$i&lt;=$n;$i++){
    $x=2*rand();
    $y=rand();
    
    <span class="keywd">if</span>($y&lt;sin($x*$x)){
        $tot++;
    }
}
$area=(2.0*$tot)/$n;
print "$area\n";
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time perl sinx2area.pl
0.8940136

real    0m3.046s
user    0m3.038s
sys     0m0.000s
</pre></div>

<div><a name="python2"><h3>Python 2</h3></a>
<p>
</p><pre class="indent">
#!/usr/bin/python
<span class="keywd">import</span> random
<span class="keywd">import</span> math

max=10000000
tot=0

<span class="keywd">for</span> i <span class="keywd">in</span> range(1,max+1):
    x=2*random.random()
    y=random.random()
    <span class="keywd">if</span> y &lt; math.sin(x*x):
        tot=tot+1

area=(2.0*tot/max)
<span class="keywd">print</span> "%0.5f" %(area)
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time python sinx2area.py 
0.89431

real    0m4.480s
user    0m4.402s
sys     0m0.076s
</pre></div>

<div><a name="ruby"><h3>Ruby</h3></a>
<p>
</p><pre class="indent">
#!/usr/bin/ruby

N = 10000000
num = 0
<span class="keywd">for</span> i <span class="keywd">in</span> 1 .. N <span class="keywd">do</span>
    x = 2 * rand()
    y = rand()
    num += 1 <span class="keywd">if</span> (y &lt; Math.sin(x**2))
<span class="keywd">end</span>
area = (2.0 * num) / N
puts(area)
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time ruby sinx2area.rb
0.8949598

real    0m2.960s
user    0m2.947s
sys     0m0.013s
</pre></div>

<div><a name="seed7"><h3>Seed7</h3></a>
<p>
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/math.htm">math.s7i</a>"</span>;

<a class="keywd_no_ul" href="../manual/decls.htm#Procedure_declarations">const</a> <a class="type" href="../manual/types.htm#proc">proc</a>: main <a class="keywd_no_ul" href="../faq.htm#initialization_with_is">is</a> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <a class="keywd_no_ul" href="../manual/decls.htm#Constant_declarations">const</a> <a class="type" href="../manual/types.htm#integer">integer</a>: N <a class="keywd_no_ul" href="../faq.htm#initialization_with_is">is</a> 10000000;
    <a class="keywd_no_ul" href="../manual/decls.htm#Variable_declarations">var</a> <a class="type" href="../manual/types.htm#integer">integer</a>: num <a class="keywd_no_ul" href="../faq.htm#initialization_with_is">is</a> 0;
    <a class="keywd_no_ul" href="../manual/decls.htm#Variable_declarations">var</a> <a class="type" href="../manual/types.htm#float">float</a>: x <a class="keywd_no_ul" href="../faq.htm#initialization_with_is">is</a> 0.0;
    <a class="keywd_no_ul" href="../manual/decls.htm#Variable_declarations">var</a> <a class="type" href="../manual/types.htm#float">float</a>: y <a class="keywd_no_ul" href="../faq.htm#initialization_with_is">is</a> 0.0;
  <span class="keywd">begin</span>
    <a class="keywd_no_ul" href="../libraries/forloop.htm#for(in_integer)do(in_proc)end_for">for</a> N <a class="keywd_no_ul" href="../libraries/forloop.htm#for(in_integer)do(in_proc)end_for">do</a>
      x <a class="op_no_ul" href="../manual/stats.htm#Assignment">:=</a> <a class="func" href="../libraries/float.htm#rand(in_float,in_float)">rand</a>(0.0, 2.0);
      y <a class="op_no_ul" href="../manual/stats.htm#Assignment">:=</a> <a class="func" href="../libraries/float.htm#rand(in_float,in_float)">rand</a>(0.0, 1.0);
      num <a class="op_no_ul" href="../libraries/integer.htm#(inout_integer)+:=(in_integer)">+:=</a> <a class="func_no_ul" href="../libraries/boolean.htm#ord(in_boolean)">ord</a>(y <a class="op_no_ul" href="../libraries/float.htm#(in_float)<(in_float)">&lt;</a> <a class="func" href="../libraries/math.htm#sin(in_float)">sin</a>(x<a class="op_no_ul" href="../libraries/float.htm#(in_float)*(in_float)">*</a>x));
    <a class="keywd_no_ul" href="../libraries/forloop.htm#for(in_integer)do(in_proc)end_for">end</a> <a class="keywd_no_ul" href="../libraries/forloop.htm#for(in_integer)do(in_proc)end_for">for</a>;
    <a class="func_no_ul" href="../libraries/enable_io.htm#writeln(in_aType)">writeln</a>(2.0 <a class="op_no_ul" href="../libraries/float.htm#(in_float)*(in_float)">*</a> <a class="func" href="../libraries/float.htm#float(in_integer)">float</a>(num) <a class="op_no_ul" href="../libraries/float.htm#(in_float)/(in_float)">/</a> <a class="func" href="../libraries/float.htm#float(in_integer)">float</a>(N) <a class="op_no_ul" href="../libraries/float.htm#(in_float)digits(in_integer)">digits</a> 7);
  <span class="keywd">end func</span>;
</pre><p>
Measurement:
</p><pre class="indent">
prompt> s7c -O2 -oc3 sinx2area
prompt> time ./sinx2area
0.8947734

real    0m0.223s
user    0m0.223s
sys     0m0.000s
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../benchmks/sieve.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../benchmks/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<span class="navigation">next</span>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
