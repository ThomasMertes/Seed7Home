<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Language comparison benchmark: Eratosthenes</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('../images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="../images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="../images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('../images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="../index.htm"><big>Seed7</big></a>
<a class="menu" href="../faq.htm">FAQ</a>
<a class="menu" href="../manual/index.htm">Manual</a>
<a class="menu" href="../demo.htm">Demo</a>
<a class="menu" href="../scrshots/index.htm">Screenshots</a>
<a class="menu" href="../examples/index.htm">Examples</a>
<a class="menu" href="../libraries/index.htm">Libraries</a>
<a class="menu" href="../algorith/index.htm">Algorithms</a>
<a class="menu" href="../benchmks/index.htm">Benchmarks</a>
<a class="menu" href="../subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="../build.htm">Build Seed7</a>
<a class="menu" href="../links.htm">Links</a>

<br />

<a class="head" href="index.htm"><big>Benchmarks</big></a>
<a class="menu" href="sieve.htm">Eratosthenes</a>
<a class="menu" href="montecarlo.htm">Monte Carlo</a>
</div>
<div class="content">
<div style="padding-right:20;">
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="80">
<a class="head" href="index.htm"><big>Benchmarks</big></a>
</td>
<td>
<table width="10">
</table>
</td>
<td align="left" width="60%">
<b><big>Eratosthenes</big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../benchmks/index.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../benchmks/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../benchmks/montecarlo.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
The primes between 1 and 10000000 (ten million) should be set in a bitset.
To do that the sieve of Eratosthenes should be used.
Afterwards the cardinality of the bitset should be computed and written as result.
</p>

<div><a name="cpp"><h3>C++</h3></a>
<p>
The C++ template <tt><span class="type">bitset</span></tt> requires that the maximum value
is specified at compile time.
</p><pre class="indent">
#<span class="keywd">include</span> &lt;bitset&gt;
#<span class="keywd">include</span> &lt;cstdio&gt;
#<span class="keywd">include</span> &lt;cmath&gt;

<span class="keywd">const</span> <span class="type">int</span> maxValueInSet = 10000000;

<span class="type">std</span>::<span class="type">bitset</span>&lt;maxValueInSet + 1&gt; eratosthenes () {
  <span class="type">std</span>::<span class="type">bitset</span>&lt;maxValueInSet + 1&gt; sieve;
  <span class="type">int</span> sqrtN = static_cast&lt;<span class="type">int</span>&gt;(std::sqrt(maxValueInSet));

  sieve.set();
  sieve.reset(0);
  sieve.reset(1);
  <span class="keywd">for</span> (<span class="type">int</span> i = 2; i <= sqrtN; i++) {
    <span class="keywd">if</span> (sieve[i]) {
      <span class="keywd">for</span> (<span class="type">int</span> j = i * i; j &lt;= maxValueInSet; j += i) {
        sieve.reset(j);
      }
    }
  }
  <span class="keywd">return</span> sieve;
}

<span class="type">int</span> main (<span class="type">int</span> argc, <span class="type">char</span> *argv[]) {
  <span class="type">std</span>::<span class="type">bitset</span>&lt;maxValueInSet + 1&gt; sieve = eratosthenes();
  printf(<span class="stri">"%d\n"</span>, sieve.count());
}
</pre><p>
Measurement:
</p><pre class="indent">
prompt> g++ -O2 sieve.c++ -o sieve
prompt> time ./sieve
664579

real    0m0.037s
user    0m0.037s
sys     0m0.000s
</pre></div>

<div><a name="java"><h3>Java</h3></a>
<p>
</p><pre class="indent">
<span class="keywd">import</span> java.util.BitSet;
<span class="keywd">import</span> java.lang.String;

<span class="keywd">public</span> <span class="keywd">class</span> sieve {

    <span class="keywd">private</span> <span class="keywd">static</span> BitSet eratosthenes (<span class="type">int</span> n) {
        <span class="type">BitSet</span> sieve = <span class="keywd">new</span> BitSet();
        <span class="type">int</span> sqrtN = (<span class="type">int</span>) Math.sqrt(n);

        sieve.set(2, n + 1, true);
        <span class="keywd">for</span> (<span class="type">int</span> i = 2; i <= sqrtN; i++) {
            <span class="keywd">if</span> (sieve.get(i)) {
                <span class="keywd">for</span> (<span class="type">int</span> j = i * i; j <= n; j += i) {
                    sieve.clear(j);
                }
            }
        }
        <span class="keywd">return</span> sieve;
    }

    <span class="keywd">public</span> <span class="keywd">static</span> void main(<span class="type">String</span> args[]) {
        <span class="type">BitSet</span> sieve = eratosthenes(10000000);
        System.out.println(sieve.cardinality());
    }
}
</pre><p>
Measurement:
</p><pre class="indent">
prompt> javac sieve.java
prompt> time java sieve
664579

real    0m0.151s
user    0m0.161s
sys     0m0.019s
</pre></div>

<div><a name="javascript"><h3>JavaScript</h3></a>
<p>
It is necessary to install BitSet.js.
</p><pre class="indent">
<span class="keywd">const</span> BitSet = require(<span class="stri">'bitset.js'</span>);

<span class="keywd">function</span> eratosthenes (n) {
    <span class="keywd">let</span> sieve = <span class="keywd">new</span> BitSet;
    <span class="keywd">let</span> sqrtN = Math.trunc(Math.sqrt(n));

    sieve.setRange(2, n);
    <span class="keywd">for</span> (i = 2; i <= sqrtN; i++) {
        <span class="keywd">if</span> (sieve.get(i)) {
            <span class="keywd">for</span> (j = i * i; j <= n; j += i) {
                sieve.clear(j);
            }
        }
    }
    <span class="keywd">return</span> sieve;
}

(<span class="keywd">function</span>(){
    <span class="keywd">let</span> sieve = eratosthenes(10000000);
    console.log(sieve.cardinality());
})();
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time node sieve.js
664579

real    0m0.209s
user    0m0.208s
sys     0m0.004s
</pre></div>

<div><a name="python3"><h3>Python 3</h3></a>
<p>
It is necessary to install bitarray.
</p><pre class="indent">
<span class="keywd">from</span> bitarray <span class="keywd">import</span> bitarray
<span class="keywd">import</span> math

<span class="keywd">def</span> eratosthenes(n):
    sieve = bitarray(n + 1)
    sqrtN = math.isqrt(n)

    sieve.setall(1)
    sieve[0] = 0
    sieve[1] = 0
    <span class="keywd">for</span> i <span class="keywd">in</span> range(2, sqrtN + 1):
        <span class="keywd">if</span> sieve[i]:
            <span class="keywd">for</span> j <span class="keywd">in</span> range(i ** 2, n + 1, i):
                sieve[j] = 0
    <span class="keywd">return</span> sieve

<span class="keywd">def</span> main():
    sieve = eratosthenes(10000000)
    print(sieve.count())

if __name__ == "__main__":
    main()
</pre><p>
Measurement:
</p><pre class="indent">
prompt> time python3 sieve.py
664579

real    0m1.183s
user    0m1.182s
sys     0m0.000s
</pre></div>

<div><a name="seed7"><h3>Seed7</h3></a>
<p>
</p><pre class="indent">
$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#func">func</a> <a class="type" href="../manual/types.htm#set">set</a> <span class="type">of</span> <a class="type" href="../manual/types.htm#integer">integer</a>: eratosthenes (<span class="keywd">in</span> <a class="type" href="../manual/types.htm#integer">integer</a>: n) <span class="keywd">is func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#set">set</a> <span class="type">of</span> <a class="type" href="../manual/types.htm#integer">integer</a>: sieve <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: i <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#integer">integer</a>: j <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    sieve := {2 .. n};
    <span class="keywd">for</span> i <span class="keywd">range</span> 2 <span class="keywd">to</span> <a class="func" href="../libraries/integer.htm#sqrt(in_integer)">sqrt</a>(n) <span class="keywd">do</span>
      <span class="keywd">if</span> i <a class="op" href="../libraries/bitset.htm#(in_integer)in(in_bitset)">in</a> sieve <span class="keywd">then</span>
        <span class="keywd">for</span> j <span class="keywd">range</span> i ** 2 <span class="keywd">to</span> n <span class="keywd">step</span> i <span class="keywd">do</span>
          excl(sieve, j);
        <span class="keywd">end for</span>;
      <span class="keywd">end if</span>;
    <span class="keywd">end for</span>;
  <span class="keywd">end func</span>;

<span class="keywd">const</span> <a class="type" href="../manual/types.htm#proc">proc</a>: main <span class="keywd">is func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <a class="type" href="../manual/types.htm#set">set</a> <span class="type">of</span> <a class="type" href="../manual/types.htm#integer">integer</a>: sieve <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    sieve := eratosthenes(10000000);
    writeln(card(sieve));
  <span class="keywd">end func</span>;
</pre><p>
Measurement:
</p><pre class="indent">
prompt> s7c -O2 -oc3 sieve
prompt> time ./sieve
664579

real    0m0.037s
user    0m0.037s
sys     0m0.000s
</pre></div>
<table width="100%" cellpadding="0" cellspacing="0">
<tr>
<td align="left" width="60%">
<b><big><hr \></big></b></td>
<td align="right">
<table border="0" cellspacing="1" bgcolor="blue">
<tr bgcolor="gainsboro">
<td>&nbsp;<a class="navigation" href="../benchmks/index.htm">previous</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../benchmks/index.htm">up</a>&nbsp;</td>
<td>&nbsp;<a class="navigation" href="../benchmks/montecarlo.htm">next</a>&nbsp;</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>
  </body>
</html>
