<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  dialog.s7i    Dialog support library                            *)</span>
<span class="comment">(*  Copyright (C) 2008  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/graph_file.htm">graph_file.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: buttonWindow (<span class="keywd">ref</span> <span class="type">keyboard_file</span>: keybd) <span class="keywd">is</span> DYNAMIC;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: buttonWindow (<span class="keywd">ref</span> <span class="type">graph_keybd_file</span>: keybd) <span class="keywd">is</span> action <span class="stri">"GKB_WINDOW"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeButton (<span class="keywd">inout</span> <span class="type">graph_file</span>: messageFile,
    <span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="type">string</span>: buttonText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setPosXY(messageFile, xPos + 12, yPos + 14);
    write(messageFile, buttonText);
    line(messageFile.win, xPos, yPos, 40, 0, white);
    line(messageFile.win, xPos, yPos, 0, 20, white);
    line(messageFile.win, xPos, yPos + 20, 40, 0, dark_gray);
    line(messageFile.win, xPos + 40, yPos, 0, 20, dark_gray);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeButton (<span class="keywd">inout</span> <span class="type">text</span>: messageFile,
    <span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="type">string</span>: buttonText) <span class="keywd">is</span> DYNAMIC;


<span class="comment">(**
 *  Returns the answer (yes or no) of the user to 'messageText'.
 *  A popup window with the 'messageText' and two buttons (yes and no)
 *  is displayed. The user can use the keyboard or the mouse to
 *  respond.
 *  @return TRUE if 'yes' was pressed and FALSE if 'no' was pressed.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isOkay (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: messageText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: okay <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: charHeight <span class="keywd">is</span> 16;
    <span class="keywd">const</span> <span class="type">integer</span>: charWidth  <span class="keywd">is</span>  8;
    <span class="keywd">var</span> <span class="type">integer</span>: windowXPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: windowYPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: windowHeight <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: windowWidth <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: popupWindow <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">text</span>: messageFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">text</span>: buttonTextFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yesButtonXPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: noButtonXPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: buttonYPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: yesButtonActive <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: finished <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    windowHeight := 84 + length(messageText) * charHeight;
    windowWidth := 200;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(messageText) <span class="keywd">do</span>
      <span class="keywd">if</span> length(messageText[number]) * charWidth > windowWidth <span class="keywd">then</span>
        windowWidth := length(messageText[number]) * charWidth;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> curr_win &lt;> PRIMITIVE_WINDOW.value <span class="keywd">then</span>
      windowXPos := xPos(curr_win) + (width(curr_win) - windowWidth) <span class="op">mdiv</span> 2;
      windowYPos := yPos(curr_win) + (height(curr_win) - windowHeight) <span class="op">mdiv</span> 2;
    <span class="keywd">else</span>
      windowXPos := (screenWidth() - windowWidth) <span class="op">mdiv</span> 2;
      windowYPos := (screenHeight() - windowHeight) <span class="op">mdiv</span> 2;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    popupWindow := PRIMITIVE_GRAPHIC_OPEN(windowXPos, windowYPos, windowWidth, windowHeight, <span class="stri">"Yes or No"</span>);
    selectInput(popupWindow, KEY_CLOSE, TRUE);
    clear(popupWindow, light_gray);
    <span class="keywd">if</span> odd(length(messageText)) <span class="keywd">then</span>
      messageFile := open(popupWindow);
    <span class="keywd">else</span>
      messageFile := open(popupWindow, 0, charHeight <span class="op">div</span> 2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    buttonTextFile := open(popupWindow);
    color(messageFile, black, light_gray);
    color(buttonTextFile, black, light_gray);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(messageText) <span class="keywd">do</span>
      setPos(messageFile, height(messageFile) <span class="op">div</span> 3 - length(messageText) <span class="op">div</span> 2 + number,
          width(messageFile) <span class="op">div</span> 2 - length(messageText[number]) <span class="op">div</span> 2);
      writeln(messageFile, messageText[number]);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    yesButtonXPos := width(popupWindow) <span class="op">div</span> 4;
    noButtonXPos := width(popupWindow) <span class="op">div</span> 4 * 3 - 40;
    buttonYPos := height(popupWindow) - 44;
    writeButton(buttonTextFile, yesButtonXPos, buttonYPos, <span class="stri">"Yes"</span>);
    writeButton(buttonTextFile, noButtonXPos, buttonYPos, <span class="stri">"No"</span>);
    <span class="keywd">if</span> yesButtonActive <span class="keywd">then</span>
      box(popupWindow, pred(yesButtonXPos), pred(buttonYPos), 43, 23, black);
    <span class="keywd">else</span>
      box(popupWindow, pred(noButtonXPos), pred(buttonYPos), 43, 23, black);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    ch := upper(getc(GRAPH_KEYBOARD));
    <span class="keywd">while</span> <span class="op">not</span> finished <span class="keywd">do</span>
      <span class="keywd">if</span> ch = KEY_MOUSE1 <span class="op">and</span> buttonWindow(GRAPH_KEYBOARD) = popupWindow <span class="keywd">then</span>
        xPos := clickedXPos(GRAPH_KEYBOARD);
        yPos := clickedYPos(GRAPH_KEYBOARD);
        <span class="keywd">if</span> yPos >= buttonYPos  <span class="op">and</span> yPos &lt;= buttonYPos + 20 <span class="keywd">then</span>
          <span class="keywd">if</span> xPos >= yesButtonXPos <span class="op">and</span> xPos &lt;= yesButtonXPos + 40 <span class="keywd">then</span>
            okay := TRUE;
            finished := TRUE;
          <span class="keywd">elsif</span> xPos >= noButtonXPos <span class="op">and</span> xPos &lt;= noButtonXPos + 40 <span class="keywd">then</span>
            okay := FALSE;
            finished := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> ch <span class="op">in</span> {KEY_LEFT, KEY_TAB, KEY_BACKTAB} <span class="op">and</span> <span class="op">not</span> yesButtonActive <span class="keywd">then</span>
        box(popupWindow, pred(yesButtonXPos), pred(buttonYPos), 43, 23, black);
        box(popupWindow, pred(noButtonXPos), pred(buttonYPos), 43, 23, light_gray);
        yesButtonActive := TRUE;
      <span class="keywd">elsif</span> ch <span class="op">in</span> {KEY_RIGHT, KEY_TAB, KEY_BACKTAB} <span class="op">and</span> yesButtonActive <span class="keywd">then</span>
        box(popupWindow, pred(yesButtonXPos), pred(buttonYPos), 43, 23, light_gray);
        box(popupWindow, pred(noButtonXPos), pred(buttonYPos), 43, 23, black);
        yesButtonActive := FALSE;
      <span class="keywd">elsif</span> ch = KEY_NL <span class="keywd">then</span>
        okay := yesButtonActive;
        finished := TRUE;
      <span class="keywd">elsif</span> ch = <span class="stri">'Y'</span> <span class="op">or</span> ch = <span class="stri">'N'</span> <span class="op">or</span>
          ch = KEY_CLOSE <span class="op">and</span> buttonWindow(GRAPH_KEYBOARD) = popupWindow <span class="keywd">then</span>
        okay := ch = <span class="stri">'Y'</span>;
        finished := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> finished <span class="keywd">then</span>
        toTop(popupWindow);
        ch := upper(getc(GRAPH_KEYBOARD));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    close(messageFile);
    close(buttonTextFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Returns the answer (yes or no) of the user to 'messageText'.
 *  A popup window with the 'messageText' and two buttons (yes and no)
 *  is displayed. The user can use the keyboard or the mouse to
 *  respond.
 *  @return TRUE if 'yes' was pressed and FALSE if 'no' was pressed.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isOkay (<span class="op">in</span> <span class="type">string</span>: messageText) <span class="keywd">is</span>
  <span class="keywd">return</span> isOkay(split(messageText, <span class="stri">'\n'</span>));


<span class="comment">(**
 *  Display a popup window with the 'messageText' and a ok button.
 *  The user can use the keyboard or the mouse to respond.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: messageWindow (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: messageText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: charHeight <span class="keywd">is</span> 16;
    <span class="keywd">const</span> <span class="type">integer</span>: charWidth  <span class="keywd">is</span>  8;
    <span class="keywd">var</span> <span class="type">integer</span>: windowXPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: windowYPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: windowHeight <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: windowWidth <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: popupWindow <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">text</span>: messageFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">text</span>: buttonTextFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: okButtonXPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: okButtonYPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: finished <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    windowHeight := 84 + length(messageText) * charHeight;
    windowWidth := 200;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(messageText) <span class="keywd">do</span>
      <span class="keywd">if</span> length(messageText[number]) * charWidth > windowWidth <span class="keywd">then</span>
        windowWidth := length(messageText[number]) * charWidth;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> curr_win &lt;> PRIMITIVE_WINDOW.value <span class="keywd">then</span>
      windowXPos := xPos(curr_win) + (width(curr_win) - windowWidth) <span class="op">mdiv</span> 2;
      windowYPos := yPos(curr_win) + (height(curr_win) - windowHeight) <span class="op">mdiv</span> 2;
    <span class="keywd">else</span>
      windowXPos := (screenWidth() - windowWidth) <span class="op">mdiv</span> 2;
      windowYPos := (screenHeight() - windowHeight) <span class="op">mdiv</span> 2;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    popupWindow := PRIMITIVE_GRAPHIC_OPEN(windowXPos, windowYPos, windowWidth, windowHeight, <span class="stri">"Message"</span>);
    selectInput(popupWindow, KEY_CLOSE, TRUE);
    clear(popupWindow, light_gray);
    <span class="keywd">if</span> odd(length(messageText)) <span class="keywd">then</span>
      messageFile := open(popupWindow);
    <span class="keywd">else</span>
      messageFile := open(popupWindow, 0, charHeight <span class="op">div</span> 2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    buttonTextFile := open(popupWindow);
    color(messageFile, black, light_gray);
    color(buttonTextFile, black, light_gray);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(messageText) <span class="keywd">do</span>
      setPos(messageFile, height(messageFile) <span class="op">div</span> 3 - length(messageText) <span class="op">div</span> 2 + number,
          width(messageFile) <span class="op">div</span> 2 - length(messageText[number]) <span class="op">div</span> 2);
      writeln(messageFile, messageText[number]);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    okButtonXPos := width(popupWindow) <span class="op">div</span> 4 * 3 - 40;
    okButtonYPos := height(popupWindow) - 44;
    writeButton(buttonTextFile, okButtonXPos, okButtonYPos, <span class="stri">"OK"</span>);
    box(popupWindow, pred(okButtonXPos), pred(okButtonYPos), 43, 23, black);
    ch := upper(getc(GRAPH_KEYBOARD));
    <span class="keywd">while</span> <span class="op">not</span> finished <span class="keywd">do</span>
      <span class="keywd">if</span> ch = KEY_MOUSE1 <span class="op">and</span> buttonWindow(GRAPH_KEYBOARD) = popupWindow <span class="keywd">then</span>
        xPos := clickedXPos(GRAPH_KEYBOARD);
        yPos := clickedYPos(GRAPH_KEYBOARD);
        <span class="keywd">if</span> yPos >= okButtonYPos  <span class="op">and</span> yPos &lt;= okButtonYPos + 20 <span class="keywd">then</span>
          <span class="keywd">if</span> xPos >= okButtonXPos <span class="op">and</span> xPos &lt;= okButtonXPos + 40 <span class="keywd">then</span>
            finished := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> ch = KEY_NL <span class="op">or</span> ch = <span class="stri">' '</span> <span class="op">or</span>
          ch = KEY_CLOSE <span class="op">and</span> buttonWindow(GRAPH_KEYBOARD) = popupWindow <span class="keywd">then</span>
        finished := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> finished <span class="keywd">then</span>
        toTop(popupWindow);
        ch := upper(getc(GRAPH_KEYBOARD));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    close(messageFile);
    close(buttonTextFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Display a popup window with the 'messageText' and a ok button.
 *  The user can use the keyboard or the mouse to respond.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: messageWindow (<span class="op">in</span> <span class="type">string</span>: messageText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    messageWindow(split(messageText, <span class="stri">'\n'</span>));
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: bossMode (<span class="keywd">inout</span> <span class="type">boolean</span>: doQuit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: savedWindow <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">text</span>: txt <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">boolean</span>: restored <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">char</span>: cmd <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    savedWindow := getPixmap(curr_win);
    clear(white);
    txt := open(curr_win, 20, 20);
    setPos(txt, 3, 1);
    color(txt, black, white);
    writeln(txt, <span class="stri">"MODES OF OPERATION IN PROGRAMS"</span>);
    writeln(txt);
    writeln(txt, <span class="stri">"Sometimes it is necessary that programs support different modes of operation."</span>);
    writeln(txt, <span class="stri">"It can be necessary to switch between these modes to enhance the workflow."</span>);
    writeln(txt, <span class="stri">"There are several possibilitys to implement such a switch."</span>);
    writeln(txt);
    writeln(txt, <span class="stri">"1. The use of several windows. In this case the user just switches to another"</span>);
    writeln(txt, <span class="stri">"   active window to get another view."</span>);
    writeln(txt, <span class="stri">"2. The use of function keys. In this case function keys allow to change the"</span>);
    writeln(txt, <span class="stri">"   operating mode."</span>);
    writeln(txt);
    writeln(txt, <span class="stri">"The current mode of operation must be explained as well."</span>);
    writeln(txt, <span class="stri">"An explanation could be: Type P to get back to normal mode or Q to quit."</span>);
    writeln(txt, <span class="stri">"That way the user has the possibility to continue or to quit the program."</span>);
    <span class="keywd">repeat</span>
      cmd := getc(KEYBOARD);
      <span class="keywd">if</span> cmd <span class="op">in</span> {<span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE} <span class="keywd">then</span>
        doQuit := TRUE;
      <span class="keywd">elsif</span> cmd <span class="op">in</span> {<span class="stri">'P'</span>, <span class="stri">'p'</span>} <span class="keywd">then</span>
        put(0, 0, savedWindow);
        flushGraphic;
        restored := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> restored <span class="op">or</span> doQuit;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
