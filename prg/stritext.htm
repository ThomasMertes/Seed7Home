<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  stritext.s7i  string text library (uses an array string)        *)</span>
<span class="comment">(*  Copyright (C) 2007 - 2013  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/text.htm">text.s7i</a>"</span>;


<span class="comment">(**
 *  [[text|Text]] implementation type for files stored in an [[array]] [[string]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: striText <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: content <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

type_implements_interface(striText, text);


<span class="comment">(**
 *  Open a ''striText'' with the given [[array]] [[string]] content.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openStriText (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: content) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">striText</span>: new_striText <span class="keywd">is</span> striText.value;
  <span class="keywd">begin</span>
    new_striText.content := content;
    newFile := toInterface(new_striText);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment"># The function openStritext() is deprecated. openStriText() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openStritext (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: content) <span class="keywd">is</span>
  <span class="keywd">return</span> openStriText(content);


<span class="comment">(**
 *  Write the [[string]] ''stri'' to ''outStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">striText</span>: outStriText, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">while</span> outStriText.line > length(outStriText.content) <span class="keywd">do</span>
      outStriText.content &amp;:= <span class="stri">""</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> outStriText.column > succ(length(outStriText.content[outStriText.line])) <span class="keywd">then</span>
      outStriText.content[outStriText.line] &amp;:=
          <span class="stri">""</span> <span class="op">lpad</span> (outStriText.column - succ(length(outStriText.content[outStriText.line])));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    outStriText.content[outStriText.line] :=
        outStriText.content[outStriText.line][.. pred(outStriText.column)] &amp;
        stri &amp;
        outStriText.content[outStriText.line][outStriText.column ..];
    outStriText.column +:= length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">striText</span>: outStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> outStriText.line &lt;= length(outStriText.content) <span class="keywd">then</span>
      outStriText.content[outStriText.line] := outStriText.content[outStriText.line][.. outStriText.column];
      outStriText.content := outStriText.content[.. outStriText.line] &amp;
          [] (outStriText.content[outStriText.line][outStriText.column ..]) &amp;
          outStriText.content[succ(outStriText.line) ..];
    <span class="keywd">else</span>
      <span class="keywd">while</span> outStriText.line > length(outStriText.content) <span class="keywd">do</span>
        outStriText.content &amp;:= <span class="stri">""</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
      outStriText.content &amp;:= <span class="stri">""</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    incr(outStriText.line);
    outStriText.column := 1;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveLeft (<span class="keywd">inout</span> <span class="type">striText</span>: outStriText, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> outStriText.column > length(stri) <span class="keywd">then</span>
      outStriText.column -:= length(stri);
    <span class="keywd">elsif</span> outStriText.line > 1 <span class="keywd">then</span>
      decr(outStriText.line);
      <span class="keywd">if</span> outStriText.line &lt;= length(outStriText.content) <span class="keywd">then</span>
        outStriText.column := succ(length(outStriText.content[outStriText.line]));
      <span class="keywd">else</span>
        outStriText.column := 1;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a character from ''inStriText''.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">striText</span>: inStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: charRead <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inStriText.line &lt;= length(inStriText.content) <span class="keywd">then</span>
      <span class="keywd">if</span> inStriText.column &lt;= length(inStriText.content[inStriText.line]) <span class="keywd">then</span>
        charRead := inStriText.content[inStriText.line][inStriText.column];
        incr(inStriText.column);
      <span class="keywd">else</span>
        charRead := <span class="stri">'\n'</span>;
        incr(inStriText.line);
        inStriText.column := 1;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      charRead := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a [[string]] with a maximum length from ''inStriText''.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="keywd">inout</span> <span class="type">striText</span>: inStriText, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> maxLength &lt;= 0 <span class="keywd">then</span>
      <span class="keywd">if</span> maxLength &lt;> 0 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> inStriText.line &lt;= length(inStriText.content) <span class="keywd">then</span>
      <span class="keywd">if</span> maxLength > succ(length(inStriText.content[inStriText.line]) - inStriText.column) <span class="keywd">then</span>
        striRead := inStriText.content[inStriText.line][inStriText.column ..];
        striRead &amp;:= <span class="stri">"\n"</span>;
        maxLength -:= length(inStriText.content[inStriText.line]) - inStriText.column + 2;
        incr(inStriText.line);
        <span class="keywd">while</span> inStriText.line &lt;= length(inStriText.content) <span class="op">and</span>
            maxLength > length(inStriText.content[inStriText.line]) <span class="keywd">do</span>
          striRead &amp;:= inStriText.content[inStriText.line];
          striRead &amp;:= <span class="stri">"\n"</span>;
          maxLength -:= succ(length(inStriText.content[inStriText.line]));
          incr(inStriText.line);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">if</span> inStriText.line &lt;= length(inStriText.content) <span class="op">and</span> maxLength > 0 <span class="keywd">then</span>
          striRead &amp;:= inStriText.content[inStriText.line][inStriText.column len maxLength];
          inStriText.column := succ(maxLength);
        <span class="keywd">else</span>
          inStriText.column := 1;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        striRead := inStriText.content[inStriText.line][inStriText.column fixLen maxLength];
        inStriText.column +:= maxLength;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getwd (<span class="keywd">inout</span> <span class="type">striText</span>: inStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    noop; <span class="comment"># todo</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from ''inStriText''.
 *  A striText works as if all lines end with '\n'.
 *  The line ending character is not copied into the string. When
 *  the function is left inStriText.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">striText</span>: inStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inStriText.line &lt;= length(inStriText.content) <span class="keywd">then</span>
      stri := inStriText.content[inStriText.line][inStriText.column .. ];
      incr(inStriText.line);
      inStriText.column := 1;
      inStriText.bufferChar := <span class="stri">'\n'</span>;
    <span class="keywd">else</span>
      stri := <span class="stri">""</span>;
      inStriText.bufferChar := EOF;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  The end-of-file indicator is set if at least one request to read
 *  from the file failed.
 *  @return TRUE if the end-of-file indicator is set, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">striText</span>: inStriText) <span class="keywd">is</span>
  <span class="keywd">return</span> inStriText.line > length(inStriText.content);


<span class="comment">(**
 *  Determine if at least one character can be read successfully.
 *  This function allows a file to be handled like an iterator.
 *  @return FALSE if 'getc' would return [[char#EOF|EOF]],
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">striText</span>: inStriText) <span class="keywd">is</span>
  <span class="keywd">return</span> inStriText.line &lt;= length(inStriText.content);


<span class="comment">(**
 *  Obtain the length of a ''aStriText''.
 *  The file length is measured in characters.
 *  @return the length of a file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">striText</span>: aStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(aStriText.content) <span class="keywd">do</span>
      length +:= succ(length(aStriText.content[line]));
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="op">in</span> <span class="type">striText</span>: aStriText, <span class="op">in</span> <span class="type">integer</span>: position) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    noop; <span class="comment"># todo</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Obtain the current file position of ''aStriText''.
 *  The file position is measured in characters from the start of the file.
 *  The first character in the file has the position 1.
 *  @return the current file position.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: tell (<span class="op">in</span> <span class="type">striText</span>: aStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: position <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> pred(aStriText.line) <span class="keywd">do</span>
      position +:= succ(length(aStriText.content[aStriText.line]));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    position +:= aStriText.column;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the height of ''aStriText''.
 *  @return the height of ''aStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: height (<span class="op">in</span> <span class="type">striText</span>: aStriText) <span class="keywd">is</span>
  <span class="keywd">return</span> length(aStriText.content);


<span class="comment">(**
 *  Get the width of ''aStriText''.
 *  @return the width of ''aStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">striText</span>: aStriText) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(aStriText.content) <span class="keywd">do</span>
      <span class="keywd">if</span> length(aStriText.content[line]) > width <span class="keywd">then</span>
        width := length(aStriText.content[line]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the current line of ''aStriText''.
 *  @return the current line of ''aStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: line (<span class="op">in</span> <span class="type">striText</span>: aStriText) <span class="keywd">is</span>
  <span class="keywd">return</span> aStriText.line;


<span class="comment">(**
 *  Determine the current column of ''aStriText''.
 *  @return the current column of ''aStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: column (<span class="op">in</span> <span class="type">striText</span>: aStriText) <span class="keywd">is</span>
  <span class="keywd">return</span> aStriText.column;


<span class="comment">(**
 *  Set the current position of ''aStriText'' to ''line'' and ''column''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPos (<span class="keywd">inout</span> <span class="type">striText</span>: aStriText, <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aStriText.line := line;
    aStriText.column := column;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the ''line'' of the current position of ''aStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setLine (<span class="keywd">inout</span> <span class="type">striText</span>: aStriText, <span class="op">in</span> <span class="type">integer</span>: line) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aStriText.line := line;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the ''column'' of the current position of ''aStriText''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setColumn (<span class="keywd">inout</span> <span class="type">striText</span>: aStriText, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aStriText.column := column;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">striText</span>: aText) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left,
    <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: v_scroll (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: v_scroll (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left,
    <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: h_scroll (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: h_scroll (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left,
    <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">color</span>: foreground) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">color</span>: foreground, <span class="op">in</span> <span class="type">color</span>: background) <span class="keywd">is</span> noop;
<span class="keywd">const</span> <span class="type">proc</span>: setPosXY (<span class="keywd">inout</span> <span class="type">striText</span>: aText, <span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> noop;
</pre>
</body>
</html>
