<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  integer.s7i   Integer support library                           *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2016, 2018 - 2021  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">system</span> <span class="stri">"integer"</span> <span class="keywd">is</span> integer;

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">integer</span>: dest) ::= (<span class="keywd">ref</span> <span class="type">integer</span>: source)           <span class="keywd">is</span> action <span class="stri">"INT_CREATE"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">integer</span>: dest) := (<span class="op">in</span> <span class="type">integer</span>: source)           <span class="keywd">is</span> action <span class="stri">"INT_CPY"</span>;


<span class="comment">(**
 *  Default value of ''integer'' (0).
 *)</span>
<span class="keywd">const</span> <span class="type">integer</span>: (attr integer) . value <span class="keywd">is</span> 0;


<span class="comment">(**
 *  Minimum value of ''integer'' (-9223372036854775808).
 *)</span>
<span class="keywd">const</span> <span class="type">integer</span>: (attr integer) . first <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Maximum value of ''integer'' (9223372036854775807).
 *)</span>
<span class="keywd">const</span> <span class="type">integer</span>: (attr integer) . last  <span class="keywd">is</span>  9223372036854775807;


<span class="comment">(**
 *  Plus sign for integer numbers.
 *  @return its operand unchanged.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: + (<span class="op">in</span> <span class="type">integer</span>: number)                          <span class="keywd">is</span> action <span class="stri">"INT_PLUS"</span>;


<span class="comment">(**
 *  Minus sign, negate an integer number.
 *  @return the negated value of the number.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: - (<span class="op">in</span> <span class="type">integer</span>: number)                          <span class="keywd">is</span> action <span class="stri">"INT_NEGATE"</span>;


<span class="comment">(**
 *  Compute the factorial of a number.
 *  @return the factorial of the number.
 *  @exception NUMERIC_ERROR The number is negative or the result
 *             does not fit into an integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ! (<span class="op">in</span> <span class="type">integer</span>: number)                          <span class="keywd">is</span> action <span class="stri">"INT_FACT"</span>;


<span class="comment">(**
 *  Add two integer numbers.
 *  @return the sum of the two numbers.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: summand1) + (<span class="op">in</span> <span class="type">integer</span>: summand2)    <span class="keywd">is</span> action <span class="stri">"INT_ADD"</span>;


<span class="comment">(**
 *  Compute the subtraction of two integer numbers.
 *  @return the difference of the two numbers.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: minuend) - (<span class="op">in</span> <span class="type">integer</span>: subtrahend)   <span class="keywd">is</span> action <span class="stri">"INT_SBTR"</span>;


<span class="keywd">const</span> <span class="type">integer</span>: (attr integer) . first <span class="keywd">is</span> -9223372036854775807 - 1;


<span class="comment">(**
 *  Multiply two integer numbers.
 *  @return the product of the two numbers.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: factor1) * (<span class="op">in</span> <span class="type">integer</span>: factor2)      <span class="keywd">is</span> action <span class="stri">"INT_MULT"</span>;


<span class="comment">(**
 *  Integer division truncated towards zero.
 *  The remainder of this division is computed with ''rem''.
 *  For the operations ''div'' and ''rem'' holds for all A:
 *   (A div B) * B + A rem B = A           when B &lt;> 0
 *   -A div B = -(A div B)                 when B &lt;> 0
 *   -A rem B = -(A rem B)                 when B &lt;> 0
 *   A rem B >= 0 and A rem B &lt; abs(B)     when B &lt;> 0 and A >= 0
 *   A rem B &lt;= 0 and A rem B > -abs(B)    when B &lt;> 0 and A &lt;= 0
 *  @return the quotient of the integer division.
 *  @exception NUMERIC_ERROR If a division by zero occurs.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: dividend) <span class="op">div</span> (<span class="op">in</span> <span class="type">integer</span>: divisor)   <span class="keywd">is</span> action <span class="stri">"INT_DIV"</span>;


<span class="comment">(**
 *  Compute the remainder of the integer division ''div''.
 *  The remainder has the same sign as the dividend.
 *   A rem B
 *  is equivalent to
 *   A - (A div B) * B
 *  @return the remainder of the integer division.
 *  @exception NUMERIC_ERROR If a division by zero occurs.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: dividend) <span class="op">rem</span> (<span class="op">in</span> <span class="type">integer</span>: divisor)   <span class="keywd">is</span> action <span class="stri">"INT_REM"</span>;


<span class="comment">(**
 *  Integer division truncated towards negative infinity.
 *  The modulo (remainder) of this division is computed with ''mod''.
 *  Therefore this division is called modulo division (''mdiv'').
 *  For the operations ''mdiv'' and ''mod'' holds for all A:
 *   (A mdiv B) * B + A mod B = A          when B &lt;> 0
 *   -A mdiv B = A mdiv -B                 when B &lt;> 0
 *   -A mod -B = -(A mod B)                when B &lt;> 0
 *   A mod B >= 0 and A mod B &lt; B          when B > 0
 *   A mod B &lt;= 0 and A mod B > B          when B &lt; 0
 *  @return the quotient of the integer division.
 *  @exception NUMERIC_ERROR If a division by zero occurs.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: dividend) <span class="op">mdiv</span> (<span class="op">in</span> <span class="type">integer</span>: divisor)  <span class="keywd">is</span> action <span class="stri">"INT_MDIV"</span>;


<span class="comment">(**
 *  Compute the modulo (remainder) of the integer division ''mdiv''.
 *  The modulo has the same sign as the divisor.
 *   A mod B
 *  is equivalent to
 *   A - (A mdiv B) * B
 *  @return the modulo of the integer division.
 *  @exception NUMERIC_ERROR If a division by zero occurs.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: dividend) <span class="op">mod</span> (<span class="op">in</span> <span class="type">integer</span>: divisor)   <span class="keywd">is</span> action <span class="stri">"INT_MOD"</span>;


<span class="comment">(**
 *  Compute the exponentiation of a integer base with an integer exponent.
 *   A ** 0  returns 1           for every A, even for A = 0
 *   1 ** B  returns 1           for B >= 0
 *   A ** B  returns -(-A) ** B  for A &lt;= 0 and B >= 0 and odd(B)
 *   A ** B  returns (-A) ** B   for A &lt;= 0 and B >= 0 and not odd(B)
 *  @return the result of the exponentiation.
 *  @exception NUMERIC_ERROR If the exponent is negative.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: base) ** (<span class="op">in</span> <span class="type">integer</span>: exponent)       <span class="keywd">is</span> action <span class="stri">"INT_POW"</span>;


<span class="comment">(**
 *  Shift an integer number left by lshift bits.
 *  A &lt;&lt; B is equivalent to A * 2 ** B
 *  @return the left shifted number.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64 or
 *             if an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: number) &lt;&lt; (<span class="op">in</span> <span class="type">integer</span>: lshift)    <span class="keywd">is</span> action <span class="stri">"INT_LSHIFT"</span>;


<span class="comment">(**
 *  Shift an integer number right by rshift bits.
 *  A >> B is equivalent to A mdiv 2 ** B
 *  @return the right shifted number.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: number) >> (<span class="op">in</span> <span class="type">integer</span>: rshift)    <span class="keywd">is</span> action <span class="stri">"INT_RSHIFT"</span>;


<span class="comment">(**
 *  Increment an integer variable by a delta.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">integer</span>: number) +:= (<span class="op">in</span> <span class="type">integer</span>: delta)         <span class="keywd">is</span> action <span class="stri">"INT_ADD_ASSIGN"</span>;


<span class="comment">(**
 *  Decrement an integer variable by a delta.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">integer</span>: number) -:= (<span class="op">in</span> <span class="type">integer</span>: delta)         <span class="keywd">is</span> action <span class="stri">"INT_SBTR_ASSIGN"</span>;


<span class="comment">(**
 *  Multiply an integer number by a factor and assign the result back to number.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">integer</span>: number) *:= (<span class="op">in</span> <span class="type">integer</span>: factor)        <span class="keywd">is</span> action <span class="stri">"INT_MULT_ASSIGN"</span>;


<span class="comment">(**
 *  Shift a number left by lshift bits and assign the result back to number.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64 or
 *             if an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">integer</span>: number) &lt;&lt;:= (<span class="op">in</span> <span class="type">integer</span>: lshift)       <span class="keywd">is</span> action <span class="stri">"INT_LSHIFT_ASSIGN"</span>;


<span class="comment">(**
 *  Shift a number right by rshift bits and assign the result back to number.
 *  @exception OVERFLOW_ERROR If the shift amount is
 *             negative or greater equal 64.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">integer</span>: number) >>:= (<span class="op">in</span> <span class="type">integer</span>: rshift)       <span class="keywd">is</span> action <span class="stri">"INT_RSHIFT_ASSIGN"</span>;


<span class="comment">(**
 *  Binomial coefficient
 *   n ! k  returns  0                            for k &lt; 0,
 *   n ! 0  returns  1,
 *   n ! 1  returns  n,
 *   n ! k  returns  0                            for n >= 0 and k > n,
 *   n ! k  returns  !n div (!k * !(n - k))       for k >= 0 and k &lt;= n,
 *   n ! k  returns  (-1) ** k * (n + k - 1 ! k)  for n &lt; 0 and k >= 0
 *  @return the binomial coefficient n over k
 *  @exception OVERFLOW_ERROR If the result would be less than
 *             integer.first or greater than integer.last.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (<span class="op">in</span> <span class="type">integer</span>: n) ! (<span class="op">in</span> <span class="type">integer</span>: k)               <span class="keywd">is</span> action <span class="stri">"INT_BINOM"</span>;


<span class="comment">(**
 *  Check if two integer numbers are equal.
 *  @return TRUE if the two numbers are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number1) = (<span class="op">in</span> <span class="type">integer</span>: number2)   <span class="keywd">is</span> action <span class="stri">"INT_EQ"</span>;


<span class="comment">(**
 *  Check if two integer numbers are not equal.
 *  @return FALSE if the two numbers are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number1) &lt;> (<span class="op">in</span> <span class="type">integer</span>: number2)  <span class="keywd">is</span> action <span class="stri">"INT_NE"</span>;


<span class="comment">(**
 *  Check if number1 is less than number2.
 *  @return TRUE if number1 is less than number2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number1) &lt; (<span class="op">in</span> <span class="type">integer</span>: number2)   <span class="keywd">is</span> action <span class="stri">"INT_LT"</span>;


<span class="comment">(**
 *  Check if number1 is greater than number2.
 *  @return TRUE if number1 is greater than number2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number1) > (<span class="op">in</span> <span class="type">integer</span>: number2)   <span class="keywd">is</span> action <span class="stri">"INT_GT"</span>;


<span class="comment">(**
 *  Check if number1 is less than or equal to number2.
 *  @return TRUE if number1 is less than or equal to number2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number1) &lt;= (<span class="op">in</span> <span class="type">integer</span>: number2)  <span class="keywd">is</span> action <span class="stri">"INT_LE"</span>;


<span class="comment">(**
 *  Check if number1 is greater than or equal to number2.
 *  @return TRUE if number1 is greater than or equal to number2,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number1) >= (<span class="op">in</span> <span class="type">integer</span>: number2)  <span class="keywd">is</span> action <span class="stri">"INT_GE"</span>;


<span class="comment">(**
 *  Compare two integer numbers.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">integer</span>: number1, <span class="op">in</span> <span class="type">integer</span>: number2) <span class="keywd">is</span> action <span class="stri">"INT_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of an integer number.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">integer</span>: number)                <span class="keywd">is</span> action <span class="stri">"INT_HASHCODE"</span>;


<span class="comment">(**
 *  Successor of an integer number.
 *  @return number + 1
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: succ (<span class="op">in</span> <span class="type">integer</span>: number)                    <span class="keywd">is</span> action <span class="stri">"INT_SUCC"</span>;


<span class="comment">(**
 *  Predecessor of an integer number.
 *  @return number - 1
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: pred (<span class="op">in</span> <span class="type">integer</span>: number)                    <span class="keywd">is</span> action <span class="stri">"INT_PRED"</span>;


<span class="comment">(**
 *  Compute the absolute value of an integer number.
 *  @return the absolute value.
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: abs (<span class="op">in</span> <span class="type">integer</span>: number)                     <span class="keywd">is</span> action <span class="stri">"INT_ABS"</span>;


<span class="comment">(**
 *  Compute the integer square root of an integer radicand.
 *  @return the integer square root.
 *  @exception NUMERIC_ERROR If the radicand is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: sqrt (<span class="op">in</span> <span class="type">integer</span>: radicand)                  <span class="keywd">is</span> action <span class="stri">"INT_SQRT"</span>;


<span class="comment">(**
 *  Compute the truncated base 10 logarithm of an integer number.
 *  The definition of ''log10'' is extended by defining log10(0) = -1.
 *   log10(10 ** A)        returns A        for A >= 0
 *   log10(pred(10 ** A))  returns pred(A)  for A >= 0
 *   log10(10)             returns 1
 *   log10(1)              returns 0
 *   log10(0)              returns -1
 *  @return the truncated base 10 logarithm.
 *  @exception NUMERIC_ERROR The number is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: log10 (<span class="op">in</span> <span class="type">integer</span>: number)                   <span class="keywd">is</span> action <span class="stri">"INT_LOG10"</span>;


<span class="comment">(**
 *  Compute the truncated base 2 logarithm of an integer number.
 *  The definition of ''log2'' is extended by defining log2(0) = -1.
 *   log2(2 ** A)        returns A        for A >= 0
 *   log2(pred(2 ** A))  returns pred(A)  for A >= 0
 *   log2(2)             returns 1
 *   log2(1)             returns 0
 *   log2(0)             returns -1
 *  @return the truncated base 2 logarithm.
 *  @exception NUMERIC_ERROR The number is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: log2 (<span class="op">in</span> <span class="type">integer</span>: number)                    <span class="keywd">is</span> action <span class="stri">"INT_LOG2"</span>;


<span class="comment">(**
 *  Determine if a integer number is odd.
 *  @return TRUE if the number is odd,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: odd (<span class="op">in</span> <span class="type">integer</span>: number)                     <span class="keywd">is</span> action <span class="stri">"INT_ODD"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">integer</span>: number)                     <span class="keywd">is</span> action <span class="stri">"INT_ICONV1"</span>;


<span class="comment">(**
 *  Convert to integer.
 *  @return the unchanged number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number)     <span class="keywd">is</span> action <span class="stri">"INT_ICONV3"</span>;


<span class="comment">(**
 *  Convert an ''integer'' number to a [[string]].
 *  The number is converted to a string with decimal representation.
 *  For negative numbers a minus sign is prepended.
 *  @param number Number to be converted to a [[string]].
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">integer</span>: number)                      <span class="keywd">is</span> action <span class="stri">"INT_STR"</span>;


<span class="comment">(**
 *  Convert an ''integer'' number to a [[string]].
 *  The number is converted to a string with decimal representation.
 *  For negative numbers a minus sign is prepended.
 *  @param number Number to be converted to a [[string]].
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: string (<span class="op">in</span> <span class="type">integer</span>: number)                   <span class="keywd">is</span> action <span class="stri">"INT_STR"</span>;


<span class="comment">(**
 *  Convert an ''integer'' number to a [[string]].
 *  The number is converted to a string with decimal representation.
 *  For negative numbers a minus sign is prepended.
 *  @param number Number to be converted to a [[string]].
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">integer</span>: number)                  <span class="keywd">is</span> action <span class="stri">"INT_STR"</span>;


<span class="comment">(**
 *  Convert an ''integer'' number to a [[string]] using a radix.
 *  The conversion uses the numeral system with the given ''base''.
 *  Digit values from 10 upward are encoded with lower case letters.
 *  E.g.: 10 is encoded with a, 11 with b, etc.
 *  For negative numbers a minus sign is prepended.
 *   48879 radix 16   returns "beef"
 *   -48879 radix 16  returns "-beef"
 *  @param number Number to be converted to a [[string]].
 *  @param base Base of the numeral system used for the conversion.
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">integer</span>: number) radix (<span class="op">in</span> <span class="type">integer</span>: base) <span class="keywd">is</span> action <span class="stri">"INT_radix"</span>;


<span class="comment">(**
 *  Convert an ''integer'' number to a [[string]] using a radix.
 *  The conversion uses the numeral system with the given ''base''.
 *  Digit values from 10 upward are encoded with upper case letters.
 *  E.g.: 10 is encoded with A, 11 with B, etc.
 *  For negative numbers a minus sign is prepended.
 *   48879 RADIX 16   returns "BEEF"
 *   -48879 RADIX 16  returns "-BEEF"
 *  @param number Number to be converted to a [[string]].
 *  @param base Base of the numeral system used for the conversion.
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">integer</span>: number) RADIX (<span class="op">in</span> <span class="type">integer</span>: base) <span class="keywd">is</span> action <span class="stri">"INT_RADIX"</span>;


<span class="comment">(**
 *  Convert ''integer'' to [[string]] and pad it with zeros at the left side.
 *  The number is converted to a string with decimal representation.
 *  For negative numbers a minus sign is prepended.
 *   123 lpad0 5   returns "00123"
 *   -123 lpad0 5  returns "-0123"
 *   123 lpad0 2   returns "123"
 *   -123 lpad0 2  returns "-123"
 *  @param number Number to be converted to a [[string]].
 *  @param length Minimum length of the result.
 *  @return number as decimal [[string]] left padded with zeroes.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">integer</span>: number) <span class="op">lpad0</span> (<span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> action <span class="stri">"INT_LPAD0"</span>;


<span class="comment">(**
 *  Increment an integer variable.
 *  Increments ''number'' by 1.
 *  This is equivalent to:
 *   number := succ(number);
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: incr (<span class="keywd">inout</span> <span class="type">integer</span>: number)                         <span class="keywd">is</span> action <span class="stri">"INT_INCR"</span>;


<span class="comment">(**
 *  Decrement an integer variable.
 *  Decrements ''number'' by 1.
 *  This is equivalent to:
 *   number := pred(number);
 *  @exception OVERFLOW_ERROR If an integer overflow occurs.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: decr (<span class="keywd">inout</span> <span class="type">integer</span>: number)                         <span class="keywd">is</span> action <span class="stri">"INT_DECR"</span>;


<span class="comment">(**
 *  Compute pseudo-random number in the range [low, high].
 *  The random values are uniform distributed.
 *  @return a random number such that low &lt;= rand(low, high) and
 *          rand(low, high) &lt;= high holds.
 *  @exception RANGE_ERROR The range is empty (low > high holds).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: rand (<span class="op">in</span> <span class="type">integer</span>: low, <span class="op">in</span> <span class="type">integer</span>: high)     <span class="keywd">is</span> action <span class="stri">"INT_RAND"</span>;


<span class="comment">(**
 *  Number of bits in the minimum two's-complement representation.
 *  The high bits equivalent to the sign bit are not part of the
 *  minimum two's-complement representation.
 *  @return the number of bits.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: bitLength (<span class="op">in</span> <span class="type">integer</span>: number)               <span class="keywd">is</span> action <span class="stri">"INT_BIT_LENGTH"</span>;


<span class="comment">(**
 *  Index of the lowest-order one bit.
 *  For A &lt;> 0 this is equal to the number of lowest-order zero bits.
 *  @return the number of lowest-order zero bits or -1 for lowestSetBit(0).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: lowestSetBit (<span class="op">in</span> <span class="type">integer</span>: number)            <span class="keywd">is</span> action <span class="stri">"INT_LOWEST_SET_BIT"</span>;


<span class="comment">(**
 *  Convert a [[string]] to an ''integer'' number.
 *  The [[string]] must contain an integer literal consisting of an
 *  optional + or - sign, followed by a sequence of digits. Other
 *  characters as well as leading or trailing whitespace characters
 *  are not allowed. The sequence of digits is taken to be decimal.
 *  @return the ''integer'' result of the conversion.
 *  @exception RANGE_ERROR If the string is empty or it does not contain
 *             an integer literal or if the integer literal is too big
 *             or too small to be represented as ''integer'' value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">string</span>: stri)                    <span class="keywd">is</span> action <span class="stri">"INT_PARSE1"</span>;


<span class="comment">(**
 *  Convert a [[string]] to an ''integer'' number.
 *  The [[string]] must contain an integer literal consisting of an
 *  optional + or - sign, followed by a sequence of digits. Other
 *  characters as well as leading or trailing whitespace characters
 *  are not allowed. The sequence of digits is taken to be decimal.
 *  @return the ''integer'' result of the conversion.
 *  @exception RANGE_ERROR If the string is empty or it does not contain
 *             an integer literal or if the integer literal is too big
 *             or too small to be represented as ''integer'' value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> integer(stri);


<span class="comment">(**
 *  Convert a numeric [[string]], with a specified radix, to an ''integer''.
 *  The numeric [[string]] must contain the representation of an integer
 *  in the specified radix. It consists of an optional + or - sign,
 *  followed by a sequence of digits in the specified radix. Digit values
 *  from 10 upward can be encoded with upper or lower case letters.
 *  E.g.: 10 can be encoded with A or a, 11 with B or b, etc. Other
 *  characters as well as leading or trailing whitespace characters
 *  are not allowed.
 *   integer("beef", 16)     returns  48879
 *   integer("-177", 8)      returns   -127
 *   integer("10101010", 2)  returns    170
 *   integer("Cafe", 16)     returns  51966
 *  @param stri Numeric string to be converted to an integer.
 *  @param base Radix of the integer in the ''stri'' parameter.
 *  @return the ''integer'' result of the conversion.
 *  @exception RANGE_ERROR If base &lt; 2 or base > 36 holds or
 *             the string is empty or it does not contain an integer
 *             literal with the specified base.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">integer</span>: base)  <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Convert an ''integer'' number to a [[string]] in scientific notation.
 *  Scientific notation uses a decimal significand and a decimal exponent.
 *  The significand has an optional sign and exactly one digit before the
 *  decimal point. The fractional part of the significand is rounded
 *  to the specified number of digits (''precision''). Halfway cases are
 *  rounded away from zero. The fractional part is followed by the
 *  letter e and an exponent, which is always signed. The value zero is
 *  never written with a negative sign.
 *   12345 sci 4     returns "1.2345e+4"
 *   12345 sci 3     returns "1.235e+4"
 *   12345 sci 2     returns "1.23e+4"
 *   3141592 sci 0   returns "3e+6"
 *   27182818 sci 0  returns "3e+7"
 *   2**62 sci 6     returns "4.611686e+18"
 *   -1 sci 3        returns "-1.000e+0"
 *   -0 sci 2        returns "0.00e+0"
 *  @param number Number to be converted to a string.
 *  @param precision Number of digits after the decimal point.
 *         If the ''precision'' is zero the decimal point is omitted.
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If the ''precision'' is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">integer</span>: number) <span class="op">sci</span> (<span class="op">in</span> <span class="type">integer</span>: precision)  <span class="keywd">is</span> <span class="keywd">forward</span>;


DECLARE_TERNARY(integer);


<span class="comment">(**
 *  Determine the minimum of two ''integer'' numbers.
 *  @return the minimum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: min (<span class="op">in</span> <span class="type">integer</span>: value1, <span class="op">in</span> <span class="type">integer</span>: value2) <span class="keywd">is</span>
    <span class="keywd">return</span> value1 &lt; value2 ? value1 : value2;


<span class="comment">(**
 *  Determine the maximum of two ''integer'' numbers.
 *  @return the maximum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: max (<span class="op">in</span> <span class="type">integer</span>: value1, <span class="op">in</span> <span class="type">integer</span>: value2) <span class="keywd">is</span>
    <span class="keywd">return</span> value1 > value2 ? value1 : value2;
</pre>
</body>
</html>
