<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  clib_file.s7i  Type for FILE * files from the C runtime library *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2014, 2020, 2021  Thomas Mertes            *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  File type realized with FILE * files from the C runtime library.
 *  The type ''clib_file'' is not accessible via the [[file]] interface.
 *  The type [[external_file]], which implements the [[file]] interface
 *  is based on a ''clib_file''. Access to operating system files should
 *  always be done via the [[file]] interface and files of the type
 *  [[external_file]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: clib_file <span class="keywd">is</span> newtype;


IN_PARAM_IS_VALUE(clib_file);

<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">clib_file</span>: aValue)                          <span class="keywd">is</span> action <span class="stri">"FIL_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">clib_file</span>: dest) ::= (<span class="op">in</span> <span class="type">clib_file</span>: source)         <span class="keywd">is</span> action <span class="stri">"FIL_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">clib_file</span>: dest) := (<span class="op">in</span> <span class="type">clib_file</span>: source)        <span class="keywd">is</span> action <span class="stri">"FIL_CPY"</span>;


<span class="comment">(**
 *  Check if two files are equal.
 *  @return TRUE if the two files are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">clib_file</span>: file1) = (<span class="op">in</span> <span class="type">clib_file</span>: file2)    <span class="keywd">is</span> action <span class="stri">"FIL_EQ"</span>;


<span class="comment">(**
 *  Check if two files are not equal.
 *  @return FALSE if both files are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">clib_file</span>: file1) &lt;> (<span class="op">in</span> <span class="type">clib_file</span>: file2)   <span class="keywd">is</span> action <span class="stri">"FIL_NE"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: _GENERATE_EMPTY_CLIB_FILE                      <span class="keywd">is</span> action <span class="stri">"FIL_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">clib_file</span>: (attr clib_file) . value                            <span class="keywd">is</span> _GENERATE_EMPTY_CLIB_FILE;


<span class="comment">(**
 *  NULL file of the C runtime library.
 *  This value is returned by [[#openClibFile(in_string,in_string)|openClibFile]]
 *  and other functions if no ''clib_file'' could be opened. Reading from or
 *  writing to a ''CLIB_NULL_FILE'' raises an exception.
 *)</span>
<span class="keywd">const</span> <span class="type">clib_file</span>: CLIB_NULL_FILE                                      <span class="keywd">is</span> clib_file.value;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: CLIB_INPUT  <span class="keywd">is</span> action <span class="stri">"FIL_IN"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: CLIB_OUTPUT <span class="keywd">is</span> action <span class="stri">"FIL_OUT"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: CLIB_ERROR  <span class="keywd">is</span> action <span class="stri">"FIL_ERR"</span>;


<span class="comment">(**
 *  Opens a clib_file with the specified ''path'' and ''mode''.
 *  There are text modes and binary modes:
 *  *Binary modes:
 *  ** "r"   Open file for reading.
 *  ** "w"   Truncate to zero length or create file for writing.
 *  ** "a"   Append; open or create file for writing at end-of-file.
 *  ** "r+"  Open file for update (reading and writing).
 *  ** "w+"  Truncate to zero length or create file for update.
 *  ** "a+"  Append; open or create file for update, writing at end-of-file.
 *  *Text modes:
 *  ** "rt"  Open file for reading.
 *  ** "wt"  Truncate to zero length or create file for writing.
 *  ** "at"  Append; open or create file for writing at end-of-file.
 *  ** "rt+" Open file for update (reading and writing).
 *  ** "wt+" Truncate to zero length or create file for update.
 *  ** "at+" Append; open or create file for update, writing at end-of-file.
 *  Note that this modes differ from the ones used by the C function
 *  fopen().
 *  @param path Path of the file to be opened. The path must
 *         use the standard path representation.
 *  @param mode Mode of the file to be opened.
 *  @return the file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened or if ''path'' refers to
 *          a directory.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system path type.
 *  @exception RANGE_ERROR The ''mode'' is not one of the allowed
 *             values or ''path'' does not use the standard path
 *             representation or ''path'' cannot be converted
 *             to the system path type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: openClibFile (<span class="op">in</span> <span class="type">string</span>: path, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> action <span class="stri">"FIL_OPEN"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">clib_file</span>: openNullDeviceClibFile <span class="keywd">is</span> action <span class="stri">"FIL_OPEN_NULL_DEVICE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: pipe (<span class="keywd">inout</span> <span class="type">clib_file</span>: inFile, <span class="keywd">inout</span> <span class="type">clib_file</span>: outFile) <span class="keywd">is</span> action <span class="stri">"FIL_PIPE"</span>;


<span class="comment">(**
 *  Close a clib_file.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="op">in</span> <span class="type">clib_file</span>: aFile)                              <span class="keywd">is</span> action <span class="stri">"FIL_CLOSE"</span>;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  The end-of-file indicator is set if at least one request to read
 *  from the file failed.
 *  @return TRUE if the end-of-file indicator is set, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">clib_file</span>: inFile)                       <span class="keywd">is</span> action <span class="stri">"FIL_EOF"</span>;


<span class="comment">(**
 *  Determine if at least one character can be read successfully.
 *  This function allows a file to be handled like an iterator.
 *  @return FALSE if ''getc'' would return [[char#EOF|EOF]], TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">clib_file</span>: inFile)                   <span class="keywd">is</span> action <span class="stri">"FIL_HAS_NEXT"</span>;


<span class="comment">(**
 *  Determine if at least one character can be read without blocking.
 *  Blocking means that ''getc'' would wait until a character is
 *  received. Blocking can last for a period of unspecified length.
 *  Regular files do not block.
 *  @return TRUE if ''getc'' would not block, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: inputReady (<span class="op">in</span> <span class="type">clib_file</span>: inFile)                <span class="keywd">is</span> action <span class="stri">"FIL_INPUT_READY"</span>;


<span class="comment">(**
 *  Forces that all buffered data of ''outFile'' is sent to its destination.
 *  This causes data to be sent to the file system of the OS.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="op">in</span> <span class="type">clib_file</span>: outFile)                            <span class="keywd">is</span> action <span class="stri">"FIL_FLUSH"</span>;


<span class="comment">(**
 *  Read a character from a clib_file.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="op">in</span> <span class="type">clib_file</span>: inFile)                         <span class="keywd">is</span> action <span class="stri">"FIL_GETC"</span>;


<span class="comment">(**
 *  Read a [[string]] with a maximum length from a clib_file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">clib_file</span>: inFile,
                         <span class="op">in</span> <span class="type">integer</span>: maxLength)                      <span class="keywd">is</span> action <span class="stri">"FIL_GETS"</span>;


<span class="comment">(**
 *  Read a word from a clib_file.
 *  Before reading the word it skips spaces and tabs. The function
 *  accepts words ending with " ", "\t", "\n", "\r\n" or [[char#EOF|EOF]].
 *  The word ending characters are not copied into the string.
 *  That means that the "\r" of a "\r\n" sequence is silently removed.
 *  When the function is left terminationChar contains ' ', '\t', '\n' or
 *  [[char#EOF|EOF]].
 *  @return the word read.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: word_read (<span class="op">in</span> <span class="type">clib_file</span>: inFile,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)           <span class="keywd">is</span> action <span class="stri">"FIL_WORD_READ"</span>;


<span class="comment">(**
 *  Read a line from a clib_file.
 *  The function accepts lines ending with "\n", "\r\n" or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string.
 *  That means that the "\r" of a "\r\n" sequence is silently removed.
 *  When the function is left terminationChar contains '\n' or [[char#EOF|EOF]].
 *  @return the line read.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: line_read (<span class="op">in</span> <span class="type">clib_file</span>: inFile,
                              <span class="keywd">inout</span> <span class="type">char</span>: terminationChar)           <span class="keywd">is</span> action <span class="stri">"FIL_LINE_READ"</span>;


<span class="comment">(**
 *  Write a string to a clib_file.
 *  @exception FILE_ERROR A system function returns an error.
 *  @exception RANGE_ERROR The string contains a character that does
 *             not fit into a byte.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">clib_file</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri)           <span class="keywd">is</span> action <span class="stri">"FIL_WRITE"</span>;


<span class="comment">(**
 *  Obtain the length of a clib_file.
 *  The file length is measured in bytes.
 *  @return the size of the given file.
 *  @exception RANGE_ERROR The file length does not fit into
 *             an integer value.
 *  @exception FILE_ERROR A system function returns an error or the
 *             file length reported by the system is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">clib_file</span>: aFile)                     <span class="keywd">is</span> action <span class="stri">"FIL_LNG"</span>;


<span class="comment">(**
 *  Truncate ''aFile'' to the given ''length''.
 *  If the file previously was larger than ''length'', the extra data is lost.
 *  If the file previously was shorter, it is extended, and the extended
 *  part is filled with null bytes ('\0;').
 *  @param aFile File to be truncated.
 *  @param length Requested length of ''aFile'' in bytes.
 *  @exception RANGE_ERROR The requested length is negative or
 *             the length is not representable in the type
 *             used by the system function.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: truncate (<span class="op">in</span> <span class="type">clib_file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: length)       <span class="keywd">is</span> action <span class="stri">"FIL_TRUNCATE"</span>;


<span class="comment">(**
 *  Determine if the file ''aFile'' is seekable.
 *  If a file is seekable the functions ''seek'' and ''tell''
 *  can be used to set and and obtain the current file position.
 *  @return TRUE, if ''aFile'' is seekable, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: seekable (<span class="op">in</span> <span class="type">clib_file</span>: aFile)                   <span class="keywd">is</span> action <span class="stri">"FIL_SEEKABLE"</span>;


<span class="comment">(**
 *  Set the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  @exception RANGE_ERROR The file position is negative or zero or
 *             the file position is not representable in the system
 *             file position type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="op">in</span> <span class="type">clib_file</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: position)         <span class="keywd">is</span> action <span class="stri">"FIL_SEEK"</span>;


<span class="comment">(**
 *  Obtain the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  @return the current file position.
 *  @exception RANGE_ERROR The file position does not fit into
 *             an integer value.
 *  @exception FILE_ERROR A system function returns an error or the
 *             file position reported by the system is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: tell (<span class="op">in</span> <span class="type">clib_file</span>: aFile)                       <span class="keywd">is</span> action <span class="stri">"FIL_TELL"</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">clib_file</span>: aFile)                     <span class="keywd">is</span> action <span class="stri">"FIL_LIT"</span>;
</pre>
</body>
</html>
