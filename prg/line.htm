<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  line.s7i      Filter file which reads the input linewise        *)</span>
<span class="comment">(*  Copyright (C) 1992, 1993, 1994, 2005  Thomas Mertes             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  [[file|File]] implementation type which reads ''baseFile'' linewise.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: lineFile <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">file</span>: baseFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: line <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Open a lineFile to filter ''aFile'' linewise.
 *  Until a line is finished with '\n' or [[char#EOF|EOF]] the
 *  characters in the line can be corrected with backspace ('\b').
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openLine (<span class="op">in</span> <span class="type">file</span>: aFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">lineFile</span>: new_lineFile <span class="keywd">is</span> lineFile.value;
  <span class="keywd">begin</span>
    new_lineFile.baseFile := aFile;
    newFile := toInterface(new_lineFile);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string to a ''lineFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">lineFile</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    outFile.line &amp;:= stri;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write end-of-line to a ''lineFile''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">lineFile</span>: outFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(outFile.baseFile, outFile.line);
    flush(outFile.baseFile);
    outFile.line := <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="keywd">inout</span> <span class="type">lineFile</span>: outFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(outFile.baseFile, outFile.line);
    flush(outFile.baseFile);
    outFile.line := <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a line from a ''lineFile''.
 *  The function accepts lines ending with "\n" or [[char#EOF|EOF]].
 *  The line ending characters are not copied into the string. When
 *  the function is left the lineFile.bufferChar contains '\n' or
 *  [[char#EOF|EOF]].
 *  @return the line read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getln (<span class="keywd">inout</span> <span class="type">lineFile</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inFile.line = <span class="stri">""</span> <span class="keywd">then</span>
      ch := getc(inFile.baseFile);
      <span class="keywd">while</span> ch &lt;> <span class="stri">'\n'</span> <span class="op">and</span> ch &lt;> EOF <span class="keywd">do</span>
        <span class="keywd">if</span> ch = <span class="stri">'\b'</span> <span class="keywd">then</span>
          <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
            stri := stri[ .. pred(length(stri))];
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          stri &amp;:= str(ch);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        ch := getc(inFile.baseFile);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      inFile.bufferChar := ch;
    <span class="keywd">else</span>
      <span class="keywd">if</span> inFile.line[length(inFile.line)] = <span class="stri">'\n'</span> <span class="keywd">then</span>
        stri := inFile.line[ .. pred(length(inFile.line))];
        inFile.bufferChar := <span class="stri">'\n'</span>;
      <span class="keywd">else</span>
        stri := inFile.line;
        inFile.bufferChar := EOF;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      inFile.line := <span class="stri">""</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a character from a lineFile.
 *  @return the character read, or [[char#EOF|EOF]] at the end of the file.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getc (<span class="keywd">inout</span> <span class="type">lineFile</span>: inFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: charRead <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inFile.line = <span class="stri">""</span> <span class="keywd">then</span>
      inFile.line := getln(inFile) &amp; <span class="stri">"\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> inFile.line = <span class="stri">"\n"</span> <span class="op">and</span> inFile.bufferChar = EOF <span class="keywd">then</span>
      charRead := EOF;
    <span class="keywd">else</span>
      charRead := inFile.line[1];
      inFile.line := inFile.line[2 .. ];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read a string with a maximum length from a lineFile.
 *  @return the string read.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="keywd">inout</span> <span class="type">lineFile</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> length(inFile.line) &lt; maxLength <span class="op">and</span> inFile.bufferChar &lt;> EOF <span class="keywd">do</span>
      inFile.line &amp;:= getln(inFile) &amp; <span class="stri">"\n"</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    striRead := inFile.line[ .. maxLength];
    inFile.line := inFile.line[succ(maxLength) .. ];
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
