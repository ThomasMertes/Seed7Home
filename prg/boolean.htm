<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  boolean.s7i   Boolean support library                           *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2011  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Logical type, which consists of the two truth values TRUE and FALSE.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: boolean <span class="keywd">is</span> subtype ENUMERATION;


IN_PARAM_IS_VALUE(boolean);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">boolean</span>: dest) ::= (<span class="op">in</span> <span class="type">boolean</span>: source)   <span class="keywd">is</span> action <span class="stri">"BLN_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">boolean</span>: aValue)                  <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">boolean</span>: dest) := (<span class="op">in</span> <span class="type">boolean</span>: source)  <span class="keywd">is</span> action <span class="stri">"BLN_CPY"</span>;


<span class="comment">(**
 *  ''FALSE'' is one of the two ''Boolean'' truth values.
 *  The negation of ''FALSE'' is ''TRUE''.
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: FALSE <span class="keywd">is</span> enumlit;


<span class="comment">(**
 *  ''TRUE'' is one of the two ''Boolean'' truth values.
 *  The negation of ''TRUE'' is ''FALSE''.
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: TRUE <span class="keywd">is</span> enumlit;


$ <span class="keywd">system</span> <span class="stri">"true"</span> <span class="keywd">is</span> TRUE;
$ <span class="keywd">system</span> <span class="stri">"false"</span> <span class="keywd">is</span> FALSE;


<span class="comment">(**
 *  Default value of ''boolean'' (FALSE).
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: (attr boolean) . value <span class="keywd">is</span> FALSE;


<span class="comment">(**
 *  Minimum value of ''boolean'' (FALSE).
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: (attr boolean) . first <span class="keywd">is</span> FALSE;


<span class="comment">(**
 *  Maximum value of ''boolean'' (TRUE).
 *)</span>
<span class="keywd">const</span> <span class="type">boolean</span>: (attr boolean) . last  <span class="keywd">is</span> TRUE;


<span class="comment">(**
 *  Negate a boolean value.
 *  @return TRUE if boolValue is FALSE,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: <span class="op">not</span> (<span class="op">in</span> <span class="type">boolean</span>: boolValue)                          <span class="keywd">is</span> action <span class="stri">"BLN_NOT"</span>;


<span class="comment">(**
 *  Logical ''and'' for two boolean values.
 *  The logical ''and'' operator works strictly left to right.
 *  If the result can be determined after the evaluation of
 *  ''boolValue1'' the right operand (''boolValue2'') is not evaluated.
 *  @return TRUE if boolValue1 is TRUE and boolValue2 is TRUE,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) <span class="op">and</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: boolValue2)    <span class="keywd">is</span> action <span class="stri">"BLN_AND"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) <span class="op">and</span> (<span class="keywd">ref</span> <span class="type">varfunc</span> <span class="type">boolean</span>: boolValue2) <span class="keywd">is</span> action <span class="stri">"BLN_AND"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) <span class="op">and</span> (<span class="op">in</span> <span class="type">boolean</span>: boolValue2)          <span class="keywd">is</span> action <span class="stri">"BLN_AND"</span>;


<span class="comment">(**
 *  Inclusive logical ''or'' for two boolean values.
 *  The logical ''or'' operator works strictly left to right.
 *  If the result can be determined after the evaluation of
 *  ''boolValue1'' the right operand (''boolValue2'') is not evaluated.
 *  @return TRUE if boolValue1 is TRUE or boolValue2 is TRUE (or both are true),
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) <span class="op">or</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: boolValue2)     <span class="keywd">is</span> action <span class="stri">"BLN_OR"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) <span class="op">or</span> (<span class="keywd">ref</span> <span class="type">varfunc</span> <span class="type">boolean</span>: boolValue2)  <span class="keywd">is</span> action <span class="stri">"BLN_OR"</span>;
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) <span class="op">or</span> (<span class="op">in</span> <span class="type">boolean</span>: boolValue2)           <span class="keywd">is</span> action <span class="stri">"BLN_OR"</span>;


<span class="comment">(**
 *  Check if two boolean values are equal.
 *  @return TRUE if the two boolean values are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) = (<span class="op">in</span> <span class="type">boolean</span>: boolValue2)  <span class="keywd">is</span> action <span class="stri">"BLN_EQ"</span>;


<span class="comment">(**
 *  Check if two boolean values are not equal.
 *  @return FALSE if the two boolean values are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) &lt;> (<span class="op">in</span> <span class="type">boolean</span>: boolValue2) <span class="keywd">is</span> action <span class="stri">"BLN_NE"</span>;


<span class="comment">(**
 *  Check if boolValue1 is less than boolValue2.
 *  @return TRUE if boolValue1 is FALSE and boolValue2 is TRUE,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) &lt; (<span class="op">in</span> <span class="type">boolean</span>: boolValue2)  <span class="keywd">is</span> action <span class="stri">"BLN_LT"</span>;


<span class="comment">(**
 *  Check if boolValue1 is greater than boolValue2.
 *  @return TRUE if boolValue1 is TRUE and boolValue2 is FALSE,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) > (<span class="op">in</span> <span class="type">boolean</span>: boolValue2)  <span class="keywd">is</span> action <span class="stri">"BLN_GT"</span>;


<span class="comment">(**
 *  Check if boolValue1 is less than or equal to boolValue2.
 *  @return TRUE if boolValue1 is FALSE or boolValue2 is TRUE,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) &lt;= (<span class="op">in</span> <span class="type">boolean</span>: boolValue2) <span class="keywd">is</span> action <span class="stri">"BLN_LE"</span>;


<span class="comment">(**
 *  Check if boolValue1 is greater than or equal to boolValue2.
 *  @return TRUE if boolValue1 is TRUE or boolValue2 is FALSE,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">boolean</span>: boolValue1) >= (<span class="op">in</span> <span class="type">boolean</span>: boolValue2) <span class="keywd">is</span> action <span class="stri">"BLN_GE"</span>;


<span class="comment">(**
 *  Compare two boolean values..
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">boolean</span>: aBoolean1, <span class="op">in</span> <span class="type">boolean</span>: aBoolean2) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Compute the hash value of a boolean value.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">boolean</span>: aBoolean)                      <span class="keywd">is</span> action <span class="stri">"BLN_ORD"</span>;


<span class="comment">(**
 *  Convert to [[integer]].
 *  @return 0 if boolValue is FALSE and
 *          1 if boolValue is TRUE.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">boolean</span>: boolValue)                          <span class="keywd">is</span> action <span class="stri">"BLN_ORD"</span>;


<span class="comment">(**
 *  Convert to [[integer]].
 *  @return 0 if boolValue is FALSE and
 *          1 if boolValue is TRUE.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">boolean</span>: boolValue)                      <span class="keywd">is</span> action <span class="stri">"BLN_ORD"</span>;


<span class="comment">(**
 *  Convert an [[integer]] to a boolean value.
 *  @return FALSE if number is 0,
 *          TRUE if number is 1.
 *  @exception RANGE_ERROR If number is neither 0 nor 1.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: boolean (<span class="op">in</span> <span class="type">integer</span>: number)                         <span class="keywd">is</span> action <span class="stri">"BLN_ICONV1"</span>;


<span class="comment">(**
 *  Convert an [[integer]] to a boolean value.
 *  @return FALSE if number is 0,
 *          TRUE if number is 1.
 *  @exception RANGE_ERROR If number is neither 0 nor 1.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (attr boolean) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number)             <span class="keywd">is</span> action <span class="stri">"BLN_ICONV3"</span>;


<span class="keywd">const</span> <span class="type">varfunc</span> <span class="type">boolean</span>: (attr boolean) <span class="op">varConv</span> (<span class="keywd">inout</span> <span class="type">integer</span>: number)    <span class="keywd">is</span> action <span class="stri">"TYP_VARCONV"</span>;


<span class="comment"># const boolean: succ (FALSE) is TRUE;</span>
<span class="comment"># const boolean: pred (TRUE) is  FALSE;</span>


<span class="comment">(**
 *  Successor of a boolean value.
 *  @return TRUE, if the boolean value is FALSE.
 *  @exception RANGE_ERROR If the boolean value is TRUE.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: succ (<span class="keywd">ref</span> <span class="type">boolean</span>: boolValue)                        <span class="keywd">is</span> action <span class="stri">"BLN_SUCC"</span>;


<span class="comment">(**
 *  Predecessor of a boolean value.
 *  @return FALSE, if the boolean value is TRUE.
 *  @exception RANGE_ERROR If the boolean value is FALSE.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: pred (<span class="keywd">ref</span> <span class="type">boolean</span>: boolValue)                        <span class="keywd">is</span> action <span class="stri">"BLN_PRED"</span>;


<span class="comment">(**
 *  Increment a boolean value.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: incr (<span class="keywd">inout</span> <span class="type">boolean</span>: boolValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    boolValue := succ(boolValue);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decrement a boolean value.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: decr (<span class="keywd">inout</span> <span class="type">boolean</span>: boolValue) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    boolValue := pred(boolValue);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a boolean value to a [[string]].
 *  The boolean value is converted to the string "TRUE" or "FALSE.
 *  @return "TRUE" if aBool is TRUE,
 *          "FALSE" otherwise.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">boolean</span>: aBool) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Convert a boolean value to a boolean literal.
 *  The boolean value is converted to the string "TRUE" or "FALSE.
 *  @return "TRUE" if aBool is TRUE,
 *          "FALSE" otherwise.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">boolean</span>: aBool) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Convert a [[string]] to a boolean value.
 *  @return the boolean result of the conversion.
 *  @exception RANGE_ERROR If the string is not equal to
 *             "TRUE" or "FALSE".
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (attr boolean) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Convert a [[string]] to a boolean value.
 *  @return the boolean result of the conversion.
 *  @exception RANGE_ERROR If the string is not equal to
 *             "TRUE" or "FALSE".
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: boolean (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> boolean <span class="op">parse</span> stri;


<span class="comment">(**
 *  Compute pseudo-random boolean value in the range [low, high].
 *  The random values are uniform distributed.
 *  @return a random number such that low &lt;= rand(low, high) and
 *          rand(low, high) &lt;= high holds.
 *  @exception RANGE_ERROR The range is empty (low > high holds).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: rand (<span class="op">in</span> <span class="type">boolean</span>: low, <span class="op">in</span> <span class="type">boolean</span>: high) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">const</span> <span class="type">proc</span>: DECLARE_TERNARY (<span class="op">in</span> <span class="type">type</span>: aType) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>

    <span class="comment">(**
     *  Ternary operator ''condition'' ? ''thenValue'' : ''elseValue''
     *  @return ''thenValue'' if ''condition'' is TRUE, and
     *          ''elseValue'' if ''condition'' is FALSE.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">aType</span>: (<span class="op">in</span> <span class="type">boolean</span>: condition) ? (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">aType</span>: thenValue) : (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">aType</span>: elseValue) <span class="keywd">is</span> action <span class="stri">"BLN_TERNARY"</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">aType</span>: (<span class="op">in</span> <span class="type">boolean</span>: condition) ? (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">aType</span>: thenValue) : (<span class="op">in</span> <span class="type">aType</span>: elseValue)       <span class="keywd">is</span> action <span class="stri">"BLN_TERNARY"</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">aType</span>: (<span class="op">in</span> <span class="type">boolean</span>: condition) ? (<span class="op">in</span> <span class="type">aType</span>: thenValue) : (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">aType</span>: elseValue)       <span class="keywd">is</span> action <span class="stri">"BLN_TERNARY"</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">aType</span>: (<span class="op">in</span> <span class="type">boolean</span>: condition) ? (<span class="op">in</span> <span class="type">aType</span>: thenValue) : (<span class="op">in</span> <span class="type">aType</span>: elseValue)             <span class="keywd">is</span> action <span class="stri">"BLN_TERNARY"</span>;

  <span class="keywd">end</span> <span class="keywd">func</span>;


DECLARE_TERNARY(boolean);


<span class="comment">(*
const func boolean: not (attr TRUE) is          FALSE;
const func boolean: not (attr FALSE) is         TRUE;

const func boolean: (attr FALSE) and (func boolean) is FALSE;
const func boolean: (attr FALSE) and boolean is        FALSE;
const func boolean: (attr FALSE) or (attr FALSE) is    FALSE;
const func boolean: (attr FALSE) or (attr TRUE) is     TRUE;
const func boolean: (attr FALSE) = (attr FALSE) is     TRUE;
const func boolean: (attr FALSE) = (attr TRUE) is      FALSE;
const func boolean: (attr FALSE) &lt; (attr FALSE) is     FALSE;
const func boolean: (attr FALSE) &lt; (attr TRUE) is      TRUE;
const func boolean: (attr FALSE) > boolean is          FALSE;
const func boolean: (attr FALSE) &lt;= boolean is         TRUE;
const func boolean: (attr FALSE) >= (attr FALSE) is    TRUE;
const func boolean: (attr FALSE) >= (attr TRUE) is     FALSE;
const func boolean: (attr FALSE) &lt;> (attr FALSE) is    FALSE;
const func boolean: (attr FALSE) &lt;> (attr TRUE) is     TRUE;

const integer: ord (attr FALSE) is       0;
const func boolean: succ (attr FALSE) is TRUE;
const EXCEPTION: pred (attr FALSE) is    RANGE_ERROR;
const string: str (attr FALSE) is        "FALSE";

const func boolean: (attr TRUE) and (attr FALSE) is    FALSE;
const func boolean: (attr TRUE) and (attr TRUE) is     TRUE;
const func boolean: (attr TRUE) or (func boolean) is   TRUE;
const func boolean: (attr TRUE) or boolean is          TRUE;
const func boolean: (attr TRUE) = (attr FALSE) is      FALSE;
const func boolean: (attr TRUE) = (attr TRUE) is       TRUE;
const func boolean: (attr TRUE) &lt; boolean is           FALSE;
const func boolean: (attr TRUE) > (attr FALSE) is      TRUE;
const func boolean: (attr TRUE) > (attr TRUE) is       FALSE;
const func boolean: (attr TRUE) &lt;= (attr FALSE) is     FALSE;
const func boolean: (attr TRUE) &lt;= (attr TRUE) is      TRUE;
const func boolean: (attr TRUE) >= boolean is          TRUE;
const func boolean: (attr TRUE) &lt;> (attr FALSE) is     TRUE;
const func boolean: (attr TRUE) &lt;> (attr TRUE) is      FALSE;

const integer: ord (attr TRUE) is        1;
const EXCEPTION: succ (attr TRUE) is     RANGE_ERROR;
const func boolean: pred (attr TRUE) is  FALSE;
const string: str (attr TRUE) is         "TRUE";
*)</span>
</pre>
</body>
</html>
