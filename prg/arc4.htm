<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  arc4.s7i      Support for ARC4 (Alleged RC4) stream cipher.     *)</span>
<span class="comment">(*  Copyright (C) 2013  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bin32.htm">bin32.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/cipher.htm">cipher.s7i</a>"</span>;


<span class="comment">(**
 *  [[cipher|cipherState]] implementation type describing the state of an ARC4 cipher.
 *  The data is encrypted / decrypted with the ARC4 (Alleged RC4)
 *  stream cipher.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: arc4State <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">char</span>: s <span class="keywd">is</span> [0 .. 255] <span class="op">times</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: i <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: j <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(arc4State, cipherState);


<span class="comment">(**
 *  Block size used by the ARC4 (Alleged RC4) stream cipher.
 *  @return the block size used by the ARC4 cipher.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: blockSize (RC4) <span class="keywd">is</span> 0;


<span class="comment">(**
 *  Set the key for the ARC4 (Alleged RC4) stream cipher.
 *  @param arc4Key The key to be used for RC4.
 *  @return the RC4 (ARC4) cipher state.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">arc4State</span>: setArc4Key (<span class="op">in</span> <span class="type">string</span>: arc4Key) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">arc4State</span>: state <span class="keywd">is</span> arc4State.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: i <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: j <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: temp <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> i <span class="keywd">range</span> 0 <span class="keywd">to</span> 255 <span class="keywd">do</span>
      state.s[i] := chr(i);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> i <span class="keywd">range</span> 0 <span class="keywd">to</span> 255 <span class="keywd">do</span>
      ch := arc4Key[succ(i <span class="op">mod</span> length(arc4Key))];
      <span class="keywd">if</span> ord(ch) > 255 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      j := (j + ord(state.s[i]) + ord(ch)) <span class="op">mod</span> 256;
      temp := state.s[i];
      state.s[i] := state.s[j];
      state.s[j] := temp;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set key and initialization vector for the ARC4 (Alleged RC4) stream cipher.
 *  @param cipherKey The key to be used for RC4.
 *  @param initializationVector Unused for RC4.
 *  @return the initial ''cipherState'' of a RC4 (ARC4) cipher.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">cipherState</span>: setCipherKey (RC4, <span class="op">in</span> <span class="type">string</span>: cipherKey,
    <span class="op">in</span> <span class="type">string</span>: initializationVector) <span class="keywd">is</span>
  <span class="keywd">return</span> toInterface(setArc4Key(cipherKey));


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getArc4PseudoRandomByte (<span class="keywd">inout</span> <span class="type">arc4State</span>: state) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: keystreamChar <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: temp <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    state.i := succ(state.i) <span class="op">mod</span> 256;
    state.j := (state.j + ord(state.s[state.i])) <span class="op">mod</span> 256;
    temp := state.s[state.i];
    state.s[state.i] := state.s[state.j];
    state.s[state.j] := temp;
    keystreamChar := state.s[(ord(state.s[state.i]) + ord(state.s[state.j])) <span class="op">mod</span> 256];
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Encode a string with the ARC4 (Alleged RC4) stream cipher.
 *  @return the encoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: encode (<span class="keywd">inout</span> <span class="type">arc4State</span>: state, <span class="op">in</span> <span class="type">string</span>: plaintext) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: encoded <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: keystreamChar <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> plaintext <span class="keywd">do</span>
      keystreamChar := getArc4PseudoRandomByte(state);
      encoded &amp;:= chr(ord(bin32(ord(ch)) >&lt; bin32(ord(keystreamChar))));
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decode a string with the ARC4 (Alleged RC4) stream cipher.
 *  @return the decoded string.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: decode (<span class="keywd">inout</span> <span class="type">arc4State</span>: state, <span class="op">in</span> <span class="type">string</span>: encoded) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: plaintext <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: keystreamChar <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> encoded <span class="keywd">do</span>
      keystreamChar := getArc4PseudoRandomByte(state);
      plaintext &amp;:= chr(ord(bin32(ord(ch)) >&lt; bin32(ord(keystreamChar))));
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
