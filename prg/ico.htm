<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  ico.s7i       Support for the ICO image file format.            *)</span>
<span class="comment">(*  Copyright (C) 2019 - 2023  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bmp.htm">bmp.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">string</span>: ICO_MAGIC <span class="keywd">is</span> <span class="stri">"\0;\0;\1;\0;"</span>;

<span class="keywd">const</span> <span class="type">integer</span>: ICO_DIR_ENTRY_SIZE <span class="keywd">is</span> 16;

<span class="keywd">const</span> <span class="type">type</span>: icoDirEntry <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: numColors <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: planes <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: bitsPerPixel <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: imageSize <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: offset <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showDirEntry (<span class="op">in</span> <span class="type">icoDirEntry</span>: dirEntry) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"width: "</span> &lt;&amp; dirEntry.width);
    writeln(<span class="stri">"height: "</span> &lt;&amp; dirEntry.height);
    writeln(<span class="stri">"numColors: "</span> &lt;&amp; dirEntry.numColors);
    writeln(<span class="stri">"planes: "</span> &lt;&amp; dirEntry.planes);
    writeln(<span class="stri">"bitsPerPixel: "</span> &lt;&amp; dirEntry.bitsPerPixel);
    writeln(<span class="stri">"imageSize: "</span> &lt;&amp; dirEntry.imageSize);
    writeln(<span class="stri">"offset: "</span> &lt;&amp; dirEntry.offset);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: readDirEntry (<span class="keywd">inout</span> <span class="type">file</span>: icoFile, <span class="keywd">inout</span> <span class="type">icoDirEntry</span>: dirEntry) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := gets(icoFile, ICO_DIR_ENTRY_SIZE);
    <span class="keywd">if</span> length(stri) = ICO_DIR_ENTRY_SIZE <span class="keywd">then</span>
       dirEntry.width        := bytes2Int(stri[ 1 fixLen 1], UNSIGNED, LE);
       dirEntry.height       := bytes2Int(stri[ 2 fixLen 1], UNSIGNED, LE);
       dirEntry.numColors    := bytes2Int(stri[ 3 fixLen 1], UNSIGNED, LE);
       <span class="comment"># Ignore 1 reserved byte.</span>
       dirEntry.planes       := bytes2Int(stri[ 5 fixLen 2], UNSIGNED, LE);
       dirEntry.bitsPerPixel := bytes2Int(stri[ 7 fixLen 2], UNSIGNED, LE);
       dirEntry.imageSize    := bytes2Int(stri[ 9 fixLen 4], UNSIGNED, LE);
       dirEntry.offset       := bytes2Int(stri[13 fixLen 4], UNSIGNED, LE);
    <span class="keywd">else</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads a ICO file into a pixmap.
 *  @param icoFile File that contains a ICO image.
 *  @return A pixmap with the ICO image, or
 *          PRIMITIVE_WINDOW.value if the file does
 *          not contain a ICO magic number.
 *  @exception RANGE_ERROR The file is not in the ICO file format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: readIco (<span class="keywd">inout</span> <span class="type">file</span>: icoFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: magic <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: numberOfImages <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">icoDirEntry</span>: dirEntry <span class="keywd">is</span> icoDirEntry.value;
    <span class="keywd">var</span> <span class="type">bmpHeader</span>: header <span class="keywd">is</span> bmpHeader.value;
  <span class="keywd">begin</span>
    magic := gets(icoFile, length(ICO_MAGIC));
    <span class="keywd">if</span> magic = ICO_MAGIC <span class="keywd">then</span>
      numberOfImages := bytes2Int(gets(icoFile, 2), UNSIGNED, LE);
      <span class="comment"># writeln("numberOfImages: " &lt;&amp; numberOfImages);</span>
      readDirEntry(icoFile, dirEntry);
      <span class="comment"># showDirEntry(dirEntry);</span>
      <span class="comment"># seek(icoFile, succ(dirEntry.offset));</span>
      header.dibHeaderSize := bytes2Int(gets(icoFile, 4), UNSIGNED, LE);
      readDibHeader(icoFile, header);
      <span class="comment"># showHeader(header);</span>
      header.height := dirEntry.height;
      pixmap := readBmp(icoFile, header);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Reads a ICO file with the given ''icoFileName'' into a pixmap.
 *  @param icoFileName Name of the ICO file.
 *  @return A pixmap with the ICO image, or
 *          PRIMITIVE_WINDOW.value if the file cannot be opened or
 *          does not contain a ICO magic number.
 *  @exception RANGE_ERROR The file is not in the ICO file format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: readIco (<span class="op">in</span> <span class="type">string</span>: icoFileName) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: icoFile <span class="keywd">is</span> STD_NULL;
   <span class="keywd">begin</span>
    icoFile := open(icoFileName, <span class="stri">"r"</span>);
    <span class="keywd">if</span> icoFile &lt;> STD_NULL <span class="keywd">then</span>
      pixmap := readIco(icoFile);
      close(icoFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Converts a pixmap into a string in ICO format.
 *  @param pixmap Pixmap to be converted.
 *  @return a string with data in ICO format.
 *  @exception RANGE_ERROR The pixmap is too large vor the ICO format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap, ICO) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">pixel</span>: image <span class="keywd">is</span> 0 <span class="op">times</span> 0 <span class="op">times</span> pixel.value;
    <span class="keywd">var</span> <span class="type">integer</span>: padding <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: lineMaskLen <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">pixel</span>: pix <span class="keywd">is</span> pixel.value;
    <span class="keywd">var</span> <span class="type">color</span>: col <span class="keywd">is</span> color.value;
  <span class="keywd">begin</span>
    width := width(pixmap);
    height := height(pixmap);
    <span class="keywd">if</span> width > 256 <span class="op">or</span> height > 256 <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">else</span>
      stri := <span class="stri">"\0;\0;\                              # Must always be 0</span>
              \\1;\0;\                              <span class="comment"># Image type: 1 for icon</span>
              \\1;\0;<span class="stri">" &amp;                            # Number of images in the file: 1</span>
              str(chr(width <span class="op">mod</span> 256)) &amp;             <span class="comment"># A width of 0 means 256.</span>
              str(chr(height <span class="op">mod</span> 256)) &amp;            <span class="comment"># A height of 0 means 256.</span>
              <span class="stri">"\0;\                                 # Number of palette colors, 0 for no palette.</span>
              \\0;<span class="stri">" &amp;                               # Reserved</span>
              bytes( 1,         UNSIGNED, LE, 2) &amp;  <span class="comment"># color planes</span>
              bytes(24,         UNSIGNED, LE, 2) &amp;  <span class="comment"># bits per pixel</span>
              <span class="stri">"\0;\0;\0;\0;"</span> &amp;                      <span class="comment"># image size in bytes: filled later (index: 15)</span>
              bytes(22,         UNSIGNED, LE, 4) &amp;  <span class="comment"># offset to BMP data</span>
              bytes(40,         UNSIGNED, LE, 4) &amp;  <span class="comment"># BMP header size</span>
              bytes(width,      UNSIGNED, LE, 4) &amp;
              bytes(2 * height, UNSIGNED, LE, 4) &amp;  <span class="comment"># Factor 2 because of the AND mask.</span>
              bytes( 1,         UNSIGNED, LE, 2) &amp;  <span class="comment"># color planes</span>
              bytes(24,         UNSIGNED, LE, 2) &amp;  <span class="comment"># bits per pixel</span>
              <span class="stri">"\0;"</span> <span class="op">mult</span> 4 &amp;                        <span class="comment"># compression</span>
              <span class="stri">"\0;"</span> <span class="op">mult</span> 4 &amp;                        <span class="comment"># image size</span>
              <span class="stri">"\0;"</span> <span class="op">mult</span> 4 &amp;                        <span class="comment"># horizontal resolution</span>
              <span class="stri">"\0;"</span> <span class="op">mult</span> 4 &amp;                        <span class="comment"># vertical resolution</span>
              <span class="stri">"\0;"</span> <span class="op">mult</span> 4 &amp;                        <span class="comment"># palette colors</span>
              <span class="stri">"\0;"</span> <span class="op">mult</span> 4;                         <span class="comment"># important colors (0 means all colors are important)</span>
      image := getPixelArray(pixmap);
      padding := -(3 * width) <span class="op">mod</span> 4;
      <span class="keywd">for</span> line <span class="keywd">range</span> height <span class="keywd">downto</span> 1 <span class="keywd">do</span>
        <span class="keywd">for</span> pix <span class="keywd">range</span> image[line] <span class="keywd">do</span>
          col := pixelToColor(pix);
          stri &amp;:= chr(col.blueLight  <span class="op">mdiv</span> 256);
          stri &amp;:= chr(col.greenLight <span class="op">mdiv</span> 256);
          stri &amp;:= chr(col.redLight   <span class="op">mdiv</span> 256);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        stri &amp;:= <span class="stri">"\0;"</span> <span class="op">mult</span> padding;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      lineMaskLen := succ(pred(width) <span class="op">mdiv</span> 8);
      padding := lineMaskLen <span class="op">mod</span> 4;
      <span class="keywd">for</span> line <span class="keywd">range</span> pred(height) <span class="keywd">downto</span> 0 <span class="keywd">do</span>
        <span class="comment"># Assume no transparent pixels.</span>
        stri &amp;:= <span class="stri">"\0;"</span> <span class="op">mult</span> (lineMaskLen + padding);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      stri @:= [15] bytes(length(stri) - 22, UNSIGNED, LE, 4);  <span class="comment"># Subtract ICO header size (=offset)</span>
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeIco (<span class="op">in</span> <span class="type">string</span>: icoFileName, <span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: icoFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    icoFile := open(icoFileName, <span class="stri">"w"</span>);
    <span class="keywd">if</span> icoFile &lt;> STD_NULL <span class="keywd">then</span>
      write(icoFile, str(pixmap, ICO));
      close(icoFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
