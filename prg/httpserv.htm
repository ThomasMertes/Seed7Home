<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  httpserv.s7i  Support for HTTP server and HTTP requests.        *)</span>
<span class="comment">(*  Copyright (C) 2015  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/time.htm">time.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/duration.htm">duration.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/listener.htm">listener.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/scanstri.htm">scanstri.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/encoding.htm">encoding.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/unicode.htm">unicode.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/x509cert.htm">x509cert.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/tls.htm">tls.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/cgi.htm">cgi.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">type</span>: propertyType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">string</span>;


<span class="comment">(**
 *  Destribes a HTTP request.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: httpRequest <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: method <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: path <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: queryStri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">propertyType</span>: queryParams <span class="keywd">is</span> propertyType.value;
    <span class="keywd">var</span> <span class="type">propertyType</span>: properties <span class="keywd">is</span> propertyType.value;
    <span class="keywd">var</span> <span class="type">string</span>: header <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: body <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Destribes a HTTP server connection.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: httpServerConnection <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">duration</span>: keepAliveTime <span class="keywd">is</span> 15 . SECONDS;
    <span class="keywd">var</span> <span class="type">time</span>: timeout <span class="keywd">is</span> time.value;
    <span class="keywd">var</span> <span class="type">string</span>: buffer <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: readPos <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">boolean</span>: readingHeader <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: contentToRead <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">httpRequest</span>: request <span class="keywd">is</span> httpRequest.value;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: httpConnectionHash <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">file</span><span class="type">]</span> <span class="type">httpServerConnection</span>;


<span class="comment">(**
 *  Destribes a HTTP server.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: httpServer <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: useTls <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: port <span class="keywd">is</span> 1080;
    <span class="keywd">var</span> certAndKey: certificate <span class="keywd">is</span> certAndKey.value;
    <span class="keywd">var</span> listener: httpListener <span class="keywd">is</span> listener.value;
    <span class="keywd">var</span> <span class="type">httpConnectionHash</span>: sessions <span class="keywd">is</span> httpConnectionHash.value;
    <span class="keywd">var</span> <span class="type">duration</span>: keepAliveTime <span class="keywd">is</span> 15 . SECONDS;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">httpRequest</span>: processHttpRequest (<span class="keywd">inout</span> <span class="type">httpServerConnection</span>: conn) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">httpRequest</span>: request <span class="keywd">is</span> httpRequest.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: line <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: lfPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: requestPath <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: questionMarkPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: colonPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("processHttpRequest");</span>
    conn.timeout := time(NOW) + conn.keepAliveTime;
    conn.buffer := conn.buffer[conn.readPos ..];
    conn.readPos := 1;
    conn.buffer &amp;:= gets(conn.sock, 16384);
    <span class="keywd">if</span> conn.readingHeader <span class="keywd">then</span>
      lfPos := pos(conn.buffer, <span class="stri">'\n'</span>);
      <span class="keywd">while</span> lfPos &lt;> 0 <span class="keywd">do</span>
        conn.request.header &amp;:= conn.buffer[conn.readPos .. lfPos];
        <span class="keywd">if</span> lfPos > 1 <span class="op">and</span> conn.buffer[pred(lfPos)] = <span class="stri">'\r'</span> <span class="keywd">then</span>
          line := conn.buffer[conn.readPos .. lfPos - 2];
        <span class="keywd">else</span>
          line := conn.buffer[conn.readPos .. pred(lfPos)];
        <span class="keywd">end</span> <span class="keywd">if</span>;
        conn.readPos := succ(lfPos);
        <span class="comment"># writeln("&lt;- " &lt;&amp; line);</span>
        <span class="keywd">if</span> line = <span class="stri">""</span> <span class="keywd">then</span>
          <span class="keywd">if</span> <span class="stri">"Content-Length"</span> <span class="op">in</span> conn.request.properties <span class="keywd">then</span>
            <span class="keywd">block</span>
              conn.contentToRead := integer(conn.request.properties[<span class="stri">"Content-Length"</span>]);
            exception
              catch RANGE_ERROR:
                noop;
            <span class="keywd">end</span> <span class="keywd">block</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          conn.readingHeader := FALSE;
        <span class="keywd">elsif</span> conn.request.method = <span class="stri">""</span> <span class="keywd">then</span>
          conn.request.method := getWord(line);
          requestPath := getWord(line);
          questionMarkPos := pos(requestPath, <span class="stri">'?'</span>);
          <span class="keywd">if</span> questionMarkPos &lt;> 0 <span class="keywd">then</span>
            conn.request.queryStri := requestPath[succ(questionMarkPos) ..];
            requestPath := requestPath[.. pred(questionMarkPos)];
          <span class="keywd">end</span> <span class="keywd">if</span>;
          conn.request.path := replace(fromUrlEncoded(requestPath), <span class="stri">"\\"</span>, <span class="stri">"/"</span>);
          <span class="keywd">block</span>
            conn.request.path := fromUtf8(conn.request.path);
          exception
            catch RANGE_ERROR:
              noop;
          <span class="keywd">end</span> <span class="keywd">block</span>;
          conn.request.queryParams := getCgiParameters(conn.request.queryStri);
        <span class="keywd">else</span>
          colonPos := pos(line, <span class="stri">':'</span>);
          <span class="keywd">if</span> colonPos &lt;> 0 <span class="keywd">then</span>
            conn.request.properties @:= [trim(line[.. pred(colonPos)])] trim(line[succ(colonPos) ..]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        lfPos := pos(conn.buffer, <span class="stri">'\n'</span>, conn.readPos);
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> conn.readingHeader <span class="keywd">then</span>
      <span class="keywd">if</span> conn.contentToRead &lt;> 0 <span class="keywd">then</span>
        <span class="keywd">if</span> length(conn.buffer) - conn.readPos + 1 &lt;= conn.contentToRead <span class="keywd">then</span>
          <span class="comment"># writeln("&lt;- " &lt;&amp; conn.buffer[conn.readPos len conn.contentToRead]);</span>
          conn.request.body &amp;:= conn.buffer[conn.readPos len conn.contentToRead];
          conn.readPos +:= conn.contentToRead;
          conn.contentToRead := 0;
        <span class="keywd">else</span>
          <span class="comment"># writeln("&lt;- " &lt;&amp; conn.buffer[conn.readPos ..]);</span>
          conn.request.body &amp;:= conn.buffer[conn.readPos ..];
          conn.contentToRead -:= length(conn.buffer) - conn.readPos + 1;
          conn.readPos := succ(length(conn.buffer));
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> conn.contentToRead = 0 <span class="keywd">then</span>
        request := conn.request;
        request.sock := conn.sock;
        conn.readingHeader := TRUE;
        conn.request := httpRequest.value;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
 <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: openHttpSession (<span class="keywd">inout</span> <span class="type">httpServer</span>: server, <span class="keywd">inout</span> <span class="type">file</span>: sock) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: tlsSock <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">httpServerConnection</span>: conn <span class="keywd">is</span> httpServerConnection.value;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("openHttpSession: " &lt;&amp; ord(sock));</span>
    <span class="keywd">if</span> server.useTls <span class="keywd">then</span>
      conn.sock := openServerTls(sock, server.certificate);
      <span class="keywd">if</span> conn.sock = STD_NULL <span class="keywd">then</span>
        <span class="comment"># writeln(" ***** Cannot open TLS connection.");</span>
        <span class="keywd">block</span>
          close(sock);
        exception
          catch FILE_ERROR:
            noop;
        <span class="keywd">end</span> <span class="keywd">block</span>;
        sock := STD_NULL;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      conn.sock := sock;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> conn.sock &lt;> STD_NULL <span class="keywd">then</span>
      conn.keepAliveTime := server.keepAliveTime;
      conn.timeout := time(NOW) + conn.keepAliveTime;
      server.sessions @:= [sock] conn;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: closeHttpSession (<span class="keywd">inout</span> <span class="type">httpServer</span>: server, <span class="keywd">inout</span> <span class="type">file</span>: sock) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="comment"># writeln("closeHttpSession: " &lt;&amp; ord(sock));</span>
    close(server.sessions[sock].sock);
    excl(server.sessions, sock);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">httpRequest</span>: processHttpRequest (<span class="keywd">inout</span> <span class="type">httpServer</span>: server, <span class="keywd">inout</span> <span class="type">file</span>: sock) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">httpRequest</span>: request <span class="keywd">is</span> httpRequest.value;
  <span class="keywd">begin</span>
    <span class="comment"># writeln("processHttpRequest: " &lt;&amp; ord(sock));</span>
    <span class="keywd">if</span> sock <span class="op">not</span> <span class="op">in</span> server.sessions <span class="keywd">then</span>
      openHttpSession(server, sock);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> sock <span class="op">in</span> server.sessions <span class="keywd">then</span>
      <span class="keywd">if</span> eof(sock) <span class="keywd">then</span>
        closeHttpSession(server, sock);
      <span class="keywd">else</span>
        <span class="keywd">block</span>
          request := processHttpRequest(server.sessions[sock]);
        exception
          catch FILE_ERROR:
            noop;
        <span class="keywd">end</span> <span class="keywd">block</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cleanSessions (<span class="keywd">inout</span> <span class="type">httpServer</span>: server) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: sock <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    <span class="comment"># writeln(length(server.sessions) &lt;&amp; " sessions");</span>
    <span class="keywd">for</span> sock <span class="keywd">range</span> keys(server.sessions) <span class="keywd">do</span>
      <span class="keywd">if</span> sock <span class="op">in</span> server.sessions <span class="op">and</span>
          time(NOW) > server.sessions[sock].timeout <span class="keywd">then</span>
        closeHttpSession(server, sock);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">httpServer</span>: openHttpServer (<span class="op">in</span> <span class="type">integer</span>: port,
    <span class="op">in</span> certAndKey: certificate, <span class="op">in</span> <span class="type">boolean</span>: useTls) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">httpServer</span>: server <span class="keywd">is</span> httpServer.value;
  <span class="keywd">begin</span>
    server.useTls := useTls;
    server.port := port;
    server.certificate := certificate;
    server.httpListener := openInetListener(port);
    listen(server.httpListener, 10);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">httpRequest</span>: getRequest (<span class="keywd">inout</span> <span class="type">httpServer</span>: server) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">httpRequest</span>: request <span class="keywd">is</span> httpRequest.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: existingConnection <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">file</span>: newConnection <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      waitForRequest(server.httpListener, existingConnection, newConnection);
      <span class="keywd">if</span> existingConnection &lt;> STD_NULL <span class="keywd">then</span>
        request := processHttpRequest(server, existingConnection);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> newConnection &lt;> STD_NULL <span class="keywd">then</span>
        openHttpSession(server, newConnection);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      cleanSessions(server);
    <span class="keywd">until</span> request.method &lt;> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
