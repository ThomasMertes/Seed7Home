<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  wildcard.s7i  Wild card match and find matching files.          *)</span>
<span class="comment">(*  Copyright (C) 2010 - 2014, 2017  Thomas Mertes                  *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Check if the [[string]] stri matches with ''pattern''.
 *  The pattern may contain wildcard characters.
 *  * The asterisk * matches zero or more characters.
 *  * The question mark ? matches exactly one character.
 *  @return TRUE, if stri is matched by pattern,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: wildcardMatch (<span class="op">in</span> <span class="type">string</span>: stri, <span class="op">in</span> <span class="type">string</span>: pattern) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: doesMatch <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: length <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">string</span>: patternTail <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> pattern = <span class="stri">""</span> <span class="keywd">then</span>
      doesMatch := stri = <span class="stri">""</span>;
    <span class="keywd">else</span>
      <span class="keywd">case</span> pattern[1] <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'*'</span>}:
          <span class="keywd">if</span> pattern = <span class="stri">"*"</span> <span class="keywd">then</span>
            doesMatch := TRUE;
          <span class="keywd">else</span>
            length := length(stri);
            patternTail := pattern[2 .. ];
            <span class="keywd">while</span> index &lt;= length <span class="op">and</span> <span class="op">not</span> doesMatch <span class="keywd">do</span>
              doesMatch := wildcardMatch(stri[index .. ], patternTail);
              incr(index);
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'?'</span>}:
          <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
            doesMatch := wildcardMatch(stri[2 .. ], pattern[2 .. ]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">otherwise</span>:
          <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="op">and</span> stri[1] = pattern[1] <span class="keywd">then</span>
            doesMatch := wildcardMatch(stri[2 .. ], pattern[2 .. ]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine which file paths that match a given ''pattern''.
 *  The pattern may contain wildcard characters.
 *  * The asterisk * matches zero or more characters.
 *  * The question mark ? matches exactly one character.
 *  @param pattern File name pattern (e.g.: *.sd7) or path
 *         followed by a file name pattern (e.g.: prg/*.sd7).
 *  @param caseSensitive TRUE if the match is case sensitive,
 *         FALSE otherwise.
 *  @return array of matching file paths.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: findMatchingFiles (<span class="op">in</span> <span class="type">string</span>: pattern,
    <span class="op">in</span> <span class="type">boolean</span>: caseSensitive) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: matchingFiles <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: path <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: dirContent <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: filePattern <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: fileName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    slashPos := rpos(pattern, <span class="stri">'/'</span>);
    <span class="keywd">block</span>
      <span class="keywd">if</span> slashPos &lt;> 0 <span class="keywd">then</span>
        path := pattern[.. pred(slashPos)];
        filePattern := pattern[succ(slashPos) ..];
        dirContent := readDir(path);
        path &amp;:= <span class="stri">"/"</span>;
      <span class="keywd">else</span>
        filePattern := pattern;
        dirContent := readDir(<span class="stri">"."</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    exception
      catch FILE_ERROR: noop;
    <span class="keywd">end</span> <span class="keywd">block</span>;
    <span class="keywd">if</span> caseSensitive <span class="keywd">then</span>
      <span class="keywd">for</span> fileName <span class="keywd">range</span> dirContent <span class="keywd">do</span>
        <span class="keywd">if</span> wildcardMatch(fileName, filePattern) <span class="keywd">then</span>
          matchingFiles &amp;:= [] (path &amp; fileName);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">else</span>
      filePattern := lower(filePattern);
      <span class="keywd">for</span> fileName <span class="keywd">range</span> dirContent <span class="keywd">do</span>
        <span class="keywd">if</span> wildcardMatch(lower(fileName), filePattern) <span class="keywd">then</span>
          matchingFiles &amp;:= [] (path &amp; fileName);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine which file paths that match a given ''pattern''.
 *  The pattern may contain wildcard characters.
 *  * The asterisk * matches zero or more characters.
 *  * The question mark ? matches exactly one character.
 *  @param pattern File name pattern (e.g.: *.sd7) or path
 *         followed by a file name pattern (e.g.: prg/*.sd7).
 *  @return array of matching file paths.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: findMatchingFiles (<span class="op">in</span> <span class="type">string</span>: pattern) <span class="keywd">is</span>
    <span class="keywd">return</span> findMatchingFiles(pattern, TRUE);
</pre>
</body>
</html>
