<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  osfiles.s7i   Functions to handle operating system files        *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2017, 2019  Thomas Mertes                  *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/enable_io.htm">enable_io.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/time.htm">time.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/bigint.htm">bigint.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/filesys.htm">filesys.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: GET_ATIME (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="keywd">inout</span> <span class="type">integer</span>: year,
    <span class="keywd">inout</span> <span class="type">integer</span>: month, <span class="keywd">inout</span> <span class="type">integer</span>: day, <span class="keywd">inout</span> <span class="type">integer</span>: hour,
    <span class="keywd">inout</span> <span class="type">integer</span>: minute, <span class="keywd">inout</span> <span class="type">integer</span>: second, <span class="keywd">inout</span> <span class="type">integer</span>: micro_second,
    <span class="keywd">inout</span> <span class="type">integer</span>: timeZone, <span class="keywd">inout</span> <span class="type">boolean</span>: daylightSavingTime)  <span class="keywd">is</span> action <span class="stri">"CMD_GET_ATIME"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: GET_CTIME (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="keywd">inout</span> <span class="type">integer</span>: year,
    <span class="keywd">inout</span> <span class="type">integer</span>: month, <span class="keywd">inout</span> <span class="type">integer</span>: day, <span class="keywd">inout</span> <span class="type">integer</span>: hour,
    <span class="keywd">inout</span> <span class="type">integer</span>: minute, <span class="keywd">inout</span> <span class="type">integer</span>: second, <span class="keywd">inout</span> <span class="type">integer</span>: micro_second,
    <span class="keywd">inout</span> <span class="type">integer</span>: timeZone, <span class="keywd">inout</span> <span class="type">boolean</span>: daylightSavingTime)  <span class="keywd">is</span> action <span class="stri">"CMD_GET_CTIME"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: GET_MTIME (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="keywd">inout</span> <span class="type">integer</span>: year,
    <span class="keywd">inout</span> <span class="type">integer</span>: month, <span class="keywd">inout</span> <span class="type">integer</span>: day, <span class="keywd">inout</span> <span class="type">integer</span>: hour,
    <span class="keywd">inout</span> <span class="type">integer</span>: minute, <span class="keywd">inout</span> <span class="type">integer</span>: second, <span class="keywd">inout</span> <span class="type">integer</span>: micro_second,
    <span class="keywd">inout</span> <span class="type">integer</span>: timeZone, <span class="keywd">inout</span> <span class="type">boolean</span>: daylightSavingTime)  <span class="keywd">is</span> action <span class="stri">"CMD_GET_MTIME"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: SET_ATIME (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">integer</span>: year, <span class="op">in</span> <span class="type">integer</span>: month,
    <span class="op">in</span> <span class="type">integer</span>: day, <span class="op">in</span> <span class="type">integer</span>: hour, <span class="op">in</span> <span class="type">integer</span>: minute, <span class="op">in</span> <span class="type">integer</span>: second,
    <span class="op">in</span> <span class="type">integer</span>: micro_second, <span class="op">in</span> <span class="type">integer</span>: timeZone)              <span class="keywd">is</span> action <span class="stri">"CMD_SET_ATIME"</span>;

<span class="keywd">const</span> <span class="type">proc</span>: SET_MTIME (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">integer</span>: year, <span class="op">in</span> <span class="type">integer</span>: month,
    <span class="op">in</span> <span class="type">integer</span>: day, <span class="op">in</span> <span class="type">integer</span>: hour, <span class="op">in</span> <span class="type">integer</span>: minute, <span class="op">in</span> <span class="type">integer</span>: second,
    <span class="op">in</span> <span class="type">integer</span>: micro_second, <span class="op">in</span> <span class="type">integer</span>: timeZone)              <span class="keywd">is</span> action <span class="stri">"CMD_SET_MTIME"</span>;


<span class="comment">(**
 *  Determine the filenames in a directory.
 *  The files "." and ".." are left out from the result.
 *  Note that the function returns only the filenames.
 *  Additional information must be obtained with other calls.
 *  @return a string-array containing the filenames in the directory.
 *  @exception MEMORY_ERROR Not enough memory to convert ''dirPath''
 *             to the system path type or not enough memory to
 *             represent the result ''string array''.
 *  @exception RANGE_ERROR ''dirPath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: readDir (<span class="op">in</span> <span class="type">string</span>: dirPath)        <span class="keywd">is</span> action <span class="stri">"CMD_LS"</span>;


<span class="comment">(**
 *  Determine the type of a file.
 *  The function does follow symbolic links. If the chain of
 *  symbolic links is too long the function returns ''FILE_SYMLINK''.
 *  If a symbolic link refers to a place where the permission
 *  is denied the function returns ''FILE_SYMLINK''.
 *  A return value of ''FILE_ABSENT'' does not imply that a file
 *  with this name can be created, since missing directories and
 *  invalid file names cause also ''FILE_ABSENT''.
 *  @return the type of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation.
 *  @exception FILE_ERROR The system function returns an error other
 *             than ENOENT, ENOTDIR, ENAMETOOLONG or EACCES.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> fileType: fileType (<span class="op">in</span> <span class="type">string</span>: filePath)          <span class="keywd">is</span> action <span class="stri">"CMD_FILETYPE"</span>;


<span class="comment">(**
 *  Determine the type of a file.
 *  The function does not follow symbolic links. Therefore it may
 *  return ''FILE_SYMLINK''. A return value of ''FILE_ABSENT'' does
 *  not imply that a file with this name can be created, since missing
 *  directories and invalid file names cause also ''FILE_ABSENT''.
 *  @return the type of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation.
 *  @exception FILE_ERROR The system function returns an error other
 *             than ENOENT, ENOTDIR, ENAMETOOLONG or EACCES.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> fileType: fileTypeSL (<span class="op">in</span> <span class="type">string</span>: filePath)        <span class="keywd">is</span> action <span class="stri">"CMD_FILETYPE_SL"</span>;


<span class="comment">(**
 *  Determine the file mode (permissions) of a file.
 *  @return the file mode.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> fileMode: fileMode (<span class="op">in</span> <span class="type">string</span>: filePath)          <span class="keywd">is</span> action <span class="stri">"CMD_FILEMODE"</span>;


<span class="comment">(**
 *  Change the file mode (permissions) of a file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setFileMode (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> fileMode: mode) <span class="keywd">is</span> action <span class="stri">"CMD_SET_FILEMODE"</span>;


<span class="comment">(**
 *  Determine the size of a file.
 *  The file size is measured in bytes.
 *  For directories, fifos and sockets a size of 0 is returned.
 *  @return the size of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception RANGE_ERROR The file size is not representable as integer.
 *  @exception FILE_ERROR It was not possible to determine the file size.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: fileSize (<span class="op">in</span> <span class="type">string</span>: filePath)           <span class="keywd">is</span> action <span class="stri">"CMD_FILESIZE"</span>;


<span class="comment">(**
 *  Determine the size of a file.
 *  The file size is measured in bytes.
 *  For directories, fifos and sockets a size of 0 is returned.
 *  @return the size of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR It was not possible to determine the file size.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: bigFileSize (<span class="op">in</span> <span class="type">string</span>: filePath)     <span class="keywd">is</span> action <span class="stri">"CMD_BIG_FILESIZE"</span>;


<span class="comment">(**
 *  Determine the access time of a file.
 *  @return the access time of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: getATime (<span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">time</span>: accessTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    GET_ATIME(filePath, accessTime.year, accessTime.month, accessTime.day,
        accessTime.hour, accessTime.minute, accessTime.second,
        accessTime.micro_second, accessTime.timeZone,
        accessTime.daylightSavingTime);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the change time of a file.
 *  @return the change time of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: getCTime (<span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">time</span>: changeTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    GET_CTIME(filePath, changeTime.year, changeTime.month, changeTime.day,
        changeTime.hour, changeTime.minute, changeTime.second,
        changeTime.micro_second, changeTime.timeZone,
        changeTime.daylightSavingTime);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the modification time of a file.
 *  @return the modification time of the file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: getMTime (<span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">time</span>: modificationTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    GET_MTIME(filePath, modificationTime.year, modificationTime.month, modificationTime.day,
        modificationTime.hour, modificationTime.minute, modificationTime.second,
        modificationTime.micro_second, modificationTime.timeZone,
        modificationTime.daylightSavingTime);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the access time of a file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception RANGE_ERROR ''aTime'' is invalid or cannot be
 *             converted to the system file time.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setATime (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">time</span>: aTime) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    SET_ATIME(filePath, aTime.year, aTime.month, aTime.day,
        aTime.hour, aTime.minute, aTime.second,
        aTime.micro_second, aTime.timeZone);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the modification time of a file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception RANGE_ERROR ''aTime'' is invalid or cannot be
 *             converted to the system file time.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setMTime (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">time</span>: aTime) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    SET_MTIME(filePath, aTime.year, aTime.month, aTime.day,
        aTime.hour, aTime.minute, aTime.second,
        aTime.micro_second, aTime.timeZone);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the name of the owner (UID) of a file.
 *  @return the name of the file owner.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getOwner (<span class="op">in</span> <span class="type">string</span>: filePath)            <span class="keywd">is</span> action <span class="stri">"CMD_GET_OWNER"</span>;


<span class="comment">(**
 *  Set the owner of a file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setOwner (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">string</span>: owner) <span class="keywd">is</span> action <span class="stri">"CMD_SET_OWNER"</span>;


<span class="comment">(**
 *  Determine the name of the group (GID) to which a file belongs.
 *  @return the name of the file group.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getGroup (<span class="op">in</span> <span class="type">string</span>: filePath)            <span class="keywd">is</span> action <span class="stri">"CMD_GET_GROUP"</span>;


<span class="comment">(**
 *  Set the group of a file.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setGroup (<span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">string</span>: group) <span class="keywd">is</span> action <span class="stri">"CMD_SET_GROUP"</span>;


<span class="comment">(**
 *  Reads the destination of a symbolic link.
 *  @return The destination referred by the symbolic link.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath''
 *             to the system path type or not enough memory to
 *             represent the result [[string]].
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR The file described with the path does not
 *             exist or is not a symbolic link.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: readLink (<span class="op">in</span> <span class="type">string</span>: filePath)            <span class="keywd">is</span> action <span class="stri">"CMD_READLINK"</span>;


<span class="comment"># The function readlink() is deprecated. Use readLink() instead.</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: readlink (<span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> readLink(filePath);


<span class="comment">(**
 *  Create a symbolic link.
 *  The symbolic link ''destPath'' will refer to ''sourcePath'' afterwards.
 *  @param sourcePath String to be contained in the symbolic link.
 *  @param destPath Name of the symbolic link to be created.
 *  @exception MEMORY_ERROR Not enough memory to convert sourcePath or
 *             destPath to the system path type.
 *  @exception RANGE_ERROR ''sourcePath'' or ''destPath'' does not use the
 *             standard path representation or one of them cannot be
 *             converted to the system path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: symlink (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath)   <span class="keywd">is</span> action <span class="stri">"CMD_SYMLINK"</span>;


<span class="comment">(**
 *  Remove a file of any type unless it is a directory that is not empty.
 *  An attempt to remove a directory that is not empty triggers FILE_ERROR.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath'' to
 *             the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR The file does not exist or it is a directory
 *             that is not empty or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: removeFile (<span class="op">in</span> <span class="type">string</span>: filePath)                 <span class="keywd">is</span> action <span class="stri">"CMD_REMOVE_FILE"</span>;


<span class="comment">(**
 *  Remove a file of any type inclusive a directory tree.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath'' to
 *             the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR The file does not exist or a system function
 *             returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: removeTree (<span class="op">in</span> <span class="type">string</span>: filePath)                 <span class="keywd">is</span> action <span class="stri">"CMD_REMOVE_TREE"</span>;


<span class="comment">(**
 *  Copy a file or directory tree.
 *  Permissions/mode, ownership and timestamps of the destination file
 *  are determined independent of the corresponding source properties.
 *  The destination file gets the permissions/mode defined by umask.
 *  The user executing the program is the owner of the destination file.
 *  The timestamps of the destination file are set to the current time.
 *  Symbolic links in ''sourcePath'' are always followed.
 *  Therefore ''copyFile'' will never create a symbolic link.
 *  Note that ''copyFile'' does not preserve hard links (they are
 *  resolved to distinct files).
 *  @exception MEMORY_ERROR Not enough memory to convert ''sourcePath''
 *             or ''destPath'' to the system path type.
 *  @exception RANGE_ERROR ''sourcePath'' or ''destPath'' does not use
 *             the standard path representation or one of them cannot be
 *             converted to the system path type.
 *  @exception FILE_ERROR Source file does not exist, destination file
 *             already exists or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: copyFile (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath)  <span class="keywd">is</span> action <span class="stri">"CMD_COPY_FILE"</span>;


<span class="comment">(**
 *  Clone a file or directory tree.
 *  Permissions/mode, ownership and timestamps of the original are
 *  preserved. Symlinks are not followed. Instead the symlink is
 *  copied. Note that ''cloneFile'' does not preserve hard links (they
 *  are resolved to distinct files).
 *  @exception MEMORY_ERROR Not enough memory to convert
 *             ''sourcePath'' or ''destPath'' to the system path type.
 *  @exception RANGE_ERROR ''sourcePath'' or ''destPath'' does not use
 *             the standard path representation or one of them cannot be
 *             converted to the system path type.
 *  @exception FILE_ERROR Source file does not exist, destination file
 *             already exists or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: cloneFile (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath) <span class="keywd">is</span> action <span class="stri">"CMD_CLONE_FILE"</span>;


<span class="comment">(**
 *  Move and rename a file or directory tree.
 *  The function uses the C ''rename()'' function. If ''rename()'' fails
 *  the file (or directory tree) is cloned with ''cloneFile'' (which
 *  preserves permissions/mode, ownership and timestamps) to the new
 *  place and with the new name. If ''cloneFile'' succeeds the original
 *  file is deleted. If ''cloneFile'' fails (no space on device or
 *  other reason) all remains of the failed clone are removed. Note
 *  that ''cloneFile'' works for symbolic links but does not preserve
 *  hard links (they are resolved to distinct files).
 *  @exception MEMORY_ERROR Not enough memory to convert ''sourcePath''
 *             or ''destPath'' to the system path type.
 *  @exception RANGE_ERROR ''sourcePath'' or ''destPath'' does not use
 *             the standard path representation or one of them cannot be
 *             converted to the system path type.
 *  @exception FILE_ERROR Source file does not exist, destination file
 *             already exists or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: moveFile (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath)  <span class="keywd">is</span> action <span class="stri">"CMD_MOVE"</span>;


<span class="comment">(**
 *  Creates a new directory.
 *  @exception MEMORY_ERROR Not enough memory to convert ''dirPath'' to
 *             the system path type.
 *  @exception RANGE_ERROR ''dirPath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: mkdir (<span class="op">in</span> <span class="type">string</span>: dirPath)                       <span class="keywd">is</span> action <span class="stri">"CMD_MKDIR"</span>;


<span class="comment">(**
 *  Determine the current working directory of the calling process.
 *  @return The absolute path of the current working directory.
 *  @exception MEMORY_ERROR Not enough memory to represent the
 *             result [[string]].
 *  @exception FILE_ERROR The system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getcwd                                    <span class="keywd">is</span> action <span class="stri">"CMD_GETCWD"</span>;


<span class="comment">(**
 *  Changes the current working directory of the calling process.
 *  @exception MEMORY_ERROR Not enough memory to convert ''dirPath'' to
 *             the system path type.
 *  @exception RANGE_ERROR ''dirPath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: chdir (<span class="op">in</span> <span class="type">string</span>: dirPath)                       <span class="keywd">is</span> action <span class="stri">"CMD_CHDIR"</span>;


<span class="comment">(**
 *  Determine the home directory of the user.
 *  This function should be preferred over the use of an environment
 *  variable such as $HOME. $HOME is not supported under all operating
 *  systems and it is not guaranteed, that it uses the standard path
 *  representation.
 *  @return The absolute path of the home directory.
 *  @exception MEMORY_ERROR Not enough memory to represent the
 *             result [[string]].
 *  @exception FILE_ERROR Not able to determine the home directory.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: homeDir                                   <span class="keywd">is</span> action <span class="stri">"CMD_HOME_DIR"</span>;


<span class="comment">(**
 *  Determine the absolute path for a given ''path''.
 *   toAbsPath(getcwd, "aFile")    -->  Returns e.g. "/home/myuser/aFile"
 *   toAbsPath(".", "aFile")       -->  Returns e.g. "/home/myuser/aFile"
 *   toAbsPath("/usr", "include")  -->  Returns "/usr/include"
 *  @param basePath Path of the base location. The relative ''path'' is
 *         relative to this location.
 *  @param path Absolute or relative path for which the absolute path should
 *         be determined:
 *  @return ''path'' if ''path'' is already absolute, or
 *          concatenate ''basePath'' with ''path''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toAbsPath (<span class="op">in</span> <span class="type">string</span>: basePath, <span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: absolutePath <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: dotdotPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> startsWith(path, <span class="stri">"/"</span>) <span class="keywd">then</span>
      absolutePath := path;
    <span class="keywd">elsif</span> basePath = <span class="stri">"/"</span> <span class="keywd">then</span>
      absolutePath := <span class="stri">"/"</span> &amp; path;
    <span class="keywd">elsif</span> startsWith(basePath, <span class="stri">"/"</span>) <span class="keywd">then</span>
      absolutePath := basePath &amp; <span class="stri">"/"</span> &amp; path;
    <span class="keywd">else</span>
      absolutePath := getcwd &amp; <span class="stri">"/"</span> &amp; basePath &amp; <span class="stri">"/"</span> &amp; path;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    dotdotPos := pos(absolutePath, <span class="stri">"/.."</span>);
    <span class="keywd">while</span> dotdotPos &lt;> 0 <span class="keywd">do</span>
      slashPos := rpos(absolutePath, <span class="stri">'/'</span>, pred(dotdotPos));
      <span class="keywd">if</span> length(absolutePath) = dotdotPos + 2 <span class="keywd">then</span>
        <span class="keywd">if</span> slashPos &lt;= 1 <span class="keywd">then</span>
          absolutePath := <span class="stri">"/"</span>;
        <span class="keywd">else</span>
          absolutePath := absolutePath[.. pred(slashPos)];
        <span class="keywd">end</span> <span class="keywd">if</span>;
        dotdotPos := 0;
      <span class="keywd">elsif</span> absolutePath[dotdotPos + 3] = <span class="stri">'/'</span> <span class="keywd">then</span>
        <span class="keywd">if</span> slashPos &lt;> 0 <span class="keywd">then</span>
          absolutePath := absolutePath[.. pred(slashPos)] &amp; absolutePath[dotdotPos + 3 ..];
        <span class="keywd">else</span>
          absolutePath := absolutePath[dotdotPos + 3 ..];
        <span class="keywd">end</span> <span class="keywd">if</span>;
        dotdotPos := pos(absolutePath, <span class="stri">"/.."</span>);
      <span class="keywd">else</span>
        dotdotPos := pos(absolutePath, <span class="stri">"/.."</span>, succ(dotdotPos));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    absolutePath := replace(absolutePath, <span class="stri">"/./"</span>, <span class="stri">"/"</span>);
    <span class="keywd">if</span> endsWith(absolutePath, <span class="stri">"/."</span>) <span class="keywd">then</span>
      <span class="keywd">if</span> absolutePath = <span class="stri">"/."</span> <span class="keywd">then</span>
        absolutePath := <span class="stri">"/"</span>;
      <span class="keywd">else</span>
        absolutePath := absolutePath[.. length(absolutePath) - 2];
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="comment"># writeln("toAbsPath(" &lt;&amp; literal(basePath) &lt;&amp; ", " &lt;&amp; literal(path) &lt;&amp;</span>
    <span class="comment">#         ") --> " &lt;&amp; literal(absolutePath));</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: parentDir (<span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: parentDir <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    slashPos := rpos(path, <span class="stri">'/'</span>);
    <span class="keywd">if</span> slashPos = 0 <span class="keywd">then</span>
      parentDir := <span class="stri">"."</span>;
    <span class="keywd">elsif</span> slashPos = 1 <span class="keywd">then</span>
      parentDir := <span class="stri">"/"</span>;
    <span class="keywd">else</span>
      parentDir := path[.. pred(slashPos)];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create the parent directories of the given 'filePath'.
 *  @exception MEMORY_ERROR Not enough memory to convert ''filePath'' to
 *             the system path type.
 *  @exception RANGE_ERROR ''filePath'' does not use the standard path
 *             representation or it cannot be converted to the system
 *             path type.
 *  @exception FILE_ERROR A system function returns an error, or
 *             a component of 'filePath' is not a directory.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: makeParentDirs (<span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: dirPath <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    slashPos := pos(filePath, <span class="stri">'/'</span>, 2);
    <span class="keywd">while</span> slashPos &lt;> 0 <span class="keywd">do</span>
      dirPath := filePath[.. pred(slashPos)];
      <span class="keywd">if</span> fileTypeSL(dirPath) = FILE_ABSENT <span class="keywd">then</span>
        mkdir(dirPath);
        slashPos := pos(filePath, <span class="stri">'/'</span>, succ(slashPos));
      <span class="keywd">elsif</span> fileTypeSL(dirPath) = FILE_DIR <span class="keywd">then</span>
        slashPos := pos(filePath, <span class="stri">'/'</span>, succ(slashPos));
      <span class="keywd">else</span>
        raise FILE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: convDosPath (<span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stdPath <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="comment"># Path delimiter is slash</span>
    stdPath := replace(path, <span class="stri">"\\"</span>, <span class="stri">"/"</span>);
    <span class="comment"># Convert drive letters to standard path</span>
    <span class="keywd">if</span> length(stdPath) >= 2 <span class="op">and</span> stdPath[2] = <span class="stri">':'</span> <span class="op">and</span>
        lower(stdPath[1]) >= <span class="stri">'a'</span> <span class="op">and</span> lower(stdPath[1]) &lt;= <span class="stri">'z'</span> <span class="keywd">then</span>
      stdPath @:= [2] lower(stdPath[1]);
      stdPath @:= [1] <span class="stri">'/'</span>;
      <span class="keywd">if</span> length(stdPath) >= 3 <span class="op">and</span> stdPath[3] &lt;> <span class="stri">'/'</span> <span class="keywd">then</span>
        stdPath := stdPath[.. 2] &amp; <span class="stri">"/"</span> &amp; stdPath[3 ..];
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="comment"># Remove double slashes</span>
    stdPath := replaceN(stdPath, <span class="stri">"//"</span>, <span class="stri">"/"</span>);
    <span class="comment"># Remove slash at end of path</span>
    <span class="keywd">if</span> stdPath &lt;> <span class="stri">"/"</span> <span class="op">and</span> endsWith(stdPath, <span class="stri">"/"</span>) <span class="keywd">then</span>
      stdPath := stdPath[.. pred(length(stdPath))];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toStdPath (<span class="op">in</span> <span class="type">string</span>: path) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stdPath <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stdPath := path;
    <span class="comment"># Remove double slashes</span>
    stdPath := replaceN(stdPath, <span class="stri">"//"</span>, <span class="stri">"/"</span>);
    <span class="comment"># Remove slash at end of path</span>
    <span class="keywd">while</span> stdPath &lt;> <span class="stri">"/"</span> <span class="op">and</span> endsWith(stdPath, <span class="stri">"/"</span>) <span class="keywd">do</span>
      stdPath := stdPath[.. pred(length(stdPath))];
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  [[filesys#fileSys|FileSys]] implementation type to access operating system files.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: osFileSys <span class="keywd">is</span> sub emptyFileSys <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(osFileSys, fileSys);


<span class="keywd">const</span> <span class="type">func</span> fileSys: openOsFileSys <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> fileSys: newFileSys <span class="keywd">is</span> fileSys.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">osFileSys</span>: osFiles <span class="keywd">is</span> osFileSys.value;
  <span class="keywd">begin</span>
    newFileSys := toInterface(osFiles);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  [[filesys#fileSys|File system]] of the operating system files.
 *)</span>
<span class="keywd">var</span> fileSys: osFiles <span class="keywd">is</span> openOsFileSys;


<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem) <span class="keywd">is</span> noop;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: readDir (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: dirPath) <span class="keywd">is</span>
  <span class="keywd">return</span> readDir(dirPath);

<span class="keywd">const</span> <span class="type">func</span> fileType: fileType (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> fileType(filePath);

<span class="keywd">const</span> <span class="type">func</span> fileType: fileTypeSL (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> fileTypeSL(filePath);

<span class="keywd">const</span> <span class="type">func</span> fileMode: fileMode (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> fileMode(filePath);

<span class="keywd">const</span> <span class="type">proc</span>: setFileMode (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> fileMode: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setFileMode(filePath, mode);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: fileSize (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> fileSize(filePath);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">bigInteger</span>: bigFileSize (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> bigFileSize(filePath);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: getMTime (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> getMTime(filePath);

<span class="keywd">const</span> <span class="type">proc</span>: setMTime (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">time</span>: modificationTime) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setMTime(filePath, modificationTime);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getOwner (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> getOwner(filePath);

<span class="keywd">const</span> <span class="type">proc</span>: setOwner (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">string</span>: owner) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setOwner(filePath, owner);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getGroup (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> getGroup(filePath);

<span class="keywd">const</span> <span class="type">proc</span>: setGroup (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath,
    <span class="op">in</span> <span class="type">string</span>: group) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setGroup(filePath, group);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: open (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span>
  <span class="keywd">return</span> open(filePath, mode);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getFile (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: data <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: workFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    workFile := open(filePath, <span class="stri">"r"</span>);
    <span class="keywd">if</span> workFile &lt;> STD_NULL <span class="keywd">then</span>
      data := gets(workFile, length(workFile));
      close(workFile);
    <span class="keywd">else</span>
      raise FILE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">proc</span>: putFile (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: workFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      workFile := open(filePath, <span class="stri">"w"</span>);
      <span class="keywd">if</span> workFile &lt;> STD_NULL <span class="keywd">then</span>
        write(workFile, stri);
        close(workFile);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: readLink (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: filePath) <span class="keywd">is</span>
  <span class="keywd">return</span> readLink(filePath);

<span class="keywd">const</span> <span class="type">proc</span>: mkdir (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: dirPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    mkdir(dirPath);
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getcwd (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem) <span class="keywd">is</span>
  <span class="keywd">return</span> getcwd;

<span class="keywd">const</span> <span class="type">proc</span>: chdir (<span class="keywd">inout</span> <span class="type">osFileSys</span>: fileSystem, <span class="op">in</span> <span class="type">string</span>: dirPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    chdir(dirPath);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
