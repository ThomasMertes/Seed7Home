<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  lander.sd7    Lunar lander                                      *)</span>
<span class="comment">(*  Copyright (C) 1993, 1994, 2005  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/dialog.htm">dialog.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/editline.htm">editline.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/window.htm">window.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/time.htm">time.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/duration.htm">duration.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/math.htm">math.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">integer</span>: X_MINIMUM            <span class="keywd">is</span>   0;
<span class="keywd">const</span> <span class="type">integer</span>: X_MAXIMUM            <span class="keywd">is</span> 639;
<span class="keywd">const</span> <span class="type">integer</span>: Y_MINIMUM            <span class="keywd">is</span>   0;
<span class="keywd">const</span> <span class="type">integer</span>: Y_MAXIMUM            <span class="keywd">is</span> 399;
<span class="keywd">const</span> <span class="type">float</span>:   X_START_POSITION     <span class="keywd">is</span>  15.0;
<span class="keywd">const</span> <span class="type">float</span>:   Y_START_POSITION     <span class="keywd">is</span> flt(Y_MAXIMUM - 199 + 15);
<span class="keywd">const</span> <span class="type">integer</span>: SHIP_Y_MIN           <span class="keywd">is</span>   7;
<span class="keywd">const</span> <span class="type">float</span>:   SHIP_DIAMETER        <span class="keywd">is</span>   7.0;
<span class="keywd">const</span> <span class="type">integer</span>: NO_TILT              <span class="keywd">is</span>   1;
<span class="keywd">const</span> <span class="type">integer</span>: MAX_TILT             <span class="keywd">is</span>  24;
<span class="keywd">const</span> <span class="type">integer</span>: LANDSCAPE_X_UNIT     <span class="keywd">is</span>   4;
<span class="keywd">const</span> <span class="type">integer</span>: SIZE_LANDSCAPE       <span class="keywd">is</span> X_MAXIMUM <span class="op">div</span> LANDSCAPE_X_UNIT;
<span class="keywd">const</span> <span class="type">integer</span>: ADLAND               <span class="keywd">is</span> 100;
<span class="keywd">const</span> <span class="type">integer</span>: PODEST_HEIGHT        <span class="keywd">is</span>   5;
<span class="keywd">const</span> <span class="type">integer</span>: GAUGE_Y_POS          <span class="keywd">is</span> Y_MAXIMUM + 26;

<span class="keywd">const</span> <span class="type">type</span>: rocket_type <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">float</span>: x_pos <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: y_pos <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: old_x_pos <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: old_y_pos <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: x_speed <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: y_speed <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">integer</span>: tilt <span class="keywd">is</span> NO_TILT;
    <span class="keywd">var</span> <span class="type">integer</span>: old_tilt <span class="keywd">is</span> NO_TILT;
    <span class="keywd">var</span> <span class="type">integer</span>: thrust <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: old_thrust <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: fuel <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">var</span> <span class="type">rocket_type</span>: rocket <span class="keywd">is</span> rocket_type.value;

<span class="keywd">var</span> <span class="type">boolean</span>: flying <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: quit_program <span class="keywd">is</span> FALSE;

<span class="keywd">const</span> <span class="type">type</span>: point <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: y <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">point</span>: landscape <span class="keywd">is</span> SIZE_LANDSCAPE <span class="op">times</span> point.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">point</span>: advanced_landscape <span class="keywd">is</span> SIZE_LANDSCAPE <span class="op">times</span> point.value;

<span class="keywd">const</span> <span class="type">array</span> <span class="type">array</span> <span class="type">integer</span>: explosion_data <span class="keywd">is</span> [] (
    [] ( 0, 10),
    [] ( 1,  7),
    [] ( 2,  8),
    [] ( 3,  3),
    [] ( 4,  2),
    [] ( 5,  8),
    [] ( 6,  7),
    [] ( 7,  1),
    [] ( 8,  6),
    [] ( 9,  2),
    [] (10,  0)
  );

<span class="keywd">var</span> <span class="type">array</span> <span class="type">float</span>: COS_ANG <span class="keywd">is</span> MAX_TILT <span class="op">times</span> 0.0;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">float</span>: SIN_ANG <span class="keywd">is</span> MAX_TILT <span class="op">times</span> 0.0;
<span class="keywd">var</span> <span class="type">boolean</span>: advancedLander <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">integer</span>: leftOfLandingPad <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">boolean</span>: sound_on <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">integer</span>: score <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: scoremax <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: height_gauge <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: fuel_gauge <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: fall_gauge <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: power_gauge <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: fuel_max <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">float</span>: gravity <span class="keywd">is</span> 0.0;

<span class="keywd">const</span> <span class="type">type</span>: lineCoordinates <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">float</span>: xStart <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: yStart <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: xEnd <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: yEnd <span class="keywd">is</span> 0.0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">lineCoordinates</span>: ship <span class="keywd">is</span> 0 <span class="op">times</span> lineCoordinates.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">lineCoordinates</span>: flames <span class="keywd">is</span> 20 <span class="op">times</span> 0 <span class="op">times</span> lineCoordinates.value;

<span class="keywd">const</span> <span class="type">type</span>: tonetype <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: freq <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: leng <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">var</span> <span class="type">integer</span>: musicindex <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: soundstep <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">string</span>: playerName <span class="keywd">is</span> <span class="stri">""</span>;
<span class="keywd">var</span> <span class="type">text</span>: screen <span class="keywd">is</span> STD_NULL;
<span class="keywd">var</span> <span class="type">text</span>: panel <span class="keywd">is</span> STD_NULL;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: frequency (<span class="op">in</span> <span class="type">integer</span>: frequencyNumber) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: frequency <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* frequency *)</span>
    <span class="keywd">if</span> frequencyNumber <span class="op">in</span> {0 .. 6} <span class="keywd">then</span>
      <span class="comment"># frequency := 0;</span>
      frequency := 32767;
    <span class="keywd">else</span>
      frequency := trunc(36.8 * (2.0 ** (1.0 / 12.0)) ** (flt(frequencyNumber) - 6.0));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">tonetype</span>: tone (<span class="op">in</span> <span class="type">integer</span>: frequencyNumber, <span class="op">in</span> <span class="type">integer</span>: leng) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">tonetype</span>: tone <span class="keywd">is</span> tonetype.value;
  <span class="keywd">begin</span>
    tone.freq := frequency(frequencyNumber);
    tone.leng := leng;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(* Blue Danube Waltz by J.S.Strauss *)</span>
<span class="keywd">const</span> <span class="type">array</span> <span class="type">tonetype</span>: BLUE <span class="keywd">is</span> [] (
    tone(42,  4),
    tone(46,  4),
    tone(49,  4),
    tone(49,  4),
    tone( 0,  4),
    tone(61,  2),
    tone( 0,  2),
    tone(61,  2),
    tone( 0,  6),
    tone(58,  2),
    tone( 0,  2),
    tone(58,  2),
    tone( 0,  6),
    tone(42,  4),
    tone(42,  4),
    tone(46,  4),
    tone(49,  4),
    tone(49,  4),
    tone( 0,  4),
    tone(61,  2),
    tone( 0,  2),
    tone(61,  2),
    tone( 0,  6),
    tone(59,  2),
    tone( 0,  2),
    tone(59,  2),
    tone( 0,  6),
    tone(41,  4),
    tone(41,  4),
    tone(44,  4),
    tone(51,  4),
    tone(51,  4),
    tone( 0,  4),
    tone(63,  2),
    tone( 0,  2),
    tone(63,  2),
    tone( 0,  6),
    tone(59,  2),
    tone( 0,  2),
    tone(59,  2),
    tone( 0,  6),
    tone(41,  4),
    tone(41,  4),
    tone(44,  4),
    tone(51,  4),
    tone(51,  4),
    tone( 0,  4),
    tone(63,  2),
    tone( 0,  2),
    tone(63,  2),
    tone( 0,  6),
    tone(58,  2),
    tone( 0,  2),
    tone(58,  2),
    tone( 0,  6),
    tone(42,  4),
    tone(42,  4),
    tone(46,  4),
    tone(49,  4),
    tone(54,  4),
    tone( 0,  4),
    tone(66,  2),
    tone( 0,  2),
    tone(66,  2),
    tone( 0,  6),
    tone(61,  2),
    tone( 0,  2),
    tone(61,  2),
    tone( 0,  6),
    tone(42,  4),
    tone(42,  4),
    tone(46,  4),
    tone(49,  4),
    tone(54,  4),
    tone( 0,  4),
    tone(66,  2),
    tone( 0,  2),
    tone(66,  2),
    tone( 0,  6),
    tone(63,  2),
    tone( 0,  2),
    tone(63,  2),
    tone( 0,  6),
    tone(44,  4),
    tone(44,  4),
    tone(47,  4),
    tone(51,  2),
    tone( 0,  2),
    tone(51, 14),
    tone( 0,  2),
    tone(48,  4),
    tone(49,  4),
    tone(58, 16),
    tone(54,  4),
    tone(46,  4),
    tone(46,  8),
    tone(44,  4),
    tone(51,  8),
    tone(49,  4),
    tone(42,  4),
    tone( 0,  2),
    tone(42,  2),
    tone(42,  4),
    tone( 0,  8),
    tone(49,  2),
    tone( 0,  2),
    tone(47,  2),
    tone( 0,  6),
    tone(49,  2),
    tone( 0,  2),
    tone(47,  2),
    tone( 0,  6),
    tone(49,  4),
    tone(58, 16),
    tone(56,  4),
    tone(49,  2),
    tone( 0,  2),
    tone(46,  2),
    tone( 0,  6),
    tone(49,  2),
    tone( 0,  2),
    tone(46,  2),
    tone( 0,  6),
    tone(49,  4),
    tone(56, 16),
    tone(54,  4),
    tone(49,  2),
    tone( 0,  2),
    tone(47,  2),
    tone( 0,  6),
    tone(49,  2),
    tone( 0,  2),
    tone(47,  2),
    tone( 0,  6),
    tone(49,  4),
    tone(58, 16),
    tone(56,  4),
    tone(49,  4),
    tone(54,  4),
    tone(56,  4),
    tone(58,  4),
    tone(61,  8),
    tone(59,  4),
    tone(58,  2),
    tone(58,  2),
    tone(58,  4),
    tone(56,  2),
    tone( 0,  2),
    tone(54,  4),
    tone( 0,  8));


<span class="comment">(* Stars and stripes forever - Sousa *)</span>
<span class="keywd">const</span> <span class="type">array</span> <span class="type">tonetype</span>: STAR <span class="keywd">is</span> [] (
    tone(54,  6),
    tone(54,  6),
    tone(52,  3),
    tone(51,  3),
    tone(51,  6),
    tone(50,  3),
    tone(51,  3),
    tone(51, 16),
    tone( 0,  2),
    tone(50,  3),
    tone(51,  3),
    tone(51,  6),
    tone(50,  3),
    tone(51,  3),
    tone(54,  6),
    tone(51,  3),
    tone(54,  3),
    tone(52, 12),
    tone(49,  6),
    tone( 0,  3),
    tone(49,  3),
    tone(49,  6),
    tone(48,  3),
    tone(49,  3),
    tone(49,  6),
    tone(48,  3),
    tone(49,  3),
    tone(52, 16),
    tone( 0,  2),
    tone(51,  3),
    tone(49,  3),
    tone(51,  3),
    tone(54,  9),
    tone(56,  9),
    tone(56,  3),
    tone(49, 16),
    tone( 0,  2),
    tone(54,  6),
    tone(54,  6),
    tone(52,  3),
    tone(51,  3),
    tone(51,  6),
    tone(50,  3),
    tone(51,  3),
    tone(51, 16),
    tone( 0,  2),
    tone(50,  3),
    tone(51,  3),
    tone(51,  6),
    tone(50,  3),
    tone(51,  3),
    tone(52,  3),
    tone(51,  3),
    tone(49,  5),
    tone(46,  1),
    tone(49, 12),
    tone(47,  6),
    tone( 0,  3),
    tone(47,  3),
    tone(47,  6),
    tone(46,  3),
    tone(47,  3),
    tone(50,  6),
    tone(49,  3),
    tone(47,  3),
    tone(59, 15),
    tone( 0,  3),
    tone(47,  3),
    tone(49,  3),
    tone(51,  3),
    tone(54,  1),
    tone( 0,  2),
    tone(47,  3),
    tone(49,  3),
    tone(51,  3),
    tone(54,  1),
    tone( 0,  2),
    tone(42,  3),
    tone(44,  5),
    tone(51,  1),
    tone(49, 12),
    tone(47,  1));


<span class="keywd">const</span> <span class="type">proc</span>: sound (<span class="op">in</span> <span class="type">integer</span>: frequency) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* sound *)</span>
    noop;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* sound *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: nosound <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* nosound *)</span>
    noop;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* nosound *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: delay (<span class="op">in</span> <span class="type">integer</span>: duration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* delay *)</span>
    noop;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* delay *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: doBeep <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* doBeep *)</span>
    write(chr(7));
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* doBeep *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: welcome <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span> <span class="comment">(* welcome *)</span>
    color(screen, light_cyan, black);
    clear(screen);
    setPos(screen, 3, 20);
    write(screen, <span class="stri">"L A N D E R"</span>);
    color(screen, white, black);
    setPos(screen, 5, 3);
    writeln(screen, <span class="stri">"Copyright (C) 1993, 1994, 2005  Thomas Mertes"</span>);
    setPos(screen, 7, 6);
    writeln(screen, <span class="stri">"This program is free software under the"</span>);
    setPos(screen, 8, 6);
    writeln(screen, <span class="stri">"terms of the GNU General Public License"</span>);
    setPos(screen, 10, 2);
    writeln(screen, <span class="stri">"Lander is written in the Seed7 programming language"</span>);
    setPos(screen, 11, 5);
    writeln(screen, <span class="stri">"Homepage:    http://seed7.sourceforge.net"</span>);
    setPos(screen, 14, 1);
    writeln(screen, <span class="stri">"      The object is to successfully land the"</span>);
    writeln(screen, <span class="stri">"      space-craft on the landing pad. This is"</span>);
    writeln(screen, <span class="stri">"      done by changing the rocket thrust and"</span>);
    writeln(screen, <span class="stri">"      direction using the four cursor keys."</span>);
    setPos(screen, 19, 1);
    color(screen, yellow);
    write(screen, <span class="stri">"     cursor up    "</span>);
    color(screen, white);
    writeln(screen, <span class="stri">"Increases the rocket thrust."</span>);
    writeln(screen);
    color(screen, yellow);
    write(screen, <span class="stri">"     cursor down  "</span>);
    color(screen, white);
    writeln(screen, <span class="stri">"Decreases rocket thrust."</span>);
    writeln(screen);
    color(screen, yellow);
    write(screen, <span class="stri">"     cursor right "</span>);
    color(screen, white);
    writeln(screen, <span class="stri">"Tilts the rocket to the right."</span>);
    writeln(screen);
    color(screen, yellow);
    write(screen, <span class="stri">"     cursor left  "</span>);
    color(screen, white);
    writeln(screen, <span class="stri">"Tilts the rocket to the left."</span>);
    writeln(screen);
    color(screen, black, light_green);
    setPos(screen, 27, 6);
    write(screen, <span class="stri">" Gravity = Vertical thrust of about 10. "</span>);
    color(screen, black, light_green);
    setPos(screen, 29, 5);
    write(screen, <span class="stri">" Advanced-Lander starts above 100 points. "</span>);
    color(screen, white, dark_blue);
    setPos(screen, 32, 9);
    write(screen, <span class="stri">" Press any key to start the game. "</span>);
    ch := getc(KEYBOARD);
    <span class="keywd">if</span> ch <span class="op">in</span> {KEY_ESC, <span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE} <span class="keywd">then</span>
      quit_program := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* welcome *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: turn_sound_on <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* turn_sound_on *)</span>
    sound(BLUE[musicindex].freq);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* turn_sound_on *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: play_soundstep <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">time</span>: start_time <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span> <span class="comment">(* play_soundstep *)</span>
    start_time := time(NOW);
<span class="comment">(*
    (* Play "Blue Danube Waltz" *)
    if soundstep = 0 then
      if musicindex &lt; 150 then
        incr(musicindex);
      else
        musicindex := 1;
      end if;
      if sound_on then
        sound(BLUE[musicindex].freq);
      end if;
      soundstep := BLUE[musicindex].leng - 1;
    else
      decr(soundstep);
    end if;
    delay(125);
    delay(175);
*)</span>
    await(start_time + 100000 . MICRO_SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* play_soundstep *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: pause_game (<span class="op">in</span> <span class="type">boolean</span>: blankWindow) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: exitPause <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">char</span>: cmd <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span> <span class="comment">(* pause_game *)</span>
    nosound;
    <span class="keywd">if</span> blankWindow <span class="keywd">then</span>
      bossMode(quit_program);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> quit_program <span class="keywd">then</span>
      color(screen, light_cyan, black);
      setPos(screen, 34, 60);
      write(screen, <span class="stri">"=== GAME PAUSED ==="</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">while</span> <span class="op">not</span> (exitPause <span class="op">or</span> quit_program) <span class="keywd">do</span>
      cmd := getc(KEYBOARD);
      <span class="keywd">if</span> cmd <span class="op">in</span> {<span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE} <span class="keywd">then</span>
        flying := FALSE;
        quit_program := TRUE;
      <span class="keywd">elsif</span> cmd = KEY_ESC <span class="keywd">then</span>
        bossMode(quit_program);
      <span class="keywd">else</span>
        exitPause := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> quit_program <span class="keywd">then</span>
      flying := FALSE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> quit_program <span class="keywd">then</span>
      setPos(screen, 34, 60);
      write(screen, <span class="stri">"                   "</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* pause_game *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: check_keyboard <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Check KEYBOARD for commands *)</span>
  <span class="keywd">begin</span> <span class="comment">(* check_keyboard *)</span>
    <span class="keywd">while</span> inputReady(KEYBOARD) <span class="keywd">do</span>
      <span class="keywd">case</span> getc(KEYBOARD) <span class="keywd">of</span>
        <span class="keywd">when</span> {KEY_UP}:
          incr(rocket.thrust);
          <span class="keywd">if</span> rocket.thrust > 19 <span class="keywd">then</span>
            rocket.thrust := 19;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_DOWN}:
          decr(rocket.thrust);
          <span class="keywd">if</span> rocket.thrust &lt; 0 <span class="keywd">then</span>
            rocket.thrust := 0;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_LEFT}:
          <span class="keywd">if</span> rocket.tilt &lt; MAX_TILT <span class="keywd">then</span>
            incr(rocket.tilt);
          <span class="keywd">else</span>
            rocket.tilt := NO_TILT;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {KEY_RIGHT}:
          <span class="keywd">if</span> rocket.tilt > NO_TILT <span class="keywd">then</span>
            decr(rocket.tilt);
          <span class="keywd">else</span>
            rocket.tilt := MAX_TILT;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'S'</span>, <span class="stri">'s'</span>}:
          sound_on := <span class="op">not</span> sound_on;
          <span class="keywd">if</span> sound_on <span class="keywd">then</span>
            turn_sound_on;
          <span class="keywd">else</span>
            nosound;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'P'</span>, <span class="stri">'p'</span>}:
          pause_game(FALSE);
        <span class="keywd">when</span> {KEY_ESC}:
          pause_game(TRUE);
        <span class="keywd">when</span> {<span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE}:
          nosound;
          flying := FALSE;
          quit_program := TRUE;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* check_keyboard *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: readHiScore <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: hiScoreFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    scoremax := 0;
    playerName := <span class="stri">""</span>;
    hiScoreFile := open(<span class="stri">"lander.scr"</span>, <span class="stri">"r"</span>);
    <span class="keywd">if</span> hiScoreFile &lt;> STD_NULL <span class="keywd">then</span>
      readln(hiScoreFile, scoremax);
      readln(hiScoreFile, playerName);
      close(hiScoreFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* readHiScore *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: writeHiScore <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: hiScoreFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    hiScoreFile := open(<span class="stri">"lander.scr"</span>, <span class="stri">"w"</span>);
    <span class="keywd">if</span> hiScoreFile &lt;> STD_NULL <span class="keywd">then</span>
      writeln(hiScoreFile, scoremax);
      writeln(hiScoreFile, playerName);
      close(hiScoreFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* writeHiScore *)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">lineCoordinates</span>: genLine (<span class="op">in</span> <span class="type">float</span>: xStart, <span class="op">in</span> <span class="type">float</span>: yStart,
    <span class="op">in</span> <span class="type">float</span>: xEnd, <span class="op">in</span> <span class="type">float</span>: yEnd) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">lineCoordinates</span>: line <span class="keywd">is</span> lineCoordinates.value;
  <span class="keywd">begin</span>
    line.xStart :=  xStart;
    line.yStart :=  yStart;
    line.xEnd :=  xEnd;
    line.yEnd :=  yEnd;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* genLine *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: addNoiseToLandscape (<span class="keywd">inout</span> <span class="type">array</span> <span class="type">point</span>: landscape) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* add noise to land contour. *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* addNoiseToLandscape *)</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> SIZE_LANDSCAPE <span class="keywd">do</span>
      landscape[number].y +:= round(sqrt(flt(landscape[number].y)) * rand(-0.5, 0.5));
      <span class="keywd">if</span>  landscape[number].x > leftOfLandingPad <span class="op">and</span>
          landscape[number].x &lt; leftOfLandingPad + 30 <span class="keywd">then</span>
        landscape[number].y := Y_MAXIMUM - 1; <span class="comment">(* landing field *)</span>
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> landscape[number].y > Y_MAXIMUM - 1 <span class="keywd">then</span>
        landscape[number].y := Y_MAXIMUM - 1;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* addNoiseToLandscape *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: load <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Init ship pictures.                                          *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* load *)</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> NO_TILT <span class="keywd">to</span> MAX_TILT <span class="keywd">do</span>
      COS_ANG[number] := cos(3.1415 * flt(15 * pred(number)) / 180.0);
      SIN_ANG[number] := sin(3.1415 * flt(15 * pred(number)) / 180.0);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    ship := 8 <span class="op">times</span> lineCoordinates.value;
    ship[1] := genLine( 3.0,  3.0,  0.0,  7.0);
    ship[2] := genLine( 0.0,  7.0, -3.0,  3.0);
    ship[3] := genLine(-3.0,  3.0,  3.0,  3.0);
    ship[4] := genLine( 3.0,  3.0,  3.0, -3.0);
    ship[5] := genLine( 3.0, -3.0, -3.0, -3.0);
    ship[6] := genLine(-3.0, -3.0, -3.0,  3.0);
    ship[7] := genLine(-3.0, -3.0, -5.0, -7.0);
    ship[8] := genLine( 3.0, -3.0,  5.0, -7.0);
    flames[2] := 1 <span class="op">times</span> lineCoordinates.value;
    flames[2][1] := genLine(0.0, -4.0,  0.0, -5.0);
    flames[3] := 1 <span class="op">times</span> lineCoordinates.value;
    flames[3][1] := genLine(0.0, -4.0,  0.0, -6.0);
    flames[4] := 3 <span class="op">times</span> lineCoordinates.value;
    flames[4][1] := genLine(0.0, -4.0,  0.0, -7.0);
    flames[4][2] := genLine(0.0, -4.0, -1.0, -5.0);
    flames[4][3] := genLine(0.0, -4.0,  1.0, -5.0);
    flames[5] := 3 <span class="op">times</span> lineCoordinates.value;
    flames[5][1] := genLine(0.0, -4.0,  0.0, -8.0);
    flames[5][2] := genLine(0.0, -4.0, -1.0, -6.0);
    flames[5][3] := genLine(0.0, -4.0,  1.0, -6.0);
    flames[6] := 3 <span class="op">times</span> lineCoordinates.value;
    flames[6][1] := genLine(0.0, -4.0,  0.0, -9.0);
    flames[6][2] := genLine(0.0, -4.0, -1.0, -7.0);
    flames[6][3] := genLine(0.0, -4.0,  1.0, -7.0);
    flames[7] := 3 <span class="op">times</span> lineCoordinates.value;
    flames[7][1] := genLine(0.0, -4.0,  0.0, -10.0);
    flames[7][2] := genLine(0.0, -4.0, -1.0, -8.0);
    flames[7][3] := genLine(0.0, -4.0,  1.0, -8.0);
    flames[8] := 3 <span class="op">times</span> lineCoordinates.value;
    flames[8][1] := genLine(0.0, -4.0,  0.0, -11.0);
    flames[8][2] := genLine(0.0, -4.0, -1.0, -9.0);
    flames[8][3] := genLine(0.0, -4.0,  1.0, -9.0);
    flames[9] := 3 <span class="op">times</span> lineCoordinates.value;
    flames[9][1] := genLine(0.0, -4.0,  0.0, -12.0);
    flames[9][2] := genLine(0.0, -4.0, -1.0, -10.0);
    flames[9][3] := genLine(0.0, -4.0,  1.0, -10.0);
    flames[10] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[10][1] := genLine(0.0, -4.0,  0.0, -12.0);
    flames[10][2] := genLine(0.0, -4.0, -1.0, -10.0);
    flames[10][3] := genLine(0.0, -4.0,  1.0, -10.0);
    flames[10][4] := genLine(0.0, -4.0, -1.0, -7.0);
    flames[10][5] := genLine(0.0, -4.0,  1.0, -7.0);
    flames[11] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[11][1] := genLine(0.0, -4.0,  0.0, -13.0);
    flames[11][2] := genLine(0.0, -4.0, -1.0, -11.0);
    flames[11][3] := genLine(0.0, -4.0,  1.0, -11.0);
    flames[11][4] := genLine(0.0, -4.0, -1.0, -8.0);
    flames[11][5] := genLine(0.0, -4.0,  1.0, -8.0);
    flames[12] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[12][1] := genLine(0.0, -4.0,  0.0, -14.0);
    flames[12][2] := genLine(0.0, -4.0, -1.0, -12.0);
    flames[12][3] := genLine(0.0, -4.0,  1.0, -12.0);
    flames[12][4] := genLine(0.0, -4.0, -1.0, -9.0);
    flames[12][5] := genLine(0.0, -4.0,  1.0, -9.0);
    flames[13] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[13][1] := genLine(0.0, -4.0,  0.0, -15.0);
    flames[13][2] := genLine(0.0, -4.0, -1.0, -10.0);
    flames[13][3] := genLine(0.0, -4.0,  1.0, -10.0);
    flames[13][4] := genLine(0.0, -4.0, -1.0, -13.0);
    flames[13][5] := genLine(0.0, -4.0,  1.0, -13.0);
    flames[14] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[14][1] := genLine(0.0, -4.0,  0.0, -16.0);
    flames[14][2] := genLine(0.0, -4.0, -1.0, -14.0);
    flames[14][3] := genLine(0.0, -4.0,  1.0, -14.0);
    flames[14][4] := genLine(0.0, -4.0, -2.0, -11.0);
    flames[14][5] := genLine(0.0, -4.0,  2.0, -11.0);
    flames[15] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[15][1] := genLine(0.0, -4.0,  0.0, -17.0);
    flames[15][2] := genLine(0.0, -4.0, -1.0, -15.0);
    flames[15][3] := genLine(0.0, -4.0,  1.0, -15.0);
    flames[15][4] := genLine(0.0, -4.0, -2.0, -12.0);
    flames[15][5] := genLine(0.0, -4.0,  2.0, -12.0);
    flames[16] := 5 <span class="op">times</span> lineCoordinates.value;
    flames[16][1] := genLine(0.0, -4.0,  0.0, -18.0);
    flames[16][2] := genLine(0.0, -4.0, -1.0, -16.0);
    flames[16][3] := genLine(0.0, -4.0,  1.0, -16.0);
    flames[16][4] := genLine(0.0, -4.0, -2.0, -13.0);
    flames[16][5] := genLine(0.0, -4.0,  2.0, -13.0);
    flames[17] := 7 <span class="op">times</span> lineCoordinates.value;
    flames[17][1] := genLine(0.0, -4.0,  0.0, -19.0);
    flames[17][2] := genLine(0.0, -4.0, -1.0, -17.0);
    flames[17][3] := genLine(0.0, -4.0,  1.0, -17.0);
    flames[17][4] := genLine(0.0, -4.0, -2.0, -14.0);
    flames[17][5] := genLine(0.0, -4.0,  2.0, -14.0);
    flames[17][6] := genLine(0.0, -4.0, -3.0, -10.0);
    flames[17][7] := genLine(0.0, -4.0,  3.0, -10.0);
    flames[18] := 7 <span class="op">times</span> lineCoordinates.value;
    flames[18][1] := genLine(0.0, -4.0,  0.0, -20.0);
    flames[18][2] := genLine(0.0, -4.0, -1.0, -18.0);
    flames[18][3] := genLine(0.0, -4.0,  1.0, -18.0);
    flames[18][4] := genLine(0.0, -4.0, -2.0, -15.0);
    flames[18][5] := genLine(0.0, -4.0,  2.0, -15.0);
    flames[18][6] := genLine(0.0, -4.0, -3.0, -11.0);
    flames[18][7] := genLine(0.0, -4.0,  3.0, -11.0);
    flames[19] := 7 <span class="op">times</span> lineCoordinates.value;
    flames[19][1] := genLine(0.0, -4.0,  0.0, -21.0);
    flames[19][2] := genLine(0.0, -4.0, -1.0, -19.0);
    flames[19][3] := genLine(0.0, -4.0,  1.0, -19.0);
    flames[19][4] := genLine(0.0, -4.0, -2.0, -16.0);
    flames[19][5] := genLine(0.0, -4.0,  2.0, -16.0);
    flames[19][6] := genLine(0.0, -4.0, -3.0, -12.0);
    flames[19][7] := genLine(0.0, -4.0,  3.0, -12.0);
    flames[20] := 7 <span class="op">times</span> lineCoordinates.value;
    flames[20][1] := genLine(0.0, -4.0,  0.0, -22.0);
    flames[20][2] := genLine(0.0, -4.0, -1.0, -20.0);
    flames[20][3] := genLine(0.0, -4.0,  1.0, -20.0);
    flames[20][4] := genLine(0.0, -4.0, -2.0, -17.0);
    flames[20][5] := genLine(0.0, -4.0,  2.0, -17.0);
    flames[20][6] := genLine(0.0, -4.0, -3.0, -13.0);
    flames[20][7] := genLine(0.0, -4.0,  3.0, -13.0);
    readHiScore;
    leftOfLandingPad := 224;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> SIZE_LANDSCAPE <span class="keywd">do</span>
      landscape[number].x := (number * X_MAXIMUM) <span class="op">div</span> SIZE_LANDSCAPE;
      advanced_landscape[number].x := landscape[number].x;
      advanced_landscape[number].y := Y_MAXIMUM - 199 + round(194.0 *
          abs(cos(3.1415 * flt(advanced_landscape[number].x - leftOfLandingPad - 15) / 400.0)));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    addNoiseToLandscape(advanced_landscape);
    advancedLander := FALSE;
    score := 0;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* load *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: calculate_height <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    rocket.height := 999999;
    <span class="keywd">for</span> number <span class="keywd">range</span> round((rocket.x_pos - SHIP_DIAMETER) / flt(LANDSCAPE_X_UNIT)) + 1 <span class="keywd">to</span>
        round((rocket.x_pos + SHIP_DIAMETER) / flt(LANDSCAPE_X_UNIT)) - 1 <span class="keywd">do</span>
      <span class="keywd">if</span> landscape[number].y - round(rocket.y_pos) - SHIP_Y_MIN &lt; rocket.height <span class="keywd">then</span>
        rocket.height := landscape[number].y - round(rocket.y_pos) - SHIP_Y_MIN;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* calculate_height *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: init_display <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setPos(panel, 1, 2);
    write(panel, <span class="stri">"HEIGHT="</span>);
    setPos(panel, 1, 9);
    write(panel, rocket.height <span class="op">lpad</span> 3);
    rect(12 + 0, GAUGE_Y_POS,  6, 13, dark_red);    <span class="comment">(* Height Gauge *)</span>
    rect(12 + 6, GAUGE_Y_POS, 35, 13, dark_green);
    height_gauge := rocket.height <span class="op">div</span> 5;
    line(12 + height_gauge, GAUGE_Y_POS, 0, 12, light_cyan);

    setPos(panel, 1, 15);
    write(panel, <span class="stri">"FALL="</span>);
    setPos(panel, 1, 20);
    write(panel, round(-rocket.y_speed) <span class="op">lpad</span> 4);
    rect(90 +  0, GAUGE_Y_POS,  5, 13, dark_red);   <span class="comment">(* Fall Gauge *)</span>
    rect(90 +  5, GAUGE_Y_POS,  6, 13, dark_green);
    rect(90 + 11, GAUGE_Y_POS, 30, 13, dark_red);
    fall_gauge := 10;
    line(90 + fall_gauge, GAUGE_Y_POS, 0, 12, light_cyan);

    setPos(panel, 1, 28);
    write(panel, <span class="stri">"THRUST="</span>);
    setPos(panel, 1, 35);
    write(panel, rocket.thrust <span class="op">lpad</span> 2);
    rect(168 +  0, GAUGE_Y_POS, 15, 13, dark_red);  <span class="comment">(* Power Gauge *)</span>
    rect(168 + 15, GAUGE_Y_POS, 11, 13, dark_green);
    rect(168 + 26, GAUGE_Y_POS, 15, 13, dark_red);
    power_gauge := 40 * rocket.thrust <span class="op">div</span> 19;
    line(168 + power_gauge, GAUGE_Y_POS, 0, 12, light_cyan);

    setPos(panel, 1, 41);
    write(panel, <span class="stri">"FUEL="</span>);
    setPos(panel, 1, 46);
    write(panel, rocket.fuel <span class="op">lpad</span> 4);
    rect(246 + 0, GAUGE_Y_POS,  6, 13, dark_red);   <span class="comment">(* Fuel Gauge *)</span>
    rect(246 + 6, GAUGE_Y_POS, 35, 13, dark_green);
    fuel_gauge := 40 * rocket.fuel <span class="op">div</span> fuel_max;
    line(246 + fuel_gauge, GAUGE_Y_POS, 0, 12, light_cyan);

    setPos(screen, 34, 92);
    write(screen, <span class="stri">" SCORE="</span>);
    setPos(screen, 34, 100);
    write(screen, score <span class="op">lpad</span> 4);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: drawLandscape <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: pointxy <span class="keywd">is</span> 0 <span class="op">times</span> 0;
    <span class="keywd">var</span> <span class="type">pointList</span>: points <span class="keywd">is</span> pointList.value;
  <span class="keywd">begin</span> <span class="comment">(* drawLandscape *)</span>
    pointxy &amp;:= [] (X_MINIMUM,      Y_MAXIMUM);
    pointxy &amp;:= [] (X_MINIMUM,      landscape[1].y);
    pointxy &amp;:= [] (landscape[1].x, landscape[1].y);
    <span class="keywd">for</span> number <span class="keywd">range</span> 2 <span class="keywd">to</span> SIZE_LANDSCAPE <span class="keywd">do</span>
      pointxy &amp;:= [] (landscape[number].x, landscape[number].y);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    pointxy &amp;:= [] (X_MAXIMUM,      Y_MAXIMUM);
    pointxy &amp;:= [] (X_MINIMUM,      Y_MAXIMUM);
    points := genPointList(pointxy);
    fpolyLine(0, 0, points, dark_green);
    polyLine(0, 0, points, brown);
    <span class="keywd">for</span> number <span class="keywd">range</span> 2 <span class="keywd">to</span> SIZE_LANDSCAPE <span class="keywd">do</span>
      <span class="keywd">if</span>  landscape[number].x > leftOfLandingPad <span class="op">and</span>
          landscape[number].x &lt; leftOfLandingPad + 30 <span class="keywd">then</span>
        landscape[number].y := Y_MAXIMUM - 6; <span class="comment">(* landing field *)</span>
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    rect(leftOfLandingPad + 5, Y_MAXIMUM - PODEST_HEIGHT, 21, PODEST_HEIGHT, dark_cyan);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* drawLandscape *)</span>


<span class="comment"># const proc: setupAdvancedLander is forward;</span>


<span class="keywd">const</span> <span class="type">proc</span>: setup <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* setup *)</span>
    flying := TRUE;
    rocket.x_pos := X_START_POSITION;
    rocket.y_pos := Y_START_POSITION;
    rocket.old_x_pos := rocket.x_pos;
    rocket.old_y_pos := rocket.y_pos;
    rocket.x_speed := 30.0;
    rocket.y_speed := 0.0;
    rocket.tilt := NO_TILT;
    rocket.old_tilt := rocket.tilt;
    rocket.thrust := 10;
    rocket.old_thrust := rocket.thrust;
    rocket.fuel := 4000 * (1 - score <span class="op">div</span> 1000);
    <span class="keywd">if</span> rocket.fuel &lt; 1500 <span class="keywd">then</span>
      rocket.fuel := 1500;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    rocket.height := 200;
    fuel_max := rocket.fuel;
    gravity := 10.0 + flt(score) / 100.0;
    <span class="keywd">if</span> gravity > 15.0 <span class="keywd">then</span>
      gravity := 15.0;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    musicindex := 0;
    soundstep := 0;
    clear(black);
    color(screen, light_cyan, black);
    init_display;

    <span class="comment">(* lander picture *)</span>
    leftOfLandingPad := rand(30, X_MAXIMUM - 30);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> SIZE_LANDSCAPE <span class="keywd">do</span>
      landscape[number].y := Y_MAXIMUM - 159 + round(flt(154) *
          abs(cos(3.1415 * (1.0 + flt(score) / 600.0) *
          flt(landscape[number].x - leftOfLandingPad - 15) / 400.0)));
    <span class="keywd">end</span> <span class="keywd">for</span>;
    addNoiseToLandscape(landscape);
    drawLandscape;
    <span class="keywd">if</span> score > ADLAND <span class="keywd">then</span>
      <span class="comment">(* Window for Advan.Lndr. *)</span>
      <span class="keywd">for</span> number <span class="keywd">range</span> 0 <span class="keywd">to</span> 6 <span class="keywd">do</span>
        point(leftOfLandingPad + number * 5, Y_MAXIMUM - 19, yellow);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    advancedLander := FALSE;
<span class="comment">(*  doBeep; *)</span>
    <span class="comment"># setupAdvancedLander;</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* setup *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: drawLine (<span class="op">in</span> <span class="type">lineCoordinates</span>: line, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    lineTo(round(rocket.old_x_pos) + round(line.xStart * COS_ANG[rocket.old_tilt] -
                                           line.yStart * SIN_ANG[rocket.old_tilt]),
           round(rocket.old_y_pos) - round(line.xStart * SIN_ANG[rocket.old_tilt] +
                                           line.yStart * COS_ANG[rocket.old_tilt]),
           round(rocket.old_x_pos) + round(line.xEnd   * COS_ANG[rocket.old_tilt] -
                                           line.yEnd   * SIN_ANG[rocket.old_tilt]),
           round(rocket.old_y_pos) - round(line.xEnd   * SIN_ANG[rocket.old_tilt] +
                                           line.yEnd   * COS_ANG[rocket.old_tilt]),
           col);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: ship_picture <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Get New ship picture *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* ship_picture *)</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(ship) <span class="keywd">do</span>
      drawLine(ship[number], black);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(flames[succ(rocket.old_thrust)]) <span class="keywd">do</span>
      drawLine(flames[succ(rocket.old_thrust)][number], black);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    rocket.old_x_pos := rocket.x_pos;
    rocket.old_y_pos := rocket.y_pos;
    rocket.old_tilt := rocket.tilt;
    rocket.old_thrust := rocket.thrust;
    rect(leftOfLandingPad + 5, Y_MAXIMUM - PODEST_HEIGHT, 21, PODEST_HEIGHT, dark_cyan);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(ship) <span class="keywd">do</span>
      drawLine(ship[number], light_cyan);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(flames[succ(rocket.old_thrust)]) <span class="keywd">do</span>
      drawLine(flames[succ(rocket.old_thrust)][number], light_red);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    flushGraphic;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* ship_picture *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: display_gauges <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: new_height_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: new_fuel_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: new_fall_value <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: new_power_value <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* display_gauges *)</span>
    setPos(panel, 1, 9);
    write(panel, rocket.height <span class="op">lpad</span> 3);
    new_height_value := rocket.height <span class="op">div</span> 5;
    <span class="keywd">if</span> new_height_value > 40 <span class="keywd">then</span>
      new_height_value := 40;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> new_height_value &lt;> height_gauge <span class="keywd">then</span>
      line(12 + new_height_value, GAUGE_Y_POS, 0, 12, light_cyan);
      <span class="keywd">if</span> height_gauge >= 0 <span class="op">and</span> height_gauge &lt;= 6 <span class="keywd">then</span>
        line(12 + height_gauge, GAUGE_Y_POS, 0, 12, dark_red);
      <span class="keywd">else</span>
        line(12 + height_gauge, GAUGE_Y_POS, 0, 12, dark_green);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      height_gauge := new_height_value;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setPos(panel, 1, 20);
    write(panel, trunc(rocket.y_speed) <span class="op">lpad</span> 4);
    new_fall_value := 5 + trunc(rocket.y_speed / (2.8 + flt(ord(score > ADLAND))));
    <span class="keywd">if</span> new_fall_value &lt; 0 <span class="keywd">then</span>
      new_fall_value := 0;
    <span class="keywd">else</span>
      <span class="keywd">if</span> new_fall_value > 40 <span class="keywd">then</span>
        new_fall_value := 40;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> new_fall_value &lt;> fall_gauge <span class="keywd">then</span>
      line(90 + new_fall_value, GAUGE_Y_POS, 0, 12, light_cyan);
      <span class="keywd">if</span> fall_gauge >= 5 <span class="op">and</span> fall_gauge &lt;= 10 <span class="keywd">then</span>
        line(90 + fall_gauge, GAUGE_Y_POS, 0, 12, dark_green);
      <span class="keywd">else</span>
        line(90 + fall_gauge, GAUGE_Y_POS, 0, 12, dark_red);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      fall_gauge := new_fall_value;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setPos(panel, 1, 35);
    write(panel, rocket.thrust <span class="op">lpad</span> 2);
    new_power_value := 40 * rocket.thrust <span class="op">div</span> 19;
    <span class="keywd">if</span> new_power_value &lt;> power_gauge <span class="keywd">then</span>
      line(168 + new_power_value, GAUGE_Y_POS, 0, 12, light_cyan);
      <span class="keywd">if</span> power_gauge >= 15 <span class="op">and</span> power_gauge &lt;= 25 <span class="keywd">then</span>
        line(168 + power_gauge, GAUGE_Y_POS, 0, 12, dark_green);
      <span class="keywd">else</span>
        line(168 + power_gauge, GAUGE_Y_POS, 0, 12, dark_red);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      power_gauge := new_power_value;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setPos(panel, 1, 46);
    write(panel, rocket.fuel <span class="op">lpad</span> 4);
    new_fuel_value := 40 * rocket.fuel <span class="op">div</span> fuel_max;
    <span class="keywd">if</span> new_fuel_value &lt;> fuel_gauge <span class="keywd">then</span>
      line(246 + new_fuel_value, GAUGE_Y_POS, 0, 12, light_cyan);
      <span class="keywd">if</span> fuel_gauge >= 0 <span class="op">and</span> fuel_gauge &lt;= 6 <span class="keywd">then</span>
        line(246 + fuel_gauge, GAUGE_Y_POS, 0, 12, dark_red);
      <span class="keywd">else</span>
        line(246 + fuel_gauge, GAUGE_Y_POS, 0, 12, dark_green);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      fuel_gauge := new_fuel_value;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* display_gauges *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: display_ship <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Display moving Ship and Gauges *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: counter <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* display_ship *)</span>
    ship_picture;
    <span class="comment">(* if rocket.fuel &lt;> 0 then *)</span>
      <span class="keywd">for</span> counter <span class="keywd">range</span> 1 <span class="keywd">to</span> 4 <span class="keywd">do</span>
        play_soundstep;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="comment">(* end if; *)</span>
    <span class="comment">(*delay(100);*)</span>
    <span class="comment">(* Display picture. *)</span>
    display_gauges;
<span class="comment">(*
    setPos(panel, 1, 53);
    write(panel, rocket.x_pos - flt(leftOfLandingPad) digits 0 lpad 4);
*)</span>
<span class="comment">(*  if rocket.fuel = 0 then
      nosound;
      doBeep;
    end if; *)</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* display_ship *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: drawLogo <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Draw the logo on the Building *)</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">array</span> <span class="type">integer</span>: logo <span class="keywd">is</span> [] (
        <span class="comment">(* x1, y1, delta-x, x2, y2, delta-x2, ...  (delta-y is always 1) *)</span>
        0, 5, 4, 0, 4, 1, 0, 3, 4, 3, 2, 1, 0, 1, 4,
        5, 5, 4, 5, 4, 1, 5, 3, 3, 5, 2, 1, 5, 1, 4,
        10, 5, 4, 10, 4, 1, 10, 3, 3, 10, 2, 1, 10, 1, 4,
        15, 5, 3, 15, 4, 1, 18, 4, 1, 15, 3, 1, 18, 3, 1, 15, 2, 1, 18, 2, 1, 15, 1, 3,
        20, 5, 4, 23, 4, 1, 22, 3, 1, 22, 2, 1, 21, 1, 1);
    <span class="keywd">const</span> <span class="type">integer</span>: scaleFactor <span class="keywd">is</span> 3;
    <span class="keywd">var</span> <span class="type">integer</span>: x_pos <span class="keywd">is</span> 22;
    <span class="keywd">var</span> <span class="type">integer</span>: y_pos <span class="keywd">is</span> Y_MAXIMUM - 79;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(logo) - 2 step 3 <span class="keywd">do</span>
      rect(x_pos + scaleFactor * logo[number], y_pos - scaleFactor * logo[succ(number)],
          scaleFactor * logo[number + 2], scaleFactor, dark_red);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* drawLogo *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: setupAdvancedLander <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Advanced-Lander Landing Field *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: level <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* setupAdvancedLander *)</span>
    clear(black);
<span class="comment">(*  doBeep; *)</span>
    setPos(screen, 1, 1);
    writeln(screen, <span class="stri">"ADVANCED LANDER"</span>);
    setPos(screen, 2, 1);
    writeln(screen, <span class="stri">"Landing fall rate"</span>);
    setPos(screen, 3, 1);
    write(screen, <span class="stri">"less or equal "</span>);
    color(screen, yellow);
    writeln(screen, <span class="stri">"5"</span>);
    color(screen, light_cyan);
    leftOfLandingPad := 224;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> SIZE_LANDSCAPE <span class="keywd">do</span>
      landscape[number].y := advanced_landscape[number].y;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    drawLandscape;
    rect(8, Y_MAXIMUM - 77, 101, 78, brown);
    rect(20, Y_MAXIMUM - 96, 76, 19, light_gray);
    <span class="keywd">for</span> level <span class="keywd">range</span> 0 <span class="keywd">to</span> 3 <span class="keywd">do</span>
      <span class="keywd">for</span> number <span class="keywd">range</span> 0 <span class="keywd">to</span> 6 <span class="keywd">do</span>
        rect(11 + 14 * number, Y_MAXIMUM - 71 + 18 * level, 11, 11, black);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    rect(53, Y_MAXIMUM - 17, 11, 18, dark_gray);
    rect(109, Y_MAXIMUM - 49, 21, 50, dark_green);
    box(109, Y_MAXIMUM - 49, 21, 50, dark_gray);
    <span class="keywd">for</span> number <span class="keywd">range</span> 0 <span class="keywd">to</span> 3 <span class="keywd">do</span>
      rect(113, Y_MAXIMUM - 44 + 9 * number, 13, 5, brown);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    rect(130, Y_MAXIMUM - 21, 52, 22, brown);
    <span class="keywd">for</span> number <span class="keywd">range</span> 0 <span class="keywd">to</span> 4 <span class="keywd">do</span>
      rect(134 + 9 * number, Y_MAXIMUM - 18, 8, 12, black);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    drawLogo;
    rocket.x_pos := 90.0;
    rocket.y_pos := flt(Y_MAXIMUM - 169);
    rocket.old_x_pos := rocket.x_pos;
    rocket.old_y_pos := rocket.y_pos;
    rocket.fuel := rocket.fuel + 1000;
    fuel_max := rocket.fuel;
    rocket.thrust := 11;
    rocket.old_thrust := rocket.thrust;
    rocket.tilt := NO_TILT;
    rocket.old_tilt := rocket.tilt;
    rocket.y_speed := 13.0;
    advancedLander := TRUE;
    init_display;
<span class="comment">(*  doBeep; *)</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* setupAdvancedLander *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: prepare_message <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* prepare_message *)</span>
    rect(10, 40, 250, 170, black);
    box(10, 40, 250, 170, white);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* prepare_message *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: too_high <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* too_high *)</span>
    display_ship;
    prepare_message;
    setPos(screen, 7, 5);
    write(screen, <span class="stri">"THE GOAL IS TO LAND AND NOT TO START"</span>);
    setPos(screen, 11, 11);
    writeln(screen, <span class="stri">"YOU NEED MORE PRACTISE !!"</span>);
    flying := FALSE;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* too_high *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: outside_operating_area <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* outside_operating_area *)</span>
    display_ship;
    prepare_message;
    setPos(screen, 7, 6);
    write(screen, <span class="stri">"THE ROCKET LEFT THE OPERATING AREA"</span>);
    setPos(screen, 11, 11);
    writeln(screen, <span class="stri">"YOU NEED MORE PRACTISE !!"</span>);
    flying := FALSE;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* outside_operating_area *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: revise_control <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Revise CONTROL parameters *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: J <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: frequency <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* revise_control *)</span>
    rocket.y_speed +:= gravity - flt(rocket.thrust) * COS_ANG[rocket.tilt];
    rocket.x_speed := 0.9 * rocket.x_speed - flt(rocket.thrust) * SIN_ANG[rocket.tilt];
    <span class="comment">(* rocket.x_speed has air drag. *)</span>
<span class="comment">(*  if rocket.y_speed &lt; -10 then
      rocket.y_speed := -10;
    end if; *)</span>
    rocket.x_pos +:= rocket.x_speed * 0.05;
    rocket.y_pos +:= rocket.y_speed * 0.05;
    <span class="keywd">if</span> rocket.y_pos &lt; 0.0 <span class="keywd">then</span>
      rocket.y_pos := 0.0;
      too_high;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> rocket.y_pos > flt(Y_MAXIMUM) <span class="keywd">then</span>
      rocket.y_pos := flt(Y_MAXIMUM);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> rocket.x_pos - SHIP_DIAMETER &lt; flt(X_MINIMUM) <span class="keywd">then</span>
      rocket.x_pos := flt(X_MINIMUM) + SHIP_DIAMETER;
      outside_operating_area;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> rocket.x_pos + SHIP_DIAMETER > flt(X_MAXIMUM) <span class="keywd">then</span>
      rocket.x_pos := flt(X_MAXIMUM) - SHIP_DIAMETER;
      outside_operating_area;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> flying <span class="keywd">then</span>
      <span class="keywd">if</span> rocket.fuel = 0 <span class="keywd">then</span>
        rocket.thrust := 0;
      <span class="keywd">else</span>
        <span class="keywd">if</span> rocket.fuel &lt; rocket.thrust <span class="keywd">then</span>
          rocket.thrust := rocket.fuel;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        rocket.fuel -:= rocket.thrust;
        <span class="keywd">if</span> rocket.fuel = 0 <span class="keywd">then</span>
          setPos(screen, 3, 9);
          write(screen, <span class="stri">"OUT OF FUEL"</span>);
          <span class="comment">(* alarm *)</span>
          <span class="keywd">for</span> J <span class="keywd">range</span> 1 <span class="keywd">to</span> 5 <span class="keywd">do</span>
            frequency := 1000;
            <span class="keywd">while</span> frequency &lt;= 2000 <span class="keywd">do</span>
              sound(frequency);
              delay(10);
              frequency +:= 20;
            <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          nosound;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* revise_control *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: anounceAdvancedLander <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span> <span class="comment">(* anounceAdvancedLander *)</span>
    color(screen, black, dark_green);
    clear(black);
    setPos(screen, 5, 9);
    write(screen, <span class="stri">"YOUR SCORE IS NOW : "</span>);
    writeln(screen, score);
    color(screen, light_gray, dark_green);
    setPos(screen, 7, 5);
    writeln(screen, <span class="stri">"YOU WILL NOW BE IN ADVANCED LANDER ! !"</span>);
    setPos(screen, 12, 1);
    color(screen, black);
    writeln(screen, <span class="stri">"If your maneuver the lander through the"</span>);
    writeln(screen, <span class="stri">"yellow dots above the landing field with"</span>);
    write(screen, <span class="stri">"a fall rate less or equal "</span>);
    color(screen, yellow);
    write(screen, <span class="stri">"10"</span>);
    color(screen, black);
    writeln(screen, <span class="stri">", you will end"</span>);
    writeln(screen, <span class="stri">"the landing in advanced-lander. The land"</span>);
    writeln(screen, <span class="stri">"will be enlarged to allow you to make a"</span>);
    writeln(screen, <span class="stri">"precision landing. Your final fall rate"</span>);
    write(screen, <span class="stri">"must be less or equal "</span>);
    color(screen, yellow);
    writeln(screen, <span class="stri">"5"</span>);
    color(screen, black);
    writeln(screen, <span class="stri">"for the landing to be ok."</span>);
    setPos(screen, 24, 7);
    color(screen, light_gray);
    write(screen, <span class="stri">"PRESS ANY KEY TO CONTINUE."</span>);
    <span class="keywd">repeat</span>
      ch := getc(KEYBOARD);
      <span class="keywd">case</span> ch <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'P'</span>, <span class="stri">'p'</span>}:
          pause_game(FALSE);
        <span class="keywd">when</span> {KEY_ESC}:
          pause_game(TRUE);
        <span class="keywd">when</span> {<span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE}:
          quit_program := TRUE;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">until</span> ch <span class="op">not</span> <span class="op">in</span> {<span class="stri">'P'</span>, <span class="stri">'p'</span>, KEY_ESC} <span class="op">or</span> quit_program;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* anounceAdvancedLander *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: end_of_flight <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span> <span class="comment">(* end_of_flight *)</span>
    <span class="keywd">repeat</span>
      <span class="keywd">while</span> inputReady(KEYBOARD) <span class="keywd">do</span>
        ignore(getc(KEYBOARD));
      <span class="keywd">end</span> <span class="keywd">while</span>;
      setPos(screen, 14, 4);
      write(screen, <span class="stri">"SOUND IS "</span>);
      <span class="keywd">if</span> sound_on <span class="keywd">then</span>
        writeln(screen, <span class="stri">"ON, PRESS S TO TURN SOUND OFF"</span>);
      <span class="keywd">else</span>
        writeln(screen, <span class="stri">"OFF, PRESS S TO TURN SOUND ON"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      setPos(screen, 15, 4);
      writeln(screen, <span class="stri">"PRESS Q TO QUIT OR ENTER TO CONTINUE"</span>);
      ch := getc(KEYBOARD);
      <span class="keywd">case</span> ch <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'P'</span>, <span class="stri">'p'</span>}:
          pause_game(FALSE);
        <span class="keywd">when</span> {KEY_ESC}:
          pause_game(TRUE);
        <span class="keywd">when</span> {<span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE}:
          quit_program := TRUE;
        <span class="keywd">when</span> {<span class="stri">'S'</span>, <span class="stri">'s'</span>}:
          sound_on := <span class="op">not</span> sound_on;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">until</span> ch = KEY_NL <span class="op">or</span> quit_program;
    <span class="keywd">if</span> <span class="op">not</span> quit_program <span class="op">and</span> score >= ADLAND <span class="op">and</span> <span class="op">not</span> advancedLander <span class="keywd">then</span>
      anounceAdvancedLander;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* end_of_flight *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: play_stars_and_stripes (<span class="op">in</span> <span class="type">integer</span>: from_index, <span class="op">in</span> <span class="type">integer</span>: to_index) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Play "Stars and Stripes" *)</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* play_stars_and_stripes *)</span>
    <span class="keywd">if</span> sound_on <span class="keywd">then</span>
      nosound;
      <span class="keywd">for</span> number <span class="keywd">range</span> from_index <span class="keywd">to</span> to_index <span class="keywd">do</span>
        sound(STAR[number].freq);
        delay(STAR[number].leng * 100);
        <span class="keywd">if</span> STAR[number].freq &lt;> 0 <span class="op">and</span> STAR[number].leng &lt;> 1 <span class="keywd">then</span>
          nosound;
          delay(50);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* play_stars_and_stripes *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: crash_sound <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: frequency <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* crash_sound *)</span>
    nosound;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 3 <span class="keywd">do</span>
      frequency := 1000;
      <span class="keywd">while</span> frequency &lt;= 2000 <span class="keywd">do</span>
        sound(frequency);
        delay(10);
        frequency +:= 20;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    nosound;
<span class="comment">(*! score := trunc(flt(score) * 0.7); *)</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* crash_sound *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: explosion <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* explosion *)</span>
    xPos := round(rocket.x_pos);
    yPos := round(rocket.y_pos);
    yPos := yPos + ord(yPos > 189) * 5;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(explosion_data) <span class="keywd">do</span>
      lineTo(xPos - explosion_data[number][1], yPos - explosion_data[number][2],
           xPos + explosion_data[number][1], yPos + explosion_data[number][2] <span class="op">div</span> 2, light_red);
      lineTo(xPos + explosion_data[number][1], yPos - explosion_data[number][2],
           xPos - explosion_data[number][1], yPos + explosion_data[number][2] <span class="op">div</span> 2, light_red);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    flushGraphic;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* explosion *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: crash_landing <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* crash_landing *)</span>
    rocket.thrust := 0;
    ship_picture; <span class="comment">(* Show ship with no rocket blast. *)</span>
    explosion;
    display_gauges;
    crash_sound;
    prepare_message;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 5 <span class="keywd">do</span>
      setPos(screen, 4 + number, 8);
      write(screen, <span class="stri">"CRASH !!!  CRASH !!!  CRASH !!!"</span>);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    setPos(screen, 11, 11);
    writeln(screen, <span class="stri">"YOU NEED MORE PRACTISE !!"</span>);
    flying := FALSE;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* crash_landing *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: good_landing <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: additionalScore <span class="keywd">is</span> 0;
  <span class="keywd">begin</span> <span class="comment">(* good_landing *)</span>
    rocket.thrust := 0;
    display_ship; <span class="comment">(* Show ship with no rocket blast. *)</span>
    play_stars_and_stripes(1, 30);
    prepare_message;
    play_stars_and_stripes(31, 50);
    <span class="keywd">if</span> round(rocket.y_speed) &lt;= 5 <span class="keywd">then</span>
      setPos(screen, 5, 13);
      write(screen, <span class="stri">"PERFECT"</span>);
    <span class="keywd">elsif</span> round(rocket.y_speed) &lt;= 7 <span class="keywd">then</span>
      setPos(screen, 5, 12);
      write(screen, <span class="stri">"EXCELLENT"</span>);
    <span class="keywd">elsif</span> round(rocket.y_speed) &lt;= 10 <span class="keywd">then</span>
      setPos(screen, 5, 12);
      write(screen, <span class="stri">"VERY GOOD"</span>);
    <span class="keywd">else</span>
      setPos(screen, 5, 14);
      write(screen, <span class="stri">"GOOD"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    writeln(screen, <span class="stri">"  LANDING !!"</span>);
    setPos(screen, 7, 4);
    additionalScore := rocket.fuel <span class="op">div</span> 30;
    <span class="keywd">if</span> additionalScore > 0 <span class="keywd">then</span>
      score +:= additionalScore;
      writeln(screen, <span class="stri">"YOUR EXTRA FUEL MAKES YOUR SCORE = "</span> &amp; str(score));
    <span class="keywd">else</span>
      writeln(screen, <span class="stri">"YOUR SCORE IS NOW "</span> &amp; str(score));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setPos(screen, 34, 100);
    write(screen, score <span class="op">lpad</span> 4);
    play_stars_and_stripes(51, 82);
    <span class="keywd">if</span> score > scoremax <span class="keywd">then</span>
      scoremax := score;
      setPos(screen, 9, 4);
      writeln(screen, <span class="stri">"THIS IS THE HIGHEST SCORE UP TO NOW !!"</span>);
      setPos(screen, 10, 7);
      writeln(screen, <span class="stri">"TYPE IN YOUR NAME FOR POSTERITY"</span>);
      setPos(screen, 12, 18);
      nosound;
      playerName := getln(IN);
      writeHiScore;
    <span class="keywd">else</span>
      setPos(screen, 10, 4);
      writeln(screen, <span class="stri">"  (MAX. SCORE TO DATE IS "</span> &amp;
          str(scoremax) &amp; <span class="stri">" BY "</span> &amp; playerName &amp; <span class="stri">")"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    rocket.thrust := 0;
    display_ship; <span class="comment">(* Show ship with no rocket blast. *)</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* good_landing *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: fast_landing <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* fast_landing *)</span>
    rocket.thrust := 0;
    display_ship; <span class="comment">(* Show ship with no rocket blast. *)</span>
    crash_sound;
    prepare_message;
    setPos(screen, 7, 4);
    write(screen, <span class="stri">"ALMOST A GOOD LANDING BUT MUCH TOO FAST"</span>);
    setPos(screen, 9, 4);
    write(screen, <span class="stri">"YOUR FALL RATE MUST BE LESS OR EQUAL "</span>);
    <span class="keywd">if</span> advancedLander <span class="keywd">then</span>
      write(screen, 5);
    <span class="keywd">else</span>
      write(screen, 15);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    setPos(screen, 11, 11);
    writeln(screen, <span class="stri">"YOU NEED MORE PRACTISE !!"</span>);
    rocket.thrust := 0;
    display_ship; <span class="comment">(* Show ship with no rocket blast. *)</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* fast_landing *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: tilt_landing <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* tilt_landing *)</span>
    rocket.thrust := 0;
    display_ship; <span class="comment">(* Show ship with no rocket blast. *)</span>
    crash_sound;
    prepare_message;
    setPos(screen, 7, 4);
    write(screen, <span class="stri">"GOOD LANDING, BUT PLEASE LAND ON 2 FEET!"</span>);
    setPos(screen, 11, 11);
    writeln(screen, <span class="stri">"YOU NEED MORE PRACTISE !!"</span>);
    rocket.thrust := 0;
    display_ship; <span class="comment">(* Show ship with no rocket blast. *)</span>
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* tilt_landing *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: ground_contact <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* ground_contact *)</span>
    <span class="keywd">if</span> round(rocket.y_speed) > 15 <span class="op">or</span>
        advancedLander <span class="op">and</span> round(rocket.y_speed) > 5 <span class="keywd">then</span>
      <span class="keywd">if</span> rocket.tilt &lt;> NO_TILT <span class="keywd">then</span>
        crash_landing;
      <span class="keywd">else</span>
        fast_landing;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      nosound; <span class="comment">(* Turn off "Blue Danube" *)</span>
      <span class="keywd">if</span> rocket.tilt &lt;> NO_TILT <span class="keywd">then</span>
        tilt_landing;
      <span class="keywd">else</span>
        good_landing;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    flying := FALSE;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* ground_contact *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: crash_test <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="comment">(* Test for crash or landing. *)</span>
  <span class="keywd">begin</span> <span class="comment">(* crash_test *)</span>
    calculate_height;
    <span class="keywd">if</span> rocket.height &lt;= 0 <span class="keywd">then</span>
      <span class="keywd">if</span>  rocket.x_pos > flt(leftOfLandingPad - 5) <span class="op">and</span>
          rocket.x_pos &lt; flt(leftOfLandingPad + 35) <span class="keywd">then</span>
        ground_contact;
      <span class="keywd">else</span>
        crash_landing;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> flying <span class="op">and</span> score >= ADLAND <span class="op">and</span> <span class="op">not</span> advancedLander <span class="keywd">then</span>
      <span class="keywd">if</span>  rocket.y_pos > flt(Y_MAXIMUM - 26) <span class="op">and</span>
          rocket.x_pos > flt(leftOfLandingPad - 5) <span class="op">and</span>
          rocket.x_pos &lt; flt(leftOfLandingPad + 35) <span class="op">and</span>
          round(rocket.y_speed) &lt;= 10 <span class="keywd">then</span>
        setupAdvancedLander;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* crash_test *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span> <span class="comment">(* main *)</span>
    screen(640, 480);
    selectInput(curr_win, KEY_CLOSE, TRUE);
    clear(curr_win, black);
    color(white, black);
    KEYBOARD := GRAPH_KEYBOARD;
    screen := open(curr_win);
    panel := open(curr_win, 0, Y_MAXIMUM + 11);
    IN := openEditLine(KEYBOARD, screen);
    <span class="comment"># IN := openEcho(KEYBOARD, screen);</span>
    <span class="comment"># IN := openLine(IN);</span>
    quit_program := FALSE;
    sound_on := TRUE;
    welcome;
    load;
    <span class="keywd">while</span> <span class="op">not</span> quit_program <span class="keywd">do</span>
      setup;               <span class="comment">(* Setup initial conditions *)</span>
      <span class="keywd">while</span> flying <span class="keywd">do</span>
        display_ship;      <span class="comment">(* Display Moving ship *)</span>
        crash_test;        <span class="comment">(* Test for Crash or Landing *)</span>
        <span class="keywd">if</span> flying <span class="keywd">then</span>
          revise_control;  <span class="comment">(* Revise control parameters *)</span>
          check_keyboard;  <span class="comment">(* See if any keys pressed. *)</span>
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">if</span> <span class="op">not</span> quit_program <span class="keywd">then</span>
        end_of_flight;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* main *)</span>
</pre>
</body>
</html>
