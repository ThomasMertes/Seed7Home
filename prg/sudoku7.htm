<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  sudoku7.sd7   Sudoku program                                    *)</span>
<span class="comment">(*  Copyright (C) 2006, 2008, 2010, 2013, 2020  Thomas Mertes       *)</span>
<span class="comment">(*                2021, 2022, 2025  Thomas Mertes                   *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/window.htm">window.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/stdfont9.htm">stdfont9.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pixmap_file.htm">pixmap_file.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/dialog.htm">dialog.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pic16.htm">pic16.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">integer</span>: WINDOW_WIDTH      <span class="keywd">is</span> 896;
<span class="keywd">const</span> <span class="type">integer</span>: WINDOW_HEIGHT     <span class="keywd">is</span> 704;
<span class="keywd">const</span> <span class="type">integer</span>: STRETCH_FACTOR    <span class="keywd">is</span>  68;
<span class="keywd">const</span> <span class="type">integer</span>: PIXMAP_SIZE       <span class="keywd">is</span>  32;
<span class="keywd">const</span> <span class="type">integer</span>: SMALL_PIXMAP_SIZE <span class="keywd">is</span>  16;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_XPOS        <span class="keywd">is</span>   8;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_YPOS        <span class="keywd">is</span>  64;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_BORDER      <span class="keywd">is</span>   3;

<span class="keywd">const</span> <span class="type">integer</span>: X_SHIFT        <span class="keywd">is</span> FIELD_XPOS + FIELD_BORDER - STRETCH_FACTOR * 2;
<span class="keywd">const</span> <span class="type">integer</span>: Y_SHIFT        <span class="keywd">is</span> FIELD_YPOS + FIELD_BORDER - STRETCH_FACTOR * 2;

<span class="keywd">const</span> <span class="type">integer</span>: CELL_SHIFT         <span class="keywd">is</span> 5;
<span class="keywd">const</span> <span class="type">integer</span>: CELL_SIZE          <span class="keywd">is</span> STRETCH_FACTOR - 2 * CELL_SHIFT + 1;
<span class="keywd">const</span> <span class="type">integer</span>: PIXMAP_SHIFT       <span class="keywd">is</span> CELL_SHIFT + (CELL_SIZE - PIXMAP_SIZE) <span class="op">div</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: SMALL_PIXMAP_SHIFT <span class="keywd">is</span> CELL_SHIFT + (CELL_SIZE - 3 * SMALL_PIXMAP_SIZE) <span class="op">div</span> 2;

<span class="keywd">const</span> <span class="type">integer</span>: TOP_BUTTON_Y       <span class="keywd">is</span> 16;
<span class="keywd">const</span> <span class="type">integer</span>: TOP_BUTTON_MIN_X   <span class="keywd">is</span> 14;
<span class="keywd">const</span> <span class="type">integer</span>: RIGHT_BUTTON_X     <span class="keywd">is</span> X_SHIFT + STRETCH_FACTOR * 11 + 16;
<span class="keywd">const</span> <span class="type">integer</span>: RIGHT_BUTTON_MIN_Y <span class="keywd">is</span> Y_SHIFT + STRETCH_FACTOR * 2 + CELL_SHIFT;

<span class="keywd">const</span> <span class="type">integer</span>: EXIT_BUTTON_X      <span class="keywd">is</span> 850;

<span class="keywd">const</span> <span class="type">color</span>: BACKGROUND <span class="keywd">is</span> black;
<span class="keywd">const</span> <span class="type">color</span>: FOREGROUND <span class="keywd">is</span> white;

<span class="keywd">var</span> <span class="type">text</span>: info <span class="keywd">is</span> STD_NULL;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">PRIMITIVE_WINDOW</span>: blue_digits <span class="keywd">is</span> 0 <span class="op">times</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">PRIMITIVE_WINDOW</span>: red_digits <span class="keywd">is</span> 0 <span class="op">times</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">PRIMITIVE_WINDOW</span>: small_digits <span class="keywd">is</span> 0 <span class="op">times</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: single_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: double_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: triple_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: exit_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: checkmark_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">integer</span>: field <span class="keywd">is</span> 9 <span class="op">times</span> 9 <span class="op">times</span> 0;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">bitset</span>:  candidates <span class="keywd">is</span> 9 <span class="op">times</span> 9 <span class="op">times</span> EMPTY_SET;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">boolean</span>: user_input <span class="keywd">is</span> 9 <span class="op">times</span> 9 <span class="op">times</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: blue_changes <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: show_candidates <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: show_solution <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForSingles <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForHiddenSingles <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForLockedCandidates <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForNakedPairs <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForNakedTriples <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForNakedQuads <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForHiddenPairs <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForHiddenTriples <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForHiddenQuads <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForXWing <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: lookForSwordfish <span class="keywd">is</span> FALSE;

<span class="keywd">var</span> <span class="type">boolean</span>: quit <span class="keywd">is</span> FALSE;


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_zero <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc     xBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_one <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_two <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_three <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_four <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc    xBc    "</span>,
  <span class="stri">"  xBc    xBc    "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"                "</span>);

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_five <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_six <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_seven <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"           xBBc "</span>,
  <span class="stri">"      xBBBBBBc  "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_eight <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_nine <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"   xBBBBBBBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_zero <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRO     xRRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO     xRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRRO   xRRRRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_one <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"        xRO     "</span>,
  <span class="stri">"        xRO     "</span>,
  <span class="stri">"        xRO     "</span>,
  <span class="stri">"        xRO     "</span>,
  <span class="stri">"        xRO     "</span>,
  <span class="stri">"      xRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"  xRRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_two <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRO     xRRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRRRO        "</span>,
  <span class="stri">"  xRRRRO        "</span>,
  <span class="stri">"  xRRRRO        "</span>,
  <span class="stri">"  xRRRRO        "</span>,
  <span class="stri">"  xRRRRO        "</span>,
  <span class="stri">"  xRRRRRRRRRRRO "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_three <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRO     xRRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRRO   xRRRRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_four <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO    xRO    "</span>,
  <span class="stri">"  xRO    xRO    "</span>,
  <span class="stri">"  xRRRRRRRRRRRO "</span>,
  <span class="stri">"      xRRRRO    "</span>,
  <span class="stri">"      xRRRRO    "</span>,
  <span class="stri">"      xRRRRO    "</span>,
  <span class="stri">"      xRRRRO    "</span>,
  <span class="stri">"      xRRRRO    "</span>,
  <span class="stri">"      xRRRRO    "</span>,
  <span class="stri">"                "</span>);

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_five <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xRRRRRRRRRRRO "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRRRRRRRRRRO  "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRRO   xRRRRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_six <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRO     xRRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRO           "</span>,
  <span class="stri">"  xRRRRRRRRRRO  "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRRO   xRRRRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_seven <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xRRRRRRRRRRRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"            xRO "</span>,
  <span class="stri">"           xRRO "</span>,
  <span class="stri">"      xRRRRRRO  "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"     xRRRRO     "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_eight <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRO     xRRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRRO   xRRRRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: red_nine <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"  xRRO     xRRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"  xRO       xRO "</span>,
  <span class="stri">"   xRRRRRRRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"         xRRRRO "</span>,
  <span class="stri">"  xRO    xRRRRO "</span>,
  <span class="stri">"  xRRO   xRRRRO "</span>,
  <span class="stri">"   xRRRRRRRRRO  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_single <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"     xBBBBBc    "</span>,
  <span class="stri">"    xBBBBBBBc   "</span>,
  <span class="stri">"    xBBBBBBBc   "</span>,
  <span class="stri">"    xBBBBBBBc   "</span>,
  <span class="stri">"     xBBBBBc    "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_double <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBc         "</span>,
  <span class="stri">" xBBBBBc        "</span>,
  <span class="stri">" xBBBBBc        "</span>,
  <span class="stri">" xBBBBBc        "</span>,
  <span class="stri">"  xBBBc         "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"          xBBBc "</span>,
  <span class="stri">"         xBBBBBc"</span>,
  <span class="stri">"         xBBBBBc"</span>,
  <span class="stri">"         xBBBBBc"</span>,
  <span class="stri">"          xBBBc "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: blue_triple <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">" xBBBc          "</span>,
  <span class="stri">" xBBBc          "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"       xBc      "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"       xBc      "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"           xBBBc"</span>,
  <span class="stri">"           xBBBc"</span>,
  <span class="stri">"            xBc "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: candidates_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">" BB    BBB   BBB"</span>,
  <span class="stri">"  B      B     B"</span>,
  <span class="stri">"  B     B     BB"</span>,
  <span class="stri">" BBB   BBB   BBB"</span>,
  <span class="stri">"                "</span>,
  <span class="stri">" B     BBB    BB"</span>,
  <span class="stri">" B B   B     B  "</span>,
  <span class="stri">" BBB   BBB   BBB"</span>,
  <span class="stri">"   B   BB    BBB"</span>,
  <span class="stri">"                "</span>,
  <span class="stri">" BBB   BBB   BBB"</span>,
  <span class="stri">"  B    BBB   BBB"</span>,
  <span class="stri">" B     BBB     B"</span>,
  <span class="stri">" B     BBB   BB "</span>);


<span class="keywd">const</span> <span class="type">proc</span>: initCandidates <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> user_input[row][column] <span class="keywd">then</span>
          candidates[row][column] := {field[row][column]};
        <span class="keywd">else</span>
          field[row][column] := 0;
          candidates[row][column] := {1 .. 9};
          rect(X_SHIFT + STRETCH_FACTOR * succ(column) + CELL_SHIFT,
               Y_SHIFT + STRETCH_FACTOR * succ(row) + CELL_SHIFT,
               CELL_SIZE, CELL_SIZE, BACKGROUND);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: initGrid <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 10 <span class="keywd">do</span>
      <span class="keywd">if</span> row <span class="op">rem</span> 3 = 1 <span class="keywd">then</span>
        rect(X_SHIFT + STRETCH_FACTOR * 2 - 1, Y_SHIFT + STRETCH_FACTOR * succ(row) - 1,
            STRETCH_FACTOR * 9 + 3, 3, FOREGROUND);
      <span class="keywd">else</span>
        line(X_SHIFT + STRETCH_FACTOR * 2, Y_SHIFT + STRETCH_FACTOR * succ(row),
             STRETCH_FACTOR * 9, 0, FOREGROUND);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 10 <span class="keywd">do</span>
      <span class="keywd">if</span> column <span class="op">rem</span> 3 = 1 <span class="keywd">then</span>
        rect(X_SHIFT + STRETCH_FACTOR * succ(column) - 1, Y_SHIFT + STRETCH_FACTOR * 2 - 1,
             3, STRETCH_FACTOR * 9 + 3, FOREGROUND);
      <span class="keywd">else</span>
        line(X_SHIFT + STRETCH_FACTOR * succ(column), Y_SHIFT + STRETCH_FACTOR * 2,
             0, STRETCH_FACTOR * 9, FOREGROUND);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: clearField (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    rect(X_SHIFT + STRETCH_FACTOR * succ(column) + CELL_SHIFT + 1,
         Y_SHIFT + STRETCH_FACTOR * succ(row) + CELL_SHIFT + 1,
         CELL_SIZE - 2, CELL_SIZE - 2, BACKGROUND);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: markField (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    rect(X_SHIFT + STRETCH_FACTOR * succ(column) + CELL_SHIFT + 1,
         Y_SHIFT + STRETCH_FACTOR * succ(row) + CELL_SHIFT + 1,
         CELL_SIZE - 2, CELL_SIZE - 2, light_gray);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: clearDigit (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    field[row][column] := 0;
    user_input[row][column] := FALSE;
    initCandidates;
    rect(X_SHIFT + STRETCH_FACTOR * succ(column) + PIXMAP_SHIFT,
         Y_SHIFT + STRETCH_FACTOR * succ(row) + PIXMAP_SHIFT,
         PIXMAP_SIZE, PIXMAP_SIZE, BACKGROUND);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setRedDigit (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column,
    <span class="op">in</span> <span class="type">integer</span>: digit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    field[row][column] := digit;
    user_input[row][column] := TRUE;
    candidates[row][column] := {digit};
    clearField(row, column);
    put(X_SHIFT + STRETCH_FACTOR * succ(column) + PIXMAP_SHIFT,
        Y_SHIFT + STRETCH_FACTOR * succ(row) + PIXMAP_SHIFT,
        red_digits[digit]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setBlueDigit (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column,
    <span class="op">in</span> <span class="type">integer</span>: digit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    field[row][column] := digit;
    candidates[row][column] := {digit};
    blue_changes := TRUE;
    clearField(row, column);
    put(X_SHIFT + STRETCH_FACTOR * succ(column) + PIXMAP_SHIFT,
        Y_SHIFT + STRETCH_FACTOR * succ(row) + PIXMAP_SHIFT,
        blue_digits[digit]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeSmallDigit (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column,
    <span class="op">in</span> <span class="type">integer</span>: digit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(X_SHIFT + STRETCH_FACTOR * succ(column) + SMALL_PIXMAP_SHIFT +
        (pred(digit) <span class="op">mod</span> 3) * 16,
        Y_SHIFT + STRETCH_FACTOR * succ(row) + SMALL_PIXMAP_SHIFT +
        (pred(digit) <span class="op">div</span> 3) * 16,
        small_digits[digit]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: excludeInRow (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: digit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
        excl(candidates[row][column], digit);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: excludeInColumn (<span class="op">in</span> <span class="type">integer</span>: column, <span class="op">in</span> <span class="type">integer</span>: digit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
        excl(candidates[row][column], digit);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: excludeInBox (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column, <span class="op">in</span> <span class="type">integer</span>: digit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> succ(pred(row) <span class="op">div</span> 3 * 3) <span class="keywd">to</span> succ(pred(row) <span class="op">div</span> 3) * 3 <span class="keywd">do</span>
      <span class="keywd">for</span> col1 <span class="keywd">range</span> succ(pred(column) <span class="op">div</span> 3 * 3) <span class="keywd">to</span> succ(pred(column) <span class="op">div</span> 3) * 3 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row1][col1] = 0 <span class="keywd">then</span>
          excl(candidates[row1][col1], digit);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: excludeDigit (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    excludeInRow(row, field[row][column]);
    excludeInColumn(column, field[row][column]);
    excludeInBox(row, column, field[row][column]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: excludeFields <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row][column] &lt;> 0 <span class="keywd">then</span>
          excludeDigit(row, column);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showAllCandidates <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;

  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
          clearField(row, column);
          box(X_SHIFT + STRETCH_FACTOR * succ(column) + CELL_SHIFT,
              Y_SHIFT + STRETCH_FACTOR * succ(row) + CELL_SHIFT,
              CELL_SIZE, CELL_SIZE, light_green);
          <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
            <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
              writeSmallDigit(row, column, digit);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">elsif</span> <span class="op">not</span> user_input[row][column] <span class="keywd">then</span>
          setBlueDigit(row, column, field[row][column]);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    flushGraphic;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkSingles (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
          <span class="keywd">if</span> card(candidates[row][column]) = 1 <span class="keywd">then</span>
            digit := min(candidates[row][column]);
            field[row][column] := digit;
            candidates[row][column] := {digit};
            excludeDigit(row, column);
            changeDone := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenSinglesInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundCount <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      foundCount := 0;
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
          foundColumn := column;
          incr(foundCount);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> foundCount = 1 <span class="op">and</span> field[row][foundColumn] = 0 <span class="keywd">then</span>
        field[row][foundColumn] := digit;
        candidates[row][foundColumn] := {digit};
        excludeDigit(row, foundColumn);
        changeDone := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenSinglesInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundRow <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundCount <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      foundCount := 0;
      <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
          foundRow := row;
          incr(foundCount);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> foundCount = 1 <span class="op">and</span> field[foundRow][column] = 0 <span class="keywd">then</span>
        field[foundRow][column] := digit;
        candidates[foundRow][column] := {digit};
        excludeDigit(foundRow, column);
        changeDone := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenSinglesInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundRow <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundCount <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      foundCount := 0;
      <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
          <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
            foundRow := row;
            foundColumn := column;
            incr(foundCount);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> foundCount = 1 <span class="op">and</span> field[foundRow][foundColumn] = 0 <span class="keywd">then</span>
        field[foundRow][foundColumn] := digit;
        candidates[foundRow][foundColumn] := {digit};
        excludeDigit(foundRow, foundColumn);
        changeDone := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenSingles (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenSinglesInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenSinglesInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkHiddenSinglesInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkLockedCandidatesInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundColumn <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      foundColumn := 0;
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
          <span class="keywd">if</span> foundColumn = 0 <span class="keywd">then</span>
            foundColumn := succ((pred(column) <span class="op">div</span> 3) * 3);
          <span class="keywd">elsif</span> column &lt; foundColumn <span class="op">or</span> column > foundColumn + 2 <span class="keywd">then</span>
            foundColumn := 10;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> foundColumn <span class="op">in</span> {1 .. 9} <span class="keywd">then</span>
        <span class="keywd">for</span> row1 <span class="keywd">range</span> succ(pred(row) <span class="op">div</span> 3 * 3) <span class="keywd">to</span> succ(pred(row) <span class="op">div</span> 3) * 3 <span class="keywd">do</span>
          <span class="keywd">if</span> row1 &lt;> row <span class="keywd">then</span>
            <span class="keywd">for</span> column <span class="keywd">range</span> foundColumn <span class="keywd">to</span> foundColumn + 2 <span class="keywd">do</span>
              <span class="keywd">if</span> digit <span class="op">in</span> candidates[row1][column] <span class="keywd">then</span>
                excl(candidates[row1][column], digit);
                changeDone := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkLockedCandidatesInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundRow <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      foundRow := 0;
      <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
          <span class="keywd">if</span> foundRow = 0 <span class="keywd">then</span>
            foundRow := succ((pred(row) <span class="op">div</span> 3) * 3);
          <span class="keywd">elsif</span> row &lt; foundRow <span class="op">or</span> row > foundRow + 2 <span class="keywd">then</span>
            foundRow := 10;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> foundRow <span class="op">in</span> {1 .. 9} <span class="keywd">then</span>
        <span class="keywd">for</span> col <span class="keywd">range</span> succ(pred(column) <span class="op">div</span> 3 * 3) <span class="keywd">to</span> succ(pred(column) <span class="op">div</span> 3) * 3 <span class="keywd">do</span>
          <span class="keywd">if</span> col &lt;> column <span class="keywd">then</span>
            <span class="keywd">for</span> row <span class="keywd">range</span> foundRow <span class="keywd">to</span> foundRow + 2 <span class="keywd">do</span>
              <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][col] <span class="keywd">then</span>
                excl(candidates[row][col], digit);
                changeDone := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkLockedCandidatesInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundRow <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: foundColumn <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      foundRow := 0;
      foundColumn := 0;
      <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
          <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
            <span class="keywd">if</span> foundRow = 0 <span class="keywd">then</span>
              foundRow := row;
            <span class="keywd">elsif</span> foundRow &lt;> row <span class="keywd">then</span>
              foundRow := 10;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> foundColumn = 0 <span class="keywd">then</span>
              foundColumn := column;
            <span class="keywd">elsif</span> foundColumn &lt;> column <span class="keywd">then</span>
              foundColumn := 10;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> foundRow <span class="op">in</span> {1 .. 9} <span class="keywd">then</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> column &lt; startColumn <span class="op">or</span> column > startColumn + 2 <span class="keywd">then</span>
            <span class="keywd">if</span> digit <span class="op">in</span> candidates[foundRow][column] <span class="keywd">then</span>
              excl(candidates[foundRow][column], digit);
              changeDone := TRUE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> foundColumn <span class="op">in</span> {1 .. 9} <span class="keywd">then</span>
        <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> row &lt; startRow <span class="op">or</span> row > startRow + 2 <span class="keywd">then</span>
            <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][foundColumn] <span class="keywd">then</span>
              excl(candidates[row][foundColumn], digit);
              changeDone := TRUE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkLockedCandidates (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkLockedCandidatesInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkLockedCandidatesInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkLockedCandidatesInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedPairsInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> col1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(candidates[row][col1]) = 2 <span class="keywd">then</span>
        pairSet := candidates[row][col1];
        <span class="keywd">for</span> col2 <span class="keywd">range</span> succ(col1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> candidates[row][col2] = pairSet <span class="keywd">then</span>
            <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> column &lt;> col1 <span class="op">and</span> column &lt;> col2 <span class="op">and</span>
                  card(candidates[row][column] &amp; pairSet) &lt;> 0 <span class="keywd">then</span>
                candidates[row][column] := candidates[row][column] - pairSet;
                changeDone := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedPairsInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(candidates[row1][column]) = 2 <span class="keywd">then</span>
        pairSet := candidates[row1][column];
        <span class="keywd">for</span> row2 <span class="keywd">range</span> succ(row1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> candidates[row2][column] = pairSet <span class="keywd">then</span>
            <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> row &lt;> row1 <span class="op">and</span> row &lt;> row2 <span class="op">and</span>
                  card(candidates[row][column] &amp; pairSet) &lt;> 0 <span class="keywd">then</span>
                candidates[row][column] := candidates[row][column] - pairSet;
                changeDone := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedPairsInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
      <span class="keywd">for</span> col1 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
        <span class="keywd">if</span> card(candidates[row1][col1]) = 2 <span class="keywd">then</span>
          pairSet := candidates[row1][col1];
          <span class="keywd">for</span> row2 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
            <span class="keywd">for</span> col2 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
              <span class="keywd">if</span> (row2 &lt;> row1 <span class="op">or</span> col2 &lt;> col1) <span class="op">and</span>
                  candidates[row2][col2] = pairSet <span class="keywd">then</span>
                <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                  <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                    <span class="keywd">if</span> (row &lt;> row1 <span class="op">or</span> column &lt;> col1) <span class="op">and</span>
                        (row &lt;> row2 <span class="op">or</span> column &lt;> col2) <span class="op">and</span>
                        card(candidates[row][column] &amp; pairSet) &lt;> 0 <span class="keywd">then</span>
                      candidates[row][column] := candidates[row][column] - pairSet;
                      changeDone := TRUE;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedPairs (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkNakedPairsInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkNakedPairsInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkNakedPairsInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedTriplesInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> col1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(candidates[row][col1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> col2 <span class="keywd">range</span> succ(col1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(candidates[row][col2]) >= 2 <span class="op">and</span>
              card(candidates[row][col1] | candidates[row][col2]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> col3 <span class="keywd">range</span> succ(col2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(candidates[row][col3]) >= 2 <span class="keywd">then</span>
                tripleSet := candidates[row][col1] | candidates[row][col2] |
                    candidates[row][col3];
                <span class="keywd">if</span> card(tripleSet) = 3 <span class="keywd">then</span>
                  <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                    <span class="keywd">if</span> column &lt;> col1 <span class="op">and</span> column &lt;> col2 <span class="op">and</span> column &lt;> col3 <span class="op">and</span>
                        card(candidates[row][column] &amp; tripleSet) &lt;> 0 <span class="keywd">then</span>
                      candidates[row][column] := candidates[row][column] - tripleSet;
                      changeDone := TRUE;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedTriplesInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(candidates[row1][column]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> row2 <span class="keywd">range</span> succ(row1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(candidates[row2][column]) >= 2 <span class="op">and</span>
              card(candidates[row1][column] | candidates[row2][column]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> row3 <span class="keywd">range</span> succ(row2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(candidates[row3][column]) >= 2 <span class="keywd">then</span>
                tripleSet := candidates[row1][column] | candidates[row2][column] |
                    candidates[row3][column];
                <span class="keywd">if</span> card(tripleSet) = 3 <span class="keywd">then</span>
                  <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                    <span class="keywd">if</span> row &lt;> row1 <span class="op">and</span> row &lt;> row2 <span class="op">and</span> row &lt;> row3 <span class="op">and</span>
                        card(candidates[row][column] &amp; tripleSet) &lt;> 0 <span class="keywd">then</span>
                      candidates[row][column] := candidates[row][column] - tripleSet;
                      changeDone := TRUE;
                   <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedTriplesInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
      <span class="keywd">for</span> col1 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
        <span class="keywd">if</span> card(candidates[row1][col1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
          <span class="keywd">for</span> row2 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
            <span class="keywd">for</span> col2 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
              <span class="keywd">if</span> (row2 &lt;> row1 <span class="op">or</span> col2 &lt;> col1) <span class="op">and</span>
                  card(candidates[row2][col2]) >= 2 <span class="op">and</span>
                  card(candidates[row1][col1] | candidates[row2][col2]) &lt;= 3 <span class="keywd">then</span>
                <span class="keywd">for</span> row3 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                  <span class="keywd">for</span> col3 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                    <span class="keywd">if</span> (row3 &lt;> row1 <span class="op">or</span> col3 &lt;> col1) <span class="op">and</span>
                        (row3 &lt;> row2 <span class="op">or</span> col3 &lt;> col2) <span class="op">and</span>
                        card(candidates[row3][col3]) >= 2 <span class="keywd">then</span>
                      tripleSet := candidates[row1][col1] | candidates[row2][col2] |
                          candidates[row3][col3];
                      <span class="keywd">if</span> card(tripleSet) = 3 <span class="keywd">then</span>
                        <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                          <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                            <span class="keywd">if</span> (row &lt;> row1 <span class="op">or</span> column &lt;> col1) <span class="op">and</span>
                                (row &lt;> row2 <span class="op">or</span> column &lt;> col2) <span class="op">and</span>
                                (row &lt;> row3 <span class="op">or</span> column &lt;> col3) <span class="op">and</span>
                                card(candidates[row][column] &amp; tripleSet) &lt;> 0 <span class="keywd">then</span>
                              candidates[row][column] := candidates[row][column] - tripleSet;
                              changeDone := TRUE;
                            <span class="keywd">end</span> <span class="keywd">if</span>;
                          <span class="keywd">end</span> <span class="keywd">for</span>;
                        <span class="keywd">end</span> <span class="keywd">for</span>;
                      <span class="keywd">end</span> <span class="keywd">if</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedTriples (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkNakedTriplesInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkNakedTriplesInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkNakedTriplesInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedQuadsInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> col1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
      <span class="keywd">if</span> card(candidates[row][col1]) <span class="op">in</span> {2, 3, 4} <span class="keywd">then</span>
        <span class="keywd">for</span> col2 <span class="keywd">range</span> succ(col1) <span class="keywd">to</span> 7 <span class="keywd">do</span>
          <span class="keywd">if</span> card(candidates[row][col2]) >= 2 <span class="op">and</span>
              card(candidates[row][col1] | candidates[row][col2]) &lt;= 4 <span class="keywd">then</span>
            <span class="keywd">for</span> col3 <span class="keywd">range</span> succ(col2) <span class="keywd">to</span> 8 <span class="keywd">do</span>
              <span class="keywd">if</span> card(candidates[row][col3]) >= 2 <span class="op">and</span>
                  card(candidates[row][col1] | candidates[row][col2] |
                  candidates[row][col3]) &lt;= 4 <span class="keywd">then</span>
                <span class="keywd">for</span> col4 <span class="keywd">range</span> succ(col3) <span class="keywd">to</span> 9 <span class="keywd">do</span>
                  <span class="keywd">if</span> card(candidates[row][col4]) >= 2 <span class="keywd">then</span>
                    quadSet := candidates[row][col1] | candidates[row][col2] |
                        candidates[row][col3] | candidates[row][col4];
                    <span class="keywd">if</span> card(quadSet) = 4 <span class="keywd">then</span>
                      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                        <span class="keywd">if</span> column &lt;> col1 <span class="op">and</span> column &lt;> col2 <span class="op">and</span> column &lt;> col3 <span class="op">and</span> column &lt;> col4 <span class="op">and</span>
                            card(candidates[row][column] &amp; quadSet) &lt;> 0 <span class="keywd">then</span>
                          candidates[row][column] := candidates[row][column] - quadSet;
                          changeDone := TRUE;
                        <span class="keywd">end</span> <span class="keywd">if</span>;
                      <span class="keywd">end</span> <span class="keywd">for</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedQuadsInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
      <span class="keywd">if</span> card(candidates[row1][column]) <span class="op">in</span> {2, 3, 4} <span class="keywd">then</span>
        <span class="keywd">for</span> row2 <span class="keywd">range</span> succ(row1) <span class="keywd">to</span> 7 <span class="keywd">do</span>
          <span class="keywd">if</span> card(candidates[row2][column]) >= 2 <span class="op">and</span>
              card(candidates[row1][column] | candidates[row2][column]) &lt;= 4 <span class="keywd">then</span>
            <span class="keywd">for</span> row3 <span class="keywd">range</span> succ(row2) <span class="keywd">to</span> 8 <span class="keywd">do</span>
              <span class="keywd">if</span> card(candidates[row3][column]) >= 2 <span class="op">and</span>
                  card(candidates[row1][column] | candidates[row2][column] |
                  candidates[row3][column]) &lt;= 4 <span class="keywd">then</span>
                <span class="keywd">for</span> row4 <span class="keywd">range</span> succ(row3) <span class="keywd">to</span> 9 <span class="keywd">do</span>
                  <span class="keywd">if</span> card(candidates[row4][column]) >= 2 <span class="keywd">then</span>
                    quadSet := candidates[row1][column] | candidates[row2][column] |
                        candidates[row3][column] | candidates[row4][column];
                    <span class="keywd">if</span> card(quadSet) = 4 <span class="keywd">then</span>
                      <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                        <span class="keywd">if</span> row &lt;> row1 <span class="op">and</span> row &lt;> row2 <span class="op">and</span> row &lt;> row3 <span class="op">and</span> row &lt;> row4 <span class="op">and</span>
                            card(candidates[row][column] &amp; quadSet) &lt;> 0 <span class="keywd">then</span>
                          candidates[row][column] := candidates[row][column] - quadSet;
                          changeDone := TRUE;
                        <span class="keywd">end</span> <span class="keywd">if</span>;
                      <span class="keywd">end</span> <span class="keywd">for</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedQuadsInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
      <span class="keywd">for</span> col1 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
        <span class="keywd">if</span> card(candidates[row1][col1]) <span class="op">in</span> {2, 3, 4} <span class="keywd">then</span>
          <span class="keywd">for</span> row2 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
            <span class="keywd">for</span> col2 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
              <span class="keywd">if</span> (row2 &lt;> row1 <span class="op">or</span> col2 &lt;> col1) <span class="op">and</span>
                  card(candidates[row2][col2]) >= 2 <span class="op">and</span>
                  card(candidates[row1][col1] | candidates[row2][col2]) &lt;= 4 <span class="keywd">then</span>
                <span class="keywd">for</span> row3 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                  <span class="keywd">for</span> col3 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                    <span class="keywd">if</span> (row3 &lt;> row1 <span class="op">or</span> col3 &lt;> col1) <span class="op">and</span>
                        (row3 &lt;> row2 <span class="op">or</span> col3 &lt;> col2) <span class="op">and</span>
                        card(candidates[row3][col3]) >= 2 <span class="op">and</span>
                        card(candidates[row1][col1] | candidates[row2][col2] |
                        candidates[row3][col3]) &lt;= 4 <span class="keywd">then</span>
                      <span class="keywd">for</span> row4 <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                        <span class="keywd">for</span> col4 <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                          <span class="keywd">if</span> (row4 &lt;> row1 <span class="op">or</span> col4 &lt;> col1) <span class="op">and</span>
                              (row4 &lt;> row2 <span class="op">or</span> col4 &lt;> col2) <span class="op">and</span>
                              (row4 &lt;> row3 <span class="op">or</span> col4 &lt;> col3) <span class="op">and</span>
                              card(candidates[row4][col4]) >= 2 <span class="keywd">then</span>
                            quadSet := candidates[row1][col1] | candidates[row2][col2] |
                                candidates[row3][col3] | candidates[row4][col4];
                            <span class="keywd">if</span> card(quadSet) = 4 <span class="keywd">then</span>
                              <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                                <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                                  <span class="keywd">if</span> (row &lt;> row1 <span class="op">or</span> column &lt;> col1) <span class="op">and</span>
                                      (row &lt;> row2 <span class="op">or</span> column &lt;> col2) <span class="op">and</span>
                                      (row &lt;> row3 <span class="op">or</span> column &lt;> col3) <span class="op">and</span>
                                      (row &lt;> row4 <span class="op">or</span> column &lt;> col4) <span class="op">and</span>
                                      card(candidates[row][column] &amp; quadSet) &lt;> 0 <span class="keywd">then</span>
                                    candidates[row][column] := candidates[row][column] - quadSet;
                                    changeDone := TRUE;
                                  <span class="keywd">end</span> <span class="keywd">if</span>;
                                <span class="keywd">end</span> <span class="keywd">for</span>;
                              <span class="keywd">end</span> <span class="keywd">for</span>;
                            <span class="keywd">end</span> <span class="keywd">if</span>;
                          <span class="keywd">end</span> <span class="keywd">if</span>;
                        <span class="keywd">end</span> <span class="keywd">for</span>;
                      <span class="keywd">end</span> <span class="keywd">for</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkNakedQuads (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkNakedQuadsInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkNakedQuadsInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkNakedQuadsInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenPairsInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: columnsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairColumns <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
        incl(columnsWithDigit[digit1], column);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(columnsWithDigit[digit1]) = 2 <span class="keywd">then</span>
        pairColumns := columnsWithDigit[digit1];
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> columnsWithDigit[digit2] = pairColumns <span class="keywd">then</span>
            pairSet := {digit1, digit2};
            <span class="keywd">for</span> column <span class="keywd">range</span> pairColumns <span class="keywd">do</span>
              <span class="keywd">if</span> card(candidates[row][column] - pairSet) &lt;> 0 <span class="keywd">then</span>
                candidates[row][column] := pairSet;
                changeDone := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenPairsInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: rowsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairRows <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
        incl(rowsWithDigit[digit1], row);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(rowsWithDigit[digit1]) = 2 <span class="keywd">then</span>
        pairRows := rowsWithDigit[digit1];
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> rowsWithDigit[digit2] = pairRows <span class="keywd">then</span>
            pairSet := {digit1, digit2};
            <span class="keywd">for</span> row <span class="keywd">range</span> pairRows <span class="keywd">do</span>
              <span class="keywd">if</span> card(candidates[row][column] - pairSet) &lt;> 0 <span class="keywd">then</span>
                candidates[row][column] := pairSet;
                changeDone := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenPairsInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: cellsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairCells <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: pairSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
        <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
          incl(cellsWithDigit[digit1], succ(pred(row) * 3 + pred(column)));
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(cellsWithDigit[digit1]) = 2 <span class="keywd">then</span>
        pairCells := cellsWithDigit[digit1];
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> cellsWithDigit[digit2] = pairCells <span class="keywd">then</span>
            pairSet := {digit1, digit2};
            <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
              <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                <span class="keywd">if</span> succ(pred(row) * 3 + pred(column)) <span class="op">in</span> pairCells <span class="keywd">then</span>
                  <span class="keywd">if</span> card(candidates[row][column] - pairSet) &lt;> 0 <span class="keywd">then</span>
                    candidates[row][column] := pairSet;
                    changeDone := TRUE;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">for</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenPairs (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenPairsInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenPairsInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkHiddenPairsInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenTriplesInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: columnsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleColumns <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
        incl(columnsWithDigit[digit1], column);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(columnsWithDigit[digit1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(columnsWithDigit[digit2]) >= 2 <span class="op">and</span>
              card(columnsWithDigit[digit1] | columnsWithDigit[digit2]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> digit3 <span class="keywd">range</span> succ(digit2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(columnsWithDigit[digit3]) >= 2 <span class="keywd">then</span>
                tripleColumns := columnsWithDigit[digit1] | columnsWithDigit[digit2] |
                    columnsWithDigit[digit3];
                <span class="keywd">if</span> card(tripleColumns) = 3 <span class="keywd">then</span>
                  tripleSet := {digit1, digit2, digit3};
                  <span class="keywd">for</span> column <span class="keywd">range</span> tripleColumns <span class="keywd">do</span>
                    <span class="keywd">if</span> card(candidates[row][column] - tripleSet) &lt;> 0 <span class="keywd">then</span>
                      candidates[row][column] := candidates[row][column] -
                          (candidates[row][column] - tripleSet);
                      changeDone := TRUE;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenTriplesInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: rowsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleRows <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
        incl(rowsWithDigit[digit1], row);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(rowsWithDigit[digit1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(rowsWithDigit[digit2]) >= 2 <span class="op">and</span>
              card(rowsWithDigit[digit1] | rowsWithDigit[digit2]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> digit3 <span class="keywd">range</span> succ(digit2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(rowsWithDigit[digit3]) >= 2 <span class="keywd">then</span>
                tripleRows := rowsWithDigit[digit1] | rowsWithDigit[digit2] |
                    rowsWithDigit[digit3];
                <span class="keywd">if</span> card(tripleRows) = 3 <span class="keywd">then</span>
                  tripleSet := {digit1, digit2, digit3};
                  <span class="keywd">for</span> row <span class="keywd">range</span> tripleRows <span class="keywd">do</span>
                    <span class="keywd">if</span> card(candidates[row][column] - tripleSet) &lt;> 0 <span class="keywd">then</span>
                      candidates[row][column] := candidates[row][column] -
                          (candidates[row][column] - tripleSet);
                      changeDone := TRUE;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenTriplesInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: cellsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleCells <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: tripleSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
        <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
          incl(cellsWithDigit[digit1], succ(pred(row) * 3 + pred(column)));
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(cellsWithDigit[digit1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(cellsWithDigit[digit2]) >= 2 <span class="op">and</span>
              card(cellsWithDigit[digit1] | cellsWithDigit[digit2]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> digit3 <span class="keywd">range</span> succ(digit2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(cellsWithDigit[digit3]) >= 2 <span class="keywd">then</span>
                tripleCells := cellsWithDigit[digit1] | cellsWithDigit[digit2] |
                    cellsWithDigit[digit3];
                <span class="keywd">if</span> card(tripleCells) = 3 <span class="keywd">then</span>
                  tripleSet := {digit1, digit2, digit3};
                  <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                    <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                      <span class="keywd">if</span> succ(pred(row) * 3 + pred(column)) <span class="op">in</span> tripleCells <span class="keywd">then</span>
                        <span class="keywd">if</span> card(candidates[row][column] - tripleSet) &lt;> 0 <span class="keywd">then</span>
                          candidates[row][column] := candidates[row][column] -
                              (candidates[row][column] - tripleSet);
                          changeDone := TRUE;
                        <span class="keywd">end</span> <span class="keywd">if</span>;
                      <span class="keywd">end</span> <span class="keywd">if</span>;
                    <span class="keywd">end</span> <span class="keywd">for</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenTriples (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenTriplesInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenTriplesInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkHiddenTriplesInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenQuadsInRow (<span class="op">in</span> <span class="type">integer</span>: row,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: columnsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadColumns <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
        incl(columnsWithDigit[digit1], column);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
      <span class="keywd">if</span> card(columnsWithDigit[digit1]) <span class="op">in</span> {2, 3, 4} <span class="keywd">then</span>
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 7 <span class="keywd">do</span>
          <span class="keywd">if</span> card(columnsWithDigit[digit2]) >= 2 <span class="op">and</span>
              card(columnsWithDigit[digit1] | columnsWithDigit[digit2]) &lt;= 4 <span class="keywd">then</span>
            <span class="keywd">for</span> digit3 <span class="keywd">range</span> succ(digit2) <span class="keywd">to</span> 8 <span class="keywd">do</span>
              <span class="keywd">if</span> card(columnsWithDigit[digit3]) >= 2 <span class="op">and</span>
                  card(columnsWithDigit[digit1] | columnsWithDigit[digit2] |
                  columnsWithDigit[digit3]) &lt;= 4 <span class="keywd">then</span>
                <span class="keywd">for</span> digit4 <span class="keywd">range</span> succ(digit3) <span class="keywd">to</span> 9 <span class="keywd">do</span>
                  <span class="keywd">if</span> card(columnsWithDigit[digit4]) >= 2 <span class="keywd">then</span>
                    quadColumns := columnsWithDigit[digit1] | columnsWithDigit[digit2] |
                        columnsWithDigit[digit3] | columnsWithDigit[digit4];
                    <span class="keywd">if</span> card(quadColumns) = 4 <span class="keywd">then</span>
                      quadSet := {digit1, digit2, digit3, digit4};
                      <span class="keywd">for</span> column <span class="keywd">range</span> quadColumns <span class="keywd">do</span>
                        <span class="keywd">if</span> card(candidates[row][column] - quadSet) &lt;> 0 <span class="keywd">then</span>
                          candidates[row][column] := candidates[row][column] -
                              (candidates[row][column] - quadSet);
                          changeDone := TRUE;
                        <span class="keywd">end</span> <span class="keywd">if</span>;
                      <span class="keywd">end</span> <span class="keywd">for</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenQuadsInColumn (<span class="op">in</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: rowsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadRows <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
        incl(rowsWithDigit[digit1], row);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
      <span class="keywd">if</span> card(rowsWithDigit[digit1]) <span class="op">in</span> {2, 3, 4} <span class="keywd">then</span>
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 7 <span class="keywd">do</span>
          <span class="keywd">if</span> card(rowsWithDigit[digit2]) >= 2 <span class="op">and</span>
              card(rowsWithDigit[digit1] | rowsWithDigit[digit2]) &lt;= 4 <span class="keywd">then</span>
            <span class="keywd">for</span> digit3 <span class="keywd">range</span> succ(digit2) <span class="keywd">to</span> 8 <span class="keywd">do</span>
              <span class="keywd">if</span> card(rowsWithDigit[digit3]) >= 2 <span class="op">and</span>
                  card(rowsWithDigit[digit1] | rowsWithDigit[digit2] |
                  rowsWithDigit[digit3]) &lt;= 4 <span class="keywd">then</span>
                <span class="keywd">for</span> digit4 <span class="keywd">range</span> succ(digit3) <span class="keywd">to</span> 9 <span class="keywd">do</span>
                  <span class="keywd">if</span> card(rowsWithDigit[digit4]) >= 2 <span class="keywd">then</span>
                    quadRows := rowsWithDigit[digit1] | rowsWithDigit[digit2] |
                        rowsWithDigit[digit3] | rowsWithDigit[digit4];
                    <span class="keywd">if</span> card(quadRows) = 4 <span class="keywd">then</span>
                      quadSet := {digit1, digit2, digit3, digit4};
                      <span class="keywd">for</span> row <span class="keywd">range</span> quadRows <span class="keywd">do</span>
                        <span class="keywd">if</span> card(candidates[row][column] - quadSet) &lt;> 0 <span class="keywd">then</span>
                          candidates[row][column] := candidates[row][column] -
                              (candidates[row][column] - quadSet);
                          changeDone := TRUE;
                        <span class="keywd">end</span> <span class="keywd">if</span>;
                      <span class="keywd">end</span> <span class="keywd">for</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenQuadsInBox (<span class="op">in</span> <span class="type">integer</span>: startRow, <span class="op">in</span> <span class="type">integer</span>: startColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: digit4 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: cellsWithDigit <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadCells <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: quadSet <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
        <span class="keywd">for</span> digit1 <span class="keywd">range</span> candidates[row][column] <span class="keywd">do</span>
          incl(cellsWithDigit[digit1], succ(pred(row) * 3 + pred(column)));
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> digit1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
      <span class="keywd">if</span> card(cellsWithDigit[digit1]) <span class="op">in</span> {2, 3, 4} <span class="keywd">then</span>
        <span class="keywd">for</span> digit2 <span class="keywd">range</span> succ(digit1) <span class="keywd">to</span> 7 <span class="keywd">do</span>
          <span class="keywd">if</span> card(cellsWithDigit[digit2]) >= 2 <span class="op">and</span>
              card(cellsWithDigit[digit1] | cellsWithDigit[digit2]) &lt;= 4 <span class="keywd">then</span>
            <span class="keywd">for</span> digit3 <span class="keywd">range</span> succ(digit2) <span class="keywd">to</span> 8 <span class="keywd">do</span>
              <span class="keywd">if</span> card(cellsWithDigit[digit3]) >= 2 <span class="op">and</span>
                  card(cellsWithDigit[digit1] | cellsWithDigit[digit2] |
                  cellsWithDigit[digit3]) &lt;= 4 <span class="keywd">then</span>
                <span class="keywd">for</span> digit4 <span class="keywd">range</span> succ(digit3) <span class="keywd">to</span> 9 <span class="keywd">do</span>
                  <span class="keywd">if</span> card(cellsWithDigit[digit4]) >= 2 <span class="keywd">then</span>
                    quadCells := cellsWithDigit[digit1] | cellsWithDigit[digit2] |
                        cellsWithDigit[digit3] | cellsWithDigit[digit4];
                    <span class="keywd">if</span> card(quadCells) = 4 <span class="keywd">then</span>
                      quadSet := {digit1, digit2, digit3, digit4};
                      <span class="keywd">for</span> row <span class="keywd">range</span> startRow <span class="keywd">to</span> startRow + 2 <span class="keywd">do</span>
                        <span class="keywd">for</span> column <span class="keywd">range</span> startColumn <span class="keywd">to</span> startColumn + 2 <span class="keywd">do</span>
                          <span class="keywd">if</span> succ(pred(row) * 3 + pred(column)) <span class="op">in</span> quadCells <span class="keywd">then</span>
                            <span class="keywd">if</span> card(candidates[row][column] - quadSet) &lt;> 0 <span class="keywd">then</span>
                              candidates[row][column] := candidates[row][column] -
                                  (candidates[row][column] - quadSet);
                              changeDone := TRUE;
                            <span class="keywd">end</span> <span class="keywd">if</span>;
                          <span class="keywd">end</span> <span class="keywd">if</span>;
                        <span class="keywd">end</span> <span class="keywd">for</span>;
                      <span class="keywd">end</span> <span class="keywd">for</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHiddenQuads (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenQuadsInRow(row, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkHiddenQuadsInColumn(column, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 step 3 <span class="keywd">do</span>
        checkHiddenQuadsInBox(row, column, changeDone);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkXWingForDigit (<span class="op">in</span> <span class="type">integer</span>: digit,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: rowsInColumn <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: columnsInRow <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: xWingColumns <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: xWingRows <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> digit <span class="op">in</span> candidates[row1][column1] <span class="keywd">then</span>
          incl(rowsInColumn[column1], row1);
          incl(columnsInRow[row1], column1);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(columnsInRow[row1]) = 2 <span class="keywd">then</span>
        xWingColumns := columnsInRow[row1];
        <span class="keywd">for</span> row2 <span class="keywd">range</span> succ(row1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> columnsInRow[row2] = xWingColumns <span class="keywd">then</span>
            <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> row &lt;> row1 <span class="op">and</span> row &lt;> row2 <span class="keywd">then</span>
                <span class="keywd">if</span> card(columnsInRow[row] &amp; xWingColumns) &lt;> 0 <span class="keywd">then</span>
                  <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                    <span class="keywd">if</span> column <span class="op">in</span> xWingColumns <span class="keywd">then</span>
                      excl(candidates[row][column], digit);
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                  changeDone := TRUE;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">if</span> card(rowsInColumn[column1]) = 2 <span class="keywd">then</span>
        xWingRows := rowsInColumn[column1];
        <span class="keywd">for</span> column2 <span class="keywd">range</span> succ(column1) <span class="keywd">to</span> 9 <span class="keywd">do</span>
          <span class="keywd">if</span> rowsInColumn[column2] = xWingRows <span class="keywd">then</span>
            <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> column &lt;> column1 <span class="op">and</span> column &lt;> column2 <span class="keywd">then</span>
                <span class="keywd">if</span> card(rowsInColumn[column] &amp; xWingRows) &lt;> 0 <span class="keywd">then</span>
                  <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                    <span class="keywd">if</span> row <span class="op">in</span> xWingRows <span class="keywd">then</span>
                      excl(candidates[row][column], digit);
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                  changeDone := TRUE;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkXWing (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkXWingForDigit(digit, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkSwordfishForDigit (<span class="op">in</span> <span class="type">integer</span>: digit,
    <span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column3 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: rowsInColumn <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">set</span> <span class="keywd">of</span> <span class="type">integer</span>: columnsInRow <span class="keywd">is</span> 9 <span class="op">times</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: swordfishColumns <span class="keywd">is</span> EMPTY_SET;
    <span class="keywd">var</span> <span class="type">set</span> <span class="type">of</span> <span class="type">integer</span>: swordfishRows <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> digit <span class="op">in</span> candidates[row1][column1] <span class="keywd">then</span>
          incl(rowsInColumn[column1], row1);
          incl(columnsInRow[row1], column1);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> row1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(columnsInRow[row1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> row2 <span class="keywd">range</span> succ(row1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(columnsInRow[row2]) >= 2 <span class="op">and</span>
              card(columnsInRow[row1] | columnsInRow[row2]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> row3 <span class="keywd">range</span> succ(row2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(columnsInRow[row3]) >= 2 <span class="keywd">then</span>
                swordfishColumns := columnsInRow[row1] | columnsInRow[row2] |
                    columnsInRow[row3];
                <span class="keywd">if</span> card(swordfishColumns) = 3 <span class="keywd">then</span>
                  <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                    <span class="keywd">if</span> row &lt;> row1 <span class="op">and</span> row &lt;> row2 <span class="op">and</span> row &lt;> row3 <span class="keywd">then</span>
                      <span class="keywd">if</span> card(columnsInRow[row] &amp; swordfishColumns) &lt;> 0 <span class="keywd">then</span>
                        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                          <span class="keywd">if</span> column <span class="op">in</span> swordfishColumns <span class="keywd">then</span>
                            excl(candidates[row][column], digit);
                          <span class="keywd">end</span> <span class="keywd">if</span>;
                        <span class="keywd">end</span> <span class="keywd">for</span>;
                        changeDone := TRUE;
                      <span class="keywd">end</span> <span class="keywd">if</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> 7 <span class="keywd">do</span>
      <span class="keywd">if</span> card(rowsInColumn[column1]) <span class="op">in</span> {2, 3} <span class="keywd">then</span>
        <span class="keywd">for</span> column2 <span class="keywd">range</span> succ(column1) <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> card(rowsInColumn[column2]) >= 2 <span class="op">and</span>
              card(rowsInColumn[column1] | rowsInColumn[column2]) &lt;= 3 <span class="keywd">then</span>
            <span class="keywd">for</span> column3 <span class="keywd">range</span> succ(column2) <span class="keywd">to</span> 9 <span class="keywd">do</span>
              <span class="keywd">if</span> card(rowsInColumn[column3]) >= 2 <span class="keywd">then</span>
                swordfishRows := rowsInColumn[column1] | rowsInColumn[column2] |
                    rowsInColumn[column3];
                <span class="keywd">if</span> card(swordfishRows) = 3 <span class="keywd">then</span>
                  <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                    <span class="keywd">if</span> column &lt;> column1 <span class="op">and</span> column &lt;> column2 <span class="op">and</span> column &lt;> column3 <span class="keywd">then</span>
                      <span class="keywd">if</span> card(rowsInColumn[column] &amp; swordfishRows) &lt;> 0 <span class="keywd">then</span>
                        <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
                          <span class="keywd">if</span> row <span class="op">in</span> swordfishRows <span class="keywd">then</span>
                            excl(candidates[row][column], digit);
                          <span class="keywd">end</span> <span class="keywd">if</span>;
                        <span class="keywd">end</span> <span class="keywd">for</span>;
                        changeDone := TRUE;
                      <span class="keywd">end</span> <span class="keywd">if</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkSwordfish (<span class="keywd">inout</span> <span class="type">boolean</span>: changeDone) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      checkSwordfishForDigit(digit, changeDone);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: solve <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: changeDone <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      changeDone := FALSE;
      excludeFields;
      <span class="keywd">if</span> lookForSingles <span class="keywd">then</span>
        checkSingles(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForHiddenSingles <span class="keywd">then</span>
        checkHiddenSingles(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForLockedCandidates <span class="keywd">then</span>
        checkLockedCandidates(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForNakedPairs <span class="keywd">then</span>
        checkNakedPairs(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForNakedTriples <span class="keywd">then</span>
        checkNakedTriples(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForNakedQuads <span class="keywd">then</span>
        checkNakedQuads(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForHiddenPairs <span class="keywd">then</span>
        checkHiddenPairs(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForHiddenTriples <span class="keywd">then</span>
        checkHiddenTriples(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForHiddenQuads <span class="keywd">then</span>
        checkHiddenQuads(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForXWing <span class="keywd">then</span>
        checkXWing(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> lookForSwordfish <span class="keywd">then</span>
        checkSwordfish(changeDone);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> <span class="op">not</span> changeDone;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: blueChanges <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      blue_changes := FALSE;
      excludeFields;
      flushGraphic;
    <span class="keywd">until</span> <span class="op">not</span> blue_changes;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: readCommand (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;

  <span class="keywd">begin</span>
    command := getc(KEYBOARD);
    box(X_SHIFT + STRETCH_FACTOR * succ(column) + CELL_SHIFT,
        Y_SHIFT + STRETCH_FACTOR * succ(row) + CELL_SHIFT,
        CELL_SIZE, CELL_SIZE, BACKGROUND);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showSolved <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;

  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> <span class="op">not</span> user_input[row][column] <span class="op">and</span> field[row][column] &lt;> 0 <span class="keywd">then</span>
          clearField(row, column);
          setBlueDigit(row, column, field[row][column]);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showNumberOfCandidates (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;

  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
          clearField(row, column);
          <span class="keywd">if</span> card(candidates[row][column]) = number <span class="keywd">then</span>
            markField(row, column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showCandidatesDigit (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;

  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
          clearField(row, column);
          <span class="keywd">if</span> number <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
            markField(row, column);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showCandidates <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;

  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
        <span class="keywd">if</span> field[row][column] = 0 <span class="keywd">then</span>
          <span class="keywd">for</span> digit <span class="keywd">range</span> 1 <span class="keywd">to</span> 9 <span class="keywd">do</span>
            <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
              writeSmallDigit(row, column, digit);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showStrategyCheckboxes <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: button_is_on <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    rect(RIGHT_BUTTON_X - 6, RIGHT_BUTTON_MIN_Y - 3 + 39 * 2, 256, 39 * 11, black);
    <span class="keywd">for</span> number <span class="keywd">range</span> 3 <span class="keywd">to</span> 13 <span class="keywd">do</span>
      box(RIGHT_BUTTON_X + 4, RIGHT_BUTTON_MIN_Y + 4 + 39 * pred(number), 24, 24, FOREGROUND);
      setPosXY(info, 45, RIGHT_BUTTON_MIN_Y + 18 + 39 * pred(number));
      <span class="keywd">case</span> number <span class="keywd">of</span>
        <span class="keywd">when</span> {3}:
          write(info, <span class="stri">"singles"</span>);
          button_is_on := lookForSingles;
        <span class="keywd">when</span> {4}:
          write(info, <span class="stri">"hidden singles"</span>);
          button_is_on := lookForHiddenSingles;
        <span class="keywd">when</span> {5}:
          write(info, <span class="stri">"locked candidates"</span>);
          button_is_on := lookForLockedCandidates;
        <span class="keywd">when</span> {6}:
          write(info, <span class="stri">"naked pairs"</span>);
          button_is_on := lookForNakedPairs;
        <span class="keywd">when</span> {7}:
          write(info, <span class="stri">"naked triples"</span>);
          button_is_on := lookForNakedTriples;
        <span class="keywd">when</span> {8}:
          write(info, <span class="stri">"naked quads"</span>);
          button_is_on := lookForNakedQuads;
        <span class="keywd">when</span> {9}:
          write(info, <span class="stri">"hidden pairs"</span>);
          button_is_on := lookForHiddenPairs;
        <span class="keywd">when</span> {10}:
          write(info, <span class="stri">"hidden triples"</span>);
          button_is_on := lookForHiddenTriples;
        <span class="keywd">when</span> {11}:
          write(info, <span class="stri">"hidden quads"</span>);
          button_is_on := lookForHiddenQuads;
        <span class="keywd">when</span> {12}:
          write(info, <span class="stri">"x-wing"</span>);
          button_is_on := lookForXWing;
        <span class="keywd">when</span> {13}:
          write(info, <span class="stri">"swordfish"</span>);
          button_is_on := lookForSwordfish;
      <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">if</span> button_is_on <span class="keywd">then</span>
        put(RIGHT_BUTTON_X + 8, RIGHT_BUTTON_MIN_Y + 8 + 39 * pred(number),
            checkmark_pixmap);
      <span class="keywd">else</span>
        rect(RIGHT_BUTTON_X + 8, RIGHT_BUTTON_MIN_Y + 8 + 39 * pred(number),
            16, 16, BACKGROUND);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: hideStrategyCheckboxes <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    rect(RIGHT_BUTTON_X - 6, RIGHT_BUTTON_MIN_Y - 3 + 39 * 2, 256, 39 * 11, black);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showButtons <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 0 <span class="keywd">to</span> 12 <span class="keywd">do</span>
      box(TOP_BUTTON_MIN_X + 48 * number, TOP_BUTTON_Y, 32, 32, FOREGROUND);
      <span class="keywd">case</span> number <span class="keywd">of</span>
        <span class="keywd">when</span> {1 .. 9}:
          put(TOP_BUTTON_MIN_X + 8 + 48 * number, TOP_BUTTON_Y + 8,
              small_digits[number]);
        <span class="keywd">when</span> {10}:
          put(TOP_BUTTON_MIN_X + 8 + 48 * number, TOP_BUTTON_Y + 8,
              single_pixmap);
        <span class="keywd">when</span> {11}:
          put(TOP_BUTTON_MIN_X + 8 + 48 * number, TOP_BUTTON_Y + 8,
              double_pixmap);
        <span class="keywd">when</span> {12}:
          put(TOP_BUTTON_MIN_X + 8 + 48 * number, TOP_BUTTON_Y + 8,
              triple_pixmap);
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    put(EXIT_BUTTON_X, TOP_BUTTON_Y, exit_pixmap);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 2 <span class="keywd">do</span>
      box(RIGHT_BUTTON_X + 4, RIGHT_BUTTON_MIN_Y + 4 + 39 * pred(number), 24, 24, FOREGROUND);
      setPosXY(info, 45, RIGHT_BUTTON_MIN_Y + 18 + 39 * pred(number));
      <span class="keywd">case</span> number <span class="keywd">of</span>
        <span class="keywd">when</span> {1}:
          write(info, <span class="stri">"show candidates"</span>);
        <span class="keywd">when</span> {2}:
          write(info, <span class="stri">"show solution"</span>);
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: loadField (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(stri) = 81 <span class="keywd">then</span>
      <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 81 <span class="keywd">do</span>
        row := succ(pred(number) <span class="op">div</span> 9);
        column := succ(pred(number) <span class="op">rem</span> 9);
        <span class="keywd">if</span> stri[number] <span class="op">in</span> {<span class="stri">'1'</span> .. <span class="stri">'9'</span>} <span class="keywd">then</span>
          setRedDigit(row, column, ord(stri[number]) - ord(<span class="stri">'0'</span>));
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: processCommand <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: y <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: candidate_digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: button_num <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: button_is_on <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: digit <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;

  <span class="keywd">begin</span>
    <span class="comment"># loadField("002090400050400000100005060000109000007000200000008070400060001001080300500200006");</span>
    <span class="comment"># loadField("003406080006700100080000050002045000305000900070000300001230000004007000560000000");</span>
    <span class="comment"># loadField("700000019460190000000682704090000007000300405006700000001000000200074000000200300");</span>
    <span class="comment"># loadField("001080604037600000500000000000005000006010800000400000000000003000007520802090700");</span>
    <span class="comment"># loadField("002090107038600000400000000000005000009010300000400000000000004000007920806030700");</span>
    <span class="comment"># loadField("460001000002096000030000068000000037000607000510000000840000050000710900000300024");</span>
    <span class="comment"># loadField("050709030708000000090200080603010005000305010005060400040001000900000507060504100");</span>
    <span class="comment"># loadField("146700200905800070003600000000400020000008000000056900070100000000040036000009001");</span>
    showButtons;
    <span class="keywd">repeat</span>
      box(X_SHIFT + STRETCH_FACTOR * succ(column) + CELL_SHIFT,
          Y_SHIFT + STRETCH_FACTOR * succ(row) + CELL_SHIFT,
          CELL_SIZE, CELL_SIZE, light_red);
      flushGraphic;
<span class="comment">(*
      if not inputReady(KEYBOARD) then
        blueChanges;
      end if;
*)</span>
      <span class="keywd">if</span> show_solution <span class="keywd">then</span>
        solve;
        showSolved;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> candidate_digit >= 10 <span class="keywd">then</span>
        showNumberOfCandidates(candidate_digit - 9);
      <span class="keywd">else</span>
        showCandidatesDigit(candidate_digit);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> show_candidates <span class="keywd">then</span>
        showCandidates;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">repeat</span>
        command := readCommand(row, column);
        <span class="keywd">case</span> command <span class="keywd">of</span>
          <span class="keywd">when</span> {KEY_DOWN}:
            <span class="keywd">if</span> row &lt; 9 <span class="keywd">then</span>
              incr(row);
            <span class="keywd">else</span>
              row := 1;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {KEY_UP}:
            <span class="keywd">if</span> row > 1 <span class="keywd">then</span>
              decr(row);
            <span class="keywd">else</span>
              row := 9;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {KEY_RIGHT}:
            <span class="keywd">if</span> column &lt; 9 <span class="keywd">then</span>
              incr(column);
            <span class="keywd">else</span>
              column := 1;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {KEY_LEFT}:
            <span class="keywd">if</span> column > 1 <span class="keywd">then</span>
              decr(column);
            <span class="keywd">else</span>
              column := 9;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {KEY_HOME}:
            row := 1;
          <span class="keywd">when</span> {KEY_END}:
            row := 9;
          <span class="keywd">when</span> {KEY_PGUP}:
            column := 1;
          <span class="keywd">when</span> {KEY_PGDN}:
            column := 9;
          <span class="keywd">when</span> {<span class="stri">'q'</span>, <span class="stri">'Q'</span>, KEY_CLOSE}:
            quit := TRUE;
          <span class="keywd">when</span> {KEY_ESC}:
            bossMode(quit);
          <span class="keywd">when</span> {<span class="stri">'1'</span> .. <span class="stri">'9'</span>}:
            <span class="keywd">if</span> field[row][column] &lt;> 0 <span class="keywd">then</span>
              clearDigit(row, column);
              blueChanges;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> ord(command) - ord(<span class="stri">'0'</span>) <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
              setRedDigit(row, column, ord(command) - ord(<span class="stri">'0'</span>));
              blueChanges;
              <span class="comment">(* if column &lt; 9 then
                incr(column);
              end if; *)</span>
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {<span class="stri">' '</span>}:
            clearDigit(row, column);
            <span class="comment">(* if column &lt; 9 then
              incr(column);
            end if; *)</span>
          <span class="keywd">when</span> {KEY_MOUSE1}:
            x := clickedXPos(KEYBOARD);
            y := clickedYPos(KEYBOARD);
            <span class="keywd">if</span> x >= X_SHIFT + STRETCH_FACTOR * 2 + 1 <span class="op">and</span>
                x &lt;= X_SHIFT + STRETCH_FACTOR * 11 <span class="op">and</span>
                y >= Y_SHIFT + STRETCH_FACTOR * 2 + 1 <span class="op">and</span>
                y &lt;= Y_SHIFT + STRETCH_FACTOR * 11 <span class="keywd">then</span>
              row := pred(y - Y_SHIFT) <span class="op">div</span> STRETCH_FACTOR - 1;
              column := pred(x - X_SHIFT) <span class="op">div</span> STRETCH_FACTOR - 1;
            <span class="keywd">elsif</span> y >= TOP_BUTTON_Y <span class="op">and</span> y &lt;= TOP_BUTTON_Y + 32 <span class="op">and</span>
                x >= TOP_BUTTON_MIN_X <span class="op">and</span> x &lt;= TOP_BUTTON_MIN_X + 32 + 48 * 12 <span class="op">and</span>
                (x - TOP_BUTTON_MIN_X) <span class="op">rem</span> 48 &lt;= 32 <span class="keywd">then</span>
              box(TOP_BUTTON_MIN_X + 4 + 48 * candidate_digit, TOP_BUTTON_Y + 4, 24, 24, BACKGROUND);
              candidate_digit := (x - TOP_BUTTON_MIN_X) <span class="op">div</span> 48;
              box(TOP_BUTTON_MIN_X + 4 + 48 * candidate_digit, TOP_BUTTON_Y + 4, 24, 24, FOREGROUND);
            <span class="keywd">elsif</span> y >= TOP_BUTTON_Y <span class="op">and</span> y &lt;= TOP_BUTTON_Y + 32 <span class="op">and</span>
                x >= EXIT_BUTTON_X <span class="op">and</span> x &lt;= EXIT_BUTTON_X + 32 <span class="keywd">then</span>
              quit := TRUE;
            <span class="keywd">elsif</span> x >= RIGHT_BUTTON_X <span class="op">and</span> x &lt;= RIGHT_BUTTON_X + 32 <span class="op">and</span>
                y >= RIGHT_BUTTON_MIN_Y <span class="op">and</span> y &lt;= RIGHT_BUTTON_MIN_Y + 32 + 39 * 12 <span class="op">and</span>
                (y - RIGHT_BUTTON_MIN_Y) <span class="op">rem</span> 39 &lt;= 32 <span class="keywd">then</span>
              button_num := (y - RIGHT_BUTTON_MIN_Y) <span class="op">div</span> 39;
              <span class="keywd">case</span> button_num <span class="keywd">of</span>
                <span class="keywd">when</span> {0}:
                  show_candidates := <span class="op">not</span> show_candidates;
                  button_is_on := show_candidates;
                <span class="keywd">when</span> {1}:
                  show_solution := <span class="op">not</span> show_solution;
                  button_is_on := show_solution;
                  <span class="keywd">if</span> <span class="op">not</span> show_solution <span class="keywd">then</span>
                    hideStrategyCheckboxes;
                    initCandidates;
                    blueChanges;
                  <span class="keywd">else</span>
                    showStrategyCheckboxes;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">case</span>;
              <span class="keywd">if</span> show_solution <span class="keywd">then</span>
                <span class="keywd">case</span> button_num <span class="keywd">of</span>
                  <span class="keywd">when</span> {2}:
                    lookForSingles := <span class="op">not</span> lookForSingles;
                    <span class="keywd">if</span> <span class="op">not</span> lookForSingles <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForSingles;
                  <span class="keywd">when</span> {3}:
                    lookForHiddenSingles := <span class="op">not</span> lookForHiddenSingles;
                    <span class="keywd">if</span> <span class="op">not</span> lookForHiddenSingles <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForHiddenSingles;
                  <span class="keywd">when</span> {4}:
                    lookForLockedCandidates := <span class="op">not</span> lookForLockedCandidates;
                    <span class="keywd">if</span> <span class="op">not</span> lookForLockedCandidates <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForLockedCandidates;
                  <span class="keywd">when</span> {5}:
                    lookForNakedPairs := <span class="op">not</span> lookForNakedPairs;
                    <span class="keywd">if</span> <span class="op">not</span> lookForNakedPairs <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForNakedPairs;
                  <span class="keywd">when</span> {6}:
                    lookForNakedTriples := <span class="op">not</span> lookForNakedTriples;
                    <span class="keywd">if</span> <span class="op">not</span> lookForNakedTriples <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForNakedTriples;
                  <span class="keywd">when</span> {7}:
                    lookForNakedQuads := <span class="op">not</span> lookForNakedQuads;
                    <span class="keywd">if</span> <span class="op">not</span> lookForNakedQuads <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForNakedQuads;
                  <span class="keywd">when</span> {8}:
                    lookForHiddenPairs := <span class="op">not</span> lookForHiddenPairs;
                    <span class="keywd">if</span> <span class="op">not</span> lookForHiddenPairs <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForHiddenPairs;
                  <span class="keywd">when</span> {9}:
                    lookForHiddenTriples := <span class="op">not</span> lookForHiddenTriples;
                    <span class="keywd">if</span> <span class="op">not</span> lookForHiddenTriples <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForHiddenTriples;
                  <span class="keywd">when</span> {10}:
                    lookForHiddenQuads := <span class="op">not</span> lookForHiddenQuads;
                    <span class="keywd">if</span> <span class="op">not</span> lookForHiddenQuads <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForHiddenQuads;
                  <span class="keywd">when</span> {11}:
                    lookForXWing := <span class="op">not</span> lookForXWing;
                    <span class="keywd">if</span> <span class="op">not</span> lookForXWing <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForXWing;
                  <span class="keywd">when</span> {12}:
                    lookForSwordfish := <span class="op">not</span> lookForSwordfish;
                    <span class="keywd">if</span> <span class="op">not</span> lookForSwordfish <span class="keywd">then</span>
                      initCandidates;
                      blueChanges;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                    button_is_on := lookForSwordfish;
                <span class="keywd">end</span> <span class="keywd">case</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">if</span> show_solution <span class="op">or</span> button_num &lt;= 1 <span class="keywd">then</span>
                <span class="keywd">if</span> button_is_on <span class="keywd">then</span>
                  put(RIGHT_BUTTON_X + 8, RIGHT_BUTTON_MIN_Y + 8 + 39 * button_num,
                      checkmark_pixmap);
                <span class="keywd">else</span>
                  rect(RIGHT_BUTTON_X + 8, RIGHT_BUTTON_MIN_Y + 8 + 39 * button_num,
                      16, 16, BACKGROUND);
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">when</span> {KEY_MOUSE3}:
            x := clickedXPos(KEYBOARD);
            y := clickedYPos(KEYBOARD);
            <span class="keywd">if</span> x >= X_SHIFT + STRETCH_FACTOR * 2 + 1 <span class="op">and</span>
                x &lt;= X_SHIFT + STRETCH_FACTOR * 11 <span class="op">and</span>
                y >= Y_SHIFT + STRETCH_FACTOR * 2 + 1 <span class="op">and</span>
                y &lt;= Y_SHIFT + STRETCH_FACTOR * 11 <span class="keywd">then</span>
              row := pred(y - Y_SHIFT) <span class="op">div</span> STRETCH_FACTOR - 1;
              column := pred(x - X_SHIFT) <span class="op">div</span> STRETCH_FACTOR - 1;
              x -:= pred(column) * STRETCH_FACTOR + FIELD_XPOS + 12;
              y -:= pred(row) * STRETCH_FACTOR + FIELD_YPOS + 12;
              <span class="keywd">if</span> x >= 0 <span class="op">and</span> x &lt; 48 <span class="op">and</span> y >= 0 <span class="op">and</span> y &lt; 48 <span class="keywd">then</span>
                digit := 1 + x <span class="op">div</span> 16 + 3 * (y <span class="op">div</span> 16);
                <span class="keywd">if</span> digit <span class="op">in</span> candidates[row][column] <span class="keywd">then</span>
                  excl(candidates[row][column], digit);
                <span class="keywd">else</span>
                  incl(candidates[row][column], digit);
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">until</span> <span class="op">not</span> inputReady(KEYBOARD);
    <span class="keywd">until</span> quit;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeCentered (<span class="keywd">inout</span> <span class="type">text</span>: screen, <span class="op">in</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setPosXY(screen, (WINDOW_WIDTH - 632 - width(stdFont9, stri)) <span class="op">div</span> 2, yPos);
    writeln(screen, stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    screen(WINDOW_WIDTH, WINDOW_HEIGHT);
    selectInput(curr_win, KEY_CLOSE, TRUE);
    clear(BACKGROUND);
    info := openPixmapFontFile(curr_win, 630, 0);
    setFont(info, stdFont9);
    <span class="comment"># info := open(curr_win, 630, 0);</span>
    color(info, white, black);
    KEYBOARD := GRAPH_KEYBOARD;
    writeCentered(info, 280, <span class="stri">"S U D O K U 7"</span>);
    writeCentered(info, 312, <span class="stri">"Copyright (C) 2006  Thomas Mertes"</span>);
    writeCentered(info, 344, <span class="stri">"This program is free software under the"</span>);
    writeCentered(info, 360, <span class="stri">"terms of the GNU General Public License"</span>);
    writeCentered(info, 392, <span class="stri">"Sudoku7 is written in the"</span>);
    writeCentered(info, 408, <span class="stri">"Seed7 programming language."</span>);
    writeCentered(info, 440, <span class="stri">"Homepage:  https://seed7.net"</span>);
    initGrid;
    blue_digits := [0](
      createPixmap(blue_zero,  2, BACKGROUND),
      createPixmap(blue_one,   2, BACKGROUND),
      createPixmap(blue_two,   2, BACKGROUND),
      createPixmap(blue_three, 2, BACKGROUND),
      createPixmap(blue_four,  2, BACKGROUND),
      createPixmap(blue_five,  2, BACKGROUND),
      createPixmap(blue_six,   2, BACKGROUND),
      createPixmap(blue_seven, 2, BACKGROUND),
      createPixmap(blue_eight, 2, BACKGROUND),
      createPixmap(blue_nine,  2, BACKGROUND));
    red_digits := [0](
      createPixmap(red_zero,  2, BACKGROUND),
      createPixmap(red_one,   2, BACKGROUND),
      createPixmap(red_two,   2, BACKGROUND),
      createPixmap(red_three, 2, BACKGROUND),
      createPixmap(red_four,  2, BACKGROUND),
      createPixmap(red_five,  2, BACKGROUND),
      createPixmap(red_six,   2, BACKGROUND),
      createPixmap(red_seven, 2, BACKGROUND),
      createPixmap(red_eight, 2, BACKGROUND),
      createPixmap(red_nine,  2, BACKGROUND));
    small_digits := [0](
      createPixmap(blue_zero,  1, BACKGROUND),
      createPixmap(blue_one,   1, BACKGROUND),
      createPixmap(blue_two,   1, BACKGROUND),
      createPixmap(blue_three, 1, BACKGROUND),
      createPixmap(blue_four,  1, BACKGROUND),
      createPixmap(blue_five,  1, BACKGROUND),
      createPixmap(blue_six,   1, BACKGROUND),
      createPixmap(blue_seven, 1, BACKGROUND),
      createPixmap(blue_eight, 1, BACKGROUND),
      createPixmap(blue_nine,  1, BACKGROUND));
    single_pixmap := createPixmap(blue_single, 1, BACKGROUND);
    double_pixmap := createPixmap(blue_double, 1, BACKGROUND);
    triple_pixmap := createPixmap(blue_triple, 1, BACKGROUND);
    exit_pixmap := createPixmap(exit_pic, 2, BACKGROUND);
    checkmark_pixmap := createPixmap(checkmark_pic, 1, BACKGROUND);
    initCandidates;
    processCommand;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
