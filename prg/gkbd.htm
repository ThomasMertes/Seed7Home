<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  gkbd.sd7      Keyboard test program for graphic keyboard        *)</span>
<span class="comment">(*  Copyright (C) 2004, 2011 - 2013, 2020, 2021  Thomas Mertes      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keydescr.htm">keydescr.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/time.htm">time.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/duration.htm">duration.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/console.htm">console.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/stdfont12.htm">stdfont12.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/window.htm">window.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/tee.htm">tee.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">integer</span>: xSpeed <span class="keywd">is</span> 1;

<span class="keywd">const</span> <span class="type">array</span> <span class="type">[</span>boolean] <span class="type">color</span>: buttonColor <span class="keywd">is</span> [boolean] (light_blue, light_red);

<span class="keywd">const</span> <span class="type">type</span>: keyActiveHashType <span class="keywd">is</span> <span class="type">hash</span><span class="type">[</span><span class="type">char</span><span class="type">]</span> <span class="type">boolean</span>;

<span class="keywd">const</span> <span class="type">set</span> <span class="type">of</span> <span class="type">char</span>: mouseKeys <span class="keywd">is</span>
    {KEY_MOUSE1, KEY_MOUSE2, KEY_MOUSE3, KEY_MOUSE4, KEY_MOUSE5, KEY_MOUSE_FWD, KEY_MOUSE_BACK,
     KEY_SFT_MOUSE1, KEY_SFT_MOUSE2, KEY_SFT_MOUSE3, KEY_SFT_MOUSE4, KEY_SFT_MOUSE5, KEY_SFT_MOUSE_FWD, KEY_SFT_MOUSE_BACK,
     KEY_CTL_MOUSE1, KEY_CTL_MOUSE2, KEY_CTL_MOUSE3, KEY_CTL_MOUSE4, KEY_CTL_MOUSE5, KEY_CTL_MOUSE_FWD, KEY_CTL_MOUSE_BACK,
     KEY_ALT_MOUSE1, KEY_ALT_MOUSE2, KEY_ALT_MOUSE3, KEY_ALT_MOUSE4, KEY_ALT_MOUSE5, KEY_ALT_MOUSE_FWD, KEY_ALT_MOUSE_BACK};


<span class="keywd">const</span> <span class="type">proc</span>: displayKey (<span class="op">in</span> <span class="type">char</span>: ch, <span class="op">in</span> <span class="type">boolean</span>: keyActive) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">color</span>: keyColor <span class="keywd">is</span> color.value;
  <span class="keywd">begin</span>
    keyColor := buttonColor[keyActive];
    <span class="keywd">case</span> ch <span class="keywd">of</span>
      <span class="keywd">when</span> {KEY_SHIFT_LOCK}:     rect( 10, 150, 40, 20, keyColor);
      <span class="keywd">when</span> {KEY_LEFT_SHIFT}:     rect( 10, 180, 50, 20, keyColor);
      <span class="keywd">when</span> {KEY_LEFT_CONTROL}:   rect( 10, 210, 30, 20, keyColor);
      <span class="keywd">when</span> {KEY_LEFT_SUPER}:     rect( 50, 210, 30, 20, keyColor);
      <span class="keywd">when</span> {KEY_LEFT_ALT}:       rect( 90, 210, 30, 20, keyColor);
      <span class="keywd">when</span> {KEY_RIGHT_SHIFT}:    rect(390, 180, 50, 20, keyColor);
      <span class="keywd">when</span> {KEY_RIGHT_CONTROL}:  rect(410, 210, 30, 20, keyColor);
      <span class="keywd">when</span> {KEY_RIGHT_SUPER}:    rect(370, 210, 30, 20, keyColor);
      <span class="keywd">when</span> {KEY_RIGHT_ALT}:      rect(330, 210, 30, 20, keyColor);
      <span class="keywd">when</span> {KEY_SHIFT}:          rect( 10, 250, 10, 10, keyColor);
      <span class="keywd">when</span> {KEY_CONTROL}:        rect( 30, 250, 10, 10, keyColor);
      <span class="keywd">when</span> {KEY_SUPER}:          rect( 50, 250, 10, 10, keyColor);
      <span class="keywd">when</span> {KEY_ALT}:            rect( 70, 250, 10, 10, keyColor);
      <span class="keywd">when</span> {KEY_NUM_LOCK_ON}:    rect(580,  30, 10, 10, keyColor);
      <span class="keywd">when</span> {KEY_SHIFT_LOCK_ON}:  rect(600,  30, 10, 10, keyColor);
      <span class="keywd">when</span> {KEY_SCROLL_LOCK_ON}: rect(620,  30, 10, 10, keyColor);

      <span class="keywd">when</span> {KEY_ESC}:            rect( 10,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F1}:             rect( 70,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F2}:             rect(100,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F3}:             rect(130,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F4}:             rect(160,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F5}:             rect(200,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F6}:             rect(230,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F7}:             rect(260,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F8}:             rect(290,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F9}:             rect(330,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F10}:            rect(360,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F11}:            rect(390,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_F12}:            rect(420,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_SCROLL_LOCK}:    rect(485,  50, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_PAUSE}:          rect(515,  50, 20, 20, keyColor);

      <span class="keywd">when</span> {<span class="stri">'1'</span>}:                rect( 40,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'2'</span>}:                rect( 70,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'3'</span>}:                rect(100,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'4'</span>}:                rect(130,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'5'</span>}:                rect(160,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'6'</span>}:                rect(190,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'7'</span>}:                rect(220,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'8'</span>}:                rect(250,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'9'</span>}:                rect(280,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'0'</span>}:                rect(310,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_BS}:             rect(400,  90, 40, 20, keyColor);

      <span class="keywd">when</span> {KEY_TAB}:            rect( 10, 120, 35, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'Q'</span>}:                rect( 55, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'W'</span>}:                rect( 85, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'E'</span>}:                rect(115, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'R'</span>}:                rect(145, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'T'</span>}:                rect(175, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'Y'</span>}:                rect(205, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'U'</span>}:                rect(235, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'I'</span>}:                rect(265, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'O'</span>}:                rect(295, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'P'</span>}:                rect(325, 120, 20, 20, keyColor);

      <span class="keywd">when</span> {<span class="stri">'A'</span>}:                rect( 65, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'S'</span>}:                rect( 95, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'D'</span>}:                rect(125, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'F'</span>}:                rect(155, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'G'</span>}:                rect(185, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'H'</span>}:                rect(215, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'J'</span>}:                rect(245, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'K'</span>}:                rect(275, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'L'</span>}:                rect(305, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_NL}:             rect(400, 150, 40, 20, keyColor);

      <span class="keywd">when</span> {<span class="stri">'Z'</span>}:                rect( 80, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'X'</span>}:                rect(110, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'C'</span>}:                rect(140, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'V'</span>}:                rect(170, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'B'</span>}:                rect(200, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'N'</span>}:                rect(230, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {<span class="stri">'M'</span>}:                rect(260, 180, 20, 20, keyColor);

      <span class="keywd">when</span> {<span class="stri">' '</span>}:                rect(145, 210, 160, 20, keyColor);

      <span class="keywd">when</span> {KEY_NUM_LOCK}:       rect(550,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_HOME}:           rect(550, 120, 20, 20, keyColor);
                                 rect(485,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_UP}:             rect(580, 120, 20, 20, keyColor);
                                 rect(485, 180, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_PGUP}:           rect(610, 120, 20, 20, keyColor);
                                 rect(515,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_LEFT}:           rect(550, 150, 20, 20, keyColor);
                                 rect(455, 210, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_PAD_CENTER}:     rect(580, 150, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_RIGHT}:          rect(610, 150, 20, 20, keyColor);
                                 rect(515, 210, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_END}:            rect(550, 180, 20, 20, keyColor);
                                 rect(485, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_DOWN}:           rect(580, 180, 20, 20, keyColor);
                                 rect(485, 210, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_PGDN}:           rect(610, 180, 20, 20, keyColor);
                                 rect(515, 120, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_INS}:            rect(550, 210, 50, 20, keyColor);
                                 rect(455,  90, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_DEL}:            rect(610, 210, 20, 20, keyColor);
                                 rect(455, 120, 20, 20, keyColor);

      <span class="keywd">when</span> {KEY_MOUSE_FWD}:      rect(490, 240, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_MOUSE_BACK}:     rect(520, 240, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_MOUSE1}:         rect(550, 240, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_MOUSE2}:         rect(580, 240, 20, 20, keyColor);
      <span class="keywd">when</span> {KEY_MOUSE3}:         rect(610, 240, 20, 20, keyColor);
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkKey (<span class="keywd">inout</span> <span class="type">keyActiveHashType</span>: keyActive, <span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: buttonPressed <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    buttonPressed := buttonPressed(KEYBOARD, ch);
    <span class="keywd">if</span> ch <span class="op">not</span> <span class="op">in</span> keyActive <span class="op">or</span> keyActive[ch] &lt;> buttonPressed <span class="keywd">then</span>
      keyActive @:= [ch] buttonPressed;
      displayKey(ch, buttonPressed);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">text</span>: screen <span class="keywd">is</span> text.value;
    <span class="keywd">var</span> <span class="type">file</span>: logFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">keyActiveHashType</span>: keyActive <span class="keywd">is</span> keyActiveHashType.value;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 10;
    <span class="keywd">var</span> <span class="type">integer</span>: xIncr <span class="keywd">is</span> xSpeed;
    <span class="keywd">var</span> <span class="type">time</span>: waitTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    screen(640, 480);
    <span class="comment"># Enable the program to get KEY_CLOSE without closing the window.</span>
    selectInput(curr_win, KEY_CLOSE, TRUE);
    <span class="comment"># Enable the program to get KEY_RESIZE.</span>
    selectInput(curr_win, KEY_RESIZE, TRUE);
    screen := openPixmapFontFile(curr_win, 10, 26);
    setFont(screen, stdFont12);
    writeln(screen, <span class="stri">"Keyboard test program. Type ! to terminate the program"</span>);
    screen := openPixmapFontFile(curr_win, 20, 270);
    setFont(screen, stdFont12);
    OUT := openWindow(screen, 1, 1, 11, 500);
    logFile := STD_CONSOLE;
    OUT := openTee(OUT, logFile);
    KEYBOARD := GRAPH_KEYBOARD;
    flushGraphic;
    <span class="keywd">repeat</span>
      waitTime := time(NOW) + 30000 . MICRO_SECONDS;
      <span class="keywd">while</span> inputReady(KEYBOARD) <span class="keywd">do</span>
        ch := getc(KEYBOARD);
        write(ord(ch) &lt;&amp; <span class="stri">" "</span>);
        <span class="keywd">if</span> ch <span class="op">in</span> keyDescription <span class="keywd">then</span>
          <span class="keywd">if</span> ch = KEY_RESIZE <span class="keywd">then</span>
            writeln(<span class="stri">"KEY_RESIZE ("</span> &lt;&amp; width(curr_win) &lt;&amp; <span class="stri">", "</span> &lt;&amp; height(curr_win) &lt;&amp; <span class="stri">")"</span>);
          <span class="keywd">elsif</span> ch <span class="op">in</span> mouseKeys <span class="keywd">then</span>
            writeln(keyDescription[ch] &lt;&amp; <span class="stri">" ("</span> &lt;&amp; clickedXPos(KEYBOARD) &lt;&amp;
                    <span class="stri">", "</span> &lt;&amp; clickedYPos(KEYBOARD) &lt;&amp; <span class="stri">")"</span>);
          <span class="keywd">else</span>
            writeln(keyDescription[ch]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> ch >= <span class="stri">' '</span> <span class="op">and</span> ch &lt;= <span class="stri">'~'</span> <span class="op">or</span>
            ch >= <span class="stri">'\160;'</span> <span class="op">and</span> ch &lt;= char.last <span class="keywd">then</span>
          writeln(ch);
        <span class="keywd">else</span>
          writeln;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
      checkKey(keyActive, KEY_SHIFT_LOCK);
      checkKey(keyActive, KEY_LEFT_SHIFT);
      checkKey(keyActive, KEY_LEFT_CONTROL);
      checkKey(keyActive, KEY_LEFT_SUPER);
      checkKey(keyActive, KEY_LEFT_ALT);
      checkKey(keyActive, KEY_RIGHT_SHIFT);
      checkKey(keyActive, KEY_RIGHT_CONTROL);
      checkKey(keyActive, KEY_RIGHT_SUPER);
      checkKey(keyActive, KEY_RIGHT_ALT);
      checkKey(keyActive, KEY_SHIFT);
      checkKey(keyActive, KEY_CONTROL);
      checkKey(keyActive, KEY_SUPER);
      checkKey(keyActive, KEY_ALT);
      checkKey(keyActive, KEY_NUM_LOCK_ON);
      checkKey(keyActive, KEY_SHIFT_LOCK_ON);
      checkKey(keyActive, KEY_SCROLL_LOCK_ON);

      checkKey(keyActive, KEY_ESC);
      checkKey(keyActive, KEY_F1);
      checkKey(keyActive, KEY_F2);
      checkKey(keyActive, KEY_F3);
      checkKey(keyActive, KEY_F4);
      checkKey(keyActive, KEY_F5);
      checkKey(keyActive, KEY_F6);
      checkKey(keyActive, KEY_F7);
      checkKey(keyActive, KEY_F8);
      checkKey(keyActive, KEY_F9);
      checkKey(keyActive, KEY_F10);
      checkKey(keyActive, KEY_F11);
      checkKey(keyActive, KEY_F12);
      checkKey(keyActive, KEY_SCROLL_LOCK);
      checkKey(keyActive, KEY_PAUSE);

      checkKey(keyActive, <span class="stri">'1'</span>);
      checkKey(keyActive, <span class="stri">'2'</span>);
      checkKey(keyActive, <span class="stri">'3'</span>);
      checkKey(keyActive, <span class="stri">'4'</span>);
      checkKey(keyActive, <span class="stri">'5'</span>);
      checkKey(keyActive, <span class="stri">'6'</span>);
      checkKey(keyActive, <span class="stri">'7'</span>);
      checkKey(keyActive, <span class="stri">'8'</span>);
      checkKey(keyActive, <span class="stri">'9'</span>);
      checkKey(keyActive, <span class="stri">'0'</span>);
      checkKey(keyActive, KEY_BS);

      checkKey(keyActive, KEY_TAB);
      checkKey(keyActive, <span class="stri">'Q'</span>);
      checkKey(keyActive, <span class="stri">'W'</span>);
      checkKey(keyActive, <span class="stri">'E'</span>);
      checkKey(keyActive, <span class="stri">'R'</span>);
      checkKey(keyActive, <span class="stri">'T'</span>);
      checkKey(keyActive, <span class="stri">'Y'</span>);
      checkKey(keyActive, <span class="stri">'U'</span>);
      checkKey(keyActive, <span class="stri">'I'</span>);
      checkKey(keyActive, <span class="stri">'O'</span>);
      checkKey(keyActive, <span class="stri">'P'</span>);

      checkKey(keyActive, <span class="stri">'A'</span>);
      checkKey(keyActive, <span class="stri">'S'</span>);
      checkKey(keyActive, <span class="stri">'D'</span>);
      checkKey(keyActive, <span class="stri">'F'</span>);
      checkKey(keyActive, <span class="stri">'G'</span>);
      checkKey(keyActive, <span class="stri">'H'</span>);
      checkKey(keyActive, <span class="stri">'J'</span>);
      checkKey(keyActive, <span class="stri">'K'</span>);
      checkKey(keyActive, <span class="stri">'L'</span>);
      checkKey(keyActive, KEY_NL);

      checkKey(keyActive, <span class="stri">'Z'</span>);
      checkKey(keyActive, <span class="stri">'X'</span>);
      checkKey(keyActive, <span class="stri">'C'</span>);
      checkKey(keyActive, <span class="stri">'V'</span>);
      checkKey(keyActive, <span class="stri">'B'</span>);
      checkKey(keyActive, <span class="stri">'N'</span>);
      checkKey(keyActive, <span class="stri">'M'</span>);

      checkKey(keyActive, <span class="stri">' '</span>);

      checkKey(keyActive, KEY_NUM_LOCK);
      checkKey(keyActive, KEY_HOME);
      checkKey(keyActive, KEY_UP);
      checkKey(keyActive, KEY_PGUP);
      checkKey(keyActive, KEY_LEFT);
      checkKey(keyActive, KEY_PAD_CENTER);
      checkKey(keyActive, KEY_RIGHT);
      checkKey(keyActive, KEY_END);
      checkKey(keyActive, KEY_DOWN);
      checkKey(keyActive, KEY_PGDN);
      checkKey(keyActive, KEY_INS);
      checkKey(keyActive, KEY_DEL);

      checkKey(keyActive, KEY_MOUSE_FWD);
      checkKey(keyActive, KEY_MOUSE_BACK);
      checkKey(keyActive, KEY_MOUSE1);
      checkKey(keyActive, KEY_MOUSE2);
      checkKey(keyActive, KEY_MOUSE3);

      <span class="keywd">if</span> xPos > 620 <span class="keywd">then</span>
        xIncr := -xSpeed;
      <span class="keywd">elsif</span> xPos &lt; 10 <span class="keywd">then</span>
        xIncr := xSpeed;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> xIncr > 0 <span class="keywd">then</span>
        rect(xPos, 10, xIncr, 10, black);
      <span class="keywd">else</span> <span class="comment"># xIncr &lt; 0</span>
        rect(xPos + 10 + xIncr, 10, -xIncr, 10, black);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      xPos +:= xIncr;
      rect(xPos, 10, 10, 10, buttonColor[buttonPressed(KEYBOARD, ch)]);
      flushGraphic;
      await(waitTime);
    <span class="keywd">until</span> ch = <span class="stri">'!'</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
