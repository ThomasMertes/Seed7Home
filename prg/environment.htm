<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  environment.s7i  Support for program arguments and environment. *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2014, 2020, 2021  Thomas Mertes            *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Return the argument vector of the program as [[array]] of [[string]]s.
 *  The name of the program is not part of the argument vector.
 *  @return an array of strings containing the argument vector.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: argv (PROGRAM)                <span class="keywd">is</span> action <span class="stri">"PRC_ARGS"</span>;


<span class="comment">(**
 *  Returns the name of the program without path and extension.
 *  The name returned by ''name(PROGRAM)'' is the same for interpreted
 *  and compiled programs. The function ''name(PROGRAM)'' does not follow
 *  symbolic links. It determines, with which name a program was called.
 *  If several symbolic links refer to one program ''name(PROGRAM)''
 *  returns the name of the symbolic link.
 *  @return the name of the program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: name (PROGRAM)                      <span class="keywd">is</span> action <span class="stri">"PRG_OWN_NAME"</span>;


<span class="comment">(**
 *  Return the absolute path of the program.
 *  For an interpreted program this is the absolute path of the source file.
 *  For a compiled program this is the absolute path of the executable.
 *  The function path(PROGRAM) does follow symbolic links.
 *  @return the absolute path of the program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: path (PROGRAM)                      <span class="keywd">is</span> action <span class="stri">"PRG_OWN_PATH"</span>;


<span class="comment">(**
 *  Returns the absolute path of the directory containing the program.
 *  The function dir(PROGRAM) allows placing configuration data in the
 *  directory of the program. The function is based on path(PROGRAM).
 *  @return The absolute path of the directory containing the program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: dir (PROGRAM) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: absolutePath <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    absolutePath := path(PROGRAM);
    slashPos := rpos(absolutePath, <span class="stri">'/'</span>);
    <span class="keywd">if</span> slashPos = 1 <span class="keywd">then</span>
      absolutePath := <span class="stri">"/"</span>;
    <span class="keywd">elsif</span> slashPos > 1 <span class="keywd">then</span>
      absolutePath := absolutePath[.. pred(slashPos)];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Returns the filename of the program without path.
 *  The function is based on path(PROGRAM).
 *  @return The filename of the program.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: file (PROGRAM) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: filename <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: slashPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    filename := path(PROGRAM);
    slashPos := rpos(filename, <span class="stri">'/'</span>);
    <span class="keywd">if</span> slashPos &lt;> 0 <span class="keywd">then</span>
      filename := filename[succ(slashPos) ..];
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the value of an environment variable.
 *  The function getenv searches the environment for an environment variable
 *  with the given ''name''. If such an environment variable exists the
 *  corresponding [[string]] value is returned.
 *  @return the value of an environment variable or "",
 *          if the requested environment variable does not exist.
 *  @exception MEMORY_ERROR Not enough memory to convert ''name'' to the
 *             system string type or not enough memory to represent the
 *             result string.
 *  @exception RANGE_ERROR ''name'' cannot be converted to the system string
 *             type or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: getenv (<span class="op">in</span> <span class="type">string</span>: name)            <span class="keywd">is</span> action <span class="stri">"CMD_GETENV"</span>;


<span class="comment">(**
 *  Add or change an environment variable.
 *  The function setenv searches the environment for an environment variable
 *  with the given ''name''. If such an environment variable exists the
 *  corresponding value is changed to ''value''. If no environment variable
 *  with the given ''name'' exists a new environment variable ''name'' with
 *  the value ''value'' is created.
 *  @exception MEMORY_ERROR Not enough memory to convert ''name'' or ''value''
 *             to the system string type.
 *  @exception RANGE_ERROR ''name'' or ''value'' cannot be converted to the
 *             system string type or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setenv (<span class="op">in</span> <span class="type">string</span>: name, <span class="op">in</span> <span class="type">string</span>: value) <span class="keywd">is</span> action <span class="stri">"CMD_SETENV"</span>;


<span class="comment">(**
 *  Deletes the variable ''name'' from the environment.
 *  If ''name'' does not exist in the environment,
 *  then the function succeeds, and the environment is unchanged.
 *  @exception MEMORY_ERROR Not enough memory to convert ''name'' to the
 *             system string type.
 *  @exception RANGE_ERROR ''name'' cannot be converted to the system string
 *             type or a system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: unsetenv (<span class="op">in</span> <span class="type">string</span>: name)                 <span class="keywd">is</span> action <span class="stri">"CMD_UNSETENV"</span>;


<span class="comment">(**
 *  Returns the list of environment variable names as [[array]] of [[string]]s.
 *  @return the list of environment variable names.
 *  @exception MEMORY_ERROR Not enough memory to create the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: environment                   <span class="keywd">is</span> action <span class="stri">"CMD_ENVIRONMENT"</span>;
</pre>
</body>
</html>
