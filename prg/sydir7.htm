<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  sydir7.sd7    Utility to synchronize directory trees            *)</span>
<span class="comment">(*  Copyright (C) 2009 - 2019, 2021, 2023  Thomas Mertes            *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/stdio.htm">stdio.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/time.htm">time.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/duration.htm">duration.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">type</span>: syncFlags <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: doChanges <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">boolean</span>: doCopy <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">boolean</span>: doUpdate <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">boolean</span>: doTimeCorrection <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">boolean</span>: doRemoveFileAtDest <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: doOverwriteNewerDestFile <span class="keywd">is</span> FALSE;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">const</span> <span class="type">proc</span>: syncFile (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath,
    <span class="op">in</span> <span class="type">syncFlags</span>: flags) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="keywd">const</span> <span class="type">proc</span>: syncDir (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath,
    <span class="op">in</span> <span class="type">syncFlags</span>: flags) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: sourceContent <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: destContent <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: updateMtime <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: sourceIndex <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: destIndex <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">string</span>: sourceName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: destName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getMTime(sourcePath) + 1 . SECONDS >= getMTime(destPath) <span class="keywd">then</span>
      updateMtime := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    sourceContent := readDir(sourcePath);
    destContent := readDir(destPath);
    <span class="comment"># writeln("syncDir " &lt;&amp; literal(sourcePath) &lt;&amp; " " &lt;&amp; literal(destPath));</span>
    <span class="keywd">while</span> sourceIndex &lt;= length(sourceContent) <span class="op">and</span>
        destIndex &lt;= length(destContent) <span class="keywd">do</span>
      sourceName := sourceContent[sourceIndex];
      destName := destContent[destIndex];
      <span class="keywd">if</span> sourceName = destName <span class="keywd">then</span>
        <span class="comment"># writeln("syncFile = " &lt;&amp; literal(sourceName) &lt;&amp; " " &lt;&amp; literal(destName));</span>
        syncFile(sourcePath &amp; <span class="stri">"/"</span> &amp; sourceName,
                 destPath &amp; <span class="stri">"/"</span> &amp; destName, flags);
        incr(sourceIndex);
        incr(destIndex);
      <span class="keywd">elsif</span> sourceName &lt; destName <span class="keywd">then</span>
        <span class="comment"># writeln("syncFile &lt; " &lt;&amp; literal(sourceName) &lt;&amp; " " &lt;&amp; literal(destName));</span>
        syncFile(sourcePath &amp; <span class="stri">"/"</span> &amp; sourceName,
                 destPath &amp; <span class="stri">"/"</span> &amp; sourceName, flags);
        incr(sourceIndex);
      <span class="keywd">else</span> <span class="comment"># sourceName > destName then</span>
        <span class="comment"># writeln("syncFile > " &lt;&amp; literal(sourceName) &lt;&amp; " " &lt;&amp; literal(destName));</span>
        syncFile(sourcePath &amp; <span class="stri">"/"</span> &amp; destName,
                 destPath &amp; <span class="stri">"/"</span> &amp; destName, flags);
        incr(destIndex);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">while</span> sourceIndex &lt;= length(sourceContent) <span class="keywd">do</span>
      sourceName := sourceContent[sourceIndex];
      <span class="comment"># writeln("syncFile S " &lt;&amp; literal(sourceName));</span>
      syncFile(sourcePath &amp; <span class="stri">"/"</span> &amp; sourceName,
               destPath &amp; <span class="stri">"/"</span> &amp; sourceName, flags);
      incr(sourceIndex);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">while</span> destIndex &lt;= length(destContent) <span class="keywd">do</span>
      destName := destContent[destIndex];
      <span class="comment"># writeln("syncFile D " &lt;&amp; literal(destName));</span>
      syncFile(sourcePath &amp; <span class="stri">"/"</span> &amp; destName,
               destPath &amp; <span class="stri">"/"</span> &amp; destName, flags);
      incr(destIndex);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> updateMtime <span class="keywd">then</span>
      <span class="keywd">if</span> flags.doTimeCorrection <span class="keywd">then</span>
        <span class="comment"># writeln("update mtime " &lt;&amp; literal(sourcePath) &lt;&amp; " to " &lt;&amp; literal(destPath));</span>
        <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
          setMTime(destPath, getMTime(sourcePath));
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: equalFileContent (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: equal <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: sourceFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">file</span>: destFile <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">string</span>: sourceBlock <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: destBlock <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    sourceFile := open(sourcePath, <span class="stri">"r"</span>);
    <span class="keywd">if</span> sourceFile &lt;> STD_NULL <span class="keywd">then</span>
      destFile := open(destPath, <span class="stri">"r"</span>);
      <span class="keywd">if</span> destFile &lt;> STD_NULL <span class="keywd">then</span>
        equal := TRUE;
        <span class="keywd">while</span> equal <span class="op">and</span> <span class="op">not</span> eof(sourceFile) <span class="op">and</span> <span class="op">not</span> eof(destFile) <span class="keywd">do</span>
          sourceBlock := gets(sourceFile, 67108864);
          destBlock := gets(destFile, 67108864);
          equal := sourceBlock = destBlock;
        <span class="keywd">end</span> <span class="keywd">while</span>;
        <span class="keywd">if</span> <span class="op">not</span> eof(sourceFile) <span class="op">or</span> <span class="op">not</span> eof(destFile) <span class="keywd">then</span>
          equal := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        close(destFile);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      close(sourceFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: syncFile (<span class="op">in</span> <span class="type">string</span>: sourcePath, <span class="op">in</span> <span class="type">string</span>: destPath,
    <span class="op">in</span> <span class="type">syncFlags</span>: flags) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">fileType</span>: sourceType <span class="keywd">is</span> FILE_ABSENT;
    <span class="keywd">var</span> <span class="type">fileType</span>: destType <span class="keywd">is</span> FILE_ABSENT;
    <span class="keywd">var</span> <span class="type">time</span>: sourceTime <span class="keywd">is</span> time.value;
    <span class="keywd">var</span> <span class="type">time</span>: destTime <span class="keywd">is</span> time.value;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: dirContent <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: fileName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    sourceType := fileTypeSL(sourcePath);
    destType := fileTypeSL(destPath);
    <span class="keywd">if</span> sourceType = FILE_ABSENT <span class="keywd">then</span>
      <span class="keywd">if</span> destType = FILE_DIR <span class="keywd">then</span>
        <span class="keywd">if</span> flags.doRemoveFileAtDest <span class="keywd">then</span>
          writeln(<span class="stri">"remove directory "</span> &lt;&amp; literal(destPath));
          <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
            removeTree(destPath);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> destType &lt;> FILE_ABSENT <span class="keywd">then</span>
        <span class="keywd">if</span> flags.doRemoveFileAtDest <span class="keywd">then</span>
          writeln(<span class="stri">"remove file "</span> &lt;&amp; literal(destPath));
          <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
            removeFile(destPath);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> sourceType = FILE_SYMLINK <span class="keywd">then</span>
      <span class="keywd">if</span> destType = FILE_ABSENT <span class="keywd">then</span>
        <span class="keywd">block</span>
          <span class="keywd">if</span> flags.doCopy <span class="keywd">then</span>
            <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
              cloneFile(sourcePath, destPath);
            <span class="keywd">end</span> <span class="keywd">if</span>;
            writeln(<span class="stri">"copy symlink "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
          <span class="keywd">end</span> <span class="keywd">if</span>;
        exception
          catch FILE_ERROR:
            writeln(<span class="stri">" *** Cannot copy symlink "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
        <span class="keywd">end</span> <span class="keywd">block</span>;
      <span class="keywd">elsif</span> destType = FILE_SYMLINK <span class="keywd">then</span>
        <span class="keywd">if</span> readLink(sourcePath) &lt;> readLink(destPath) <span class="keywd">then</span>
          writeln(<span class="stri">" *** Source link "</span> &lt;&amp; literal(sourcePath) &lt;&amp;
                  <span class="stri">" and destination link "</span> &lt;&amp; literal(destPath) &lt;&amp;
                  <span class="stri">" point to different paths"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> destType = FILE_REGULAR <span class="op">and</span>
          fileSize(sourcePath) = fileSize(destPath) <span class="op">and</span> equalFileContent(sourcePath, destPath) <span class="keywd">then</span>
        writeln(<span class="stri">" *** Destination "</span> &lt;&amp; literal(destPath) &lt;&amp; <span class="stri">" is not a symbolic link but has the same content as the source"</span>);
      <span class="keywd">else</span>
        writeln(<span class="stri">" *** Destination "</span> &lt;&amp; literal(destPath) &lt;&amp; <span class="stri">" is not a symbolic link"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> sourceType = FILE_DIR <span class="keywd">then</span>
      <span class="keywd">if</span> destType = FILE_ABSENT <span class="keywd">then</span>
        <span class="keywd">if</span> flags.doCopy <span class="keywd">then</span>
          writeln(<span class="stri">"copy directory "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
          <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
            mkdir(destPath);
            syncDir(sourcePath, destPath, flags);
            setMTime(destPath, getMTime(sourcePath));
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> destType = FILE_DIR <span class="keywd">then</span>
        syncDir(sourcePath, destPath, flags);
      <span class="keywd">else</span>
        writeln(<span class="stri">" *** Destination "</span> &lt;&amp; literal(destPath) &lt;&amp; <span class="stri">" is not a directory"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> sourceType = FILE_REGULAR <span class="keywd">then</span>
      <span class="keywd">if</span> destType = FILE_ABSENT <span class="keywd">then</span>
        <span class="keywd">block</span>
          <span class="keywd">if</span> flags.doCopy <span class="keywd">then</span>
            writeln(<span class="stri">"copy file "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
            <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
              cloneFile(sourcePath, destPath);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        exception
          catch FILE_ERROR:
            writeln(<span class="stri">" *** Cannot copy file "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
        <span class="keywd">end</span> <span class="keywd">block</span>;
      <span class="keywd">elsif</span> destType = FILE_REGULAR <span class="keywd">then</span>
        sourceTime := getMTime(sourcePath);
        destTime := getMTime(destPath);
        <span class="comment"># writeln(sourceTime);</span>
        <span class="comment"># writeln(destTime);</span>
        <span class="keywd">if</span> sourceTime > destTime + 1 . SECONDS <span class="keywd">then</span>
          <span class="keywd">if</span> fileSize(sourcePath) = fileSize(destPath) <span class="op">and</span> equalFileContent(sourcePath, destPath) <span class="keywd">then</span>
            <span class="keywd">if</span> flags.doTimeCorrection <span class="keywd">then</span>
              writeln(<span class="stri">"Correct time of identical files "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" - "</span> &lt;&amp; literal(destPath));
              <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
                setMTime(destPath, sourceTime);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            <span class="keywd">if</span> flags.doUpdate <span class="keywd">then</span>
              writeln(<span class="stri">"update file "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
              <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
                removeFile(destPath);
                cloneFile(sourcePath, destPath);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> sourceTime &lt; destTime - 1 . SECONDS <span class="keywd">then</span>
          <span class="keywd">if</span> fileSize(sourcePath) = fileSize(destPath) <span class="op">and</span> equalFileContent(sourcePath, destPath) <span class="keywd">then</span>
            <span class="keywd">if</span> flags.doTimeCorrection <span class="keywd">then</span>
              writeln(<span class="stri">"Correct time of identical files "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" - "</span> &lt;&amp; literal(destPath));
              <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
                setMTime(destPath, sourceTime);
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> flags.doOverwriteNewerDestFile <span class="keywd">then</span>
            writeln(<span class="stri">"replace newer dest file "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
            <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
              removeFile(destPath);
              cloneFile(sourcePath, destPath);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            <span class="keywd">if</span> flags.doUpdate <span class="keywd">then</span>
              writeln(<span class="stri">" *** Destination newer "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" - "</span> &lt;&amp; literal(destPath));
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="comment"># writeln(sourceTime &lt;&amp; "   " &lt;&amp; destTime &lt;&amp; "   " &lt;&amp; destTime - 1 . SECONDS);</span>
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> fileSize(sourcePath) &lt;> fileSize(destPath) <span class="keywd">then</span>
          <span class="keywd">if</span> flags.doUpdate <span class="keywd">then</span>
            writeln(<span class="stri">"Correct file "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" to "</span> &lt;&amp; literal(destPath));
            <span class="keywd">if</span> flags.doChanges <span class="keywd">then</span>
              removeFile(destPath);
              cloneFile(sourcePath, destPath);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        writeln(<span class="stri">" *** Destination "</span> &lt;&amp; literal(destPath) &lt;&amp; <span class="stri">" is not a regular file"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      writeln(<span class="stri">" *** Source "</span> &lt;&amp; literal(sourcePath) &lt;&amp; <span class="stri">" has file type "</span> &lt;&amp; sourceType);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: numOfFileNames <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: parameter <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: fromName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: toName <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: commandOptionProvided <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: error <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">syncFlags</span>: flags <span class="keywd">is</span> syncFlags.value;
    <span class="keywd">var</span> <span class="type">string</span>: answer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length(argv(PROGRAM)) &lt; 2 <span class="keywd">then</span>
      writeln(<span class="stri">"Sydir7 Version 1.1 - Utility to synchronize directory trees"</span>);
      writeln(<span class="stri">"Copyright (C) 2009 - 2019, 2021, 2023 Thomas Mertes"</span>);
      writeln(<span class="stri">"This is free software; see the source for copying conditions.  There is NO"</span>);
      writeln(<span class="stri">"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."</span>);
      writeln(<span class="stri">"Sydir7 is written in the Seed7 programming language"</span>);
      writeln(<span class="stri">"Homepage: http://seed7.sourceforge.net"</span>);
      writeln;
      writeln(<span class="stri">"usage: sydir7 {-c|-n|-t|-a} source destination"</span>);
      writeln;
      writeln(<span class="stri">"Options:"</span>);
      writeln(<span class="stri">"  -c Copy files. Remove destination files, if they are missing in source."</span>);
      writeln(<span class="stri">"     Overwrite newer destination files with older source files."</span>);
      writeln(<span class="stri">"  -n No change. Write, what should be done to sync, but do not change"</span>);
      writeln(<span class="stri">"     anything."</span>);
      writeln(<span class="stri">"  -t Just do time corrections of identical files."</span>);
      writeln(<span class="stri">"  -a Just add files that are missing in the destination."</span>);
      writeln;
    <span class="keywd">else</span>
      <span class="keywd">for</span> parameter <span class="keywd">range</span> argv(PROGRAM) <span class="keywd">do</span>
        <span class="keywd">if</span> startsWith(parameter, <span class="stri">"-"</span>) <span class="keywd">then</span>
          <span class="keywd">if</span> parameter = <span class="stri">"-c"</span> <span class="keywd">then</span>
            flags.doRemoveFileAtDest := TRUE;
            flags.doOverwriteNewerDestFile := TRUE;
          <span class="keywd">elsif</span> parameter = <span class="stri">"-n"</span> <span class="keywd">then</span>
            flags.doChanges := FALSE;
          <span class="keywd">elsif</span> parameter = <span class="stri">"-t"</span> <span class="keywd">then</span>
            flags.doCopy := FALSE;
            flags.doUpdate := FALSE;
          <span class="keywd">elsif</span> parameter = <span class="stri">"-a"</span> <span class="keywd">then</span>
            flags.doUpdate := FALSE;
            flags.doTimeCorrection := FALSE;
          <span class="keywd">else</span>
            writeln(<span class="stri">" *** Unknown option: "</span> &lt;&amp; parameter);
            error := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> parameter <span class="op">in</span> {<span class="stri">"-c"</span>, <span class="stri">"-t"</span>, <span class="stri">"-a"</span>} <span class="keywd">then</span>
            <span class="keywd">if</span> commandOptionProvided <span class="keywd">then</span>
              writeln(<span class="stri">" *** Only one option of -c, -t or -a is allowed."</span>);
              error := TRUE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            commandOptionProvided := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          incr(numOfFileNames);
          <span class="keywd">case</span> numOfFileNames <span class="keywd">of</span>
            <span class="keywd">when</span> {1}: fromName := convDosPath(parameter);
            <span class="keywd">when</span> {2}: toName := convDosPath(parameter);
          <span class="keywd">end</span> <span class="keywd">case</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> numOfFileNames &lt;> 2 <span class="keywd">then</span>
        writeln(<span class="stri">" *** Wrong number of parameters."</span>);
        error := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> error <span class="op">and</span> flags.doChanges <span class="op">and</span>
          (flags.doRemoveFileAtDest <span class="op">or</span> flags.doOverwriteNewerDestFile) <span class="keywd">then</span>
        writeln(<span class="stri">"This will remove newer files at the destination!"</span>);
        write(<span class="stri">"To proceed type \"yes\": "</span>);
        readln(answer);
        <span class="keywd">if</span> answer &lt;> <span class="stri">"yes"</span> <span class="keywd">then</span>
          error := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> error <span class="keywd">then</span>
        syncFile(fromName, toName, flags);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
