<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  shisen.sd7    Shisen game                                       *)</span>
<span class="comment">(*  Copyright (C) 2005, 2007, 2012, 2013, 2020  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/text.htm">text.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pic_util.htm">pic_util.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/dialog.htm">dialog.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/time.htm">time.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/duration.htm">duration.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pic32.htm">pic32.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/vecfont10.htm">vecfont10.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/cronos27.htm">cronos27.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pixmap_file.htm">pixmap_file.s7i</a>"</span>;


<span class="keywd">var</span> <span class="type">text</span>: screen <span class="keywd">is</span> STD_NULL;

<span class="keywd">const</span> <span class="type">integer</span>: UPPER_BORDER <span class="keywd">is</span> 64;
<span class="keywd">const</span> <span class="type">integer</span>: LEFT_BORDER <span class="keywd">is</span> 64;
<span class="keywd">const</span> <span class="type">integer</span>: CARD_SIZE <span class="keywd">is</span> 64;
<span class="keywd">const</span> <span class="type">integer</span>: CARD_BORDER <span class="keywd">is</span> 4;
<span class="keywd">const</span> <span class="type">integer</span>: WINDOW_WIDTH <span class="keywd">is</span> (CARD_SIZE + 2 * CARD_BORDER) * 12 + 2 * LEFT_BORDER;
<span class="keywd">const</span> <span class="type">integer</span>: WINDOW_HEIGHT <span class="keywd">is</span> (CARD_SIZE + 2 * CARD_BORDER) * 8 + 2 * UPPER_BORDER;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_SIZE <span class="keywd">is</span> CARD_SIZE + 2 * CARD_BORDER;
<span class="keywd">const</span> <span class="type">integer</span>: HALF_FIELD <span class="keywd">is</span> FIELD_SIZE <span class="op">div</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: FRAME_THICKNESS <span class="keywd">is</span> 3;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_LINES <span class="keywd">is</span> 8;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_COLUMNS <span class="keywd">is</span> 12;
<span class="keywd">const</span> <span class="type">integer</span>: COMPUTER_HIT_XPOS <span class="keywd">is</span> 8;
<span class="keywd">const</span> <span class="type">integer</span>: PLAYER_HIT_XPOS <span class="keywd">is</span> UPPER_BORDER + FIELD_LINES * FIELD_SIZE + FIELD_SIZE + 8;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">PRIMITIVE_WINDOW</span>: digit_pixmap <span class="keywd">is</span> 0 <span class="op">times</span> PRIMITIVE_WINDOW.value;

<span class="keywd">const</span> <span class="type">type</span>: cardType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: picture <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: visibleType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    normal, marked, removed
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">type</span>: fieldType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: cardNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">visibleType</span>: visible <span class="keywd">is</span> normal;
    <span class="keywd">var</span> <span class="type">boolean</span>: selected <span class="keywd">is</span> FALSE;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">var</span> <span class="type">integer</span>: playerHits <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: computerHits <span class="keywd">is</span> 0;


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: big_bush_pic <span class="keywd">is</span> [](
  <span class="stri">"     G G  GG  G  G   G G        "</span>,
  <span class="stri">"      GG   G  G G    GGGGG      "</span>,
  <span class="stri">"       G    G GG    gg G   G  G "</span>,
  <span class="stri">"    GGGGG    GGG G gg  G   G GG "</span>,
  <span class="stri">" G     Ggg G  gg Ggg   G   gg   "</span>,
  <span class="stri">" GG   G  ggG  gg gg   gG  ggGG  "</span>,
  <span class="stri">"   G      gg  ggggG  gg  gg     "</span>,
  <span class="stri">" G  GGGGggggg ggg   gg  ggggGGGG"</span>,
  <span class="stri">"  G  G      bbbb    bbggg       "</span>,
  <span class="stri">"GGGG   G  G  bbb   bbgg G    GG "</span>,
  <span class="stri">"   gg   GG G  bb  bb  G   G  G  "</span>,
  <span class="stri">" GGGgg   G  ggbb bb G   G GggGGG"</span>,
  <span class="stri">"     gg  gG  gbbbb  G gg  gg    "</span>,
  <span class="stri">"  G   gg g bb bbb   ggg  ggggGG "</span>,
  <span class="stri">" GGG   gbg  bbbb  G gg  gg G    "</span>,
  <span class="stri">"    G   bg   bbb G  g  gg   G   "</span>,
  <span class="stri">"  G  G   gb   bbbb  bbbb  G    G"</span>,
  <span class="stri">"   g  g  gbb  bbb   bbbg  G  GG "</span>,
  <span class="stri">"GGGgggggbb bb bb  G bb    gg G  "</span>,
  <span class="stri">"       bbb  bbbb  GbbggGG ggg   "</span>,
  <span class="stri">"  G  GGGbb  Gbbb  bb      ggGGG "</span>,
  <span class="stri">"   G     bb   bb bbggGG  gg     "</span>,
  <span class="stri">"    gg G  bb  bbbb      ggggGGGG"</span>,
  <span class="stri">" GGggggG GGbb bbb      gggg     "</span>,
  <span class="stri">"   G  gg    bbbb   G  bb  GGGG  "</span>,
  <span class="stri">"  G    ggG   bbb  G  bb    G    "</span>,
  <span class="stri">"     G  gg  G bbgg  bb          "</span>,
  <span class="stri">"  GGgggggbb  Gbbg  bbbggggGGGG  "</span>,
  <span class="stri">"    G     bb  bb  bb   G        "</span>,
  <span class="stri">"       GGGGbb bb bb     G       "</span>,
  <span class="stri">"            bbbbbbGGGG          "</span>,
  <span class="stri">"             bbbb               "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: large_gem_pic <span class="keywd">is</span> [](
  <span class="stri">"                                "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"     RRRRRR          RRRRRR     "</span>,
  <span class="stri">"   RRRRRRRRRR      RRRRRRRRRR   "</span>,
  <span class="stri">"  RRRrrrrrrRRR    RRRrrrrrrRRR  "</span>,
  <span class="stri">" RRrrrrrrrrrrRR  RRrrrrrrrrrrRR "</span>,
  <span class="stri">" RRrrrrrrrrrrrRRRRrrrrrrrrrrrRR "</span>,
  <span class="stri">"RRrrrrrrrrrrrrrRRrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">" RRrrrrrrrrrrrrrrrrrrrrrrrrrrRR "</span>,
  <span class="stri">" RRrrrrrrrrrrrrrrrrrrrrrrrrrrRR "</span>,
  <span class="stri">"  RRrrrrrrrrrrrrrrrrrrrrrrrrRR  "</span>,
  <span class="stri">"   RRrrrrrrrrrrrrrrrrrrrrrrRR   "</span>,
  <span class="stri">"    RRrrrrrrrrrrrrrrrrrrrrRR    "</span>,
  <span class="stri">"     RRrrrrrrrrrrrrrrrrrrRR     "</span>,
  <span class="stri">"      RRrrrrrrrrrrrrrrrrRR      "</span>,
  <span class="stri">"       RRrrrrrrrrrrrrrrRR       "</span>,
  <span class="stri">"        RRrrrrrrrrrrrrRR        "</span>,
  <span class="stri">"         RRrrrrrrrrrrRR         "</span>,
  <span class="stri">"          RRrrrrrrrrRR          "</span>,
  <span class="stri">"           RRrrrrrrRR           "</span>,
  <span class="stri">"            RRrrrrRR            "</span>,
  <span class="stri">"             RRrrRR             "</span>,
  <span class="stri">"              RRRR              "</span>,
  <span class="stri">"               RR               "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: fairy_pic <span class="keywd">is</span> [](
  <span class="stri">"      xxxxx                   YYYY                   xxxxx      "</span>,
  <span class="stri">"    xxxcccxxx               YYYYYYYY               xxxcccxxx    "</span>,
  <span class="stri">"   xxcccccccxx             YYYYYYYYYY             xxcccccccxx   "</span>,
  <span class="stri">"  xxcccccccccxx           YYYYYYYYYYYY           xxcccccccccxx  "</span>,
  <span class="stri">"  xcccccccccccxx          YYYWWWWWWYYY          xxcccccccccccx  "</span>,
  <span class="stri">"  xccccccccccccxx        YYYWWWWWWWWYYY        xxccccccccccccx  "</span>,
  <span class="stri">"  xxccccccccccccxx       YYYWBBWWBBWYYY       xxccccccccccccxx  "</span>,
  <span class="stri">"   xcccccccccccccxx      YYYWWWWWWWWYYY      xxcccccccccccccx   "</span>,
  <span class="stri">"   xxcccccccccccccxx     YYYWWWWWWWWYYY     xxcccccccccccccxx   "</span>,
  <span class="stri">"    xxxccccccccccccxx    YYYWWOWWOWWYYY    xxccccccccccccxxx    "</span>,
  <span class="stri">"   xxcccccBccccBccccxx   YYYWWWOOWWWYYY   xxcccccccccccccccxx   "</span>,
  <span class="stri">"   xcccccccBccBccccccxx     XWWWWWWX     xxcccccccccccccccccx   "</span>,
  <span class="stri">"  xxccccccccccccccccccxx     XWWWWX     xxccccccccccccccccccxx  "</span>,
  <span class="stri">"  xccccccBBcWWcBBccccccxxXXXXXWWWWXXXXXxxccccccccccccccccccccx  "</span>,
  <span class="stri">"  xcccccccccWWccccccccccxWWWWWWWWWWWWWWxcccccccccccccccccccccx  "</span>,
  <span class="stri">"  xxccccccBcRRcBcccccccWWWWWWWWWWWWWWWWWWcccccccccccccccccccxx  "</span>,
  <span class="stri">"   xcccccBccRRccBcccccWWWWWWWWWWWWWWWWWWWWccccccccccccccccccx   "</span>,
  <span class="stri">"   xxcccccccRRcccccccWWWWWRRRWWWWWWRRRWWWWWccccccccccccccccxx   "</span>,
  <span class="stri">"    xxxcccccRRccccccWWWWWRRRRRWWWWRRRRRWWWWWcccccccccccccxxx    "</span>,
  <span class="stri">"   xxcccccccRRcccccWWWWWRRRRRRRWWRRRRRRRWWWWWccccccccccccccxx   "</span>,
  <span class="stri">"   xccccccccRRccccWWWWWcRRRRRRRWWRRRRRRRcWWWWWccccccccccccccx   "</span>,
  <span class="stri">"  xxccccccccRRcccWWWWWccRRRRRRRWWRRRRRRRccWWWWWcccccccccccccxx  "</span>,
  <span class="stri">"  xcccccccccRRccWWWWWcccxRRRRRWWWWRRRRRxcccWWWWWcccccccccccccx  "</span>,
  <span class="stri">"  xcccccccccRRcWWWWWcccxxcRRRWWWWWWRRRcxxcccWWWWWccccccccccccx  "</span>,
  <span class="stri">"  xxccccccccRRWWWWWcccxx  XWWWWWWWWWWX  xxcccWWWWWccccccccccxx  "</span>,
  <span class="stri">"   xcccccccWWWWWWWcccxx   XWWWWWWWWWWX   xxcccWWWWWWWWccccccx   "</span>,
  <span class="stri">"   xxcccccWWWWWWWcccxx    XWWWWWWWWWWX    xxcccWWWWWWccccccxx   "</span>,
  <span class="stri">"    xxxcccWWWWWWcccxx     XWWWWYYWWWWX     xxcccWWWWWWcccxxx    "</span>,
  <span class="stri">"   xxcccccWWWWWcccxx     XWWWWWYYWWWWWX     xxccWWWWWWWccccxx   "</span>,
  <span class="stri">"   xcccccccWWWcccxx      XWWWWWWWWWWWWX      xxccWWWWWccccccx   "</span>,
  <span class="stri">"  xxccccccccccccxx      XWWWWWWWWWWWWWWX      xxccWWccccccccxx  "</span>,
  <span class="stri">"  xccccccccccccxx      XRRRRRRRRRRRRRRRRX      xxccccccccccccx  "</span>,
  <span class="stri">"  xcccccccccccxx       XWWRRRRRRRRRRRRWWX       xxcccccccccccx  "</span>,
  <span class="stri">"  xxcccccccccxx       XWWWWWRRRRRRRRWWWWWX       xxcccccccccxx  "</span>,
  <span class="stri">"   xxcccccccxx        XWWWWWWRRRRRRWWWWWWX        xxcccccccxx   "</span>,
  <span class="stri">"    xxxcccxxx         XWWWWWWWRRRRWWWWWWWX         xxxcccxxx    "</span>,
  <span class="stri">"      xxxxx           XWWWWWWWRRRRWWWWWWWX           xxxxx      "</span>,
  <span class="stri">"                      XWWWWWWWWRRWWWWWWWWX                      "</span>,
  <span class="stri">"                       XWWWWWWWRRWWWWWWWX                       "</span>,
  <span class="stri">"                       XWWWWWWWXXWWWWWWWX                       "</span>,
  <span class="stri">"                        XWWWWWWXXWWWWWWX                        "</span>,
  <span class="stri">"                        XWWWWWWXXWWWWWWX                        "</span>,
  <span class="stri">"                        XWWWWWWXXWWWWWWX                        "</span>,
  <span class="stri">"                        XWWWWWWXXWWWWWWX                        "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                          XWWWWXXWWWWX                          "</span>,
  <span class="stri">"                         XWWWWWXXWWWWWX                         "</span>,
  <span class="stri">"                        XWWWWWWXXWWWWWWX                        "</span>,
  <span class="stri">"                        XWWWWWWX WWWWWWX                        "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: computer_pic <span class="keywd">is</span> [](
  <span class="stri">"ccccccccccccccccccc                                 YYYYY       "</span>,
  <span class="stri">"ccccccccccccccccccc                                YYYYYYY      "</span>,
  <span class="stri">"cc               cc                               YYYYYYYY      "</span>,
  <span class="stri">"cc WWW  R R  WWW cc                               YYYYYYYYY     "</span>,
  <span class="stri">"cc  W  RRRRR WWW cc                               YYYYYYYYY     "</span>,
  <span class="stri">"cc  W  RRRRR  W  cc                               XWWWYYYYY     "</span>,
  <span class="stri">"cc  W   RRR  WWW cc                                cWWYYYYY     "</span>,
  <span class="stri">"cc  W   RRR   W  cc                              XWWWWYYYYY     "</span>,
  <span class="stri">"cc WWW   R   W W cc                              XWWWWRYYYY     "</span>,
  <span class="stri">"cc               cc                               XWWWYYYYY     "</span>,
  <span class="stri">"cc ccccccccccc   cc                                OWWYYYYY     "</span>,
  <span class="stri">"cc WWWWWWWWWWW   cc                               XWWWWWX       "</span>,
  <span class="stri">"cc W         W   cc                                XWWWX        "</span>,
  <span class="stri">"cc W WWWW WW W   cc                                XWWWX        "</span>,
  <span class="stri">"cc W         W   cc                                RRRRR  GGG   "</span>,
  <span class="stri">"cc W   ccccccccc cc                                RRRRR GGGG   "</span>,
  <span class="stri">"cc W W WWWWWWWWW cc                                RRRRRRGGGG   "</span>,
  <span class="stri">"cc W   W       W cc                               RRRRRRRGGGG cc"</span>,
  <span class="stri">"cc WWWWW  RRGG W cc                              RRRRRRRRGGGG cc"</span>,
  <span class="stri">"cc     W RRRR  W cc                             RRRRRRRRRGGGGccc"</span>,
  <span class="stri">"cc     W  RR   W cc                             RRRRRRRRRGGGGccc"</span>,
  <span class="stri">"cc     WWWWWWWWW cc                             RRRRRRRRRGGGGccc"</span>,
  <span class="stri">"cc               cc                              RRRRRRRRGGGGccc"</span>,
  <span class="stri">"ccccccccccccccccccc                               RRRRRRRGGGG cc"</span>,
  <span class="stri">"ccccccccccccccccccc                               RRRRRRRGGGG cc"</span>,
  <span class="stri">"       xxxxx      R   G  R                       RRRRRRRRGGGG cc"</span>,
  <span class="stri">"       xxxxx       R  G R                        RRRRRRRRGGGG cc"</span>,
  <span class="stri">"       xxxxx        R GR                        RRRRRRRRR GGG cc"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxxxxx BBBB                     RRRRRRRRRRRR     cc"</span>,
  <span class="stri">"xxxxxxxxxxxWWWWWWxx BBBB        XXXXX     RRRRRRRRRRRRRRR     cc"</span>,
  <span class="stri">"xxWWxxxxxxxxxxxxxxx BBBB  cccc XWWWWWXXRRRRRRRRRR  RRRRRR     cc"</span>,
  <span class="stri">"xxWWxxxxxxxWWWWWWxx BBBB  cccccccWWWWWWRRRRRRR     RRRRRR     cc"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxxxxx BBBB  cccccccccWWWWRRRR        GGGGGG     cc"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb        GGGGGG     cc"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb        BBBBBBB    cc"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb       BBBBBBBB    cc"</span>,
  <span class="stri">"  bbbb                  bbbb                  BBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb              BBBBBBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb          BBBBBBBBBBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb       BBBBBBBBBBBBBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb      BBBBBBBBBBBBBBBBBBBBBBBB    cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBBBBBBBBBBBBBBBBBBBB    cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBBBBBBBBBBBBBBBBBBB     cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBBBBBBBBBBBBBBBBB       cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBGGGGGGGGGGGGGGGGGGGGG  cc"</span>,
  <span class="stri">"  bbbb            X     bbbb     BBBBBGGGGGGGGGGGGGGGGGGGGGGG cc"</span>,
  <span class="stri">"  bbbb      X    XWX    bbbb     BBBBBGGGGGGGGGGGGGGGGGGGGGGG cc"</span>,
  <span class="stri">"  bbbb     XWX  XWWX    bbbb     BBBBBGGGGGGGGGGGGGGGGGGGGGGG cc"</span>,
  <span class="stri">"  bbbb     XWWXXWWWX    bbbb     BBBBB          ccc  cccccc  ccc"</span>,
  <span class="stri">"  bbbb    XWWWXWWWWX    bbbb     BBBBB          ccc ccccccccccc "</span>,
  <span class="stri">"  bbbb    xxxxxxxxxx    bbbb     BBBBB          ccc cccccccccc  "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xxxWxxxWxx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xWxxxWxxxW    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xxxWxxxWxx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xWxxxWxxxW    bbbb     BBBBB   ccccccccccccccccc      "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB ccccccccccccccccccccc    "</span>,
  <span class="stri">"  bbbb    xxxWxxxWxx    bbbb     BBBBB ccccccccccccccccccccc    "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb  RRRRRRRR bbb      bbb      bbb    "</span>,
  <span class="stri">"  bbbb    xWxxxWxxxW    bbbb RRRRRRRRR bbb      bbb      bbb    "</span>,
  <span class="stri">"  bbbb    xxxxxxxxxx    bbbb RRRRRRRRR bbb      bbb      bbb    "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: sea_pic <span class="keywd">is</span> [](
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccOOOOOOOcccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOcccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOcccccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOcccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOcccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOOOccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOOOccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOOOccc"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOOOOBOOOOOBOOOOOBOOOOBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOOOOOBOOOOOBOOOOOBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOOOBOOOBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYRRRRRYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYbbbbbbYYYYYYYYYYYYYYYYYYYWRRRRWWWWYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYbbbbbbbbbYYYYYYYYYYYYYYYYYYWWRRRWWWWWWWYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YbbbbWWWWWWYYYYYWWWRWWWWWWWWWWWRRWWWWWWWWWWYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YbbbWWBWWWWWYYWWWWxRWWWWWWWWWWWRWWWWWWWWWWWWWYYYYYYYYYYYYYWWWYYY"</span>,
  <span class="stri">"bbbbWWBWWOWWWWWWWWWWxxWWWWWWWWWRWWWWWWWWWWWWWWWYYYYYYWWWWWWWWWYY"</span>,
  <span class="stri">"bbbbWWWWWWOWWWWWWWWWWWxxWWWWWWWRWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWY"</span>,
  <span class="stri">"bbbbWWBWWOWWWWWWWWWWWWWWxxWWWWWRWWWWWWWWWWWWWWWWWWWWWWWWYYYYWWWY"</span>,
  <span class="stri">"YbbbWWBWWWWWYYWWWRRRWWWWWWxxWWWRRWWWWWWWWWWWWWWWWWWWYYYYYYYYYWWW"</span>,
  <span class="stri">"YbbbbWWWWWWYYYYYRRRRRWWWWWWWYYYYYYYYYYYYYYYYYYWWWWYYYYYYYYYYYYRW"</span>,
  <span class="stri">"YGbbbbbbbbbGGGGGGRRRRRGGWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGY"</span>,
  <span class="stri">"GGGGGGGGGGGGGGGGGGGGGGGGGGWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"GGGGGGGGGGGGGGGGGGWWWWWWWWWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"GGGGGGGGGGGGGGGWWWWWWWWWWWWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"GGGGGGGGGGGWWWWWWWWWWWWWWWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: zero <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc     xBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: one <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: two <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: three <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: four <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc    xBc    "</span>,
  <span class="stri">"  xBc    xBc    "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"                "</span>);

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: five <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: six <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: seven <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"           xBBc "</span>,
  <span class="stri">"      xBBBBBBc  "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: eight <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: nine <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"   xBBBBBBBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">cardType</span>: genCard (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: pattern) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">cardType</span>: aCard <span class="keywd">is</span> cardType.value;
  <span class="keywd">begin</span>
    aCard.picture := pattern;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">var</span> <span class="type">array</span> <span class="type">cardType</span>: cards <span class="keywd">is</span> [](
    genCard(fairy_pic),
    genCard(computer_pic),
    genCard(sea_pic),
    genCard(big_bush_pic),
    genCard(crown_pic),
    genCard(fountain_pic),
    genCard(harp_pic),
    genCard(snake_pic),
    genCard(lamp_pic),
    genCard(scepter_pic),
    genCard(book_pic),
    genCard(hourglass_pic),
    genCard(large_gem_pic),
    genCard(magic_wand_pic),
    genCard(sword_pic),
    genCard(key_pic),
    genCard(glasses_pic),
    genCard(helmet_pic),
    genCard(flask_pic),
    genCard(crystal_ball_pic),
    genCard(necklace_pic),
    genCard(holy_cross_pic),
    genCard(diamond_pic),
    genCard(silver_bars_pic)
  );

<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">fieldType</span>: field <span class="keywd">is</span> 0 <span class="op">times</span> 0 <span class="op">times</span> fieldType.value;


<span class="keywd">const</span> <span class="type">proc</span>: draw (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos,
    <span class="keywd">inout</span> <span class="type">cardType</span>: aCard) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aCard.pixmap = PRIMITIVE_WINDOW.value <span class="keywd">then</span>
      rect(xPos, yPos, CARD_SIZE, CARD_SIZE, white);
      drawPattern(curr_win, xPos, yPos, aCard.picture, CARD_SIZE <span class="op">div</span> length(aCard.picture), black);
      aCard.pixmap := getPixmap(xPos, yPos, CARD_SIZE, CARD_SIZE);
    <span class="keywd">else</span>
      put(xPos, yPos, aCard.pixmap);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="keywd">inout</span> <span class="type">cardType</span>: aCard, <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    draw(LEFT_BORDER + CARD_BORDER + FIELD_SIZE * pred(column),
        UPPER_BORDER + CARD_BORDER + FIELD_SIZE * pred(line), aCard);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: show (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(cards[field[line][column].cardNumber], line, column);
    field[line][column].visible := normal;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: mark (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line][column].visible = normal <span class="keywd">then</span>
      rect(LEFT_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + FIELD_SIZE * pred(line),
          CARD_SIZE + 2 * CARD_BORDER, FRAME_THICKNESS, light_red);
      rect(LEFT_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + FIELD_SIZE * pred(line),
          FRAME_THICKNESS, CARD_SIZE + 2 * CARD_BORDER, light_red);
      rect(LEFT_BORDER + FIELD_SIZE * column - FRAME_THICKNESS,
          UPPER_BORDER + FIELD_SIZE * pred(line),
          FRAME_THICKNESS, CARD_SIZE + 2 * CARD_BORDER, light_red);
      rect(LEFT_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + FIELD_SIZE * line - FRAME_THICKNESS,
          CARD_SIZE + 2 * CARD_BORDER, FRAME_THICKNESS, light_red);
      field[line][column].visible := marked;
      field[line][column].selected := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: unmark (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line][column].visible = marked <span class="keywd">then</span>
      rect(LEFT_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + FIELD_SIZE * pred(line),
          CARD_SIZE + 2 * CARD_BORDER, FRAME_THICKNESS, white);
      rect(LEFT_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + FIELD_SIZE * pred(line),
          FRAME_THICKNESS, CARD_SIZE + 2 * CARD_BORDER, white);
      rect(LEFT_BORDER + FIELD_SIZE * column - FRAME_THICKNESS,
          UPPER_BORDER + FIELD_SIZE * pred(line),
          FRAME_THICKNESS, CARD_SIZE + 2 * CARD_BORDER, white);
      rect(LEFT_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + FIELD_SIZE * line - FRAME_THICKNESS,
          CARD_SIZE + 2 * CARD_BORDER, FRAME_THICKNESS, white);
      field[line][column].visible := normal;
      field[line][column].selected := FALSE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: remove (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line][column].visible &lt;> removed <span class="keywd">then</span>
      rect(LEFT_BORDER + CARD_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + CARD_BORDER + FIELD_SIZE * pred(line), CARD_SIZE, CARD_SIZE, white);
      field[line][column].visible := removed;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: unmarkAll <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
        unmark(line, column);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: countCards <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: count <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
        <span class="keywd">if</span> field[line][column].visible &lt;> removed <span class="keywd">then</span>
          incr(count);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showHit (<span class="op">in</span> <span class="type">integer</span>: cardNumber, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: hits) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> hits >= 20 <span class="keywd">then</span>
      hits -:= 20;
      yPos +:= 64 + 8;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    line(200 + 128 + 8 + 32 * hits,     yPos, 0, 64, white);
    draw(200 + 128 + 8 + 32 * hits + 1, yPos, cards[cardNumber]);
    line(200 + 128 + 8 + 32 * hits + 5, yPos, 0, 64, white);
    draw(200 + 128 + 8 + 32 * hits + 6, yPos, cards[cardNumber]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: horizontal (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column1, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> currColor &lt;> black <span class="keywd">then</span>
      rectTo(LEFT_BORDER + HALF_FIELD + FIELD_SIZE * pred(column1),
          UPPER_BORDER + HALF_FIELD+ FIELD_SIZE * pred(line) - 2,
          LEFT_BORDER + HALF_FIELD + FIELD_SIZE * pred(column2),
          UPPER_BORDER + HALF_FIELD+ FIELD_SIZE * pred(line) + 2, currColor);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: vertical (<span class="op">in</span> <span class="type">integer</span>: column, <span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: line2,
    <span class="op">in</span> <span class="type">color</span>: currColor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> currColor &lt;> black <span class="keywd">then</span>
      rectTo(LEFT_BORDER + HALF_FIELD + FIELD_SIZE * pred(column) - 2,
          UPPER_BORDER + HALF_FIELD+ FIELD_SIZE * pred(line1),
          LEFT_BORDER + HALF_FIELD + FIELD_SIZE * pred(column) + 2,
          UPPER_BORDER + HALF_FIELD+ FIELD_SIZE * pred(line2), currColor);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: line_free (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column1, <span class="op">in</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isFree <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    column := column1;
    <span class="keywd">while</span> column &lt;= column2 <span class="op">and</span> field[line][column].visible = removed <span class="keywd">do</span>
      incr(column);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> column > column2 <span class="keywd">then</span>
      isFree := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: column_free (<span class="op">in</span> <span class="type">integer</span>: column, <span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: line2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isFree <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    line := line1;
    <span class="keywd">while</span> line &lt;= line2 <span class="op">and</span> field[line][column].visible = removed <span class="keywd">do</span>
      incr(line);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> line > line2 <span class="keywd">then</span>
      isFree := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: upper_way (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    line := pred(line1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> line >= 1 <span class="op">and</span>
        field[line][column1].visible = removed <span class="op">and</span>
        field[line][column2].visible = removed <span class="keywd">do</span>
      <span class="keywd">if</span> line_free(line, succ(column1), pred(column2)) <span class="keywd">then</span>
        vertical(column1, line, line1, currColor);
        vertical(column2, line, line1, currColor);
        horizontal(line, column1, column2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        decr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> line = 0 <span class="keywd">then</span>
      vertical(column1, line, line1, currColor);
      vertical(column2, line, line1, currColor);
      horizontal(line, column1, column2, currColor);
      found_way := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: lower_way (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    line := succ(line1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> line &lt;= length(field) <span class="op">and</span>
        field[line][column1].visible = removed <span class="op">and</span>
        field[line][column2].visible = removed <span class="keywd">do</span>
      <span class="keywd">if</span> line_free(line, succ(column1), pred(column2)) <span class="keywd">then</span>
        vertical(column1, line1, line, currColor);
        vertical(column2, line1, line, currColor);
        horizontal(line, column1, column2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> line > length(field) <span class="keywd">then</span>
      vertical(column1, line1, line, currColor);
      vertical(column2, line1, line, currColor);
      horizontal(line, column1, column2, currColor);
      found_way := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: left_way (<span class="op">in</span> <span class="type">integer</span>: column1, <span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: line2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    column := pred(column1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> column >= 1 <span class="op">and</span>
        field[line1][column].visible = removed <span class="op">and</span>
        field[line2][column].visible = removed <span class="keywd">do</span>
      <span class="keywd">if</span> column_free(column, succ(line1), pred(line2)) <span class="keywd">then</span>
        horizontal(line1, column, column1, currColor);
        horizontal(line2, column, column1, currColor);
        vertical(column, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        decr(column);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> column = 0 <span class="keywd">then</span>
      horizontal(line1, column, column1, currColor);
      horizontal(line2, column, column1, currColor);
      vertical(column, line1, line2, currColor);
      found_way := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: right_way (<span class="op">in</span> <span class="type">integer</span>: column1, <span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: line2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    column := succ(column1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> column &lt;= length(field[1]) <span class="op">and</span>
        field[line1][column].visible = removed <span class="op">and</span>
        field[line2][column].visible = removed <span class="keywd">do</span>
      <span class="keywd">if</span> column_free(column, succ(line1), pred(line2)) <span class="keywd">then</span>
        horizontal(line1, column1, column, currColor);
        horizontal(line2, column1, column, currColor);
        vertical(column, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        incr(column);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> column > length(field[1]) <span class="keywd">then</span>
      horizontal(line1, column1, column, currColor);
      horizontal(line2, column1, column, currColor);
      vertical(column, line1, line2, currColor);
      found_way := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: way_down_right (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1,
    <span class="op">in</span> <span class="type">integer</span>: line2, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    line := succ(line1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> line &lt; line2 <span class="keywd">do</span>
      <span class="keywd">if</span> column_free(column1, succ(line1), line) <span class="op">and</span>
          column_free(column2, line, pred(line2)) <span class="op">and</span>
          line_free(line, succ(column1), pred(column2)) <span class="keywd">then</span>
        vertical(column1, line1, line, currColor);
        vertical(column2, line, line2, currColor);
        horizontal(line, column1, column2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: way_right_down (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1,
    <span class="op">in</span> <span class="type">integer</span>: line2, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    column := succ(column1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> column &lt; column2 <span class="keywd">do</span>
      <span class="keywd">if</span> line_free(line1, succ(column1), column) <span class="op">and</span>
          line_free(line2, column, pred(column2)) <span class="op">and</span>
          column_free(column, succ(line1), pred(line2)) <span class="keywd">then</span>
        horizontal(line1, column1, column, currColor);
        horizontal(line2, column, column2, currColor);
        vertical(column, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        incr(column);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: way_down_left (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1,
    <span class="op">in</span> <span class="type">integer</span>: line2, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    line := succ(line1);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> line &lt; line2 <span class="keywd">do</span>
      <span class="keywd">if</span> column_free(column1, succ(line1), line) <span class="op">and</span>
          column_free(column2, line, pred(line2)) <span class="op">and</span>
          line_free(line, succ(column2), pred(column1)) <span class="keywd">then</span>
        vertical(column1, line1, line, currColor);
        vertical(column2, line, line2, currColor);
        horizontal(line, column2, column1, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: way_left_down (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1,
    <span class="op">in</span> <span class="type">integer</span>: line2, <span class="op">in</span> <span class="type">integer</span>: column2,
    <span class="op">in</span> <span class="type">color</span>: currColor, <span class="keywd">inout</span> <span class="type">boolean</span>: found_way) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    column := succ(column2);
    <span class="keywd">while</span> <span class="op">not</span> found_way <span class="op">and</span> column &lt; column1 <span class="keywd">do</span>
      <span class="keywd">if</span> line_free(line1, column, pred(column1)) <span class="op">and</span>
          line_free(line2, succ(column2), column) <span class="op">and</span>
          column_free(column, succ(line1), pred(line2)) <span class="keywd">then</span>
        horizontal(line1, column, column1, currColor);
        horizontal(line2, column2, column, currColor);
        vertical(column, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        incr(column);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: find_way (<span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: column1,
    <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: line2, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: column2, <span class="op">in</span> <span class="type">color</span>: currColor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found_way <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> line1 = line2 <span class="keywd">then</span>
      <span class="keywd">if</span> column2 &lt; column1 <span class="keywd">then</span>
        column := column1;
        column1 := column2;
        column2 := column;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> line_free(line1, succ(column1), pred(column2)) <span class="keywd">then</span>
        horizontal(line1, column1, column2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        upper_way(line1, column1, column2, currColor, found_way);
        lower_way(line1, column1, column2, currColor, found_way);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> column1 = column2 <span class="keywd">then</span>
      <span class="keywd">if</span> line2 &lt; line1 <span class="keywd">then</span>
        line := line1;
        line1 := line2;
        line2 := line;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> column_free(column1, succ(line1), pred(line2)) <span class="keywd">then</span>
        vertical(column1, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        left_way(column1, line1, line2, currColor, found_way);
        right_way(column1, line1, line2, currColor, found_way);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> line1 &lt; line2 <span class="op">and</span> column1 &lt; column2 <span class="op">or</span>
        line1 > line2 <span class="op">and</span> column1 > column2 <span class="keywd">then</span>
      <span class="keywd">if</span> line1 > line2 <span class="op">and</span> column1 > column2 <span class="keywd">then</span>
        line := line1;
        line1 := line2;
        line2 := line;
        column := column1;
        column1 := column2;
        column2 := column;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> line_free(line1, succ(column1), column2) <span class="op">and</span>
          column_free(column2, succ(line1), pred(line2)) <span class="keywd">then</span>
        horizontal(line1, column1, column2, currColor);
        vertical(column2, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">elsif</span> column_free(column1, succ(line1), line2) <span class="op">and</span>
          line_free(line2, succ(column1), pred(column2)) <span class="keywd">then</span>
        vertical(column1, line1, line2, currColor);
        horizontal(line2, column1, column2, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        way_down_right(line1, column1, line2, column2, currColor, found_way);
        way_right_down(line1, column1, line2, column2, currColor, found_way);
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> column_free(column2, line1, pred(line2)) <span class="keywd">then</span>
          upper_way(line1, column1, column2, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            vertical(column2, line1, line2, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> column_free(column1, succ(line1), line2) <span class="keywd">then</span>
          lower_way(line2, column1, column2, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            vertical(column1, line1, line2, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> line_free(line2, column1, pred(column2)) <span class="keywd">then</span>
          left_way(column1, line1, line2, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            horizontal(line2, column1, column2, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> line_free(line1, succ(column1), column2) <span class="keywd">then</span>
          right_way(column2, line1, line2, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            horizontal(line1, column1, column2, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> line1 &lt; line2 <span class="op">and</span> column1 > column2 <span class="op">or</span>
        line1 > line2 <span class="op">and</span> column1 &lt; column2 <span class="keywd">then</span>
      <span class="keywd">if</span> line1 > line2 <span class="op">and</span> column1 &lt; column2 <span class="keywd">then</span>
        line := line1;
        line1 := line2;
        line2 := line;
        column := column1;
        column1 := column2;
        column2 := column;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> line_free(line1, column2, pred(column1)) <span class="op">and</span>
          column_free(column2, succ(line1), pred(line2)) <span class="keywd">then</span>
        horizontal(line1, column2, column1, currColor);
        vertical(column2, line1, line2, currColor);
        found_way := TRUE;
      <span class="keywd">elsif</span> column_free(column1, succ(line1), line2) <span class="op">and</span>
          line_free(line2, succ(column2), pred(column1)) <span class="keywd">then</span>
        vertical(column1, line1, line2, currColor);
        horizontal(line2, column2, column1, currColor);
        found_way := TRUE;
      <span class="keywd">else</span>
        way_down_left(line1, column1, line2, column2, currColor, found_way);
        way_left_down(line1, column1, line2, column2, currColor, found_way);
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> column_free(column2, line1, pred(line2)) <span class="keywd">then</span>
          upper_way(line1, column2, column1, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            vertical(column2, line1, line2, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> column_free(column1, succ(line1), line2) <span class="keywd">then</span>
          lower_way(line2, column2, column1, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            vertical(column1, line1, line2, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> line_free(line1, column2, pred(column1)) <span class="keywd">then</span>
          left_way(column2, line1, line2, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            horizontal(line1, column2, column1, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> <span class="op">not</span> found_way <span class="op">and</span> line_free(line2, succ(column2), column1) <span class="keywd">then</span>
          right_way(column1, line1, line2, currColor, found_way);
          <span class="keywd">if</span> found_way <span class="keywd">then</span>
            horizontal(line2, column2, column1, currColor);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: readHelpCommand (<span class="keywd">inout</span> <span class="type">char</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: doQuit <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    flushGraphic;
    command := upper(getc(KEYBOARD));
    <span class="keywd">while</span> command = KEY_ESC <span class="keywd">do</span>
      bossMode(doQuit);
      <span class="keywd">if</span> doQuit <span class="keywd">then</span>
        command := <span class="stri">'Q'</span>;
      <span class="keywd">else</span>
        command := upper(getc(KEYBOARD));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: help (<span class="keywd">inout</span> <span class="type">char</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: found <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line1 <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_LINES <span class="keywd">do</span>
      <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_COLUMNS <span class="keywd">do</span>
        <span class="keywd">if</span> <span class="op">not</span> found <span class="op">and</span> field[line1][column1].visible = normal <span class="keywd">then</span>
          <span class="keywd">for</span> column2 <span class="keywd">range</span> succ(column1) <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
            <span class="keywd">if</span> <span class="op">not</span> found <span class="op">and</span>
                field[line1][column2].visible = normal <span class="op">and</span>
                field[line1][column1].cardNumber =
                field[line1][column2].cardNumber <span class="keywd">then</span>
              <span class="keywd">if</span> find_way(line1, column1, line1, column2, light_red) <span class="keywd">then</span>
                mark(line1, column1);
                mark(line1, column2);
                readHelpCommand(command);
                <span class="keywd">if</span> command &lt;> <span class="stri">'H'</span> <span class="keywd">then</span>
                  found := TRUE;
                <span class="keywd">end</span> <span class="keywd">if</span>;
                ignore(find_way(line1, column1, line1, column2, white));
                unmark(line1, column1);
                unmark(line1, column2);
                <span class="keywd">if</span> command <span class="op">in</span> {KEY_NL} <span class="keywd">then</span>
                  remove(line1, column1);
                  remove(line1, column2);
                  <span class="comment">(* showHit(field[line1][column1].cardNumber, PLAYER_HIT_XPOS, playerHits); *)</span>
                  incr(playerHits);
                <span class="keywd">else</span>
                  show(line1, column1);
                  show(line1, column2);
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">for</span> line2 <span class="keywd">range</span> succ(line1) <span class="keywd">to</span> length(field) <span class="keywd">do</span>
            <span class="keywd">for</span> column2 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
              <span class="keywd">if</span> <span class="op">not</span> found <span class="op">and</span>
                  field[line2][column2].visible = normal <span class="op">and</span>
                  field[line1][column1].cardNumber =
                  field[line2][column2].cardNumber <span class="keywd">then</span>
                <span class="keywd">if</span> find_way(line1, column1, line2, column2, light_red) <span class="keywd">then</span>
                  mark(line1, column1);
                  mark(line2, column2);
                  readHelpCommand(command);
                  <span class="keywd">if</span> command &lt;> <span class="stri">'H'</span> <span class="keywd">then</span>
                    found := TRUE;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                  ignore(find_way(line1, column1, line2, column2, white));
                  unmark(line1, column1);
                  unmark(line2, column2);
                  <span class="keywd">if</span> command <span class="op">in</span> {KEY_NL} <span class="keywd">then</span>
                    remove(line1, column1);
                    remove(line2, column2);
                    <span class="comment">(* showHit(field[line1][column1].cardNumber, PLAYER_HIT_XPOS, playerHits); *)</span>
                    incr(playerHits);
                  <span class="keywd">else</span>
                    show(line1, column1);
                    show(line2, column2);
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> command &lt;> <span class="stri">'Q'</span> <span class="op">and</span> command &lt;> KEY_CLOSE <span class="op">and</span> command &lt;> KEY_ESC <span class="keywd">then</span>
      command := KEY_NONE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: playerMove (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2, <span class="keywd">inout</span> <span class="type">char</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: openCards <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: moveFinished <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      command := upper(getc(KEYBOARD));
      <span class="keywd">if</span> command = <span class="stri">'H'</span> <span class="keywd">then</span>
        help(command);
        <span class="keywd">if</span> command = <span class="stri">'Q'</span> <span class="op">or</span> command = KEY_CLOSE <span class="keywd">then</span>
          moveFinished := TRUE;
        <span class="keywd">elsif</span> command = KEY_ESC <span class="keywd">then</span>
          bossMode(moveFinished);
          <span class="keywd">if</span> moveFinished <span class="keywd">then</span>
            command := <span class="stri">'Q'</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> command = KEY_ESC <span class="keywd">then</span>
        bossMode(moveFinished);
        <span class="keywd">if</span> moveFinished <span class="keywd">then</span>
          command := <span class="stri">'Q'</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> command &lt;> KEY_MOUSE1 <span class="keywd">then</span>
        moveFinished := TRUE;
      <span class="keywd">else</span>
        line := clickedYPos(KEYBOARD);
        column := clickedXPos(KEYBOARD);
        <span class="keywd">if</span> line >= UPPER_BORDER <span class="op">and</span> column >= LEFT_BORDER <span class="keywd">then</span>
          line := (line - UPPER_BORDER) <span class="op">div</span> FIELD_SIZE + 1;
          column := (column - LEFT_BORDER) <span class="op">div</span> FIELD_SIZE + 1;
          <span class="keywd">if</span> line >= 1 <span class="op">and</span> line &lt;= length(field) <span class="op">and</span>
              column >= 1 <span class="op">and</span> column &lt;= length(field[line]) <span class="keywd">then</span>
            <span class="keywd">if</span> field[line][column].visible = normal <span class="keywd">then</span>
              <span class="keywd">if</span> openCards = 0 <span class="keywd">then</span>
                mark(line, column);
                incr(openCards);
                line1 := line;
                column1 := column;
              <span class="keywd">elsif</span> openCards = 1 <span class="op">and</span>
                  field[line1][column1].cardNumber = field[line][column].cardNumber <span class="op">and</span>
                  find_way(line1, column1, line, column, light_red) <span class="keywd">then</span>
                mark(line, column);
                line2 := line;
                column2 := column;
                moveFinished := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">elsif</span> field[line][column].visible = marked <span class="keywd">then</span>
              unmark(line, column);
              decr(openCards);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> moveFinished;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: playerTurn (<span class="keywd">inout</span> <span class="type">char</span>: command) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: onTurn <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> countCards > 0 <span class="op">and</span> onTurn <span class="keywd">do</span>
      playerMove(line1, column1, line2, column2, command);
      <span class="keywd">if</span> command &lt;> KEY_MOUSE1 <span class="keywd">then</span>
        unmarkAll;
        onTurn := FALSE;
      <span class="keywd">elsif</span> field[line1][column1].cardNumber =
          field[line2][column2].cardNumber <span class="keywd">then</span>
        flushGraphic;
        number := 0;
        <span class="keywd">while</span> <span class="op">not</span> inputReady(KEYBOARD) <span class="op">and</span> number &lt;= 5 <span class="keywd">do</span>
          wait(100000 . MICRO_SECONDS);
          incr(number);
        <span class="keywd">end</span> <span class="keywd">while</span>;
        ignore(find_way(line1, column1, line2, column2, white));
        unmark(line1, column1);
        unmark(line2, column2);
        remove(line1, column1);
        remove(line2, column2);
        <span class="comment">(* showHit(field[line1][column1].cardNumber, PLAYER_HIT_XPOS, playerHits); *)</span>
        incr(playerHits);
      <span class="keywd">else</span>
        unmark(line1, column1);
        unmark(line2, column2);
        onTurn := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: solvable <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isSolvable <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: searching <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: pairs_present <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    pairs_present := FIELD_LINES * FIELD_COLUMNS <span class="op">div</span> 2;
    <span class="keywd">repeat</span>
      searching := TRUE;
      <span class="keywd">for</span> line1 <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_LINES <span class="keywd">do</span>
        <span class="keywd">if</span> searching <span class="keywd">then</span>
          <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_COLUMNS <span class="keywd">do</span>
            <span class="keywd">if</span> searching <span class="op">and</span> field[line1][column1].visible = normal <span class="keywd">then</span>
              <span class="keywd">for</span> column2 <span class="keywd">range</span> succ(column1) <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
                <span class="keywd">if</span> searching <span class="op">and</span>
                    field[line1][column2].visible = normal <span class="op">and</span>
                    field[line1][column1].cardNumber =
                    field[line1][column2].cardNumber <span class="keywd">then</span>
                  <span class="keywd">if</span> find_way(line1, column1, line1, column2, black) <span class="keywd">then</span>
                    field[line1][column1].visible := removed;
                    field[line1][column2].visible := removed;
                    decr(pairs_present);
                    searching := FALSE;
                  <span class="keywd">end</span> <span class="keywd">if</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">for</span>;
              <span class="keywd">for</span> line2 <span class="keywd">range</span> succ(line1) <span class="keywd">to</span> length(field) <span class="keywd">do</span>
                <span class="keywd">if</span> searching <span class="keywd">then</span>
                  <span class="keywd">for</span> column2 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
                    <span class="keywd">if</span> searching <span class="op">and</span>
                        field[line2][column2].visible = normal <span class="op">and</span>
                        field[line1][column1].cardNumber =
                        field[line2][column2].cardNumber <span class="keywd">then</span>
                      <span class="keywd">if</span> find_way(line1, column1, line2, column2, black) <span class="keywd">then</span>
                        field[line1][column1].visible := removed;
                        field[line2][column2].visible := removed;
                        decr(pairs_present);
                        searching := FALSE;
                      <span class="keywd">end</span> <span class="keywd">if</span>;
                    <span class="keywd">end</span> <span class="keywd">if</span>;
                  <span class="keywd">end</span> <span class="keywd">for</span>;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">for</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">until</span> searching;
    isSolvable := pairs_present = 0;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: dealCards <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: NUMBER_OF_CARDS <span class="keywd">is</span> FIELD_LINES * FIELD_COLUMNS <span class="op">div</span> 4;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: cardNumber <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      <span class="keywd">for</span> cardNumber <span class="keywd">range</span> 1 <span class="keywd">to</span> NUMBER_OF_CARDS <span class="keywd">do</span>
        cards[cardNumber].number := 0;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      field := FIELD_LINES <span class="op">times</span> FIELD_COLUMNS <span class="op">times</span> fieldType.value;
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_LINES <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_COLUMNS <span class="keywd">do</span>
          <span class="keywd">repeat</span>
            cardNumber := rand(1, NUMBER_OF_CARDS);
          <span class="keywd">until</span> cards[cardNumber].number &lt; 4;
          field[line][column].cardNumber := cardNumber;
          incr(cards[cardNumber].number);
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">until</span> solvable;
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_LINES <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> FIELD_COLUMNS <span class="keywd">do</span>
        field[line][column].visible := normal;
        show(line, column);
        flushGraphic;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: writeCentered (<span class="keywd">inout</span> <span class="type">text</span>: screen, <span class="op">in</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    setPosXY(screen, (WINDOW_WIDTH - width(vecFont10, stri)) <span class="op">div</span> 2, yPos);
    writeln(screen, stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    screen(WINDOW_WIDTH, WINDOW_HEIGHT);
    selectInput(curr_win, KEY_CLOSE, TRUE);
    clear(curr_win, white);
    KEYBOARD := GRAPH_KEYBOARD;
    screen := openPixmapFontFile(curr_win);
    setFont(screen, vecFont10);
    color(screen, black, white);
    writeCentered(screen, 22, <span class="stri">"S H I S E N"</span>);
    writeCentered(screen, 38, <span class="stri">"Copyright (C) 2005, 2007, 2012, 2013, 2020  Thomas Mertes"</span>);
    writeCentered(screen, 54, <span class="stri">"This program is free software under the terms of the GNU General Public License"</span>);
    writeCentered(screen, 652, <span class="stri">"Shisen is written in the Seed7 programming language"</span>);
    writeCentered(screen, 668, <span class="stri">"Homepage:    https://seed7.net"</span>);
    flushGraphic;
    digit_pixmap := [0](
      createPixmap(zero,  2, black),
      createPixmap(one,   2, black),
      createPixmap(two,   2, black),
      createPixmap(three, 2, black),
      createPixmap(four,  2, black),
      createPixmap(five,  2, black),
      createPixmap(six,   2, black),
      createPixmap(seven, 2, black),
      createPixmap(eight, 2, black),
      createPixmap(nine,  2, black));

    dealCards;
    writeCentered(screen, 696, <span class="stri">"Press any key to start game"</span>);
    command := upper(getc(KEYBOARD));
    <span class="keywd">if</span> command &lt;> KEY_ESC <span class="keywd">then</span>
      rect(0, 0, WINDOW_WIDTH, UPPER_BORDER, white);
      rect(0, WINDOW_HEIGHT - UPPER_BORDER, WINDOW_WIDTH, UPPER_BORDER, white);
      <span class="keywd">while</span> command &lt;> <span class="stri">'Q'</span> <span class="op">and</span> command &lt;> KEY_CLOSE <span class="keywd">do</span>
        <span class="keywd">repeat</span>
          playerTurn(command);
        <span class="keywd">until</span> countCards = 0 <span class="op">or</span> command = <span class="stri">'N'</span> <span class="op">or</span> command = <span class="stri">'Q'</span> <span class="op">or</span> command = KEY_CLOSE;
        <span class="keywd">if</span> command &lt;> <span class="stri">'N'</span> <span class="op">and</span> command &lt;> <span class="stri">'Q'</span> <span class="op">and</span> command &lt;> KEY_CLOSE <span class="keywd">then</span>
          setFont(screen, cronos27);
          setPos(screen, 9, 9);
          writeln(screen, <span class="stri">"Congratulation"</span>);
          command := upper(getc(KEYBOARD));
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> command &lt;> <span class="stri">'Q'</span> <span class="op">and</span> command &lt;> KEY_CLOSE <span class="keywd">then</span>
          dealCards;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
