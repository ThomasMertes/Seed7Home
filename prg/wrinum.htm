<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  wrinum.s7i    Functions to write numbers                        *)</span>
<span class="comment">(*  Copyright (C) 1991, 1992, 1993, 1994, 2005  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Convert an [[integer]] to a roman numeral.
 *  @return a string containing the roman numeral.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (ROMAN, <span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: romanNumber <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_0_to_9 (<span class="op">in</span> <span class="type">integer</span>: number,
        <span class="op">in</span> <span class="type">string</span>: one, <span class="op">in</span> <span class="type">string</span>: five, <span class="op">in</span> <span class="type">string</span>: ten) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: romanNumber <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number &lt;= 3 <span class="keywd">then</span>
          romanNumber := one <span class="op">mult</span> number;
        <span class="keywd">else</span>
          <span class="keywd">if</span> number = 4 <span class="keywd">then</span>
            romanNumber := one &amp; five;
          <span class="keywd">else</span>
            <span class="keywd">if</span> number &lt;= 8 <span class="keywd">then</span>
              romanNumber := five &amp; one <span class="op">mult</span> (number - 5);
            <span class="keywd">else</span>
              romanNumber := one &amp; ten;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

  <span class="keywd">begin</span>
    romanNumber :=
        str_0_to_9(number <span class="op">div</span> 1000,         <span class="stri">"M"</span>, <span class="stri">"?"</span>, <span class="stri">"?"</span>) &amp;
        str_0_to_9((number <span class="op">div</span> 100) <span class="op">rem</span> 10, <span class="stri">"C"</span>, <span class="stri">"D"</span>, <span class="stri">"M"</span>) &amp;
        str_0_to_9((number <span class="op">div</span> 10) <span class="op">rem</span> 10,  <span class="stri">"X"</span>, <span class="stri">"L"</span>, <span class="stri">"C"</span>) &amp;
        str_0_to_9(number <span class="op">rem</span> 10,           <span class="stri">"I"</span>, <span class="stri">"V"</span>, <span class="stri">"X"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert an [[integer]] to its written english equivalent.
 *  @return a string containing the number in english.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (ENGLISH, <span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: englishNumber <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: STR_0_TO_19 <span class="keywd">is</span> [](
        <span class="stri">"zero"</span>,      <span class="stri">"one"</span>,       <span class="stri">"two"</span>,       <span class="stri">"three"</span>,     <span class="stri">"four"</span>,
        <span class="stri">"five"</span>,      <span class="stri">"six"</span>,       <span class="stri">"seven"</span>,     <span class="stri">"eight"</span>,     <span class="stri">"nine"</span>,
        <span class="stri">"ten"</span>,       <span class="stri">"eleven"</span>,    <span class="stri">"twelve"</span>,    <span class="stri">"thirteen"</span>,  <span class="stri">"fourteen"</span>,
        <span class="stri">"fifteen"</span>,   <span class="stri">"sixteen"</span>,   <span class="stri">"seventeen"</span>, <span class="stri">"eighteen"</span>,  <span class="stri">"nineteen"</span>);

    <span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: STR_20_TO_90 <span class="keywd">is</span> [](
        <span class="stri">"twenty"</span>,    <span class="stri">"thirty"</span>,    <span class="stri">"forty"</span>,     <span class="stri">"fifty"</span>,
        <span class="stri">"sixty"</span>,     <span class="stri">"seventy"</span>,   <span class="stri">"eighty"</span>,    <span class="stri">"ninety"</span>);

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_99 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number &lt; 20 <span class="keywd">then</span>
          stri := STR_0_TO_19[succ(number)];
        <span class="keywd">else</span>
          stri := STR_20_TO_90[pred(number <span class="op">div</span> 10)];
          <span class="keywd">if</span> number <span class="op">rem</span> 10 &lt;> 0 <span class="keywd">then</span>
            stri &amp;:= STR_0_TO_19[succ(number <span class="op">rem</span> 10)];
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_1E3 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number >= 100 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 200 <span class="keywd">then</span>
            stri := STR_0_TO_19[succ(number <span class="op">div</span> 100)];
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= <span class="stri">"hundred"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number <span class="op">rem</span> 100 &lt;> 0 <span class="op">or</span> number = 0 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 100 <span class="keywd">then</span>
            stri &amp;:= <span class="stri">"and"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= str_99(number <span class="op">rem</span> 100);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_1E6 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number >= 1000 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 2000 <span class="keywd">then</span>
            stri := str_1E3(number <span class="op">div</span> 1000);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= <span class="stri">"thousand"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number <span class="op">rem</span> 1000 &lt;> 0 <span class="op">or</span> number = 0 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 1000 <span class="keywd">then</span>
            stri &amp;:= <span class="stri">"and"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= str_1E3(number <span class="op">rem</span> 1000);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_1E9 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number >= 1000000 <span class="keywd">then</span>
          <span class="keywd">if</span> number &lt; 2000000 <span class="keywd">then</span>
            stri := <span class="stri">"onemillion"</span>;
          <span class="keywd">else</span>
            stri := str_1E3(number <span class="op">div</span> 1000000) &amp; <span class="stri">"millions"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number <span class="op">rem</span> 1000000 &lt;> 0 <span class="op">or</span> number = 0 <span class="keywd">then</span>
          stri &amp;:= str_1E6(number <span class="op">rem</span> 1000000);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

  <span class="keywd">begin</span>
    englishNumber := str_1E9(number);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert an [[integer]] to its written german equivalent.
 *  @return a string containing the number in german.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (GERMAN, <span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: germanNumber <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: STR_0_TO_19 <span class="keywd">is</span> [](
        <span class="stri">"null"</span>,      <span class="stri">"eins"</span>,      <span class="stri">"zwei"</span>,      <span class="stri">"drei"</span>,      <span class="stri">"vier"</span>,
        <span class="stri">"fuenf"</span>,     <span class="stri">"sechs"</span>,     <span class="stri">"sieben"</span>,    <span class="stri">"acht"</span>,      <span class="stri">"neun"</span>,
        <span class="stri">"zehn"</span>,      <span class="stri">"elf"</span>,       <span class="stri">"zwoelf"</span>,    <span class="stri">"dreizehn"</span>,  <span class="stri">"vierzehn"</span>,
        <span class="stri">"fuenfzehn"</span>, <span class="stri">"sechzehn"</span>,  <span class="stri">"siebzehn"</span>,  <span class="stri">"achtzehn"</span>,  <span class="stri">"neunzehn"</span>);

    <span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: STR_0_TO_9 <span class="keywd">is</span> [](
        <span class="stri">""</span>,          <span class="stri">"ein"</span>,       <span class="stri">"zwei"</span>,      <span class="stri">"drei"</span>,      <span class="stri">"vier"</span>,
        <span class="stri">"fuenf"</span>,     <span class="stri">"sechs"</span>,     <span class="stri">"sieben"</span>,    <span class="stri">"acht"</span>,      <span class="stri">"neun"</span>);

    <span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: STR_20_TO_90 <span class="keywd">is</span> [](
        <span class="stri">"zwanzig"</span>,   <span class="stri">"dreissig"</span>,  <span class="stri">"vierzig"</span>,   <span class="stri">"fuenfzig"</span>,
        <span class="stri">"sechzig"</span>,   <span class="stri">"siebzig"</span>,   <span class="stri">"achzig"</span>,    <span class="stri">"neunzig"</span>);

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_99 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number &lt; 20 <span class="keywd">then</span>
          stri := STR_0_TO_19[succ(number)];
        <span class="keywd">else</span>
          <span class="keywd">if</span> number <span class="op">rem</span> 10 &lt;> 0 <span class="keywd">then</span>
            stri := STR_0_TO_9[succ(number <span class="op">rem</span> 10)];
            stri &amp;:= <span class="stri">"und"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= STR_20_TO_90[pred(number <span class="op">div</span> 10)];
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_1E3 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number >= 100 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 200 <span class="keywd">then</span>
            stri := STR_0_TO_9[succ(number <span class="op">div</span> 100)];
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= <span class="stri">"hundert"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number <span class="op">rem</span> 100 &lt;> 0 <span class="op">or</span> number = 0 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 100 <span class="keywd">then</span>
            stri &amp;:= <span class="stri">"und"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= str_99(number <span class="op">rem</span> 100);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_1E6 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number >= 1000 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 2000 <span class="keywd">then</span>
            stri := str_1E3(number <span class="op">div</span> 1000);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= <span class="stri">"tausend"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number <span class="op">rem</span> 1000 &lt;> 0 <span class="op">or</span> number = 0 <span class="keywd">then</span>
          <span class="keywd">if</span> number >= 1000 <span class="keywd">then</span>
            stri &amp;:= <span class="stri">"und"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          stri &amp;:= str_1E3(number <span class="op">rem</span> 1000);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str_1E9 (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">result</span>
        <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
      <span class="keywd">begin</span>
        <span class="keywd">if</span> number >= 1000000 <span class="keywd">then</span>
          <span class="keywd">if</span> number &lt; 2000000 <span class="keywd">then</span>
            stri := <span class="stri">"einemillion"</span>;
          <span class="keywd">else</span>
            stri := str_1E3(number <span class="op">div</span> 1000000) &amp; <span class="stri">"millionen"</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> number <span class="op">rem</span> 1000000 &lt;> 0 <span class="op">or</span> number = 0 <span class="keywd">then</span>
          stri &amp;:= str_1E6(number <span class="op">rem</span> 1000000);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">func</span>;

  <span class="keywd">begin</span>
    germanNumber := str_1E9(number);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
