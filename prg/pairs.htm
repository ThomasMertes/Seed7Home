<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  pairs.sd7     Concentration game                                *)</span>
<span class="comment">(*  Copyright (C) 2005  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/text.htm">text.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/stdfont9.htm">stdfont9.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/pixmap_file.htm">pixmap_file.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/dialog.htm">dialog.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/chartype.htm">chartype.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/time.htm">time.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/duration.htm">duration.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/pic32.htm">pic32.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">integer</span>: WINDOW_WIDTH <span class="keywd">is</span> 992;
<span class="keywd">const</span> <span class="type">integer</span>: WINDOW_HEIGHT <span class="keywd">is</span> 704;
<span class="keywd">const</span> <span class="type">integer</span>: CARD_SIZE <span class="keywd">is</span> 64;
<span class="keywd">const</span> <span class="type">integer</span>: CARD_BORDER <span class="keywd">is</span> 3;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_SIZE <span class="keywd">is</span> CARD_SIZE + 2 * CARD_BORDER;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_LINES <span class="keywd">is</span> 6;
<span class="keywd">const</span> <span class="type">integer</span>: FIELD_COLUMNS <span class="keywd">is</span> 14;
<span class="keywd">const</span> <span class="type">integer</span>: UPPER_BORDER <span class="keywd">is</span> (WINDOW_HEIGHT - FIELD_LINES * FIELD_SIZE) <span class="op">div</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: LEFT_BORDER <span class="keywd">is</span> (WINDOW_WIDTH - FIELD_COLUMNS * FIELD_SIZE) <span class="op">div</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: COMPUTER_HIT_YPOS <span class="keywd">is</span> (UPPER_BORDER + CARD_BORDER - 2 * FIELD_SIZE) <span class="op">div</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: OPPONENT_XPOS <span class="keywd">is</span> 76;
<span class="keywd">const</span> <span class="type">integer</span>: OPPONENT_YPOS <span class="keywd">is</span> (UPPER_BORDER + CARD_BORDER - 128) <span class="op">div</span> 2;

<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: opponent <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">PRIMITIVE_WINDOW</span>: digit_pixmap <span class="keywd">is</span> 0 <span class="op">times</span> PRIMITIVE_WINDOW.value;

<span class="keywd">const</span> <span class="type">type</span>: cardType <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: picture <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: visibleType <span class="keywd">is</span> new <span class="keywd">enum</span>
    backSide, frontSide, removed
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">type</span>: fieldType <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: cardNumber <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">visibleType</span>: visible <span class="keywd">is</span> backSide;
    <span class="keywd">var</span> <span class="type">boolean</span>: visited <span class="keywd">is</span> FALSE;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: gameObj <span class="keywd">is</span> new <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: currLevel <span class="keywd">is</span> 2;
    <span class="keywd">var</span> <span class="type">integer</span>: playerHits <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: computerHits <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: player_hit_ypos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: quit <span class="keywd">is</span> FALSE;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">var</span> <span class="type">gameObj</span>: game <span class="keywd">is</span> gameObj.value;


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_2_5 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W WWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W WWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"           WW    WWWWW          "</span>,
  <span class="stri">"            W    W   W          "</span>,
  <span class="stri">"            W    W   W          "</span>,
  <span class="stri">"            W    W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_3_4 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"           WW    WWWWW          "</span>,
  <span class="stri">"            W        W          "</span>,
  <span class="stri">"            W    WWWWW          "</span>,
  <span class="stri">"            W    W              "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_4_4 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W WWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"           WW    WWWW           "</span>,
  <span class="stri">"            W    W              "</span>,
  <span class="stri">"            W    WWWWW          "</span>,
  <span class="stri">"            W    W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_4_5 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W WWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W WWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W WWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W WWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"              W  W   W          "</span>,
  <span class="stri">"          WWWWW  W   W          "</span>,
  <span class="stri">"          W      W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_4_6 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWWW  W              "</span>,
  <span class="stri">"              W  W W            "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"          W        W            "</span>,
  <span class="stri">"          WWWWW    W            "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_5_6 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"              W  W   W          "</span>,
  <span class="stri">"          WWWWW  W   W          "</span>,
  <span class="stri">"              W  W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_6_6 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W WWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWWW  WWWW           "</span>,
  <span class="stri">"              W  W              "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"              W  W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_6_7 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W WWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W WWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W WWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W WWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W WWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W WWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          W      WWWWW          "</span>,
  <span class="stri">"          W W        W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"            W    W              "</span>,
  <span class="stri">"            W    WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_6_8 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W WWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W WWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W WWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W WWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W WWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W WWWWWWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          W      WWWWW          "</span>,
  <span class="stri">"          W W    W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"            W    W   W          "</span>,
  <span class="stri">"            W    WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_6_10 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W WWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W WWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W WWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W WWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W WWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W WWWWWWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWW   WWWWW          "</span>,
  <span class="stri">"          W      W   W          "</span>,
  <span class="stri">"          WWWWW  W   W          "</span>,
  <span class="stri">"          W   W  W   W          "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_6_12 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W WWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W WWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W WWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W WWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W WWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W WWWWWW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"              W      W          "</span>,
  <span class="stri">"             W   WWWWW          "</span>,
  <span class="stri">"            W    W              "</span>,
  <span class="stri">"            W    WWWWW          "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: size_6_14 <span class="keywd">is</span> [](
  <span class="stri">"           YYYYY                "</span>,
  <span class="stri">"          YYYYYYY               "</span>,
  <span class="stri">"          YYBWBYY               "</span>,
  <span class="stri">"          YYWOWYY               "</span>,
  <span class="stri">"            WWW                 "</span>,
  <span class="stri">"          OOOOOOO               "</span>,
  <span class="stri">"         OOOOOOOOO              "</span>,
  <span class="stri">"        WO OOMOO OW             "</span>,
  <span class="stri">"       WW  MMMMM  WW            "</span>,
  <span class="stri">"       bWWWbbbbbWWWb            "</span>,
  <span class="stri">"       bbbWWbbbWWbbb            "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W W W WW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W W W WW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W W W WW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W W W WW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W W W WW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">" W W W W W W W W W W W W W W WW "</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"          WWWWW  W              "</span>,
  <span class="stri">"          W   W  W W            "</span>,
  <span class="stri">"          WWWWW  WWWWW          "</span>,
  <span class="stri">"          W   W    W            "</span>,
  <span class="stri">"          WWWWW    W            "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: panic_monster1_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">" B           B  "</span>,
  <span class="stri">" B           B  "</span>,
  <span class="stri">" BBBBB   BBBBB  "</span>,
  <span class="stri">"      OOO       "</span>,
  <span class="stri">"    OOOOOOO     "</span>,
  <span class="stri">"  O      B  O   "</span>,
  <span class="stri">"  O      B  O   "</span>,
  <span class="stri">"  O         O   "</span>,
  <span class="stri">"  OOOOOOOOOOO   "</span>,
  <span class="stri">"    O     O     "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: panic_monster2_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   G       G    "</span>,
  <span class="stri">"   G       G    "</span>,
  <span class="stri">" GGGGG   GGGGG  "</span>,
  <span class="stri">" GGGGG   GGGGG  "</span>,
  <span class="stri">" G  M  G  M  G  "</span>,
  <span class="stri">" G     G     G  "</span>,
  <span class="stri">" GGGGGGGGGGGGG  "</span>,
  <span class="stri">"   GGGGGGGGG    "</span>,
  <span class="stri">"   OOO   OOO    "</span>,
  <span class="stri">" OOO       OOO  "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: panic_monster3_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   B       B    "</span>,
  <span class="stri">"   BBB   BBB    "</span>,
  <span class="stri">" BBBBB   BBBBB  "</span>,
  <span class="stri">" BBBBB   BBBBB  "</span>,
  <span class="stri">"   B  OOO  B    "</span>,
  <span class="stri">"   B  OOO  B    "</span>,
  <span class="stri">"   BBB   BBB    "</span>,
  <span class="stri">"   B   B   B    "</span>,
  <span class="stri">"     BBBBB      "</span>,
  <span class="stri">"     B   B      "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: dig_right_pic <span class="keywd">is</span> [](
  <span class="stri">"  WWWWW         "</span>,
  <span class="stri">"  WW WWW        "</span>,
  <span class="stri">"  WWWWW         "</span>,
  <span class="stri">"   WWW          "</span>,
  <span class="stri">"    W           "</span>,
  <span class="stri">"  WWWWWW        "</span>,
  <span class="stri">"  WWWW WW       "</span>,
  <span class="stri">"   WWWW WW      "</span>,
  <span class="stri">"   WWWWWWW      "</span>,
  <span class="stri">"   WWW  WW      "</span>,
  <span class="stri">"  WW WW  WW     "</span>,
  <span class="stri">"  WW WW   WW    "</span>,
  <span class="stri">"  WW WW    WWW  "</span>,
  <span class="stri">"  WW WW    WWW  "</span>,
  <span class="stri">"  WW WW     WW  "</span>,
  <span class="stri">" WWW WWW     W  "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: big_bush_pic <span class="keywd">is</span> [](
  <span class="stri">"     G G  GG  G  G   G G        "</span>,
  <span class="stri">"      GG   G  G G    GGGGG      "</span>,
  <span class="stri">"       G    G GG    gg G   G  G "</span>,
  <span class="stri">"    GGGGG    GGG G gg  G   G GG "</span>,
  <span class="stri">" G     Ggg G  gg Ggg   G   gg   "</span>,
  <span class="stri">" GG   G  ggG  gg gg   gG  ggGG  "</span>,
  <span class="stri">"   G      gg  ggggG  gg  gg     "</span>,
  <span class="stri">" G  GGGGggggg ggg   gg  ggggGGGG"</span>,
  <span class="stri">"  G  G      bbbb    bbggg       "</span>,
  <span class="stri">"GGGG   G  G  bbb   bbgg G    GG "</span>,
  <span class="stri">"   gg   GG G  bb  bb  G   G  G  "</span>,
  <span class="stri">" GGGgg   G  ggbb bb G   G GggGGG"</span>,
  <span class="stri">"     gg  gG  gbbbb  G gg  gg    "</span>,
  <span class="stri">"  G   gg g bb bbb   ggg  ggggGG "</span>,
  <span class="stri">" GGG   gbg  bbbb  G gg  gg G    "</span>,
  <span class="stri">"    G   bg   bbb G  g  gg   G   "</span>,
  <span class="stri">"  G  G   gb   bbbb  bbbb  G    G"</span>,
  <span class="stri">"   g  g  gbb  bbb   bbbg  G  GG "</span>,
  <span class="stri">"GGGgggggbb bb bb  G bb    gg G  "</span>,
  <span class="stri">"       bbb  bbbb  GbbggGG ggg   "</span>,
  <span class="stri">"  G  GGGbb  Gbbb  bb      ggGGG "</span>,
  <span class="stri">"   G     bb   bb bbggGG  gg     "</span>,
  <span class="stri">"    gg G  bb  bbbb      ggggGGGG"</span>,
  <span class="stri">" GGggggG GGbb bbb      gggg     "</span>,
  <span class="stri">"   G  gg    bbbb   G  bb  GGGG  "</span>,
  <span class="stri">"  G    ggG   bbb  G  bb    G    "</span>,
  <span class="stri">"     G  gg  G bbgg  bb          "</span>,
  <span class="stri">"  GGgggggbb  Gbbg  bbbggggGGGG  "</span>,
  <span class="stri">"    G     bb  bb  bb   G        "</span>,
  <span class="stri">"       GGGGbb bb bb     G       "</span>,
  <span class="stri">"            bbbbbbGGGG          "</span>,
  <span class="stri">"             bbbb               "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: chain_pic <span class="keywd">is</span> [](
  <span class="stri">"     BBB   BBB  "</span>,
  <span class="stri">"    B   B B   B "</span>,
  <span class="stri">"    B  BBBBB  B "</span>,
  <span class="stri">"    BB  B B   B "</span>,
  <span class="stri">"    BBBB   BBB  "</span>,
  <span class="stri">"   BB           "</span>,
  <span class="stri">" BBB            "</span>,
  <span class="stri">"B B B           "</span>,
  <span class="stri">"B   B           "</span>,
  <span class="stri">"B B B           "</span>,
  <span class="stri">" BBB            "</span>,
  <span class="stri">"   BBBBB   BBB  "</span>,
  <span class="stri">"    BB  B B   B "</span>,
  <span class="stri">"    B  BBBBB  B "</span>,
  <span class="stri">"    B   B B   B "</span>,
  <span class="stri">"     BBB   BBB  "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: large_gem_pic <span class="keywd">is</span> [](
  <span class="stri">"                                "</span>,
  <span class="stri">"                                "</span>,
  <span class="stri">"     RRRRRR          RRRRRR     "</span>,
  <span class="stri">"   RRRRRRRRRR      RRRRRRRRRR   "</span>,
  <span class="stri">"  RRRrrrrrrRRR    RRRrrrrrrRRR  "</span>,
  <span class="stri">" RRrrrrrrrrrrRR  RRrrrrrrrrrrRR "</span>,
  <span class="stri">" RRrrrrrrrrrrrRRRRrrrrrrrrrrrRR "</span>,
  <span class="stri">"RRrrrrrrrrrrrrrRRrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">"RRrrrrrrrrrrrrrrrrrrrrrrrrrrrrRR"</span>,
  <span class="stri">" RRrrrrrrrrrrrrrrrrrrrrrrrrrrRR "</span>,
  <span class="stri">" RRrrrrrrrrrrrrrrrrrrrrrrrrrrRR "</span>,
  <span class="stri">"  RRrrrrrrrrrrrrrrrrrrrrrrrrRR  "</span>,
  <span class="stri">"   RRrrrrrrrrrrrrrrrrrrrrrrRR   "</span>,
  <span class="stri">"    RRrrrrrrrrrrrrrrrrrrrrRR    "</span>,
  <span class="stri">"     RRrrrrrrrrrrrrrrrrrrRR     "</span>,
  <span class="stri">"      RRrrrrrrrrrrrrrrrrRR      "</span>,
  <span class="stri">"       RRrrrrrrrrrrrrrrRR       "</span>,
  <span class="stri">"        RRrrrrrrrrrrrrRR        "</span>,
  <span class="stri">"         RRrrrrrrrrrrRR         "</span>,
  <span class="stri">"          RRrrrrrrrrRR          "</span>,
  <span class="stri">"           RRrrrrrrRR           "</span>,
  <span class="stri">"            RRrrrrRR            "</span>,
  <span class="stri">"             RRrrRR             "</span>,
  <span class="stri">"              RRRR              "</span>,
  <span class="stri">"               RR               "</span>,
  <span class="stri">"                                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: fairy_pic <span class="keywd">is</span> [](
  <span class="stri">"      xxxxx                   YYYY                   xxxxx      "</span>,
  <span class="stri">"    xxxcccxxx               YYYYYYYY               xxxcccxxx    "</span>,
  <span class="stri">"   xxcccccccxx             YYYYYYYYYY             xxcccccccxx   "</span>,
  <span class="stri">"  xxcccccccccxx           YYYYYYYYYYYY           xxcccccccccxx  "</span>,
  <span class="stri">"  xcccccccccccxx          YYYWWWWWWYYY          xxcccccccccccx  "</span>,
  <span class="stri">"  xccccccccccccxx        YYYWWWWWWWWYYY        xxccccccccccccx  "</span>,
  <span class="stri">"  xxccccccccccccxx       YYYWBBWWBBWYYY       xxccccccccccccxx  "</span>,
  <span class="stri">"   xcccccccccccccxx      YYYWWWWWWWWYYY      xxcccccccccccccx   "</span>,
  <span class="stri">"   xxcccccccccccccxx     YYYWWWWWWWWYYY     xxcccccccccccccxx   "</span>,
  <span class="stri">"    xxxccccccccccccxx    YYYWWOWWOWWYYY    xxccccccccccccxxx    "</span>,
  <span class="stri">"   xxcccccBccccBccccxx   YYYWWWOOWWWYYY   xxcccccccccccccccxx   "</span>,
  <span class="stri">"   xcccccccBccBccccccxx      WWWWWW      xxcccccccccccccccccx   "</span>,
  <span class="stri">"  xxccccccccccccccccccxx      WWWW      xxccccccccccccccccccxx  "</span>,
  <span class="stri">"  xccccccBBcWWcBBccccccxx     WWWW     xxccccccccccccccccccccx  "</span>,
  <span class="stri">"  xcccccccccWWccccccccccxWWWWWWWWWWWWWWxcccccccccccccccccccccx  "</span>,
  <span class="stri">"  xxccccccBcRRcBcccccccWWWWWWWWWWWWWWWWWWcccccccccccccccccccxx  "</span>,
  <span class="stri">"   xcccccBccRRccBcccccWWWWWWWWWWWWWWWWWWWWccccccccccccccccccx   "</span>,
  <span class="stri">"   xxcccccccRRcccccccWWWWWRRRWWWWWWRRRWWWWWccccccccccccccccxx   "</span>,
  <span class="stri">"    xxxcccccRRccccccWWWWWRRRRRWWWWRRRRRWWWWWcccccccccccccxxx    "</span>,
  <span class="stri">"   xxcccccccRRcccccWWWWWRRRRRRRWWRRRRRRRWWWWWccccccccccccccxx   "</span>,
  <span class="stri">"   xccccccccRRccccWWWWWcRRRRRRRWWRRRRRRRcWWWWWccccccccccccccx   "</span>,
  <span class="stri">"  xxccccccccRRcccWWWWWccRRRRRRRWWRRRRRRRccWWWWWcccccccccccccxx  "</span>,
  <span class="stri">"  xcccccccccRRccWWWWWcccxRRRRRWWWWRRRRRxcccWWWWWcccccccccccccx  "</span>,
  <span class="stri">"  xcccccccccRRcWWWWWcccxxcRRRWWWWWWRRRcxxcccWWWWWccccccccccccx  "</span>,
  <span class="stri">"  xxccccccccRRWWWWWcccxx   WWWWWWWWWW   xxcccWWWWWccccccccccxx  "</span>,
  <span class="stri">"   xcccccccWWWWWWWcccxx    WWWWWWWWWW    xxcccWWWWWWWWccccccx   "</span>,
  <span class="stri">"   xxcccccWWWWWWWcccxx     WWWWWWWWWW     xxcccWWWWWWccccccxx   "</span>,
  <span class="stri">"    xxxcccWWWWWWcccxx      WWWWYYWWWW      xxcccWWWWWWcccxxx    "</span>,
  <span class="stri">"   xxcccccWWWWWcccxx      WWWWWYYWWWWW      xxccWWWWWWWccccxx   "</span>,
  <span class="stri">"   xcccccccWWWcccxx       WWWWWWWWWWWW       xxccWWWWWccccccx   "</span>,
  <span class="stri">"  xxccccccccccccxx       WWWWWWWWWWWWWW       xxccWWccccccccxx  "</span>,
  <span class="stri">"  xccccccccccccxx       RRRRRRRRRRRRRRRR       xxccccccccccccx  "</span>,
  <span class="stri">"  xcccccccccccxx        WWRRRRRRRRRRRRWW        xxcccccccccccx  "</span>,
  <span class="stri">"  xxcccccccccxx        WWWWWRRRRRRRRWWWWW        xxcccccccccxx  "</span>,
  <span class="stri">"   xxcccccccxx         WWWWWWRRRRRRWWWWWW         xxcccccccxx   "</span>,
  <span class="stri">"    xxxcccxxx          WWWWWWWRRRRWWWWWWW          xxxcccxxx    "</span>,
  <span class="stri">"      xxxxx            WWWWWWWRRRRWWWWWWW            xxxxx      "</span>,
  <span class="stri">"                       WWWWWWWWRRWWWWWWWW                       "</span>,
  <span class="stri">"                        WWWWWWWRRWWWWWWW                        "</span>,
  <span class="stri">"                        WWWWWWW  WWWWWWW                        "</span>,
  <span class="stri">"                         WWWWWW  WWWWWW                         "</span>,
  <span class="stri">"                         WWWWWW  WWWWWW                         "</span>,
  <span class="stri">"                         WWWWWW  WWWWWW                         "</span>,
  <span class="stri">"                         WWWWWW  WWWWWW                         "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                           WWWW  WWWW                           "</span>,
  <span class="stri">"                          WWWWW  WWWWW                          "</span>,
  <span class="stri">"                         WWWWWW  WWWWWW                         "</span>,
  <span class="stri">"                         WWWWWW  WWWWWW                         "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: computer_pic <span class="keywd">is</span> [](
  <span class="stri">"ccccccccccccccccccc                                 YYYYY       "</span>,
  <span class="stri">"ccccccccccccccccccc                                YYYYYYY      "</span>,
  <span class="stri">"cc               cc                               YYYYYYYY      "</span>,
  <span class="stri">"cc WWW  R R  WWW cc                               YYYYYYYYY     "</span>,
  <span class="stri">"cc  W  RRRRR WWW cc                               YYYYYYYYY     "</span>,
  <span class="stri">"cc  W  RRRRR  W  cc                                WWWYYYYY     "</span>,
  <span class="stri">"cc  W   RRR  WWW cc                                cWWYYYYY     "</span>,
  <span class="stri">"cc  W   RRR   W  cc                               WWWWYYYYY     "</span>,
  <span class="stri">"cc WWW   R   W W cc                               WWWWRYYYY     "</span>,
  <span class="stri">"cc               cc                                WWWYYYYY     "</span>,
  <span class="stri">"cc ccccccccccc   cc                                OWWYYYYY     "</span>,
  <span class="stri">"cc WWWWWWWWWWW   cc                                WWWWW        "</span>,
  <span class="stri">"cc W         W   cc                                 WWW         "</span>,
  <span class="stri">"cc W WWWW WW W   cc                                 WWW         "</span>,
  <span class="stri">"cc W         W   cc                                RRRRR  GGG   "</span>,
  <span class="stri">"cc W   ccccccccc cc                                RRRRR GGGG   "</span>,
  <span class="stri">"cc W W WWWWWWWWW cc                                RRRRRRGGGG   "</span>,
  <span class="stri">"cc W   W       W cc                               RRRRRRRGGGG cc"</span>,
  <span class="stri">"cc WWWWW  RRGG W cc                              RRRRRRRRGGGG cc"</span>,
  <span class="stri">"cc     W RRRR  W cc                             RRRRRRRRRGGGGccc"</span>,
  <span class="stri">"cc     W  RR   W cc                             RRRRRRRRRGGGGccc"</span>,
  <span class="stri">"cc     WWWWWWWWW cc                             RRRRRRRRRGGGGccc"</span>,
  <span class="stri">"cc               cc                              RRRRRRRRGGGGccc"</span>,
  <span class="stri">"ccccccccccccccccccc                               RRRRRRRGGGG cc"</span>,
  <span class="stri">"ccccccccccccccccccc                               RRRRRRRGGGG cc"</span>,
  <span class="stri">"       xxxxx      R   G  R                       RRRRRRRRGGGG cc"</span>,
  <span class="stri">"       xxxxx       R  G R                        RRRRRRRRGGGG cc"</span>,
  <span class="stri">"       xxxxx        R GR                        RRRRRRRRR GGG cc"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxxxxx BBBB                     RRRRRRRRRRRR     cc"</span>,
  <span class="stri">"xxxxxxxxxxxWWWWWWxx BBBB                  RRRRRRRRRRRRRRR     cc"</span>,
  <span class="stri">"xxWWxxxxxxxxxxxxxxx BBBB  cccc  WWWWW  RRRRRRRRRR  RRRRRR     cc"</span>,
  <span class="stri">"xxWWxxxxxxxWWWWWWxx BBBB  cccccccWWWWWWRRRRRRR     RRRRRR     cc"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxxxxx BBBB  cccccccccWWWWRRRR        GGGGGG     cc"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb        GGGGGG     cc"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb        BBBBBBB    cc"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb       BBBBBBBB    cc"</span>,
  <span class="stri">"  bbbb                  bbbb                  BBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb              BBBBBBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb          BBBBBBBBBBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb       BBBBBBBBBBBBBBBBBBBBBBBB   cc"</span>,
  <span class="stri">"  bbbb                  bbbb      BBBBBBBBBBBBBBBBBBBBBBBB    cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBBBBBBBBBBBBBBBBBBBB    cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBBBBBBBBBBBBBBBBBBB     cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBBBBBBBBBBBBBBBBB       cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBBGGGGGGGGGGGGGGGGGGGGG  cc"</span>,
  <span class="stri">"  bbbb                  bbbb     BBBBBGGGGGGGGGGGGGGGGGGGGGGG cc"</span>,
  <span class="stri">"  bbbb            W     bbbb     BBBBBGGGGGGGGGGGGGGGGGGGGGGG cc"</span>,
  <span class="stri">"  bbbb      W    WW     bbbb     BBBBBGGGGGGGGGGGGGGGGGGGGGGG cc"</span>,
  <span class="stri">"  bbbb      WW  WWW     bbbb     BBBBB          ccc  cccccc  ccc"</span>,
  <span class="stri">"  bbbb     WWW WWWW     bbbb     BBBBB          ccc ccccccccccc "</span>,
  <span class="stri">"  bbbb    xxxxxxxxxx    bbbb     BBBBB          ccc cccccccccc  "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xxxWxxxWxx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xWxxxWxxxW    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xxxWxxxWxx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB          ccc             "</span>,
  <span class="stri">"  bbbb    xWxxxWxxxW    bbbb     BBBBB   ccccccccccccccccc      "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb     BBBBB ccccccccccccccccccccc    "</span>,
  <span class="stri">"  bbbb    xxxWxxxWxx    bbbb     BBBBB ccccccccccccccccccccc    "</span>,
  <span class="stri">"  bbbb    WxWxWxWxWx    bbbb  RRRRRRRR bbb      bbb      bbb    "</span>,
  <span class="stri">"  bbbb    xWxxxWxxxW    bbbb RRRRRRRRR bbb      bbb      bbb    "</span>,
  <span class="stri">"  bbbb    xxxxxxxxxx    bbbb RRRRRRRRR bbb      bbb      bbb    "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: sea_pic <span class="keywd">is</span> [](
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccccOOOOOOOcccccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOcccccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOcccccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOccccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOcccc"</span>,
  <span class="stri">"cccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOcccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOOOccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOOOccc"</span>,
  <span class="stri">"ccccccccccccccccccccccccccccccccccccccccOOOOOOOOOOOOOOOOOOOOOccc"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOOOOBOOOOOBOOOOOBOOOOBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOOOOOBOOOOOBOOOOOBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOOOBOOOBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWBBWWB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYRRRRRYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYbbbbbbYYYYYYYYYYYYYYYYYYYWRRRRWWWWYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYbbbbbbbbbYYYYYYYYYYYYYYYYYYWWRRRWWWWWWWYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YbbbbWWWWWWYYYYYWWWRWWWWWWWWWWWRRWWWWWWWWWWYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YbbbWWBWWWWWYYWWWWxRWWWWWWWWWWWRWWWWWWWWWWWWWYYYYYYYYYYYYYWWWYYY"</span>,
  <span class="stri">"bbbbWWBWWOWWWWWWWWWWxxWWWWWWWWWRWWWWWWWWWWWWWWWYYYYYYWWWWWWWWWYY"</span>,
  <span class="stri">"bbbbWWWWWWOWWWWWWWWWWWxxWWWWWWWRWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWY"</span>,
  <span class="stri">"bbbbWWBWWOWWWWWWWWWWWWWWxxWWWWWRWWWWWWWWWWWWWWWWWWWWWWWWYYYYWWWY"</span>,
  <span class="stri">"YbbbWWBWWWWWYYWWWRRRWWWWWWxxWWWRRWWWWWWWWWWWWWWWWWWWYYYYYYYYYWWW"</span>,
  <span class="stri">"YbbbbWWWWWWYYYYYRRRRRWWWWWWWYYYYYYYYYYYYYYYYYYWWWWYYYYYYYYYYYYRW"</span>,
  <span class="stri">"YGbbbbbbbbbGGGGGGRRRRRGGWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGY"</span>,
  <span class="stri">"GGGGGGGGGGGGGGGGGGGGGGGGGGWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"GGGGGGGGGGGGGGGGGGWWWWWWWWWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"GGGGGGGGGGGGGGGWWWWWWWWWWWWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"GGGGGGGGGGGWWWWWWWWWWWWWWWWWWWWGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: woman_pic <span class="keywd">is</span> [](
  <span class="stri">"                             YYYYYY                             "</span>,
  <span class="stri">"                           YYYYYYYYYY                           "</span>,
  <span class="stri">"                         YYYYYYYYYYYYYY                         "</span>,
  <span class="stri">"                        YYYYYYYYYYYYYYYY                        "</span>,
  <span class="stri">"                       YYYYYYYYYYYYYYYYYY                       "</span>,
  <span class="stri">"                      YYYYYYYYYYYYYYYYYYYY                      "</span>,
  <span class="stri">"                     YYYYYYYYYYYYYYYYYYYYYY                     "</span>,
  <span class="stri">"                    YYYYYYYYYYYYYYYYYYYYYYYY                    "</span>,
  <span class="stri">"                    YYYYYYYWWWWWWWWWWYYYYYYY                    "</span>,
  <span class="stri">"                   YYYYYYYWWWWWWWWWWWWYYYYYYY                   "</span>,
  <span class="stri">"                   YYYYYYWWWWWWWWWWWWWWYYYYYY                   "</span>,
  <span class="stri">"                  YYYYYYWWWWWWWWWWWWWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWBBWWWWWWBBWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWBBBBWWWWBBBBWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWBBWWWWWWBBWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWWWWWWWWWWWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWWWWWWWWWWWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWWWWWWWWWWWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWWWWWWWWWWWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWWOOWWWWOOWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYYWWWWWOOOOOOWWWWWYYYYYY                  "</span>,
  <span class="stri">"                  YYYYYY WWWWWOOOOWWWWW YYYYYY                  "</span>,
  <span class="stri">"                          WWWWWWWWWWWW                          "</span>,
  <span class="stri">"                           WWWWWWWWWW                           "</span>,
  <span class="stri">"                            WWWWWWWW                            "</span>,
  <span class="stri">"                            WWWWWWWW                            "</span>,
  <span class="stri">"                            WWWWWWWW                            "</span>,
  <span class="stri">"                           WWWWWWWWWW                           "</span>,
  <span class="stri">"                   OOOOOOOOWWWWWWWWWWOOOOOOOO                   "</span>,
  <span class="stri">"                OOOOOOOOOOOOWWWWWWWWOOOOOOOOOOOO                "</span>,
  <span class="stri">"              OOOOOOOOOOOOOOOOWWWWOOOOOOOOOOOOOOOO              "</span>,
  <span class="stri">"             OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO             "</span>,
  <span class="stri">"            OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO            "</span>,
  <span class="stri">"           OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO           "</span>,
  <span class="stri">"          OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO          "</span>,
  <span class="stri">"         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO         "</span>,
  <span class="stri">"         WOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOW         "</span>,
  <span class="stri">"        WWWOOOOOOO OOOOOOOOOOOOOOOOOOOOOOOOOO OOOOOOOWWW        "</span>,
  <span class="stri">"       WWWWWOOOOO  OOOOOOOOOOOOOOOOOOOOOOOOOO  OOOOOWWWWW       "</span>,
  <span class="stri">"      WWWWWWWOOO  OOOOOOOOOOOOOOOOOOOOOOOOOOOO  OOOWWWWWWW      "</span>,
  <span class="stri">"     WWWWWWWWWO   OOOOOOOOOOOOOOOOOOOOOOOOOOOO   OWWWWWWWWW     "</span>,
  <span class="stri">"    WWWWWWWWW     OOOOOOOOOOOOOOOOOOOOOOOOOOOO     WWWWWWWWW    "</span>,
  <span class="stri">"   WWWWWWWWW      OOOOOOOOOOOOMOOMOOOOOOOOOOOO      WWWWWWWWW   "</span>,
  <span class="stri">"  WWWWWWWWW        OOOOOOOOOOOOOOOOOOOOOOOOOO        WWWWWWWWW  "</span>,
  <span class="stri">" WWWWWWWWW         OOOOOOOOOOMOOOOMOOOOOOOOOO         WWWWWWWWW "</span>,
  <span class="stri">"WWWWWWWWW           OOOOOOOOMOOOOOOMOOOOOOOO           WWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWW            OMOMOMOOOOOOOOOOMOMOMO            WWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWW         OOOOOOOOOOOOOOOOOOOOOO         WWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWW       OOOOOOOOOOOOOOOOOOOO       WWWWWWWWWWWWWWW"</span>,
  <span class="stri">" WWWWWWWWWWWWWWWWW    OOOOOOOOOOOOOOOOOOOO    WWWWWWWWWWWWWWWWW "</span>,
  <span class="stri">"bbbbWWWWWWWWWWWWWWWWWbbbbbbbbbbbbbbbbbbbbbbWWWWWWWWWWWWWWWWWbbbb"</span>,
  <span class="stri">"bbbbbbbWWWWWWWWWWWWWWWWWWWWWbbbbbbbbWWWWWWWWWWWWWWWWWWWWWbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbWWWWWWWWWWWWWWWbbbbbbbbbbbbbbWWWWWWWWWWWWWWWbbbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbWWWWWWWWWWWWWWbbbbbbbbbbWWWWWWWWWWWWWWbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbWWWWWWWWWWWWWbbbbbbWWWWWWWWWWWWWbbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbWWWWWWWWWWWbbbbbbbbWWWWWWWWWWWbbbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbWWWWWWWWxxbbbbbbbbbbWWWWWWWWbbbbbbccccbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbWWWWWxxxbbbbbbbbbbbWWWWWbbbbbbcccbbcccbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbxxxxxxxbbbbbbbbbbbbbbbbbbbbbccbbbbbbccbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbcccccccbbbbbbbbbbbbbbbbbbbcccbbbbbbbbcbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbbbbbbbbbbbccccbbbbbbbbbbccbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbbbcccccccccbbbbbbbbbbbbbbcbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccbbbbbbbbbbbbbbbbbbbbbbcbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbb"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: zero <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc     xBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: one <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"        xBc     "</span>,
  <span class="stri">"      xBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: two <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBc        "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: three <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: four <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc    xBc    "</span>,
  <span class="stri">"  xBc    xBc    "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"      xBBBBc    "</span>,
  <span class="stri">"                "</span>);

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: five <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: six <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBc           "</span>,
  <span class="stri">"  xBBBBBBBBBBc  "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: seven <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"  xBBBBBBBBBBBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"            xBc "</span>,
  <span class="stri">"           xBBc "</span>,
  <span class="stri">"      xBBBBBBc  "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"     xBBBBc     "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: eight <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: nine <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"  xBBc     xBBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"  xBc       xBc "</span>,
  <span class="stri">"   xBBBBBBBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"         xBBBBc "</span>,
  <span class="stri">"  xBc    xBBBBc "</span>,
  <span class="stri">"  xBBc   xBBBBc "</span>,
  <span class="stri">"   xBBBBBBBBBc  "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">cardType</span>: genCard (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: pattern) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">cardType</span>: aCard <span class="keywd">is</span> cardType.value;
  <span class="keywd">begin</span>
    aCard.picture := pattern;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">var</span> <span class="type">cardType</span>: back     <span class="keywd">is</span> genCard(card_back_pic);

<span class="keywd">var</span> <span class="type">array</span> <span class="type">cardType</span>: cards <span class="keywd">is</span> [](
    genCard(fairy_pic),
    genCard(computer_pic),
    genCard(sea_pic),
    genCard(big_bush_pic),
    genCard(crown_pic),
    genCard(hut_pic),
    genCard(fountain_pic),
    genCard(snake_pic),
    genCard(lamp_pic),
    genCard(scepter_pic),
    genCard(book_pic),
    genCard(hourglass_pic),
    genCard(large_gem_pic),
    genCard(magic_wand_pic),
    genCard(sword_pic),
    genCard(key_pic),
    genCard(glasses_pic),
    genCard(helmet_pic),
    genCard(flask_pic),
    genCard(crystal_ball_pic),
    genCard(necklace_pic),
    genCard(holy_cross_pic),
    genCard(diamond_pic),
    genCard(silver_bars_pic),
    genCard(ruby_pic),
    genCard(jade_figurine_pic),
    genCard(harp_pic),
    genCard(goldbar_pic),
    genCard(goblet_pic),
    genCard(bat_pic),
    genCard(statue_pic),
    genCard(grating_pic),
    genCard(vampire_pic),
    genCard(ogre_pic),
    genCard(demon_pic),
    genCard(chain_pic),
    genCard(woman_pic),
    genCard(panic_monster1_pic),
    genCard(panic_monster2_pic),
    genCard(panic_monster3_pic),
    genCard(dig_right_pic),
    genCard(tree_pic)
  );

<span class="keywd">var</span> <span class="type">array</span> <span class="type">cardType</span>: size_descr <span class="keywd">is</span> [](
    genCard(size_2_5),
    genCard(size_3_4),
    genCard(size_4_4),
    genCard(size_4_5),
    genCard(size_4_6),
    genCard(size_5_6),
    genCard(size_6_6),
    genCard(size_6_7),
    genCard(size_6_8),
    genCard(size_6_10),
    genCard(size_6_12),
    genCard(size_6_14)
  );

<span class="keywd">const</span> <span class="type">array</span> <span class="type">array</span> <span class="type">integer</span>: size_list <span class="keywd">is</span> [](
    [](2, 5),
    [](3, 4),
    [](4, 4),
    [](4, 5),
    [](4, 6),
    [](5, 6),
    [](6, 6),
    [](6, 7),
    [](6, 8),
    [](6, 10),
    [](6, 12),
    [](6, 14)
  );


<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">fieldType</span>: field <span class="keywd">is</span> 0 <span class="op">times</span> 0 <span class="op">times</span> fieldType.value;


<span class="keywd">const</span> <span class="type">proc</span>: draw (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos,
    <span class="keywd">inout</span> <span class="type">cardType</span>: aCard) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aCard.pixmap = PRIMITIVE_WINDOW.value <span class="keywd">then</span>
      rect(xPos, yPos, CARD_SIZE, CARD_SIZE, white);
      drawPattern(curr_win, xPos, yPos, aCard.picture, CARD_SIZE <span class="op">div</span> length(aCard.picture), black);
      aCard.pixmap := getPixmap(xPos, yPos, CARD_SIZE, CARD_SIZE);
    <span class="keywd">else</span>
      put(xPos, yPos, aCard.pixmap);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: put (<span class="keywd">inout</span> <span class="type">cardType</span>: aCard, <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    draw(LEFT_BORDER + CARD_BORDER + FIELD_SIZE * pred(column),
        UPPER_BORDER + CARD_BORDER + FIELD_SIZE * pred(line), aCard);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: prepare (<span class="keywd">inout</span> <span class="type">cardType</span>: aCard) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: scale <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">integer</span>: lin <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: col <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aCard.pixmap = PRIMITIVE_WINDOW.value <span class="keywd">then</span>
      height := length(aCard.picture);
      width := length(aCard.picture[1]);
      scale := CARD_SIZE <span class="op">div</span> height;
      pixmap := newPixmap(width * scale, height * scale);
      clear(pixmap, black);

      lin := 1;
      <span class="keywd">while</span> lin &lt;= height <span class="op">and</span> <span class="op">not</span> inputReady(KEYBOARD) <span class="keywd">do</span>
        <span class="keywd">for</span> col <span class="keywd">range</span> 1 <span class="keywd">to</span> width <span class="keywd">do</span>
          rect(pixmap, pred(col) * scale, pred(lin) * scale,
              scale, scale, charColor(aCard.picture[lin][col], black));
        <span class="keywd">end</span> <span class="keywd">for</span>;
        incr(lin);
      <span class="keywd">end</span> <span class="keywd">while</span>;
      <span class="keywd">if</span> <span class="op">not</span> inputReady(KEYBOARD) <span class="keywd">then</span>
        aCard.pixmap := pixmap;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: show (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line][column].visible = backSide <span class="keywd">then</span>
      put(cards[field[line][column].cardNumber], line, column);
      field[line][column].visible := frontSide;
      field[line][column].visited := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: hide (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line][column].visible = frontSide <span class="keywd">then</span>
      put(back, line, column);
      field[line][column].visible := backSide;
<span class="comment">(*
      put(cards[field[line][column].cardNumber], line, column);
      rect(LEFT_BORDER + CARD_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + CARD_BORDER + FIELD_SIZE * pred(line), 16, 16, light_cyan);
*)</span>
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: remove (<span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line][column].visible &lt;> removed <span class="keywd">then</span>
      rect(LEFT_BORDER + CARD_BORDER + FIELD_SIZE * pred(column),
          UPPER_BORDER + CARD_BORDER + FIELD_SIZE * pred(line), CARD_SIZE, CARD_SIZE, white);
      field[line][column].visible := removed;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: hideAll <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
        hide(line, column);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: draw_number (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="type">string</span>: num_stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(num_stri) <span class="keywd">do</span>
      ch := num_stri[index];
      <span class="keywd">if</span> ch = <span class="stri">' '</span> <span class="keywd">then</span>
        rect(xPos + pred(index) * 32,
            yPos,
            32,
            32,
            white);
      <span class="keywd">else</span>
        put(xPos + pred(index) * 32,
            yPos,
            digit_pixmap[ord(ch) - ord(<span class="stri">'0'</span>)]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showHit (<span class="op">in</span> <span class="type">integer</span>: cardNumber, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: yPos, <span class="op">in</span> <span class="keywd">var</span> <span class="type">integer</span>: hits) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> OPPONENT_XPOS + 128 + 4 * CARD_BORDER + 64;
  <span class="keywd">begin</span>
    yPos +:= CARD_BORDER;
    draw_number(OPPONENT_XPOS + 128 + 2 * CARD_BORDER, yPos + 16, succ(hits) <span class="op">lpad</span> 2);
    <span class="keywd">if</span> hits >= 21 <span class="keywd">then</span>
      hits -:= 21;
      yPos +:= FIELD_SIZE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    line(xPos + 32 * hits - 1, yPos, 0, 64, white);
    draw(xPos + 32 * hits,     yPos, cards[cardNumber]);
    line(xPos + 32 * hits + 4, yPos, 0, 64, white);
    draw(xPos + 32 * hits + 5, yPos, cards[cardNumber]);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: countCardBacks <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: count <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
        <span class="keywd">if</span> field[line][column].visible = backSide <span class="keywd">then</span>
          incr(count);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: randomField (<span class="keywd">inout</span> <span class="type">integer</span>: fieldLine, <span class="keywd">inout</span> <span class="type">integer</span>: fieldColumn) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: numCards <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: selectedCard <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    numCards := countCardBacks;
    <span class="keywd">if</span> numCards > 0 <span class="keywd">then</span>
      selectedCard := rand(1, numCards);
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
          <span class="keywd">if</span> field[line][column].visible = backSide <span class="keywd">then</span>
            decr(selectedCard);
            <span class="keywd">if</span> selectedCard = 0 <span class="keywd">then</span>
              fieldLine := line;
              fieldColumn := column;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: randomNotVisited (<span class="keywd">inout</span> <span class="type">integer</span>: fieldLine, <span class="keywd">inout</span> <span class="type">integer</span>: fieldColumn) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: numCards <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: selectedCard <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
        <span class="keywd">if</span> field[line][column].visible = backSide <span class="op">and</span>
          <span class="op">not</span> field[line][column].visited <span class="keywd">then</span>
          incr(numCards);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> numCards > 0 <span class="keywd">then</span>
      selectedCard := rand(1, numCards);
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
          <span class="keywd">if</span> field[line][column].visible = backSide <span class="op">and</span>
              <span class="op">not</span> field[line][column].visited <span class="keywd">then</span>
            decr(selectedCard);
            <span class="keywd">if</span> selectedCard = 0 <span class="keywd">then</span>
              fieldLine := line;
              fieldColumn := column;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">else</span>
      randomField(fieldLine, fieldColumn);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: firstOfPair (<span class="keywd">inout</span> <span class="type">integer</span>: fieldLine, <span class="keywd">inout</span> <span class="type">integer</span>: fieldColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: found) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    found := FALSE;
    <span class="keywd">for</span> line1 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column1 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
        <span class="keywd">if</span> <span class="op">not</span> found <span class="op">and</span> field[line1][column1].visible = backSide <span class="op">and</span>
            field[line1][column1].visited <span class="keywd">then</span>
          <span class="keywd">for</span> column2 <span class="keywd">range</span> succ(column1) <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
            <span class="keywd">if</span> field[line1][column2].visible = backSide <span class="op">and</span>
                field[line1][column2].visited <span class="op">and</span>
                field[line1][column1].cardNumber =
                field[line1][column2].cardNumber <span class="keywd">then</span>
              fieldLine := line1;
              fieldColumn := column1;
              found := TRUE;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">for</span> line2 <span class="keywd">range</span> succ(line1) <span class="keywd">to</span> length(field) <span class="keywd">do</span>
            <span class="keywd">for</span> column2 <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line1]) <span class="keywd">do</span>
              <span class="keywd">if</span> field[line2][column2].visible = backSide <span class="op">and</span>
                  field[line2][column2].visited <span class="op">and</span>
                  field[line1][column1].cardNumber =
                  field[line2][column2].cardNumber <span class="keywd">then</span>
                fieldLine := line1;
                fieldColumn := column1;
                found := TRUE;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: secondOfPair (<span class="op">in</span> <span class="type">integer</span>: cardNumber,
    <span class="keywd">inout</span> <span class="type">integer</span>: fieldLine, <span class="keywd">inout</span> <span class="type">integer</span>: fieldColumn,
    <span class="keywd">inout</span> <span class="type">boolean</span>: found) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    found := FALSE;
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(field[line]) <span class="keywd">do</span>
        <span class="keywd">if</span> field[line][column].visible = backSide <span class="op">and</span>
            field[line][column].visited <span class="op">and</span>
            field[line][column].cardNumber = cardNumber <span class="keywd">then</span>
          fieldLine := line;
          fieldColumn := column;
          found := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel0 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    randomField(line1, column1);
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    randomField(line2, column2);
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel1 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    randomField(line1, column1);
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    <span class="keywd">if</span> rand(1, 5) = 1 <span class="keywd">then</span>
      secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomField(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel2 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    randomField(line1, column1);
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    <span class="keywd">if</span> rand(1, 4) = 1 <span class="keywd">then</span>
      secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomField(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel3 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    randomField(line1, column1);
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    <span class="keywd">if</span> rand(1, 3) = 1 <span class="keywd">then</span>
      secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomField(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel4 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    randomField(line1, column1);
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    <span class="keywd">if</span> rand(1, 2) = 1 <span class="keywd">then</span>
      secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomField(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel5 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    randomField(line1, column1);
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomField(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel6 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found1 <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rand(1, 4) = 1 <span class="keywd">then</span>
      firstOfPair(line1, column1, found1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found1 <span class="keywd">then</span>
      randomNotVisited(line1, column1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomNotVisited(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel7 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found1 <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rand(1, 3) = 1 <span class="keywd">then</span>
      firstOfPair(line1, column1, found1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found1 <span class="keywd">then</span>
      randomNotVisited(line1, column1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomNotVisited(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel8 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found1 <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rand(1, 2) = 1 <span class="keywd">then</span>
      firstOfPair(line1, column1, found1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> found1 <span class="keywd">then</span>
      randomNotVisited(line1, column1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomNotVisited(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerLevel9 (<span class="keywd">inout</span> <span class="type">integer</span>: line1, <span class="keywd">inout</span> <span class="type">integer</span>: column1,
    <span class="keywd">inout</span> <span class="type">integer</span>: line2, <span class="keywd">inout</span> <span class="type">integer</span>: column2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: found1 <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: found2 <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    firstOfPair(line1, column1, found1);
    <span class="keywd">if</span> <span class="op">not</span> found1 <span class="keywd">then</span>
      randomNotVisited(line1, column1);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line1, column1);
    flushGraphic;
    wait(1 . SECONDS);
    secondOfPair(field[line1][column1].cardNumber, line2, column2, found2);
    <span class="keywd">if</span> <span class="op">not</span> found2 <span class="keywd">then</span>
      randomNotVisited(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    show(line2, column2);
    flushGraphic;
    wait(1 . SECONDS);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: computerTurn <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: onTurn <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> countCardBacks > 0 <span class="op">and</span> onTurn <span class="keywd">do</span>
      <span class="keywd">case</span> game.currLevel <span class="keywd">of</span>
        <span class="keywd">when</span> {0}: computerLevel0(line1, column1, line2, column2);
        <span class="keywd">when</span> {1}: computerLevel1(line1, column1, line2, column2);
        <span class="keywd">when</span> {2}: computerLevel2(line1, column1, line2, column2);
        <span class="keywd">when</span> {3}: computerLevel3(line1, column1, line2, column2);
        <span class="keywd">when</span> {4}: computerLevel4(line1, column1, line2, column2);
        <span class="keywd">when</span> {5}: computerLevel5(line1, column1, line2, column2);
        <span class="keywd">when</span> {6}: computerLevel6(line1, column1, line2, column2);
        <span class="keywd">when</span> {7}: computerLevel7(line1, column1, line2, column2);
        <span class="keywd">when</span> {8}: computerLevel8(line1, column1, line2, column2);
        <span class="keywd">when</span> {9}: computerLevel9(line1, column1, line2, column2);
        <span class="keywd">otherwise</span>: computerLevel0(line1, column1, line2, column2);
      <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">if</span> field[line1][column1].cardNumber =
          field[line2][column2].cardNumber <span class="keywd">then</span>
        remove(line1, column1);
        remove(line2, column2);
        showHit(field[line1][column1].cardNumber, COMPUTER_HIT_YPOS, game.computerHits);
        incr(game.computerHits);
      <span class="keywd">else</span>
        hide(line1, column1);
        hide(line2, column2);
        onTurn := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkHit (<span class="op">in</span> <span class="type">integer</span>: line1, <span class="op">in</span> <span class="type">integer</span>: column1,
    <span class="op">in</span> <span class="type">integer</span>: line2, <span class="op">in</span> <span class="type">integer</span>: column2, <span class="keywd">inout</span> <span class="type">boolean</span>: hit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field[line1][column1].cardNumber =
        field[line2][column2].cardNumber <span class="keywd">then</span>
      remove(line1, column1);
      remove(line2, column2);
      showHit(field[line1][column1].cardNumber, game.player_hit_ypos, game.playerHits);
      incr(game.playerHits);
      hit := TRUE;
    <span class="keywd">else</span>
      hide(line1, column1);
      hide(line2, column2);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: mouseCommand (<span class="keywd">inout</span> <span class="type">integer</span>: line, <span class="keywd">inout</span> <span class="type">integer</span>: column,
    <span class="keywd">inout</span> <span class="type">integer</span>: openCards) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    line := clickedYPos(KEYBOARD);
    column := clickedXPos(KEYBOARD);
    <span class="keywd">if</span> line >= UPPER_BORDER <span class="op">and</span> column >= LEFT_BORDER <span class="keywd">then</span>
      line := (line - UPPER_BORDER) <span class="op">div</span> FIELD_SIZE + 1;
      column := (column - LEFT_BORDER) <span class="op">div</span> FIELD_SIZE + 1;
      <span class="keywd">if</span> line >= 1 <span class="op">and</span> line &lt;= length(field) <span class="op">and</span>
          column >= 1 <span class="op">and</span> column &lt;= length(field[line]) <span class="keywd">then</span>
        <span class="keywd">if</span> field[line][column].visible = backSide <span class="keywd">then</span>
          show(line, column);
          incr(openCards);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: playerMove (<span class="keywd">inout</span> <span class="type">boolean</span>: hit) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: openCards <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column1 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column2 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: moveFinished <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    hit := FALSE;
    <span class="keywd">repeat</span>
      command := getc(KEYBOARD);
      <span class="keywd">if</span> upper(command) = <span class="stri">'Q'</span> <span class="op">or</span> command = KEY_CLOSE <span class="keywd">then</span>
        moveFinished := TRUE;
        game.quit := TRUE;
      <span class="keywd">elsif</span> command = KEY_ESC <span class="keywd">then</span>
        bossMode(game.quit);
        <span class="keywd">if</span> game.quit <span class="keywd">then</span>
          moveFinished := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> command <span class="op">in</span> digit_char <span class="keywd">then</span>
        game.currLevel := ord(command) - ord(<span class="stri">'0'</span>);
        put(OPPONENT_XPOS - 40, OPPONENT_YPOS, digit_pixmap[game.currLevel]);
      <span class="keywd">elsif</span> command <span class="op">in</span> {KEY_RIGHT, KEY_UP} <span class="keywd">then</span>
        <span class="keywd">if</span> game.currLevel &lt; 9 <span class="keywd">then</span>
          incr(game.currLevel);
          put(OPPONENT_XPOS - 40, OPPONENT_YPOS, digit_pixmap[game.currLevel]);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> command <span class="op">in</span> {KEY_LEFT, KEY_DOWN} <span class="keywd">then</span>
        <span class="keywd">if</span> game.currLevel > 0 <span class="keywd">then</span>
          decr(game.currLevel);
          put(OPPONENT_XPOS - 40, OPPONENT_YPOS, digit_pixmap[game.currLevel]);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> openCards = 2 <span class="keywd">then</span>
        checkHit(line1, column1, line2, column2, hit);
        moveFinished := TRUE;
      <span class="keywd">elsif</span> command = KEY_MOUSE1 <span class="keywd">then</span>
        <span class="keywd">if</span> openCards = 0 <span class="keywd">then</span>
          mouseCommand(line1, column1, openCards);
        <span class="keywd">elsif</span> openCards = 1 <span class="keywd">then</span>
          mouseCommand(line2, column2, openCards);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        hideAll;
        moveFinished := TRUE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> moveFinished;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: playerTurn <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: hit <span class="keywd">is</span> TRUE;
  <span class="keywd">begin</span>
    <span class="keywd">while</span> countCardBacks > 0 <span class="op">and</span> hit <span class="keywd">do</span>
      playerMove(hit);
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: dealCards (<span class="op">in</span> <span class="type">integer</span>: field_lines, <span class="op">in</span> <span class="type">integer</span>: field_columns) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: cardNumber <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    field := field_lines <span class="op">times</span> field_columns <span class="op">times</span> fieldType.value;
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> field_lines <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> field_columns <span class="keywd">do</span>
        put(back, line, column);
        <span class="keywd">repeat</span>
          cardNumber := rand(1, field_lines * field_columns <span class="op">div</span> 2);
        <span class="keywd">until</span> cards[cardNumber].number &lt; 2;
        field[line][column].cardNumber := cardNumber;
        incr(cards[cardNumber].number);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    game.player_hit_ypos := UPPER_BORDER + field_lines * FIELD_SIZE - CARD_BORDER + COMPUTER_HIT_YPOS;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: selectSize <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: selected <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(size_descr) <span class="keywd">do</span>
      put(size_descr[index], 1, index);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">repeat</span>
      command := getc(KEYBOARD);
      <span class="keywd">if</span> upper(command) = <span class="stri">'Q'</span> <span class="op">or</span> command = KEY_CLOSE <span class="keywd">then</span>
        selected := TRUE;
        game.quit := TRUE;
      <span class="keywd">elsif</span> command = KEY_ESC <span class="keywd">then</span>
        bossMode(game.quit);
        <span class="keywd">if</span> game.quit <span class="keywd">then</span>
          selected := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">elsif</span> command = KEY_MOUSE1 <span class="keywd">then</span>
        line := clickedYPos(KEYBOARD);
        column := clickedXPos(KEYBOARD);
        <span class="keywd">if</span> line >= UPPER_BORDER <span class="op">and</span> column >= LEFT_BORDER <span class="keywd">then</span>
          line := (line - UPPER_BORDER) <span class="op">div</span> FIELD_SIZE + 1;
          column := (column - LEFT_BORDER) <span class="op">div</span> FIELD_SIZE + 1;
          <span class="keywd">if</span> line = 1 <span class="op">and</span> column >= 1 <span class="op">and</span> column &lt;= length(size_descr) <span class="keywd">then</span>
            clear(curr_win, white);
            put(OPPONENT_XPOS, OPPONENT_YPOS, opponent);
            dealCards(size_list[column][1], size_list[column][2]);
            selected := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> selected;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">text</span>: scr <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">boolean</span>: done <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    screen(WINDOW_WIDTH, WINDOW_HEIGHT);
    selectInput(curr_win, KEY_CLOSE, TRUE);
    clear(curr_win, white);
    scr := openPixmapFontFile(curr_win, 250, 0);
    setFont(scr, stdFont9);
    color(scr, black, white);
    writeln(scr);
    writeln(scr, <span class="stri">"P A I R S   -   Concentration game"</span>);
    writeln(scr);
    writeln(scr, <span class="stri">"Copyright (C) 2005  Thomas Mertes"</span>);
    writeln(scr);
    writeln(scr, <span class="stri">"This program is free software under the terms of the GNU General Public License."</span>);
    writeln(scr);
    writeln(scr, <span class="stri">"Pairs is written in the Seed7 programming language"</span>);
    writeln(scr, <span class="stri">"Homepage:    http://seed7.sourceforge.net"</span>);
    KEYBOARD := GRAPH_KEYBOARD;
    digit_pixmap := [0](
      createPixmap(zero,  2, black),
      createPixmap(one,   2, black),
      createPixmap(two,   2, black),
      createPixmap(three, 2, black),
      createPixmap(four,  2, black),
      createPixmap(five,  2, black),
      createPixmap(six,   2, black),
      createPixmap(seven, 2, black),
      createPixmap(eight, 2, black),
      createPixmap(nine,  2, black));

    opponent := createPixmap(woman_pic, 2, black);
    put(OPPONENT_XPOS, OPPONENT_YPOS, opponent);

    selectSize;

    put(OPPONENT_XPOS - 40, OPPONENT_YPOS, digit_pixmap[game.currLevel]);

    index := 1;
    <span class="keywd">while</span> countCardBacks > 0 <span class="op">and</span> <span class="op">not</span> game.quit <span class="keywd">do</span>
      <span class="keywd">while</span> index &lt;= length(cards) <span class="op">and</span> <span class="op">not</span> inputReady(KEYBOARD) <span class="keywd">do</span>
        prepare(cards[index]);
        <span class="keywd">if</span> <span class="op">not</span> inputReady(KEYBOARD) <span class="keywd">then</span>
          <span class="comment">(* writeln(index); *)</span>
          incr(index);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
      playerTurn;
      <span class="keywd">if</span> <span class="op">not</span> game.quit <span class="keywd">then</span>
        computerTurn;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> <span class="op">not</span> game.quit <span class="keywd">then</span>
      command := getc(KEYBOARD);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
