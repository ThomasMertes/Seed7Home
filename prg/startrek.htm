<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  startrek.sd7  Classical startrek game                           *)</span>
<span class="comment">(*  Copyright (C) 2004  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/stdio.htm">stdio.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/math.htm">math.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">float</span>: max_energy <span class="keywd">is</span> 4000.0;
<span class="keywd">const</span> <span class="type">integer</span>: max_torpedoes <span class="keywd">is</span> 10;
<span class="keywd">const</span> <span class="type">float</span>: maxKlingonEnergy <span class="keywd">is</span> 400.0;
<span class="keywd">const</span> <span class="type">string</span>: sector_description <span class="keywd">is</span> <span class="stri">".EKB*"</span>;

<span class="keywd">const</span> <span class="type">integer</span>: WARP_ENGINES        <span class="keywd">is</span> 1;
<span class="keywd">const</span> <span class="type">integer</span>: SHORT_RANGE_SENSORS <span class="keywd">is</span> 2;
<span class="keywd">const</span> <span class="type">integer</span>: LONG_RANGE_SENSORS  <span class="keywd">is</span> 3;
<span class="keywd">const</span> <span class="type">integer</span>: PHASERS             <span class="keywd">is</span> 4;
<span class="keywd">const</span> <span class="type">integer</span>: PHOTON_TORPEDOES    <span class="keywd">is</span> 5;
<span class="keywd">const</span> <span class="type">integer</span>: GALACTIC_RECORDS    <span class="keywd">is</span> 6;

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: description <span class="keywd">is</span> [](
    <span class="stri">"Warp engines"</span>,<span class="stri">"Short range sensors"</span>,<span class="stri">"Long range sensors"</span>,
    <span class="stri">"Phasers"</span>,<span class="stri">"Photon torpedoes"</span>,<span class="stri">"Galactic records"</span>);

<span class="keywd">var</span> <span class="type">integer</span>: total_klingons <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: klingonRow <span class="keywd">is</span> 8 <span class="op">times</span> 0;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: klingonColumn <span class="keywd">is</span> 8 <span class="op">times</span> 0;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">float</span>: klingonEnergy <span class="keywd">is</span> 8 <span class="op">times</span> 0.0;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">integer</span>: quad <span class="keywd">is</span> 8 <span class="op">times</span> 8 <span class="op">times</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: quadrantRow <span class="keywd">is</span> 1;
<span class="keywd">var</span> <span class="type">integer</span>: quadrantColumn <span class="keywd">is</span> 1;
<span class="keywd">var</span> <span class="type">integer</span>: klingons_in_quadrant <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: bases_in_quadrant <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: stars_in_quadrant <span class="keywd">is</span> 0;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">array</span> <span class="type">integer</span>: sect <span class="keywd">is</span> 8 <span class="op">times</span> 8 <span class="op">times</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: sectorRow <span class="keywd">is</span> 1;
<span class="keywd">var</span> <span class="type">integer</span>: sectorColumn <span class="keywd">is</span> 1;

<span class="keywd">var</span> <span class="type">integer</span>: klingons_in_game <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: stardate <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: startStardate <span class="keywd">is</span> 0;
<span class="keywd">var</span> <span class="type">integer</span>: endStardate <span class="keywd">is</span> 0;

<span class="keywd">var</span> <span class="type">string</span>: cond <span class="keywd">is</span> <span class="stri">""</span>;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: damage <span class="keywd">is</span> 6 <span class="op">times</span> 0;
<span class="keywd">var</span> <span class="type">float</span>: energy <span class="keywd">is</span> 0.0;
<span class="keywd">var</span> <span class="type">integer</span>: torpedoes <span class="keywd">is</span> 0;


<span class="keywd">const</span> <span class="type">proc</span>: title <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"STAR TREK!!"</span>);
    writeln(<span class="stri">"==========="</span>);
    writeln;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* title *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_course <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"Course - A number from 1 to 9 indicating a direction.                4   3   2"</span>);
    writeln(<span class="stri">"Starting with a 1 to the right and increasing counterclockwise.        \\ | /"</span>);
    writeln(<span class="stri">"To move to the left, use a course of 5.                              5 - E - 1"</span>);
    writeln(<span class="stri">"A course of 3.5 is halfway between 3 and 4.                            / | \\"</span>);
    writeln(<span class="stri">"A course of 8.75 is three-quarters of the way from 8 to 1.           6   7   8"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_course *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_sector <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"Each sector can contain a Klingon (K), star (*), starbase (B), the Enterprise"</span>);
    writeln(<span class="stri">"herself (E), or empty space (.).  Each sector is also numbered; a starbase in"</span>);
    writeln(<span class="stri">"sector 3-5 is 3 rows down from the top of the short range scan print-out, and"</span>);
    writeln(<span class="stri">"5 sectors to the right."</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_sector *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_quadrant <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"The known galaxy is divided into 64 quadrants arranged like a square"</span>);
    writeln(<span class="stri">"checkerboard, 8 on a side.  Each quadrant is represented as a 3-digit number."</span>);
    writeln(<span class="stri">"The first (hundreds) digit is the number of Klingons in that quadrant, while"</span>);
    writeln(<span class="stri">"the middle (tens) digit is the number of starbases, and the units digit is the"</span>);
    writeln(<span class="stri">"number of stars.  An entry of 305 means 3 Klingons, no starbases, and 5 stars."</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_quadrant *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_warp_engines <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"WARP ENGINE (command 1 or W):"</span>);
    writeln(<span class="stri">"The warp engine control is used to move the Enterprise.  You will be asked to"</span>);
    writeln(<span class="stri">"set the course, and the distance (measured in warps) for the move.  Each move"</span>);
    writeln(<span class="stri">"that you make with the Enterprise from one sector to another, or from one"</span>);
    writeln(<span class="stri">"quadrant to another, costs you one stardate.  Therefore, a 30-stardate game"</span>);
    writeln(<span class="stri">"means you have 30 moves to win in."</span>);
    writeln;
    help_course;
    writeln;
    writeln(<span class="stri">"Warp - One warp moves you the width of a quadrant.  A warp of .5 will move you"</span>);
    writeln(<span class="stri">"halfway through a quadrant.  Moving diagonally across a quadrant to the next"</span>);
    writeln(<span class="stri">"will require 1.414 warps.  Warp 3 will move you 3 quadrants providing nothing"</span>);
    writeln(<span class="stri">"in your present quadrant blocks your exit.  Once you leave the quadrant that"</span>);
    writeln(<span class="stri">"you were in, you will enter hyperspace; coming out of hyperspace will place you"</span>);
    writeln(<span class="stri">"randomly in the new quadrant.  Klingons in a given quadrant will fire at you"</span>);
    writeln(<span class="stri">"whenever you leave, enter, or move within the quadrant.  Entering a course or"</span>);
    writeln(<span class="stri">"warp of zero can be used to return to the command mode."</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_warp_engines *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_short_range_sensors <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"SHORT RANGE SENSORS (command 2 or S):"</span>);
    writeln(<span class="stri">"A short range sensor scan will print out the quadrant you presently occupy"</span>);
    writeln(<span class="stri">"showing the content of each of the 64 sectors, as well as other pertinent"</span>);
    writeln(<span class="stri">"information."</span>);
    writeln;
    help_sector;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_short_range_sensors *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_long_range_sensors <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"LONG RANGE SENSORS (command 3 or L):"</span>);
    writeln(<span class="stri">"The long range sensor scan summarizes the quadrant you are in, and the"</span>);
    writeln(<span class="stri">"adjoining ones."</span>);
    writeln;
    help_quadrant;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_long_range_sensors *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_phasers <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"PHASERS (command 4 or P):"</span>);
    writeln(<span class="stri">"The portion of the Enterprise's energy that you specify will be divided evenly"</span>);
    writeln(<span class="stri">"among the Klingons in the quadrant and fired at them.  Surviving Klingons will"</span>);
    writeln(<span class="stri">"retaliate.  Phaser fire bypasses stars and starbases, but is attenuated by the"</span>);
    writeln(<span class="stri">"distance it travels.  The arriving energy depletes the shield power of its"</span>);
    writeln(<span class="stri">"target.  Energy is automatically diverted to the shields as needed, but if you"</span>);
    writeln(<span class="stri">"run out of energy you'll get fried."</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_phasers *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_photon_torpedoes <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"PHOTON TORPEDOES (command 5 or T):"</span>);
    writeln(<span class="stri">"Photon torpedo control will launch a torpedo on a course you specify which will"</span>);
    writeln(<span class="stri">"destroy any object in its path.  Range is limited to the local quadrant."</span>);
    writeln(<span class="stri">"Expect return fire from surviving Klingons."</span>);
    writeln;
    help_course;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_photon_torpedoes *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_galactic_records <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"GALACTIC RECORDS (command 6 or G):"</span>);
    writeln(<span class="stri">"The galactic records section of the ship's computer responds to this command by"</span>);
    writeln(<span class="stri">"printing out a galactic map showing the results of all previous sensor scans."</span>);
    writeln;
    help_quadrant;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_galactic_records *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_commands <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"Your starship will act on the following commands:"</span>);
    writeln(<span class="stri">"   1 or W  - Warp engine                     ? or H  - Display help info"</span>);
    writeln(<span class="stri">"   2 or S  - Short range sensors             Q       - Quit the game"</span>);
    writeln(<span class="stri">"   3 or L  - Long range sensors"</span>);
    writeln(<span class="stri">"   4 or P  - Phasers"</span>);
    writeln(<span class="stri">"   5 or T  - Photon torpedoes"</span>);
    writeln(<span class="stri">"   6 or G  - Galactic records"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_commands *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_game <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"   It is stardate 3421 and the federation is being invaded by a band of Klingon"</span>);
    writeln(<span class="stri">"'pirates' whose objective is to test our defenses.  If even one survives the "</span>);
    writeln(<span class="stri">"trial period, Klingon headquarters will launch an all-out attack.  As captain"</span>);
    writeln(<span class="stri">"of the federation starship 'Enterprise', your mission is to find and destroy"</span>);
    writeln(<span class="stri">"the invaders before the time runs out."</span>);
    writeln;
    writeln(<span class="stri">"   You mission is supported by starbases.  Docking at a starbase is done by"</span>);
    writeln(<span class="stri">"occupying an adjacent sector. It reprovisions your starship with energy and"</span>);
    writeln(<span class="stri">"photon torpedoes, as well as repairing all damages."</span>);
    writeln;
    help_commands;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_game *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help_quit <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">"QUIT (command Q):"</span>);
    writeln(<span class="stri">"The quit command allows you to quit your job as captain."</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help_quit *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: help <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    writeln;
    help_game;
    writeln;
    <span class="keywd">repeat</span>
      write(<span class="stri">"Type a command to get information about it or enter to leave help: "</span>);
      readln(command);
      writeln;
      <span class="keywd">if</span> command &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        <span class="keywd">case</span> upper(command[1]) <span class="keywd">of</span>
          <span class="keywd">when</span> {<span class="stri">'1'</span>, <span class="stri">'W'</span>}: help_warp_engines;
          <span class="keywd">when</span> {<span class="stri">'2'</span>, <span class="stri">'S'</span>}: help_short_range_sensors;
          <span class="keywd">when</span> {<span class="stri">'3'</span>, <span class="stri">'L'</span>}: help_long_range_sensors;
          <span class="keywd">when</span> {<span class="stri">'4'</span>, <span class="stri">'P'</span>}: help_phasers;
          <span class="keywd">when</span> {<span class="stri">'5'</span>, <span class="stri">'T'</span>}: help_photon_torpedoes;
          <span class="keywd">when</span> {<span class="stri">'6'</span>, <span class="stri">'G'</span>}: help_galactic_records;
          <span class="keywd">when</span> {<span class="stri">'?'</span>, <span class="stri">'H'</span>}: help_game;
          <span class="keywd">when</span> {<span class="stri">'Q'</span>}:      help_quit;
          <span class="keywd">otherwise</span>:       help_commands;
        <span class="keywd">end</span> <span class="keywd">case</span>;
        writeln;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> command = <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* help *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: fix_damage <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: equipment <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> equipment <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
      damage[equipment] := 0;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* fix_damage *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: find_free_sector (<span class="keywd">inout</span> <span class="type">integer</span>: row, <span class="keywd">inout</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      row := rand(1, 8);
      column := rand(1, 8);
    <span class="keywd">until</span> sect[row][column] &lt;= 1;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* find_free_sector *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: init <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: total_bases <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">float</span>: number <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">integer</span>: klingons <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: bases <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    fix_damage;
    quadrantRow:= rand(1, 8);
    quadrantColumn:= rand(1, 8);
    total_klingons := 0;
    total_bases := 0;
    startStardate := 3421;
    endStardate := 3451;
    stardate := startStardate;
    energy := max_energy;
    torpedoes := max_torpedoes;
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
        klingons := 0;
        number := rand(0.0, 1.0);
        <span class="keywd">if</span> number &lt; 0.2075 <span class="keywd">then</span>
          number := number * 64.0;
          klingons := 1 + ord(number &lt; 6.28) + ord(number &lt; 3.28) +
              ord(number &lt; 1.8) + ord(number &lt; 0.28) + ord(number &lt; 0.08) +
              ord(number &lt; 0.03) + ord(number &lt; 0.01);
          total_klingons +:= klingons;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        bases := ord(rand(0.0, 1.0) > 0.96);
        total_bases +:= bases;
        quad[row][column] := -(klingons * 100 + bases * 10 + rand(1, 9));
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> total_klingons > endStardate - startStardate <span class="keywd">then</span>
      endStardate := startStardate + total_klingons;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> total_bases &lt;= 0 <span class="keywd">then</span>
      row := rand(1, 8);
      column := rand(1, 8);
      quad[row][column] -:= 10;
      total_bases := 1;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    klingons_in_game := total_klingons;
    writeln(<span class="stri">"Objective: Destroy "</span> &lt;&amp; total_klingons &lt;&amp; <span class="stri">" Klingon battle cruisers in "</span> &lt;&amp;
            endStardate - startStardate &lt;&amp; <span class="stri">" stardates."</span>);
    writeln(<span class="stri">" The number of starbases is "</span> &lt;&amp; total_bases);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* init *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: enter_quadrant <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> quadrantRow &lt; 1 <span class="op">or</span> quadrantRow > 8 <span class="op">or</span> quadrantColumn &lt; 1 <span class="op">or</span> quadrantColumn > 8 <span class="keywd">then</span>
      klingons_in_quadrant := 0;
      bases_in_quadrant := 0;
      stars_in_quadrant := 0;
    <span class="keywd">else</span>
      number := abs(quad[quadrantRow][quadrantColumn]);
      quad[quadrantRow][quadrantColumn] := number;
      klingons_in_quadrant := number <span class="op">div</span> 100;
      bases_in_quadrant := (number <span class="op">div</span> 10) <span class="op">rem</span> 10;
      stars_in_quadrant := number <span class="op">rem</span> 10;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    sectorRow := rand(1, 8);
    sectorColumn := rand(1, 8);
    <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
         sect[row][column] := 1;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    sect[sectorRow][sectorColumn] := 2;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
      klingonEnergy[number] := 0.0;
      row := 9;
      <span class="keywd">if</span> number &lt;= klingons_in_quadrant <span class="keywd">then</span>
         find_free_sector(row, column);
         sect[row][column] := 3;
         klingonEnergy[number] := maxKlingonEnergy;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      klingonRow[number] := row;
      klingonColumn[number] := column;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> bases_in_quadrant > 0 <span class="keywd">then</span>
      find_free_sector(row, column);
      sect[row][column] := 4;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> stars_in_quadrant <span class="keywd">do</span>
      find_free_sector(row, column);
      sect[row][column] := 5;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* enter_quadrant *)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: get_condition <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: cond <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> row <span class="keywd">range</span> pred(sectorRow) <span class="keywd">to</span> succ(sectorRow) <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> pred(sectorColumn) <span class="keywd">to</span> succ(sectorColumn) <span class="keywd">do</span>
        <span class="keywd">if</span> row >= 1 <span class="op">and</span> row &lt;= 8 <span class="op">and</span> column >= 1 <span class="op">and</span> column &lt;= 8 <span class="keywd">then</span>
          <span class="keywd">if</span> sect[row][column] = 4 <span class="keywd">then</span>  <span class="comment">(* Docked at starbase *)</span>
            cond := <span class="stri">"DOCKED"</span>;
            energy := max_energy;
            torpedoes := max_torpedoes;
            fix_damage;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> cond &lt;> <span class="stri">"DOCKED"</span> <span class="keywd">then</span>
      <span class="keywd">if</span> klingons_in_quadrant > 0 <span class="keywd">then</span>  <span class="comment">(* Klingons present! *)</span>
        cond := <span class="stri">"RED"</span>;
      <span class="keywd">elsif</span> energy &lt; max_energy * 0.1 <span class="keywd">then</span>  <span class="comment">(* Low energy *)</span>
        cond := <span class="stri">"YELLOW"</span>;
      <span class="keywd">else</span>
        cond := <span class="stri">"GREEN"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* get_condition *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: write_phaser_hit (<span class="op">in</span> <span class="type">integer</span>: number, <span class="op">in</span> <span class="type">float</span>: unit_hit,
    <span class="op">in</span> <span class="type">string</span>: target, <span class="op">in</span> <span class="type">float</span>: energy_left) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(unit_hit <span class="op">digits</span> 3 &lt;&amp; <span class="stri">" unit hit on "</span> &lt;&amp; target);
    write(<span class="stri">" sector "</span> &lt;&amp; klingonRow[number] &lt;&amp; <span class="stri">" - "</span> &lt;&amp; klingonColumn[number]);
    writeln(<span class="stri">"  ("</span> &lt;&amp; energy_left <span class="op">digits</span> 3 &lt;&amp; <span class="stri">" left)"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* write_phaser_hit *)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: klingon_distance (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">float</span>: distance <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    distance := sqrt(flt((klingonRow[number] - sectorRow) ** 2 +
                         (klingonColumn[number] - sectorColumn) ** 2));
  <span class="keywd">end</span> <span class="keywd">func</span>;  <span class="comment">(* klingon_distance *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: hits_from_klingons <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">float</span>: unit_hit <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> klingons_in_quadrant >= 1 <span class="keywd">then</span>
      <span class="keywd">if</span> cond = <span class="stri">"DOCKED"</span> <span class="keywd">then</span>
        writeln(<span class="stri">"Starbase protects Enterprise."</span>);
      <span class="keywd">else</span>
        <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> klingonEnergy[number] > 0.0 <span class="keywd">then</span>
            unit_hit := klingonEnergy[number] * 0.4 * rand(0.0, 1.0);
            klingonEnergy[number] := klingonEnergy[number] - unit_hit;
            unit_hit := unit_hit / klingon_distance(number) ** 0.4;
            energy := energy - unit_hit;
            write_phaser_hit(number, unit_hit, <span class="stri">"Enterprise from"</span>, energy);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* hits_from_klingons *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: time_for_repair (<span class="op">in</span> <span class="type">integer</span>: equipment) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln(<span class="stri">" Estimated time to repair "</span> &lt;&amp; damage[equipment] &lt;&amp; <span class="stri">" stardates."</span>);
    writeln;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* time_for_repair *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: show_damage (<span class="op">in</span> <span class="type">integer</span>: equipment) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    write(description[equipment] &lt;&amp; <span class="stri">" damaged."</span>);
    time_for_repair(equipment);
  <span class="keywd">end</span> <span class="keywd">func</span>;  <span class="comment">(* show_damage *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: move_ship (<span class="op">in</span> <span class="type">float</span>: course, <span class="op">in</span> <span class="type">float</span>: warp_factor,
    <span class="op">in</span> <span class="type">integer</span>: distance) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: inquad <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">boolean</span>: blocked <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">float</span>: x1 <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: y1 <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">float</span>: angle <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: delta_x <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: delta_y <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    row := sectorRow;
    column := sectorColumn;
    x1 := flt(column) + 0.5;
    y1 := flt(row) + 0.5;
    angle := (course - 1.0) * 0.785398;
    delta_x := cos(angle);
    delta_y := -sin(angle);
    inquad := TRUE;
    blocked := FALSE;
    number := 1;
    <span class="keywd">while</span> number &lt;= distance <span class="keywd">do</span>
      y1 := y1 + delta_y;
      x1 := x1 + delta_x;
      row := trunc(y1);
      column := trunc(x1);
      <span class="keywd">if</span> column &lt; 1 <span class="op">or</span> column > 8 <span class="op">or</span> row &lt; 1 <span class="op">or</span> row > 8 <span class="keywd">then</span>
         inquad := FALSE;
         number := distance;
      <span class="keywd">else</span>
        <span class="keywd">if</span> sect[row][column] &lt;> 1 <span class="keywd">then</span>  <span class="comment">(* Object blocking move *)</span>
           blocked := TRUE;
           number := distance;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      incr(number);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> inquad <span class="keywd">then</span>  <span class="comment">(* Still in quadrant -- short move or block *)</span>
      <span class="keywd">if</span> blocked <span class="keywd">then</span>
        writeln;
        write(<span class="stri">"Blocked by "</span>);
        <span class="keywd">case</span> sect[row][column] <span class="keywd">of</span>
          <span class="keywd">when</span> {3}: write(<span class="stri">"Klingon"</span>);
          <span class="keywd">when</span> {4}: write(<span class="stri">"starbase"</span>);
          <span class="keywd">when</span> {5}: write(<span class="stri">"star"</span>);
        <span class="keywd">end</span> <span class="keywd">case</span>;
        writeln(<span class="stri">" at sector "</span> &lt;&amp; row &lt;&amp; <span class="stri">" - "</span> &lt;&amp; column);
        row := trunc(y1 - delta_y);
        column := trunc(x1 - delta_x);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      sectorRow := row;
      sectorColumn := column;
      sect[sectorRow][sectorColumn] := 2;
    <span class="keywd">else</span>  <span class="comment">(* Out of quadrant -- move to new quadrant *)</span>
      quadrantRow := trunc(flt(quadrantRow) + warp_factor * delta_y + (flt(sectorRow) - 0.5) / 8.0);
      quadrantColumn := trunc(flt(quadrantColumn) + warp_factor * delta_x + (flt(sectorColumn) - 0.5) / 8.0);
      <span class="keywd">if</span> quadrantRow &lt; 1 <span class="keywd">then</span>
        quadrantRow := 1;
      <span class="keywd">elsif</span> quadrantRow > 8 <span class="keywd">then</span>
        quadrantRow := 8;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> quadrantColumn &lt; 1 <span class="keywd">then</span>
        quadrantColumn := 1;
      <span class="keywd">elsif</span> quadrantColumn > 8 <span class="keywd">then</span>
        quadrantColumn := 8;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      enter_quadrant;
      hits_from_klingons;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* move_ship *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: short_range_sensors <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    cond := get_condition;
    <span class="keywd">if</span> damage[SHORT_RANGE_SENSORS] > 0 <span class="keywd">then</span>
      show_damage(SHORT_RANGE_SENSORS);
    <span class="keywd">else</span>
      <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
          write(sector_description[sect[row][column]] &lt;&amp; <span class="stri">" "</span>);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        write(<span class="stri">"  "</span>);
        <span class="keywd">case</span> row <span class="keywd">of</span>
          <span class="keywd">when</span> {1}: writeln(<span class="stri">"Stardate = "</span> &lt;&amp; stardate);
          <span class="keywd">when</span> {2}: writeln(<span class="stri">"Condition: "</span> &lt;&amp; cond);
          <span class="keywd">when</span> {3}: writeln(<span class="stri">"Quadrant = "</span> &lt;&amp; quadrantRow &lt;&amp; <span class="stri">" - "</span> &lt;&amp; quadrantColumn);
          <span class="keywd">when</span> {4}: writeln(<span class="stri">"Sector = "</span>   &lt;&amp; sectorRow &lt;&amp; <span class="stri">" - "</span> &lt;&amp; sectorColumn);
          <span class="keywd">when</span> {5}: writeln(<span class="stri">"Energy = "</span>   &lt;&amp; energy <span class="op">digits</span> 3);
          <span class="keywd">when</span> {6}: writeln(<span class="stri">"Photon torpedoes = "</span> &lt;&amp; torpedoes);
          <span class="keywd">when</span> {7}: writeln(<span class="stri">"Klingons left = "</span>    &lt;&amp; total_klingons);
          <span class="keywd">when</span> {8}: writeln(<span class="stri">"Time left = "</span>        &lt;&amp; endStardate - stardate);
        <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* short_range_sensors *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: warp_engines <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: equipment <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: repaired_by_spock <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">float</span>: course <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: warp_factor <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">integer</span>: distance <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      course := 0.0;
      write(<span class="stri">"Course (1-9)? "</span>);
      readln(command);
      <span class="keywd">if</span> command &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        <span class="keywd">block</span>
          course := float(command);
          <span class="keywd">if</span> course &lt; 1.0 <span class="op">or</span> course > 9.0 <span class="keywd">then</span>
            raise RANGE_ERROR;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        exception
          catch RANGE_ERROR:
            writeln(<span class="stri">"   Lt. Sulu: 'Incorrect course data, sir!'"</span>);
            course := 10.0
        <span class="keywd">end</span> <span class="keywd">block</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> course &lt;= 9.0;
    <span class="keywd">if</span> course = 9.0 <span class="keywd">then</span>
      course := 1.0;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> course >= 1.0 <span class="keywd">then</span>
      <span class="keywd">repeat</span>
        warp_factor := 0.0;
        write(<span class="stri">"Warp (0-12)? "</span>);
        readln(command);
        <span class="keywd">if</span> command &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          <span class="keywd">block</span>
            warp_factor := float(command);
            <span class="keywd">if</span> warp_factor > 12.0 <span class="keywd">then</span>
              writeln(<span class="stri">"   Chief engineer Scott: 'The engines won't take "</span> &lt;&amp; command &lt;&amp; <span class="stri">"!'"</span>);
            <span class="keywd">elsif</span> warp_factor > 0.2 <span class="op">and</span> damage[WARP_ENGINES] > 0 <span class="keywd">then</span>
              write(description[WARP_ENGINES] &lt;&amp; <span class="stri">" damaged, max is 0.2 "</span>);
              time_for_repair(WARP_ENGINES);
              warp_factor := 15.0;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          exception
            catch RANGE_ERROR:
              writeln(<span class="stri">"   Chief engineer Scott: 'This is not a warp factor!'"</span>);
              warp_factor := 15.0;
          <span class="keywd">end</span> <span class="keywd">block</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">until</span> warp_factor &lt;= 12.0;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> course >= 1.0 <span class="op">and</span> warp_factor > 0.0 <span class="keywd">then</span>
      hits_from_klingons;
      <span class="keywd">if</span> energy > 0.0 <span class="keywd">then</span>
        <span class="keywd">if</span> rand(0.0, 1.0) &lt;= 0.25 <span class="keywd">then</span>
          equipment := rand(1, 6);
          <span class="keywd">if</span> rand(0.0, 1.0) &lt;= 0.5 <span class="keywd">then</span>
            damage[equipment] +:= rand(1, 6);
            writeln(<span class="stri">"**SPACE STORM, "</span> &lt;&amp; upper(description[equipment]) &lt;&amp; <span class="stri">" DAMAGED**"</span>);
            time_for_repair(equipment);
            incr(damage[equipment]);
          <span class="keywd">else</span>
            repaired_by_spock := 0;
            <span class="keywd">for</span> number <span class="keywd">range</span> equipment <span class="keywd">to</span> 6 <span class="keywd">do</span>
              <span class="keywd">if</span> damage[number] > 0 <span class="op">and</span> repaired_by_spock = 0 <span class="keywd">then</span>
                repaired_by_spock := number;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">for</span>;
            <span class="keywd">if</span> repaired_by_spock = 0 <span class="keywd">then</span>
              <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> pred(equipment) <span class="keywd">do</span>
                <span class="keywd">if</span> damage[number] > 0 <span class="op">and</span> repaired_by_spock = 0 <span class="keywd">then</span>
                  repaired_by_spock := number;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">for</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> repaired_by_spock &lt;> 0 <span class="keywd">then</span>
              damage[repaired_by_spock] := 1;
              writeln(<span class="stri">"**SPOCK USED A NEW REPAIR TECHNIQUE**"</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">for</span> equipment <span class="keywd">range</span> 1 <span class="keywd">to</span> 6 <span class="keywd">do</span>
          <span class="keywd">if</span> damage[equipment] &lt;> 0 <span class="keywd">then</span>
            decr(damage[equipment]);
            <span class="keywd">if</span> damage[equipment] &lt;= 0 <span class="keywd">then</span>
              damage[equipment] := 0;
              writeln(description[equipment] &lt;&amp; <span class="stri">" are fixed!"</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        distance := trunc(warp_factor * 8.0);
        energy := energy - flt(distance) - flt(distance) + 0.5;
        incr(stardate);
        sect[sectorRow][sectorColumn] := 1;
        <span class="keywd">if</span> energy > 0.0 <span class="op">and</span> stardate &lt;= endStardate <span class="keywd">then</span>
          move_ship(course, warp_factor, distance);
          <span class="keywd">if</span> energy > 0.0 <span class="keywd">then</span>
            short_range_sensors;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* warp_engines *)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: quadrant_description (<span class="op">in</span> <span class="type">integer</span>: row, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: es <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    es := <span class="stri">"00"</span> &amp; str(quad[row][column]);
    es := es[length(es) - 2 .. ];
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* quadrant_description *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: long_range_sensors <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> damage[LONG_RANGE_SENSORS] > 0 <span class="keywd">then</span>
      show_damage(LONG_RANGE_SENSORS);
    <span class="keywd">else</span>
      writeln(description[LONG_RANGE_SENSORS] &lt;&amp; <span class="stri">" for quadrant "</span> &lt;&amp;
              quadrantRow &lt;&amp; <span class="stri">" - "</span> &lt;&amp; quadrantColumn);
      <span class="keywd">for</span> row <span class="keywd">range</span> pred(quadrantRow) <span class="keywd">to</span> succ(quadrantRow) <span class="keywd">do</span>
        <span class="keywd">for</span> column <span class="keywd">range</span> pred(quadrantColumn) <span class="keywd">to</span> succ(quadrantColumn) <span class="keywd">do</span>
          write(<span class="stri">"   "</span>);
          <span class="keywd">if</span> row &lt; 1 <span class="op">or</span> row > 8 <span class="op">or</span> column &lt; 1 <span class="op">or</span> column > 8 <span class="keywd">then</span>
            write(<span class="stri">"***"</span>);
          <span class="keywd">else</span>
            quad[row][column] := abs(quad[row][column]);
            write(quadrant_description(row, column));
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        writeln;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* long_range_sensors *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: phasers <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">float</span>: phaser_energy <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">float</span>: unit_hit <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: y3 <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> damage[PHASERS] > 0 <span class="keywd">then</span>
      show_damage(PHASERS);
    <span class="keywd">else</span>
      <span class="keywd">repeat</span>
        phaser_energy := 0.0;
        write(<span class="stri">"Phasers ready: Energy units to fire? "</span>);
        readln(command);
        <span class="keywd">if</span> command &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          <span class="keywd">block</span>
            phaser_energy := float(command);
            <span class="keywd">if</span> phaser_energy &lt; 0.0 <span class="keywd">then</span>
              raise RANGE_ERROR;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          exception
            catch RANGE_ERROR:
              writeln(<span class="stri">"   Ensign Chekov: 'Incorrect phaser energy, sir!'"</span>);
              phaser_energy := 0.0
          <span class="keywd">end</span> <span class="keywd">block</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> phaser_energy > 0.0 <span class="op">and</span> phaser_energy > energy <span class="keywd">then</span>
          writeln(<span class="stri">"Only got "</span> &lt;&amp; energy <span class="op">digits</span> 3);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">until</span> phaser_energy &lt;= 0.0 <span class="op">or</span> phaser_energy &lt;= energy;
      <span class="keywd">if</span> phaser_energy > 0.0 <span class="keywd">then</span>
        energy := energy - phaser_energy;
        y3 := flt(klingons_in_quadrant);
        <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> klingonEnergy[number] > 0.0 <span class="keywd">then</span>
            unit_hit := phaser_energy / (y3 * klingon_distance(number) ** 0.4);
            klingonEnergy[number] := klingonEnergy[number] - unit_hit;
            write_phaser_hit(number, unit_hit, <span class="stri">"Klingon at"</span>, klingonEnergy[number]);
            <span class="keywd">if</span> klingonEnergy[number] &lt;= 0.0 <span class="keywd">then</span>
              writeln(<span class="stri">"**KLINGON DESTROYED**"</span>);
              decr(klingons_in_quadrant);
              decr(total_klingons);
              sect[klingonRow[number]][klingonColumn[number]] := 1;
              quad[quadrantRow][quadrantColumn] -:= 100;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        hits_from_klingons;
        cond := get_condition;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* phasers *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: torpedo_track (<span class="op">in</span> <span class="type">float</span>: course) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: distance <span class="keywd">is</span> 15;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: torpedo_hit <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">float</span>: x1 <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: y1 <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">float</span>: angle <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: delta_x <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: delta_y <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    x1 := flt(sectorColumn) + 0.5;
    y1 := flt(sectorRow) + 0.5;
    angle := (course - 1.0) * 0.785398;
    delta_x := cos(angle);
    delta_y := -sin(angle);
    torpedo_hit := FALSE;
    number := 1;
    <span class="keywd">while</span> number &lt;= distance <span class="keywd">do</span>
      y1 := y1 + delta_y;
      x1 := x1 + delta_x;
      row := trunc(y1);
      column := trunc(x1);
      <span class="keywd">if</span> column &lt; 1 <span class="op">or</span> column > 8 <span class="op">or</span> row &lt; 1 <span class="op">or</span> row > 8 <span class="keywd">then</span>
        number := distance;
      <span class="keywd">else</span>
        write(<span class="stri">" "</span> &lt;&amp; row &lt;&amp; <span class="stri">" - "</span> &lt;&amp; column &lt;&amp; <span class="stri">"  "</span>);
        <span class="keywd">if</span> sect[row][column] &lt;> 1 <span class="keywd">then</span> <span class="comment">(* Object hit by torpedo *)</span>
          torpedo_hit := TRUE;
          number := distance;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      incr(number);
    <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">if</span> torpedo_hit <span class="keywd">then</span>
      writeln;
      <span class="keywd">case</span> sect[row][column] <span class="keywd">of</span>
        <span class="keywd">when</span> {3}: <span class="comment">(* Klingon *)</span>
          writeln(<span class="stri">"KLINGON DESTROYED!"</span>);
          <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
            <span class="keywd">if</span> row = klingonRow[number] <span class="op">and</span> column = klingonColumn[number] <span class="keywd">then</span>
              klingonEnergy[number] := 0.0;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
          decr(klingons_in_quadrant);
          decr(total_klingons);
        <span class="keywd">when</span> {4}: <span class="comment">(* Starbase *)</span>
          writeln(<span class="stri">"STARBASE DESTROYED! . . . GOOD WORK!"</span>);
          decr(bases_in_quadrant);
        <span class="keywd">when</span> {5}: <span class="comment">(* Star *)</span>
          writeln(<span class="stri">"STAR DESTROYED!"</span>);
          decr(stars_in_quadrant);
      <span class="keywd">end</span> <span class="keywd">case</span>;
      sect[row][column] := 1;
      quad[quadrantRow][quadrantColumn] := klingons_in_quadrant * 100 +
          bases_in_quadrant * 10 + stars_in_quadrant;
    <span class="keywd">else</span>
      writeln(<span class="stri">"MISSED!"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* torpedo_track *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: photon_torpedoes <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">float</span>: course <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> damage[PHOTON_TORPEDOES] > 0 <span class="keywd">then</span>
      writeln(<span class="stri">"Space crud blocking tubes."</span>);
      time_for_repair(PHOTON_TORPEDOES);
    <span class="keywd">else</span>
      <span class="keywd">if</span> torpedoes &lt; 1 <span class="keywd">then</span>
        writeln(<span class="stri">"No torpedoes left."</span>);
      <span class="keywd">else</span>
        <span class="keywd">repeat</span>
          course := 0.0;
          write(<span class="stri">"Torpedo course (1-9)? "</span>);
          readln(command);
          <span class="keywd">if</span> command &lt;> <span class="stri">""</span> <span class="keywd">then</span>
            <span class="keywd">block</span>
              course := float(command);
              <span class="keywd">if</span> course &lt; 1.0 <span class="op">or</span> course > 9.0 <span class="keywd">then</span>
                raise RANGE_ERROR;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            exception
              catch RANGE_ERROR:
                writeln(<span class="stri">"   Ensign Chekov: 'Incorrect course data, sir!'"</span>);
                course := 10.0
            <span class="keywd">end</span> <span class="keywd">block</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">until</span> course &lt;= 9.0;
        <span class="keywd">if</span> course = 9.0 <span class="keywd">then</span>
          course := 1.0;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> course >= 1.0 <span class="keywd">then</span>
          decr(torpedoes);
          write(<span class="stri">"Track:"</span>);
          torpedo_track(course);
          hits_from_klingons;
          cond := get_condition;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* photon_torpedoes *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: galactic_records <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: row <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> damage[GALACTIC_RECORDS] > 0 <span class="keywd">then</span>
      show_damage(GALACTIC_RECORDS);
    <span class="keywd">else</span>
      write(<span class="stri">"Cumulative galactic map for stardate: "</span>);
      writeln(stardate);
      <span class="keywd">for</span> row <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
        write(<span class="stri">" "</span>);
        <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> 8 <span class="keywd">do</span>
          <span class="keywd">if</span> quad[row][column] &lt; 0 <span class="keywd">then</span>
            write(<span class="stri">" *** "</span>);
          <span class="keywd">else</span>
            <span class="keywd">if</span> row = quadrantRow <span class="op">and</span> column = quadrantColumn <span class="keywd">then</span>
              write(<span class="stri">"&lt;"</span> &lt;&amp; quadrant_description(row, column) &lt;&amp; <span class="stri">">"</span>);
            <span class="keywd">else</span>
              write(<span class="stri">" "</span> &lt;&amp; quadrant_description(row, column) &lt;&amp; <span class="stri">" "</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        writeln;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* galactic_records *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: write_stardate <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    writeln;
    writeln(<span class="stri">"It is stardate "</span> &lt;&amp; stardate);
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* write_stardate *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: game <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: rating <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: command <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: quit <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    init;
    enter_quadrant;
    hits_from_klingons;
    short_range_sensors;
    <span class="keywd">while</span> energy > 0.0 <span class="op">and</span>
        stardate &lt;= endStardate <span class="op">and</span>
        total_klingons >= 1 <span class="op">and</span>
        <span class="op">not</span> quit <span class="keywd">do</span>
      write(<span class="stri">"Command? "</span>);
      readln(command);
      <span class="keywd">if</span> command = <span class="stri">""</span> <span class="keywd">then</span>
        command := <span class="stri">" "</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">case</span> upper(command[1]) <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'1'</span>, <span class="stri">'W'</span>}: warp_engines;
        <span class="keywd">when</span> {<span class="stri">'2'</span>, <span class="stri">'S'</span>}: short_range_sensors;
        <span class="keywd">when</span> {<span class="stri">'3'</span>, <span class="stri">'L'</span>}: long_range_sensors;
        <span class="keywd">when</span> {<span class="stri">'4'</span>, <span class="stri">'P'</span>}: phasers;
        <span class="keywd">when</span> {<span class="stri">'5'</span>, <span class="stri">'T'</span>}: photon_torpedoes;
        <span class="keywd">when</span> {<span class="stri">'6'</span>, <span class="stri">'G'</span>}: galactic_records;
        <span class="keywd">when</span> {<span class="stri">'?'</span>, <span class="stri">'H'</span>}: help;
        <span class="keywd">when</span> {<span class="stri">'Q'</span>}:
          writeln;
          write(<span class="stri">"Are you sure you want to quit? "</span>);
          command := getln(IN);
          <span class="keywd">if</span> upper(command) = <span class="stri">"Y"</span> <span class="keywd">then</span>
            quit := TRUE;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">otherwise</span>:
          help_commands;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
    write_stardate;
    <span class="keywd">if</span> total_klingons &lt; 1 <span class="keywd">then</span>
      rating := 1000 * klingons_in_game <span class="op">div</span> (stardate - startStardate);
      writeln(<span class="stri">"The federation has been saved!"</span>);
      writeln(<span class="stri">"You are promoted to admiral."</span>);
      writeln(klingons_in_game &lt;&amp; <span class="stri">" Klingons in "</span> &lt;&amp; stardate - startStardate &lt;&amp;
              <span class="stri">" stardates.  Rating = "</span> &lt;&amp; rating);
    <span class="keywd">elsif</span> energy &lt;= 0.0 <span class="op">or</span> stardate > endStardate <span class="op">or</span> quit <span class="keywd">then</span>
      <span class="keywd">if</span> energy &lt;= 0.0 <span class="keywd">then</span>
        writeln(<span class="stri">"You ran out of energy!"</span>);
      <span class="keywd">elsif</span> stardate > endStardate <span class="keywd">then</span>
        writeln(<span class="stri">"You ran out of time!"</span>);
      <span class="keywd">elsif</span> quit <span class="keywd">then</span>
        writeln(<span class="stri">"You quit your job!"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      writeln(<span class="stri">"Thanks to your bungling, the federation will be"</span>);
      writeln(<span class="stri">"conquered by the remaining "</span> &lt;&amp; total_klingons &lt;&amp; <span class="stri">" Klingon cruisers!"</span>);
      writeln(<span class="stri">"You are demoted to cabin boy!"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* game *)</span>


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: finished <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: answer <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    title;
    write(<span class="stri">"Do you need instructions (Y/N)? "</span>);
    answer := upper(getln(IN));
    <span class="keywd">if</span> answer &lt;> <span class="stri">"Q"</span> <span class="keywd">then</span>
      <span class="keywd">if</span> answer = <span class="stri">"Y"</span> <span class="keywd">then</span>
        help;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      writeln;
      <span class="keywd">repeat</span>
        game;
        write(<span class="stri">"Try again? "</span>);
        answer := getln(IN);
        finished := upper(answer) = <span class="stri">"N"</span>;
      <span class="keywd">until</span> finished;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>; <span class="comment">(* main *)</span>
</pre>
</body>
</html>
