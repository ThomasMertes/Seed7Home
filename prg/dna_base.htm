<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style2.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  dna_base.s7i  Bacterial dna fight programming game interface    *)</span>
<span class="comment">(*  Copyright (C) 1985, 1986, 2005  Thomas Mertes                   *)</span>
<span class="comment">(*  Copyright (C) 1985, 1986,       Markus Stumptner                *)</span>
<span class="comment">(*  Copyright (C) 1985, 1986, 1991  Johannes Gritsch                *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">type</span>: bactColor <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    EDGE, CLEAR, WHITE, VIOLET, INDIGO, BLUE, CYAN,
    GREEN, YELLOW, AMBER, ORANGE, RED, SCARLET, TAN,
    LILIAC, PINK
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">bactColor</span>: aColor) <span class="keywd">is</span>
  <span class="keywd">return</span> [] (
    <span class="stri">"Edge"</span>, <span class="stri">"Clear"</span>, <span class="stri">"White"</span>, <span class="stri">"Violet"</span>, <span class="stri">"Indigo"</span>, <span class="stri">"Blue"</span>, <span class="stri">"Cyan"</span>,
    <span class="stri">"Green"</span>, <span class="stri">"Yellow"</span>, <span class="stri">"Amber"</span>, <span class="stri">"Orange"</span>, <span class="stri">"Red"</span>, <span class="stri">"Scarlet"</span>, <span class="stri">"Tan"</span>,
    <span class="stri">"Lilac"</span>, <span class="stri">"Pink"</span>
  )[succ(ord(aColor))];

enable_output(bactColor);

<span class="keywd">const</span> <span class="type">bactColor</span>: FIRSTCOL <span class="keywd">is</span> WHITE;
<span class="keywd">const</span> <span class="type">bactColor</span>: LASTCOL  <span class="keywd">is</span> PINK;

<span class="keywd">const</span> <span class="type">type</span>: direction <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    HERE, NORTH, SOUTH, WEST, EAST, NW, NE, SW, SE
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">direction</span>: aDirection) <span class="keywd">is</span>
  <span class="keywd">return</span> [] (
    <span class="stri">"HERE"</span>, <span class="stri">"NORTH"</span>, <span class="stri">"SOUTH"</span>, <span class="stri">"WEST"</span>, <span class="stri">"EAST"</span>, <span class="stri">"NW"</span>, <span class="stri">"NE"</span>, <span class="stri">"SW"</span>, <span class="stri">"SE"</span>
  )[succ(ord(aDirection))];

enable_output(direction);

<span class="keywd">const</span> <span class="type">type</span>: colorSet <span class="keywd">is</span> <span class="type">set</span> <span class="type">of</span> <span class="type">bactColor</span>;
<span class="keywd">const</span> <span class="type">type</span>: directSet <span class="keywd">is</span> <span class="type">set</span> <span class="type">of</span> <span class="type">direction</span>;
<span class="keywd">const</span> <span class="type">type</span>: directArr <span class="keywd">is</span> <span class="type">array</span> <span class="type">[</span>direction] direction;
<span class="keywd">const</span> <span class="type">type</span>: power <span class="keywd">is</span> integer; <span class="comment">(* 0 .. ALL *)</span>
<span class="keywd">const</span> <span class="type">type</span>: lifeSpan <span class="keywd">is</span> subtype integer; <span class="comment">(* 0 .. MAXLIFESPAN *)</span>
<span class="keywd">const</span> <span class="type">type</span>: percent <span class="keywd">is</span> subtype integer; <span class="comment">(* 0 .. 100 *)</span>

<span class="keywd">const</span> <span class="type">power</span>: ALL <span class="keywd">is</span> 1000000;
<span class="keywd">const</span> <span class="type">lifeSpan</span>: MAXLIFESPAN <span class="keywd">is</span> 3;

<span class="keywd">const</span> <span class="type">array</span> <span class="type">[</span>direction] <span class="type">direction</span>: right <span class="keywd">is</span> [direction] (
    HERE, NE, SW, NW, SE, NORTH, EAST, WEST, SOUTH);
<span class="keywd">const</span> <span class="type">array</span> <span class="type">[</span>direction] <span class="type">direction</span>: left <span class="keywd">is</span> [direction] (
    HERE, NW, SE, SW, NE, WEST, NORTH, SOUTH, EAST);

<span class="keywd">const</span> <span class="type">colorSet</span>: ALL_COLORS <span class="keywd">is</span> {WHITE, VIOLET, INDIGO, BLUE, CYAN,
    GREEN, YELLOW, AMBER, ORANGE, RED, SCARLET, TAN, LILIAC, PINK};
<span class="keywd">const</span> <span class="type">directSet</span>: MAIN_DIRECTIONS <span class="keywd">is</span> {NORTH, SOUTH, WEST, EAST};
<span class="keywd">const</span> <span class="type">directSet</span>: DIAGONAL_DIRECTIONS <span class="keywd">is</span> {NW, NE, SW, SE};

<span class="keywd">const</span> <span class="type">integer</span>: defaultVal <span class="keywd">is</span> 10; <span class="comment"># Default value for initSize, foodReserve and shrinkage.</span>

<span class="keywd">var</span> <span class="type">power</span>: initSize <span class="keywd">is</span> defaultVal;    <span class="comment"># Initial size of the bacterials.</span>
<span class="keywd">var</span> <span class="type">power</span>: foodReserve <span class="keywd">is</span> defaultVal; <span class="comment"># Initial amount of food at all fields.</span>
<span class="keywd">var</span> <span class="type">percent</span>: shrinkage <span class="keywd">is</span> defaultVal; <span class="comment"># Percentage by which bacterials shrink in every move.</span>


<span class="comment">(**
 *  Returns the content (color of a bacterium, CLEAR or EDGE) of a cell.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bactColor</span>: view (<span class="op">in</span> <span class="type">direction</span>: direct) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Returns the strength/size of a bacterium or 0 for CLEAR and EDGE fields.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">power</span>: strength (<span class="op">in</span> <span class="type">direction</span>: direct) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Returns the amount of food at a field or 0 for EDGE fields.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">power</span>: food (<span class="op">in</span> <span class="type">direction</span>: direct) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Moves a bacterium and it eats the given quantity of food.
 *  If the direction is not HERE the destination field must be CLEAR.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: eat (<span class="op">in</span> <span class="type">direction</span>: direct, <span class="op">in</span> <span class="type">power</span>: quantity) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Moves a bacterium and it kills/eats another bacterium at the new position.
 *  The other bacterium must be of the same size or smaller.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: kill (<span class="op">in</span> <span class="type">direction</span>: direct) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Splits a bacterium in two (one moves in the given direction).
 *  The two bacteria eat the given amounts of food.
 *  The direction must not be HERE and the destination field must be CLEAR.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: split (<span class="op">in</span> <span class="type">direction</span>: direct, <span class="op">in</span> <span class="type">power</span>: quantity1, <span class="op">in</span> <span class="type">power</span>: quantity2) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Computes the size by which a bacterium with the given
 *  size would shrink (when the bacterium does nothing).
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">power</span>: shrinkSize (<span class="op">in</span> <span class="type">power</span>: size) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Computes how many moves a bacterium survives a hunger situation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">lifeSpan</span>: hunger <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Computes the new size of a bacterium. As input it has
 *  the current size, the food it plans to ingest and the current hunger.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">power</span>: nextSize (<span class="op">in</span> <span class="type">power</span>: ownsize, <span class="op">in</span> <span class="type">power</span>: foodmass, <span class="op">in</span> <span class="type">lifeSpan</span>: ownHunger) <span class="keywd">is</span> <span class="keywd">forward</span>;


<span class="comment">(**
 *  Returns a random direction from the given dirset.
 *  When the dirset is empty it returns HERE.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">direction</span>: ranDir (<span class="op">in</span> <span class="type">directSet</span>: dirset) <span class="keywd">is</span> <span class="keywd">forward</span>;
</pre>
</body>
</html>
