<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  csv.s7i       Comma-separated values (CSV) support library.     *)</span>
<span class="comment">(*  Copyright (C) 2019  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Convert an array of [[string]]s to a CSV line.
 *  In a CSV line the fields are separated by the ''separator'' character.
 *  Fields that contain ''separator'' characters, linefeeds or carriage
 *  returns are enclosed in double quotes ("). Fields that start or end
 *  with double quotes are also enclosed in double quotes. Double quotes
 *  inside a double quoted field are represented by doubling them
 *  (e.g.: The double quoted field "a""b" has the value a"b ).
 *  @param data String array to be converted.
 *  @param separator Separator character to be used in the CSV line.
 *  @return the CSV line created from ta data array.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: toCsvLine (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: data, <span class="op">in</span> <span class="type">char</span>: separator) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: csvLine <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: field <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> field <span class="keywd">key</span> index <span class="keywd">range</span> data <span class="keywd">do</span>
      <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
        csvLine &amp;:= separator;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> startsWith(field, <span class="stri">"\""</span>) <span class="op">or</span> endsWith(field, <span class="stri">"\""</span>) <span class="op">or</span>
          pos(field, separator) &lt;> 0 <span class="op">or</span> pos(field, <span class="stri">'\n'</span>) &lt;> 0 <span class="op">or</span> pos(field, <span class="stri">'\r'</span>) &lt;> 0 <span class="keywd">then</span>
        csvLine &amp;:= <span class="stri">"\""</span> &amp; replace(field, <span class="stri">"\""</span>, <span class="stri">"\"\""</span>) &amp; <span class="stri">"\""</span>;
      <span class="keywd">else</span>
        csvLine &amp;:= field;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a CSV line to an array of [[string]]s.
 *  CSV fields in the CSV line are delimited by the ''separator'' character
 *  or the beginning or the end of the CSV line. A CSV field might be
 *  enclosed in double quotes ("). A double quoted CSV field might contain
 *  ''separator'' characters, double quotes (") or linefeed characters.
 *  Double quotes inside a double quoted field are represented by doubling
 *  them (e.g.: The double quoted field "a""b" has the value a"b ).
 *  This function is intended to be used, if the CSV line is already in
 *  a [[string]]. To read CSV lines from a file the function
 *  [[#readCsvLine(inout_file,in_char)|readCsvLine]] should be used
 *  instead of a combination of [[file#getln(inout_file)|getln]] and
 *  [[#fromCsvLine(in_string,in_char)|fromCsvLine]]. The function
 *  [[#readCsvLine(inout_file,in_char)|readCsvLine]] allows to read
 *  CSV fields, which contain linefeed characters.
 *  @param csvLine CSV line to be converted.
 *  @param separator Separator character used in the CSV line.
 *  @return the array of CSV fields from the CSV line.
 *  @exception RANGE_ERROR If ''csvLine'' is not in CSV format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: fromCsvLine (<span class="op">in</span> <span class="type">string</span>: csvLine, <span class="op">in</span> <span class="type">char</span>: separator) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: data <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: field <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      field := <span class="stri">""</span>;
      incr(pos);
      <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] = <span class="stri">'"'</span> <span class="keywd">then</span>
        <span class="keywd">repeat</span>
          incr(pos);
          <span class="keywd">while</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] &lt;> <span class="stri">'"'</span> <span class="keywd">do</span>
            field &amp;:= csvLine[pos];
            incr(pos);
          <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] = <span class="stri">'"'</span> <span class="keywd">then</span>
            incr(pos);
            <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] = <span class="stri">'"'</span> <span class="keywd">then</span>
              field &amp;:= <span class="stri">'"'</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">until</span> pos > length(csvLine) <span class="op">or</span> csvLine[pos] &lt;> <span class="stri">'"'</span>;
      <span class="keywd">else</span>
        <span class="keywd">repeat</span>
          <span class="keywd">while</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] &lt;> separator <span class="op">and</span>
              csvLine[pos] &lt;> <span class="stri">'\n'</span> <span class="op">and</span> csvLine[pos] &lt;> <span class="stri">'\r'</span> <span class="keywd">do</span>
            field &amp;:= csvLine[pos];
            incr(pos);
          <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] = <span class="stri">'\r'</span> <span class="keywd">then</span>
            incr(pos);
            <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] &lt;> <span class="stri">'\n'</span> <span class="keywd">then</span>
              field &amp;:= <span class="stri">'\r'</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">until</span> pos > length(csvLine) <span class="op">or</span> csvLine[pos] = separator <span class="op">or</span>
            csvLine[pos] = <span class="stri">'\n'</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      data &amp;:= field;
    <span class="keywd">until</span> pos > length(csvLine) <span class="op">or</span> csvLine[pos] &lt;> separator;
    <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] = <span class="stri">'\r'</span> <span class="keywd">then</span>
      incr(pos);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> pos &lt;= length(csvLine) <span class="op">and</span> csvLine[pos] &lt;> <span class="stri">'\n'</span> <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Read the fields of a CSV line with a given ''separator'' from a file.
 *  CSV fields are delimited by the ''separator'' character or the
 *  beginning or the end of a CSV line. A CSV line is terminated
 *  with '\n', "\r\n" or [[char#EOF|EOF]]. A CSV field might be enclosed
 *  in double quotes ("). A double quoted CSV field might contain
 *  ''separator'' characters, double quotes (") or linefeed characters.
 *  Double quotes inside a double quoted field are represented by doubling
 *  them (e.g.: The double quoted field "a""b" has the value a"b ).
 *  For UTF-8 encoded CSV files there are two possibilities:
 *  * If the CSV file has been opened with [[utf8#openUtf8(in_string,in_string)|openUtf8]] \
 *    the CSV fields will contain Unicode data.
 *  * If the file has been opened with [[external_file#open(in_string,in_string)|open]] the CSV fields will \
 *    contain UTF-8 encoded data. In this case the function \
 *    [[unicode#fromUtf8(in_string)|fromUtf8]] must be used, \
 *    to convert each CSV field from the result array.
 *  @param inFile File from which the CSV line is read.
 *  @param separator Separator character used in the CSV line.
 *  @return the array of CSV fields from the CSV line.
 *  @exception RANGE_ERROR If the CSV line is not in CSV format.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: readCsvLine (<span class="keywd">inout</span> <span class="type">file</span>: inFile, <span class="op">in</span> <span class="type">char</span>: separator) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: data <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">string</span>: field <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">repeat</span>
      ch := getc(inFile);
      field := <span class="stri">""</span>;
      <span class="keywd">if</span> ch = <span class="stri">'"'</span> <span class="keywd">then</span>
        <span class="keywd">repeat</span>
          ch := getc(inFile);
          <span class="keywd">while</span> ch &lt;> <span class="stri">'"'</span> <span class="op">and</span> ch &lt;> EOF <span class="keywd">do</span>
            field &amp;:= ch;
            ch := getc(inFile);
          <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">if</span> ch = <span class="stri">'"'</span> <span class="keywd">then</span>
            ch := getc(inFile);
            <span class="keywd">if</span> ch = <span class="stri">'"'</span> <span class="keywd">then</span>
              field &amp;:= ch;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">until</span> ch &lt;> <span class="stri">'"'</span>;
      <span class="keywd">else</span>
        <span class="keywd">repeat</span>
          <span class="keywd">while</span> ch &lt;> separator <span class="op">and</span> ch &lt;> <span class="stri">'\n'</span> <span class="op">and</span> ch &lt;> <span class="stri">'\r'</span> <span class="op">and</span> ch &lt;> EOF <span class="keywd">do</span>
            field &amp;:= ch;
            ch := getc(inFile);
          <span class="keywd">end</span> <span class="keywd">while</span>;
          <span class="keywd">if</span> ch = <span class="stri">'\r'</span> <span class="keywd">then</span>
            ch := getc(inFile);
            <span class="keywd">if</span> ch &lt;> <span class="stri">'\n'</span> <span class="keywd">then</span>
              field &amp;:= <span class="stri">'\r'</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">until</span> ch = separator <span class="op">or</span> ch = <span class="stri">'\n'</span> <span class="op">or</span> ch = EOF;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      data &amp;:= field;
    <span class="keywd">until</span> ch &lt;> separator;
    <span class="keywd">if</span> ch = <span class="stri">'\r'</span> <span class="keywd">then</span>
      ch := getc(inFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> ch &lt;> <span class="stri">'\n'</span> <span class="op">and</span> ch &lt;> EOF <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    inFile.bufferChar := ch;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
