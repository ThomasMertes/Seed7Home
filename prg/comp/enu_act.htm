<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  enu_act.s7i   Generate code for actions of enumeration values.  *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_CONV    <span class="keywd">is</span> action <span class="stri">"ENU_CONV"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_CPY     <span class="keywd">is</span> action <span class="stri">"ENU_CPY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_EQ      <span class="keywd">is</span> action <span class="stri">"ENU_EQ"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_ICONV2  <span class="keywd">is</span> action <span class="stri">"ENU_ICONV2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_LIT     <span class="keywd">is</span> action <span class="stri">"ENU_LIT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_NE      <span class="keywd">is</span> action <span class="stri">"ENU_NE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_ORD2    <span class="keywd">is</span> action <span class="stri">"ENU_ORD2"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: ENU_VALUE   <span class="keywd">is</span> action <span class="stri">"ENU_VALUE"</span>;

<span class="keywd">var</span> <span class="type">boolean_type_hash</span>: literal_function_of_enum_used <span class="keywd">is</span> boolean_type_hash.EMPTY_HASH;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_CONV, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_CPY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_EQ, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") == ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_ICONV2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: numberOfEnumLiterals <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">intRange</span>: number_range <span class="keywd">is</span> intRange.value;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    numberOfEnumLiterals := length(getValue(evaluate(prog, params[2]), ref_list));
    number_range := getIntRange(params[1]);
    <span class="keywd">if</span> (number_range.minValue >= numberOfEnumLiterals <span class="op">and</span>
        number_range.maxValue >= numberOfEnumLiterals) <span class="op">or</span>
        (number_range.minValue &lt; 0 <span class="op">and</span> number_range.maxValue &lt; 0) <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= <span class="stri">"(enumType)"</span>;
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> conversion_range_check <span class="keywd">then</span>
      <span class="keywd">if</span> number_range.minValue >= 0 <span class="op">and</span>
          number_range.maxValue &lt; numberOfEnumLiterals <span class="keywd">then</span>
        <span class="comment"># This conversion cannot overflow</span>
        incr(countOptimizations);
        c_expr.expr &amp;:= <span class="stri">"/*no_range_check_conversion*/(enumType)("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        incr(countRangeChecks);
        c_expr.expr &amp;:= <span class="stri">"(enumType)("</span>;
        number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        <span class="keywd">if</span> number_range.maxValue &lt; numberOfEnumLiterals <span class="keywd">then</span>
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">"&lt;0"</span>;
        <span class="keywd">else</span>
          <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
            c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">")"</span>;
          <span class="keywd">else</span>
            c_expr.expr &amp;:= number_name;
            c_expr.expr &amp;:= <span class="stri">"&lt;0||"</span>;
            c_expr.expr &amp;:= number_name;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          c_expr.expr &amp;:= <span class="stri">">="</span>;
          c_expr.expr &amp;:= str(numberOfEnumLiterals);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      incr(countNoRangeChecks);
      c_expr.expr &amp;:= <span class="stri">"(enumType)("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_LIT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">type</span>: enumType <span class="keywd">is</span> void;
  <span class="keywd">begin</span>
    enumType := getType(formalParams(function)[1]);
    <span class="keywd">if</span> enumType <span class="op">not</span> <span class="op">in</span> literal_function_of_enum_used <span class="keywd">then</span>
      global_c_expr.expr &amp;:= <span class="stri">"static striType lit_"</span>;
      global_c_expr.expr &amp;:= str(typeNumber(enumType));
      global_c_expr.expr &amp;:= <span class="stri">" ("</span>;
      global_c_expr.expr &amp;:= type_name(enumType);
      global_c_expr.expr &amp;:= <span class="stri">" enumValue);\n\n"</span>;
      literal_function_of_enum_used @:= [enumType] TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    c_expr.expr &amp;:= <span class="stri">"lit_"</span>;
    c_expr.expr &amp;:= str(typeNumber(enumType));
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_NE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") != ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_ORD2, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (ENU_VALUE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"enuValue("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
