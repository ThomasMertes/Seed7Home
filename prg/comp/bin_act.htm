<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bin_act.s7i   Generate code for bin32 and bin64 actions.        *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2017, 2022  Thomas Mertes     *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_AND                 <span class="keywd">is</span> action <span class="stri">"BIN_AND"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_AND_ASSIGN          <span class="keywd">is</span> action <span class="stri">"BIN_AND_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_BIG                 <span class="keywd">is</span> action <span class="stri">"BIN_BIG"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_BINARY              <span class="keywd">is</span> action <span class="stri">"BIN_BINARY"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_CARD                <span class="keywd">is</span> action <span class="stri">"BIN_CARD"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_CMP                 <span class="keywd">is</span> action <span class="stri">"BIN_CMP"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_GET_BINARY_FROM_SET <span class="keywd">is</span> action <span class="stri">"BIN_GET_BINARY_FROM_SET"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_LSHIFT              <span class="keywd">is</span> action <span class="stri">"BIN_LSHIFT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_LSHIFT_ASSIGN       <span class="keywd">is</span> action <span class="stri">"BIN_LSHIFT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_N_BYTES_BE          <span class="keywd">is</span> action <span class="stri">"BIN_N_BYTES_BE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_N_BYTES_LE          <span class="keywd">is</span> action <span class="stri">"BIN_N_BYTES_LE"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_OR                  <span class="keywd">is</span> action <span class="stri">"BIN_OR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_OR_ASSIGN           <span class="keywd">is</span> action <span class="stri">"BIN_OR_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_radix               <span class="keywd">is</span> action <span class="stri">"BIN_radix"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_RADIX               <span class="keywd">is</span> action <span class="stri">"BIN_RADIX"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_RSHIFT              <span class="keywd">is</span> action <span class="stri">"BIN_RSHIFT"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_RSHIFT_ASSIGN       <span class="keywd">is</span> action <span class="stri">"BIN_RSHIFT_ASSIGN"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_STR                 <span class="keywd">is</span> action <span class="stri">"BIN_STR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_XOR                 <span class="keywd">is</span> action <span class="stri">"BIN_XOR"</span>;
<span class="keywd">const</span> <span class="type">ACTION</span>: BIN_XOR_ASSIGN          <span class="keywd">is</span> action <span class="stri">"BIN_XOR_ASSIGN"</span>;


<span class="keywd">const</span> <span class="type">proc</span>: bin_prototypes (<span class="keywd">inout</span> <span class="type">file</span>: c_prog) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    declareExtern(c_prog, <span class="stri">"uintType    setToUInt (const const_setType, const intType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     uintCard (uintType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     uintCmp (uintType, uintType);"</span>);
    declareExtern(c_prog, <span class="stri">"intType     uintCmpGeneric (const genericType, const genericType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    uintNBytesBe (uintType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    uintNBytesLe (uintType, intType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    uintRadix (uintType, intType, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    uintRadixPow2 (uintType, int, int, boolType);"</span>);
    declareExtern(c_prog, <span class="stri">"striType    uintStr (uintType);"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_AND, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") &amp; ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_AND_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"&amp;="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_BIG, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_bigint_result(c_expr);
    c_expr.result_expr := <span class="stri">"bigFromUInt64("</span>;
    getAnyParamToResultExpr(params[1], c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: optimize_bin_binary_of_big_mod (<span class="op">in</span> <span class="type">reference</span>: param1,
    <span class="op">in</span> <span class="type">reference</span>: dividend, <span class="op">in</span> <span class="type">bigInteger</span>: divisor,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">addSubBigListType</span>: addSubParamList <span class="keywd">is</span> addSubBigListType.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> divisor > 0_ <span class="op">and</span> log2(divisor) &lt;= 64_ <span class="op">and</span>
        2_ ** ord(log2(divisor)) = divisor <span class="keywd">then</span>
      <span class="keywd">if</span> evaluate_const_expr >= 2 <span class="keywd">then</span>
        generateAddSubParamList(addSubParamList, dividend);
        evaluateConstants(addSubParamList);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        optimizeAddSubList(addSubParamList, divisor, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">else</span>
        c_expr.expr &amp;:= <span class="stri">"bigLowerBits64("</span>;
        getAnyParamToExpr(dividend, c_expr);
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> log2(divisor) &lt; 64_ <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
        c_expr.expr &amp;:= integerLiteral(ord(pred(divisor)));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigToUInt64("</span>;
      getAnyParamToExpr(param1, c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_BINARY, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> evaluate_const_expr >= 1 <span class="op">and</span>
        isActionExpression(params[1], <span class="stri">"BIG_MOD"</span>) <span class="op">and</span>
        getConstant(getActionParameter(params[1], 3),
                    BIGINTOBJECT, evaluatedParam) <span class="keywd">then</span>
      optimize_bin_binary_of_big_mod(params[1],
          getActionParameter(params[1], 1),
          getValue(evaluatedParam, bigInteger), c_expr);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"bigToUInt64("</span>;
      getAnyParamToExpr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_CARD, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"uintCard("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_CMP, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: number1_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: number2_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number1_name := getParameterAsVariable(<span class="stri">"uintType"</span>, <span class="stri">"num1_"</span>, params[1], c_expr);
      number2_name := getParameterAsVariable(<span class="stri">"uintType"</span>, <span class="stri">"num2_"</span>, params[2], c_expr);
      c_expr.expr &amp;:= number1_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;"</span>;
      c_expr.expr &amp;:= number2_name;
      c_expr.expr &amp;:= <span class="stri">"? -1 : "</span>;
      c_expr.expr &amp;:= number1_name;
      c_expr.expr &amp;:= <span class="stri">">"</span>;
      c_expr.expr &amp;:= number2_name;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"uintCmp("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">", "</span>;
      process_expr(params[2], c_expr);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_GET_BINARY_FROM_SET, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"setToUInt("</span>;
    getAnyParamToExpr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">", "</span>;
    process_expr(params[2], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_lshift (<span class="op">in</span> <span class="type">reference</span>: number, <span class="op">in</span> <span class="type">integer</span>: lshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> lshift &lt; 0 <span class="op">or</span> lshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(intType)((uintType)("</span>;
      process_expr(number, c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
      c_expr.expr &amp;:= integerLiteral(lshift);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_LSHIFT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: lshift_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bin_lshift(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      lshift_range := getIntRange(params[3]);
      <span class="keywd">if</span> lshift_range.minValue &lt; 0 <span class="op">or</span>
          lshift_range.maxValue >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"lshift_"</span>, params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(lshift_name, integerLiteral(ccConf.INTTYPE_SIZE), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":(intType)((uintType)("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
        c_expr.expr &amp;:= lshift_name;
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">else</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_lshift*/"</span>;
        c_expr.expr &amp;:= <span class="stri">"(intType)((uintType)("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(intType)((uintType)("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_lshift_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: lshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> lshift &lt; 0 <span class="op">or</span> lshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      setDiagnosticLine(c_expr);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">"\n"</span>;
    <span class="keywd">else</span>
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, variable, statement);
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=(intType)((uintType)("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
      statement.expr &amp;:= integerLiteral(lshift);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_LSHIFT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: lshift_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bin_lshift_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[1], statement);
      lshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[3], statement);
      statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
      checkRangeFromZero(lshift_name, integerLiteral(ccConf.INTTYPE_SIZE), statement);
      statement.expr &amp;:= <span class="stri">")?"</span>;
      statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">":("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=(intType)((uintType)("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">") &lt;&lt; "</span>;
      statement.expr &amp;:= lshift_name;
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[1], statement);
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=(intType)((uintType)("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">") &lt;&lt; ("</span>;
      process_expr(params[3], statement);
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_n_bytes_be (<span class="op">in</span> <span class="type">reference</span>: number,
    <span class="op">in</span> <span class="type">integer</span>: length, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedNumber <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: numberValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: buffer_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt;= 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(number, INTOBJECT, evaluatedNumber) <span class="keywd">then</span>
      incr(countOptimizations);
      numberValue := getValue(evaluatedNumber, integer);
      <span class="keywd">if</span> length &lt; 8 <span class="op">and</span> (numberValue >= 2 ** (8 * length) <span class="op">or</span> numberValue &lt; 0) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= stringLiteral(bytes(bin64(numberValue), BE, length));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> ccConf.ALLOW_STRITYPE_SLICES <span class="op">and</span> length &lt;= 8 <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      incr(c_expr.temp_num);
      buffer_name := <span class="stri">"buffer_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"union {\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  struct striStruct striBuf;\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  char charBuf[SIZ_STRI("</span>;
      c_expr.temp_decls &amp;:= str(length);
      c_expr.temp_decls &amp;:= <span class="stri">")];\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"} "</span>;
      c_expr.temp_decls &amp;:= buffer_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, number, c_expr);
      <span class="keywd">if</span> function_range_check <span class="op">and</span> length &lt; 8 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        c_expr.expr &amp;:= <span class="stri">"(uintType)"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">">(uintType)"</span>;
        c_expr.expr &amp;:= integerLiteral(pred(2 ** (8 * length)));
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":("</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.size="</span>;
      c_expr.expr &amp;:= str(length);
      c_expr.expr &amp;:= <span class="stri">","</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem="</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem1,"</span>;
      <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length <span class="keywd">do</span>
        c_expr.expr &amp;:= buffer_name;
        c_expr.expr &amp;:= <span class="stri">".striBuf.mem1["</span>;
        c_expr.expr &amp;:= str(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]=(strElemType)("</span>;
        <span class="keywd">if</span> index &lt;> length <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">")>>"</span>;
          c_expr.expr &amp;:= str(8 * (length - index));
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
          c_expr.expr &amp;:= number_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"&amp;255"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"),"</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf"</span>;
      <span class="keywd">if</span> function_range_check <span class="op">and</span> length &lt; 8 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintNBytesBe("</span>;
      getStdParamToResultExpr(number, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(length);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_N_BYTES_BE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedLength <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        getConstant(params[3], INTOBJECT, evaluatedLength) <span class="keywd">then</span>
      process_const_bin_n_bytes_be(params[1],
          getValue(evaluatedLength, integer), c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintNBytesBe("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_n_bytes_le (<span class="op">in</span> <span class="type">reference</span>: number,
    <span class="op">in</span> <span class="type">integer</span>: length, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedNumber <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">integer</span>: numberValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: buffer_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: number_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> length &lt;= 0 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> getConstant(number, INTOBJECT, evaluatedNumber) <span class="keywd">then</span>
      incr(countOptimizations);
      numberValue := getValue(evaluatedNumber, integer);
      <span class="keywd">if</span> length &lt; 8 <span class="op">and</span> (numberValue >= 2 ** (8 * length) <span class="op">or</span> numberValue &lt; 0) <span class="keywd">then</span>
        warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
        c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
      <span class="keywd">else</span>
        c_expr.expr &amp;:= stringLiteral(bytes(bin64(numberValue), LE, length));
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> ccConf.ALLOW_STRITYPE_SLICES <span class="op">and</span> length &lt;= 8 <span class="keywd">then</span>
      incr(countOptimizations);
      incr(countInlinedFunctions);
      incr(c_expr.temp_num);
      buffer_name := <span class="stri">"buffer_"</span> &amp; str(c_expr.temp_num);
      c_expr.temp_decls &amp;:= <span class="stri">"union {\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  struct striStruct striBuf;\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"  char charBuf[SIZ_STRI("</span>;
      c_expr.temp_decls &amp;:= str(length);
      c_expr.temp_decls &amp;:= <span class="stri">")];\n"</span>;
      c_expr.temp_decls &amp;:= <span class="stri">"} "</span>;
      c_expr.temp_decls &amp;:= buffer_name;
      c_expr.temp_decls &amp;:= <span class="stri">";\n"</span>;
      c_expr.expr &amp;:= <span class="stri">"("</span>;
      number_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, number, c_expr);
      <span class="keywd">if</span> function_range_check <span class="op">and</span> length &lt; 8 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">"rngChk("</span>;
        c_expr.expr &amp;:= <span class="stri">"(uintType)"</span>;
        c_expr.expr &amp;:= number_name;
        c_expr.expr &amp;:= <span class="stri">">(uintType)"</span>;
        c_expr.expr &amp;:= integerLiteral(pred(2 ** (8 * length)));
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":("</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.size="</span>;
      c_expr.expr &amp;:= str(length);
      c_expr.expr &amp;:= <span class="stri">","</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem="</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf.mem1,"</span>;
      <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length <span class="keywd">do</span>
        c_expr.expr &amp;:= buffer_name;
        c_expr.expr &amp;:= <span class="stri">".striBuf.mem1["</span>;
        c_expr.expr &amp;:= str(pred(index));
        c_expr.expr &amp;:= <span class="stri">"]=(strElemType)("</span>;
        <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"((uintType)("</span>;
          c_expr.expr &amp;:= number_name;
          c_expr.expr &amp;:= <span class="stri">")>>"</span>;
          c_expr.expr &amp;:= str(8 * pred(index));
        <span class="keywd">else</span>
          c_expr.expr &amp;:= <span class="stri">"(uintType)("</span>;
          c_expr.expr &amp;:= number_name;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">")"</span>;
        <span class="keywd">if</span> index &lt;> length <span class="keywd">then</span>
          c_expr.expr &amp;:= <span class="stri">"&amp;255"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        c_expr.expr &amp;:= <span class="stri">"),"</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      c_expr.expr &amp;:= <span class="stri">"&amp;"</span>;
      c_expr.expr &amp;:= buffer_name;
      c_expr.expr &amp;:= <span class="stri">".striBuf"</span>;
      <span class="keywd">if</span> function_range_check <span class="op">and</span> length &lt; 8 <span class="keywd">then</span>
        c_expr.expr &amp;:= <span class="stri">")"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintNBytesLe("</span>;
      getStdParamToResultExpr(number, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(length);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_N_BYTES_LE, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedLength <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> inlineFunctions <span class="op">and</span>
        getConstant(params[3], INTOBJECT, evaluatedLength) <span class="keywd">then</span>
      process_const_bin_n_bytes_le(params[1],
          getValue(evaluatedLength, integer), c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintNBytesLe("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_OR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") | ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_OR_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"|="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_bin_str (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    prepare_stri_result(c_expr);
    c_expr.result_expr := <span class="stri">"uintStr("</span>;
    getStdParamToResultExpr(param1, c_expr);
    c_expr.result_expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_radix (<span class="op">in</span> <span class="type">reference</span>: param1, <span class="op">in</span> <span class="type">integer</span>: base,
    <span class="op">in</span> <span class="type">boolean</span>: upperCase, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> base &lt; 2 <span class="op">or</span> base > 36 <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"RANGE_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= strRaiseError(<span class="stri">"RANGE_ERROR"</span>);
    <span class="keywd">elsif</span> base = 10 <span class="keywd">then</span>
      incr(countOptimizations);
      process_bin_str(param1, c_expr);
    <span class="keywd">elsif</span> 2 ** log2(base) = base <span class="keywd">then</span>
      incr(countOptimizations);
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintRadixPow2("</span>;
      getStdParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= integerLiteral(log2(base));
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= integerLiteral(pred(base));
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= str(ord(upperCase));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintRadix("</span>;
      getStdParamToResultExpr(param1, c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      c_expr.result_expr &amp;:= integerLiteral(base);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= str(ord(upperCase));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_bin_radix (<span class="op">in</span> <span class="type">ref_list</span>: params, <span class="op">in</span> <span class="type">boolean</span>: upperCase,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bin_radix(params[1], getValue(evaluatedParam, integer),
          upperCase, c_expr);
    <span class="keywd">else</span>
      prepare_stri_result(c_expr);
      c_expr.result_expr := <span class="stri">"uintRadix("</span>;
      getStdParamToResultExpr(params[1], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">", "</span>;
      getStdParamToResultExpr(params[3], c_expr);
      c_expr.result_expr &amp;:= <span class="stri">","</span>;
      c_expr.result_expr &amp;:= str(ord(upperCase));
      c_expr.result_expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_radix, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_bin_radix(params, FALSE, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_RADIX, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_bin_radix(params, TRUE, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_rshift (<span class="op">in</span> <span class="type">reference</span>: number, <span class="op">in</span> <span class="type">integer</span>: rshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> rshift &lt; 0 <span class="op">or</span> rshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(intType)((uintType)("</span>;
      process_expr(number, c_expr);
      c_expr.expr &amp;:= <span class="stri">") >> "</span>;
      c_expr.expr &amp;:= integerLiteral(rshift);
      c_expr.expr &amp;:= <span class="stri">")"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_RSHIFT, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">string</span>: rshift_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">intRange</span>: rshift_range <span class="keywd">is</span> intRange.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bin_rshift(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      rshift_range := getIntRange(params[3]);
      <span class="keywd">if</span> rshift_range.minValue &lt; 0 <span class="op">or</span>
          rshift_range.maxValue >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
        incr(countOverflowChecks);
        c_expr.expr &amp;:= <span class="stri">"("</span>;
        rshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"rshift_"</span>, params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"ovfChk("</span>;
        checkRangeFromZero(rshift_name, integerLiteral(ccConf.INTTYPE_SIZE), c_expr);
        c_expr.expr &amp;:= <span class="stri">")?"</span>;
        c_expr.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
        c_expr.expr &amp;:= <span class="stri">":(intType)((uintType)("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") >> "</span>;
        c_expr.expr &amp;:= rshift_name;
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">else</span>
        countOverflowOptimizations(c_expr);
        c_expr.expr &amp;:= <span class="stri">"/*no_overflow_check_rshift*/"</span>;
        c_expr.expr &amp;:= <span class="stri">"(intType)((uintType)("</span>;
        process_expr(params[1], c_expr);
        c_expr.expr &amp;:= <span class="stri">") >> ("</span>;
        process_expr(params[3], c_expr);
        c_expr.expr &amp;:= <span class="stri">"))"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"(intType)((uintType)("</span>;
      process_expr(params[1], c_expr);
      c_expr.expr &amp;:= <span class="stri">") >> ("</span>;
      process_expr(params[3], c_expr);
      c_expr.expr &amp;:= <span class="stri">"))"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process_const_bin_rshift_assign (<span class="op">in</span> <span class="type">reference</span>: variable, <span class="op">in</span> <span class="type">integer</span>: rshift,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> rshift &lt; 0 <span class="op">or</span> rshift >= ccConf.INTTYPE_SIZE <span class="keywd">then</span>
      incr(countOptimizations);
      setDiagnosticLine(c_expr);
      warning(DOES_RAISE, <span class="stri">"OVERFLOW_ERROR"</span>, c_expr);
      c_expr.expr &amp;:= raiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      c_expr.expr &amp;:= <span class="stri">"\n"</span>;
    <span class="keywd">else</span>
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, variable, statement);
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=(intType)((uintType)("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">") >> "</span>;
      statement.expr &amp;:= integerLiteral(rshift);
      statement.expr &amp;:= <span class="stri">");\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_RSHIFT_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">reference</span>: evaluatedParam <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
    <span class="keywd">var</span> <span class="type">string</span>: variable_name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: rshift_name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> getConstant(params[3], INTOBJECT, evaluatedParam) <span class="keywd">then</span>
      process_const_bin_rshift_assign(params[1], getValue(evaluatedParam, integer), c_expr);
    <span class="keywd">elsif</span> check_int_shift_overflow <span class="keywd">then</span>
      incr(countOverflowChecks);
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[1], statement);
      rshift_name := getParameterAsVariable(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[3], statement);
      statement.expr &amp;:= <span class="stri">"ovfChk("</span>;
      checkRangeFromZero(rshift_name, integerLiteral(ccConf.INTTYPE_SIZE), statement);
      statement.expr &amp;:= <span class="stri">")?"</span>;
      statement.expr &amp;:= intRaiseError(<span class="stri">"OVERFLOW_ERROR"</span>);
      statement.expr &amp;:= <span class="stri">":("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=(intType)((uintType)("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">") >> "</span>;
      statement.expr &amp;:= rshift_name;
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">else</span>
      variable_name := getParameterAsReference(<span class="stri">"intType"</span>, <span class="stri">"tmp_"</span>, params[1], statement);
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">"=(intType)((uintType)("</span>;
      statement.expr &amp;:= variable_name;
      statement.expr &amp;:= <span class="stri">") >> ("</span>;
      process_expr(params[3], statement);
      statement.expr &amp;:= <span class="stri">"));\n"</span>;
      doLocalDeclsOfStatement(statement, c_expr);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_STR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    process_bin_str(params[1], c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_XOR, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    c_expr.expr &amp;:= <span class="stri">"("</span>;
    process_expr(params[1], c_expr);
    c_expr.expr &amp;:= <span class="stri">") ^ ("</span>;
    process_expr(params[3], c_expr);
    c_expr.expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: process (BIN_XOR_ASSIGN, <span class="op">in</span> <span class="type">reference</span>: function,
    <span class="op">in</span> <span class="type">ref_list</span>: params, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">expr_type</span>: statement <span class="keywd">is</span> expr_type.value;
  <span class="keywd">begin</span>
    process_expr(params[1], statement);
    statement.expr &amp;:= <span class="stri">"^="</span>;
    process_expr(params[3], statement);
    statement.expr &amp;:= <span class="stri">";\n"</span>;
    doLocalDeclsOfStatement(statement, c_expr);
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
