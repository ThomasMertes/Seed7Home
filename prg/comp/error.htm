<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  error.s7i     Support to raise exceptions.                      *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">var</span> <span class="type">type</span>: catchExceptionLevelType <span class="keywd">is</span> <span class="type">hash</span> <span class="type">[</span><span class="type">string</span><span class="type">]</span> <span class="type">integer</span>;

<span class="keywd">var</span> <span class="type">catchExceptionLevelType</span>: catchExceptionLevel <span class="keywd">is</span> catchExceptionLevelType.value;
<span class="keywd">var</span> <span class="type">integer</span>: catchAllExceptionsLevel <span class="keywd">is</span> 0;


<span class="keywd">const</span> <span class="type">proc</span>: increaseLevelOfCatchedExceptions (<span class="op">in</span> <span class="keywd">var</span> <span class="type">reference</span>: current_catch) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ref_list</span>: catch_expr <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">string</span>: exceptionName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    catch_expr := getValue(current_catch, ref_list);
    <span class="keywd">while</span> current_catch &lt;> NIL <span class="op">and</span>
        category(current_catch) = MATCHOBJECT <span class="op">and</span>
        length(catch_expr) >= 5 <span class="keywd">do</span>
      exceptionName := str(catch_expr[3]);
      <span class="keywd">if</span> exceptionName <span class="op">in</span> catchExceptionLevel <span class="keywd">then</span>
        incr(catchExceptionLevel[exceptionName]);
      <span class="keywd">else</span>
        catchExceptionLevel @:= [exceptionName] 0;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> length(catch_expr) >= 6 <span class="keywd">then</span>
         current_catch := catch_expr[6];
        catch_expr := getValue(current_catch, ref_list);
      <span class="keywd">else</span>
        current_catch := NIL;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: decreaseLevelOfCatchedExceptions (<span class="op">in</span> <span class="keywd">var</span> <span class="type">reference</span>: current_catch) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ref_list</span>: catch_expr <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">string</span>: exceptionName <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    catch_expr := getValue(current_catch, ref_list);
    <span class="keywd">while</span> current_catch &lt;> NIL <span class="op">and</span>
        category(current_catch) = MATCHOBJECT <span class="op">and</span>
        length(catch_expr) >= 5 <span class="keywd">do</span>
      exceptionName := str(catch_expr[3]);
      <span class="keywd">if</span> exceptionName <span class="op">in</span> catchExceptionLevel <span class="keywd">then</span>
        decr(catchExceptionLevel[exceptionName]);
      <span class="keywd">else</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> length(catch_expr) >= 6 <span class="keywd">then</span>
         current_catch := catch_expr[6];
        catch_expr := getValue(current_catch, ref_list);
      <span class="keywd">else</span>
        current_catch := NIL;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: raiseError (<span class="op">in</span> <span class="type">string</span>: exceptionName) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    expr &amp;:= <span class="stri">"raiseError("</span>;
    expr &amp;:= exceptionName;
    expr &amp;:= <span class="stri">");"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: intRaiseError (<span class="op">in</span> <span class="type">string</span>: exceptionName) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    expr &amp;:= <span class="stri">"intRaiseError("</span>;
    expr &amp;:= exceptionName;
    expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: bigRaiseError (<span class="op">in</span> <span class="type">string</span>: exceptionName) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    expr &amp;:= <span class="stri">"bigRaiseError("</span>;
    expr &amp;:= exceptionName;
    expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: strRaiseError (<span class="op">in</span> <span class="type">string</span>: exceptionName) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    expr &amp;:= <span class="stri">"strRaiseError("</span>;
    expr &amp;:= exceptionName;
    expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: refRaiseError (<span class="op">in</span> <span class="type">string</span>: exceptionName) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: expr <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    expr &amp;:= <span class="stri">"refRaiseError("</span>;
    expr &amp;:= exceptionName;
    expr &amp;:= <span class="stri">")"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: warning (COMPARISON_RESULT_CONSTANT, <span class="op">in</span> <span class="type">string</span>: comparisonName,
    <span class="op">in</span> <span class="type">boolean</span>: comparisonResult, <span class="op">in</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 2 <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp;
              <span class="stri">"): Comparison with "</span> &lt;&amp; comparisonName &lt;&amp;
              <span class="stri">" always evaluates to "</span> &lt;&amp; comparisonResult &lt;&amp; <span class="stri">"."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: warning (DOES_RAISE, <span class="op">in</span> <span class="type">string</span>: exceptionName, <span class="op">in</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 2 <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; c_expr.currentFile &lt;&amp; <span class="stri">"("</span> &lt;&amp; c_expr.currentLine &lt;&amp;
              <span class="stri">"): Expression raises "</span> &lt;&amp; exceptionName &lt;&amp; <span class="stri">"."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkWarning (CATCH_WITH_SUPPRESSED_CHECK, <span class="op">in</span> <span class="type">string</span>: exceptionName, <span class="op">in</span> <span class="type">reference</span>: place) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 1 <span class="op">and</span>
        ((<span class="op">not</span> (string_index_check <span class="op">and</span> bstring_index_check <span class="op">and</span> array_index_check) <span class="op">and</span> exceptionName = <span class="stri">"INDEX_ERROR"</span>) <span class="op">or</span>
         (<span class="op">not</span> integer_division_check <span class="op">and</span> exceptionName = <span class="stri">"NUMERIC_ERROR"</span>) <span class="op">or</span>
         (<span class="op">not</span> integer_overflow_check <span class="op">and</span> exceptionName = <span class="stri">"OVERFLOW_ERROR"</span>) <span class="op">or</span>
         (<span class="op">not</span> (function_range_check <span class="op">and</span> conversion_range_check) <span class="op">and</span> exceptionName = <span class="stri">"RANGE_ERROR"</span>)) <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; sourceNameString(file(place)) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(place) &lt;&amp;
              <span class="stri">"): Catch of "</span> &lt;&amp; exceptionName &lt;&amp; <span class="stri">" although the checks are suppressed."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkWarning (CATCH_OTHERWISE_WITH_SUPPRESSED_CHECK, <span class="op">in</span> <span class="type">reference</span>: place) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: exceptionNameList <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 2 <span class="keywd">then</span>
      <span class="keywd">if</span> <span class="op">not</span> (string_index_check <span class="op">and</span> bstring_index_check <span class="op">and</span> array_index_check) <span class="keywd">then</span>
        exceptionNameList &amp;:= <span class="stri">"INDEX_ERROR"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> integer_division_check <span class="keywd">then</span>
        exceptionNameList &amp;:= <span class="stri">"NUMERIC_ERROR"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> integer_overflow_check <span class="keywd">then</span>
        exceptionNameList &amp;:= <span class="stri">"OVERFLOW_ERROR"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> <span class="op">not</span> (function_range_check <span class="op">and</span> conversion_range_check) <span class="keywd">then</span>
        exceptionNameList &amp;:= <span class="stri">"RANGE_ERROR"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> length(exceptionNameList) &lt;> 0 <span class="keywd">then</span>
        write(<span class="stri">"*** "</span> &lt;&amp; sourceNameString(file(place)) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(place) &lt;&amp;
              <span class="stri">"): Catch of otherwise although the checks for "</span>);
        <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> pred(length(exceptionNameList)) <span class="keywd">do</span>
          <span class="keywd">if</span> index &lt;> 1 <span class="keywd">then</span>
            write(<span class="stri">", "</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          write(exceptionNameList[index]);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">if</span> length(exceptionNameList) >= 2 <span class="keywd">then</span>
          write(<span class="stri">" and "</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        write(exceptionNameList[length(exceptionNameList)]);
        writeln(<span class="stri">" are suppressed."</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: error (WHEN_OVERLAPPING, <span class="op">in</span> <span class="type">bitset</span>: overlappingWhenValues,
    <span class="op">in</span> <span class="type">reference</span>: current_expression) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 1 <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; file(current_expression) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(current_expression) &lt;&amp;
              <span class="stri">"): Duplicate when values "</span> &lt;&amp; overlappingWhenValues &lt;&amp; <span class="stri">"."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: error (WHEN_PREVIOUS, <span class="op">in</span> <span class="type">bitset</span>: overlappingWhenValues,
    <span class="op">in</span> <span class="type">reference</span>: current_expression) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 1 <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; file(current_expression) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(current_expression) &lt;&amp;
              <span class="stri">"): Previous usage of "</span> &lt;&amp; overlappingWhenValues &lt;&amp; <span class="stri">"."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: error (VARIABLE_WHEN, <span class="op">in</span> <span class="type">reference</span>: current_expression) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 1 <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; file(current_expression) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(current_expression) &lt;&amp;
              <span class="stri">"): When value must be constant."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: error (FORWARD_CALLED, <span class="op">in</span> <span class="type">reference</span>: current_expression,
    <span class="op">in</span> <span class="type">reference</span>: function) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> warning_level >= 1 <span class="keywd">then</span>
      writeln(<span class="stri">"*** "</span> &lt;&amp; file(current_expression) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(current_expression) &lt;&amp;
              <span class="stri">"): Forward defined function called."</span>);
      writeln(<span class="stri">"*** "</span> &lt;&amp; file(function) &lt;&amp; <span class="stri">"("</span> &lt;&amp; line(function) &lt;&amp;
              <span class="stri">"): Forward definition of the called function."</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkRangeFromZero (<span class="op">in</span> <span class="type">string</span>: number_name, <span class="op">in</span> <span class="type">string</span>: beyond,
    <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.TWOS_COMPLEMENT_INTTYPE <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"(uintType)"</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">">=(uintType)"</span>;
      c_expr.expr &amp;:= beyond;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">"&lt;0||"</span>;
      c_expr.expr &amp;:= number_name;
      c_expr.expr &amp;:= <span class="stri">">="</span>;
      c_expr.expr &amp;:= beyond;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
