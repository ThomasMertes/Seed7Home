<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  config.s7i    Configuration values for s7c.                     *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">var</span> <span class="type">string</span>:  trace_output            <span class="keywd">is</span> <span class="stri">"stderr"</span>;
<span class="keywd">var</span> <span class="type">boolean</span>: flush_trace_output      <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: trace_exception         <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: trace_function          <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: trace_dynamic_calls     <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: trace_signal            <span class="keywd">is</span> FALSE;

<span class="keywd">var</span> <span class="type">integer</span>: warning_level           <span class="keywd">is</span> 1;
<span class="keywd">var</span> <span class="type">integer</span>: stack_size              <span class="keywd">is</span> 0;

<span class="keywd">var</span> <span class="type">boolean</span>: for_loop_variable_check <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: source_debug_info       <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: profile_function        <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: signal_exception        <span class="keywd">is</span> FALSE;

<span class="keywd">var</span> <span class="type">integer</span>: evaluate_const_expr     <span class="keywd">is</span> 1;
<span class="keywd">var</span> <span class="type">boolean</span>: inlineFunctions         <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: structFreelist          <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: modDividendOptimization <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: reduceOverflowChecks    <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: optimizeComparisons     <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: declare_with_extern_c   <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: generate_c_plus_plus    <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: do_name_mangling        <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: do_type_name_mangling   <span class="keywd">is</span> FALSE;

<span class="keywd">var</span> <span class="type">boolean</span>: enable_link_time_optimization  <span class="keywd">is</span> FALSE;

<span class="comment"># Checks related to OVERFLOW_ERROR:</span>

<span class="keywd">var</span> <span class="type">boolean</span>: integer_overflow_check  <span class="keywd">is</span> TRUE;

<span class="keywd">var</span> <span class="type">boolean</span>: check_int_arithmetic_overflow <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: check_int_division_overflow   <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: check_int_abs_overflow        <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: check_int_shift_overflow      <span class="keywd">is</span> FALSE;

<span class="comment"># Checks related to RANGE_ERROR:</span>

<span class="keywd">var</span> <span class="type">boolean</span>: function_range_check    <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: conversion_range_check  <span class="keywd">is</span> TRUE;

<span class="comment"># Checks ralated to INDEX_ERROR:</span>

<span class="keywd">var</span> <span class="type">boolean</span>: string_index_check      <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: bstring_index_check     <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: array_index_check       <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: ref_list_index_check    <span class="keywd">is</span> TRUE;

<span class="comment"># Checks related to NUMERIC_ERROR:</span>

<span class="keywd">var</span> <span class="type">boolean</span>: integer_power_check     <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: bigint_power_check      <span class="keywd">is</span> TRUE;
<span class="keywd">var</span> <span class="type">boolean</span>: integer_division_check  <span class="keywd">is</span> TRUE;

<span class="keywd">var</span> <span class="type">boolean</span>: check_int_div_by_zero      <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: check_int_div_zero_by_zero <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: check_int_rem_by_zero      <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: check_int_rem_zero_by_zero <span class="keywd">is</span> FALSE;


<span class="keywd">const</span> <span class="type">proc</span>: setOptimizationSettings (<span class="op">in</span> <span class="type">integer</span>: evaluate_const_expr) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    inlineFunctions         := evaluate_const_expr >= 3;
    structFreelist          := evaluate_const_expr >= 3;
    modDividendOptimization := evaluate_const_expr >= 3;
    reduceOverflowChecks    := evaluate_const_expr >= 3;
    optimizeComparisons     := evaluate_const_expr >= 3;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setIntegerOverflowCheck (<span class="op">in</span> <span class="type">boolean</span>: check) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> check <span class="keywd">then</span>
      check_int_arithmetic_overflow := ccConf.OVERFLOW_SIGNAL = <span class="stri">""</span>;
      check_int_division_overflow   := ccConf.TWOS_COMPLEMENT_INTTYPE;
      check_int_abs_overflow        := ccConf.TWOS_COMPLEMENT_INTTYPE;
      check_int_shift_overflow      := TRUE;
    <span class="keywd">else</span>
      check_int_arithmetic_overflow := FALSE;
      <span class="comment"># Avoid an endless loop triggered by a division overflow.</span>
      check_int_division_overflow   := ccConf.INT_DIV_OVERFLOW = 0 <span class="op">or</span>
                                       ccConf.INT_REM_OVERFLOW = 0;
      check_int_abs_overflow        := FALSE;
      check_int_shift_overflow      := FALSE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setIntegerDivisionCheck (<span class="op">in</span> <span class="type">boolean</span>: check) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> check <span class="keywd">then</span>
      check_int_div_by_zero      := ccConf.CHECK_INT_DIV_BY_ZERO;
      check_int_div_zero_by_zero := ccConf.CHECK_INT_DIV_ZERO_BY_ZERO;
      check_int_rem_by_zero      := ccConf.CHECK_INT_REM_BY_ZERO;
      check_int_rem_zero_by_zero := ccConf.CHECK_INT_REM_ZERO_BY_ZERO;
    <span class="keywd">else</span>
      check_int_div_by_zero      := FALSE;
      check_int_div_zero_by_zero := FALSE;
      check_int_rem_by_zero      := FALSE;
      check_int_rem_zero_by_zero := FALSE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
