<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  debug.s7i     Functions to add debug info for s7c.              *)</span>
<span class="comment">(*  Copyright (C) 1990 - 1994, 2004 - 2014  Thomas Mertes           *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 compiler.                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: isByteString (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isByteString <span class="keywd">is</span> TRUE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> stri <span class="keywd">do</span>
      <span class="keywd">if</span> ord(ch) > 255 <span class="keywd">then</span>
        isByteString := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: sourceNameString (<span class="op">in</span> <span class="type">string</span>: sourceName) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> ccConf.CC_SOURCE_UTF8 <span class="op">or</span> <span class="op">not</span> isByteString(sourceName) <span class="keywd">then</span>
      stri := c_literal(striToUtf8(toOsPath(sourceName)));
    <span class="keywd">else</span>
      stri := c_literal(toOsPath(sourceName));
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: noDiagnosticLine <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> source_debug_info <span class="keywd">then</span>
      diagnosticLine &amp;:= <span class="stri">"#line 1 \"no_file\"\n"</span>;
    <span class="keywd">else</span>
      diagnosticLine &amp;:= <span class="stri">"/* line 1 \"no_file\" */\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: diagnosticLine (<span class="op">in</span> <span class="type">reference</span>: current_object) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> source_debug_info <span class="op">and</span> line(current_object) &lt;> 0 <span class="keywd">then</span>
      diagnosticLine := <span class="stri">"#line "</span>;
      diagnosticLine &amp;:= str(line(current_object));
      diagnosticLine &amp;:= <span class="stri">" "</span>;
      diagnosticLine &amp;:= sourceNameString(file(current_object));
      diagnosticLine &amp;:= <span class="stri">"\n"</span>;
    <span class="keywd">else</span>
      diagnosticLine := <span class="stri">"/* line "</span>;
      diagnosticLine &amp;:= str(line(current_object));
      diagnosticLine &amp;:= <span class="stri">" "</span>;
      diagnosticLine &amp;:= sourceNameString(file(current_object));
      diagnosticLine &amp;:= <span class="stri">" */\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: diagnosticLine (<span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: diagnosticLine <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> source_debug_info <span class="op">and</span> c_expr.currentLine &lt;> 0 <span class="keywd">then</span>
      diagnosticLine := <span class="stri">"#line "</span>;
      diagnosticLine &amp;:= str(c_expr.currentLine);
      diagnosticLine &amp;:= <span class="stri">" "</span>;
      diagnosticLine &amp;:= sourceNameString(c_expr.currentFile);
      diagnosticLine &amp;:= <span class="stri">"\n"</span>;
    <span class="keywd">else</span>
      diagnosticLine := <span class="stri">"/* line "</span>;
      diagnosticLine &amp;:= str(c_expr.currentLine);
      diagnosticLine &amp;:= <span class="stri">" "</span>;
      diagnosticLine &amp;:= sourceNameString(c_expr.currentFile);
      diagnosticLine &amp;:= <span class="stri">" */\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: setDiagnosticLine (<span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">begin</span>
    <span class="keywd">if</span> source_debug_info <span class="op">and</span> c_expr.currentLine &lt;> 0 <span class="keywd">then</span>
      c_expr.expr &amp;:= <span class="stri">"#line "</span>;
      c_expr.expr &amp;:= str(c_expr.currentLine);
      c_expr.expr &amp;:= <span class="stri">" "</span>;
      c_expr.expr &amp;:= sourceNameString(c_expr.currentFile);
      c_expr.expr &amp;:= <span class="stri">"\n"</span>;
    <span class="keywd">else</span>
      c_expr.expr &amp;:= <span class="stri">"/* line "</span>;
      c_expr.expr &amp;:= str(c_expr.currentLine);
      c_expr.expr &amp;:= <span class="stri">" "</span>;
      c_expr.expr &amp;:= sourceNameString(c_expr.currentFile);
      c_expr.expr &amp;:= <span class="stri">" */\n"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: appendWithDiagnostic (<span class="op">in</span> <span class="type">string</span>: decls, <span class="keywd">inout</span> <span class="type">expr_type</span>: c_expr) <span class="keywd">is</span> <span class="keywd">func</span>

  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: line <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: hasLineDirective <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> split(decls, <span class="stri">'\n'</span>) <span class="keywd">do</span>
      <span class="keywd">if</span> hasLineDirective <span class="keywd">then</span>
        c_expr.expr &amp;:= line;
        c_expr.expr &amp;:= <span class="stri">"\n"</span>;
        hasLineDirective := FALSE;
      <span class="keywd">elsif</span> startsWith(line, <span class="stri">"#line "</span>) <span class="op">or</span> startsWith(line, <span class="stri">"/* line "</span>) <span class="keywd">then</span>
        c_expr.expr &amp;:= line;
        c_expr.expr &amp;:= <span class="stri">"\n"</span>;
        hasLineDirective := TRUE;
      <span class="keywd">elsif</span> line &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        setDiagnosticLine(c_expr);
        c_expr.expr &amp;:= line;
        c_expr.expr &amp;:= <span class="stri">"\n"</span>;
        hasLineDirective := FALSE;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
