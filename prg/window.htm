<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  window.s7i    Filter file for text windows with random access   *)</span>
<span class="comment">(*  Copyright (C) 1992, 1993, 1994, 2005  Thomas Mertes             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/null_file.htm">null_file.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/text.htm">text.s7i</a>"</span>;


<span class="comment">(**
 *  [[text|Text]] implementation type providing a rectangular area of text.
 *  A ''window_file'' is based on an underlying text file. It provides
 *  access to an rectangular area of the underlying text file.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: window_file <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">text</span>: out_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: upper_border <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: left_border <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: height <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: width <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: curr_line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: curr_column <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


type_implements_interface(window_file, text);


<span class="comment">(**
 *  Creates a ''window_file'' at (left, upper) in ''outText''.
 *  The ''window_file'' has the given ''height'' and ''width''.
 *  @return the file opened.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openWindow (<span class="keywd">ref</span> <span class="type">text</span>: outText,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: height, <span class="op">in</span> <span class="type">integer</span>: width) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">window_file</span>: window_fil <span class="keywd">is</span> window_file.value;
  <span class="keywd">begin</span>
    window_fil.out_file := outText;
    window_fil.upper_border := upper;
    window_fil.left_border := left;
    <span class="keywd">if</span> height(outText) = 0 <span class="op">or</span> upper + height - 1 &lt;= height(outText) <span class="keywd">then</span>
      window_fil.height := height;
    <span class="keywd">else</span>
      window_fil.height := height(outText) - upper + 1;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> width(outText) = 0 <span class="op">or</span> left + width - 1 &lt;= width(outText) <span class="keywd">then</span>
      window_fil.width := width;
    <span class="keywd">else</span>
      window_fil.width := width(outText) - left + 1;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    window_fil.curr_line := 1;
    window_fil.curr_column := 1;
    newFile := toInterface(window_fil);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Get the height of 'outText'.
 *  @return the height of 'outText'.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: height (<span class="op">in</span> <span class="type">window_file</span>: outText) <span class="keywd">is</span>
  <span class="keywd">return</span> outText.height;


<span class="comment">(**
 *  Get the width of 'outText'.
 *  @return the width of 'outText'.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: width (<span class="op">in</span> <span class="type">window_file</span>: outText) <span class="keywd">is</span>
  <span class="keywd">return</span> outText.width;


<span class="comment">(**
 *  Get the current line of ''outText''.
 *  @return the current line of ''outText''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: line (<span class="op">in</span> <span class="type">window_file</span>: outText) <span class="keywd">is</span>
  <span class="keywd">return</span> outText.curr_line;


<span class="comment">(**
 *  Get the current column of ''outText''.
 *  @return the current column of ''outText''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: column (<span class="op">in</span> <span class="type">window_file</span>: outText) <span class="keywd">is</span>
  <span class="keywd">return</span> outText.curr_column;


<span class="comment">(**
 *  Forces that all buffered data of ''aFile'' is sent to its destination.
 *  This causes data to be sent to the underlying ''text'' file.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_line >= 1 <span class="op">and</span>
        window_fil.curr_line &lt;= window_fil.height <span class="op">and</span>
        window_fil.curr_column >= 1 <span class="op">and</span>
        window_fil.curr_column &lt;= window_fil.width <span class="keywd">then</span>
      setPos(window_fil.out_file,
          pred(window_fil.upper_border + window_fil.curr_line),
          pred(window_fil.left_border + window_fil.curr_column));
    <span class="keywd">end</span> <span class="keywd">if</span>;
    flush(window_fil.out_file);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: box (<span class="keywd">ref</span> <span class="type">window_file</span>: window_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">text</span>: outf <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: start_line <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: start_col <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    outf := window_fil.out_file;
    start_col := window_fil.left_border;
    start_line := window_fil.upper_border;
    <span class="keywd">if</span> window_fil.left_border > 1 <span class="keywd">then</span>
      decr(start_col);
      <span class="keywd">for</span> line <span class="keywd">range</span> start_line <span class="keywd">to</span>
          start_line + window_fil.height - 1 <span class="keywd">do</span>
        setPos(outf, line, start_col);
        write(outf, <span class="stri">"|"</span>);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> window_fil.left_border + window_fil.width - 1 &lt; width(window_fil.out_file) <span class="keywd">then</span>
      <span class="keywd">for</span> line <span class="keywd">range</span> start_line <span class="keywd">to</span>
          start_line + window_fil.height - 1 <span class="keywd">do</span>
        setPos(outf,
            line, window_fil.left_border + window_fil.width);
        write(outf, <span class="stri">"|"</span>);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    stri := <span class="stri">"+"</span> &amp; <span class="stri">"-"</span> <span class="op">mult</span> window_fil.width &amp; <span class="stri">"+"</span>;
    <span class="keywd">if</span> start_line > 1 <span class="keywd">then</span>
      setPos(outf, start_line - 1, start_col);
      write(outf, stri);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> start_line + window_fil.height - 1 &lt; height(window_fil.out_file) <span class="keywd">then</span>
      setPos(outf, start_line + window_fil.height, start_col);
      write(outf, stri);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: clear_box (<span class="keywd">ref</span> <span class="type">window_file</span>: window_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">text</span>: outf <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: start_line <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: start_col <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    outf := window_fil.out_file;
    start_col := window_fil.left_border;
    start_line := window_fil.upper_border;
    stri := <span class="stri">""</span>;
    <span class="keywd">if</span> window_fil.left_border > 1 <span class="keywd">then</span>
      decr(start_col);
      stri := <span class="stri">" "</span>;
      <span class="keywd">for</span> line <span class="keywd">range</span> start_line <span class="keywd">to</span>
          start_line + window_fil.height - 1 <span class="keywd">do</span>
        setPos(outf, line, start_col);
        write(outf, <span class="stri">" "</span>);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    stri &amp;:= <span class="stri">" "</span> <span class="op">mult</span> window_fil.width;
    <span class="keywd">if</span> window_fil.left_border + window_fil.width - 1 &lt; width(window_fil.out_file) <span class="keywd">then</span>
      stri &amp;:= <span class="stri">" "</span>;
      <span class="keywd">for</span> line <span class="keywd">range</span> start_line <span class="keywd">to</span>
          start_line + window_fil.height - 1 <span class="keywd">do</span>
        setPos(outf,
            line, window_fil.left_border + window_fil.width);
        write(outf, <span class="stri">" "</span>);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> start_line > 1 <span class="keywd">then</span>
      setPos(outf, start_line - 1, start_col);
      write(outf, stri);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> start_line + window_fil.height - 1 &lt; height(window_fil.out_file) <span class="keywd">then</span>
      setPos(outf, start_line + window_fil.height, start_col);
      write(outf, stri);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Clear an area of ''window_fil'' with space characters.
 *  The area is specified in (line, column) coordinates and is
 *  between the (''upper'', ''left'') and (''lower'', ''right'').
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    clear(window_fil.out_file,
        pred(window_fil.upper_border + upper),
        pred(window_fil.left_border + left),
        pred(window_fil.upper_border + lower),
        pred(window_fil.left_border + right));
    window_fil.curr_line := upper;
    window_fil.curr_column := left;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Clear the area of ''window_fil'' with space characters.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: clear (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    clear(window_fil.out_file, window_fil.upper_border,
        window_fil.left_border,
        pred(window_fil.upper_border + window_fil.height),
        pred(window_fil.left_border + window_fil.width));
    window_fil.curr_line := 1;
    window_fil.curr_column := 1;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: v_scroll (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    v_scroll(window_fil.out_file, window_fil.upper_border,
        window_fil.left_border,
        window_fil.upper_border + window_fil.height - 1,
        window_fil.left_border + window_fil.width - 1, count);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: v_scroll (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    v_scroll(window_fil.out_file,
        pred(window_fil.upper_border + upper),
        pred(window_fil.left_border + left),
        pred(window_fil.upper_border + lower),
        pred(window_fil.left_border + right),
        count);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: h_scroll (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    h_scroll(window_fil.out_file, window_fil.upper_border,
        window_fil.left_border,
        window_fil.upper_border + window_fil.height - 1,
        window_fil.left_border + window_fil.width - 1, count);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: h_scroll (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil,
    <span class="op">in</span> <span class="type">integer</span>: upper, <span class="op">in</span> <span class="type">integer</span>: left, <span class="op">in</span> <span class="type">integer</span>: lower, <span class="op">in</span> <span class="type">integer</span>: right, <span class="op">in</span> <span class="type">integer</span>: count) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    h_scroll(window_fil.out_file,
        pred(window_fil.upper_border + upper),
        pred(window_fil.left_border + left),
        pred(window_fil.upper_border + lower),
        pred(window_fil.left_border + right),
        count);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">color</span>: col) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    color(window_fil.out_file, col);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: color (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">color</span>: col1, <span class="op">in</span> <span class="type">color</span>: col2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    color(window_fil.out_file, col1, col2);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the current position of ''window_fil'' to ''line'' and ''column''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setPos (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    window_fil.curr_line := line;
    window_fil.curr_column := column;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the ''line'' of the current position of ''window_fil''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setLine (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">integer</span>: line) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    window_fil.curr_line := line;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Set the ''column'' of the current position of ''window_fil''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: setColumn (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    window_fil.curr_column := column;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string to the current position of ''window_fil''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_line >= 1 <span class="op">and</span>
        window_fil.curr_line &lt;= window_fil.height <span class="op">and</span>
        window_fil.curr_column &lt;= window_fil.width <span class="keywd">then</span>
      <span class="keywd">if</span> window_fil.curr_column >= 1 <span class="keywd">then</span>
        setPos(window_fil.out_file,
            pred(window_fil.upper_border + window_fil.curr_line),
            pred(window_fil.left_border + window_fil.curr_column));
        write(window_fil.out_file,
            stri[.. succ(window_fil.width - window_fil.curr_column)]);
      <span class="keywd">elsif</span> length(stri) >= 2 - window_fil.curr_column <span class="keywd">then</span>
        setPos(window_fil.out_file,
            pred(window_fil.upper_border + window_fil.curr_line),
            window_fil.left_border);
        write(window_fil.out_file,
            stri[2 - window_fil.curr_column ..
            succ(window_fil.width - window_fil.curr_column)]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    window_fil.curr_column +:= length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write end-of-line to a ''window_fil''.
 *  Set the current position to the beginning of the next line.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: writeln (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_line = window_fil.height <span class="keywd">then</span>
      v_scroll(window_fil.out_file, window_fil.upper_border,
          window_fil.left_border,
          window_fil.upper_border + window_fil.height - 1,
          window_fil.left_border + window_fil.width - 1, 1);
    <span class="keywd">else</span>
      incr(window_fil.curr_line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    window_fil.curr_column := 1;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveLeft (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    window_fil.curr_column -:= length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: erase (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_line >= 1 <span class="op">and</span>
        window_fil.curr_line &lt;= window_fil.height <span class="op">and</span>
        window_fil.curr_column &lt;= window_fil.width <span class="keywd">then</span>
      <span class="keywd">if</span> window_fil.curr_column >= 1 <span class="keywd">then</span>
        setPos(window_fil.out_file,
            pred(window_fil.upper_border + window_fil.curr_line),
            pred(window_fil.left_border + window_fil.curr_column));
        erase(window_fil.out_file,
            stri[.. succ(window_fil.width - window_fil.curr_column)]);
      <span class="keywd">elsif</span> length(stri) >= 2 - window_fil.curr_column <span class="keywd">then</span>
        setPos(window_fil.out_file,
            pred(window_fil.upper_border + window_fil.curr_line),
            window_fil.left_border);
        erase(window_fil.out_file,
            stri[2 - window_fil.curr_column ..
            succ(window_fil.width - window_fil.curr_column)]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    window_fil.curr_column +:= length(stri);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: backSpace (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_column > 1 <span class="keywd">then</span>
      decr(window_fil.curr_column);
      <span class="keywd">if</span> window_fil.curr_column &lt;= window_fil.width <span class="keywd">then</span>
        setPos(window_fil.out_file,
            window_fil.upper_border + window_fil.curr_line - 1,
            window_fil.left_border + window_fil.curr_column - 1);
        write(window_fil.out_file, <span class="stri">" "</span>);
        setPos(window_fil.out_file,
            window_fil.upper_border + window_fil.curr_line - 1,
            window_fil.left_border + window_fil.curr_column - 1);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cursorOn (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">char</span>: cursorChar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_line >= 1 <span class="op">and</span>
        window_fil.curr_line &lt;= window_fil.height <span class="op">and</span>
        window_fil.curr_column >= 1 <span class="op">and</span>
        window_fil.curr_column &lt;= window_fil.width <span class="keywd">then</span>
      setPos(window_fil.out_file,
          window_fil.upper_border + window_fil.curr_line - 1,
          window_fil.left_border + window_fil.curr_column - 1);
      cursorOn(window_fil.out_file, cursorChar);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: cursorOff (<span class="keywd">inout</span> <span class="type">window_file</span>: window_fil, <span class="op">in</span> <span class="type">char</span>: cursorChar) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> window_fil.curr_line >= 1 <span class="op">and</span>
        window_fil.curr_line &lt;= window_fil.height <span class="op">and</span>
        window_fil.curr_column >= 1 <span class="op">and</span>
        window_fil.curr_column &lt;= window_fil.width <span class="keywd">then</span>
      setPos(window_fil.out_file,
          window_fil.upper_border + window_fil.curr_line - 1,
          window_fil.left_border + window_fil.curr_column - 1);
      cursorOff(window_fil.out_file, cursorChar);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
