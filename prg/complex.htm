<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  complex.s7i   Complex support library                           *)</span>
<span class="comment">(*  Copyright (C) 2007, 2008  Thomas Mertes                         *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/enable_io.htm">enable_io.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/float.htm">float.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/math.htm">math.s7i</a>"</span>;


<span class="comment">(**
 *  Complex numbers represented with [[float]] real part and imaginary part.
 *  Complex literals do not exist.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: complex <span class="keywd">is</span> new object <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">float</span>: re <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: im <span class="keywd">is</span> 0.0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Create a complex number from its real and imaginary part.
 *  @return the created complex number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: complex (<span class="op">in</span> <span class="type">float</span>: re, <span class="op">in</span> <span class="type">float</span>: im) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    aComplex.re := re;
    aComplex.im := im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a complex number from its real part.
 *  @return the created complex number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: complex (<span class="op">in</span> <span class="type">float</span>: re) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    aComplex.re := re;
    aComplex.im := 0.0;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Create a complex number from polar coordinates.
 *  @return the created complex number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: polar (<span class="op">in</span> <span class="type">float</span>: magnitude, <span class="op">in</span> <span class="type">float</span>: angle) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    aComplex.re := magnitude * cos(angle);
    aComplex.im := magnitude * sin(angle);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert an [[integer]] to a complex.
 *  @return the result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: complex (<span class="op">in</span> <span class="type">integer</span>: re) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    aComplex.re := flt(re);
    aComplex.im := 0.0;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert an [[integer]] to a complex.
 *  @return the result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (attr complex) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: re) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    aComplex.re := flt(re);
    aComplex.im := 0.0;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Conversion a [[float]] to a complex.
 *  @return the result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (attr complex) <span class="op">conv</span> (<span class="op">in</span> <span class="type">float</span>: re) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    aComplex.re := re;
    aComplex.im := 0.0;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Check if two complex numbers are equal.
 *  @return TRUE if both numbers are equal, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="keywd">ref</span> <span class="type">complex</span>: number1) = (<span class="keywd">ref</span> <span class="type">complex</span>: number2) <span class="keywd">is</span>
  <span class="keywd">return</span> number1.re = number2.re <span class="op">and</span> number1.im = number2.im;


<span class="comment">(**
 *  Check if two complex numbers are not equal.
 *  @return FALSE if both numbers are equal, TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="keywd">ref</span> <span class="type">complex</span>: number1) &lt;> (<span class="keywd">ref</span> <span class="type">complex</span>: number2) <span class="keywd">is</span>
  <span class="keywd">return</span> number1.re &lt;> number2.re <span class="op">or</span> number1.im &lt;> number2.im;


<span class="comment">(**
 *  Plus sign for complex numbers.
 *  @return its operand unchanged.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: + (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span>
  <span class="keywd">return</span> number;


<span class="comment">(**
 *  Minus sign, negate a complex number.
 *  @return the negated value of the number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: - (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: negatedNumber <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    negatedNumber.re := -number.re;
    negatedNumber.im := -number.im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the conjugated value of a complex number.
 *  @return the complex conjugate of the number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: conj (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: conjugate <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    conjugate.re := number.re;
    conjugate.im := -number.im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Add two complex numbers.
 *  @return the sum of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (<span class="op">in</span> <span class="type">complex</span>: summand1) + (<span class="op">in</span> <span class="type">complex</span>: summand2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: sum <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    sum.re := summand1.re + summand2.re;
    sum.im := summand1.im + summand2.im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the subtraction of two complex numbers.
 *  @return the difference of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (<span class="op">in</span> <span class="type">complex</span>: minuend) - (<span class="op">in</span> <span class="type">complex</span>: subtrahend) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: difference <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    difference.re := minuend.re - subtrahend.re;
    difference.im := minuend.im - subtrahend.im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Multiply two complex numbers.
 *  @return the product of the two numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (<span class="op">in</span> <span class="type">complex</span>: factor1) * (<span class="op">in</span> <span class="type">complex</span>: factor2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: product <span class="keywd">is</span> complex.value;
  <span class="keywd">begin</span>
    product.re := factor1.re * factor2.re - factor1.im * factor2.im;
    product.im := factor1.re * factor2.im + factor1.im * factor2.re;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Copmpute the division of two complex numbers.
 *  @return the quotient of the division.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (<span class="op">in</span> <span class="type">complex</span>: dividend) / (<span class="op">in</span> <span class="type">complex</span>: divisor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: quotient <span class="keywd">is</span> complex.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">float</span>: common_divisor <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    common_divisor := divisor.re * divisor.re + divisor.im * divisor.im;
    quotient.re := (dividend.re * divisor.re + dividend.im * divisor.im) / common_divisor;
    quotient.im := (dividend.im * divisor.re - dividend.re * divisor.im) / common_divisor;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Increment a complex number by a delta.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">complex</span>: number) +:= (<span class="op">in</span> <span class="type">complex</span>: delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    number.re +:= delta.re;
    number.im +:= delta.im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decrement a complex number by a delta.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">complex</span>: number) -:= (<span class="op">in</span> <span class="type">complex</span>: delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    number.re -:= delta.re;
    number.im -:= delta.im;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Multiply a complex number by a factor and assign the result back to number.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">complex</span>: number) *:= (<span class="op">in</span> <span class="type">complex</span>: factor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">float</span>: real_part <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    real_part := number.re * factor.re - number.im * factor.im;
    number.im := number.re * factor.im + number.im * factor.re;
    number.re := real_part;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Divide a complex number by a divisor and assign the result back to number.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">complex</span>: number) /:= (<span class="op">in</span> <span class="type">complex</span>: divisor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">float</span>: common_divisor <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: real_part <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    common_divisor := divisor.re * divisor.re + divisor.im * divisor.im;
    real_part := (number.re * divisor.re + number.im * divisor.im) / common_divisor;
    number.im := (number.im * divisor.re - number.re * divisor.im) / common_divisor;
    number.re := real_part;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the absolute value of a complex number.
 *  @return the absolute value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: abs (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span>
  <span class="keywd">return</span> sqrt(number.re ** 2 + number.im ** 2);


<span class="comment">(**
 *  Compute the square of the absolute value of a complex number.
 *  @return the square of the absolute value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: sqrAbs (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span>
  <span class="keywd">return</span> number.re ** 2 + number.im ** 2;


<span class="comment">(**
 *  Compute the argument of a complex number.
 *  This is the angle of the polar form of the complex number.
 *  @return the argument of the complex number.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">float</span>: arg (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span>
  <span class="keywd">return</span> atan2(number.im, number.re);


<span class="comment">(**
 *  Compute the exponentiation of a complex base with an [[integer]] exponent.
 *  @return the result of the exponentiation.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (<span class="op">in</span> <span class="type">complex</span>: base) ** (<span class="op">in</span> <span class="type">integer</span>: exponent) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: power <span class="keywd">is</span> complex.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">float</span>: r <span class="keywd">is</span> 0.0;
    <span class="keywd">var</span> <span class="type">float</span>: phi <span class="keywd">is</span> 0.0;
  <span class="keywd">begin</span>
    r := abs(base) ** exponent;
    phi := arg(base) * flt(exponent);
    power.re := r * cos(phi);
    power.im := r * sin(phi);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compare two complex numbers in lexicographic order.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">complex</span>: number1, <span class="op">in</span> <span class="type">complex</span>: number2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: signumValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    signumValue := compare(number1.re, number2.re);
    <span class="keywd">if</span> signumValue = 0 <span class="keywd">then</span>
      signumValue := compare(number1.im, number2.im);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the hash value of a complex number.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">complex</span>: num) <span class="keywd">is</span>
  <span class="keywd">return</span> hashCode(num.re) <span class="op">mod</span> 16#40000000 + hashCode(num.im) <span class="op">mod</span> 16#40000000;


<span class="comment">(**
 *  Convert a complex number to a [[string]].
 *  The number is converted to a string with real and imaginary
 *  part (e.g.: "1.5-2.8i"). Real and imaginary part are separated
 *  with a + or - sign.
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">complex</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := str(number.im) &lt;&amp; <span class="stri">"i"</span>;
    <span class="keywd">if</span> stri[1] = <span class="stri">'-'</span> <span class="keywd">then</span>
      stri := str(number.re) &amp;       stri;
    <span class="keywd">else</span>
      stri := str(number.re) &amp; <span class="stri">"+"</span> &amp; stri;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a [[string]] to a complex number.
 *  The string must contain real and imaginary part (e.g.: "1.5-2.8i").
 *  Real and imaginary part must be separated with a + or - sign.
 *  @return the complex result of the conversion.
 *  @exception RANGE_ERROR If stri contains not a valid complex value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: complex (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">complex</span>: aComplex <span class="keywd">is</span> complex.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: pos2 <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    pos := rpos(stri, <span class="stri">'+'</span>);
    pos2 := rpos(stri, <span class="stri">'-'</span>);
    <span class="keywd">if</span> pos2 > pos <span class="keywd">then</span>
      pos := pos2;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> pos &lt;> 0 <span class="op">and</span> stri[length(stri)] = <span class="stri">'i'</span> <span class="keywd">then</span>
      aComplex.re := float(stri[.. pred(pos)]);
      aComplex.im := float(stri[pos .. pred(length(stri))]);
    <span class="keywd">else</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a [[string]] to a complex number.
 *  The string must contain real and imaginary part (e.g.: "1.5-2.8i").
 *  Real and imaginary part must be separated with a + or - sign.
 *  @return the complex result of the conversion.
 *  @exception RANGE_ERROR If stri contains not a valid complex value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">complex</span>: (attr complex) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> complex(stri);


<span class="comment">(**
 *  Convert a complex to a [[string]] in decimal fixed point notation.
 *  The number is converted to a string with real and imaginary
 *  part (e.g.: "1.5-2.8i"). Real and imaginary part are separated
 *  with a + or - sign. The ''precision'' parameter specifies the number
 *  of digits after the decimal point of the real and imaginary part.
 *  If the ''precision'' is zero the decimal point is omitted.
 *   complex(3.1415) digits 2   returns "3.14+0.00i"
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If the ''precision'' is negative.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">complex</span>: number) <span class="op">digits</span> (<span class="op">in</span> <span class="type">integer</span>: precision) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := number.im <span class="op">digits</span> precision &lt;&amp; <span class="stri">"i"</span>;
    <span class="keywd">if</span> stri[1] = <span class="stri">'-'</span> <span class="keywd">then</span>
      stri := number.re <span class="op">digits</span> precision &lt;&amp;        stri;
    <span class="keywd">else</span>
      stri := number.re <span class="op">digits</span> precision &lt;&amp; <span class="stri">"+"</span> &lt;&amp; stri;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a complex to a [[string]] in scientific notation.
 *  The number is converted to a string with real and imaginary
 *  part (e.g.: "1.5e+2-2.8e+0i"). Real and imaginary part are separated
 *  with a + or - sign. The ''precision'' parameter specifies the number
 *  of digits after the decimal point of the real and imaginary part.
 *  If the ''precision'' is zero the decimal point is omitted.
 *   complex(31415.9, 27182.8) sci 4   returns "3.1416e+4+2.7183e+4i"
 *  @return the string result of the conversion.
 *  @exception RANGE_ERROR If the ''precision'' is negative.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: (<span class="op">in</span> <span class="type">complex</span>: number) <span class="op">sci</span> (<span class="op">in</span> <span class="type">integer</span>: precision) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    stri := number.im <span class="op">sci</span> precision &lt;&amp; <span class="stri">"i"</span>;
    <span class="keywd">if</span> stri[1] = <span class="stri">'-'</span> <span class="keywd">then</span>
      stri := number.re <span class="op">sci</span> precision &lt;&amp;        stri;
    <span class="keywd">else</span>
      stri := number.re <span class="op">sci</span> precision &lt;&amp; <span class="stri">"+"</span> &lt;&amp; stri;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


enable_io(complex);
DECLARE_TERNARY(complex);
</pre>
</body>
</html>
