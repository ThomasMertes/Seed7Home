<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  eliza.sd7     The computer psychiatrist                         *)</span>
<span class="comment">(*  Copyright (C) 1965  Joseph Weizenbaum                           *)</span>
<span class="comment">(*                2004  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/stdio.htm">stdio.s7i</a>"</span>;

<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: keyword_table <span class="keywd">is</span> [](
    <span class="stri">"Can you"</span>, <span class="stri">"Can I"</span>, <span class="stri">"You are"</span>, <span class="stri">"You're"</span>, <span class="stri">"I don't"</span>, <span class="stri">"I feel"</span>,
    <span class="stri">"Why don't you"</span>, <span class="stri">"Why can't I"</span>, <span class="stri">"Are you"</span>, <span class="stri">"I can't"</span>, <span class="stri">"I am"</span>, <span class="stri">"I'm "</span>,
    <span class="stri">"You "</span>, <span class="stri">"I want"</span>, <span class="stri">"What"</span>, <span class="stri">"How"</span>, <span class="stri">"Who"</span>, <span class="stri">"Where"</span>, <span class="stri">"When"</span>, <span class="stri">"Why"</span>,
    <span class="stri">"Name"</span>, <span class="stri">"Cause"</span>, <span class="stri">"Sorry"</span>, <span class="stri">"Dream"</span>, <span class="stri">"Hello"</span>, <span class="stri">"Hi "</span>, <span class="stri">"Maybe"</span>,
    <span class="stri">"No"</span>, <span class="stri">"Your"</span>, <span class="stri">"Always"</span>, <span class="stri">"Think"</span>, <span class="stri">"Alike"</span>, <span class="stri">"Yes"</span>, <span class="stri">"Friend"</span>,
    <span class="stri">"Computer"</span>, <span class="stri">"no key found"</span>
  );

<span class="keywd">const</span> <span class="type">array</span> <span class="type">array</span> <span class="type">string</span>: replace_words <span class="keywd">is</span> [](
    [](<span class="stri">" are "</span>,  <span class="stri">" am "</span>),
    [](<span class="stri">" were "</span>, <span class="stri">" was "</span>),
    [](<span class="stri">" you "</span>,  <span class="stri">" I "</span>),
    [](<span class="stri">"your "</span>,  <span class="stri">"my "</span>),
    [](<span class="stri">" I've "</span>, <span class="stri">" you've "</span>),
    [](<span class="stri">" I'm "</span>,  <span class="stri">" you're "</span>),
    [](<span class="stri">" me "</span>,   <span class="stri">" !you "</span>)
  );

<span class="keywd">const</span> <span class="type">array</span> <span class="type">array</span> <span class="type">string</span>: example_sentence <span class="keywd">is</span> [](
    <span class="comment">(* "Can you" *)</span>
    []( <span class="stri">"Don't you believe that I can*"</span>,
        <span class="stri">"Perhaps you would like to be able to*"</span>,
        <span class="stri">"You want me to be able to*"</span> ),
    <span class="comment">(* "Can I" *)</span>
    []( <span class="stri">"Perhaps you don't want to*"</span>,
        <span class="stri">"Do you want to be able to*"</span> ),
    <span class="comment">(* "You are" / "You're" *)</span>
    []( <span class="stri">"What makes you think I am*"</span>,
        <span class="stri">"Does it please you to believe I am*"</span>,
        <span class="stri">"Perhaps you would like to be*"</span>,
        <span class="stri">"Do you sometimes wish you were*"</span> ),
    <span class="comment">(* "I don't" *)</span>
    []( <span class="stri">"Don't you really*"</span>,
        <span class="stri">"Why don't you*"</span>,
        <span class="stri">"Do you wish to be able to*"</span>,
        <span class="stri">"Does that trouble you?"</span> ),
    <span class="comment">(* "I feel" *)</span>
    []( <span class="stri">"Tell me more about such feelings"</span>,
        <span class="stri">"Do you often feel*"</span>,
        <span class="stri">"Do you enjoy feeling*"</span> ),
    <span class="comment">(* "Why don't you" *)</span>
    []( <span class="stri">"Do you really believe I don't*"</span>,
        <span class="stri">"Perhaps in good time I will*"</span>,
        <span class="stri">"Do you want me to*"</span> ),
    <span class="comment">(* "Why can't I" *)</span>
    []( <span class="stri">"Do you think you should be able to*"</span>,
        <span class="stri">"Why can't you*"</span> ),
    <span class="comment">(* "Are you" *)</span>
    []( <span class="stri">"Why are you interested in whether or not I am*"</span>,
        <span class="stri">"Would you prefer if I were not*"</span>,
        <span class="stri">"Perhaps in your fantasies I am*"</span> ),
    <span class="comment">(* "I can't" *)</span>
    []( <span class="stri">"How do you know you can't*"</span>,
        <span class="stri">"Have you tried?"</span>,
        <span class="stri">"Perhaps you can now*"</span> ),
    <span class="comment">(* "I am" / "I'm " *)</span>
    []( <span class="stri">"Did you come to me because you are*"</span>,
        <span class="stri">"How long have you been*"</span>,
        <span class="stri">"Do you believe it is normal to be*"</span>,
        <span class="stri">"Do you enjoy being*"</span> ),
    <span class="comment">(* "You " *)</span>
    []( <span class="stri">"We were discussing you, not me."</span>,
        <span class="stri">"Oh, I*"</span>,
        <span class="stri">"You're not really talking about me, are you?"</span> ),
    <span class="comment">(* "I want" *)</span>
    []( <span class="stri">"What would it mean to you if you got*"</span>,
        <span class="stri">"Why do you want*"</span>,
        <span class="stri">"Suppose you soon got*"</span>,
        <span class="stri">"What if you never got*"</span>,
        <span class="stri">"I sometimes also want*"</span> ),
    <span class="comment">(* "What" / "How" / "Who" / "Where" / "When" / "Why" *)</span>
    []( <span class="stri">"Why do you ask?"</span>,
        <span class="stri">"Does that question interest you?"</span>,
        <span class="stri">"What answer would please you the most?"</span>,
        <span class="stri">"What do you think?"</span>,
        <span class="stri">"Are such questions on your mind often?"</span>,
        <span class="stri">"What is it that you really want to know?"</span>,
        <span class="stri">"Have you asked anyone else?"</span>,
        <span class="stri">"Have you asked such questions before?"</span>,
        <span class="stri">"What else comes to mind when you ask that?"</span> ),
    <span class="comment">(* "Name" *)</span>
    []( <span class="stri">"Names don't interest me."</span>,
        <span class="stri">"I don't care about names... please go on."</span> ),
    <span class="comment">(* "Cause" *)</span>
    []( <span class="stri">"Is that the real reason?"</span>,
        <span class="stri">"Don't any other reasons come to mind?"</span>,
        <span class="stri">"Does that reason explain anything else?"</span>,
        <span class="stri">"What other reasons might there be?"</span> ),
    <span class="comment">(* "Sorry" *)</span>
    []( <span class="stri">"Please don't apologize!"</span>,
        <span class="stri">"Apologies are not necessary."</span>,
        <span class="stri">"What feelings do you have when you apologize?"</span>,
        <span class="stri">"Don't be so defensive!"</span> ),
    <span class="comment">(* "Dream" *)</span>
    []( <span class="stri">"What does that dream suggest to you?"</span>,
        <span class="stri">"Do you dream often?"</span>,
        <span class="stri">"What persons appear in your dreams?"</span>,
        <span class="stri">"Are you disturbed by your dreams?"</span> ),
    <span class="comment">(* "Hello" / "Hi " *)</span>
    []( <span class="stri">"How do you do. please state your problem."</span> ),
    <span class="comment">(* "Maybe" *)</span>
    []( <span class="stri">"You don't seem quite certain."</span>,
        <span class="stri">"Why the uncertain tone?"</span>,
        <span class="stri">"Can't you be more positive?"</span>,
        <span class="stri">"You aren't sure?"</span>,
        <span class="stri">"Don't you know?"</span> ),
    <span class="comment">(* "No" *)</span>
    []( <span class="stri">"Are you saying 'no' just to be negative?"</span>,
        <span class="stri">"You are being a bit negative."</span>,
        <span class="stri">"Why not?"</span>,
        <span class="stri">"Are you sure?"</span>,
        <span class="stri">"Why no?"</span> ),
    <span class="comment">(* "Your" *)</span>
    []( <span class="stri">"Why are you concerned about my*"</span>,
        <span class="stri">"What about your own*"</span> ),
    <span class="comment">(* "Always" *)</span>
    []( <span class="stri">"Can you think of an example?"</span>,
        <span class="stri">"When?"</span>,
        <span class="stri">"What are you thinking of?"</span>,
        <span class="stri">"Really,...always?"</span> ),
    <span class="comment">(* "Think" *)</span>
    []( <span class="stri">"Do you really think so?"</span>,
        <span class="stri">"But you are not sure you*"</span>,
        <span class="stri">"Do you doubt you*"</span> ),
    <span class="comment">(* "Alike" *)</span>
    []( <span class="stri">"In what way?"</span>,
        <span class="stri">"What similarity do you see?"</span>,
        <span class="stri">"What does the similarity suggest to you?"</span>,
        <span class="stri">"What other connections do you see?"</span>,
        <span class="stri">"Could there really be some connection?"</span>,
        <span class="stri">"How?"</span>,
        <span class="stri">"You seem quite positive."</span> ),
    <span class="comment">(* "Yes" *)</span>
    []( <span class="stri">"Are you sure?"</span>,
        <span class="stri">"Hmmm...I see."</span>,
        <span class="stri">"I understand."</span> ),
    <span class="comment">(* "Friend" *)</span>
    []( <span class="stri">"Do you have any friends?"</span>,
        <span class="stri">"Do your friends worry you?"</span>,
        <span class="stri">"Do they pick on you?"</span>,
        <span class="stri">"Are your friends a source of anxiety?"</span>,
        <span class="stri">"Do you impose your problems on your friends?"</span>,
        <span class="stri">"Perhaps your dependence on friends worries you."</span> ),
    <span class="comment">(* "Computer" *)</span>
    []( <span class="stri">"Do computers worry you?"</span>,
        <span class="stri">"Are you talking about me in particular?"</span>,
        <span class="stri">"Are you frightened by machines?"</span>,
        <span class="stri">"Why do you mention computers?"</span>,
        <span class="stri">"What do you think machines have to do with your problems?"</span>,
        <span class="stri">"Don't you think computers can help you?"</span>,
        <span class="stri">"What is it about machines that worries you?"</span> ),
    <span class="comment">(* "no key found" *)</span>
    []( <span class="stri">"Do you feel intense psychological stress?"</span>,
        <span class="stri">"What does that suggest to you?"</span>,
        <span class="stri">"I see."</span>,
        <span class="stri">"I'm not sure I understand you fully"</span>,
        <span class="stri">"Now, please clarify yourself."</span>,
        <span class="stri">"Can you elaborate on that?"</span>,
        <span class="stri">"That is quite interesting."</span> )
  );

<span class="keywd">const</span> <span class="type">array</span> <span class="type">integer</span>: keyword_assignment <span class="keywd">is</span> [](
     1,  2,  3,  3,  4,  5,  6,  7,  8,  9,
    10, 10, 11, 12, 13, 13, 13, 13, 13, 13,
    14, 15, 16, 17, 18, 18, 19, 20, 21, 22,
    23, 24, 25, 26, 27, 28
  );

<span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: current_sentence <span class="keywd">is</span> length(keyword_assignment) <span class="op">times</span> 1;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: position <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: user_input <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: last_input <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: keyword_stri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: keyword_found <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: keyword_num <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: keyword_pos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: replace1 <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: replace2 <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: replaced_stri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: sentence_num <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">string</span>: sentence <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> 25 <span class="keywd">do</span>
      writeln;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    writeln(<span class="stri">"ELIZA - The Computer Psychiatrist"</span>);
    writeln(<span class="stri">"Original ELIZA by Joseph Weizenbaum, MIT, 1965"</span>);
    writeln;
    writeln;
    writeln;
    writeln(<span class="stri">"Why have you requested this session?"</span>);
    <span class="keywd">repeat</span>
      <span class="keywd">repeat</span>
        write(<span class="stri">"? "</span>);
        readln(user_input);
        user_input := <span class="stri">" "</span> &amp; user_input &amp; <span class="stri">"  "</span>;
        <span class="comment">(* Lose extraneous input chars *)</span>
        user_input := replace(user_input, <span class="stri">"'"</span>, <span class="stri">""</span>);
        <span class="keywd">if</span> pos(user_input, <span class="stri">"shut"</span>) &lt;> 0 <span class="keywd">then</span>
          writeln(<span class="stri">"Good-bye!"</span>);
          exit(PROGRAM);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> user_input = last_input <span class="keywd">then</span>
          writeln(<span class="stri">"Please don't repeat yourself!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">until</span> user_input &lt;> last_input;
      <span class="comment">(* Get keywords *)</span>
      keyword_num := 0;
      <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(keyword_table) <span class="keywd">do</span>
        keyword_stri := keyword_table[number];
        <span class="keywd">if</span> keyword_num = 0 <span class="keywd">then</span>
          position := pos(upper(user_input), upper(keyword_stri));
          <span class="keywd">if</span> position &lt;> 0 <span class="keywd">then</span>
            keyword_num := number;
            keyword_pos := position;
            keyword_found := keyword_stri;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">if</span> keyword_num = 0 <span class="keywd">then</span>
        <span class="comment">(* No keywords *)</span>
        keyword_num := 36;
      <span class="keywd">else</span>
        replaced_stri := <span class="stri">" "</span> &amp; user_input[keyword_pos + length(keyword_found) ..] &amp; <span class="stri">" "</span>;
        <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(replace_words) <span class="keywd">do</span>
          replace1 := replace_words[number][1];
          replace2 := replace_words[number][2];
          <span class="keywd">for</span> position <span class="keywd">range</span> 1 <span class="keywd">to</span> length(replaced_stri) <span class="keywd">do</span>
            <span class="keywd">if</span> replaced_stri[position len length(replace1)] = replace1 <span class="keywd">then</span>
              replaced_stri := replaced_stri[.. pred(position)] &amp;
                  replace2 &amp; replaced_stri[position + length(replace1) ..];
              position +:= length(replace2);
            <span class="keywd">elsif</span> replaced_stri[position len length(replace2)] = replace2 <span class="keywd">then</span>
              replaced_stri := replaced_stri[.. pred(position)] &amp;
                  replace1 &amp; replaced_stri[position + length(replace2) ..];
              position +:= length(replace1);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;

        <span class="keywd">if</span> replaced_stri[2] = <span class="stri">' '</span> <span class="keywd">then</span>
          replaced_stri := replaced_stri[2 ..];
        <span class="keywd">end</span> <span class="keywd">if</span>;

        replaced_stri := replace(replaced_stri, <span class="stri">"!"</span>, <span class="stri">""</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      sentence_num := keyword_assignment[keyword_num];
      sentence := example_sentence[sentence_num][current_sentence[keyword_num]];
      incr(current_sentence[keyword_num]);
      <span class="keywd">if</span> current_sentence[keyword_num] > length(example_sentence[sentence_num]) <span class="keywd">then</span>
        current_sentence[keyword_num] := 1;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> sentence[length(sentence)] &lt;> <span class="stri">'*'</span> <span class="keywd">then</span>
        writeln(sentence);
      <span class="keywd">else</span>
        writeln(sentence[.. pred(length(sentence))] &lt;&amp; replaced_stri);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      last_input := user_input;
    <span class="keywd">until</span> FALSE;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
