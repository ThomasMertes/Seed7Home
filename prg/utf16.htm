<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  utf16.s7i     File implementation type for UTF-16 files         *)</span>
<span class="comment">(*  Copyright (C) 2009  Thomas Mertes                               *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/null_file.htm">null_file.s7i</a>"</span>;


<span class="comment">(**
 *  [[file|File]] implementation type for UTF-16 files.
 *  This type supports UTF-16 encoded sequential files of the
 *  operating system. UTF-16 files are seekable, therefore they
 *  support the functions [[#length(in_utf16File)|length]],
 *  [[#seek(in_utf16File,in_integer)|seek]] and
 *  [[#tell(in_utf16File)|tell]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: utf16File <span class="keywd">is</span> sub null_file <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: ext_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Close an utf16File.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: close (<span class="op">in</span> <span class="type">utf16File</span>: aFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    close(aFile.ext_file);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Forces that all buffered data of ''outFile'' is sent to its destination.
 *  This causes data to be sent to the operating systems file system.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: flush (<span class="op">in</span> <span class="type">utf16File</span>: outFile) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    flush(outFile.ext_file);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine the end-of-file indicator.
 *  The end-of-file indicator is set if at least one request to read
 *  from the file failed.
 *  @return TRUE if the end-of-file indicator is set, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: eof (<span class="op">in</span> <span class="type">utf16File</span>: inFile) <span class="keywd">is</span>
  <span class="keywd">return</span> eof(inFile.ext_file);


<span class="comment">(**
 *  Determine if at least one character can be read successfully.
 *  This function allows a file to be handled like an iterator.
 *  @return FALSE if 'getc' would return [[char#EOF|EOF]], TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hasNext (<span class="op">in</span> <span class="type">utf16File</span>: inFile) <span class="keywd">is</span>
  <span class="keywd">return</span> hasNext(inFile.ext_file);


<span class="comment">(**
 *  Obtain the length of a file.
 *  The file length is measured in bytes.
 *  @return the size of the given file.
 *  @exception RANGE_ERROR The file length does not fit into
 *             an integer value.
 *  @exception FILE_ERROR A system function returns an error or the
 *             file length reported by the system is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: length (<span class="op">in</span> <span class="type">utf16File</span>: aFile) <span class="keywd">is</span>
  <span class="keywd">return</span> length(aFile.ext_file);


<span class="comment">(**
 *  Truncate ''aFile'' to the given ''length''.
 *  If the file previously was larger than ''length'', the extra data is lost.
 *  If the file previously was shorter, it is extended, and the extended
 *  part is filled with null bytes ('\0;').
 *  @param aFile File to be truncated.
 *  @param length Requested length of ''aFile'' in bytes.
 *  @exception RANGE_ERROR The requested length is negative or
 *             the length is not representable in the type
 *             used by the system function.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: truncate (<span class="op">in</span> <span class="type">utf16File</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: length) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    truncate(aFile.ext_file, length);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Determine if the file ''aFile'' is seekable.
 *  If a file is seekable the functions ''seek'' and ''tell''
 *  can be used to set and and obtain the current file position.
 *  @return TRUE, if ''aFile'' is seekable, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: seekable (<span class="op">in</span> <span class="type">utf16File</span>: aFile) <span class="keywd">is</span>
  <span class="keywd">return</span> seekable(aFile.ext_file);


<span class="comment">(**
 *  Set the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  @exception RANGE_ERROR The file position is negative or zero.
 *  @exception FILE_ERROR A system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: seek (<span class="op">in</span> <span class="type">utf16File</span>: aFile, <span class="op">in</span> <span class="type">integer</span>: position) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    seek(aFile.ext_file, position);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Obtain the current file position.
 *  The file position is measured in bytes from the start of the file.
 *  The first byte in the file has the position 1.
 *  @return the current file position.
 *  @exception RANGE_ERROR The file position does not fit into
 *             an integer value.
 *  @exception FILE_ERROR A system function returns an error or the
 *             file position reported by the system is negative.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: tell (<span class="op">in</span> <span class="type">utf16File</span>: aFile) <span class="keywd">is</span>
  <span class="keywd">return</span> tell(aFile.ext_file);


<span class="comment">(**
 *  [[file|File]] implementation type for UTF-16LE (little endian) files.
 *  This type supports UTF-16 encoded sequential files of the
 *  operating system. UTF-16 files are seekable, therefore they
 *  support the functions [[#length(in_utf16File)|length]],
 *  [[#seek(in_utf16File,in_integer)|seek]] and
 *  [[#tell(in_utf16File)|tell]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: utf16leFile <span class="keywd">is</span> sub utf16File <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Opens an Unicode file which uses the UTF-16LE encoding.
 *  The file is opened with the specified ''path'' and ''mode''.
 *  If the file is opened with one of the modes "w", "w+", "wt" or
 *  "wt+" an appropriate BOM is created. If the file is opened
 *  with a any other mode the application program is in charge to
 *  handle optional BOM markers. This way 'openUtf16le' can be used
 *  to open existing files without BOM.
 *  There are text modes and binary modes:
 *  *Binary modes:
 *  ** "r"   Open file for reading.
 *  ** "w"   Truncate to zero length or create file for writing.
 *  ** "a"   Append; open or create file for writing at end-of-file.
 *  ** "r+"  Open file for update (reading and writing).
 *  ** "w+"  Truncate to zero length or create file for update.
 *  ** "a+"  Append; open or create file for update, writing at end-of-file.
 *  *Text modes:
 *  ** "rt"  Open file for reading.
 *  ** "wt"  Truncate to zero length or create file for writing.
 *  ** "at"  Append; open or create file for writing at end-of-file.
 *  ** "rt+" Open file for update (reading and writing).
 *  ** "wt+" Truncate to zero length or create file for update.
 *  ** "at+" Append; open or create file for update, writing at end-of-file.
 *  Note that this modes differ from the ones used by the C function
 *  fopen().
 *  @param path Path of the file to be opened. The path must
 *         use the standard path representation.
 *  @param mode Mode of the file to be opened.
 *  @return the file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened or if ''path'' refers to
 *          a directory.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system path type.
 *  @exception RANGE_ERROR The ''mode'' is not one of the allowed
 *             values or ''path'' does not use the standard path
 *             representation or ''path'' cannot be converted
 *             to the system path type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openUtf16le (<span class="op">in</span> <span class="type">string</span>: path, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: open_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">utf16leFile</span>: new_le_file <span class="keywd">is</span> utf16leFile.value;
  <span class="keywd">begin</span>
    open_file := openClibFile(path, mode);
    <span class="keywd">if</span> open_file &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      <span class="keywd">if</span> mode[1 len 1] = <span class="stri">"w"</span> <span class="keywd">then</span>
        write(open_file, <span class="stri">"\16#ff;\16#fe;"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      new_le_file.ext_file := open_file;
      new_le_file.name := path;
      newFile := toInterface(new_le_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string to an UTF-16LE file.
 *  @exception RANGE_ERROR A character is not representable with UTF-16.
 *  @exception FILE_ERROR The system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">utf16leFile</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch1 <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: ch2 <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> stri <span class="keywd">do</span>
      <span class="keywd">if</span> ch &lt;= <span class="stri">'\16#ffff;'</span> <span class="keywd">then</span>
        write(outFile.ext_file, str(chr(ord(ch) <span class="op">mod</span> 256)));
        write(outFile.ext_file, str(chr(ord(ch) <span class="op">mdiv</span> 256)));
      <span class="keywd">elsif</span> ch &lt;= <span class="stri">'\16#10ffff;'</span> <span class="keywd">then</span>
        number := ord(ch) - 16#10000;
        ch1 := chr(16#d800 + (number >> 10));
        write(outFile.ext_file, str(chr(ord(ch1) <span class="op">mod</span> 256)));
        write(outFile.ext_file, str(chr(ord(ch1) <span class="op">mdiv</span> 256)));
        ch2 := chr(16#dc00 + (number <span class="op">mod</span> 16#400));
        write(outFile.ext_file, str(chr(ord(ch2) <span class="op">mod</span> 256)));
        write(outFile.ext_file, str(chr(ord(ch2) <span class="op">mdiv</span> 256)));
      <span class="keywd">else</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Return a string read with a maximum length from an UTF-16LE file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative, or
 *             the file contains an invalid surrogate pair.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">utf16leFile</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: charsMissing <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: partialRead <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: surrogate_part <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch1 <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: ch2 <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> maxLength &lt;= 0 <span class="keywd">then</span>
      <span class="keywd">if</span> maxLength &lt;> 0 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      charsMissing := maxLength;
      <span class="keywd">repeat</span>
        stri := gets(inFile.ext_file, 2 * charsMissing);
        <span class="keywd">if</span> odd(length(stri)) <span class="keywd">then</span>
          raise RANGE_ERROR;
        <span class="keywd">elsif</span> length(stri) &lt;> 2 * charsMissing <span class="keywd">then</span>
          partialRead := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="op">mdiv</span> 2 <span class="keywd">do</span>
          ch1 := chr(ord(stri[index * 2]) * 256 + ord(stri[pred(index * 2)]));
          <span class="keywd">if</span> ch1 >= <span class="stri">'\16#d800;'</span> <span class="op">and</span> ch1 &lt;= <span class="stri">'\16#dbff;'</span> <span class="keywd">then</span>
            <span class="comment"># ch1 introduces a surrogate pair</span>
            <span class="keywd">if</span> index = length(stri) <span class="op">mdiv</span> 2 <span class="keywd">then</span>
              surrogate_part := gets(inFile.ext_file, 2);
              <span class="keywd">if</span> length(surrogate_part) = 2 <span class="keywd">then</span>
                ch2 := chr(ord(surrogate_part[2]) * 256 + ord(surrogate_part[1]));
              <span class="keywd">else</span>
                raise RANGE_ERROR;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">else</span>
              incr(index);
              ch2 := chr(ord(stri[index * 2]) * 256 + ord(stri[pred(index * 2)]));
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> ch2 >= <span class="stri">'\16#dc00;'</span> <span class="op">and</span> ch2 &lt;= <span class="stri">'\16#dfff;'</span> <span class="keywd">then</span>
              <span class="comment"># ch1 and ch2 are a surrogate pair</span>
              striRead &amp;:= chr((ord(ch1) - 16#d800) &lt;&lt; 10 +
                               (ord(ch2) - 16#dc00) + 16#10000);
            <span class="keywd">else</span>
              raise RANGE_ERROR;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            striRead &amp;:= str(ch1);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        charsMissing := maxLength - length(striRead);
      <span class="keywd">until</span> charsMissing = 0 <span class="op">or</span> partialRead;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  [[file|File]] implementation type for UTF-16BE (big endian) files.
 *  This type supports UTF-16 encoded sequential files of the
 *  operating system. UTF-16 files are seekable, therefore they
 *  support the functions [[#length(in_utf16File)|length]],
 *  [[#seek(in_utf16File,in_integer)|seek]] and
 *  [[#tell(in_utf16File)|tell]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: utf16beFile <span class="keywd">is</span> sub utf16File <span class="keywd">struct</span>
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Opens an Unicode file which uses the UTF-16BE encoding.
 *  The file is opened with the specified ''path'' and ''mode''.
 *  If the file is opened with one of the modes "w", "w+", "wt" or
 *  "wt+" an appropriate BOM is created. If the file is opened
 *  with a any other mode the application program is in charge to
 *  handle optional BOM markers. This way 'openUtf16be' can be used
 *  to open existing files without BOM.
 *  There are text modes and binary modes:
 *  *Binary modes:
 *  ** "r"   Open file for reading.
 *  ** "w"   Truncate to zero length or create file for writing.
 *  ** "a"   Append; open or create file for writing at end-of-file.
 *  ** "r+"  Open file for update (reading and writing).
 *  ** "w+"  Truncate to zero length or create file for update.
 *  ** "a+"  Append; open or create file for update, writing at end-of-file.
 *  *Text modes:
 *  ** "rt"  Open file for reading.
 *  ** "wt"  Truncate to zero length or create file for writing.
 *  ** "at"  Append; open or create file for writing at end-of-file.
 *  ** "rt+" Open file for update (reading and writing).
 *  ** "wt+" Truncate to zero length or create file for update.
 *  ** "at+" Append; open or create file for update, writing at end-of-file.
 *  Note that this modes differ from the ones used by the C function
 *  fopen().
 *  @param path Path of the file to be opened. The path must
 *         use the standard path representation.
 *  @param mode Mode of the file to be opened.
 *  @return the file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened or if ''path'' refers to
 *          a directory.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system path type.
 *  @exception RANGE_ERROR The ''mode'' is not one of the allowed
 *             values or ''path'' does not use the standard path
 *             representation or ''path'' cannot be converted
 *             to the system path type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openUtf16be (<span class="op">in</span> <span class="type">string</span>: path, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: open_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">utf16beFile</span>: new_be_file <span class="keywd">is</span> utf16beFile.value;
  <span class="keywd">begin</span>
    open_file := openClibFile(path, mode);
    <span class="keywd">if</span> open_file &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      <span class="keywd">if</span> mode[1 len 1] = <span class="stri">"w"</span> <span class="keywd">then</span>
        write(open_file, <span class="stri">"\16#fe;\16#ff;"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      new_be_file.ext_file := open_file;
      new_be_file.name := path;
      newFile := toInterface(new_be_file);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Write a string to an UTF-16BE file.
 *  @exception RANGE_ERROR If a character is not representable with UTF-16.
 *  @exception FILE_ERROR The system function returns an error.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: write (<span class="op">in</span> <span class="type">utf16beFile</span>: outFile, <span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch1 <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: ch2 <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> ch <span class="keywd">range</span> stri <span class="keywd">do</span>
      <span class="keywd">if</span> ch &lt;= <span class="stri">'\16#ffff;'</span> <span class="keywd">then</span>
        write(outFile.ext_file, str(chr(ord(ch) <span class="op">mdiv</span> 256)));
        write(outFile.ext_file, str(chr(ord(ch) <span class="op">mod</span> 256)));
      <span class="keywd">elsif</span> ch &lt;= <span class="stri">'\16#10ffff;'</span> <span class="keywd">then</span>
        number := ord(ch) - 16#10000;
        ch1 := chr(16#d800 + (number >> 10));
        write(outFile.ext_file, str(chr(ord(ch1) <span class="op">mdiv</span> 256)));
        write(outFile.ext_file, str(chr(ord(ch1) <span class="op">mod</span> 256)));
        ch2 := chr(16#dc00 + (number <span class="op">mod</span> 16#400));
        write(outFile.ext_file, str(chr(ord(ch2) <span class="op">mdiv</span> 256)));
        write(outFile.ext_file, str(chr(ord(ch2) <span class="op">mod</span> 256)));
      <span class="keywd">else</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Return a string read with a maximum length from an UTF-16BE file.
 *  @return the string read.
 *  @exception RANGE_ERROR The parameter ''maxLength'' is negative, or
 *             the file contains an invalid surrogate pair.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: gets (<span class="op">in</span> <span class="type">utf16beFile</span>: inFile, <span class="op">in</span> <span class="type">integer</span>: maxLength) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: striRead <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: charsMissing <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: partialRead <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: surrogate_part <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch1 <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">char</span>: ch2 <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> maxLength &lt;= 0 <span class="keywd">then</span>
      <span class="keywd">if</span> maxLength &lt;> 0 <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      charsMissing := maxLength;
      <span class="keywd">repeat</span>
        stri := gets(inFile.ext_file, 2 * charsMissing);
        <span class="keywd">if</span> odd(length(stri)) <span class="keywd">then</span>
          raise RANGE_ERROR;
        <span class="keywd">elsif</span> length(stri) &lt;> 2 * charsMissing <span class="keywd">then</span>
          partialRead := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">for</span> index <span class="keywd">range</span> 1 <span class="keywd">to</span> length(stri) <span class="op">mdiv</span> 2 <span class="keywd">do</span>
          ch1 := chr(ord(stri[pred(index * 2)]) * 256 + ord(stri[index * 2]));
          <span class="keywd">if</span> ch1 >= <span class="stri">'\16#d800;'</span> <span class="op">and</span> ch1 &lt;= <span class="stri">'\16#dbff;'</span> <span class="keywd">then</span>
            <span class="comment"># ch1 introduces a surrogate pair</span>
            <span class="keywd">if</span> index = length(stri) <span class="op">mdiv</span> 2 <span class="keywd">then</span>
              surrogate_part := gets(inFile.ext_file, 2);
              <span class="keywd">if</span> length(surrogate_part) = 2 <span class="keywd">then</span>
                ch2 := chr(ord(surrogate_part[1]) * 256 + ord(surrogate_part[2]));
              <span class="keywd">else</span>
                raise RANGE_ERROR;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">else</span>
              incr(index);
              ch2 := chr(ord(stri[pred(index * 2)]) * 256 + ord(stri[index * 2]));
            <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">if</span> ch2 >= <span class="stri">'\16#dc00;'</span> <span class="op">and</span> ch2 &lt;= <span class="stri">'\16#dfff;'</span> <span class="keywd">then</span>
              <span class="comment"># ch1 and ch2 are a surrogate pair</span>
              striRead &amp;:= chr((ord(ch1) - 16#d800) &lt;&lt; 10 +
                               (ord(ch2) - 16#dc00) + 16#10000);
            <span class="keywd">else</span>
              raise RANGE_ERROR;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            striRead &amp;:= str(ch1);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        charsMissing := maxLength - length(striRead);
      <span class="keywd">until</span> charsMissing = 0 <span class="op">or</span> partialRead;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Opens an Unicode file which uses the UTF-16LE or UTF-16BE encoding.
 *  The file is opened with the specified ''path'' and ''mode''.
 *  The function 'openUtf16' checks for a BOM and depending on that
 *  opens an UTF-16LE or UTF-16BE file. If the file contains no BOM
 *  the function returns [[null_file#STD_NULL|STD_NULL]].
 *  There are text modes and binary modes:
 *  *Binary modes:
 *  ** "r"   Open file for reading.
 *  ** "w"   Truncate to zero length or create file for writing.
 *  ** "a"   Append; open or create file for writing at end-of-file.
 *  ** "r+"  Open file for update (reading and writing).
 *  ** "w+"  Truncate to zero length or create file for update.
 *  ** "a+"  Append; open or create file for update, writing at end-of-file.
 *  *Text modes:
 *  ** "rt"  Open file for reading.
 *  ** "wt"  Truncate to zero length or create file for writing.
 *  ** "at"  Append; open or create file for writing at end-of-file.
 *  ** "rt+" Open file for update (reading and writing).
 *  ** "wt+" Truncate to zero length or create file for update.
 *  ** "at+" Append; open or create file for update, writing at end-of-file.
 *  Note that this modes differ from the ones used by the C function
 *  fopen().
 *  @param path Path of the file to be opened. The path must
 *         use the standard path representation.
 *  @param mode Mode of the file to be opened.
 *  @return the file opened, or [[null_file#STD_NULL|STD_NULL]]
 *          if it could not be opened or if ''path'' refers to
 *          a directory.
 *  @exception MEMORY_ERROR Not enough memory to convert the path
 *             to the system path type.
 *  @exception RANGE_ERROR The ''mode'' is not one of the allowed
 *             values or ''path'' does not use the standard path
 *             representation or ''path'' cannot be converted
 *             to the system path type.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">file</span>: openUtf16 (<span class="op">in</span> <span class="type">string</span>: path, <span class="op">in</span> <span class="type">string</span>: mode) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">file</span>: newFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">clib_file</span>: open_file <span class="keywd">is</span> CLIB_NULL_FILE;
    <span class="keywd">var</span> <span class="type">utf16leFile</span>: new_le_file <span class="keywd">is</span> utf16leFile.value;
    <span class="keywd">var</span> <span class="type">utf16beFile</span>: new_be_file <span class="keywd">is</span> utf16beFile.value;
    <span class="keywd">var</span> <span class="type">string</span>: bom <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    open_file := openClibFile(path, mode);
    <span class="keywd">if</span> open_file &lt;> CLIB_NULL_FILE <span class="keywd">then</span>
      bom := gets(open_file, 2);
      <span class="keywd">if</span> bom = <span class="stri">"\16#ff;\16#fe;"</span> <span class="keywd">then</span>
        new_le_file.ext_file := open_file;
        new_le_file.name := path;
        newFile := toInterface(new_le_file);
      <span class="keywd">elsif</span> bom = <span class="stri">"\16#fe;\16#ff;"</span> <span class="keywd">then</span>
        new_be_file.ext_file := open_file;
        new_be_file.name := path;
        newFile := toInterface(new_be_file);
      <span class="keywd">else</span>
        close(open_file);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
