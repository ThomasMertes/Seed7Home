<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  enumeration.s7i  Enumeration types support library              *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2023  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">const</span> <span class="type">func</span> <span class="type">ref_list</span>: expr_to_list (<span class="keywd">ref</span> <span class="type">expr</span>: elem_expr) <span class="keywd">is</span> action <span class="stri">"RFL_EXPR"</span>;


<span class="comment">(**
 *  Abstract data type, describing enumeration types.
 *  To define a new enumeration type the desired enumeration literals
 *  must be listed. Commas must seperate the enumeration literals.
 *   const type: enumType is new enum
 *       enum_literal1, enum_literal2
 *     end enum;
 *  In order to do I/O for a new enumeration type it is necessary to
 *  define the functions ''str'' and ''parse''.
 *   const func string: str (in enumType: enumValue) is
 *       return literal(enumValue);
 *   enable_output(enumType);
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">type</span>: new <span class="keywd">enum</span> (<span class="keywd">ref</span> <span class="type">expr</span>: elem_expr) <span class="keywd">end</span> <span class="keywd">enum</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">type</span>: enumType <span class="keywd">is</span> void;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">ref_list</span>: elem_list <span class="keywd">is</span> ref_list.EMPTY;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">reference</span>: elem_obj <span class="keywd">is</span> NIL;
    <span class="keywd">var</span> <span class="type">ref_list</span>: literal_list <span class="keywd">is</span> ref_list.EMPTY;
  <span class="keywd">begin</span>
    global
    enumType := subtype ENUMERATION;
    IN_PARAM_IS_VALUE(enumType);
    elem_list := expr_to_list(elem_expr);
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">enumType</span>: dest) ::= (<span class="op">in</span> <span class="type">enumType</span>: source)       <span class="keywd">is</span> action <span class="stri">"ENU_CREATE"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">enumType</span>: dest) ::= enumlit                     <span class="keywd">is</span> action <span class="stri">"ENU_GENLIT"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">enumType</span>: aValue)                       <span class="keywd">is</span> action <span class="stri">"GEN_DESTR"</span>;
    <span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">enumType</span>: dest) := (<span class="op">in</span> <span class="type">enumType</span>: source)      <span class="keywd">is</span> action <span class="stri">"ENU_CPY"</span>;

    <span class="comment">(**
     *  Convert an enumeration value to the corresponding literal.
     *  @return the enumeration literal.
     *  @exception MEMORY_ERROR Not enough memory to represent the result.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">enumType</span>: enumValue)              <span class="keywd">is</span> action <span class="stri">"ENU_LIT"</span>;

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">enumType</span>: getValue(<span class="op">in</span> <span class="type">reference</span>: aReference,
                                  attr enumType)                     <span class="keywd">is</span> action <span class="stri">"ENU_VALUE"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">enumType</span>: ICONV2(<span class="op">in</span> <span class="type">integer</span>: number,
                                <span class="op">in</span> <span class="type">ref_list</span>: literalList,
                                attr enumType)                       <span class="keywd">is</span> action <span class="stri">"ENU_ICONV2"</span>;
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ORD2(<span class="op">in</span> <span class="type">enumType</span>: enum_val,
                             <span class="op">in</span> <span class="type">ref_list</span>: literalList)               <span class="keywd">is</span> action <span class="stri">"ENU_ORD2"</span>;
    literal_list := ref_list.EMPTY;
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(elem_list) <span class="keywd">do</span>
      elem_obj := elem_list[number];
      <span class="comment"># const integer: ord(symb elem_obj) is pred(number);</span>
      <span class="keywd">const</span> <span class="type">enumType</span>: .(symb elem_obj) <span class="keywd">is</span> enumlit;
      elem_obj := getobj(. (symb elem_obj));
      <span class="keywd">if</span> elem_obj &lt;> NIL <span class="op">and</span> getType(elem_obj) = enumType <span class="keywd">then</span>
        literal_list := literal_list &amp; make_list(elem_obj);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">const</span> <span class="type">ref_list</span>: (attr enumType) . literal_list                   <span class="keywd">is</span> literal_list;
    <span class="keywd">if</span> length(literal_list) >= 1 <span class="keywd">then</span>

      <span class="comment">(**
       *  Default value of ''enumType''.
       *)</span>
      <span class="keywd">const</span> <span class="type">enumType</span>: (attr enumType) . value <span class="keywd">is</span>  getValue(literal_list[1], enumType);

      <span class="comment">(**
       *  Minimum value of ''enumType''.
       *)</span>
      <span class="keywd">const</span> <span class="type">enumType</span>: (attr enumType) . first <span class="keywd">is</span>  getValue(literal_list[1], enumType);

      <span class="comment">(**
       *  Maximum value of ''enumType''.
       *)</span>
      <span class="keywd">const</span> <span class="type">enumType</span>: (attr enumType) . last <span class="keywd">is</span>   getValue(literal_list[length(literal_list)], enumType);

    <span class="keywd">end</span> <span class="keywd">if</span>;

    <span class="comment">(**
     *  Check if two enumeration values are equal.
     *  @return TRUE if the two enumeration values are equal,
     *          FALSE otherwise.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">enumType</span>: enum1) = (<span class="op">in</span> <span class="type">enumType</span>: enum2)  <span class="keywd">is</span> action <span class="stri">"ENU_EQ"</span>;

    <span class="comment">(**
     *  Check if two enumeration values are not equal.
     *  @return FALSE if the two enumeration values are equal,
     *          TRUE otherwise.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">enumType</span>: enum1) &lt;> (<span class="op">in</span> <span class="type">enumType</span>: enum2) <span class="keywd">is</span> action <span class="stri">"ENU_NE"</span>;

    <span class="comment">(**
     *  Conversion from integer ''number'' to ''enumType''.
     *  The first enumeration literal of ''enumType'' corresponds to 0.
     *  @return the corresponding enumeration value.
     *  @exception RANGE_ERROR If number is neither 0 nor 1.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">enumType</span>: (attr enumType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span>
      <span class="keywd">return</span> ICONV2(number, enumType.literal_list, enumType);

    <span class="comment">(**
     *  Convert ''enumValue'' to [[integer]].
     *  The first enumeration literal of ''enumType'' corresponds to 0.
     *  @return the [[integer]] result of the conversion.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: ord (<span class="op">in</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span>
      <span class="keywd">return</span> ORD2(enumValue, enumType.literal_list);

    <span class="comment">(**
     *  Convert ''enumValue'' to [[integer]].
     *  The first enumeration literal of ''enumType'' corresponds to 0.
     *  @return the [[integer]] result of the conversion.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enumValue);

    <span class="comment">(**
     *  Compute the hash value of an enumeration value.
     *  @return the hash value.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enumValue);

    <span class="comment">(**
     *  Compare two enumeration values.
     *  @return -1, 0 or 1 if the first argument is considered to be
     *          respectively less than, equal to, or greater than the
     *          second.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">enumType</span>: enum1, <span class="op">in</span> <span class="type">enumType</span>: enum2) <span class="keywd">is</span>
      <span class="keywd">return</span> compare(ord(enum1), ord(enum2));

    <span class="comment">(**
     *  Conversion from ''enumValue'' to [[integer]].
     *  The first enumeration literal of ''enumType'' corresponds to 0.
     *  @return the [[integer]] result of the conversion.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">conv</span> (<span class="op">in</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enumValue);

    <span class="comment">(**
     *  Successor of ''enumValue''.
     *   succ(enumType.last)  raises  RANGE_ERROR
     *  @return the successor of ''enumValue''.
     *  @exception RANGE_ERROR If ''enumValue'' is the last value of the enumeration.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">enumType</span>: succ (<span class="op">in</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span>
      <span class="keywd">return</span> enumType <span class="op">conv</span> succ(ord(enumValue));

    <span class="comment">(**
     *  Predecessor of ''enumValue''.
     *   pred(enumType.first)  raises  RANGE_ERROR
     *  @return the predecessor of ''enumValue''.
     *  @exception RANGE_ERROR If ''enumValue'' is the first value of the enumeration.
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">enumType</span>: pred (<span class="op">in</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span>
      <span class="keywd">return</span> enumType <span class="op">conv</span> pred(ord(enumValue));

    <span class="comment">(**
     *  Increment an enumeration variable.
     *  @exception RANGE_ERROR If ''enumValue'' is the last value of the enumeration.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: incr (<span class="keywd">inout</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        enumValue := succ(enumValue);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Decrement an enumeration variable.
     *  @exception RANGE_ERROR If ''enumValue'' is the first value of the enumeration.
     *)</span>
    <span class="keywd">const</span> <span class="type">proc</span>: decr (<span class="keywd">inout</span> <span class="type">enumType</span>: enumValue) <span class="keywd">is</span> <span class="keywd">func</span>
      <span class="keywd">begin</span>
        enumValue := pred(enumValue);
      <span class="keywd">end</span> <span class="keywd">func</span>;

    <span class="comment">(**
     *  Compute pseudo-random enumeration value in the range [low, high].
     *  The random values are uniform distributed.
     *  @return a random value such that low &lt;= rand(low, high) and
     *          rand(low, high) &lt;= high holds.
     *  @exception RANGE_ERROR The range is empty (low > high holds).
     *)</span>
    <span class="keywd">const</span> <span class="type">func</span> <span class="type">enumType</span>: rand (<span class="op">in</span> <span class="type">enumType</span>: low, <span class="op">in</span> <span class="type">enumType</span>: high) <span class="keywd">is</span>
      <span class="keywd">return</span> enumType <span class="op">conv</span> rand(ord(low), ord(high));

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">enumType</span>: enum_val1) &lt; (<span class="op">in</span> <span class="type">enumType</span>: enum_val2) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enum_val1) &lt; ord(enum_val2);

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">enumType</span>: enum_val1) &lt;= (<span class="op">in</span> <span class="type">enumType</span>: enum_val2) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enum_val1) &lt;= ord(enum_val2);

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">enumType</span>: enum_val1) > (<span class="op">in</span> <span class="type">enumType</span>: enum_val2) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enum_val1) > ord(enum_val2);

    <span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">enumType</span>: enum_val1) >= (<span class="op">in</span> <span class="type">enumType</span>: enum_val2) <span class="keywd">is</span>
      <span class="keywd">return</span> ord(enum_val1) >= ord(enum_val2);

    FOR_DECLS(enumType);  <span class="comment">(* Necessary for this is &lt;= &lt; >= > *)</span>
    FOR_ENUM_DECLS(enumType);
    DECLARE_TERNARY(enumType);
    CASE_DECLS(enumType);
    SUBRANGE_TYPES(enumType);
    <span class="keywd">end</span> global;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
