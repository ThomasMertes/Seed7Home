<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  duration.s7i  Time and date duration support library            *)</span>
<span class="comment">(*  Copyright (C) 1991, 1992, 1993, 1994, 2005  Thomas Mertes       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/time.htm">time.s7i</a>"</span>;
<span class="keywd">include</span> <span class="stri">"<a class="lib" href="../prg/enable_io.htm">enable_io.s7i</a>"</span>;


<span class="comment">(**
 *  Describes time and date durations.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: duration <span class="keywd">is</span> new object <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: year_365 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: year_366 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: month_28 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: month_29 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: month_30 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: month_31 <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: day <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: hour <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: minute <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: second <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: micro_second <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="comment">(**
 *  Obtain the years of a duration.
 *  @return the years of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getYears (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.year_365 +
         aDuration.year_366;


<span class="comment">(**
 *  Obtain the months of a duration.
 *  @return the months of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getMonths (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.month_28 +
         aDuration.month_29 +
         aDuration.month_30 +
         aDuration.month_31;


<span class="comment">(**
 *  Obtain the days of a duration.
 *  @return the days of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getDays (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.day;


<span class="comment">(**
 *  Obtain the hours of a duration.
 *  @return the hours of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getHours (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.hour;


<span class="comment">(**
 *  Obtain the minutes of a duration.
 *  @return the minutes of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getMinutes (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.minute;


<span class="comment">(**
 *  Obtain the seconds of a duration.
 *  @return the seconds of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getSeconds (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.second;


<span class="comment">(**
 *  Obtain the micro seconds of a duration.
 *  @return the micro seconds of a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getMicroSeconds (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.micro_second;


<span class="comment">(**
 *  Convert a duration to a string.
 *  The duration format is P[nY][nM][nD][T[nH][nM][n[.n]S]], where
 *  n is a signed decimal of a date or time element.
 *   str(duration("P1Y2M3DT4H5M6S"))  returns  "P1Y2M3DT4H5M6S"
 *  @return the result of the conversion.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">"P"</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: years <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: months <span class="keywd">is</span> 0;
   <span class="keywd">var</span> <span class="type">string</span>: micro_seconds <span class="keywd">is</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    years  := getYears(aDuration);
    months := getMonths(aDuration);
    <span class="keywd">if</span> years &lt;> 0 <span class="keywd">then</span>
      stri &amp;:= years &lt;&amp; <span class="stri">"Y"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> months &lt;> 0 <span class="keywd">then</span>
      stri &amp;:= months &lt;&amp; <span class="stri">"M"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> aDuration.day &lt;> 0 <span class="op">or</span> (years = 0 <span class="op">and</span> months = 0 <span class="op">and</span>
        aDuration.hour = 0 <span class="op">and</span> aDuration.minute = 0 <span class="op">and</span>
        aDuration.second = 0 <span class="op">and</span> aDuration.micro_second = 0) <span class="keywd">then</span>
      stri &amp;:= aDuration.day &lt;&amp; <span class="stri">"D"</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> aDuration.hour &lt;> 0 <span class="op">or</span> aDuration.minute &lt;> 0 <span class="op">or</span>
        aDuration.second &lt;> 0 <span class="op">or</span> aDuration.micro_second &lt;> 0 <span class="keywd">then</span>
      stri &amp;:= <span class="stri">"T"</span>;
      <span class="keywd">if</span> aDuration.hour &lt;> 0 <span class="keywd">then</span>
        stri &amp;:= aDuration.hour &lt;&amp; <span class="stri">"H"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> aDuration.minute &lt;> 0 <span class="keywd">then</span>
        stri &amp;:= aDuration.minute &lt;&amp; <span class="stri">"M"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> aDuration.second &lt;> 0 <span class="op">or</span> aDuration.micro_second &lt;> 0 <span class="keywd">then</span>
        <span class="keywd">if</span> aDuration.second = 0 <span class="op">and</span> aDuration.micro_second &lt; 0 <span class="keywd">then</span>
          stri &amp;:= <span class="stri">"-0"</span>;
        <span class="keywd">else</span>
          stri &amp;:= str(aDuration.second);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> aDuration.micro_second &lt;> 0 <span class="keywd">then</span>
          stri &amp;:= <span class="stri">"."</span>;
          micro_seconds := abs(aDuration.micro_second) <span class="op">lpad0</span> 6;
          <span class="keywd">while</span> endsWith(micro_seconds, <span class="stri">"0"</span>) <span class="keywd">do</span>
            micro_seconds := micro_seconds[.. pred(length(micro_seconds))];
          <span class="keywd">end</span> <span class="keywd">while</span>;
          stri &amp;:= micro_seconds;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        stri &amp;:= <span class="stri">"S"</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a duration to a duration literal.
 *  @return the duration literal.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: literal (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="stri">"duration("</span> &amp; literal(str(aDuration)) &amp; <span class="stri">")"</span>;


<span class="comment">(**
 *  Convert a string to a ''duration''.
 *  @param stri A duration in the format P[nY][nM][nD][T[nH][nM][n[.n]S]]
 *  @return the ''duration'' result of the conversion.
 *  @exception RANGE_ERROR If stri contains not a valid duration value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: duration (<span class="op">in</span> <span class="keywd">var</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: aDuration <span class="keywd">is</span> duration.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: numStri <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">boolean</span>: datePart <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">boolean</span>: secondsPart <span class="keywd">is</span> TRUE;
    <span class="keywd">var</span> <span class="type">integer</span>: seconds <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: negativeSeconds <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> <span class="op">not</span> startsWith(stri, <span class="stri">"P"</span>) <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">else</span>
      stri := stri[2 ..];
      <span class="keywd">while</span> stri &lt;> <span class="stri">""</span> <span class="keywd">do</span>
        <span class="keywd">if</span> startsWith(stri, <span class="stri">"-"</span>) <span class="keywd">then</span>
          stri := stri[2 ..];
          numStri := <span class="stri">"-"</span> &amp; getint(stri);
        <span class="keywd">else</span>
          numStri := getint(stri);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> stri &lt;> <span class="stri">""</span> <span class="keywd">then</span>
          <span class="keywd">case</span> stri[1] <span class="keywd">of</span>
            <span class="keywd">when</span> {<span class="stri">'Y'</span>}:
              aDuration.year_365 := integer(numStri);
              stri := stri[2 ..];
            <span class="keywd">when</span> {<span class="stri">'M'</span>}:
              <span class="keywd">if</span> datePart <span class="keywd">then</span>
                aDuration.month_30 := integer(numStri);
              <span class="keywd">else</span>
                aDuration.minute := integer(numStri);
              <span class="keywd">end</span> <span class="keywd">if</span>;
              stri := stri[2 ..];
            <span class="keywd">when</span> {<span class="stri">'D'</span>}:
              aDuration.day := integer(numStri);
              stri := stri[2 ..];
            <span class="keywd">when</span> {<span class="stri">'T'</span>}:
              noop;
            <span class="keywd">when</span> {<span class="stri">'H'</span>}:
              aDuration.hour := integer(numStri);
              stri := stri[2 ..];
            <span class="keywd">when</span> {<span class="stri">'S'</span>}:
              <span class="keywd">if</span> secondsPart <span class="keywd">then</span>
                aDuration.second := integer(numStri);
              <span class="keywd">else</span>
                aDuration.second := seconds;
                numStri := numStri[.. 6];
                numStri &amp;:= <span class="stri">"0"</span> <span class="op">mult</span> (6 - length(numStri));
                aDuration.micro_second := integer(numStri);
                <span class="keywd">if</span> negativeSeconds <span class="keywd">then</span>
                  aDuration.micro_second := -aDuration.micro_second;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
              stri := stri[2 ..];
            <span class="keywd">when</span> {<span class="stri">'.'</span>}:
              secondsPart := FALSE;
              negativeSeconds := startsWith(numStri, <span class="stri">"-"</span>);
              seconds := integer(numStri);
              stri := stri[2 ..];
            <span class="keywd">otherwise</span>:
              raise RANGE_ERROR;
          <span class="keywd">end</span> <span class="keywd">case</span>;
          <span class="keywd">if</span> startsWith(stri, <span class="stri">"T"</span>) <span class="keywd">then</span>
            <span class="keywd">if</span> datePart <span class="keywd">then</span>
              datePart := FALSE;
              stri := stri[2 ..];
            <span class="keywd">else</span>
              raise RANGE_ERROR;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> aDuration.month_30 &lt; -11 <span class="op">or</span> aDuration.month_30 > 11 <span class="op">or</span>
        aDuration.day &lt; -31 <span class="op">or</span> aDuration.day > 31 <span class="op">or</span>
        aDuration.hour &lt; -23 <span class="op">or</span> aDuration.hour > 23 <span class="op">or</span>
        aDuration.minute &lt; -59 <span class="op">or</span> aDuration.minute > 59 <span class="op">or</span>
        aDuration.second &lt; -59 <span class="op">or</span> aDuration.second > 59 <span class="op">or</span>
        aDuration.micro_second &lt; -999999 <span class="op">or</span> aDuration.micro_second > 999999 <span class="keywd">then</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a string to a ''duration''.
 *  @param stri A duration in the format P[nY][nM][nD][T[nH][nM][n[.n]S]]
 *  @return the ''duration'' result of the conversion.
 *  @exception RANGE_ERROR If stri contains not a valid duration value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (attr duration) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> duration(stri);


enable_io(duration);


<span class="comment">(**
 *  Check if two ''duration'' values are equal.
 *  @return TRUE if both durations are equal, FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) = (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span>
  <span class="keywd">return</span>
    getYears(aDuration1) = getYears(aDuration2) <span class="op">and</span>
    getMonths(aDuration1) = getMonths(aDuration2) <span class="op">and</span>
    aDuration1.day = aDuration2.day <span class="op">and</span>
    aDuration1.hour = aDuration2.hour <span class="op">and</span>
    aDuration1.minute = aDuration2.minute <span class="op">and</span>
    aDuration1.second = aDuration2.second <span class="op">and</span>
    aDuration1.micro_second = aDuration2.micro_second;


<span class="comment">(**
 *  Check if two ''duration'' values are not equal.
 *  @return FALSE if both durations are equal, TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) &lt;> (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span>
  <span class="keywd">return</span>
    getYears(aDuration1) &lt;> getYears(aDuration2) <span class="op">or</span>
    getMonths(aDuration1) &lt;> getMonths(aDuration2) <span class="op">or</span>
    aDuration1.day &lt;> aDuration2.day <span class="op">or</span>
    aDuration1.hour &lt;> aDuration2.hour <span class="op">or</span>
    aDuration1.minute &lt;> aDuration2.minute <span class="op">or</span>
    aDuration1.second &lt;> aDuration2.second <span class="op">or</span>
    aDuration1.micro_second &lt;> aDuration2.micro_second;


<span class="comment">(**
 *  Check if ''aDuration1'' is less than or equal to ''aDuration2''.
 *  @return TRUE if ''aDuration1'' is less than or equal to ''aDuration2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) &lt;= (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isLessEqual <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aDuration1.year_365 + aDuration1.year_366 &lt; aDuration2.year_365 + aDuration2.year_366 <span class="keywd">then</span>
      isLessEqual := TRUE;
    <span class="keywd">elsif</span> aDuration1.year_365 + aDuration1.year_366 = aDuration2.year_365 + aDuration2.year_366 <span class="keywd">then</span>
      <span class="keywd">if</span> aDuration1.month_28 + aDuration1.month_29 + aDuration1.month_30 + aDuration1.month_31 &lt;
          aDuration2.month_28 + aDuration2.month_29 + aDuration2.month_30 + aDuration2.month_31 <span class="keywd">then</span>
        isLessEqual := TRUE;
      <span class="keywd">elsif</span> aDuration1.month_28 + aDuration1.month_29 + aDuration1.month_30 + aDuration1.month_31 =
          aDuration2.month_28 + aDuration2.month_29 + aDuration2.month_30 + aDuration2.month_31 <span class="keywd">then</span>
        <span class="keywd">if</span> aDuration1.day &lt; aDuration2.day <span class="keywd">then</span>
          isLessEqual := TRUE;
        <span class="keywd">elsif</span> aDuration1.day = aDuration2.day <span class="keywd">then</span>
          <span class="keywd">if</span> aDuration1.hour &lt; aDuration2.hour <span class="keywd">then</span>
            isLessEqual := TRUE;
          <span class="keywd">elsif</span> aDuration1.hour = aDuration2.hour <span class="keywd">then</span>
            <span class="keywd">if</span> aDuration1.minute &lt; aDuration2.minute <span class="keywd">then</span>
              isLessEqual := TRUE;
            <span class="keywd">elsif</span> aDuration1.minute = aDuration2.minute <span class="keywd">then</span>
              <span class="keywd">if</span> aDuration1.second &lt; aDuration2.second <span class="keywd">then</span>
                isLessEqual := TRUE;
              <span class="keywd">elsif</span> aDuration1.second = aDuration2.second <span class="keywd">then</span>
                <span class="keywd">if</span> aDuration1.micro_second &lt;= aDuration2.micro_second <span class="keywd">then</span>
                  isLessEqual := TRUE;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Check if ''aDuration1'' is greater than or equal to ''aDuration2''.
 *  @return TRUE if ''aDuration1'' is greater than or equal to ''aDuration2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) >= (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: isGreaterEqual <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aDuration1.year_365 + aDuration1.year_366 > aDuration2.year_365 + aDuration2.year_366 <span class="keywd">then</span>
      isGreaterEqual := TRUE;
    <span class="keywd">elsif</span> aDuration1.year_365 + aDuration1.year_366 = aDuration2.year_365 + aDuration2.year_366 <span class="keywd">then</span>
      <span class="keywd">if</span> aDuration1.month_28 + aDuration1.month_29 + aDuration1.month_30 + aDuration1.month_31 >
          aDuration2.month_28 + aDuration2.month_29 + aDuration2.month_30 + aDuration2.month_31 <span class="keywd">then</span>
        isGreaterEqual := TRUE;
      <span class="keywd">elsif</span> aDuration1.month_28 + aDuration1.month_29 + aDuration1.month_30 + aDuration1.month_31 =
          aDuration2.month_28 + aDuration2.month_29 + aDuration2.month_30 + aDuration2.month_31 <span class="keywd">then</span>
        <span class="keywd">if</span> aDuration1.day > aDuration2.day <span class="keywd">then</span>
          isGreaterEqual := TRUE;
        <span class="keywd">elsif</span> aDuration1.day = aDuration2.day <span class="keywd">then</span>
          <span class="keywd">if</span> aDuration1.hour > aDuration2.hour <span class="keywd">then</span>
            isGreaterEqual := TRUE;
          <span class="keywd">elsif</span> aDuration1.hour = aDuration2.hour <span class="keywd">then</span>
            <span class="keywd">if</span> aDuration1.minute > aDuration2.minute <span class="keywd">then</span>
              isGreaterEqual := TRUE;
            <span class="keywd">elsif</span> aDuration1.minute = aDuration2.minute <span class="keywd">then</span>
              <span class="keywd">if</span> aDuration1.second > aDuration2.second <span class="keywd">then</span>
                isGreaterEqual := TRUE;
              <span class="keywd">elsif</span> aDuration1.second = aDuration2.second <span class="keywd">then</span>
                <span class="keywd">if</span> aDuration1.micro_second >= aDuration2.micro_second <span class="keywd">then</span>
                  isGreaterEqual := TRUE;
                <span class="keywd">end</span> <span class="keywd">if</span>;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Check if ''aDuration1'' is less than ''aDuration2''.
 *  @return TRUE if ''aDuration1'' is less than ''aDuration2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) &lt; (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="op">not</span> aDuration1 >= aDuration2;


<span class="comment">(**
 *  Check if ''aDuration1'' is greater than ''aDuration2''.
 *  @return TRUE if ''aDuration1'' is greater than ''aDuration2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) > (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span>
  <span class="keywd">return</span> <span class="op">not</span> aDuration1 &lt;= aDuration2;


<span class="comment">(**
 *  Compares two durations.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">duration</span>: aDuration1, <span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: signumValue <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aDuration1.year_365 + aDuration1.year_366 &lt; aDuration2.year_365 + aDuration2.year_366 <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.year_365 + aDuration1.year_366 > aDuration2.year_365 + aDuration2.year_366 <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> aDuration1.month_28 + aDuration1.month_29 + aDuration1.month_30 + aDuration1.month_31 &lt;
          aDuration2.month_28 + aDuration2.month_29 + aDuration2.month_30 + aDuration2.month_31 <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.month_28 + aDuration1.month_29 + aDuration1.month_30 + aDuration1.month_31 >
          aDuration2.month_28 + aDuration2.month_29 + aDuration2.month_30 + aDuration2.month_31 <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> aDuration1.day &lt; aDuration2.day <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.day > aDuration2.day <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> aDuration1.hour &lt; aDuration2.hour <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.hour > aDuration2.hour <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> aDuration1.minute &lt; aDuration2.minute <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.minute > aDuration2.minute <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> aDuration1.second &lt; aDuration2.second <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.second > aDuration2.second <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">elsif</span> aDuration1.micro_second &lt; aDuration2.micro_second <span class="keywd">then</span>
      signumValue := -1;
    <span class="keywd">elsif</span> aDuration1.micro_second > aDuration2.micro_second <span class="keywd">then</span>
      signumValue := 1;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the hash value of ''aDuration''.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> (aDuration.year_365 + aDuration.year_366) &lt;&lt; 6 +
      (aDuration.month_28 + aDuration.month_29 + aDuration.month_30 + aDuration.month_31) &lt;&lt; 5 +
      aDuration.day &lt;&lt; 4 +
      aDuration.hour &lt;&lt; 3 + aDuration.minute &lt;&lt; 2 + aDuration.second &lt;&lt; 1 +
      aDuration.micro_second;


<span class="comment">(**
 *  Compute the years of ''aDuration''.
 *  @return the duration in years.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toYears (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.year_365 +
         aDuration.year_366;


<span class="comment">(**
 *  Compute the months of ''aDuration''.
 *  @return the duration in months.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toMonths (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> (aDuration.year_365 + aDuration.year_366) * 12 +
      aDuration.month_28 +
      aDuration.month_29 +
      aDuration.month_30 +
      aDuration.month_31;


<span class="comment">(**
 *  Compute the days of ''aDuration''.
 *  @return the duration in days.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toDays (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> aDuration.year_365 * 365 +
      aDuration.year_366 * 366 +
      aDuration.month_28 * 28 +
      aDuration.month_29 * 29 +
      aDuration.month_30 * 30 +
      aDuration.month_31 * 31 +
      aDuration.day;


<span class="comment">(**
 *  Compute the hours of ''aDuration''.
 *  @return the duration in hours.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toHours (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> toDays(aDuration) * 24 + aDuration.hour;


<span class="comment">(**
 *  Compute the minutes of ''aDuration''.
 *  @return the duration in minutes.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toMinutes (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> (toDays(aDuration) * 24 +
      aDuration.hour) * 60 +
      aDuration.minute;


<span class="comment">(**
 *  Compute the seconds of ''aDuration''.
 *  @return the duration in seconds.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toSeconds (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> ((toDays(aDuration) * 24 +
      aDuration.hour) * 60 +
      aDuration.minute) * 60 +
      aDuration.second;


<span class="comment">(**
 *  Compute the micro seconds of ''aDuration''.
 *  @return the duration in micro seconds.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: toMicroSeconds (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span>
  <span class="keywd">return</span> (((toDays(aDuration) * 24 +
      aDuration.hour) * 60 +
      aDuration.minute) * 60 +
      aDuration.second) * 1000000 +
      aDuration.micro_second;


<span class="keywd">const</span> <span class="type">proc</span>: NORMALIZE_DUR_TIME (<span class="keywd">inout</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aDuration.second       +:= aDuration.micro_second <span class="op">mdiv</span> 1000000;
    aDuration.micro_second  := aDuration.micro_second <span class="op">mod</span>  1000000;
    aDuration.minute       +:= aDuration.second       <span class="op">mdiv</span>      60;
    aDuration.second        := aDuration.second       <span class="op">mod</span>       60;
    aDuration.hour         +:= aDuration.minute       <span class="op">mdiv</span>      60;
    aDuration.minute        := aDuration.minute       <span class="op">mod</span>       60;
    aDuration.day          +:= aDuration.hour         <span class="op">mdiv</span>      24;
    aDuration.hour          := aDuration.hour         <span class="op">mod</span>       24;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: NORMALIZE (<span class="keywd">inout</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    NORMALIZE_DUR_TIME(aDuration);
    aDuration.month_30     +:= aDuration.day          <span class="op">mdiv</span>      30;
    aDuration.day           := aDuration.day          <span class="op">mod</span>       30;
    aDuration.year_365     +:= aDuration.month_30     <span class="op">mdiv</span>      12;
    aDuration.month_30      := aDuration.month_30     <span class="op">mod</span>       12;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numYears) . YEARS <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.year_365 := numYears;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numMonths) . MONTHS <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.month_30 := numMonths;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numDays) . DAYS <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.day := numDays;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numHours) . HOURS <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.hour := numHours;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numMinutes) . MINUTES <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.minute := numMinutes;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numSeconds) . SECONDS <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.second := numSeconds;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: numMicroSeconds) . MICRO_SECONDS <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.micro_second := numMicroSeconds;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Plus sign for durations.
 *  @return its operand unchanged.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: + (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.year_365         := aDuration.year_365;
    dur_val.year_366         := aDuration.year_366;
    dur_val.month_28         := aDuration.month_28;
    dur_val.month_29         := aDuration.month_29;
    dur_val.month_30         := aDuration.month_30;
    dur_val.month_31         := aDuration.month_31;
    dur_val.day              := aDuration.day;
    dur_val.hour             := aDuration.hour;
    dur_val.minute           := aDuration.minute;
    dur_val.second           := aDuration.second;
    dur_val.micro_second     := aDuration.micro_second;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Minus sign, negate a duration.
 *  @return the negated duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: - (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.year_365         := -aDuration.year_365;
    dur_val.year_366         := -aDuration.year_366;
    dur_val.month_28         := -aDuration.month_28;
    dur_val.month_29         := -aDuration.month_29;
    dur_val.month_30         := -aDuration.month_30;
    dur_val.month_31         := -aDuration.month_31;
    dur_val.day              := -aDuration.day;
    dur_val.hour             := -aDuration.hour;
    dur_val.minute           := -aDuration.minute;
    dur_val.second           := -aDuration.second;
    dur_val.micro_second     := -aDuration.micro_second;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Add two durations.
 *  @return the sum of the two durations.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) + (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: sum <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    sum.year_365     := aDuration1.year_365     + aDuration2.year_365;
    sum.year_366     := aDuration1.year_366     + aDuration2.year_366;
    sum.month_28     := aDuration1.month_28     + aDuration2.month_28;
    sum.month_29     := aDuration1.month_29     + aDuration2.month_29;
    sum.month_30     := aDuration1.month_30     + aDuration2.month_30;
    sum.month_31     := aDuration1.month_31     + aDuration2.month_31;
    sum.day          := aDuration1.day          + aDuration2.day;
    sum.hour         := aDuration1.hour         + aDuration2.hour;
    sum.minute       := aDuration1.minute       + aDuration2.minute;
    sum.second       := aDuration1.second       + aDuration2.second;
    sum.micro_second := aDuration1.micro_second + aDuration2.micro_second;
    NORMALIZE(sum);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the subtraction of two durations.
 *  @return the difference of the two durations.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration1) - (<span class="op">in</span> <span class="type">duration</span>: aDuration2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: difference <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    difference.year_365     := aDuration1.year_365     - aDuration2.year_365;
    difference.year_366     := aDuration1.year_366     - aDuration2.year_366;
    difference.month_28     := aDuration1.month_28     - aDuration2.month_28;
    difference.month_29     := aDuration1.month_29     - aDuration2.month_29;
    difference.month_30     := aDuration1.month_30     - aDuration2.month_30;
    difference.month_31     := aDuration1.month_31     - aDuration2.month_31;
    difference.day          := aDuration1.day          - aDuration2.day;
    difference.hour         := aDuration1.hour         - aDuration2.hour;
    difference.minute       := aDuration1.minute       - aDuration2.minute;
    difference.second       := aDuration1.second       - aDuration2.second;
    difference.micro_second := aDuration1.micro_second - aDuration2.micro_second;
    NORMALIZE(difference);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Multiply a duration by a number.
 *  @return the multiplied duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">integer</span>: number) * (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.year_365     := number * aDuration.year_365;
    dur_val.year_366     := number * aDuration.year_366;
    dur_val.month_28     := number * aDuration.month_28;
    dur_val.month_29     := number * aDuration.month_29;
    dur_val.month_30     := number * aDuration.month_30;
    dur_val.month_31     := number * aDuration.month_31;
    dur_val.day          := number * aDuration.day;
    dur_val.hour         := number * aDuration.hour;
    dur_val.minute       := number * aDuration.minute;
    dur_val.second       := number * aDuration.second;
    dur_val.micro_second := number * aDuration.micro_second;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Multiply a duration by a number.
 *  @return the multiplied duration.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">duration</span>: aDuration) * (<span class="op">in</span> <span class="type">integer</span>: number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">begin</span>
    dur_val.year_365     := aDuration.year_365     * number;
    dur_val.year_366     := aDuration.year_366     * number;
    dur_val.month_28     := aDuration.month_28     * number;
    dur_val.month_29     := aDuration.month_29     * number;
    dur_val.month_30     := aDuration.month_30     * number;
    dur_val.month_31     := aDuration.month_31     * number;
    dur_val.day          := aDuration.day          * number;
    dur_val.hour         := aDuration.hour         * number;
    dur_val.minute       := aDuration.minute       * number;
    dur_val.second       := aDuration.second       * number;
    dur_val.micro_second := aDuration.micro_second * number;
    NORMALIZE(dur_val);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Increment a duration by a delta.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">duration</span>: aDuration) +:= (<span class="op">in</span> <span class="type">duration</span>: delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aDuration.year_365     +:= delta.year_365;
    aDuration.year_366     +:= delta.year_366;
    aDuration.month_28     +:= delta.month_28;
    aDuration.month_29     +:= delta.month_29;
    aDuration.month_30     +:= delta.month_30;
    aDuration.month_31     +:= delta.month_31;
    aDuration.day          +:= delta.day;
    aDuration.hour         +:= delta.hour;
    aDuration.minute       +:= delta.minute;
    aDuration.second       +:= delta.second;
    aDuration.micro_second +:= delta.micro_second;
    NORMALIZE(aDuration);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decrement a duration by a delta.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">duration</span>: aDuration) -:= (<span class="op">in</span> <span class="type">duration</span>: delta) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    aDuration.year_365     -:= delta.year_365;
    aDuration.year_366     -:= delta.year_366;
    aDuration.month_28     -:= delta.month_28;
    aDuration.month_29     -:= delta.month_29;
    aDuration.month_30     -:= delta.month_30;
    aDuration.month_31     -:= delta.month_31;
    aDuration.day          -:= delta.day;
    aDuration.hour         -:= delta.hour;
    aDuration.minute       -:= delta.minute;
    aDuration.second       -:= delta.second;
    aDuration.micro_second -:= delta.micro_second;
    NORMALIZE(aDuration);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Increment a [[time]] by a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">time</span>: tim) +:= (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    tim.year +:= getYears(aDuration);
    tim.month +:= getMonths(aDuration);
    tim.day +:= aDuration.day;
    tim.hour +:= aDuration.hour;
    tim.minute +:= aDuration.minute;
    tim.second +:= aDuration.second;
    tim.micro_second +:= aDuration.micro_second;
    NORMALIZE(tim);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Decrement a [[time]] by a duration.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">time</span>: tim) -:= (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    tim.year -:= getYears(aDuration);
    tim.month -:= getMonths(aDuration);
    tim.day -:= aDuration.day;
    tim.hour -:= aDuration.hour;
    tim.minute -:= aDuration.minute;
    tim.second -:= aDuration.second;
    tim.micro_second -:= aDuration.micro_second;
    NORMALIZE(tim);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Add a duration to a [[time]].
 *  @return the time result of the addition.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: (<span class="op">in</span> <span class="type">time</span>: tim) + (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">time</span>: laterTime <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    laterTime.year := tim.year + getYears(aDuration);
    laterTime.month := tim.month + getMonths(aDuration);
    laterTime.day := tim.day + aDuration.day;
    laterTime.hour := tim.hour + aDuration.hour;
    laterTime.minute := tim.minute + aDuration.minute;
    laterTime.second := tim.second + aDuration.second;
    laterTime.micro_second := tim.micro_second + aDuration.micro_second;
    laterTime.timeZone := tim.timeZone;
    laterTime.daylightSavingTime := tim.daylightSavingTime;
    NORMALIZE(laterTime);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Subtract a duration from a [[time]].
 *  @return the time result of the subtraction.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">time</span>: (<span class="op">in</span> <span class="type">time</span>: tim) - (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">time</span>: formerTimer <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    formerTimer.year := tim.year - getYears(aDuration);
    formerTimer.month := tim.month - getMonths(aDuration);
    formerTimer.day := tim.day - aDuration.day;
    formerTimer.hour := tim.hour - aDuration.hour;
    formerTimer.minute := tim.minute - aDuration.minute;
    formerTimer.second := tim.second - aDuration.second;
    formerTimer.micro_second := tim.micro_second - aDuration.micro_second;
    formerTimer.timeZone := tim.timeZone;
    formerTimer.daylightSavingTime := tim.daylightSavingTime;
    NORMALIZE(formerTimer);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Subtract two [[time|times]].
 *  @return the duration between the two points in time.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">duration</span>: (<span class="op">in</span> <span class="type">time</span>: tim1) - (<span class="op">in</span> <span class="type">time</span>: tim2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">duration</span>: dur_val <span class="keywd">is</span> duration.value;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: year <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: month <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: tim_year <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: tim_month <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">integer</span>: monthSum <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> tim1 &lt; tim2 <span class="keywd">then</span>
      dur_val.day := tim2.day - tim1.day;
      dur_val.hour := tim2.hour - tim1.hour;
      dur_val.minute := tim2.minute - tim1.minute;
      dur_val.second := tim2.second - tim1.second;
      dur_val.micro_second := tim2.micro_second - tim1.micro_second;
      NORMALIZE_DUR_TIME(dur_val);
      dur_val.day          := -dur_val.day;
      dur_val.hour         := -dur_val.hour;
      dur_val.minute       := -dur_val.minute;
      dur_val.second       := -dur_val.second;
      dur_val.micro_second := -dur_val.micro_second;
      tim_month := tim1.month;
      tim_year := tim1.year;
      <span class="keywd">if</span> tim_month > tim2.month <span class="op">or</span> tim_month = tim2.month <span class="op">and</span> dur_val.day > 0 <span class="keywd">then</span>
        <span class="keywd">if</span> tim_month &lt;= 2 <span class="keywd">then</span>
          year := tim_year - 1;
        <span class="keywd">else</span>
          year := tim_year;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        incr(tim_year);
        tim_month -:= 12;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">for</span> month <span class="keywd">range</span> tim_month <span class="keywd">to</span> pred(tim2.month) <span class="keywd">do</span>
        <span class="keywd">case</span> daysInMonth(year, succ(pred(month) <span class="op">mod</span> 12)) <span class="keywd">of</span>
          <span class="keywd">when</span> {28}: decr(dur_val.month_28);
          <span class="keywd">when</span> {29}: decr(dur_val.month_29);
          <span class="keywd">when</span> {30}: decr(dur_val.month_30);
          <span class="keywd">when</span> {31}: decr(dur_val.month_31);
        <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">else</span>
      dur_val.day := tim1.day - tim2.day;
      dur_val.hour := tim1.hour - tim2.hour;
      dur_val.minute := tim1.minute - tim2.minute;
      dur_val.second := tim1.second - tim2.second;
      dur_val.micro_second := tim1.micro_second - tim2.micro_second;
      NORMALIZE_DUR_TIME(dur_val);
      tim_month := tim1.month;
      tim_year := tim1.year;
      <span class="keywd">if</span> tim_month &lt; tim2.month <span class="op">or</span> tim_month = tim2.month <span class="op">and</span> dur_val.day &lt; 0 <span class="keywd">then</span>
        <span class="keywd">if</span> tim_month &lt;= 2 <span class="keywd">then</span>
          year := tim_year - 1;
        <span class="keywd">else</span>
          year := tim_year;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        decr(tim_year);
        tim_month +:= 12;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">for</span> month <span class="keywd">range</span> tim2.month <span class="keywd">to</span> pred(tim_month) <span class="keywd">do</span>
        <span class="keywd">case</span> daysInMonth(year, succ(pred(month) <span class="op">mod</span> 12)) <span class="keywd">of</span>
          <span class="keywd">when</span> {28}: incr(dur_val.month_28);
          <span class="keywd">when</span> {29}: incr(dur_val.month_29);
          <span class="keywd">when</span> {30}: incr(dur_val.month_30);
          <span class="keywd">when</span> {31}: incr(dur_val.month_31);
        <span class="keywd">end</span> <span class="keywd">case</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
<span class="comment">(*
    if dur_val.day >= 31 then
      dur_val.day -:= 31;
      incr(dur_val.month_31);
    end if;
    if dur_val.day &lt;= -31 then
      dur_val.day +:= 31;
      decr(dur_val.month_31);
    end if;
*)</span>
    monthSum := getMonths(dur_val);
    <span class="keywd">if</span> monthSum = 12 <span class="keywd">then</span>
      incr(tim_year);
      dur_val.month_28 := 0;
      dur_val.month_29 := 0;
      dur_val.month_30 := 0;
      dur_val.month_31 := 0;
    <span class="keywd">elsif</span> monthSum = -12 <span class="keywd">then</span>
      decr(tim_year);
      dur_val.month_28 := 0;
      dur_val.month_29 := 0;
      dur_val.month_30 := 0;
      dur_val.month_31 := 0;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    dur_val.year_365 := tim_year - tim2.year;
    dur_val.year_366 :=
        pred(tim_year) <span class="op">mdiv</span> 4 - pred(tim_year) <span class="op">mdiv</span> 100 + pred(tim_year) <span class="op">mdiv</span> 400 -
        pred(tim2.year) <span class="op">mdiv</span> 4 + pred(tim2.year) <span class="op">mdiv</span> 100 - pred(tim2.year) <span class="op">mdiv</span> 400;
    dur_val.year_365 -:= dur_val.year_366;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Wait for a given duration.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: wait (<span class="op">in</span> <span class="type">duration</span>: aDuration) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    await(time(NOW) + aDuration);
  <span class="keywd">end</span> <span class="keywd">func</span>;


DECLARE_TERNARY(duration);
</pre>
</body>
</html>
