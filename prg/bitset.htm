<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style1.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  bitset.s7i    Support for sets of integer numbers               *)</span>
<span class="comment">(*  Copyright (C) 1989 - 2012  Thomas Mertes                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This file is part of the Seed7 Runtime Library.                 *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is free software; you can             *)</span>
<span class="comment">(*  redistribute it and/or modify it under the terms of the GNU     *)</span>
<span class="comment">(*  Lesser General Public License as published by the Free Software *)</span>
<span class="comment">(*  Foundation; either version 2.1 of the License, or (at your      *)</span>
<span class="comment">(*  option) any later version.                                      *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  The Seed7 Runtime Library is distributed in the hope that it    *)</span>
<span class="comment">(*  will be useful, but WITHOUT ANY WARRANTY; without even the      *)</span>
<span class="comment">(*  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR *)</span>
<span class="comment">(*  PURPOSE.  See the GNU Lesser General Public License for more    *)</span>
<span class="comment">(*  details.                                                        *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU Lesser General       *)</span>
<span class="comment">(*  Public License along with this program; if not, write to the    *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


<span class="comment">(**
 *  Sets of [[integer]] numbers.
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: bitset <span class="keywd">is</span> subtype object;


IN_PARAM_IS_REFERENCE(bitset);

<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">ref</span> <span class="type">bitset</span>: dest) ::= (<span class="op">in</span> <span class="type">bitset</span>: source)          <span class="keywd">is</span> action <span class="stri">"SET_CREATE"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: destroy (<span class="keywd">ref</span> <span class="type">bitset</span>: aValue)                        <span class="keywd">is</span> action <span class="stri">"SET_DESTR"</span>;
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bitset</span>: dest) := (<span class="op">in</span> <span class="type">bitset</span>: source)         <span class="keywd">is</span> action <span class="stri">"SET_CPY"</span>;

<span class="keywd">const</span> <span class="type">boolean</span>: isBitset (attr bitset)                           <span class="keywd">is</span> TRUE;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: _GENERATE_EMPTY_SET                          <span class="keywd">is</span> action <span class="stri">"SET_EMPTY"</span>;
<span class="keywd">const</span> <span class="type">bitset</span>: EMPTY_SET                                         <span class="keywd">is</span> _GENERATE_EMPTY_SET;
<span class="keywd">const</span> <span class="type">bitset</span>: (attr bitset) . EMPTY_SET                         <span class="keywd">is</span> EMPTY_SET;
<span class="keywd">const</span> <span class="type">bitset</span>: { }                                               <span class="keywd">is</span> EMPTY_SET;


<span class="comment">(**
 *  Default value of ''bitset'' ({}).
 *)</span>
<span class="keywd">const</span> <span class="type">bitset</span>: (attr bitset) . value                             <span class="keywd">is</span> EMPTY_SET;


<span class="comment">(**
 *  Union of two sets.
 *   {1, 2} | {1, 3}  returns  {1, 2, 3}
 *  @return the union of the two sets.
 *  @exception MEMORY_ERROR Not enough memory for the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) | (<span class="op">in</span> <span class="type">bitset</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_UNION"</span>;


<span class="comment">(**
 *  Intersection of two sets.
 *   {1, 2} &amp; {1, 3}  returns  {1}
 *  @return the intersection of the two sets.
 *  @exception MEMORY_ERROR Not enough memory for the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) &amp; (<span class="op">in</span> <span class="type">bitset</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_INTERSECT"</span>;


<span class="comment">(**
 *  Symmetric difference of two sets.
 *   {1, 2} >&lt; {1, 3}  returns  {2, 3}
 *  @return the symmetric difference of the two sets.
 *  @exception MEMORY_ERROR Not enough memory for the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) >&lt; (<span class="op">in</span> <span class="type">bitset</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_SYMDIFF"</span>;


<span class="comment">(**
 *  Difference of two sets.
 *   {1, 2} - {1, 3}  returns  {2}
 *  @return the difference of the two sets.
 *  @exception MEMORY_ERROR Not enough memory for the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) - (<span class="op">in</span> <span class="type">bitset</span>: set2)        <span class="keywd">is</span> action <span class="stri">"SET_DIFF"</span>;


<span class="comment">(**
 *  Assign the union of ''dest'' and ''set2'' to ''dest''.
 *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bitset</span>: dest) |:= (<span class="op">in</span> <span class="type">bitset</span>: set2)          <span class="keywd">is</span> action <span class="stri">"SET_UNION_ASSIGN"</span>;


<span class="comment">(**
 *  Assign the intersection of ''dest'' and ''set2'' to ''dest''.
 *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bitset</span>: dest) &amp;:= (<span class="op">in</span> <span class="type">bitset</span>: set2)          <span class="keywd">is</span> action <span class="stri">"SET_INTERSECT_ASSIGN"</span>;


<span class="comment">(**
 *  Assign the difference of ''dest'' and ''set2'' to ''dest''.
 *  @exception MEMORY_ERROR Not enough memory to create ''dest''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bitset</span>: dest) -:= (<span class="op">in</span> <span class="type">bitset</span>: set2)          <span class="keywd">is</span> action <span class="stri">"SET_DIFF_ASSIGN"</span>;


<span class="comment">(**
 *  Check if two sets are equal.
 *  @return TRUE if the two sets are equal,
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) = (<span class="op">in</span> <span class="type">bitset</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_EQ"</span>;


<span class="comment">(**
 *  Check if two sets are not equal.
 *  @return FALSE if the two sets are equal,
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) &lt;> (<span class="op">in</span> <span class="type">bitset</span>: set2)      <span class="keywd">is</span> action <span class="stri">"SET_NE"</span>;


<span class="comment">(**
 *  Determine if ''set1'' is a proper subset of ''set2''.
 *  ''set1'' is a proper subset of ''set2'' if
 *   set1 &lt;= set2 and set1 &lt;> set2
 *  holds.
 *  @return TRUE if ''set1'' is a proper subset of ''set2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) &lt; (<span class="op">in</span> <span class="type">bitset</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_LT"</span>;


<span class="comment">(**
 *  Determine if ''set1'' is a proper superset of ''set2''.
 *  ''set1'' is a proper superset of ''set2'' if
 *   set1 >= set2 and set1 &lt;> set2
 *  holds.
 *  @return TRUE if ''set1'' is a proper superset of ''set2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) > (<span class="op">in</span> <span class="type">bitset</span>: set2)       <span class="keywd">is</span> action <span class="stri">"SET_GT"</span>;


<span class="comment">(**
 *  Determine if ''set1'' is a subset of ''set2''.
 *  ''set1'' is a subset of ''set2'' if no element X exists for which
 *   X in set1 and X not in set2
 *  holds.
 *  @return TRUE if ''set1'' is a subset of ''set2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) &lt;= (<span class="op">in</span> <span class="type">bitset</span>: set2)      <span class="keywd">is</span> action <span class="stri">"SET_LE"</span>;


<span class="comment">(**
 *  Determine if ''set1'' is a superset of ''set2''.
 *  ''set1'' is a superset of ''set2'' if no element X exists for which
 *   X in set2 and X not in set1
 *  holds.
 *  @return TRUE if ''set1'' is a superset of ''set2'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">bitset</span>: set1) >= (<span class="op">in</span> <span class="type">bitset</span>: set2)      <span class="keywd">is</span> action <span class="stri">"SET_GE"</span>;


<span class="comment">(**
 *  Compares two sets to make them useable as key in a hash table.
 *  The sets are compared by determining the biggest element that is
 *  not present or absent in both sets. The set in which this element
 *  is not present is the smaller one. Note that the set comparison
 *  is not related to the concepts of subset or superset. With the
 *  comparison function ''compare'' it is possible to sort an array of
 *  sets or to use sets as key in a hash table.
 *  @return -1, 0 or 1 if the first argument is considered to be
 *          respectively less than, equal to, or greater than the
 *          second.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: compare (<span class="op">in</span> <span class="type">bitset</span>: set1, <span class="op">in</span> <span class="type">bitset</span>: set2)  <span class="keywd">is</span> action <span class="stri">"SET_CMP"</span>;


<span class="comment">(**
 *  Compute the hash value of a ''bitset''.
 *  @return the hash value.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: hashCode (<span class="op">in</span> <span class="type">bitset</span>: aSet)                  <span class="keywd">is</span> action <span class="stri">"SET_HASHCODE"</span>;


<span class="comment">(**
 *  Set membership test.
 *  Determine if ''number'' is a member of the set ''aSet''.
 *  @return TRUE if ''number'' is a member of  ''aSet'',
 *          FALSE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number) <span class="op">in</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet)   <span class="keywd">is</span> action <span class="stri">"SET_ELEM"</span>;


<span class="comment">(**
 *  Negated set membership test.
 *  Determine if ''number'' is not a member of the set ''aSet''.
 *  @return FALSE if ''number'' is a member of  ''aSet'',
 *          TRUE otherwise.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: (<span class="op">in</span> <span class="type">integer</span>: number) <span class="op">not</span> <span class="op">in</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet) <span class="keywd">is</span> action <span class="stri">"SET_NOT_ELEM"</span>;


<span class="comment">(**
 *  Add ''number'' to the set ''aSet''.
 *  If ''number'' is already in ''aSet'' then ''aSet'' stays unchanged.
 *  @exception MEMORY_ERROR If there is not enough memory.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: incl (<span class="keywd">inout</span> <span class="type">bitset</span>: aSet, <span class="op">in</span> <span class="type">integer</span>: number)       <span class="keywd">is</span> action <span class="stri">"SET_INCL"</span>;


<span class="comment">(**
 *  Remove ''number'' from the set ''aSet''.
 *  If ''number'' is not element of ''aSet'' then ''aSet'' stays unchanged.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: excl (<span class="keywd">inout</span> <span class="type">bitset</span>: aSet, <span class="op">in</span> <span class="type">integer</span>: number)       <span class="keywd">is</span> action <span class="stri">"SET_EXCL"</span>;


<span class="comment">(**
 *  Add or remove ''aValue'' to respectively from ''sSet''.
 *  Adding an existing value or remove a non-existing value
 *  leaves ''aSet'' unchanged.
 *  @exception MEMORY_ERROR If there is not enough memory.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: (<span class="keywd">inout</span> <span class="type">bitset</span>: aSet) @:= [ (<span class="op">in</span> <span class="type">integer</span>: number) ] (<span class="op">in</span> <span class="type">boolean</span>: isElement) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> isElement <span class="keywd">then</span>
      incl(aSet, number);
    <span class="keywd">else</span>
      excl(aSet, number);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Compute the cardinality of a set.
 *   card({2, 3, 5, 7, 11})  returns  5
 *   card(EMPTY_SET)         returns  0
 *  @return the number of elements in ''aSet''.
 *  @exception RANGE_ERROR Result does not fit into an integer.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: card (<span class="op">in</span> <span class="type">bitset</span>: aSet)                      <span class="keywd">is</span> action <span class="stri">"SET_CARD"</span>;


<span class="comment">(**
 *  Compute pseudo-random element from ''aSet''.
 *  The random values are uniform distributed.
 *  @return a random number such that rand(aSet) in aSet holds.
 *  @exception RANGE_ERROR If ''aSet'' is empty.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: rand (<span class="op">in</span> <span class="type">bitset</span>: aSet)                      <span class="keywd">is</span> action <span class="stri">"SET_RAND"</span>;


<span class="comment">(**
 *  Minimal element of a set.
 *  Delivers the element from ''aSet'' for which the following condition holds:
 *   element &lt;= X
 *  for all X which are in the set.
 *   min({2, 3, 5, 7, 11})  returns  2
 *   min(EMPTY_SET)         raises   RANGE_ERROR
 *  @return the minimum element of ''aSet''.
 *  @exception RANGE_ERROR If ''aSet'' is the empty set.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: min (<span class="op">in</span> <span class="type">bitset</span>: aSet)                       <span class="keywd">is</span> action <span class="stri">"SET_MIN"</span>;


<span class="comment">(**
 *  Maximal element of a set.
 *  Delivers the element from ''aSet'' for which the following condition holds:
 *   element >= X
 *  for all X which are in the set.
 *   max({2, 3, 5, 7, 11})  returns  11
 *   max(EMPTY_SET)         raises   RANGE_ERROR
 *  @return the maximal element of ''aSet''.
 *  @exception RANGE_ERROR If ''aSet'' is the empty set.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: max (<span class="op">in</span> <span class="type">bitset</span>: aSet)                       <span class="keywd">is</span> action <span class="stri">"SET_MAX"</span>;


<span class="comment">(**
 *  Minimal element of ''aSet'' that is larger than ''number''.
 *  @return the minimum element of ''aSet'' that is larger than ''number''.
 *  @exception RANGE_ERROR If ''aSet'' has no element larger than ''number''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: next (<span class="op">in</span> <span class="type">bitset</span>: aSet, <span class="op">in</span> <span class="type">integer</span>: number)  <span class="keywd">is</span> action <span class="stri">"SET_NEXT"</span>;


<span class="comment">(**
 *  Create ''bitset'' with the element ''aNumber''.
 *   {42}    returns a bitset with the element 42.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: { (<span class="op">in</span> <span class="type">integer</span>: aNumber) }                    <span class="keywd">is</span> action <span class="stri">"SET_BASELIT"</span>;


<span class="comment">(**
 *  Create ''bitset'' with elements from a comma separated list.
 *   {2, 3, 5, 7, 11}    returns a bitset with the elements 2, 3, 5, 7 and 11.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: { (<span class="op">in</span> tuple <span class="type">integer</span>: numberTuple) }          <span class="keywd">is</span> action <span class="stri">"SET_ARRLIT"</span>;


<span class="comment">(**
 *  Create ''bitset'' with all elements from ''lowValue'' to ''highValue'' inclusive.
 *   {1 .. 5}    returns a bitset with the elements 1, 2, 3, 4 and 5.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: { (<span class="op">in</span> <span class="type">integer</span>: lowValue) ..
                     (<span class="op">in</span> <span class="type">integer</span>: highValue) }                  <span class="keywd">is</span> action <span class="stri">"SET_RANGELIT"</span>;


<span class="comment">(**
 *  Convert a ''bitset'' to [[integer]].
 *   integer({2, 3, 5, 7, 11})    returns 2220
 *  @return an [[integer]] which corresponds to the given ''bitset''.
 *  @exception RANGE_ERROR If ''aSet'' contains negative values or
 *             if it does not fit into a non-negative [[integer]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: integer (<span class="op">in</span> <span class="type">bitset</span>: aSet)                   <span class="keywd">is</span> action <span class="stri">"SET_SCONV1"</span>;


<span class="comment">(**
 *  Convert a ''bitset'' to [[integer]].
 *   integer conv {2, 3, 5, 7, 11}    returns 2220
 *  @return an [[integer]] which corresponds to the given ''bitset''.
 *  @exception RANGE_ERROR If ''aSet'' contains negative values or
 *             if it does not fit into a non-negative [[integer]].
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: (attr integer) <span class="op">conv</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet)       <span class="keywd">is</span> action <span class="stri">"SET_SCONV3"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to a ''bitset''.
 *   bitset(2220)    returns {2, 3, 5, 7, 11}
 *  @return a ''bitset'' which corresponds to the given [[integer]].
 *  @exception RANGE_ERROR Number is negative.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: bitset (<span class="op">in</span> <span class="type">integer</span>: number)                  <span class="keywd">is</span> action <span class="stri">"SET_ICONV1"</span>;


<span class="comment">(**
 *  Convert an [[integer]] number to a ''bitset''.
 *   bitset conv 2220    returns {2, 3, 5, 7, 11}
 *  @return a ''bitset'' which corresponds to the given [[integer]].
 *  @exception RANGE_ERROR Number is negative.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (attr bitset) <span class="op">conv</span> (<span class="op">in</span> <span class="type">integer</span>: number)      <span class="keywd">is</span> action <span class="stri">"SET_ICONV3"</span>;


<span class="comment">(**
 *  For-loop where ''forVar'' loops over the elements of the set ''aSet''.
 *)</span>
<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: upperBound <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: leave <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aSet &lt;> EMPTY_SET <span class="keywd">then</span>
      forVar := min(aSet);
      upperBound := max(aSet);
      <span class="keywd">repeat</span>
        statements;
        <span class="keywd">if</span> forVar = upperBound <span class="keywd">then</span>
          leave := TRUE;
        <span class="keywd">else</span>
          forVar := next(aSet, forVar);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">until</span> leave;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">func</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: upperBound <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: leave <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aSet &lt;> EMPTY_SET <span class="keywd">then</span>
      forVar := min(aSet);
      upperBound := max(aSet);
      leave := condition;
      <span class="keywd">while</span> <span class="op">not</span> leave <span class="keywd">do</span>
        statements;
        <span class="keywd">if</span> forVar = upperBound <span class="keywd">then</span>
          leave := TRUE;
        <span class="keywd">else</span>
          forVar := next(aSet, forVar);
          leave := condition;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="keywd">const</span> <span class="type">proc</span>: <span class="keywd">for</span> (<span class="keywd">inout</span> <span class="type">integer</span>: forVar) <span class="keywd">range</span> (<span class="op">in</span> <span class="type">bitset</span>: aSet) <span class="keywd">until</span> (<span class="keywd">ref</span> <span class="type">boolean</span>: condition) <span class="keywd">do</span>
              (<span class="op">in</span> <span class="type">proc</span>: statements)
            <span class="keywd">end</span> <span class="keywd">for</span> <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">for</span> forVar <span class="keywd">range</span> aSet <span class="keywd">until</span> condition = TRUE <span class="keywd">do</span>
      statements;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="comment">(**
 *  Obtain an array containing all the values in ''aSet''.
 *   toArray({2, 3, 5})  returns  [](2, 3, 5)
 *  @return all the values from ''aSet''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">integer</span>: toArray (<span class="op">in</span> <span class="type">bitset</span>: aSet) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">integer</span>: values <span class="keywd">is</span> 0 <span class="op">times</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: aValue <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: upperBound <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: index <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">boolean</span>: leave <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> aSet &lt;> EMPTY_SET <span class="keywd">then</span>
      values := card(aSet) <span class="op">times</span> 0;
      aValue := min(aSet);
      upperBound := max(aSet);
      <span class="keywd">repeat</span>
        values[index] := aValue;
        <span class="keywd">if</span> aValue = upperBound <span class="keywd">then</span>
          leave := TRUE;
        <span class="keywd">else</span>
          aValue := next(aSet, aValue);
          incr(index);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">until</span> leave;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;

<span class="comment">(**
 *  Convert a ''bitset'' to a [[string]].
 *  @return the string result of the conversion.
 *  @exception MEMORY_ERROR Not enough memory to represent the result.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">bitset</span>: aSet) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">string</span>: stri <span class="keywd">is</span> <span class="stri">"{"</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: setElement <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> setElement <span class="keywd">range</span> aSet <span class="keywd">do</span>
      <span class="keywd">if</span> stri &lt;> <span class="stri">"{"</span> <span class="keywd">then</span>
        stri &amp;:= <span class="stri">", "</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      stri &amp;:= str(setElement);
    <span class="keywd">end</span> <span class="keywd">for</span>;
    stri &amp;:= <span class="stri">"}"</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a [[string]] to a ''bitset''.
 *   bitset("{}")            returns  {},
 *   bitset("{2, 3, 5, 7}")  returns  {2, 3, 5, 7} )
 *  @return a ''bitset'' which corresponds to the given literal.
 *  @exception RANGE_ERROR If the string is empty or
 *             cannot be converted to a ''bitset''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: bitset (<span class="op">in</span> <span class="keywd">var</span> <span class="type">string</span>: stri) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">bitset</span>: aBitset <span class="keywd">is</span> EMPTY_SET;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> stri[1] = <span class="stri">'{'</span> <span class="keywd">then</span>
      <span class="keywd">repeat</span>
        <span class="keywd">repeat</span>
          stri := stri[2 ..];
        <span class="keywd">until</span> stri[1] &lt;> <span class="stri">' '</span>;
        <span class="keywd">if</span> stri[1] >= <span class="stri">'0'</span> <span class="op">and</span> stri[1] &lt;= <span class="stri">'9'</span> <span class="keywd">then</span>
          incl(aBitset, integer(getint(stri)));
        <span class="keywd">elsif</span> stri[1] &lt;> <span class="stri">'}'</span> <span class="keywd">then</span>
          raise RANGE_ERROR;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">until</span> stri[1] &lt;> <span class="stri">','</span>;
      <span class="keywd">if</span> stri &lt;> <span class="stri">"}"</span> <span class="keywd">then</span>
        raise RANGE_ERROR;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      raise RANGE_ERROR;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="comment">(**
 *  Convert a [[string]] to a ''bitset''.
 *  @return the integer result of the conversion.
 *  @exception RANGE_ERROR If the string is empty or
 *             cannot be converted to a ''bitset''.
 *)</span>
<span class="keywd">const</span> <span class="type">func</span> <span class="type">bitset</span>: (attr bitset) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
    <span class="keywd">return</span> bitset(stri);


<span class="comment">(**
 *  Alternate name for [[bitset#bitset|bitset]].
 *   set of [[integer]]
 *  is an alternate name for [[bitset#bitset|bitset]].
 *)</span>
<span class="keywd">const</span> <span class="type">type</span>: <span class="type">set</span> <span class="type">of</span> <span class="type">(</span>attr integer) <span class="keywd">is</span> bitset;


DECLARE_TERNARY(bitset);
</pre>
</body>
</html>
