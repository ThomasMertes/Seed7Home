<html>
<head>
<title>
Seed7 Program listing</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="../images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="../style3.css" type="text/css" />
</head>
<body>
<pre class="indent">

<span class="comment">(********************************************************************)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  castle.sd7    Castle Adventure                                  *)</span>
<span class="comment">(*  Copyright (C) 2004, 2005  Thomas Mertes                         *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is free software; you can redistribute it and/or   *)</span>
<span class="comment">(*  modify it under the terms of the GNU General Public License as  *)</span>
<span class="comment">(*  published by the Free Software Foundation; either version 2 of  *)</span>
<span class="comment">(*  the License, or (at your option) any later version.             *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  This program is distributed in the hope that it will be useful, *)</span>
<span class="comment">(*  but WITHOUT ANY WARRANTY; without even the implied warranty of  *)</span>
<span class="comment">(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *)</span>
<span class="comment">(*  GNU General Public License for more details.                    *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(*  You should have received a copy of the GNU General Public       *)</span>
<span class="comment">(*  License along with this program; if not, write to the           *)</span>
<span class="comment">(*  Free Software Foundation, Inc., 51 Franklin Street,             *)</span>
<span class="comment">(*  Fifth Floor, Boston, MA  02110-1301, USA.                       *)</span>
<span class="comment">(*                                                                  *)</span>
<span class="comment">(********************************************************************)</span>


$ <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/seed7_05.htm">seed7_05.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/osfiles.htm">osfiles.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/float.htm">float.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/draw.htm">draw.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/keybd.htm">keybd.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/dialog.htm">dialog.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/pic32.htm">pic32.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/time.htm">time.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/duration.htm">duration.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/bstring.htm">bstring.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/getf.htm">getf.s7i</a>"</span>;
  <span class="keywd">include</span> <span class="stri">"<a class="lib" href="../lib/strifile.htm">strifile.s7i</a>"</span>;


<span class="keywd">const</span> <span class="type">integer</span>: ROOM_LINES        <span class="keywd">is</span>  18;
<span class="keywd">const</span> <span class="type">integer</span>: ROOM_COLUMNS      <span class="keywd">is</span>  24;

<span class="keywd">const</span> <span class="type">integer</span>: INVENTORY_LINE    <span class="keywd">is</span>  16;

<span class="keywd">const</span> <span class="type">integer</span>: MAX_STRENGTH      <span class="keywd">is</span> 200;

<span class="keywd">const</span> <span class="type">integer</span>: MAX_INVENTORY     <span class="keywd">is</span>   6;
<span class="keywd">const</span> <span class="type">integer</span>: PIXMAP_SIZE       <span class="keywd">is</span>  32;
<span class="keywd">const</span> <span class="type">integer</span>: STEP_SIZE         <span class="keywd">is</span>  16;
<span class="keywd">const</span> <span class="type">integer</span>: BORDER_DIST       <span class="keywd">is</span>  20;
<span class="keywd">const</span> <span class="type">integer</span>: LEGEND_XPOS       <span class="keywd">is</span> 2 * BORDER_DIST + ROOM_COLUMNS * PIXMAP_SIZE + 16;
<span class="keywd">const</span> <span class="type">integer</span>: LEGEND_YPOS_MIN   <span class="keywd">is</span>   8;
<span class="keywd">const</span> <span class="type">integer</span>: LEGEND_COLUMN     <span class="keywd">is</span> (LEGEND_XPOS + PIXMAP_SIZE) <span class="op">div</span> 6 + 3;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTONS_1_XPOS    <span class="keywd">is</span> LEGEND_XPOS - 3 * 96;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTONS_2_XPOS    <span class="keywd">is</span> LEGEND_XPOS - 2 * 96;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTONS_3_XPOS    <span class="keywd">is</span> LEGEND_XPOS - 96;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTONS_1_COLUMN  <span class="keywd">is</span> (BUTTONS_1_XPOS + PIXMAP_SIZE) <span class="op">div</span> 6 + 3;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTONS_2_COLUMN  <span class="keywd">is</span> (BUTTONS_2_XPOS + PIXMAP_SIZE) <span class="op">div</span> 6 + 3;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTONS_3_COLUMN  <span class="keywd">is</span> (BUTTONS_3_XPOS + PIXMAP_SIZE) <span class="op">div</span> 6 + 3;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTON_YPOS_MIN   <span class="keywd">is</span> 2 * BORDER_DIST + ROOM_LINES * PIXMAP_SIZE + 16;
<span class="keywd">const</span> <span class="type">integer</span>: BUTTON_TEXT_LINE1 <span class="keywd">is</span> BUTTON_YPOS_MIN <span class="op">div</span> 16 + 2;

<span class="keywd">const</span> <span class="type">type</span>: directionType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    NORTH, SOUTH, EAST, WEST, UP, DOWN
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">directionType</span>: direction) <span class="keywd">is</span>
  <span class="keywd">return</span> str(ord(direction));

<span class="keywd">const</span> <span class="type">func</span> <span class="type">directionType</span>: (attr directionType) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
  <span class="keywd">return</span> directionType <span class="op">conv</span> (integer(stri));

enable_io(directionType);


<span class="keywd">const</span> <span class="type">type</span>: itemType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    NO_ITEM, BOOK, CRYSTAL_BALL, GLASSES, HELMET,
    KEY, LAMP, MAGIC_WAND, SWORD, WINE_FLASK,
    CROWN, DIAMOND, FANCY_GOBLET, GOLDBAR, HARP,
    HOLY_CROSS, HOURGLASS, JADE_FIGURINE, LARGE_GEM,
    NECKLACE, RUBYS, SCEPTER, SILVER_BARS
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">itemType</span>: MIN_ITEM <span class="keywd">is</span> succ(itemType.first);
<span class="keywd">const</span> <span class="type">itemType</span>: MAX_ITEM <span class="keywd">is</span> itemType.last;


<span class="keywd">const</span> <span class="type">type</span>: monsterType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">enum</span>
    NO_MONSTER, ANGRY_DEMON1, ANGRY_DEMON2,
    UGLY_OGRE1, UGLY_OGRE2, BIG_SPIDER,
    SMALL_SPIDER, SNAKE, BAT, VAMPIRE,
    FAIRY1, FAIRY2, DOOR1, DOOR2, DOOR3, DOOR4
  <span class="keywd">end</span> <span class="keywd">enum</span>;

<span class="keywd">const</span> <span class="type">monsterType</span>: MIN_MONSTER <span class="keywd">is</span> succ(monsterType.first);
<span class="keywd">const</span> <span class="type">monsterType</span>: MAX_MONSTER <span class="keywd">is</span> monsterType.last;


<span class="comment">(* Rooms *)</span>
<span class="keywd">const</span> <span class="type">integer</span>: NO_ROOM            <span class="keywd">is</span>  0;
<span class="keywd">const</span> <span class="type">integer</span>: COURTYARD          <span class="keywd">is</span>  1;
<span class="keywd">const</span> <span class="type">integer</span>: WEST_BALLROOM      <span class="keywd">is</span>  4;
<span class="keywd">const</span> <span class="type">integer</span>: WEST_DINING_ROOM   <span class="keywd">is</span>  8;
<span class="keywd">const</span> <span class="type">integer</span>: KITCHEN            <span class="keywd">is</span>  9;
<span class="keywd">const</span> <span class="type">integer</span>: CHEFS_QUARTERS     <span class="keywd">is</span> 10;
<span class="keywd">const</span> <span class="type">integer</span>: STORAGE_ROOM       <span class="keywd">is</span> 11;
<span class="keywd">const</span> <span class="type">integer</span>: MUSEUM             <span class="keywd">is</span> 12;
<span class="keywd">const</span> <span class="type">integer</span>: THRONE_ROOM        <span class="keywd">is</span> 14;
<span class="keywd">const</span> <span class="type">integer</span>: GARDEN_NORTH       <span class="keywd">is</span> 17;
<span class="keywd">const</span> <span class="type">integer</span>: GARDEN_SOUTH       <span class="keywd">is</span> 18;
<span class="keywd">const</span> <span class="type">integer</span>: UPPER_HALL_CENTER  <span class="keywd">is</span> 19;
<span class="keywd">const</span> <span class="type">integer</span>: UPPER_HALL_WEST    <span class="keywd">is</span> 20;
<span class="keywd">const</span> <span class="type">integer</span>: UPPER_HALL_EAST    <span class="keywd">is</span> 21;
<span class="keywd">const</span> <span class="type">integer</span>: GUARDS_HALL        <span class="keywd">is</span> 22;
<span class="keywd">const</span> <span class="type">integer</span>: KNIGHTS_HALL       <span class="keywd">is</span> 24;
<span class="keywd">const</span> <span class="type">integer</span>: LOWER_BATTLEMENT   <span class="keywd">is</span> 26;
<span class="keywd">const</span> <span class="type">integer</span>: CORRIDOR28         <span class="keywd">is</span> 28;
<span class="keywd">const</span> <span class="type">integer</span>: GUEST_ROOM         <span class="keywd">is</span> 29;
<span class="keywd">const</span> <span class="type">integer</span>: BALCONY            <span class="keywd">is</span> 33;
<span class="keywd">const</span> <span class="type">integer</span>: RED_ROOM           <span class="keywd">is</span> 37;
<span class="keywd">const</span> <span class="type">integer</span>: YELLOW_ROOM        <span class="keywd">is</span> 40;
<span class="keywd">const</span> <span class="type">integer</span>: CORRIDOR52         <span class="keywd">is</span> 52;
<span class="keywd">const</span> <span class="type">integer</span>: CORRIDOR54         <span class="keywd">is</span> 54;
<span class="keywd">const</span> <span class="type">integer</span>: KINGS_STUDY        <span class="keywd">is</span> 56;
<span class="keywd">const</span> <span class="type">integer</span>: EMPTY_ROOM         <span class="keywd">is</span> 57;
<span class="keywd">const</span> <span class="type">integer</span>: LIBRARY_WEST_END   <span class="keywd">is</span> 58;
<span class="keywd">const</span> <span class="type">integer</span>: LIBRARY_EAST_END   <span class="keywd">is</span> 59;
<span class="keywd">const</span> <span class="type">integer</span>: CASTLE_WALL        <span class="keywd">is</span> 60;
<span class="keywd">const</span> <span class="type">integer</span>: WEST_TOWER_MIDDLE  <span class="keywd">is</span> 62;
<span class="keywd">const</span> <span class="type">integer</span>: EAST_TOWER_TOP     <span class="keywd">is</span> 65;
<span class="keywd">const</span> <span class="type">integer</span>: LABORATORY         <span class="keywd">is</span> 66;
<span class="keywd">const</span> <span class="type">integer</span>: SORCERERS_QUARTERS <span class="keywd">is</span> 67;
<span class="keywd">const</span> <span class="type">integer</span>: WINE_CELLAR        <span class="keywd">is</span> 68;
<span class="keywd">const</span> <span class="type">integer</span>: MAZE70             <span class="keywd">is</span> 70;
<span class="keywd">const</span> <span class="type">integer</span>: MAZE73             <span class="keywd">is</span> 73;
<span class="keywd">const</span> <span class="type">integer</span>: MAZE74             <span class="keywd">is</span> 74;
<span class="keywd">const</span> <span class="type">integer</span>: WINDING_PASSAGE1   <span class="keywd">is</span> 76;
<span class="keywd">const</span> <span class="type">integer</span>: WINDING_PASSAGE2   <span class="keywd">is</span> 77;
<span class="keywd">const</span> <span class="type">integer</span>: WINDING_PASSAGE3   <span class="keywd">is</span> 78;
<span class="keywd">const</span> <span class="type">integer</span>: TORTURE_ROOM       <span class="keywd">is</span> 79;
<span class="keywd">const</span> <span class="type">integer</span>: DUNGEON_ENTRANCE   <span class="keywd">is</span> 82;
<span class="keywd">const</span> <span class="type">integer</span>: SECRET_ROOM        <span class="keywd">is</span> 83;
<span class="keywd">const</span> <span class="type">integer</span>: ESCAPED            <span class="keywd">is</span> 84;
<span class="keywd">const</span> <span class="type">integer</span>: CASTLE             <span class="keywd">is</span> 85;
<span class="keywd">const</span> <span class="type">integer</span>: MAX_ROOM           <span class="keywd">is</span> 85;


<span class="keywd">const</span> <span class="type">type</span>: itemSet <span class="keywd">is</span> <span class="type">set</span> <span class="type">of</span> <span class="type">itemType</span>;

<span class="keywd">const</span> <span class="type">func</span> <span class="type">string</span>: str (<span class="op">in</span> <span class="type">itemSet</span>: aSet) <span class="keywd">is</span>
  <span class="keywd">return</span> str(bitset <span class="op">conv</span> aSet);

<span class="keywd">const</span> <span class="type">func</span> <span class="type">itemSet</span>: (attr itemSet) <span class="op">parse</span> (<span class="op">in</span> <span class="type">string</span>: stri) <span class="keywd">is</span>
  <span class="keywd">return</span> itemSet <span class="op">conv</span> (bitset(stri));

enable_io(itemSet);


<span class="keywd">const</span> <span class="type">type</span>: graphObj <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: adjective <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: picture <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: saved_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">integer</span>: saved_xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: saved_yPos <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: itemObj <span class="keywd">is</span> <span class="keywd">sub</span> graphObj <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">integer</span>: room_num <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: monsterObj <span class="keywd">is</span> <span class="keywd">sub</span> graphObj <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">integer</span>: attack <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: strength <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: room_num <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">directionType</span>: direction <span class="keywd">is</span> NORTH;
    <span class="keywd">var</span> <span class="type">boolean</span>: living <span class="keywd">is</span> FALSE;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: playerObj <span class="keywd">is</span> <span class="keywd">sub</span> graphObj <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">integer</span>: room <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">directionType</span>: direction <span class="keywd">is</span> NORTH;
    <span class="keywd">var</span> <span class="type">itemSet</span>: inventory <span class="keywd">is</span> itemSet.EMPTY_SET;
    <span class="keywd">var</span> <span class="type">integer</span>: strength <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: living <span class="keywd">is</span> TRUE;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: roomType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: data <span class="keywd">is</span> ROOM_LINES <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: description <span class="keywd">is</span> 5 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">[</span>directionType] <span class="type">integer</span>: exits <span class="keywd">is</span> directionType <span class="op">times</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;

<span class="keywd">const</span> <span class="type">type</span>: scoreType <span class="keywd">is</span> <span class="keywd">new</span> <span class="keywd">struct</span>
    <span class="keywd">var</span> <span class="type">string</span>: name <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: points <span class="keywd">is</span> 0;
  <span class="keywd">end</span> <span class="keywd">struct</span>;


<span class="keywd">var</span> <span class="type">text</span>: screen <span class="keywd">is</span> STD_NULL;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">[</span>itemType] <span class="type">itemObj</span>: item <span class="keywd">is</span> itemType <span class="op">times</span> itemObj.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">[</span>monsterType] <span class="type">monsterObj</span>: monster <span class="keywd">is</span> monsterType <span class="op">times</span> monsterObj.value;
<span class="keywd">var</span> <span class="type">playerObj</span>: player <span class="keywd">is</span> playerObj.value;
<span class="keywd">var</span> <span class="type">array</span> <span class="type">roomType</span>: room <span class="keywd">is</span> MAX_ROOM <span class="op">times</span> roomType.value;
<span class="keywd">var</span> <span class="type">scoreType</span>: highScore <span class="keywd">is</span> scoreType.value;
<span class="keywd">var</span> <span class="type">graphObj</span>: stair_up <span class="keywd">is</span> graphObj.value;
<span class="keywd">var</span> <span class="type">graphObj</span>: stair_down <span class="keywd">is</span> graphObj.value;

<span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: message <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
<span class="keywd">var</span> <span class="type">boolean</span>: flaskFilled <span class="keywd">is</span> FALSE;
<span class="keywd">var</span> <span class="type">boolean</span>: exitGame <span class="keywd">is</span> FALSE;

<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: query_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: wall_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: colored_wall1_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: colored_wall2_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: vertical_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: horizontal_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: left_upper_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: right_upper_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: left_lower_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: right_lower_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: railing_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: gate_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: small_bush_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: big_bush_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: statue_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: fountain_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: wood_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: stone_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: gray_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: water_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_left_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_right_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_top_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_bottom_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_white_middle_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_red_middle_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_blue_middle_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_purple_middle_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: bed_yellow_middle_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: chain_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: k_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: b_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: floor_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: eye_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: hand_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: take_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: drop_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: load_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: save_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
<span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: exit_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: query_pic <span class="keywd">is</span> [](
  <span class="stri">"  WWWW  "</span>,
  <span class="stri">" W    W "</span>,
  <span class="stri">" W    W "</span>,
  <span class="stri">"    WW  "</span>,
  <span class="stri">"   WW   "</span>,
  <span class="stri">"   WW   "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"   WW   "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: wall_pic <span class="keywd">is</span> [](
  <span class="stri">"WBBBBBBBWBBBBBBB"</span>,
  <span class="stri">"WBBBBBBBWBBBBBBB"</span>,
  <span class="stri">"WBBBBBBBWBBBBBBB"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"RRRRWRRRRRRRWRRR"</span>,
  <span class="stri">"RRRRWRRRRRRRWRRR"</span>,
  <span class="stri">"RRRRWRRRRRRRWRRR"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WBBBBBBBWBBBBBBB"</span>,
  <span class="stri">"WBBBBBBBWBBBBBBB"</span>,
  <span class="stri">"WBBBBBBBWBBBBBBB"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"RRRRWRRRRRRRWRRR"</span>,
  <span class="stri">"RRRRWRRRRRRRWRRR"</span>,
  <span class="stri">"RRRRWRRRRRRRWRRR"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: colored_wall1_pic <span class="keywd">is</span> [](
  <span class="stri">"WGGGGGGGWMMMMMMM"</span>,
  <span class="stri">"WGGGGGGGWMMMMMMM"</span>,
  <span class="stri">"WGGGGGGGWMMMMMMM"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"RRRRWmmmmmmmWBBB"</span>,
  <span class="stri">"RRRRWmmmmmmmWBBB"</span>,
  <span class="stri">"RRRRWmmmmmmmWBBB"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WgggggggWOOOOOOO"</span>,
  <span class="stri">"WgggggggWOOOOOOO"</span>,
  <span class="stri">"WgggggggWOOOOOOO"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"YYYYWbbbbbbbWBBB"</span>,
  <span class="stri">"YYYYWbbbbbbbWBBB"</span>,
  <span class="stri">"YYYYWbbbbbbbWBBB"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: colored_wall2_pic <span class="keywd">is</span> [](
  <span class="stri">"WgggggggWOOOOOOO"</span>,
  <span class="stri">"WgggggggWOOOOOOO"</span>,
  <span class="stri">"WgggggggWOOOOOOO"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"BBBBWbbbbbbbWRRR"</span>,
  <span class="stri">"BBBBWbbbbbbbWRRR"</span>,
  <span class="stri">"BBBBWbbbbbbbWRRR"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WGGGGGGGWMMMMMMM"</span>,
  <span class="stri">"WGGGGGGGWMMMMMMM"</span>,
  <span class="stri">"WGGGGGGGWMMMMMMM"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"BBBBWrrrrrrrWYYY"</span>,
  <span class="stri">"BBBBWrrrrrrrWYYY"</span>,
  <span class="stri">"BBBBWrrrrrrrWYYY"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: vertical_pic <span class="keywd">is</span> [](
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: horizontal_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: left_upper_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"       WWWWWWWWW"</span>,
  <span class="stri">"       WWWWWWWWW"</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: right_upper_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"WWWWWWWWW       "</span>,
  <span class="stri">"WWWWWWWWW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: left_lower_pic <span class="keywd">is</span> [](
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WWWWWWWWW"</span>,
  <span class="stri">"       WWWWWWWWW"</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: right_lower_pic <span class="keywd">is</span> [](
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"WWWWWWWWW       "</span>,
  <span class="stri">"WWWWWWWWW       "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: railing_pic <span class="keywd">is</span> [](
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WWWWWWWWW"</span>,
  <span class="stri">"       WWWWWWWWW"</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>,
  <span class="stri">"       WW       "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: gate_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">" bbbbbbbbbbbbbb "</span>,
  <span class="stri">"bbbbbrrrrrbbbrrr"</span>,
  <span class="stri">"brrrrbbbbbrrrbbb"</span>,
  <span class="stri">"bbbbbbrrrbbbbbbb"</span>,
  <span class="stri">"rrrrrrbbbrrrrrbb"</span>,
  <span class="stri">" bbbbbbbbbbbbbb "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: small_bush_pic <span class="keywd">is</span> [](
  <span class="stri">"     G GG       "</span>,
  <span class="stri">"   G  GG  GG  G "</span>,
  <span class="stri">" G  G  G G   G  "</span>,
  <span class="stri">"  GGGG GG G GGG "</span>,
  <span class="stri">"      GG  GGG   "</span>,
  <span class="stri">" GGG   G G   GG "</span>,
  <span class="stri">"   GGG GG GG GGG"</span>,
  <span class="stri">" G  G GG  G G   "</span>,
  <span class="stri">" G  GG G  GG G G"</span>,
  <span class="stri">"GG GG Gg  g  GG "</span>,
  <span class="stri">" G  g  g g   G  "</span>,
  <span class="stri">"GGG  g ggGG GGGG"</span>,
  <span class="stri">"   g  gg   g    "</span>,
  <span class="stri">"    g  g  gGG   "</span>,
  <span class="stri">"     g g g      "</span>,
  <span class="stri">"      ggg       "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: big_bush_pic <span class="keywd">is</span> [](
  <span class="stri">"   G G GG  GG   "</span>,
  <span class="stri">"  GG  GG  gG GG "</span>,
  <span class="stri">" G  g  gGg G gG "</span>,
  <span class="stri">"  GGgg gg g ggGG"</span>,
  <span class="stri">"GG    gg  ggg   "</span>,
  <span class="stri">" GgGG Gg gG  GgG"</span>,
  <span class="stri">"   ggG gg gg ggG"</span>,
  <span class="stri">"GG  g gg  g g   "</span>,
  <span class="stri">"GgG gg gG gg G G"</span>,
  <span class="stri">"Gg gg gb  bG gG "</span>,
  <span class="stri">" g  b  b b   g  "</span>,
  <span class="stri">"GggG b bbgG ggGG"</span>,
  <span class="stri">"   b  bb   b    "</span>,
  <span class="stri">"  GGb  b  bgGG  "</span>,
  <span class="stri">"     b b b      "</span>,
  <span class="stri">"      bbb       "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: wood_pic <span class="keywd">is</span> [](
  <span class="stri">"bbbbbbbbbbbbbbrr"</span>,
  <span class="stri">"rrbbbbbrrrrbbbbb"</span>,
  <span class="stri">"bbrrrrrbbbbrrrbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"rrrbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbrrbbbbrrrrrrb"</span>,
  <span class="stri">"bbbbbrrrrrbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbrrrr"</span>,
  <span class="stri">"rrrrbbbbbrrrbbbb"</span>,
  <span class="stri">"bbbbrrrrrbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbrrr"</span>,
  <span class="stri">"rrbbbbbbrrrrrbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbrrrrbbbbbrrrb"</span>,
  <span class="stri">"rrrbbbbrrrrrbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: stone_pic <span class="keywd">is</span> [](
  <span class="stri">"xxxxxxxxxWxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxWxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxWxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxWxxxxxx"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"xxxWxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxWxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxWxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxWxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxWxxxxxxxxxxxx"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"xxxxxxxxxxxxWxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxWxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxWxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxWxxx"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: gray_pic <span class="keywd">is</span> [](
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>,
  <span class="stri">"xxxxxxxxxxxxxxxx"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: water_pic <span class="keywd">is</span> [](
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_left_pic <span class="keywd">is</span> [](
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"             bb "</span>,
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"            bbbb"</span>,
  <span class="stri">"            bbbb"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_right_pic <span class="keywd">is</span> [](
  <span class="stri">"bbbb            "</span>,
  <span class="stri">"bbbb            "</span>,
  <span class="stri">"bbbb            "</span>,
  <span class="stri">"bbbb            "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">" bb             "</span>,
  <span class="stri">"bbbb            "</span>,
  <span class="stri">"bbbb            "</span>,
  <span class="stri">"bbbb            "</span>,
  <span class="stri">"bbbb            "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_top_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"bbbb        bbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbb        bbbb"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_bottom_pic <span class="keywd">is</span> [](
  <span class="stri">"bbbb        bbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbbbbbbbbbbbbbb"</span>,
  <span class="stri">"bbbb        bbbb"</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_white_middle_pic <span class="keywd">is</span> [](
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>,
  <span class="stri">"WWWWWWWWWWWWWWWW"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_red_middle_pic <span class="keywd">is</span> [](
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>,
  <span class="stri">"RRRRRRRRRRRRRRRR"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_blue_middle_pic <span class="keywd">is</span> [](
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>,
  <span class="stri">"BBBBBBBBBBBBBBBB"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_purple_middle_pic <span class="keywd">is</span> [](
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>,
  <span class="stri">"mmmmmmmmmmmmmmmm"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: bed_yellow_middle_pic <span class="keywd">is</span> [](
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>,
  <span class="stri">"YYYYYYYYYYYYYYYY"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: chain_pic <span class="keywd">is</span> [](
  <span class="stri">"        BBB   BB"</span>,
  <span class="stri">"       B   B B  "</span>,
  <span class="stri">"       B  BBBBB "</span>,
  <span class="stri">"       BB  B B  "</span>,
  <span class="stri">"       BBBB   BB"</span>,
  <span class="stri">"      BB        "</span>,
  <span class="stri">"    BBB         "</span>,
  <span class="stri">"   B B B        "</span>,
  <span class="stri">"   B   B        "</span>,
  <span class="stri">"   B B B        "</span>,
  <span class="stri">"    BBB         "</span>,
  <span class="stri">"      BBBBB   BB"</span>,
  <span class="stri">"       BB  B B  "</span>,
  <span class="stri">"       B  BBBBB "</span>,
  <span class="stri">"       B   B B  "</span>,
  <span class="stri">"        BBB   BB"</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: k_pic <span class="keywd">is</span> [](
  <span class="stri">" WW     "</span>,
  <span class="stri">"  W     "</span>,
  <span class="stri">"  W     "</span>,
  <span class="stri">"  W  WW "</span>,
  <span class="stri">"  W WW  "</span>,
  <span class="stri">"  WWW   "</span>,
  <span class="stri">"  W WW  "</span>,
  <span class="stri">" WW  WW "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: b_pic <span class="keywd">is</span> [](
  <span class="stri">" WW     "</span>,
  <span class="stri">"  W     "</span>,
  <span class="stri">"  W     "</span>,
  <span class="stri">"  WWWW  "</span>,
  <span class="stri">"  W   W "</span>,
  <span class="stri">"  W   W "</span>,
  <span class="stri">"  W   W "</span>,
  <span class="stri">" W WWW  "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: up_pic <span class="keywd">is</span> [](
  <span class="stri">"                  WddW          "</span>,
  <span class="stri">"                  WdddW         "</span>,
  <span class="stri">"                  WddddW        "</span>,
  <span class="stri">"            WWWWWWWdddddW       "</span>,
  <span class="stri">"            WW     WdddddW      "</span>,
  <span class="stri">"            WdW     WdddddW     "</span>,
  <span class="stri">"            WddW     WdddddW    "</span>,
  <span class="stri">"            WdddW     WdddddWWWW"</span>,
  <span class="stri">"            WddddW     WddddW   "</span>,
  <span class="stri">"      WWWWWWWdddddW     WdddW   "</span>,
  <span class="stri">"      WW     WdddddW     WddW   "</span>,
  <span class="stri">"      WdW     WdddddW     WdW   "</span>,
  <span class="stri">"      WddW     WdddddW     WW   "</span>,
  <span class="stri">"      WdddW     WdddddWWWWWWW   "</span>,
  <span class="stri">"      WddddW     WddddW         "</span>,
  <span class="stri">"WWWWWWWdddddW     WdddW        W"</span>,
  <span class="stri">"WW     WdddddW     WddW       W "</span>,
  <span class="stri">"WdW     WdddddW     WdW      W  "</span>,
  <span class="stri">"WddW     WdddddW     WW     W   "</span>,
  <span class="stri">"WdddW     WdddddWWWWWWW    W    "</span>,
  <span class="stri">"WddddW     WddddW         W     "</span>,
  <span class="stri">"WdddddW     WdddW        W      "</span>,
  <span class="stri">" WdddddW     WddW       W       "</span>,
  <span class="stri">"  WdddddW     WdW      W        "</span>,
  <span class="stri">"   WdddddW     WW     W         "</span>,
  <span class="stri">"    WdddddWWWWWWW    W          "</span>,
  <span class="stri">"     WddddW         W           "</span>,
  <span class="stri">"      WdddW        W            "</span>,
  <span class="stri">"       WddW       W             "</span>,
  <span class="stri">"        WdW      W              "</span>,
  <span class="stri">"         WW     W               "</span>,
  <span class="stri">"          WWWWWW                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: down_pic <span class="keywd">is</span> [](
    <span class="stri">"           WWWWWWWWWWWWWWWWWWWWW"</span>,
    <span class="stri">"          WW                    "</span>,
    <span class="stri">"         WdW                    "</span>,
    <span class="stri">"        WddW                    "</span>,
    <span class="stri">"       WdddW           W        "</span>,
    <span class="stri">"      WddddW            W       "</span>,
    <span class="stri">"     WdddddWWWWWWW       W      "</span>,
    <span class="stri">"    WdddddW     WW        W   W "</span>,
    <span class="stri">"   WdddddW     WdW         W  W "</span>,
    <span class="stri">"  WdddddW     WddW          W W "</span>,
    <span class="stri">" WdddddW     WdddW           WW "</span>,
    <span class="stri">"WdddddW     WddddW        WWWWW "</span>,
    <span class="stri">"WddddW     WdddddWWWWWWW        "</span>,
    <span class="stri">"WdddW     WdddddW     WW        "</span>,
    <span class="stri">"WddW     WdddddW     WdW        "</span>,
    <span class="stri">"WdW     WdddddW     WddW        "</span>,
    <span class="stri">"WW     WdddddW     WdddW        "</span>,
    <span class="stri">"WWWWWWWdddddW     WddddW        "</span>,
    <span class="stri">"      WddddW     WdddddWWWWWWW  "</span>,
    <span class="stri">"      WdddW     WdddddW     WW  "</span>,
    <span class="stri">"      WddW     WdddddW     WdW  "</span>,
    <span class="stri">"      WdW     WdddddW     WddW  "</span>,
    <span class="stri">"      WW     WdddddW     WdddW  "</span>,
    <span class="stri">"      WWWWWWWdddddW     WddddW  "</span>,
    <span class="stri">"            WddddW     WdddddWWW"</span>,
    <span class="stri">"            WdddW     WdddddW   "</span>,
    <span class="stri">"            WddW     WdddddW    "</span>,
    <span class="stri">"            WdW     WdddddW     "</span>,
    <span class="stri">"            WW     WdddddW      "</span>,
    <span class="stri">"            WWWWWWWdddddW       "</span>,
    <span class="stri">"                  WddddW        "</span>,
    <span class="stri">"                  WdddW         "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: big_spider_pic <span class="keywd">is</span> [](
  <span class="stri">" B            B "</span>,
  <span class="stri">"  B          B  "</span>,
  <span class="stri">"   B        B   "</span>,
  <span class="stri">"    B      B    "</span>,
  <span class="stri">"     B    B     "</span>,
  <span class="stri">"BBB   B  B   BBB"</span>,
  <span class="stri">"   BBBWWWWBBB   "</span>,
  <span class="stri">"     WWWWWW     "</span>,
  <span class="stri">"     WWWWWW     "</span>,
  <span class="stri">"   BBBWWWWBBB   "</span>,
  <span class="stri">"BBB   B  B   BBB"</span>,
  <span class="stri">"     B    B     "</span>,
  <span class="stri">"    B      B    "</span>,
  <span class="stri">"   B        B   "</span>,
  <span class="stri">"  B          B  "</span>,
  <span class="stri">" B            B "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: small_spider_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"  B          B  "</span>,
  <span class="stri">"   B        B   "</span>,
  <span class="stri">"    B      B    "</span>,
  <span class="stri">"     B    B     "</span>,
  <span class="stri">" BBB  B  B  BBB "</span>,
  <span class="stri">"    BBBWWBBB    "</span>,
  <span class="stri">"      WWWW      "</span>,
  <span class="stri">"    BBBWWBBB    "</span>,
  <span class="stri">" BBB  B  B  BBB "</span>,
  <span class="stri">"     B    B     "</span>,
  <span class="stri">"    B      B    "</span>,
  <span class="stri">"   B        B   "</span>,
  <span class="stri">"  B          B  "</span>,
  <span class="stri">"                "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: fairy_pic <span class="keywd">is</span> [](
  <span class="stri">"  xxxx        YYYYY        xxxx "</span>,
  <span class="stri">" xxccxx      YYYYYYY      xxccxx"</span>,
  <span class="stri">" xccccxx    YYWWWWWYY    xxccccx"</span>,
  <span class="stri">" xcccccxx   YYWBWBWYY   xxcccccx"</span>,
  <span class="stri">" xxcccccxx  YYWWWWWYY  xxcccccxx"</span>,
  <span class="stri">"  xccccccxx YYWOWOWYY xxccccccx "</span>,
  <span class="stri">" xxccBcBccxx XWWOWWX xxcccccccxx"</span>,
  <span class="stri">" xcccccccccxxXXWWWXXxxcccccccccx"</span>,
  <span class="stri">" xccBcWcBcccWWWWWWWWWccccccccccx"</span>,
  <span class="stri">" xxcccRccccWWRRWWWRRWWccccccccxx"</span>,
  <span class="stri">"  xccBRBccWWRRRRWRRRRWWcccccccx "</span>,
  <span class="stri">" xxcccRccWWWRRRRWRRRRWWWccccccxx"</span>,
  <span class="stri">" xccccRcWWWcxRRWWWRRxcWWWccccccx"</span>,
  <span class="stri">" xccccRWWWcxxXWWWWWXxxcWWWWccccx"</span>,
  <span class="stri">" xxccWWWWcxx XWWYWWX xxcWWWWccxx"</span>,
  <span class="stri">"  xccWWWcxx XWWWWWWWX xxcWWWccx "</span>,
  <span class="stri">" xxcccccxx XRRRRRRRRRX xxcccccxx"</span>,
  <span class="stri">" xcccccxx  XWWRRRRRWWX  xxcccccx"</span>,
  <span class="stri">" xccccxx   XWWWRRRWWWX   xxccccx"</span>,
  <span class="stri">" xxccxx    XWWWWRWWWWX    xxccxx"</span>,
  <span class="stri">"  xxxx      XWWWXWWWX      xxxx "</span>,
  <span class="stri">"            XWWWXWWWX           "</span>,
  <span class="stri">"            XWWWXWWWX           "</span>,
  <span class="stri">"            XWWWXWWWX           "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"             XWWXWWX            "</span>,
  <span class="stri">"            XWWWXWWWX           "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: large_gem_pic <span class="keywd">is</span> [](
  <span class="stri">"                "</span>,
  <span class="stri">"  RRRR    RRRR  "</span>,
  <span class="stri">" RrrrrR  RrrrrR "</span>,
  <span class="stri">"RrrrrrrRRrrrrrrR"</span>,
  <span class="stri">"RrrrrrrrrrrrrrrR"</span>,
  <span class="stri">"RrrrrrrrrrrrrrrR"</span>,
  <span class="stri">"RrrrrrrrrrrrrrrR"</span>,
  <span class="stri">"RrrrrrrrrrrrrrrR"</span>,
  <span class="stri">" RrrrrrrrrrrrrR "</span>,
  <span class="stri">"  RrrrrrrrrrrR  "</span>,
  <span class="stri">"   RrrrrrrrrR   "</span>,
  <span class="stri">"    RrrrrrrR    "</span>,
  <span class="stri">"     RrrrrR     "</span>,
  <span class="stri">"      RrrR      "</span>,
  <span class="stri">"       RR       "</span>,
  <span class="stri">"                "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: floor_pic <span class="keywd">is</span> [](
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>,
  <span class="stri">"        "</span>);


<span class="keywd">const</span> <span class="type">array</span> <span class="type">string</span>: player_pic <span class="keywd">is</span> [](
  <span class="stri">"      bbbb      "</span>,
  <span class="stri">"     bbbbbb     "</span>,
  <span class="stri">"     bBOOBb     "</span>,
  <span class="stri">"     OOOOOO     "</span>,
  <span class="stri">"     OWWWWO     "</span>,
  <span class="stri">"      OOOO      "</span>,
  <span class="stri">"   xbbbbbbbbx   "</span>,
  <span class="stri">"  xxbbbbbbbbxx  "</span>,
  <span class="stri">" xx bbbbbbbb xx "</span>,
  <span class="stri">"Ox  bbbbbbbb  xO"</span>,
  <span class="stri">"OO  bbbbbbbb  OO"</span>,
  <span class="stri">"     YY  YY     "</span>,
  <span class="stri">"     YY  YY     "</span>,
  <span class="stri">"     YY  YY     "</span>,
  <span class="stri">"     YY  YY     "</span>,
  <span class="stri">"   rrrr  rrrr   "</span>);


<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: createPixmap (<span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: pattern) <span class="keywd">is</span>
  <span class="keywd">return</span> createPixmap(pattern, PIXMAP_SIZE <span class="op">div</span> length(pattern), black);


<span class="keywd">const</span> <span class="type">bstring</span>: castleData <span class="keywd">is</span> bstring(getf(dir(PROGRAM) &amp; <span class="stri">"/castle.dat"</span>));


<span class="keywd">const</span> <span class="type">proc</span>: initRoomData <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: dat_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">directionType</span>: direction <span class="keywd">is</span> NORTH;
  <span class="keywd">begin</span>
    dat_file := openStriFile(str(castleData));
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> MAX_ROOM <span class="keywd">do</span>
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> ROOM_LINES <span class="keywd">do</span>
        room[number].data[line] := getln(dat_file);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> 5 <span class="keywd">do</span>
        room[number].description[line] := getln(dat_file);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">for</span> direction <span class="keywd">range</span> NORTH <span class="keywd">to</span> DOWN <span class="keywd">do</span>
        read(dat_file, room[number].exits[direction]);
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    close(dat_file);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: initMonster (
    <span class="op">in</span> <span class="type">monsterType</span>: monster_ident,
    <span class="op">in</span> <span class="type">string</span>: monster_adjective,
    <span class="op">in</span> <span class="type">string</span>: monster_name,
    <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: monster_pic,
    <span class="op">in</span> <span class="type">integer</span>: monster_line,
    <span class="op">in</span> <span class="type">integer</span>: monster_column,
    <span class="op">in</span> <span class="type">integer</span>: monster_attack,
    <span class="op">in</span> <span class="type">integer</span>: monster_strength,
    <span class="op">in</span> <span class="type">integer</span>: monster_room_num) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    monster[monster_ident].ident     := monster_ident;
    monster[monster_ident].adjective := monster_adjective;
    monster[monster_ident].name      := monster_name;
    monster[monster_ident].picture   := monster_pic;
    monster[monster_ident].pixmap    := PRIMITIVE_WINDOW.value;
    monster[monster_ident].yPos      := pred(monster_line) * PIXMAP_SIZE;
    monster[monster_ident].xPos      := pred(monster_column) * PIXMAP_SIZE;
    monster[monster_ident].attack    := monster_attack;
    monster[monster_ident].strength  := monster_strength;
    monster[monster_ident].room_num  := monster_room_num;
    monster[monster_ident].direction := NORTH;
    monster[monster_ident].living    := TRUE;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: initMonsterData <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    initMonster(ANGRY_DEMON1, <span class="stri">"Angry"</span>, <span class="stri">"Demon"</span>,   demon_pic,         7, 13, 5, 160, THRONE_ROOM);
    initMonster(ANGRY_DEMON2, <span class="stri">"Angry"</span>, <span class="stri">"Demon"</span>,   demon_pic,        10,  6, 5, 160, KNIGHTS_HALL);
    initMonster(UGLY_OGRE1,   <span class="stri">"Ugly"</span>,  <span class="stri">"Ogre"</span>,    ogre_pic,          9, 13, 4,  80, WEST_BALLROOM);
    initMonster(UGLY_OGRE2,   <span class="stri">"Ugly"</span>,  <span class="stri">"Ogre"</span>,    ogre_pic,         12, 12, 4,  80, UPPER_HALL_EAST);
    initMonster(BIG_SPIDER,   <span class="stri">"Big"</span>,   <span class="stri">"Spider"</span>,  big_spider_pic,   14, 18, 3,  80, MAZE73);
    initMonster(SMALL_SPIDER, <span class="stri">"Small"</span>, <span class="stri">"Spider"</span>,  small_spider_pic,  5, 17, 1,  60, MAZE70);
    initMonster(SNAKE,        <span class="stri">""</span>,      <span class="stri">"Snake"</span>,   snake_pic,        14, 17, 3,  60, GARDEN_NORTH);
    initMonster(BAT,          <span class="stri">""</span>,      <span class="stri">"Bat"</span>,     bat_pic,           7, 18, 2,  40, WINE_CELLAR);
    initMonster(VAMPIRE,      <span class="stri">""</span>,      <span class="stri">"Vampire"</span>, vampire_pic,      10, 24, 0,   0, CORRIDOR28);
    initMonster(FAIRY1,       <span class="stri">""</span>,      <span class="stri">"Fairy"</span>,   fairy_pic,        10,  1, 0,   0, CORRIDOR52);
    initMonster(FAIRY2,       <span class="stri">""</span>,      <span class="stri">"Fairy"</span>,   fairy_pic,         1, 12, 0,   0, CORRIDOR54);
    initMonster(DOOR1,        <span class="stri">""</span>,      <span class="stri">"Door"</span>,    grating_pic,      15,  9, 0,   0, WINE_CELLAR);
    initMonster(DOOR2,        <span class="stri">""</span>,      <span class="stri">""</span>,        grating_pic,      15, 10, 0,   0, WINE_CELLAR);
    initMonster(DOOR3,        <span class="stri">""</span>,      <span class="stri">"Door"</span>,    grating_pic,       9, 14, 0,   0, DUNGEON_ENTRANCE);
    initMonster(DOOR4,        <span class="stri">""</span>,      <span class="stri">""</span>,        grating_pic,      10, 14, 0,   0, DUNGEON_ENTRANCE);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">itemType</span>: (attr itemType) <span class="op">conv</span> (<span class="op">in</span> <span class="type">char</span>: ch) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    number := succ(ord(ch) - ord(<span class="stri">'a'</span>));
    <span class="keywd">if</span> number >= ord(MIN_ITEM) <span class="op">and</span> number &lt;= ord(MAX_ITEM) <span class="keywd">then</span>
      item_ident := itemType <span class="op">conv</span> number;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: (attr char) <span class="op">conv</span> (<span class="op">in</span> <span class="type">itemType</span>: anItem) <span class="keywd">is</span>
  <span class="keywd">return</span> char(pred(ord(<span class="stri">'a'</span>) + ord(anItem)));


<span class="keywd">const</span> <span class="type">proc</span>: initItem (
    <span class="op">in</span> <span class="type">itemType</span>: item_ident,
    <span class="op">in</span> <span class="type">string</span>: item_name,
    <span class="op">in</span> <span class="type">array</span> <span class="type">string</span>: item_pic,
    <span class="op">in</span> <span class="type">integer</span>: item_line,
    <span class="op">in</span> <span class="type">integer</span>: item_column,
    <span class="op">in</span> <span class="type">integer</span>: item_room_num) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    item[item_ident].ident    := item_ident;
    item[item_ident].name     := item_name;
    item[item_ident].picture  := item_pic;
    item[item_ident].pixmap   := PRIMITIVE_WINDOW.value;
    item[item_ident].yPos     := pred(item_line) * PIXMAP_SIZE;
    item[item_ident].xPos     := pred(item_column) * PIXMAP_SIZE;
    item[item_ident].room_num := item_room_num;
    <span class="keywd">if</span> item_room_num &lt;> NO_ROOM <span class="keywd">then</span>
      room[item_room_num].data[item_line] @:= [item_column] char <span class="op">conv</span> item_ident;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: initItemData <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    initItem(BOOK,          <span class="stri">"Book"</span>,          book_pic,          11, 11, NO_ROOM); <span class="comment"># LIBRARY_WEST_END</span>
    initItem(CRYSTAL_BALL,  <span class="stri">"Crystal Ball"</span>,  crystal_ball_pic,  13, 10, LABORATORY);
    initItem(GLASSES,       <span class="stri">"Eye Glasses"</span>,   glasses_pic,       12, 18, NO_ROOM); <span class="comment"># YELLOW_ROOM</span>
    initItem(HELMET,        <span class="stri">"Helmet"</span>,        helmet_pic,         5, 12, GUARDS_HALL);
    initItem(KEY,           <span class="stri">"Key"</span>,           key_pic,            7, 12, NO_ROOM); <span class="comment"># KINGS_STUDY</span>
    initItem(LAMP,          <span class="stri">"Lamp"</span>,          lamp_pic,          14, 19, GARDEN_NORTH);
    initItem(MAGIC_WAND,    <span class="stri">"Magic Wand"</span>,    magic_wand_pic,     9,  4, KNIGHTS_HALL);
    initItem(SWORD,         <span class="stri">"Sword"</span>,         sword_pic,          5, 11, MUSEUM);
    initItem(WINE_FLASK,    <span class="stri">"Wine Flask"</span>,    flask_pic,         11,  8, NO_ROOM); <span class="comment"># CHEFS_QUARTERS</span>
    initItem(CROWN,         <span class="stri">"Crown"</span>,         crown_pic,          5,  9, THRONE_ROOM);
    initItem(DIAMOND,       <span class="stri">"Diamond"</span>,       diamond_pic,       10, 13, EMPTY_ROOM);
    initItem(FANCY_GOBLET,  <span class="stri">"Fancy Goblet"</span>,  goblet_pic,        14,  6, WEST_DINING_ROOM);
    initItem(GOLDBAR,       <span class="stri">"Goldbar"</span>,       goldbar_pic,       14, 23, MAZE74);
    initItem(HARP,          <span class="stri">"Harp"</span>,          harp_pic,           8, 16, EAST_TOWER_TOP);
    initItem(HOLY_CROSS,    <span class="stri">"Holy Cross"</span>,    holy_cross_pic,    13, 15, RED_ROOM);
    initItem(HOURGLASS,     <span class="stri">"Hourglass"</span>,     hourglass_pic,     14,  6, UPPER_HALL_WEST);
    initItem(JADE_FIGURINE, <span class="stri">"Jade Figurine"</span>, jade_figurine_pic, 10, 13, GUEST_ROOM);
    initItem(LARGE_GEM,     <span class="stri">"Large Gem"</span>,     large_gem_pic,     10, 12, NO_ROOM); <span class="comment"># GARDEN_SOUTH</span>
    initItem(NECKLACE,      <span class="stri">"Necklace"</span>,      necklace_pic,       9, 12, NO_ROOM); <span class="comment"># UPPER_HALL_CENTER</span>
    initItem(RUBYS,         <span class="stri">"Ruby"</span>,          ruby_pic,          16,  4, CASTLE_WALL);
    initItem(SCEPTER,       <span class="stri">"Scepter"</span>,       scepter_pic,       10, 12, SECRET_ROOM);
    initItem(SILVER_BARS,   <span class="stri">"Silver Bars"</span>,   silver_bars_pic,    8,  7, LOWER_BATTLEMENT);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: initPlayerData <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    player.pixmap := createPixmap(player_pic);
    player.xPos := 13 * PIXMAP_SIZE;
    player.yPos := 14 * PIXMAP_SIZE;
    player.saved_pixmap := PRIMITIVE_WINDOW.value;
    player.saved_xPos := 0;
    player.saved_yPos := 0;
    player.room := COURTYARD;
    player.direction := SOUTH;
    player.inventory := itemSet.EMPTY_SET;
    player.strength := MAX_STRENGTH;
    player.living := TRUE;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: loadHighScore <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: aFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    aFile := open(<span class="stri">"castle.scr"</span>, <span class="stri">"r"</span>);
    <span class="keywd">if</span> aFile &lt;> STD_NULL <span class="keywd">then</span>
      read(aFile, highScore.points);
      read(aFile, highScore.name);
      close(aFile);
    <span class="keywd">else</span>
      highScore.name := <span class="stri">""</span>;
      highScore.points := 0;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: saveHighScore <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: aFile <span class="keywd">is</span> STD_NULL;
  <span class="keywd">begin</span>
    aFile := open(<span class="stri">"castle.scr"</span>, <span class="stri">"w"</span>);
    <span class="keywd">if</span> aFile &lt;> STD_NULL <span class="keywd">then</span>
      write(aFile, highScore.points);
      write(aFile, <span class="stri">" "</span>);
      writeln(aFile, highScore.name);
      close(aFile);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: initGame <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    query_pixmap := createPixmap(query_pic);
    wall_pixmap := createPixmap(wall_pic);
    colored_wall1_pixmap := createPixmap(colored_wall1_pic);
    colored_wall2_pixmap := createPixmap(colored_wall2_pic);
    vertical_pixmap := createPixmap(vertical_pic);
    horizontal_pixmap := createPixmap(horizontal_pic);
    left_upper_pixmap := createPixmap(left_upper_pic);
    right_upper_pixmap := createPixmap(right_upper_pic);
    left_lower_pixmap := createPixmap(left_lower_pic);
    right_lower_pixmap := createPixmap(right_lower_pic);
    railing_pixmap := createPixmap(railing_pic);
    gate_pixmap := createPixmap(gate_pic);
    small_bush_pixmap := createPixmap(small_bush_pic);
    big_bush_pixmap := createPixmap(big_bush_pic);
    statue_pixmap := createPixmap(statue_pic);
    fountain_pixmap := createPixmap(fountain_pic);
    wood_pixmap := createPixmap(wood_pic);
    stone_pixmap := createPixmap(stone_pic);
    gray_pixmap := createPixmap(gray_pic);
    water_pixmap := createPixmap(water_pic);
    bed_left_pixmap := createPixmap(bed_left_pic);
    bed_right_pixmap := createPixmap(bed_right_pic);
    bed_top_pixmap := createPixmap(bed_top_pic);
    bed_bottom_pixmap := createPixmap(bed_bottom_pic);
    bed_white_middle_pixmap := createPixmap(bed_white_middle_pic);
    bed_red_middle_pixmap := createPixmap(bed_red_middle_pic);
    bed_blue_middle_pixmap := createPixmap(bed_blue_middle_pic);
    bed_purple_middle_pixmap := createPixmap(bed_purple_middle_pic);
    bed_yellow_middle_pixmap := createPixmap(bed_yellow_middle_pic);
    chain_pixmap := createPixmap(chain_pic);
    k_pixmap := createPixmap(k_pic);
    b_pixmap := createPixmap(b_pic);
    floor_pixmap := createPixmap(floor_pic);
    eye_pixmap := createPixmap(eye_pic);
    hand_pixmap := createPixmap(hand_pic);
    take_pixmap := createPixmap(take_pic);
    drop_pixmap := createPixmap(drop_pic);
    load_pixmap := createPixmap(load_pic);
    save_pixmap := createPixmap(save_pic);
    exit_pixmap := createPixmap(exit_pic);

    stair_up.pixmap := createPixmap(up_pic);
    stair_up.name := <span class="stri">"Stairs up"</span>;
    stair_down.pixmap := createPixmap(down_pic);
    stair_down.name := <span class="stri">"Stairs down"</span>;

    message := 0 <span class="op">times</span> <span class="stri">""</span>;
    exitGame := FALSE;
    flaskFilled := FALSE;

    initRoomData;
    initMonsterData;
    initItemData;
    initPlayerData;
    loadHighScore;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayBox (<span class="op">in</span> <span class="type">color</span>: boxColor) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">const</span> <span class="type">integer</span>: width <span class="keywd">is</span> 2 * BORDER_DIST + ROOM_COLUMNS * PIXMAP_SIZE;
    <span class="keywd">const</span> <span class="type">integer</span>: height <span class="keywd">is</span> 2 * BORDER_DIST + ROOM_LINES * PIXMAP_SIZE;
  <span class="keywd">begin</span>
    hline(1, 0, width - 2, boxColor);
    vline(0, 1, height - 2, boxColor);
    hline(1, height - 1, width - 2, boxColor);
    vline(width - 1, 1, height - 2, boxColor);
    point(1, 1, boxColor);
    point(width - 2, 1, boxColor);
    point(width - 2, height - 2, boxColor);
    point(1, height - 2, boxColor);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">PRIMITIVE_WINDOW</span>: getPixmap (<span class="keywd">inout</span> <span class="type">graphObj</span>: currObject) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> currObject.pixmap = PRIMITIVE_WINDOW.value <span class="keywd">then</span>
      currObject.pixmap := createPixmap(currObject.picture,
          PIXMAP_SIZE <span class="op">div</span> length(currObject.picture), black);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    pixmap := currObject.pixmap;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayRoom (<span class="op">in</span> <span class="type">roomType</span>: current_room) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">PRIMITIVE_WINDOW</span>: field_pixmap <span class="keywd">is</span> PRIMITIVE_WINDOW.value;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> line <span class="keywd">range</span> 1 <span class="keywd">to</span> ROOM_LINES <span class="keywd">do</span>
      <span class="keywd">for</span> column <span class="keywd">range</span> 1 <span class="keywd">to</span> length(current_room.data[line]) <span class="keywd">do</span>
        ch := current_room.data[line][column];
        <span class="keywd">if</span> ch &lt;> <span class="stri">' '</span> <span class="keywd">then</span>
          <span class="keywd">case</span> ch <span class="keywd">of</span>
            <span class="keywd">when</span> {<span class="stri">'#'</span>}: field_pixmap := wall_pixmap;
            <span class="keywd">when</span> {<span class="stri">':'</span>}: field_pixmap := colored_wall1_pixmap;
            <span class="keywd">when</span> {<span class="stri">';'</span>}: field_pixmap := colored_wall2_pixmap;
            <span class="keywd">when</span> {<span class="stri">'|'</span>}: field_pixmap := vertical_pixmap;
            <span class="keywd">when</span> {<span class="stri">'-'</span>}: field_pixmap := horizontal_pixmap;
            <span class="keywd">when</span> {<span class="stri">','</span>}: field_pixmap := left_upper_pixmap;
            <span class="keywd">when</span> {<span class="stri">'.'</span>}: field_pixmap := right_upper_pixmap;
            <span class="keywd">when</span> {<span class="stri">'`'</span>}: field_pixmap := left_lower_pixmap;
            <span class="keywd">when</span> {<span class="stri">'''</span>}: field_pixmap := right_lower_pixmap;
            <span class="keywd">when</span> {<span class="stri">'>'</span>}: field_pixmap := railing_pixmap;
            <span class="keywd">when</span> {<span class="stri">'='</span>}: field_pixmap := gate_pixmap;
            <span class="keywd">when</span> {<span class="stri">'+'</span>}: field_pixmap := small_bush_pixmap;
            <span class="keywd">when</span> {<span class="stri">'*'</span>}: field_pixmap := big_bush_pixmap;
            <span class="keywd">when</span> {<span class="stri">'$'</span>}: field_pixmap := statue_pixmap;
            <span class="keywd">when</span> {<span class="stri">'?'</span>}: field_pixmap := fountain_pixmap;
            <span class="keywd">when</span> {<span class="stri">'@'</span>}: field_pixmap := wood_pixmap;
            <span class="keywd">when</span> {<span class="stri">'&amp;'</span>}: field_pixmap := stone_pixmap;
            <span class="keywd">when</span> {<span class="stri">'%'</span>}: field_pixmap := gray_pixmap;
            <span class="keywd">when</span> {<span class="stri">'~'</span>}: field_pixmap := water_pixmap;
            <span class="keywd">when</span> {<span class="stri">']'</span>}: field_pixmap := bed_left_pixmap;
            <span class="keywd">when</span> {<span class="stri">'['</span>}: field_pixmap := bed_right_pixmap;
            <span class="keywd">when</span> {<span class="stri">'_'</span>}: field_pixmap := bed_top_pixmap;
            <span class="keywd">when</span> {<span class="stri">'^'</span>}: field_pixmap := bed_bottom_pixmap;
            <span class="keywd">when</span> {<span class="stri">'W'</span>}: field_pixmap := bed_white_middle_pixmap;
            <span class="keywd">when</span> {<span class="stri">'R'</span>}: field_pixmap := bed_red_middle_pixmap;
            <span class="keywd">when</span> {<span class="stri">'N'</span>}: field_pixmap := bed_blue_middle_pixmap;
            <span class="keywd">when</span> {<span class="stri">'P'</span>}: field_pixmap := bed_purple_middle_pixmap;
            <span class="keywd">when</span> {<span class="stri">'Y'</span>}: field_pixmap := bed_yellow_middle_pixmap;
            <span class="keywd">when</span> {<span class="stri">'{'</span>}: field_pixmap := chain_pixmap;
            <span class="keywd">when</span> {<span class="stri">'K'</span>}: field_pixmap := k_pixmap;
            <span class="keywd">when</span> {<span class="stri">'B'</span>}: field_pixmap := b_pixmap;
            <span class="keywd">when</span> {<span class="stri">'U'</span>}: field_pixmap := stair_up.pixmap;
            <span class="keywd">when</span> {<span class="stri">'D'</span>}: field_pixmap := stair_down.pixmap;
            <span class="keywd">when</span> {<span class="stri">' '</span>}: field_pixmap := floor_pixmap;
            <span class="keywd">when</span> {<span class="stri">'a'</span> .. <span class="stri">'z'</span>}:
              item_ident := itemType <span class="op">conv</span> ch;
              <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
                field_pixmap := getPixmap(item[item_ident]);
              <span class="keywd">else</span>
                field_pixmap := query_pixmap;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">otherwise</span>:
              field_pixmap := query_pixmap;
              write(<span class="stri">"undefined char no "</span>);
              writeln(ord(ch));
          <span class="keywd">end</span> <span class="keywd">case</span>;
          put(curr_win, BORDER_DIST + pred(column) * PIXMAP_SIZE,
              BORDER_DIST + pred(line) * PIXMAP_SIZE, field_pixmap);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    rect(8, BUTTON_YPOS_MIN, 300, 50, black);
    color(white, black);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(current_room.description) <span class="keywd">do</span>
      setPos(screen, pred(BUTTON_TEXT_LINE1 + number), 2);
      write(screen, current_room.description[number]);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayObj (<span class="keywd">inout</span> <span class="type">graphObj</span>: currObject) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(curr_win, BORDER_DIST + currObject.saved_xPos,
        BORDER_DIST + currObject.saved_yPos, currObject.saved_pixmap);
    currObject.saved_pixmap := getPixmap(BORDER_DIST + currObject.xPos,
        BORDER_DIST + currObject.yPos, PIXMAP_SIZE, PIXMAP_SIZE);
    put(curr_win, BORDER_DIST + currObject.xPos,
        BORDER_DIST + currObject.yPos, getPixmap(currObject));
    currObject.saved_xPos := currObject.xPos;
    currObject.saved_yPos := currObject.yPos;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayMonster <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
      <span class="keywd">if</span> monster[monster_ident].room_num = player.room <span class="keywd">then</span>
        displayObj(monster[monster_ident]);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
 <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: objectLegend (<span class="keywd">inout</span> <span class="type">graphObj</span>: currObject, <span class="op">in</span> <span class="type">integer</span>: line) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(curr_win, LEGEND_XPOS, LEGEND_YPOS_MIN + pred(line) * PIXMAP_SIZE, getPixmap(currObject));
    color(white, black);
    setPos(screen, 2 * line, LEGEND_COLUMN);
    <span class="keywd">if</span> currObject.adjective &lt;> <span class="stri">""</span> <span class="keywd">then</span>
      write(screen, currObject.adjective &amp; <span class="stri">" "</span> &amp; currObject.name);
    <span class="keywd">else</span>
      write(screen, currObject.name);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayLegend <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    rect(LEGEND_XPOS, LEGEND_YPOS_MIN, 200, 576, black);
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
      <span class="keywd">if</span> monster[monster_ident].room_num = player.room <span class="op">and</span>
          monster[monster_ident].name &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        objectLegend(monster[monster_ident], line);
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
      <span class="keywd">if</span> item[item_ident].room_num = player.room <span class="op">and</span>
          <span class="op">not</span> item_ident <span class="op">in</span> player.inventory <span class="keywd">then</span>
        objectLegend(item[item_ident], line);
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> room[player.room].exits[UP] &lt;> 0 <span class="keywd">then</span>
      objectLegend(stair_up, line);
      incr(line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> room[player.room].exits[DOWN] &lt;> 0 <span class="keywd">then</span>
      objectLegend(stair_down, line);
      incr(line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: sizeOfLegend <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
      <span class="keywd">if</span> monster[monster_ident].room_num = player.room <span class="op">and</span>
          monster[monster_ident].name &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
      <span class="keywd">if</span> item[item_ident].room_num = player.room <span class="op">and</span>
          <span class="op">not</span> item_ident <span class="op">in</span> player.inventory <span class="keywd">then</span>
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> room[player.room].exits[UP] &lt;> 0 <span class="keywd">then</span>
      incr(line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> room[player.room].exits[DOWN] &lt;> 0 <span class="keywd">then</span>
      incr(line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: collectedTreasures <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 1;
  <span class="keywd">begin</span>
    rect(LEGEND_XPOS, 0, width(curr_win) - LEGEND_XPOS,
        BORDER_DIST + PIXMAP_SIZE * 14, black);
    color(white, black);
    setPos(screen, 2 * line - 1, LEGEND_COLUMN);
    write(screen, <span class="stri">"You have collected"</span>);
    setPos(screen, 2 * line, LEGEND_COLUMN);
    write(screen, <span class="stri">"these Treasures"</span>);
    incr(line);
    <span class="keywd">for</span> item_ident <span class="keywd">range</span> CROWN <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
      <span class="keywd">if</span> item_ident <span class="op">in</span> player.inventory <span class="op">or</span>
          item[item_ident].room_num = COURTYARD <span class="keywd">then</span>
        objectLegend(item[item_ident], line);
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> line = 2 <span class="keywd">then</span>
      color(white, black);
      setPos(screen, 2 * line, LEGEND_COLUMN);
      write(screen, <span class="stri">"NONE"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: killedMonsters <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 16;
  <span class="keywd">begin</span>
    rect(LEGEND_XPOS, 15 * PIXMAP_SIZE, width(curr_win) - LEGEND_XPOS,
        BORDER_DIST + PIXMAP_SIZE * 7, black);
    color(white, black);
    setPos(screen, 2 * line - 1, LEGEND_COLUMN);
    write(screen, <span class="stri">"You have killed"</span>);
    setPos(screen, 2 * line, LEGEND_COLUMN);
    write(screen, <span class="stri">"these Monsters"</span>);
    incr(line);
    <span class="keywd">if</span> <span class="op">not</span> monster[ANGRY_DEMON1].living <span class="op">or</span> <span class="op">not</span> monster[ANGRY_DEMON2].living <span class="keywd">then</span>
      objectLegend(monster[ANGRY_DEMON1], line);
      <span class="keywd">if</span> <span class="op">not</span> monster[ANGRY_DEMON1].living <span class="op">and</span> <span class="op">not</span> monster[ANGRY_DEMON2].living <span class="keywd">then</span>
        setPos(screen, 2 * line, LEGEND_COLUMN + 15);
        write(screen, <span class="stri">"two times"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      incr(line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> <span class="op">not</span> monster[UGLY_OGRE1].living <span class="op">or</span> <span class="op">not</span> monster[UGLY_OGRE2].living <span class="keywd">then</span>
      objectLegend(monster[UGLY_OGRE1], line);
      <span class="keywd">if</span> <span class="op">not</span> monster[UGLY_OGRE1].living <span class="op">and</span> <span class="op">not</span> monster[UGLY_OGRE2].living <span class="keywd">then</span>
        setPos(screen, 2 * line, LEGEND_COLUMN + 15);
        write(screen, <span class="stri">"two times"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      incr(line);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> BIG_SPIDER <span class="keywd">to</span> BAT <span class="keywd">do</span>
      <span class="keywd">if</span> <span class="op">not</span> monster[monster_ident].living <span class="op">and</span>
          monster[monster_ident].name &lt;> <span class="stri">""</span> <span class="keywd">then</span>
        objectLegend(monster[monster_ident], line);
        incr(line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> line = 17 <span class="keywd">then</span>
      color(white, black);
      setPos(screen, 2 * line, LEGEND_COLUMN);
      write(screen, <span class="stri">"NONE"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getInventoryStartLine <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: startLine <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    startLine := succ(sizeOfLegend);
    <span class="keywd">if</span> startLine &lt; INVENTORY_LINE <span class="keywd">then</span>
      startLine := INVENTORY_LINE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayInventoryItem (<span class="op">in</span> <span class="type">integer</span>: item_num) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: item_line <span class="keywd">is</span> 1;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
      <span class="keywd">if</span> item_ident <span class="op">in</span> player.inventory <span class="keywd">then</span>
        <span class="keywd">if</span> item_line = item_num <span class="keywd">then</span>
          objectLegend(item[item_ident], getInventoryStartLine + item_line);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        incr(item_line);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayInventoryList <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    line := succ(getInventoryStartLine);
    <span class="keywd">if</span> player.inventory = itemSet.EMPTY_SET <span class="keywd">then</span>
      color(white, black);
      setPos(screen, 2 * line, LEGEND_COLUMN);
      write(screen, <span class="stri">"Nothing"</span>);
      incr(line);
    <span class="keywd">else</span>
      <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
        <span class="keywd">if</span> item_ident <span class="op">in</span> player.inventory <span class="keywd">then</span>
          objectLegend(item[item_ident], line);
          incr(line);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayInventory <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: startLine <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    startLine := getInventoryStartLine;
    rect(LEGEND_XPOS, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
        182, PIXMAP_SIZE * (card(player.inventory) + 2), black);
    color(white, black);
    setPos(screen, 2 * startLine, LEGEND_COLUMN);
    write(screen, <span class="stri">"Inventory"</span>);
    displayInventoryList;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayMessage <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    rect(186, BUTTON_YPOS_MIN, 346, 70, black);
    color(screen, white, black);
    <span class="keywd">for</span> number <span class="keywd">range</span> 1 <span class="keywd">to</span> length(message) <span class="keywd">do</span>
      setPos(screen, BUTTON_TEXT_LINE1 + pred(number), 32);
      write(screen, message[number]);
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayCommands (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: bmp) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    put(curr_win, BUTTONS_1_XPOS, BUTTON_YPOS_MIN, load_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1, BUTTONS_1_COLUMN);
    write(screen, <span class="stri">"Load"</span>);
    put(curr_win, BUTTONS_1_XPOS, BUTTON_YPOS_MIN + 32, save_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1 + 2, BUTTONS_1_COLUMN);
    write(screen, <span class="stri">"Save"</span>);
    put(curr_win, BUTTONS_1_XPOS, BUTTON_YPOS_MIN + 64, exit_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1 + 4, BUTTONS_1_COLUMN);
    write(screen, <span class="stri">"Exit"</span>);
    put(curr_win, BUTTONS_2_XPOS, BUTTON_YPOS_MIN, take_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1, BUTTONS_2_COLUMN);
    write(screen, <span class="stri">"Take"</span>);
    put(curr_win, BUTTONS_2_XPOS, BUTTON_YPOS_MIN + 32, drop_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1 + 2, BUTTONS_2_COLUMN);
    write(screen, <span class="stri">"Drop"</span>);
    put(curr_win, BUTTONS_3_XPOS, BUTTON_YPOS_MIN, eye_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1, BUTTONS_3_COLUMN);
    write(screen, <span class="stri">"Look"</span>);
    put(curr_win, BUTTONS_3_XPOS, BUTTON_YPOS_MIN + 32, hand_pixmap);
    setPos(screen, BUTTON_TEXT_LINE1 + 2, BUTTONS_3_COLUMN);
    write(screen, <span class="stri">"Use"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: displayAll <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    clear(curr_win, black);
    displayRoom(room[player.room]);
    displayMessage;
    displayMonster;
    displayObj(player);
    displayLegend;
    displayInventory;
    displayCommands(curr_win);
    displayBox(white);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: floodTrap <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">string</span>: s1 <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">string</span>: s2 <span class="keywd">is</span> <span class="stri">""</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: number <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    s1 := room[WINDING_PASSAGE3].data[9];
    s2 := room[WINDING_PASSAGE3].data[10];

    s1 @:= [12] <span class="stri">'#'</span>;
    s1 @:= [24] <span class="stri">'#'</span>;
    s2 @:= [12] <span class="stri">'#'</span>;
    s2 @:= [24] <span class="stri">'#'</span>;

    room[WINDING_PASSAGE3].data[9] := s1;
    room[WINDING_PASSAGE3].data[10] := s2;
    <span class="keywd">for</span> number <span class="keywd">range</span> 13 <span class="keywd">to</span> 23 <span class="keywd">do</span>
      s1 @:= [number] <span class="stri">'~'</span>;
      s2 @:= [number] <span class="stri">'~'</span>;

      room[WINDING_PASSAGE3].data[9] := s1;
      room[WINDING_PASSAGE3].data[10] := s2;
      displayAll;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkRoom <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">case</span> player.room <span class="keywd">of</span>
      <span class="keywd">when</span> {WINDING_PASSAGE1}:
        room[WINDING_PASSAGE2].data[18] := <span class="stri">"   #################### "</span>;
      <span class="keywd">when</span> {WINDING_PASSAGE3}:
        room[WINDING_PASSAGE2].data[18] := <span class="stri">"   #################### "</span>;
        <span class="keywd">if</span> player.xPos = 544 <span class="op">and</span> <span class="op">not</span> NECKLACE <span class="op">in</span> player.inventory <span class="keywd">then</span>
          message := [] (<span class="stri">"You have sprung a Trap!!"</span>);
          displayAll;
          floodTrap;
          message &amp;:= [] (<span class="stri">"The room has filled with water and you drowned!"</span>);

          displayAll;

          player.living := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">when</span> {SECRET_ROOM}:
        room[WINDING_PASSAGE2].data[18] := <span class="stri">"   ########  ########## "</span>;
      <span class="keywd">when</span> {WINDING_PASSAGE2}:
        <span class="keywd">if</span> room[WINDING_PASSAGE2].data[18][12] = <span class="stri">'#'</span> <span class="op">and</span> player.yPos > 512 <span class="keywd">then</span>
          room[WINDING_PASSAGE2].data[18] := <span class="stri">"   ########  ########## "</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">when</span> {WEST_TOWER_MIDDLE}:
        room[SORCERERS_QUARTERS].data[8]  := <span class="stri">"######            |#    "</span>;
        room[SORCERERS_QUARTERS].data[9]  := <span class="stri">"                  |#    "</span>;
        room[SORCERERS_QUARTERS].data[10] := <span class="stri">"                  |#    "</span>;
        room[SORCERERS_QUARTERS].data[11] := <span class="stri">"######            |#    "</span>;
      <span class="keywd">when</span> {LABORATORY}:
        room[SORCERERS_QUARTERS].data[8]  := <span class="stri">"######             #####"</span>;
        room[SORCERERS_QUARTERS].data[9]  := <span class="stri">"                        "</span>;
        room[SORCERERS_QUARTERS].data[10] := <span class="stri">"                        "</span>;
        room[SORCERERS_QUARTERS].data[11] := <span class="stri">"######             #####"</span>;
      <span class="keywd">when</span> {SORCERERS_QUARTERS}:
        <span class="keywd">if</span> room[SORCERERS_QUARTERS].data[10][20] = <span class="stri">'#'</span> <span class="op">and</span> player.xPos > 544 <span class="keywd">then</span>
          room[SORCERERS_QUARTERS].data[8]  := <span class="stri">"######             #####"</span>;
          room[SORCERERS_QUARTERS].data[9]  := <span class="stri">"                        "</span>;
          room[SORCERERS_QUARTERS].data[10] := <span class="stri">"                        "</span>;
          room[SORCERERS_QUARTERS].data[11] := <span class="stri">"######             #####"</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: hideItem (<span class="op">in</span> <span class="type">itemObj</span>: anItem) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> anItem.room_num &lt;> NO_ROOM <span class="keywd">then</span>
      line   := succ(anItem.yPos <span class="op">div</span> PIXMAP_SIZE);
      column := succ(anItem.xPos <span class="op">div</span> PIXMAP_SIZE);
      room[anItem.room_num].data[line] @:= [column] <span class="stri">' '</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showItem (<span class="op">in</span> <span class="type">itemObj</span>: anItem) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> anItem.room_num &lt;> NO_ROOM <span class="keywd">then</span>
      line   := succ(anItem.yPos <span class="op">div</span> PIXMAP_SIZE);
      column := succ(anItem.xPos <span class="op">div</span> PIXMAP_SIZE);
      room[anItem.room_num].data[line] @:= [column] char <span class="op">conv</span> (anItem.ident);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: loadGame <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: load_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> fileType(<span class="stri">"castle.sav"</span>) = FILE_REGULAR <span class="keywd">then</span>
      <span class="keywd">if</span> isOkay([](<span class="stri">"Do you want to load a saved game."</span>, <span class="stri">"This will end the current game?"</span>)) <span class="keywd">then</span>
        load_file := open(<span class="stri">"castle.sav"</span>, <span class="stri">"r"</span>);
        <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
          readln(load_file, monster[monster_ident].adjective);
          readln(load_file, monster[monster_ident].xPos);
          readln(load_file, monster[monster_ident].yPos);
          readln(load_file, monster[monster_ident].strength);
          readln(load_file, monster[monster_ident].direction);
          readln(load_file, monster[monster_ident].living);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
          hideItem(item[item_ident]);
          readln(load_file, item[item_ident].xPos);
          readln(load_file, item[item_ident].yPos);
          readln(load_file, item[item_ident].room_num);
        <span class="keywd">end</span> <span class="keywd">for</span>;
        readln(load_file, player.xPos);
        readln(load_file, player.yPos);
        readln(load_file, player.room);
        readln(load_file, player.direction);
        readln(load_file, player.inventory);
        readln(load_file, player.strength);
        close(load_file);

        message := [] (<span class="stri">"Game Loaded Successful!"</span>);
        <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
          <span class="keywd">if</span> item_ident <span class="op">not</span> <span class="op">in</span> player.inventory <span class="keywd">then</span>
            showItem(item[item_ident]);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
        player.saved_pixmap := PRIMITIVE_WINDOW.value;
        checkRoom;
        displayAll;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      message := [] (<span class="stri">"There Is No Saved Game To Load!"</span>);
      displayMessage;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: saveGame <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">file</span>: save_file <span class="keywd">is</span> STD_NULL;
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> fileType(<span class="stri">"castle.sav"</span>) = FILE_REGULAR <span class="keywd">then</span>
      <span class="keywd">if</span> isOkay([](<span class="stri">"Do you want to overwrite the"</span>, <span class="stri">"game currently saved?"</span>)) <span class="keywd">then</span>
        removeFile(<span class="stri">"castle.sav"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">if</span> fileType(<span class="stri">"castle.sav"</span>) = FILE_ABSENT <span class="keywd">then</span>
      save_file := open(<span class="stri">"castle.sav"</span>, <span class="stri">"w"</span>);
      <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
        writeln(save_file, monster[monster_ident].adjective);
        writeln(save_file, monster[monster_ident].xPos);
        writeln(save_file, monster[monster_ident].yPos);
        writeln(save_file, monster[monster_ident].strength);
        writeln(save_file, monster[monster_ident].direction);
        writeln(save_file, monster[monster_ident].living);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
        writeln(save_file, item[item_ident].xPos);
        writeln(save_file, item[item_ident].yPos);
        writeln(save_file, item[item_ident].room_num);
      <span class="keywd">end</span> <span class="keywd">for</span>;
      writeln(save_file, player.xPos);
      writeln(save_file, player.yPos);
      writeln(save_file, player.room);
      writeln(save_file, player.direction);
      writeln(save_file, player.inventory);
      writeln(save_file, player.strength);
      close(save_file);

      message := [] (<span class="stri">"Game Saved Successful!"</span>);
      displayMessage;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">monsterType</span>: searchMonster (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monsterFound <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
      <span class="keywd">if</span> monster[monster_ident].room_num = player.room <span class="op">and</span>
          xPos >= monster[monster_ident].xPos <span class="op">and</span>
          xPos &lt; monster[monster_ident].xPos + PIXMAP_SIZE <span class="op">and</span>
          yPos >= monster[monster_ident].yPos <span class="op">and</span>
          yPos &lt; monster[monster_ident].yPos + PIXMAP_SIZE <span class="keywd">then</span>
        monsterFound := monster_ident;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">monsterType</span>: hitMonster (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monsterMet <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
      <span class="keywd">if</span> monster[monster_ident].room_num = player.room <span class="op">and</span> monster[monster_ident].living <span class="keywd">then</span>
        <span class="keywd">if</span> abs(xPos - monster[monster_ident].xPos) &lt; PIXMAP_SIZE <span class="op">and</span>
            abs(yPos - monster[monster_ident].yPos) &lt; PIXMAP_SIZE <span class="keywd">then</span>
          monsterMet := monster_ident;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">itemType</span>: selectItem (<span class="op">in</span> <span class="type">PRIMITIVE_WINDOW</span>: symbol, <span class="op">in</span> <span class="type">string</span>: name, <span class="op">in</span> <span class="type">integer</span>: invSize) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: itemSelected <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: startLine <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: position <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">integer</span>: count <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">boolean</span>: getCommand <span class="keywd">is</span> FALSE;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> card(player.inventory) >= invSize <span class="keywd">then</span>
      startLine := getInventoryStartLine;
      rect(LEGEND_XPOS, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
          PIXMAP_SIZE, PIXMAP_SIZE, black);
      box(LEGEND_XPOS - 3, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE - 3,
          187, succ(card(player.inventory))  * PIXMAP_SIZE + 6, light_red);
      rect(LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
          150, PIXMAP_SIZE, light_gray);
      put(curr_win, LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
          symbol);
      color(white, black);
      setPos(screen, 2 * startLine, LEGEND_COLUMN + 5);
      write(screen, name);
      displayInventoryList;
      position := 0;
      command := getc(KEYBOARD);
      <span class="keywd">while</span> command <span class="op">not</span> <span class="op">in</span> {<span class="stri">' '</span>, KEY_NL, KEY_ESC} <span class="keywd">do</span>
        getCommand := TRUE;
        rect(LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine + position) * PIXMAP_SIZE,
            150, PIXMAP_SIZE, black);
        <span class="keywd">if</span> position >= 1 <span class="keywd">then</span>
          displayInventoryItem(position);
        <span class="keywd">else</span>
          put(curr_win, LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
              symbol);
          color(white, black);
          setPos(screen, 2 * startLine, LEGEND_COLUMN + 5);
          write(screen, name);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> command = KEY_UP <span class="op">and</span> position > 1 <span class="keywd">then</span>
          decr(position);
        <span class="keywd">elsif</span> command = KEY_DOWN <span class="op">and</span> position &lt; card(player.inventory) <span class="keywd">then</span>
          incr(position);
        <span class="keywd">elsif</span> command = KEY_MOUSE1 <span class="keywd">then</span>
          xPos := clickedXPos(KEYBOARD);
          yPos := clickedYPos(KEYBOARD);
          <span class="keywd">if</span> xPos >= LEGEND_XPOS <span class="op">and</span> xPos &lt; LEGEND_XPOS + 128 <span class="op">and</span>
              yPos >= LEGEND_YPOS_MIN + startLine * PIXMAP_SIZE <span class="op">and</span>
              yPos &lt;= LEGEND_YPOS_MIN + (startLine + card(player.inventory)) * PIXMAP_SIZE <span class="keywd">then</span>
            position := (yPos - LEGEND_YPOS_MIN - startLine * PIXMAP_SIZE) <span class="op">div</span> 32 + 1;
          <span class="keywd">else</span>
            position := 0;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          command := <span class="stri">' '</span>;
          getCommand := FALSE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        rect(LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine + position) * PIXMAP_SIZE,
            150, PIXMAP_SIZE, light_gray);
        <span class="keywd">if</span> position >= 1 <span class="keywd">then</span>
          displayInventoryItem(position);
        <span class="keywd">else</span>
          put(curr_win, LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
              symbol);
          color(white, black);
          setPos(screen, 2 * startLine, LEGEND_COLUMN + 5);
          write(screen, name);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">if</span> getCommand <span class="keywd">then</span>
          command := getc(KEYBOARD);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">while</span>;
      rect(LEGEND_XPOS + PIXMAP_SIZE, LEGEND_YPOS_MIN + pred(startLine + position) * PIXMAP_SIZE,
          150, PIXMAP_SIZE, black);
      displayInventoryItem(position);
      <span class="keywd">if</span> position >= 1  <span class="op">and</span> command <span class="op">in</span> {<span class="stri">' '</span>, KEY_NL} <span class="keywd">then</span>
        count := 0;
        <span class="keywd">for</span> item_ident <span class="keywd">range</span> MIN_ITEM <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
          <span class="keywd">if</span> item_ident <span class="op">in</span> player.inventory <span class="keywd">then</span>
            incr(count);
            <span class="keywd">if</span> count = position <span class="keywd">then</span>
              itemSelected := item_ident;
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">for</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      rect(LEGEND_XPOS, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE,
          182, PIXMAP_SIZE, black);
      setPos(screen, 2 * startLine, LEGEND_COLUMN);
      color(white, black);
      write(screen, <span class="stri">"Inventory"</span>);
      box(LEGEND_XPOS - 3, LEGEND_YPOS_MIN + pred(startLine) * PIXMAP_SIZE - 3,
          187, succ(card(player.inventory))  * PIXMAP_SIZE + 6, black);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: dropItem (<span class="op">in</span> <span class="type">itemType</span>: item_ident) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">directionType</span>: direction <span class="keywd">is</span> NORTH;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;

  <span class="keywd">begin</span>
    direction := player.direction;
    <span class="keywd">repeat</span>
      <span class="keywd">if</span> direction = NORTH <span class="keywd">then</span>
        line :=   player.yPos               <span class="op">div</span> PIXMAP_SIZE;
        column := player.xPos               <span class="op">div</span> PIXMAP_SIZE + 1;
        incr(direction);
      <span class="keywd">elsif</span> direction = SOUTH <span class="keywd">then</span>
        line :=   (player.yPos + STEP_SIZE) <span class="op">div</span> PIXMAP_SIZE + 2;
        column := player.xPos               <span class="op">div</span> PIXMAP_SIZE + 1;
        incr(direction);
      <span class="keywd">elsif</span> direction = EAST <span class="keywd">then</span>
        line :=   player.yPos               <span class="op">div</span> PIXMAP_SIZE + 1;
        column := (player.xPos + STEP_SIZE) <span class="op">div</span> PIXMAP_SIZE + 2;
        incr(direction);
      <span class="keywd">elsif</span> direction = WEST <span class="keywd">then</span>
        line :=   player.yPos               <span class="op">div</span> PIXMAP_SIZE + 1;
        column := player.xPos               <span class="op">div</span> PIXMAP_SIZE;
        direction := NORTH;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> line >= 1 <span class="op">and</span> line &lt;= ROOM_LINES <span class="op">and</span>
        column >= 1 <span class="op">and</span> column &lt;= ROOM_COLUMNS <span class="op">and</span>
        room[player.room].data[line][column] = <span class="stri">' '</span> <span class="op">and</span>
        hitMonster(pred(column) * PIXMAP_SIZE, pred(line) * PIXMAP_SIZE) = NO_MONSTER <span class="op">or</span>
        direction = player.direction;
    <span class="keywd">if</span> room[player.room].data[line][column] = <span class="stri">' '</span> <span class="keywd">then</span>
      item[item_ident].xPos := pred(column) * PIXMAP_SIZE;
      item[item_ident].yPos := pred(line)   * PIXMAP_SIZE;
      item[item_ident].room_num := player.room;
      showItem(item[item_ident]);
      excl(player.inventory, item_ident);
      put(curr_win, BORDER_DIST + item[item_ident].xPos,
          BORDER_DIST + item[item_ident].yPos, getPixmap(item[item_ident]));
      displayLegend;
      displayInventory;
    <span class="keywd">else</span>
      displayInventory;
      message := [] (<span class="stri">"Something is in the way!"</span>);
      displayMessage;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: dropItem <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    item_ident := selectItem(drop_pixmap, <span class="stri">"Drop"</span>, 1);
    <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
      dropItem(item_ident);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: useItem (<span class="op">in</span> <span class="type">itemType</span>: item_ident) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: done <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">case</span> item_ident <span class="keywd">of</span>
      <span class="keywd">when</span> {BOOK}:
        <span class="keywd">if</span> GLASSES <span class="op">in</span> player.inventory <span class="keywd">then</span>
          message := [] (<span class="stri">"The book reads:"</span>,
                         <span class="stri">"  Wave Scepter"</span>);
        <span class="keywd">else</span>
          message := [] (<span class="stri">"You can't see well enough."</span>,
                         <span class="stri">"It's all Blurry."</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        done := TRUE;
      <span class="keywd">when</span> {CRYSTAL_BALL}:
        message := [] (<span class="stri">"In the Crystal Ball...."</span>,
                       <span class="stri">" You see a man in a winding passage, waving a Wand."</span>);
        done := TRUE;
      <span class="keywd">when</span> {HELMET}:
        message := [] (<span class="stri">"Ok. I'm wearing it."</span>);
        done := TRUE;
      <span class="keywd">when</span> {MAGIC_WAND}:
        <span class="keywd">if</span> player.room = WINDING_PASSAGE2 <span class="keywd">then</span>
          message := [] (<span class="stri">"As you wave the WAND...."</span>,
                         <span class="stri">"  There is a *Puff* of smoke Revealing a Secret passage!"</span>);
          room[WINDING_PASSAGE2].data[18] := <span class="stri">"   ########  ########## "</span>;
        <span class="keywd">elsif</span> player.room = SORCERERS_QUARTERS <span class="keywd">then</span>
          message := [] (<span class="stri">"As you wave the WAND...."</span>,
                         <span class="stri">"  There is a *Puff* of smoke Revealing a Secret passage!"</span>);
          room[SORCERERS_QUARTERS].data[8]  := <span class="stri">"######             #####"</span>;
          room[SORCERERS_QUARTERS].data[9]  := <span class="stri">"                        "</span>;
          room[SORCERERS_QUARTERS].data[10] := <span class="stri">"                        "</span>;
          room[SORCERERS_QUARTERS].data[11] := <span class="stri">"######             #####"</span>;
        <span class="keywd">else</span>
          message := [] (<span class="stri">"As you wave the WAND...."</span>,
                         <span class="stri">"  Nothing Happens!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        done := TRUE;
      <span class="keywd">when</span> {WINE_FLASK}:
        <span class="keywd">if</span> flaskFilled <span class="keywd">then</span>
          message := [] (<span class="stri">"That was good!"</span>,
                         <span class="stri">"I feel much better now!"</span>);
          player.strength := MAX_STRENGTH;
        <span class="keywd">else</span>
          message := [] (<span class="stri">"You don't have any WATER!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        done := TRUE;
      <span class="keywd">when</span> {HARP}:
        message := [] (<span class="stri">"The Harp makes Beautiful Music!"</span>);
        <span class="keywd">if</span> player.room = CORRIDOR52 <span class="op">or</span> player.room = CORRIDOR54 <span class="keywd">then</span>
          monster[FAIRY1].room_num := -1;
          monster[FAIRY1].living := FALSE;
          monster[FAIRY2].room_num := -1;
          monster[FAIRY2].living := FALSE;
          message := [] (<span class="stri">"The fairy likes the music and leaves!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        done := TRUE;
      <span class="keywd">when</span> {HOLY_CROSS}:
        <span class="keywd">if</span> player.room = CORRIDOR28 <span class="keywd">then</span>
          monster[VAMPIRE].room_num := -1;
          message := [] (<span class="stri">"The vampire sees the holy cross and disappears!"</span>);
          done := TRUE;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">when</span> {SCEPTER}:
        <span class="keywd">if</span> player.room = COURTYARD <span class="keywd">then</span>
          message := [] (<span class="stri">"As you wave the scepter..."</span>,
                         <span class="stri">"The Gate opens by itself!"</span>);
          room[COURTYARD].data[18] := <span class="stri">"##########    ##########"</span>;
        <span class="keywd">else</span>
          message := [] (<span class="stri">"As you wave the SCEPTER...."</span>,
                         <span class="stri">"  Nothing Happens!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        done := TRUE;
    <span class="keywd">end</span> <span class="keywd">case</span>;

    <span class="keywd">if</span> <span class="op">not</span> done <span class="keywd">then</span>
      message := [] (<span class="stri">"You look awful Silly waving that "</span> &amp; item[item_ident].name);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    displayAll;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: useItem <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    item_ident := selectItem(hand_pixmap, <span class="stri">"Use"</span>, 1);
    <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
      useItem(item_ident);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: getMonsterMessage (<span class="op">in</span> <span class="type">monsterType</span>: monster_ident) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: message <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">case</span> monster_ident <span class="keywd">of</span>
      <span class="keywd">when</span> {ANGRY_DEMON1, ANGRY_DEMON2, UGLY_OGRE1, UGLY_OGRE2,
          BIG_SPIDER, SMALL_SPIDER, SNAKE, BAT, VAMPIRE}:
        <span class="keywd">if</span> monster[monster_ident].living <span class="keywd">then</span>
          message := [] (<span class="stri">"look "</span> &amp; monster[monster_ident].name &amp; <span class="stri">":"</span>,
                         <span class="stri">"The "</span> &amp; monster[monster_ident].name &amp; <span class="stri">" looks Mean!"</span>);
        <span class="keywd">else</span>
          message := [] (<span class="stri">"look "</span> &amp; monster[monster_ident].name &amp; <span class="stri">":"</span>,
                         <span class="stri">"The "</span> &amp; monster[monster_ident].name &amp; <span class="stri">" looks Dead!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">when</span> {FAIRY1, FAIRY2}:
        message := [] (<span class="stri">"look "</span> &amp; monster[monster_ident].name &amp; <span class="stri">":"</span>,
                       <span class="stri">"The "</span> &amp; monster[monster_ident].name &amp; <span class="stri">" looks pretty but unhappy."</span>);
      <span class="keywd">when</span> {DOOR1, DOOR2, DOOR3, DOOR4}:
        message := [] (<span class="stri">"look door:"</span>,
                       <span class="stri">"It looks very Strong."</span>);
    <span class="keywd">end</span> <span class="keywd">case</span>;
 <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">array</span> <span class="type">string</span>: getItemMessage (<span class="op">in</span> <span class="type">itemType</span>: item_ident) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">array</span> <span class="type">string</span>: message <span class="keywd">is</span> 0 <span class="op">times</span> <span class="stri">""</span>;
  <span class="keywd">begin</span>
    <span class="keywd">case</span> item_ident <span class="keywd">of</span>
      <span class="keywd">when</span> {BOOK}:
        message := [] (<span class="stri">"It is titled"</span>,
                       <span class="stri">" 'The Gate'"</span>);
      <span class="keywd">when</span> {CRYSTAL_BALL}:
        message := [] (<span class="stri">"In the Crystal Ball...."</span>,
                       <span class="stri">" You see a man in a winding passage, waving a Wand."</span>);
      <span class="keywd">when</span> {GLASSES}:
        message := [] (<span class="stri">"They're Bifocals"</span>);
      <span class="keywd">when</span> {HELMET}:
        message := [] (<span class="stri">"It looks Tough!"</span>);
      <span class="keywd">when</span> {KEY}:
        message := [] (<span class="stri">"It looks Old!"</span>);
      <span class="keywd">when</span> {LAMP}:
        message := [] (<span class="stri">"It's lit Magically"</span>);
      <span class="keywd">when</span> {MAGIC_WAND}:
        message := [] (<span class="stri">"It looks Magical!"</span>);
      <span class="keywd">when</span> {SWORD}:
        message := [] (<span class="stri">"It looks Sharp!"</span>);
      <span class="keywd">when</span> {WINE_FLASK}:
        <span class="keywd">if</span> flaskFilled <span class="keywd">then</span>
          message := [] (<span class="stri">"It's filled with water."</span>);
        <span class="keywd">else</span>
          message := [] (<span class="stri">"It's empty."</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">when</span> {CROWN}:
        message := [] (<span class="stri">"It's made of Gold!"</span>);
      <span class="keywd">when</span> {DIAMOND}:
        message := [] (<span class="stri">"It looks Expensive!"</span>);
      <span class="keywd">when</span> {FANCY_GOBLET}:
        message := [] (<span class="stri">"It's made of Gold!"</span>);
      <span class="keywd">when</span> {GOLDBAR}:
        message := [] (<span class="stri">"It looks Expensive!"</span>);
      <span class="keywd">when</span> {HARP}:
        message := [] (<span class="stri">"It's made of Gold!"</span>);
      <span class="keywd">when</span> {HOLY_CROSS}:
        message := [] (<span class="stri">"It's made of Gold!"</span>);
      <span class="keywd">when</span> {HOURGLASS}:
        message := [] (<span class="stri">"It's made of Gold!"</span>);
      <span class="keywd">when</span> {JADE_FIGURINE}:
        message := [] (<span class="stri">"It looks Expensive!"</span>);
      <span class="keywd">when</span> {LARGE_GEM}:
        message := [] (<span class="stri">"It looks Expensive!"</span>);
      <span class="keywd">when</span> {NECKLACE}:
        message := [] (<span class="stri">"On the back it says:"</span>,
                       <span class="stri">"Protection from Traps."</span>);
      <span class="keywd">when</span> {RUBYS}:
        message := [] (<span class="stri">"They look Expensive!"</span>);
      <span class="keywd">when</span> {SCEPTER}:
        message := [] (<span class="stri">"It looks Expensive!"</span>);
      <span class="keywd">when</span> {SILVER_BARS}:
        message := [] (<span class="stri">"They look Expensive!"</span>);
    <span class="keywd">end</span> <span class="keywd">case</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">integer</span>: getScore <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">integer</span>: score <span class="keywd">is</span> 0;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> BAT <span class="keywd">do</span>
      <span class="keywd">if</span> <span class="op">not</span> monster[monster_ident].living <span class="keywd">then</span>
        score +:= 100;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">for</span> item_ident <span class="keywd">range</span> CROWN <span class="keywd">to</span> MAX_ITEM <span class="keywd">do</span>
      <span class="keywd">if</span> item_ident <span class="op">in</span> player.inventory <span class="op">or</span>
          item[item_ident].room_num = COURTYARD <span class="keywd">then</span>
        score +:= 50;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;
    <span class="keywd">if</span> player.room = ESCAPED <span class="keywd">then</span>
      score +:= 100;
    <span class="keywd">end</span> <span class="keywd">if</span>;

    <span class="keywd">if</span> score > highScore.points <span class="keywd">then</span>
      highScore.points := score;
      highScore.name := player.name;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: showStatus <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    rect(BUTTONS_1_XPOS, BUTTON_YPOS_MIN, 272, 128, black);
    box(BUTTONS_1_XPOS, BUTTON_YPOS_MIN, 272, 128, light_red);
    color(screen, white, black);
    <span class="keywd">if</span> player.room = ESCAPED <span class="keywd">then</span>
      setPos(screen, BUTTON_TEXT_LINE1, 100);
      write(screen, <span class="stri">"You've Escaped the Castle!"</span>);
    <span class="keywd">elsif</span> player.living <span class="keywd">then</span>
      setPos(screen, BUTTON_TEXT_LINE1, 100);
      write(screen, <span class="stri">"  Your current status:"</span>);
    <span class="keywd">else</span>
      setPos(screen, BUTTON_TEXT_LINE1, 100);
      write(screen, <span class="stri">"You have failed to Escape!"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
    rect(LEGEND_XPOS, 0, width(curr_win) - LEGEND_XPOS, height(curr_win), black);
    collectedTreasures;
    killedMonsters;
    setPos(screen, BUTTON_TEXT_LINE1 + 2, 105);
    write(screen, <span class="stri">"Your Score: "</span> &lt;&amp; getScore);
    setPos(screen, BUTTON_TEXT_LINE1 + 3, 104);
    write(screen, <span class="stri">"(1550 is perfect)"</span>);
    saveHighScore;
    setPos(screen, BUTTON_TEXT_LINE1 + 5, 104);
    write(screen, <span class="stri">"- Press any key -"</span>);
    <span class="keywd">repeat</span>
      command := upper(getc(KEYBOARD));
      <span class="keywd">if</span> command <span class="op">in</span> {<span class="stri">'Y'</span>, <span class="stri">'N'</span>} <span class="keywd">then</span>
        setPos(screen, BUTTON_TEXT_LINE1 + 6, 105);
        write(screen, <span class="stri">"(Except Y or N)"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">until</span> command <span class="op">not</span> <span class="op">in</span> {<span class="stri">'Y'</span>, <span class="stri">'N'</span>};
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: lookItemInRoom <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    xPos := clickedXPos(KEYBOARD);
    yPos := clickedYPos(KEYBOARD);
    xPos -:= BORDER_DIST;
    yPos -:= BORDER_DIST;
    line := succ(yPos <span class="op">div</span> PIXMAP_SIZE);
    column := succ(xPos <span class="op">div</span> PIXMAP_SIZE);
    <span class="keywd">if</span> line >= 1 <span class="op">and</span> line &lt;= ROOM_LINES <span class="op">and</span>
        column >= 1 <span class="op">and</span> column &lt;= ROOM_COLUMNS <span class="keywd">then</span>
      <span class="comment">(* writeln(xPos &lt;&amp; " " &lt;&amp; column);
      writeln(yPos &lt;&amp; " " &lt;&amp; line);
      writeln(" " &lt;&amp; room[player.room].data[line][column] &lt;&amp;
          " " &lt;&amp; ord(room[player.room].data[line][column])); *)</span>
      <span class="keywd">case</span> room[player.room].data[line][column] <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'#'</span>, <span class="stri">'&amp;'</span>}:
          <span class="keywd">if</span> player.room = COURTYARD <span class="keywd">then</span>
            <span class="keywd">if</span> highScore.name = <span class="stri">""</span> <span class="keywd">then</span>
              message := [] (<span class="stri">"look wall:"</span>,
                             <span class="stri">"Writing on the wall says..."</span>,
                             <span class="stri">"Highscore: "</span> &amp; str(highScore.points));
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look wall:"</span>,
                             <span class="stri">"Writing on the wall says..."</span>,
                             <span class="stri">"Highscore: "</span> &amp; str(highScore.points) &amp;
                             <span class="stri">" by "</span> &amp; highScore.name);
            <span class="keywd">end</span> <span class="keywd">if</span>;
            displayMessage;
            showStatus;
            displayCommands(curr_win);
            displayAll;
            message := 0 <span class="op">times</span> <span class="stri">""</span>;
          <span class="keywd">elsif</span> player.room = MAZE74 <span class="keywd">then</span>
            message := [] (<span class="stri">"look wall:"</span>,
                           <span class="stri">"The Wall Says:"</span>,
                           <span class="stri">"Kevin Bales was here!"</span>);
          <span class="keywd">else</span>
            message := [] (<span class="stri">"look wall:"</span>,
                           <span class="stri">"The WALLS are made of Gray Stone."</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">':'</span>, <span class="stri">';'</span>}:
          message := [] (<span class="stri">"look wall:"</span>,
                         <span class="stri">"The walls are many colors!"</span>);
        <span class="keywd">when</span> {<span class="stri">'K'</span>, <span class="stri">'B'</span>}:
          message := [] (<span class="stri">"look wall:"</span>,
                         <span class="stri">"The Wall Says:"</span>,
                         <span class="stri">"Kevin Bales was here!"</span>);
        <span class="keywd">when</span> {<span class="stri">'W'</span>}:
          message := [] (<span class="stri">"look bed:"</span>,
                         <span class="stri">"It's Old."</span>);
        <span class="keywd">when</span> {<span class="stri">'R'</span>}:
          message := [] (<span class="stri">"look bed:"</span>,
                         <span class="stri">"It's Red."</span>);
        <span class="keywd">when</span> {<span class="stri">'N'</span>}:
          message := [] (<span class="stri">"look bed:"</span>,
                         <span class="stri">"It's Blue."</span>);
        <span class="keywd">when</span> {<span class="stri">'P'</span>}:
          message := [] (<span class="stri">"look bed:"</span>,
                         <span class="stri">"It's Purple."</span>);
        <span class="keywd">when</span> {<span class="stri">'Y'</span>}:
          message := [] (<span class="stri">"look bed:"</span>,
                         <span class="stri">"It's Yellow."</span>);
        <span class="keywd">when</span> {<span class="stri">'U'</span>}:
          message := [] (<span class="stri">"look staircase:"</span>,
                         <span class="stri">"The Staircase leads up."</span>);
        <span class="keywd">when</span> {<span class="stri">'D'</span>}:
          message := [] (<span class="stri">"look staircase:"</span>,
                         <span class="stri">"The Staircase leads down."</span>);
        <span class="keywd">when</span> {<span class="stri">'='</span>}:
          message := [] (<span class="stri">"look gate:"</span>,
                         <span class="stri">"It looks very Strong."</span>);
        <span class="keywd">when</span> {<span class="stri">'>'</span>}:
          message := [] (<span class="stri">"look balcony:"</span>,
                         <span class="stri">"The balcony is made of stone."</span>);
        <span class="keywd">when</span> {<span class="stri">'?'</span>}:
          <span class="keywd">if</span> player.room = GARDEN_SOUTH <span class="keywd">then</span>
            message := [] (<span class="stri">"look fountain:"</span>,
                           <span class="stri">"The fountain is filled with water."</span>,
                           <span class="stri">"But you can't see In it."</span>);
          <span class="keywd">elsif</span> player.room = BALCONY <span class="keywd">then</span>
            <span class="keywd">if</span> item[LARGE_GEM].room_num = NO_ROOM <span class="op">and</span> <span class="op">not</span> LARGE_GEM <span class="op">in</span> player.inventory <span class="keywd">then</span>
              message := [] (<span class="stri">"look fountain:"</span>,
                             <span class="stri">"There is a BIG Gem in the Garden Fountain!"</span>);
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look fountain:"</span>,
                             <span class="stri">"The Garden Has A Fountain in the middle."</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'{'</span>}:
          message := [] (<span class="stri">"look chains:"</span>,
                         <span class="stri">"They look Magical!"</span>);
        <span class="keywd">when</span> {<span class="stri">'$'</span>}:
          <span class="keywd">if</span> item[NECKLACE].room_num = NO_ROOM <span class="op">and</span> <span class="op">not</span> NECKLACE <span class="op">in</span> player.inventory <span class="keywd">then</span>
            message := [] (<span class="stri">"look statue:"</span>,
                           <span class="stri">"The statue is wearing a Necklace"</span>);
          <span class="keywd">else</span>
            message := [] (<span class="stri">"look statue:"</span>,
                           <span class="stri">"The statue looks like The King!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'%'</span>}:
          <span class="keywd">if</span> player.room = KITCHEN <span class="keywd">then</span>
            message := [] (<span class="stri">"look table:"</span>,
                           <span class="stri">"It's made of Stone."</span>);
          <span class="keywd">elsif</span> player.room = THRONE_ROOM <span class="keywd">then</span>
            message := [] (<span class="stri">"look throne:"</span>,
                           <span class="stri">"The throne is made of Stone."</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'@'</span>}:
          <span class="keywd">if</span> player.room = CHEFS_QUARTERS <span class="keywd">then</span>
            <span class="keywd">if</span> item[WINE_FLASK].room_num = NO_ROOM <span class="op">and</span> <span class="op">not</span> WINE_FLASK <span class="op">in</span> player.inventory <span class="keywd">then</span>
              put(curr_win, BORDER_DIST + item[WINE_FLASK].xPos,
                  BORDER_DIST + item[WINE_FLASK].yPos, getPixmap(item[WINE_FLASK]));
              message := [] (<span class="stri">"look desk:"</span>,
                             <span class="stri">"There is a Wine Flask on top."</span>);
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look desk:"</span>,
                             <span class="stri">"It's made of Wood."</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> player.room = YELLOW_ROOM <span class="keywd">then</span>
            <span class="keywd">if</span> item[GLASSES].room_num = NO_ROOM <span class="op">and</span> <span class="op">not</span> GLASSES <span class="op">in</span> player.inventory <span class="keywd">then</span>
              put(curr_win, BORDER_DIST + item[GLASSES].xPos,
                  BORDER_DIST + item[GLASSES].yPos, getPixmap(item[GLASSES]));
              message := [] (<span class="stri">"look desk:"</span>,
                             <span class="stri">"There is a Pair of Eye Glasses on Top."</span>);
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look desk:"</span>,
                             <span class="stri">"It's made of Wood."</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> player.room = KINGS_STUDY <span class="keywd">then</span>
            <span class="keywd">if</span> item[KEY].room_num = NO_ROOM <span class="op">and</span> <span class="op">not</span> KEY <span class="op">in</span> player.inventory <span class="keywd">then</span>
              put(curr_win, BORDER_DIST + item[KEY].xPos,
                  BORDER_DIST + item[KEY].yPos, getPixmap(item[KEY]));
              message := [] (<span class="stri">"look desk:"</span>,
                             <span class="stri">"There is a Key on top."</span>);
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look desk:"</span>,
                             <span class="stri">"It's made of Wood."</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> player.room = LIBRARY_WEST_END <span class="keywd">then</span>
            <span class="keywd">if</span> item[BOOK].room_num = NO_ROOM <span class="op">and</span> <span class="op">not</span> BOOK <span class="op">in</span> player.inventory <span class="keywd">then</span>
              put(curr_win, BORDER_DIST + item[BOOK].xPos,
                  BORDER_DIST + item[BOOK].yPos, getPixmap(item[BOOK]));
              message := [] (<span class="stri">"look shelves:"</span>,
                             <span class="stri">"There's a book on one."</span>);
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look shelves:"</span>,
                             <span class="stri">"They're made of wood."</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">elsif</span> player.room = LIBRARY_EAST_END <span class="keywd">then</span>
            message := [] (<span class="stri">"look shelves:"</span>,
                           <span class="stri">"They're made of wood."</span>);
          <span class="keywd">elsif</span> player.room = STORAGE_ROOM <span class="keywd">then</span>
            message := [] (<span class="stri">"look shelves:"</span>,
                           <span class="stri">"They're made of wood."</span>);
          <span class="keywd">elsif</span> player.room = WINE_CELLAR <span class="keywd">then</span>
            message := [] (<span class="stri">"look barrels:"</span>,
                           <span class="stri">"They look Old!"</span>);
          <span class="keywd">elsif</span> player.room = TORTURE_ROOM <span class="keywd">then</span>
            message := [] (<span class="stri">"look table:"</span>,
                           <span class="stri">"It's covered with Blood!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'|'</span>}:
          <span class="keywd">if</span> player.room = SORCERERS_QUARTERS <span class="keywd">then</span>
            message := [] (<span class="stri">"look mirror:"</span>,
                           <span class="stri">"It looks Magical!"</span>);
          <span class="keywd">elsif</span> player.room = BALCONY <span class="keywd">then</span>
            message := [] (<span class="stri">"look balcony:"</span>,
                           <span class="stri">"The balcony is made of stone."</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'+'</span>}:
          message := [] (<span class="stri">"look bush:"</span>,
                         <span class="stri">"This is a small bush."</span>);
        <span class="keywd">when</span> {<span class="stri">'*'</span>}:
          message := [] (<span class="stri">"look bush:"</span>,
                         <span class="stri">"This is a big bush."</span>);
        <span class="keywd">when</span> {<span class="stri">'a'</span> .. <span class="stri">'z'</span>}:
          item_ident := itemType <span class="op">conv</span> (room[player.room].data[line][column]);
          <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
            message := [] (<span class="stri">"look "</span> &amp; item[item_ident].name &amp; <span class="stri">":"</span>);
            message &amp;:= getItemMessage(item_ident);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">' '</span>}:
          monster_ident := searchMonster(xPos, yPos);
          <span class="keywd">if</span> monster_ident &lt;> NO_MONSTER <span class="keywd">then</span>
            message := getMonsterMessage(monster_ident);
          <span class="keywd">elsif</span> xPos >= player.xPos <span class="op">and</span>
              xPos &lt; player.xPos + PIXMAP_SIZE <span class="op">and</span>
              yPos >= player.yPos <span class="op">and</span>
              yPos &lt; player.yPos + PIXMAP_SIZE <span class="keywd">then</span>
            <span class="keywd">if</span> player.room = SORCERERS_QUARTERS <span class="op">and</span>
                room[SORCERERS_QUARTERS].data[10][20] = <span class="stri">'#'</span> <span class="keywd">then</span>
              message := [] (<span class="stri">"look player:"</span>,
                             <span class="stri">"You see an ugly face in the mirror."</span>);
            <span class="keywd">else</span>
              message := [] (<span class="stri">"look player:"</span>,
                             <span class="stri">"This is only possible with a mirror."</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            message := [] (<span class="stri">"look floor:"</span>,
                           <span class="stri">"The FLOORS are made of Gray Stone."</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: lookItem <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
  <span class="keywd">begin</span>
    displayBox(light_red);
    message := [] (<span class="stri">"look"</span>);
    displayMessage;
    message := 0 <span class="op">times</span> <span class="stri">""</span>;
    item_ident := selectItem(eye_pixmap, <span class="stri">"Look at"</span>, 0);
    <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
      message := [] (<span class="stri">"look "</span> &amp; item[item_ident].name &amp; <span class="stri">":"</span>);
      message &amp;:= getItemMessage(item_ident);
    <span class="keywd">else</span>
      lookItemInRoom;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    displayMessage;
    displayBox(white);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: welcomeScreen <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    clear(curr_win, black);
    displayRoom(room[CASTLE]);
    setPos(screen, 5, 63);
    writeln(screen, <span class="stri">"C A S T L E"</span>);
    setPos(screen, 7, 49);
    writeln(screen, <span class="stri">"Copyright (C) 2004, 2005  Thomas Mertes"</span>);
    setPos(screen, 9, 49);
    writeln(screen, <span class="stri">"This program is free software under the"</span>);
    setPos(screen, 10, 49);
    writeln(screen, <span class="stri">"terms of the GNU General Public License"</span>);
    setPos(screen, 12, 43);
    writeln(screen, <span class="stri">"Castle is written in the Seed7 programming language"</span>);
    setPos(screen, 13, 48);
    writeln(screen, <span class="stri">"Homepage:    http://seed7.sourceforge.net"</span>);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: endOfGame <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    showStatus;
    setPos(screen, BUTTON_TEXT_LINE1 + 5, 104);
    write(screen, <span class="stri">"Play Again (Y/N)?"</span>);
    setPos(screen, BUTTON_TEXT_LINE1 + 6, 105);
    write(screen, <span class="stri">"               "</span>);
    <span class="keywd">repeat</span>
      command := upper(getc(KEYBOARD));
    <span class="keywd">until</span> command <span class="op">in</span> {<span class="stri">'Y'</span>, <span class="stri">'N'</span>};
    <span class="keywd">if</span> command = <span class="stri">'Y'</span> <span class="keywd">then</span>
      initGame;
      displayAll;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: getField (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: field <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    line := succ(yPos <span class="op">div</span> PIXMAP_SIZE);
    column := succ(xPos <span class="op">div</span> PIXMAP_SIZE);
    field := room[player.room].data[line][column];
    <span class="keywd">if</span> field = <span class="stri">' '</span> <span class="keywd">then</span>
      <span class="keywd">if</span> xPos <span class="op">rem</span> PIXMAP_SIZE &lt;> 0 <span class="keywd">then</span>
        field := room[player.room].data[line][succ(column)];
        <span class="keywd">if</span> field = <span class="stri">' '</span> <span class="keywd">then</span>
          <span class="keywd">if</span> yPos <span class="op">rem</span> PIXMAP_SIZE &lt;> 0 <span class="keywd">then</span>
            field := room[player.room].data[succ(line)][column];
            <span class="keywd">if</span> field = <span class="stri">' '</span> <span class="keywd">then</span>
              field := room[player.room].data[succ(line)][succ(column)];
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        <span class="keywd">if</span> yPos <span class="op">rem</span> PIXMAP_SIZE &lt;> 0 <span class="keywd">then</span>
          field := room[player.room].data[succ(line)][column];
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: checkField (<span class="keywd">inout</span> <span class="type">char</span>: field) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> field &lt;> <span class="stri">' '</span> <span class="keywd">then</span>
      <span class="keywd">if</span> field = <span class="stri">'='</span> <span class="keywd">then</span>
        <span class="keywd">if</span> player.room = COURTYARD <span class="keywd">then</span>
          message := [] (<span class="stri">"The Gate is locked."</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
        displayMessage;
      <span class="keywd">elsif</span> field <span class="op">in</span> {<span class="stri">'a'</span> .. <span class="stri">'z'</span>} <span class="keywd">then</span>
        item_ident := itemType <span class="op">conv</span> field;
        <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
          <span class="keywd">if</span> card(player.inventory) &lt; MAX_INVENTORY <span class="keywd">then</span>
            line := succ(item[item_ident].yPos <span class="op">div</span> PIXMAP_SIZE);
            column := succ(item[item_ident].xPos <span class="op">div</span> PIXMAP_SIZE);
            room[player.room].data[line] @:= [column] <span class="stri">' '</span>;
            field := <span class="stri">' '</span>;
            incl(player.inventory, item_ident);
            put(curr_win, BORDER_DIST + pred(column) * PIXMAP_SIZE,
                BORDER_DIST + pred(line) * PIXMAP_SIZE, floor_pixmap);
            displayLegend;
            displayInventory;
            message := 0 <span class="op">times</span> <span class="stri">""</span>;
          <span class="keywd">else</span>
            message := [] (<span class="stri">"take "</span> &amp; item[item_ident].name &amp; <span class="stri">":"</span>,
                           <span class="stri">"Can't carry any more!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          displayMessage;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">char</span>: hitWall (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">char</span>: field <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    field := getField(xPos, yPos);
    checkField(field);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: checkCollision (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: collision <span class="keywd">is</span> FALSE;
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: ch <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    ch := getField(xPos, yPos);
    collision := ch &lt;> <span class="stri">' '</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">func</span> <span class="type">boolean</span>: hitPlayer (<span class="op">in</span> <span class="type">graphObj</span>: obj1, <span class="op">in</span> <span class="type">graphObj</span>: obj2) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">result</span>
    <span class="keywd">var</span> <span class="type">boolean</span>: hit <span class="keywd">is</span> FALSE;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> abs(obj1.xPos - obj2.xPos) &lt; PIXMAP_SIZE <span class="op">and</span>
        abs(obj1.yPos - obj2.yPos) &lt; PIXMAP_SIZE <span class="keywd">then</span>
      hit := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveMonsters <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: x_diff <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: y_diff <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">monsterType</span>: current_monster <span class="keywd">is</span> NO_MONSTER;
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    <span class="keywd">for</span> monster_ident <span class="keywd">range</span> MIN_MONSTER <span class="keywd">to</span> MAX_MONSTER <span class="keywd">do</span>
      <span class="keywd">if</span>  monster[monster_ident].room_num = player.room <span class="op">and</span>
          monster[monster_ident].living <span class="keywd">then</span>
        x_diff := monster[monster_ident].xPos - player.xPos;
        y_diff := monster[monster_ident].yPos - player.yPos;

        <span class="keywd">if</span> abs(x_diff) >= abs(y_diff) <span class="keywd">then</span>
          <span class="keywd">if</span> x_diff >= 0 <span class="keywd">then</span>
            monster[monster_ident].direction := WEST;
          <span class="keywd">else</span>
            monster[monster_ident].direction := EAST;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          <span class="keywd">if</span> y_diff >= 0 <span class="keywd">then</span>
            monster[monster_ident].direction := NORTH;
          <span class="keywd">else</span>
            monster[monster_ident].direction := SOUTH;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;

        <span class="keywd">if</span> monster_ident &lt;= BAT <span class="keywd">then</span>
          <span class="keywd">if</span> monster[monster_ident].yPos > player.yPos <span class="keywd">then</span>
            monster[monster_ident].yPos -:= 8;
            <span class="keywd">if</span> hitPlayer(player, monster[monster_ident]) <span class="keywd">then</span>
              current_monster := monster_ident;
              monster[monster_ident].yPos +:= 8;
            <span class="keywd">elsif</span> checkCollision(monster[monster_ident].xPos, monster[monster_ident].yPos) <span class="keywd">then</span>
              monster[monster_ident].yPos +:= 8;
            <span class="keywd">else</span>
              displayObj(monster[monster_ident]);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> monster[monster_ident].yPos &lt; player.yPos <span class="keywd">then</span>
            monster[monster_ident].yPos +:= 8;
            <span class="keywd">if</span> hitPlayer(player, monster[monster_ident]) <span class="keywd">then</span>
              current_monster := monster_ident;
              monster[monster_ident].yPos -:= 8;
            <span class="keywd">elsif</span> checkCollision(monster[monster_ident].xPos, monster[monster_ident].yPos) <span class="keywd">then</span>
              monster[monster_ident].yPos -:= 8;
            <span class="keywd">else</span>
              displayObj(monster[monster_ident]);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> monster[monster_ident].xPos > player.xPos <span class="keywd">then</span>
            monster[monster_ident].xPos -:= 8;
            <span class="keywd">if</span> hitPlayer(player, monster[monster_ident]) <span class="keywd">then</span>
              current_monster := monster_ident;
              monster[monster_ident].xPos +:= 8;
            <span class="keywd">elsif</span> checkCollision(monster[monster_ident].xPos, monster[monster_ident].yPos) <span class="keywd">then</span>
              monster[monster_ident].xPos +:= 8;
            <span class="keywd">else</span>
              displayObj(monster[monster_ident]);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> monster[monster_ident].xPos &lt; player.xPos <span class="keywd">then</span>
            monster[monster_ident].xPos +:= 8;
            <span class="keywd">if</span> hitPlayer(player, monster[monster_ident]) <span class="keywd">then</span>
              current_monster := monster_ident;
              monster[monster_ident].xPos -:= 8;
            <span class="keywd">elsif</span> checkCollision(monster[monster_ident].xPos, monster[monster_ident].yPos) <span class="keywd">then</span>
              monster[monster_ident].xPos -:= 8;
            <span class="keywd">else</span>
              displayObj(monster[monster_ident]);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">for</span>;

    <span class="keywd">if</span> current_monster > NO_MONSTER <span class="keywd">then</span>
      <span class="keywd">if</span> rand(1, 10) &lt;= 4 <span class="keywd">then</span>
       player.strength -:= monster[current_monster].attack;
        <span class="keywd">if</span> player.strength &lt; 1 <span class="keywd">then</span>
          message &amp;:= [] (<span class="stri">"The "</span> &amp; monster[current_monster].name &amp; <span class="stri">" has killed you!"</span>);
          player.living := FALSE;
        <span class="keywd">else</span>
          message &amp;:= [] (<span class="stri">"The "</span> &amp; monster[current_monster].name &amp; <span class="stri">" struck you!"</span>);
          <span class="keywd">if</span> rand(1, 2) = 1 <span class="op">and</span> HELMET <span class="op">in</span> player.inventory <span class="keywd">then</span>
            player.strength +:= monster[current_monster].attack;
            message &amp;:= [] (<span class="stri">"The Helmet helped."</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        message &amp;:= [] (<span class="stri">"The "</span> &amp; monster[current_monster].name &amp; <span class="stri">" missed you!"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
      displayMessage;
      message := 0 <span class="op">times</span> <span class="stri">""</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: enterRoom (<span class="op">in</span> <span class="type">integer</span>: room_number) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    message := 0 <span class="op">times</span> <span class="stri">""</span>;
    player.room := room_number;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveDelta (<span class="op">in</span> <span class="type">integer</span>: delta_x, <span class="op">in</span> <span class="type">integer</span>: delta_y) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: field <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">directionType</span>: stair <span class="keywd">is</span> NORTH;
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    field := hitWall(player.xPos + delta_x, player.yPos + delta_y);
    <span class="keywd">if</span> field &lt;> <span class="stri">' '</span> <span class="keywd">then</span>
      <span class="keywd">if</span> field = <span class="stri">'U'</span> <span class="keywd">then</span>
        stair := UP;
      <span class="keywd">elsif</span> field = <span class="stri">'D'</span> <span class="keywd">then</span>
        stair := DOWN;
      <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">if</span> stair <span class="op">in</span> {UP, DOWN} <span class="op">and</span> room[player.room].exits[stair] &lt;> 0 <span class="keywd">then</span>
        <span class="keywd">if</span> room[player.room].exits[stair] <span class="op">in</span> {WINE_CELLAR, DUNGEON_ENTRANCE} <span class="op">and</span>
            <span class="op">not</span> LAMP <span class="op">in</span> player.inventory <span class="keywd">then</span>
          message := [] (<span class="stri">"It's too dark to go that way!"</span>);
          displayMessage;
        <span class="keywd">else</span>
          enterRoom(room[player.room].exits[stair]);
          player.saved_pixmap := PRIMITIVE_WINDOW.value;
          displayAll;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      monster_ident := hitMonster(player.xPos + delta_x, player.yPos + delta_y);
      <span class="keywd">if</span> monster_ident &lt;> NO_MONSTER <span class="keywd">then</span>
        <span class="keywd">if</span> monster_ident &lt;= BAT <span class="keywd">then</span>
          <span class="keywd">if</span> SWORD <span class="op">in</span> player.inventory <span class="keywd">then</span>
            <span class="keywd">if</span> rand(1, 10) &lt;= 4 <span class="keywd">then</span>
              monster[monster_ident].strength -:= rand(10, 19);
              message := [] (<span class="stri">"You struck the "</span> &amp; monster[monster_ident].name &amp; <span class="stri">"!"</span>);
              <span class="keywd">if</span> monster[monster_ident].strength &lt; 1 <span class="keywd">then</span>
                message := [] (<span class="stri">"You killed the "</span> &amp; monster[monster_ident].name &amp; <span class="stri">"!"</span>);
                monster[monster_ident].living := FALSE;
                monster[monster_ident].adjective := <span class="stri">"Dead"</span>;
                displayLegend;
                displayInventory;
              <span class="keywd">end</span> <span class="keywd">if</span>;
            <span class="keywd">else</span>
              message := [] (<span class="stri">"You missed the "</span> &amp; monster[monster_ident].name &amp; <span class="stri">"!"</span>);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">else</span>
            message := [] (<span class="stri">"You have no Weapon"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          displayMessage;
        <span class="keywd">elsif</span> monster_ident = VAMPIRE <span class="keywd">then</span>
          message := [] (<span class="stri">"The "</span> &amp; monster[monster_ident].name &amp; <span class="stri">" is blocking your way."</span>,
                         <span class="stri">"He can't be hurt!"</span>);
          displayMessage;
        <span class="keywd">elsif</span> monster_ident = FAIRY1 <span class="op">or</span>
            monster_ident = FAIRY2 <span class="keywd">then</span>
          message := [] (<span class="stri">"The "</span> &amp; monster[monster_ident].name &amp; <span class="stri">" is blocking your way."</span>,
                         <span class="stri">"She can't be hurt!"</span>);
          displayMessage;
        <span class="keywd">elsif</span> monster_ident = DOOR1 <span class="op">or</span>
            monster_ident = DOOR2 <span class="keywd">then</span>
          <span class="keywd">if</span> KEY <span class="op">in</span> player.inventory <span class="keywd">then</span>
            monster[DOOR1].living := FALSE;
            monster[DOOR2].living := FALSE;
            monster[DOOR1].adjective := <span class="stri">"Open"</span>;
            message := [] (<span class="stri">"You open the door with the key"</span>);
            displayMessage;
          <span class="keywd">else</span>
            message := [] (<span class="stri">"The door is locked"</span>);
            displayMessage;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">elsif</span> monster_ident = DOOR3 <span class="op">or</span>
            monster_ident = DOOR4 <span class="keywd">then</span>
          <span class="keywd">if</span> KEY <span class="op">in</span> player.inventory <span class="keywd">then</span>
            monster[DOOR3].living := FALSE;
            monster[DOOR4].living := FALSE;
            monster[DOOR3].adjective := <span class="stri">"Open"</span>;
            message := [] (<span class="stri">"You open the door with the key"</span>);
            displayMessage;
          <span class="keywd">else</span>
            message := [] (<span class="stri">"The door is locked"</span>);
            displayMessage;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        player.xPos +:= delta_x;
        player.yPos +:= delta_y;
        displayObj(player);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: move (<span class="op">in</span> <span class="type">directionType</span>: direction) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    player.direction := direction;
    <span class="keywd">if</span> player.direction = WEST <span class="keywd">then</span>
      <span class="keywd">if</span> player.xPos - STEP_SIZE &lt; 0 <span class="keywd">then</span>
        <span class="keywd">if</span> room[player.room].exits[WEST] &lt;> 0 <span class="keywd">then</span>
          enterRoom(room[player.room].exits[WEST]);
          player.saved_pixmap := PRIMITIVE_WINDOW.value;
          player.xPos := 736;
          displayAll;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        moveDelta(-STEP_SIZE, 0);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> player.direction = EAST <span class="keywd">then</span>
      <span class="keywd">if</span> player.xPos + STEP_SIZE > 736 <span class="keywd">then</span>
        <span class="keywd">if</span> room[player.room].exits[EAST] &lt;> 0 <span class="keywd">then</span>
          enterRoom(room[player.room].exits[EAST]);
          player.saved_pixmap := PRIMITIVE_WINDOW.value;
          player.xPos := 0;
          displayAll;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        moveDelta(STEP_SIZE, 0);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> player.direction = NORTH <span class="keywd">then</span>
      <span class="keywd">if</span> player.yPos - STEP_SIZE &lt; 0 <span class="keywd">then</span>
        <span class="keywd">if</span> room[player.room].exits[NORTH] &lt;> 0 <span class="keywd">then</span>
          enterRoom(room[player.room].exits[NORTH]);
          player.saved_pixmap := PRIMITIVE_WINDOW.value;
          player.yPos := 544;
          displayAll;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        moveDelta(0, -STEP_SIZE);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">elsif</span> player.direction = SOUTH <span class="keywd">then</span>
      <span class="keywd">if</span> player.yPos + STEP_SIZE > 544 <span class="keywd">then</span>
        <span class="keywd">if</span> room[player.room].exits[SOUTH] &lt;> 0 <span class="keywd">then</span>
          enterRoom(room[player.room].exits[SOUTH]);
          player.saved_pixmap := PRIMITIVE_WINDOW.value;
          player.yPos := 0;
          displayAll;
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        moveDelta(0, STEP_SIZE);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: moveTo (<span class="op">in</span> <span class="type">integer</span>: xPos, <span class="op">in</span> <span class="type">integer</span>: yPos) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">integer</span>: old_x <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: old_y <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: old_room <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">time</span>: curr_time <span class="keywd">is</span> time.value;
  <span class="keywd">begin</span>
    <span class="keywd">if</span> abs(xPos - player.xPos) > STEP_SIZE <span class="op">div</span> 2 <span class="op">or</span>
        abs(yPos - player.yPos) > STEP_SIZE <span class="op">div</span> 2 <span class="keywd">then</span>
      old_room := player.room;
      <span class="keywd">repeat</span>
        curr_time := time(NOW);
        old_x := player.xPos;
        old_y := player.yPos;
        <span class="keywd">if</span> abs(xPos - player.xPos) > abs(yPos - player.yPos) <span class="keywd">then</span>
          <span class="keywd">if</span> xPos > player.xPos <span class="keywd">then</span>
            move(EAST);
          <span class="keywd">else</span>
            move(WEST);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> abs(yPos - player.yPos) > STEP_SIZE <span class="op">div</span> 2 <span class="op">and</span>
              old_x = player.xPos <span class="op">and</span> old_y = player.yPos <span class="keywd">then</span>
            <span class="keywd">if</span> yPos > player.yPos <span class="keywd">then</span>
              move(SOUTH);
            <span class="keywd">else</span>
              move(NORTH);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">else</span>
          <span class="keywd">if</span> yPos > player.yPos <span class="keywd">then</span>
            move(SOUTH);
          <span class="keywd">else</span>
            move(NORTH);
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> abs(xPos - player.xPos) > STEP_SIZE <span class="op">div</span> 2 <span class="op">and</span>
              old_x = player.xPos <span class="op">and</span> old_y = player.yPos <span class="keywd">then</span>
            <span class="keywd">if</span> xPos > player.xPos <span class="keywd">then</span>
              move(EAST);
            <span class="keywd">else</span>
              move(WEST);
            <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">end</span> <span class="keywd">if</span>;
        checkRoom;
        moveMonsters;
        flushGraphic;
        await(curr_time + 30000 . MICRO_SECONDS);
      <span class="keywd">until</span> abs(xPos - player.xPos) &lt;= STEP_SIZE <span class="op">div</span> 2 <span class="op">and</span>
          abs(yPos - player.yPos) &lt;= STEP_SIZE <span class="op">div</span> 2 <span class="op">or</span>
          old_x = player.xPos <span class="op">and</span> old_y = player.yPos <span class="op">or</span>
          old_room &lt;> player.room <span class="op">or</span> inputReady(KEYBOARD);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: takeItem (<span class="op">in</span> <span class="type">itemType</span>: item_ident, <span class="op">in</span> <span class="type">string</span>: name,
    <span class="op">in</span> <span class="type">integer</span>: line, <span class="op">in</span> <span class="type">integer</span>: column) <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> item[item_ident].xPos = pred(column) * PIXMAP_SIZE <span class="op">and</span>
        item[item_ident].yPos = pred(line) * PIXMAP_SIZE <span class="op">and</span>
        item[item_ident].room_num = NO_ROOM <span class="op">and</span>
        <span class="op">not</span> item_ident <span class="op">in</span> player.inventory <span class="keywd">then</span>
      message := [] (<span class="stri">"take "</span> &amp; item[item_ident].name);
      displayMessage;
      message := 0 <span class="op">times</span> <span class="stri">""</span>;
      moveTo(pred(column) * PIXMAP_SIZE, pred(line) * PIXMAP_SIZE);
      <span class="keywd">if</span> abs(succ(player.yPos <span class="op">div</span> PIXMAP_SIZE) - line) &lt;= 2 <span class="op">and</span>
          abs(succ(player.xPos <span class="op">div</span> PIXMAP_SIZE) - column) &lt;= 2 <span class="keywd">then</span>
        <span class="keywd">if</span> card(player.inventory) &lt; MAX_INVENTORY <span class="keywd">then</span>
          incl(player.inventory, item_ident);
          displayAll;
        <span class="keywd">else</span>
          message := [] (<span class="stri">"take "</span> &amp; item[item_ident].name &amp; <span class="stri">":"</span>,
                         <span class="stri">"Can't carry any more!"</span>);
        <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">else</span>
        message := [] (<span class="stri">"take "</span> &amp; item[item_ident].name &amp; <span class="stri">":"</span>,
                       <span class="stri">"I can't reach it!"</span>);
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">else</span>
      message := [] (<span class="stri">"take "</span> &amp; name &amp; <span class="stri">":"</span>,
                     upper(name) &amp; <span class="stri">"S are too heavy!"</span>);
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: takeItem <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: line <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: column <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">itemType</span>: item_ident <span class="keywd">is</span> NO_ITEM;
    <span class="keywd">var</span> <span class="type">monsterType</span>: monster_ident <span class="keywd">is</span> NO_MONSTER;
  <span class="keywd">begin</span>
    displayBox(light_red);
    message := [] (<span class="stri">"take"</span>);
    displayMessage;
    message := 0 <span class="op">times</span> <span class="stri">""</span>;
    command := getc(KEYBOARD);
    xPos := clickedXPos(KEYBOARD);
    yPos := clickedYPos(KEYBOARD);
    xPos -:= BORDER_DIST;
    yPos -:= BORDER_DIST;
    line := succ(yPos <span class="op">div</span> PIXMAP_SIZE);
    column := succ(xPos <span class="op">div</span> PIXMAP_SIZE);
    <span class="keywd">if</span> line >= 1 <span class="op">and</span> line &lt;= ROOM_LINES <span class="op">and</span>
        column >= 1 <span class="op">and</span> column &lt;= ROOM_COLUMNS <span class="keywd">then</span>
      <span class="keywd">case</span> room[player.room].data[line][column] <span class="keywd">of</span>
        <span class="keywd">when</span> {<span class="stri">'#'</span>, <span class="stri">'&amp;'</span>, <span class="stri">':'</span>, <span class="stri">';'</span>}:
          message := [] (<span class="stri">"take wall:"</span>,
                         <span class="stri">"Impossible!!"</span>);
        <span class="keywd">when</span> {<span class="stri">'W'</span>, <span class="stri">'R'</span>, <span class="stri">'N'</span>, <span class="stri">'P'</span>, <span class="stri">'Y'</span>}:
          message := [] (<span class="stri">"take bed:"</span>,
                         <span class="stri">"BEDS are too heavy!"</span>);
        <span class="keywd">when</span> {<span class="stri">'U'</span>, <span class="stri">'D'</span>}:
          message := [] (<span class="stri">"take staircase:"</span>,
                         <span class="stri">"Impossible!!"</span>);
        <span class="keywd">when</span> {<span class="stri">'='</span>}:
          message := [] (<span class="stri">"take gate:"</span>,
                         <span class="stri">"Impossible!!"</span>);
        <span class="keywd">when</span> {<span class="stri">'>'</span>}:
          message := [] (<span class="stri">"take balcony:"</span>,
                         <span class="stri">"Impossible!!"</span>);
        <span class="keywd">when</span> {<span class="stri">'?'</span>}:
          <span class="keywd">if</span> player.room = GARDEN_SOUTH <span class="keywd">then</span>
            takeItem(LARGE_GEM, <span class="stri">"fountain"</span>, line, column);
          <span class="keywd">elsif</span> player.room = BALCONY <span class="keywd">then</span>
            message := [] (<span class="stri">"take fountain:"</span>,
                           <span class="stri">"FOUNTAINS are too heavy!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'{'</span>}:
          message := [] (<span class="stri">"take chains:"</span>,
                         <span class="stri">"They're Connected to the wall."</span>);
        <span class="keywd">when</span> {<span class="stri">'$'</span>}:
          takeItem(NECKLACE, <span class="stri">"statue"</span>, line, column);
        <span class="keywd">when</span> {<span class="stri">'%'</span>}:
          <span class="keywd">if</span> player.room = KITCHEN <span class="keywd">then</span>
            message := [] (<span class="stri">"take table:"</span>,
                           <span class="stri">"TABLES are too heavy!"</span>);
          <span class="keywd">elsif</span> player.room = THRONE_ROOM <span class="keywd">then</span>
            message := [] (<span class="stri">"take throne:"</span>,
                           <span class="stri">"THRONES are too heavy!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'@'</span>}:
          <span class="keywd">if</span> player.room = CHEFS_QUARTERS <span class="keywd">then</span>
            takeItem(WINE_FLASK, <span class="stri">"desk"</span>, line, column);
          <span class="keywd">elsif</span> player.room = YELLOW_ROOM <span class="keywd">then</span>
            takeItem(GLASSES, <span class="stri">"desk"</span>, line, column);
          <span class="keywd">elsif</span> player.room = KINGS_STUDY <span class="keywd">then</span>
            takeItem(KEY, <span class="stri">"desk"</span>, line, column);
          <span class="keywd">elsif</span> player.room = LIBRARY_WEST_END <span class="keywd">then</span>
            takeItem(BOOK, <span class="stri">"shelve"</span>, line, column);
          <span class="keywd">elsif</span> player.room = LIBRARY_EAST_END <span class="keywd">then</span>
            message := [] (<span class="stri">"take shelve:"</span>,
                           <span class="stri">"SHELVES are too heavy!"</span>);
          <span class="keywd">elsif</span> player.room = STORAGE_ROOM <span class="keywd">then</span>
            message := [] (<span class="stri">"take shelve:"</span>,
                           <span class="stri">"SHELVES are too heavy!"</span>);
          <span class="keywd">elsif</span> player.room = WINE_CELLAR <span class="keywd">then</span>
            message := [] (<span class="stri">"take barrel:"</span>,
                           <span class="stri">"BARRELS are too heavy!"</span>);
          <span class="keywd">elsif</span> player.room = TORTURE_ROOM <span class="keywd">then</span>
            message := [] (<span class="stri">"take table:"</span>,
                           <span class="stri">"TABLES are too heavy!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'|'</span>}:
          <span class="keywd">if</span> player.room = SORCERERS_QUARTERS <span class="keywd">then</span>
            message := [] (<span class="stri">"take mirror:"</span>,
                           <span class="stri">"MIRRORS are too heavy!"</span>);
          <span class="keywd">elsif</span> player.room = BALCONY <span class="keywd">then</span>
            message := [] (<span class="stri">"take balcony:"</span>,
                           <span class="stri">"Impossible!!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">'+'</span>, <span class="stri">'*'</span>}:
          message := [] (<span class="stri">"take bush:"</span>,
                         <span class="stri">"Impossible!!"</span>);
        <span class="keywd">when</span> {<span class="stri">'a'</span> .. <span class="stri">'z'</span>}:
          item_ident := itemType <span class="op">conv</span> (room[player.room].data[line][column]);
          <span class="keywd">if</span> item_ident &lt;> NO_ITEM <span class="keywd">then</span>
            message := [] (<span class="stri">"take "</span> &amp; item[item_ident].name);
            displayMessage;
            message := 0 <span class="op">times</span> <span class="stri">""</span>;
            moveTo(pred(column) * PIXMAP_SIZE, pred(line) * PIXMAP_SIZE);
          <span class="keywd">end</span> <span class="keywd">if</span>;
        <span class="keywd">when</span> {<span class="stri">' '</span>}:
          monster_ident := searchMonster(xPos, yPos);
          <span class="keywd">if</span> monster_ident &lt;> NO_MONSTER <span class="keywd">then</span>
            message := [] (<span class="stri">"take "</span> &amp; monster[monster_ident].name &amp; <span class="stri">":"</span>,
                           <span class="stri">"I don't think that would be very safe!"</span>);
          <span class="keywd">elsif</span> xPos >= player.xPos <span class="op">and</span>
              xPos &lt; player.xPos + PIXMAP_SIZE <span class="op">and</span>
              yPos >= player.yPos <span class="op">and</span>
              yPos &lt; player.yPos + PIXMAP_SIZE <span class="keywd">then</span>
            message := [] (<span class="stri">"take player:"</span>,
                           <span class="stri">"Impossible!!"</span>);
          <span class="keywd">else</span>
            message := [] (<span class="stri">"take floor:"</span>,
                           <span class="stri">"Impossible!!"</span>);
          <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;
    <span class="keywd">end</span> <span class="keywd">if</span>;
    displayMessage;
    displayBox(white);
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: quitGame <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">begin</span>
    <span class="keywd">if</span> isOkay([](<span class="stri">"Quit the castle game?"</span>)) <span class="keywd">then</span>
      exitGame := TRUE;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: playGame <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
    <span class="keywd">var</span> <span class="type">integer</span>: xPos <span class="keywd">is</span> 0;
    <span class="keywd">var</span> <span class="type">integer</span>: yPos <span class="keywd">is</span> 0;
  <span class="keywd">begin</span>
    displayAll;
    <span class="keywd">while</span> player.living <span class="op">and</span> <span class="op">not</span> exitGame <span class="keywd">do</span>

      command := getc(KEYBOARD);
      <span class="keywd">case</span> command <span class="keywd">of</span>
        <span class="keywd">when</span> {KEY_LEFT}:  move(WEST);
        <span class="keywd">when</span> {KEY_RIGHT}: move(EAST);
        <span class="keywd">when</span> {KEY_UP}:    move(NORTH);
        <span class="keywd">when</span> {KEY_DOWN}:  move(SOUTH);
        <span class="keywd">when</span> {KEY_ESC}:   bossMode(exitGame);
        <span class="keywd">when</span> {<span class="stri">'Q'</span>, <span class="stri">'q'</span>, KEY_CLOSE}: quitGame;
        <span class="keywd">when</span> {KEY_MOUSE1}:
          xPos := clickedXPos(KEYBOARD);
          yPos := clickedYPos(KEYBOARD);
          <span class="keywd">if</span> xPos >= BUTTONS_1_XPOS <span class="op">and</span> xPos &lt; BUTTONS_1_XPOS + 80 <span class="op">and</span>
            yPos >= BUTTON_YPOS_MIN <span class="op">and</span> yPos &lt;= BUTTON_YPOS_MIN + 3 * 32 <span class="keywd">then</span>
            <span class="keywd">case</span> (yPos - BUTTON_YPOS_MIN) <span class="op">div</span> 32 <span class="keywd">of</span>
              <span class="keywd">when</span> {0}: loadGame;
              <span class="keywd">when</span> {1}: saveGame;
              <span class="keywd">when</span> {2}: quitGame;
            <span class="keywd">end</span> <span class="keywd">case</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> xPos >= BUTTONS_2_XPOS <span class="op">and</span> xPos &lt; BUTTONS_2_XPOS + 80 <span class="op">and</span>
              yPos >= BUTTON_YPOS_MIN <span class="op">and</span> yPos &lt;= BUTTON_YPOS_MIN + 2 * 32 <span class="keywd">then</span>
            <span class="keywd">case</span> (yPos - BUTTON_YPOS_MIN) <span class="op">div</span> 32 <span class="keywd">of</span>
              <span class="keywd">when</span> {0}: takeItem;
              <span class="keywd">when</span> {1}: dropItem;
            <span class="keywd">end</span> <span class="keywd">case</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> xPos >= BUTTONS_3_XPOS <span class="op">and</span> xPos &lt; BUTTONS_3_XPOS + 80 <span class="op">and</span>
              yPos >= BUTTON_YPOS_MIN <span class="op">and</span> yPos &lt;= BUTTON_YPOS_MIN + 2 * 32 <span class="keywd">then</span>
            <span class="keywd">case</span> (yPos - BUTTON_YPOS_MIN) <span class="op">div</span> 32 <span class="keywd">of</span>
              <span class="keywd">when</span> {0}: lookItem;
              <span class="keywd">when</span> {1}: useItem;
            <span class="keywd">end</span> <span class="keywd">case</span>;
          <span class="keywd">end</span> <span class="keywd">if</span>;
          <span class="keywd">if</span> xPos &lt; 2 * BORDER_DIST + ROOM_COLUMNS * PIXMAP_SIZE <span class="op">and</span>
              yPos &lt; 2 * BORDER_DIST + ROOM_LINES * PIXMAP_SIZE <span class="keywd">then</span>
            moveTo(xPos - BORDER_DIST - STEP_SIZE, yPos - BORDER_DIST - STEP_SIZE);
          <span class="keywd">end</span> <span class="keywd">if</span>;
      <span class="keywd">end</span> <span class="keywd">case</span>;

      checkRoom;

      moveMonsters;

      <span class="keywd">if</span> player.room = ESCAPED <span class="op">or</span> <span class="op">not</span> player.living <span class="keywd">then</span>
        exitGame := TRUE;
        endOfGame;
      <span class="keywd">end</span> <span class="keywd">if</span>;
    <span class="keywd">end</span> <span class="keywd">while</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;


<span class="keywd">const</span> <span class="type">proc</span>: main <span class="keywd">is</span> <span class="keywd">func</span>
  <span class="keywd">local</span>
    <span class="keywd">var</span> <span class="type">char</span>: command <span class="keywd">is</span> <span class="stri">' '</span>;
  <span class="keywd">begin</span>
    screen(1024, 768);
    selectInput(curr_win, KEY_CLOSE, TRUE);
    clear(curr_win, white);
    screen := open(curr_win, 16);
    KEYBOARD := GRAPH_KEYBOARD;
    initGame;
    welcomeScreen;
    command := getc(KEYBOARD);
    <span class="keywd">if</span> upper(command) &lt;> <span class="stri">'Q'</span> <span class="op">and</span> command &lt;> KEY_CLOSE <span class="op">and</span> command &lt;> KEY_ESC <span class="keywd">then</span>
      playGame;
    <span class="keywd">end</span> <span class="keywd">if</span>;
  <span class="keywd">end</span> <span class="keywd">func</span>;
</pre>
</body>
</html>
