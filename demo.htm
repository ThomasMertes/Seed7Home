<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>
Seed7 demos</title>
<meta name="author" content="Thomas Mertes" />
<meta name="copyright" content="Thomas Mertes" />
<meta name="keywords" content="Seed7, SeedSeven, Seed, Seven, 7, programming, language, extensible, extendable" />
<meta name="description" content="Seed7 - The extensible programming language" />
<meta name="page-topic" content="programming language, computer, software, downloads" />
<meta name="audience" content="all" />
<meta name="content-language" content="en" />
<meta name="robots" content="index,follow" />
<link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon" />
<link rel="stylesheet" href="style3.css" type="text/css" />
</head>
<body style="margin:0 0 0 0;">
<div style="background-image: url('images/header1x.png');" class="top_image">
<img style="overflow:hidden;" src="images/hearts7m.png" height="68" width="50"
 /><img style="overflow:hidden;" src="images/header3.png" height="68" width="745" />
</div>
<div style="background-image: url('images/fillpix.png');" class="space_below_top_image">
</div>
<div class="menu">

<a class="head" href="index.htm"><big>Seed7</big></a>
<a class="menu" href="faq.htm">FAQ</a>
<a class="menu" href="manual/index.htm">Manual</a>
<a class="menu" href="demo.htm">Demo</a>
<a class="menu" href="scrshots/index.htm">Screenshots</a>
<a class="menu" href="examples/index.htm">Examples</a>
<a class="menu" href="libraries/index.htm">Libraries</a>
<a class="menu" href="algorith/index.htm">Algorithms</a>
<a class="menu" href="benchmks/index.htm">Benchmarks</a>
<a class="menu" href="subject_index.htm">Index</a>
<a class="menu" href="http://sourceforge.net/project/showfiles.php?group_id=151126">Download</a>
<a class="menu" href="https://github.com/ThomasMertes/seed7">GitHub</a>
<a class="menu" href="build.htm">Build Seed7</a>
<a class="menu" href="links.htm">Links</a>

</div>
<div class="content">
<div style="padding-right:20;">
<p></p><hr /><h1 align="center">
Seed7 demo programs
</h1><hr />
<p></p>
<p>Start a program by clicking on the image.
Loading a program for the first time may take some time.
It may be necessary to unblock a blocked popup.
The button to unblock is often in or near to the browsers address line.
Usually there are also settings to allow the browser to open popup windows for this website.
While the program runs the browser tab needs to stay active.
The program will not work correctly if the browser opens it in a new tab instead of a popup window.
Only one program can run at a time. A running program can be terminated with:</p>
<div style="padding-bottom:20px;"><button onclick="closeAll()">Terminate program</button></div>
<br />
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="panicbutton" onclick="onpanic()" style="padding:0;border:none;background:none;"><img src="images/panic1m.png" width="201" height="147" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/panic.htm">Panic</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="mandelbrbutton" onclick="onmandelbr()" style="padding:0;border:none;background:none;"><img src="images/mandelbr2m.png" width="200" height="209" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/mandelbr.htm">Mandelbrot set viewer</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="planetsbutton" onclick="onplanets()" style="padding:0;border:none;background:none;"><img src="images/planets2m.png" width="200" height="154" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/planets.htm">Display planets and stars</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="klondikebutton" onclick="onklondike()" style="padding:0;border:none;background:none;"><img src="images/klondike2m.png" width="200" height="170" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/klondike.htm">Klondike solitaire</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="dnafightbutton" onclick="ondnafight()" style="padding:0;border:none;background:none;"><img src="images/dnafight2m.png" width="201" height="158" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/dnafight.htm">Dnafight programming game</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="sudoku7button" onclick="onsudoku7()" style="padding:0;border:none;background:none;"><img src="images/sudoku7_2m.png" width="200" height="162" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/sudoku7.htm">Sudoku</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="watorbutton" onclick="onwator()" style="padding:0;border:none;background:none;"><img src="images/wator1m.png" width="201" height="158" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/wator.htm">Planet Wator simulation</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="castlebutton" onclick="oncastle()" style="padding:0;border:none;background:none;"><img src="images/castle1m.png" width="200" height="154" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/castle.htm">Castle</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="tetgbutton" onclick="ontetg()" style="padding:0;border:none;background:none;"><img src="images/tetg1m.png" width="200" height="205" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/tetg.htm">Tetris</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="quizbutton" onclick="onquiz()" style="padding:0;border:none;background:none;"><img src="images/quiz_1m.png" width="200" height="143" border="0"></button><p style="text-align:center;">Programming quiz</p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="gkbdbutton" onclick="ongkbd()" style="padding:0;border:none;background:none;"><img src="images/gkbd1m.png" width="200" height="159" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/gkbd.htm">Graphic keybord test</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="pairsbutton" onclick="onpairs()" style="padding:0;border:none;background:none;"><img src="images/pairs1m.png" width="200" height="147" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/pairs.htm">Pairs</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="shisenbutton" onclick="onshisen()" style="padding:0;border:none;background:none;"><img src="images/shisen1m.png" width="200" height="147" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/shisen.htm">Shisen Sho</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="landerbutton" onclick="onlander()" style="padding:0;border:none;background:none;"><img src="images/lander1m.png" width="200" height="157" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/lander.htm">Lunar lander</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="mahjongbutton" onclick="onmahjong()" style="padding:0;border:none;background:none;"><img src="images/mahjong1m.png" width="200" height="143" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/mahjong.htm">Mahjong solitaire</a></p></div>
<div style="float:left;height:300px;margin-left:20px;margin-right:20px;"><button id="sokobanbutton" onclick="onsokoban()" style="padding:0;border:none;background:none;"><img src="images/sokoban1m.png" width="200" height="115" border="0"></button><p style="text-align:center;"> <a class="func_no_ul" href="scrshots/sokoban.htm">Sokoban</a></p></div>
<br style="clear:left;" />
<div id="div"></div>
<p>Clicking on the text shows a description of the program. 
Clicking on an image starts a JavaScript/WebAssembly program in the browser. 
The programs have been compiled from Seed7 source code. 
The same source code can be used to create native Linux, Windows or MacOs executables.</p>

<div><br /><a name="Synchronous_and_asynchronous_I_O"><h3>Synchronous and asynchronous I/O
</h3></a><p>
  Seed7 programs use synchronous I/O and browsers only support asynchronous I/O.
The asynchronous I/O of browsers requires that functions finish quickly and never
wait for anything. To wait for an input (e.g. a keypress), a function must register
a callback function (or promise) and terminate itself. Later when the input is
received, the callback function is called. For the next input, another callback
must be registered and so on.
</p><p>
With synchronous I/O a (possibly deeply nested) function can issue a read command.
The function will wait until the reading is completed. The state of the program
(local variables, parameters, etc.) will stay intact. Seed7 provides a driver to
map the synchronous I/O of Seed7 to the asynchronous I/O of browsers. After a
promise has been created, the whole call stack (local variables, parameters, etc.)
is saved and the program is terminated. When the promise is activated, the call
stack is restored and the program continues in the function.
</p><p>
With synchronous I/O you can do:
</p><pre class="indent">
<!--        -->write(<span class="stri">"Start new game [Y/N]? "</span>);
<!--        --><span class="keywd">case</span> getc(KEYBOARD) <span class="keywd">of</span>
<!--        -->  <span class="keywd">when</span> {<span class="stri">'y'</span>, <span class="stri">'Y'</span>}: newGame := TRUE;
<!--        -->  <span class="keywd">when</span> {<span class="stri">'n'</span>, <span class="stri">'N'</span>}: noop;
<!--        -->  <span class="keywd">otherwise</span>: writeln(<span class="stri">"Please type Y or N."</span>);
<!--        --><span class="keywd">end case</span>;
</pre></div>

<div><br /><a name="Active_and_non-active_tabs"><h3>Active and non-active tabs
</h3></a><p>
  Browsers distinguish between active and non-active tabs. In a non-active tab
every timer request (e.g. setTimeout) waits for at least a second. So all time
dependent things like animations will not run smoothly when the tab is not active.
When a new window is requested in JavaScript with window.open() the result is
either a popup or a new tab. There is a problem if a browser opens a tab instead
of a popup: The script runs in the old tab and the new tab gets the focus. Without
focus the script is slowed down and therefore time related functionality will not
work. The graphics driver for the browser tries to discover if a tab has been
opened instead of a popup. It uses heuristics for this purpose. If a tab has been
opened the new opened tab is closed and the content of the current tab is used as
window. To do that the current tab document is overwritten with a canvas. When the
program exits this tab is reloaded and this way it gets the original content.
</p></div>
<script type="text/javascript">
removeOldWindows();
var isRunning = ""

var panicscript = document.createElement("script");
panicscript.setAttribute("src", "demo/panic.js");
panicscript.setAttribute("type", "text/javascript");
panicscript.setAttribute("async", true);
panicscript.setAttribute("crossorigin", "anonymous");
var onpanic = function(){
  if (isRunning !== "") {
    if (isRunning !== "panic") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("panicbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(panicscript);
    isRunning = "panic";
  }
}

var mandelbrscript = document.createElement("script");
mandelbrscript.setAttribute("src", "demo/mandelbr.js");
mandelbrscript.setAttribute("type", "text/javascript");
mandelbrscript.setAttribute("async", true);
mandelbrscript.setAttribute("crossorigin", "anonymous");
var onmandelbr = function(){
  if (isRunning !== "") {
    if (isRunning !== "mandelbr") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("mandelbrbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(mandelbrscript);
    isRunning = "mandelbr";
  }
}

var planetsscript = document.createElement("script");
planetsscript.setAttribute("src", "demo/planets.js");
planetsscript.setAttribute("type", "text/javascript");
planetsscript.setAttribute("async", true);
planetsscript.setAttribute("crossorigin", "anonymous");
var onplanets = function(){
  if (isRunning !== "") {
    if (isRunning !== "planets") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("planetsbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(planetsscript);
    isRunning = "planets";
  }
}

var klondikescript = document.createElement("script");
klondikescript.setAttribute("src", "demo/klondike.js");
klondikescript.setAttribute("type", "text/javascript");
klondikescript.setAttribute("async", true);
klondikescript.setAttribute("crossorigin", "anonymous");
var onklondike = function(){
  if (isRunning !== "") {
    if (isRunning !== "klondike") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("klondikebutton").style.opacity="0.3";
    document.getElementById("div").appendChild(klondikescript);
    isRunning = "klondike";
  }
}

var dnafightscript = document.createElement("script");
dnafightscript.setAttribute("src", "demo/dnafight.js");
dnafightscript.setAttribute("type", "text/javascript");
dnafightscript.setAttribute("async", true);
dnafightscript.setAttribute("crossorigin", "anonymous");
var ondnafight = function(){
  if (isRunning !== "") {
    if (isRunning !== "dnafight") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("dnafightbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(dnafightscript);
    isRunning = "dnafight";
  }
}

var sudoku7script = document.createElement("script");
sudoku7script.setAttribute("src", "demo/sudoku7.js");
sudoku7script.setAttribute("type", "text/javascript");
sudoku7script.setAttribute("async", true);
sudoku7script.setAttribute("crossorigin", "anonymous");
var onsudoku7 = function(){
  if (isRunning !== "") {
    if (isRunning !== "sudoku7") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("sudoku7button").style.opacity="0.3";
    document.getElementById("div").appendChild(sudoku7script);
    isRunning = "sudoku7";
  }
}

var watorscript = document.createElement("script");
watorscript.setAttribute("src", "demo/wator.js");
watorscript.setAttribute("type", "text/javascript");
watorscript.setAttribute("async", true);
watorscript.setAttribute("crossorigin", "anonymous");
var onwator = function(){
  if (isRunning !== "") {
    if (isRunning !== "wator") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("watorbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(watorscript);
    isRunning = "wator";
  }
}

var castlescript = document.createElement("script");
castlescript.setAttribute("src", "demo/castle.js");
castlescript.setAttribute("type", "text/javascript");
castlescript.setAttribute("async", true);
castlescript.setAttribute("crossorigin", "anonymous");
var oncastle = function(){
  if (isRunning !== "") {
    if (isRunning !== "castle") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("castlebutton").style.opacity="0.3";
    document.getElementById("div").appendChild(castlescript);
    isRunning = "castle";
  }
}

var tetgscript = document.createElement("script");
tetgscript.setAttribute("src", "demo/tetg.js");
tetgscript.setAttribute("type", "text/javascript");
tetgscript.setAttribute("async", true);
tetgscript.setAttribute("crossorigin", "anonymous");
var ontetg = function(){
  if (isRunning !== "") {
    if (isRunning !== "tetg") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("tetgbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(tetgscript);
    isRunning = "tetg";
  }
}

var quizscript = document.createElement("script");
quizscript.setAttribute("src", "demo/quiz.js");
quizscript.setAttribute("type", "text/javascript");
quizscript.setAttribute("async", true);
quizscript.setAttribute("crossorigin", "anonymous");
var onquiz = function(){
  if (isRunning !== "") {
    if (isRunning !== "quiz") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("quizbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(quizscript);
    isRunning = "quiz";
  }
}

var gkbdscript = document.createElement("script");
gkbdscript.setAttribute("src", "demo/gkbd.js");
gkbdscript.setAttribute("type", "text/javascript");
gkbdscript.setAttribute("async", true);
gkbdscript.setAttribute("crossorigin", "anonymous");
var ongkbd = function(){
  if (isRunning !== "") {
    if (isRunning !== "gkbd") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("gkbdbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(gkbdscript);
    isRunning = "gkbd";
  }
}

var pairsscript = document.createElement("script");
pairsscript.setAttribute("src", "demo/pairs.js");
pairsscript.setAttribute("type", "text/javascript");
pairsscript.setAttribute("async", true);
pairsscript.setAttribute("crossorigin", "anonymous");
var onpairs = function(){
  if (isRunning !== "") {
    if (isRunning !== "pairs") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("pairsbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(pairsscript);
    isRunning = "pairs";
  }
}

var shisenscript = document.createElement("script");
shisenscript.setAttribute("src", "demo/shisen.js");
shisenscript.setAttribute("type", "text/javascript");
shisenscript.setAttribute("async", true);
shisenscript.setAttribute("crossorigin", "anonymous");
var onshisen = function(){
  if (isRunning !== "") {
    if (isRunning !== "shisen") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("shisenbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(shisenscript);
    isRunning = "shisen";
  }
}

var landerscript = document.createElement("script");
landerscript.setAttribute("src", "demo/lander.js");
landerscript.setAttribute("type", "text/javascript");
landerscript.setAttribute("async", true);
landerscript.setAttribute("crossorigin", "anonymous");
var onlander = function(){
  if (isRunning !== "") {
    if (isRunning !== "lander") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("landerbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(landerscript);
    isRunning = "lander";
  }
}

var mahjongscript = document.createElement("script");
mahjongscript.setAttribute("src", "demo/mahjong.js");
mahjongscript.setAttribute("type", "text/javascript");
mahjongscript.setAttribute("async", true);
mahjongscript.setAttribute("crossorigin", "anonymous");
var onmahjong = function(){
  if (isRunning !== "") {
    if (isRunning !== "mahjong") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("mahjongbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(mahjongscript);
    isRunning = "mahjong";
  }
}

var sokobanscript = document.createElement("script");
sokobanscript.setAttribute("src", "demo/sokoban.js");
sokobanscript.setAttribute("type", "text/javascript");
sokobanscript.setAttribute("async", true);
sokobanscript.setAttribute("crossorigin", "anonymous");
var onsokoban = function(){
  if (isRunning !== "") {
    if (isRunning !== "sokoban") {
      if (confirm("A program is already running (" + isRunning + ").\nYou need to terminate it before a new program can be started.\nShould " + isRunning + " be terminated now?")) {
        closeAll();
      } else {
        focusAll();
      }
    } else {
      focusAll();
    }
  } else {
    document.getElementById("sokobanbutton").style.opacity="0.3";
    document.getElementById("div").appendChild(sokobanscript);
    isRunning = "sokoban";
  }
}

function reloadPage() {
    setTimeout(function() {
        location.reload();
    }, 250);
}

const windowsReference = [];
const windowNames = [];

function registerWindow(windowObject){
    windowsReference.push(windowObject);
    windowNames.push(windowObject.name);
    localStorage.setItem("windowNames", windowNames);
}

function deregisterWindow(windowObject){
    const referenceIndex = windowsReference.indexOf(windowObject);
    if (referenceIndex > -1) {
        windowsReference.splice(referenceIndex, 1);
    }
    const nameIndex = windowNames.indexOf(windowObject.name);
    if (nameIndex > -1) {
        windowNames.splice(nameIndex, 1);
    }
    localStorage.setItem("windowNames", windowNames);
}

function focusAll(){
    if (windowsReference.length !== 0) {
        windowsReference.map(function(reference){
            reference.focus();
        });
    }
}

function closeAll(){
    if (windowsReference.length !== 0) {
        windowsReference.map(function(reference){
            reference.close();
        });
        localStorage.removeItem("windowNames");
        reloadPage();
    } else if (isRunning !== "") {
        reloadPage();
    }
}

function removeOldWindows(){
    const oldWindowNames = localStorage.getItem("windowNames");
    if(oldWindowNames){
        oldWindowNamesArray = oldWindowNames.split(",");
        oldWindowNamesArray.map(function(nameOfWindow){
            let aWindow = window.open("", nameOfWindow);
            if (aWindow !== null) {
                aWindow.close();
            }
        });
        localStorage.removeItem("windowNames");
    }
}

</script>
</div>
</div>
  </body>
</html>
